From esr at mail.berlios.de  Tue Sep 12 19:52:12 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 12 Sep 2006 19:52:12 +0200
Subject: [Sst-commit-watch] r533 - trunk
Message-ID: <200609121752.k8CHqC1i021638@sheep.berlios.de>

Author: esr
Date: 2006-09-12 19:52:11 +0200 (Tue, 12 Sep 2006)
New Revision: 533

Modified:
   trunk/sst.c
Log:
Reotganize documentatioin of changes, Add some stuff from Tom Amy's
web page.


Modified: trunk/sst.c
===================================================================
--- trunk/sst.c	2006-09-12 17:43:25 UTC (rev 532)
+++ trunk/sst.c	2006-09-12 17:52:11 UTC (rev 533)
@@ -42,25 +42,21 @@
 
 Here are Tom Almy's changes:
 
-   Compared to original version, I've changed the "help" command to
-   "call" and the "terminate" command to "quit" to better match
-   user expectations. The DECUS version apparently made those changes
-   as well as changing "freeze" to "save". However I like "freeze".
-   (Both "freeze" and "save" work in SST2K.)
+   In early 1997, I got the bright idea to look for references to
+   "Super Star Trek" on the World Wide Web. There weren't many hits,
+   but there was one that came up with 1979 Fortran sources! This
+   version had a few additional features that mine didn't have,
+   however mine had some feature it didn't have. So I merged its
+   features that I liked. I also took a peek at the DECUS version (a
+   port, less sources, to the PDP-10), and some other variations.
 
-   When I got a later (1979) version of Super Star Trek that I was converting
-   from, I added the emexit command from it.
+   1, Compared to the original UT version, I've changed the "help" command to
+      "call" and the "terminate" command to "quit" to better match
+      user expectations. The DECUS version apparently made those changes
+      as well as changing "freeze" to "save". However I like "freeze".
+      (Both "freeze" and "save" work in SST2K.)
 
-   That 1979 version also mentions srscan and lrscan working when
-   docked (using the starbase's scanners), so I made some changes here
-   to do this (and indicating that fact to the player), and then realized
-   the base would have a subspace radio as well -- doing a Chart when docked
-   updates the star chart, and all radio reports will be heard. The Dock
-   command will also give a report if a base is under attack.
-
-   Also added:
-
-   1. The experimental deathray originally had only a 5% chance of
+   2. The experimental deathray originally had only a 5% chance of
       success, but could be used repeatedly. I guess after a couple
       years of use, it was less "experimental" because the 1979
       version had a 70% success rate. However it was prone to breaking
@@ -68,23 +64,32 @@
       failure modes (great humor!).  (Now controlled by OPTION_DEATHRAY
       and turned off if game type is "plain".)
 
-   2. Tholian Web from the 1979 version.  (Now controlled by
+   3. The 1979 version also mentions srscan and lrscan working when
+      docked (using the starbase's scanners), so I made some changes here
+      to do this (and indicating that fact to the player), and then realized
+      the base would have a subspace radio as well -- doing a Chart when docked
+      updates the star chart, and all radio reports will be heard. The Dock
+      command will also give a report if a base is under attack.
+
+   4. Tholian Web from the 1979 version.  (Now controlled by
       OPTION_THOLIAN and turned off if game type is "plain".)
 
-   3. Enemies can ram the Enterprise. (Now controlled by OPTION_RAMMING
+   5. Enemies can ram the Enterprise. (Now controlled by OPTION_RAMMING
       and turned off if game type is "plain".)
 
-   4. Regular Klingons and Romulans can move in Expert and Emeritus games. 
+   6. Regular Klingons and Romulans can move in Expert and Emeritus games. 
       This code could use improvement. (Now controlled by OPTION_MVBADDY
       and turned off if game type is "plain".)
 
-   5. The deep-space probe feature from the DECUS version.  (Now controlled
+   7. The deep-space probe feature from the DECUS version.  (Now controlled
       by OPTION_PROBE and turned off if game type is "plain").
 
-   6. Bugfix: Klingon commander movements are no longer reported if long-range 
+   8. 'emexit' command from the 1979 version.
+
+   9. Bugfix: Klingon commander movements are no longer reported if long-range 
       sensors are damaged.
 
-   7. Bugfix: Better base positioning at startup (more spread out).
+   10. Bugfix: Better base positioning at startup (more spread out).
       That made sense to add because most people abort games with 
       bad base placement.
 



From esr at mail.berlios.de  Tue Sep 12 21:00:30 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 12 Sep 2006 21:00:30 +0200
Subject: [Sst-commit-watch] r534 - trunk/www
Message-ID: <200609121900.k8CJ0UbP028452@sheep.berlios.de>

Author: esr
Date: 2006-09-12 21:00:30 +0200 (Tue, 12 Sep 2006)
New Revision: 534

Modified:
   trunk/www/index.html
Log:
Mention related projects.


Modified: trunk/www/index.html
===================================================================
--- trunk/www/index.html	2006-09-12 17:52:11 UTC (rev 533)
+++ trunk/www/index.html	2006-09-12 19:00:30 UTC (rev 534)
@@ -19,14 +19,19 @@
 
 <h1 align='center'><code>Super Star Trek</code> &mdash; a classic computer game</h1>
 
-<p>This is the home page of Super Star Trek, a modern Unix port of the 
-University of Texas "Super Star Trek" game originally written in
-FORTRAN in the early 1970s.</p>
+<p>Save the Federation from the invading Klingons!  Visit exotic
+planets and strip-mine them for dilithium!  Encounter mysterious space
+thingies!  This is the home page of the classic Super Star Trek game
+from the days of slow teletypes, reloaded.</p>
 
-<p>SST is a kind of time machine back to what interactive programs were
+<p>SST2K is a modern Unix port of the University of Texas "Super Star
+Trek" game originally written in FORTRAN in the mid-1970s.  It has
+options to restrict its feature set to what was in earlier versions.</p>
+
+<p>SST2K is a kind of time machine back to what interactive programs were
 like in the days of hardcopy terminals, before graphics and before
 even video displays. Despite this archaism and decades after it was 
-written, SST retains significant play value.  We think it's both fun
+written, SST2K retains significant play value.  We think it's both fun
 and instructive to see how good a game could be written under those
 conditions.</p>
 
@@ -36,10 +41,10 @@
 Project Page</a> on berlios.de.  It builds and runs. We expect to do
 an actual release Real Soon Now.</p>
 
-<p>In the mean time, you can at least browse the <a href='sst-doc.html'>game
+<p>In the meantime, you can at least browse the <a href='sst-doc.html'>game
 documentation</a>.
 
-<p>You can read the project's <a href='TODO'>to-do list</a>.</p>  If
+<p>You can read the project's <a href='TODO'>to-do list</a>.  If
 you want to help with these things, here are the project mailing
 lists:</p>
 
@@ -64,6 +69,20 @@
 <p>There is a <a href='http://en.wikipedia.org/wiki/Super_Star_Trek'>Wikipedia 
 entry</a>.</p>
 
+<p>SST is fairly closely related to Eric Allman's BSD Trek, which also started
+life as a C translation of UT Super Star Trek.  BSD Trek is missing most of
+the post-1978 features of SST2K, but does add a cloaking device for the 
+Romulans.</p>
+
+<p>The only other really current Star Trek port we know of is 
+<a href='http://shankel.best.vwh.net/opentrek.html'>OpenTrek</a>,
+which appears to be set in the ST:TNG universe (featuring the Borg
+Collective as the villains) and has a fancy graphical interface.</p>
+
+<p>(There are also some multi-player Trek variants out there, notably
+XTrek and NetTrek, that have a very different feel from any of the
+Trek solitaires.)</p>
+
 <p>For a truly retro-Trek experience, see the <a
 href='http://www.calormen.com/Star_Trek/ASCII/'>Star Trek ASCII Art
 Archive</a>.</p>



From stsp at mail.berlios.de  Tue Sep 12 21:17:42 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Tue, 12 Sep 2006 21:17:42 +0200
Subject: [Sst-commit-watch] r535 - / trunk
Message-ID: <200609121917.k8CJHgl3030344@sheep.berlios.de>

Author: stsp
Date: 2006-09-12 21:17:42 +0200 (Tue, 12 Sep 2006)
New Revision: 535

Added:
   www/
Removed:
   trunk/www/
Log:
move away www, hope that wont make any harm

Copied: www (from rev 534, trunk/www)



From stsp at mail.berlios.de  Wed Sep 13 18:30:12 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Wed, 13 Sep 2006 18:30:12 +0200
Subject: [Sst-commit-watch] r536 - trunk
Message-ID: <200609131630.k8DGUCHs010573@sheep.berlios.de>

Author: stsp
Date: 2006-09-13 18:30:11 +0200 (Wed, 13 Sep 2006)
New Revision: 536

Modified:
   trunk/sst-doc.xml
   trunk/sst.xml
Log:
fix typos

Modified: trunk/sst-doc.xml
===================================================================
--- trunk/sst-doc.xml	2006-09-12 19:17:42 UTC (rev 535)
+++ trunk/sst-doc.xml	2006-09-13 16:30:11 UTC (rev 536)
@@ -1623,7 +1623,7 @@
 were distributed under the name SPACWR.</para>
 
 <para>Many different versions radiated from Mayfield's original; most
-og the ones in BASIC are descended from a SPACWR version that David
+of the ones in BASIC are descended from a SPACWR version that David
 Ahl published in <citetitle>101 BASIC Computer Games</citetitle>,
 July 1973. This was a port of Mayfield's version obtained from the HP
 Contributed Programs library.  </para>

Modified: trunk/sst.xml
===================================================================
--- trunk/sst.xml	2006-09-12 19:17:42 UTC (rev 535)
+++ trunk/sst.xml	2006-09-13 16:30:11 UTC (rev 536)
@@ -57,7 +57,7 @@
 <refsect1 id='authors'><title>AUTHORS</title> 
 <para>Super Star Trek was designed and written by David Matuszek, Paul
 Reynolds, and Don Smith in the 1970s.  It was resurrected by Tom Almy.
-The screen-oriented interface is by Stas Seergeev. This version has
+The screen-oriented interface is by Stas Sergeev. This version has
 been cleaned up and documented by Eric S. Raymond
 <email>esr at snark.thyrsus.com</email>.  There is a <ulink
 url='https://developer.berlios.de/projects/sst/'>project



From esr at mail.berlios.de  Wed Sep 13 18:36:25 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 13 Sep 2006 18:36:25 +0200
Subject: [Sst-commit-watch] r537 - trunk
Message-ID: <200609131636.k8DGaP1F029038@sheep.berlios.de>

Author: esr
Date: 2006-09-13 18:36:24 +0200 (Wed, 13 Sep 2006)
New Revision: 537

Modified:
   trunk/Makefile
Log:
Experimental X code starting from Jaap Bender's tutorial example at.
<http://www.kerguelen.org/x/>.


Modified: trunk/Makefile
===================================================================
--- trunk/Makefile	2006-09-13 16:30:11 UTC (rev 536)
+++ trunk/Makefile	2006-09-13 16:36:24 UTC (rev 537)
@@ -75,3 +75,7 @@
 
 version:
 	@echo $(VERSION)
+
+# Experimental XaW code, not yet integrated with the game
+xio: xio.c
+	cc xio.c -lXaw3d -o xio



From stsp at mail.berlios.de  Wed Sep 13 18:50:03 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Wed, 13 Sep 2006 18:50:03 +0200
Subject: [Sst-commit-watch] r538 - in branches/at-work: . doc src
Message-ID: <200609131650.k8DGo3Pb016574@sheep.berlios.de>

Author: stsp
Date: 2006-09-13 18:50:00 +0200 (Wed, 13 Sep 2006)
New Revision: 538

Modified:
   branches/at-work/TODO
   branches/at-work/doc/sst-doc.xml
   branches/at-work/doc/sst.xml
   branches/at-work/src/planets.c
   branches/at-work/src/setup.c
   branches/at-work/src/sst.c
   branches/at-work/src/sst.h
Log:
merge trunk

Modified: branches/at-work/TODO
===================================================================
--- branches/at-work/TODO	2006-09-13 16:36:24 UTC (rev 537)
+++ branches/at-work/TODO	2006-09-13 16:50:00 UTC (rev 538)
@@ -19,6 +19,3 @@
 * Russian translation
 
 * Wrap a GUI around it.
-
-* Find out what the deathray behavior was before Tom Almy changed it,
-  and reverse the change when the game type is 'plain'.

Modified: branches/at-work/doc/sst-doc.xml
===================================================================
--- branches/at-work/doc/sst-doc.xml	2006-09-13 16:36:24 UTC (rev 537)
+++ branches/at-work/doc/sst-doc.xml	2006-09-13 16:50:00 UTC (rev 538)
@@ -251,13 +251,14 @@
 The Emeritus game is strictly for masochists.</para>
 
 <para>The fourth question, new in SST2K, sets your game options.  A
-blank answer enables all SST2K features.  The option 'plain' disables
-a number of features (Tholians, planets &amp; dilithium, Thingies
-shooting back, deep-space-probes, Klingon ramming and movement,
-time-warping through black holes), approximating the original CDC 6600
-FORTRAN game from UT Austin.  The option 'almy' approximates Tom
-Almy's C translation from 1979, disabling Thingies shooting back and
-time-warping through black holes.</para>
+blank answer or 'fancy' enables all SST2K features.  The option
+'plain' disables a number of features (Tholians, planets &amp;
+dilithium, Thingies shooting back, deep-space-probes, Klingon ramming
+and movement, time-warping through black holes, death-ray upgrade),
+approximating the original CDC 6600 FORTRAN game from UT Austin.  The
+option 'almy' approximates Tom Almy's C translation from 1979,
+disabling Thingies shooting back, base shields, and time-warping
+through black holes.</para>
 
 </chapter>
 <chapter><title>How To Issue Commands</title>
@@ -1622,7 +1623,7 @@
 were distributed under the name SPACWR.</para>
 
 <para>Many different versions radiated from Mayfield's original; most
-og the ones in BASIC are descended from a SPACWR version that David
+of the ones in BASIC are descended from a SPACWR version that David
 Ahl published in <citetitle>101 BASIC Computer Games</citetitle>,
 July 1973. This was a port of Mayfield's version obtained from the HP
 Contributed Programs library.  </para>

Modified: branches/at-work/doc/sst.xml
===================================================================
--- branches/at-work/doc/sst.xml	2006-09-13 16:36:24 UTC (rev 537)
+++ branches/at-work/doc/sst.xml	2006-09-13 16:50:00 UTC (rev 538)
@@ -47,17 +47,17 @@
 example, you can invoke the program as</para>
 
 <programlisting>
-sst regular medium good plain
+sst regular medium good fancy
 </programlisting>
 
-<para>to start a regular medium game as a good player in 'plain'
-mode (with only the features from the FOTRAN original enabled).</para>
+<para>to start a regular medium game as a good player in 'fancy'
+mode (all features enabled).</para>
 </refsect1>
 
 <refsect1 id='authors'><title>AUTHORS</title> 
 <para>Super Star Trek was designed and written by David Matuszek, Paul
 Reynolds, and Don Smith in the 1970s.  It was resurrected by Tom Almy.
-The screen-oriented interface is by Stas Seergeev. This version has
+The screen-oriented interface is by Stas Sergeev. This version has
 been cleaned up and documented by Eric S. Raymond
 <email>esr at snark.thyrsus.com</email>.  There is a <ulink
 url='https://developer.berlios.de/projects/sst/'>project

Modified: branches/at-work/src/planets.c
===================================================================
--- branches/at-work/src/planets.c	2006-09-13 16:36:24 UTC (rev 537)
+++ branches/at-work/src/planets.c	2006-09-13 16:50:00 UTC (rev 538)
@@ -395,7 +395,7 @@
 
 void deathray(void) 
 {
-    double r = Rand();
+    double dprob, r = Rand();
 	
     ididit = 0;
     skip(1);
@@ -430,21 +430,26 @@
     skip(1);
     prouts("WHIRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR");
     skip(1);
-    if (r > .30) {
+    dprob = .30;
+    if (game.options & OPTION_PLAIN)
+	dprob = .5;
+    if (r > dprob) {
 	prouts("Sulu- \"Captain!  It's working!\"");
 	skip(2);
 	while (nenhere > 0)
 	    deadkl(game.kx[1],game.ky[1],game.quad[game.kx[1]][game.ky[1]],game.kx[1],game.ky[1]);
 	prout("Ensign Chekov-  \"Congratulations, Captain!\"");
 	if (KLINGREM == 0) finish(FWON);
-	prout("Spock-  \"Captain, I believe the `Experimental Death Ray'");
-	if (Rand() <= 0.05) {
-	    prout("   is still operational.\"");
+	if ((game.options & OPTION_PLAIN) == 0) {
+	    prout("Spock-  \"Captain, I believe the `Experimental Death Ray'");
+	    if (Rand() <= 0.05) {
+		prout("   is still operational.\"");
+	    }
+	    else {
+		prout("   has been rendered nonfunctional.\"");
+		game.damage[DDRAY] = 39.95;
+	    }
 	}
-	else {
-	    prout("   has been rendered nonfunctional.\"");
-	    game.damage[DDRAY] = 39.95;
-	}
 	return;
     }
     r = Rand();	// Pick failure method 

Modified: branches/at-work/src/setup.c
===================================================================
--- branches/at-work/src/setup.c	2006-09-13 16:36:24 UTC (rev 537)
+++ branches/at-work/src/setup.c	2006-09-13 16:50:00 UTC (rev 538)
@@ -468,12 +468,18 @@
 	proutn("Choose your game options: ");
 	scan();
     }
-    if (isit("plain"))
+    if (isit("plain")) {
 	// Approximates the UT FORTRAN version.
 	game.options &=~ (OPTION_THOLIAN | OPTION_PLANETS | OPTION_THINGY | OPTION_PROBE | OPTION_RAMMING | OPTION_MVBADDY | OPTION_BLKHOLE | OPTION_BASE);
-    if (isit("almy"))
+	game.options |= OPTION_PLAIN;
+    } 
+    else if (isit("almy")) {
 	// Approximates Tom Almy's version.
 	game.options &=~ (OPTION_THINGY | OPTION_BLKHOLE | OPTION_BASE);
+	game.options |= OPTION_ALMY;
+    }
+    else if (isit("fancy"))
+	/* do nothing */;
     else if (strlen(citem)) {
 	    proutn("What is \"");
 	    proutn(citem);

Modified: branches/at-work/src/sst.c
===================================================================
--- branches/at-work/src/sst.c	2006-09-13 16:36:24 UTC (rev 537)
+++ branches/at-work/src/sst.c	2006-09-13 16:50:00 UTC (rev 538)
@@ -39,44 +39,58 @@
 
 Here are Tom Almy's changes:
 
-   Compared to original version, I've changed the "help" command to
-   "call" and the "terminate" command to "quit" to better match
-   user expectations. The DECUS version apparently made those changes
-   as well as changing "freeze" to "save". However I like "freeze".
-   (Both "freeze" and "save" work in SST2K.)
+   In early 1997, I got the bright idea to look for references to
+   "Super Star Trek" on the World Wide Web. There weren't many hits,
+   but there was one that came up with 1979 Fortran sources! This
+   version had a few additional features that mine didn't have,
+   however mine had some feature it didn't have. So I merged its
+   features that I liked. I also took a peek at the DECUS version (a
+   port, less sources, to the PDP-10), and some other variations.
 
-   When I got a later version of Super Star Trek that I was converting
-   from, I added the emexit command.
+   1, Compared to the original UT version, I've changed the "help" command to
+      "call" and the "terminate" command to "quit" to better match
+      user expectations. The DECUS version apparently made those changes
+      as well as changing "freeze" to "save". However I like "freeze".
+      (Both "freeze" and "save" work in SST2K.)
 
-   That later version also mentions srscan and lrscan working when
-   docked (using the starbase's scanners), so I made some changes here
-   to do this (and indicating that fact to the player), and then realized
-   the base would have a subspace radio as well -- doing a Chart when docked
-   updates the star chart, and all radio reports will be heard. The Dock
-   command will also give a report if a base is under attack.
+   2. The experimental deathray originally had only a 5% chance of
+      success, but could be used repeatedly. I guess after a couple
+      years of use, it was less "experimental" because the 1979
+      version had a 70% success rate. However it was prone to breaking
+      after use. I upgraded the deathray, but kept the original set of
+      failure modes (great humor!).  (Now controlled by OPTION_DEATHRAY
+      and turned off if game type is "plain".)
 
-   Klingon commander movements are no longer reported if long-range 
-   sensors are damaged.
+   3. The 1979 version also mentions srscan and lrscan working when
+      docked (using the starbase's scanners), so I made some changes here
+      to do this (and indicating that fact to the player), and then realized
+      the base would have a subspace radio as well -- doing a Chart when docked
+      updates the star chart, and all radio reports will be heard. The Dock
+      command will also give a report if a base is under attack.
 
-   Also added:
+   4. Tholian Web from the 1979 version.  (Now controlled by
+      OPTION_THOLIAN and turned off if game type is "plain".)
 
-   1. Better base positioning at startup.
-
-   2. Deathray improvement (but keeping original failure alternatives).
-
-   3. Tholian Web.  (Now controlled by OPTION_THOLIAN and turned off 
-      if game type is "plain".)
-
-   4. Enemies can ram the Enterprise. (Now controlled by OPTION_RAMMING
+   5. Enemies can ram the Enterprise. (Now controlled by OPTION_RAMMING
       and turned off if game type is "plain".)
 
-   5. Regular Klingons and Romulans can move in Expert and Emeritus games. 
+   6. Regular Klingons and Romulans can move in Expert and Emeritus games. 
       This code could use improvement. (Now controlled by OPTION_MVBADDY
       and turned off if game type is "plain".)
 
-   6. The deep-space probe feature from the DECUS version.  (Now controlled
+   7. The deep-space probe feature from the DECUS version.  (Now controlled
       by OPTION_PROBE and turned off if game type is "plain").
 
+   8. 'emexit' command from the 1979 version.
+
+   9. Bugfix: Klingon commander movements are no longer reported if long-range 
+      sensors are damaged.
+
+   10. Bugfix: Better base positioning at startup (more spread out).
+      That made sense to add because most people abort games with 
+      bad base placement.
+
+   In June 2002, I fixed two known bugs and a documentation typo.
    In June 2004 I fixed a number of bugs involving: 1) parsing invalid
    numbers, 2) manual phasers when SR scan is damaged and commander is
    present, 3) time warping into the future, 4) hang when moving
@@ -100,8 +114,8 @@
 
    4. The Tholian can be hit with phasers.
 
-   5. SCom can't escape from you if no more enemies remain (without this, 
-      chasing SCom can take an eternity).
+   5. SCom can't escape from you if no more enemies remain 
+      (without this, chasing SCom can take an eternity).
 
    6. Probe target you enter is now the destination quadrant. Before I don't 
       remember what it was, but it was something I had difficulty using.
@@ -559,7 +573,7 @@
 {
     int i, option;
 
-    game.options = OPTION_ALL &~ (OPTION_IOMODES | OPTION_SHOWME);
+    game.options = OPTION_ALL &~ (OPTION_IOMODES | OPTION_SHOWME | OPTION_PLAIN | OPTION_ALMY);
     if (getenv("TERM"))
 	game.options |= OPTION_CURSES | OPTION_SHOWME;
     else

Modified: branches/at-work/src/sst.h
===================================================================
--- branches/at-work/src/sst.h	2006-09-13 16:36:24 UTC (rev 537)
+++ branches/at-work/src/sst.h	2006-09-13 16:50:00 UTC (rev 538)
@@ -108,6 +108,8 @@
 #define OPTION_MVBADDY	0x00000100	/* more enemies can move */
 #define OPTION_BLKHOLE	0x00000200	/* black hole may timewarp you */
 #define OPTION_BASE	0x00000400	/* bases have good shields */
+#define OPTION_PLAIN	0x01000000	/* user chose plain game */
+#define OPTION_ALMY	0x02000000	/* user chose Almy variant */
 
 /* Define devices */
 #define DSRSENS 0



From esr at mail.berlios.de  Wed Sep 13 19:18:31 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 13 Sep 2006 19:18:31 +0200
Subject: [Sst-commit-watch] r539 - trunk
Message-ID: <200609131718.k8DHIVp8007097@sheep.berlios.de>

Author: esr
Date: 2006-09-13 19:18:31 +0200 (Wed, 13 Sep 2006)
New Revision: 539

Added:
   trunk/xio.c
Log:
This is Jaap Boender's orinal example code.


Added: trunk/xio.c
===================================================================
--- trunk/xio.c	2006-09-13 16:50:00 UTC (rev 538)
+++ trunk/xio.c	2006-09-13 17:18:31 UTC (rev 539)
@@ -0,0 +1,35 @@
+#include <X11/Intrinsic.h>
+#include <X11/StringDefs.h>
+#include <X11/Shell.h>
+#include <X11/Xaw/Form.h>
+#include <X11/Xaw/Command.h>
+#include <X11/Xaw/AsciiText.h>
+
+XtAppContext app_context;
+Widget toplevel, form, quit, text;
+
+void quit_proc (Widget w, XtPointer client_data, XtPointer call_data)
+{ XtDestroyApplicationContext (app_context);
+  exit (0);
+}
+
+int main (int argc, char **argv)
+{ toplevel = XtVaOpenApplication (&app_context, "XThird", NULL, 0, &argc,
+                                  argv, NULL, applicationShellWidgetClass,
+				  XtNallowShellResize, True, NULL);
+  form = XtVaCreateManagedWidget ("form", formWidgetClass, toplevel, NULL); 
+  quit = XtVaCreateManagedWidget ("quit", commandWidgetClass, form, XtNlabel,
+                                  "Quit", NULL);
+  text = XtVaCreateManagedWidget ("text", asciiTextWidgetClass, form, 
+                                  XtNfromHoriz, quit, XtNresize,
+				  XawtextResizeBoth, XtNresizable, True, NULL);
+  XtAddCallback (quit, XtNcallback, quit_proc, NULL);
+  if (argc <= 1)
+    XtVaSetValues (text, XtNtype, XawAsciiString, XtNstring, "Fool! You should"
+                   " supply a file name!", NULL); 
+  else
+    XtVaSetValues (text, XtNtype, XawAsciiFile, XtNstring, argv [1], NULL);
+  XtVaSetValues (text, XtNeditType, XawtextRead, XtNdisplayCaret, False, NULL);
+  XtRealizeWidget (toplevel);
+  XtAppMainLoop (app_context);
+}



From esr at mail.berlios.de  Wed Sep 13 19:20:28 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 13 Sep 2006 19:20:28 +0200
Subject: [Sst-commit-watch] r540 - trunk
Message-ID: <200609131720.k8DHKS3H011535@sheep.berlios.de>

Author: esr
Date: 2006-09-13 19:20:21 +0200 (Wed, 13 Sep 2006)
New Revision: 540

Modified:
   trunk/xio.c
Log:
Clean up a warning.


Modified: trunk/xio.c
===================================================================
--- trunk/xio.c	2006-09-13 17:18:31 UTC (rev 539)
+++ trunk/xio.c	2006-09-13 17:20:21 UTC (rev 540)
@@ -1,3 +1,4 @@
+#include <stdlib.h>
 #include <X11/Intrinsic.h>
 #include <X11/StringDefs.h>
 #include <X11/Shell.h>
@@ -9,27 +10,31 @@
 Widget toplevel, form, quit, text;
 
 void quit_proc (Widget w, XtPointer client_data, XtPointer call_data)
-{ XtDestroyApplicationContext (app_context);
-  exit (0);
+{ 
+    XtDestroyApplicationContext (app_context);
+    exit (0);
 }
 
 int main (int argc, char **argv)
-{ toplevel = XtVaOpenApplication (&app_context, "XThird", NULL, 0, &argc,
-                                  argv, NULL, applicationShellWidgetClass,
-				  XtNallowShellResize, True, NULL);
-  form = XtVaCreateManagedWidget ("form", formWidgetClass, toplevel, NULL); 
-  quit = XtVaCreateManagedWidget ("quit", commandWidgetClass, form, XtNlabel,
-                                  "Quit", NULL);
-  text = XtVaCreateManagedWidget ("text", asciiTextWidgetClass, form, 
-                                  XtNfromHoriz, quit, XtNresize,
-				  XawtextResizeBoth, XtNresizable, True, NULL);
-  XtAddCallback (quit, XtNcallback, quit_proc, NULL);
-  if (argc <= 1)
-    XtVaSetValues (text, XtNtype, XawAsciiString, XtNstring, "Fool! You should"
-                   " supply a file name!", NULL); 
-  else
-    XtVaSetValues (text, XtNtype, XawAsciiFile, XtNstring, argv [1], NULL);
-  XtVaSetValues (text, XtNeditType, XawtextRead, XtNdisplayCaret, False, NULL);
-  XtRealizeWidget (toplevel);
-  XtAppMainLoop (app_context);
+{ 
+    toplevel = XtVaOpenApplication (&app_context, "XThird", NULL, 0, &argc,
+				    argv, NULL, applicationShellWidgetClass,
+				    XtNallowShellResize, True, NULL);
+    form = XtVaCreateManagedWidget ("form", formWidgetClass, toplevel, NULL); 
+    quit = XtVaCreateManagedWidget ("quit", commandWidgetClass, form, XtNlabel,
+				    "Quit", NULL);
+    text = XtVaCreateManagedWidget ("text", asciiTextWidgetClass, form, 
+				    XtNfromHoriz, quit, XtNresize,
+				    XawtextResizeBoth, XtNresizable, True, NULL);
+    XtAddCallback (quit, XtNcallback, quit_proc, NULL);
+    if (argc <= 1)
+	XtVaSetValues (text, XtNtype, XawAsciiString, 
+		       XtNstring, "Fool! You should"
+		       " supply a file name!", NULL); 
+    else
+	XtVaSetValues (text, XtNtype, XawAsciiFile, XtNstring, argv [1], NULL);
+    XtVaSetValues (text, XtNeditType, XawtextRead, XtNdisplayCaret, False, NULL);
+    XtRealizeWidget (toplevel);
+    XtAppMainLoop (app_context);
+    exit(0);
 }



From esr at mail.berlios.de  Wed Sep 13 19:29:05 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 13 Sep 2006 19:29:05 +0200
Subject: [Sst-commit-watch] r542 - trunk
Message-ID: <200609131729.k8DHT5Ym023260@sheep.berlios.de>

Author: esr
Date: 2006-09-13 19:29:04 +0200 (Wed, 13 Sep 2006)
New Revision: 542

Modified:
   trunk/xio.c
Log:
Widgets now stack vertically.


Modified: trunk/xio.c
===================================================================
--- trunk/xio.c	2006-09-13 17:20:32 UTC (rev 541)
+++ trunk/xio.c	2006-09-13 17:29:04 UTC (rev 542)
@@ -24,7 +24,7 @@
     quit = XtVaCreateManagedWidget ("quit", commandWidgetClass, form, XtNlabel,
 				    "Quit", NULL);
     text = XtVaCreateManagedWidget ("text", asciiTextWidgetClass, form, 
-				    XtNfromHoriz, quit, XtNresize,
+				    XtNfromVert, quit, XtNresize,
 				    XawtextResizeBoth, XtNresizable, True, NULL);
     XtAddCallback (quit, XtNcallback, quit_proc, NULL);
     if (argc <= 1)



From stsp at mail.berlios.de  Wed Sep 13 19:20:33 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Wed, 13 Sep 2006 19:20:33 +0200
Subject: [Sst-commit-watch] r541 - trunk
Message-ID: <200609131720.k8DHKXsx011929@sheep.berlios.de>

Author: stsp
Date: 2006-09-13 19:20:32 +0200 (Wed, 13 Sep 2006)
New Revision: 541

Added:
   trunk/ABOUT-NLS
   trunk/AUTHORS
   trunk/COPYING
   trunk/ChangeLog
   trunk/ChangeLog.old
   trunk/INSTALL
   trunk/Makefile.am
   trunk/Makefile.in
   trunk/NEWS
   trunk/aclocal.m4
   trunk/autogen.sh
   trunk/compile
   trunk/config.guess
   trunk/config.rpath
   trunk/config.sub
   trunk/configure
   trunk/configure.ac
   trunk/depcomp
   trunk/doc/
   trunk/install-sh
   trunk/m4/
   trunk/missing
   trunk/mkinstalldirs
   trunk/po/
   trunk/src/
Removed:
   trunk/Makefile
   trunk/ai.c
   trunk/battle.c
   trunk/events.c
   trunk/finish.c
   trunk/io.c
   trunk/makehelp.py
   trunk/moving.c
   trunk/planets.c
   trunk/reports.c
   trunk/setup.c
   trunk/sst-doc.xml
   trunk/sst-layer.xsl
   trunk/sst.c
   trunk/sst.h
   trunk/sst.xml
   trunk/sstlinux.c
   trunk/sstlinux.h
Modified:
   trunk/README
   trunk/TODO
Log:
merge the autotools branch

Copied: trunk/ABOUT-NLS (from rev 538, branches/at-work/ABOUT-NLS)

Copied: trunk/AUTHORS (from rev 538, branches/at-work/AUTHORS)

Copied: trunk/COPYING (from rev 538, branches/at-work/COPYING)

Copied: trunk/ChangeLog (from rev 538, branches/at-work/ChangeLog)

Copied: trunk/ChangeLog.old (from rev 538, branches/at-work/ChangeLog.old)

Copied: trunk/INSTALL (from rev 538, branches/at-work/INSTALL)

Deleted: trunk/Makefile
===================================================================
--- trunk/Makefile	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/Makefile	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,81 +0,0 @@
-#	Makefile for the Super Star Trek game
-
-VERSION=$(shell sed <sst.spec -n -e '/Version: \(.*\)/s//\1/p')
-
-CFLAGS= -O1 -g -Wall -DSSTDOC='"/usr/share/doc/sst/sst.doc"'
-
-.c.o:
-	$(CC) $(CFLAGS) -c $<
-
-CFILES= sst.c finish.c reports.c setup.c moving.c battle.c events.c ai.c planets.c io.c sstlinux.c
-OFILES= $(CFILES:.c=.o)
-HFILES=sst.h
-DOCS = README sst-doc.xml sst.xml sst-layer.xsl TODO
-
-# sst.doc and sst.6 are included so target system won't need xmlto
-SOURCES= $(CFILES) $(HFILES) $(DOCS) sst.doc sst.6 makehelp.py makefile sst.spec
-
-all: sst sst.doc
-
-ai.o: ai.c sst.h
-battle.o: battle.c sst.h
-events.o: events.c sst.h
-finish.o: finish.c sst.h
-io.o: io.c sst.h
-moving.o: moving.c sstlinux.h sst.h
-planets.o: planets.c sst.h
-reports.o: reports.c sst.h
-setup.o: setup.c sst.h
-sst.o: sst.c sstlinux.h sst.h
-sstlinux.o: sstlinux.c sstlinux.h
-
-sst:  $(OFILES)
-	gcc  -o sst $(OFILES) -lm -lcurses
-
-$(OFILES):  $(HFILES)
-
-sst.6: sst.xml
-	xmlto man sst.xml
-
-sst-doc.txt: sst-doc.xml
-	xmlto -m sst-layer.xsl txt sst-doc.xml
-sst.doc: sst-doc.txt
-	makehelp.py >sst.doc
-
-sst-doc.html: sst-doc.xml
-	xmlto xhtml-nochunks sst-doc.xml
-
-install: uninstall sst.6 sst.doc sst-doc.html 
-	install -m 755 -o 0 -g 0 -d $(ROOT)/usr/bin/
-	install -m 755 -o 0 -g 0 sst $(ROOT)/usr/bin/sst
-	install -m 755 -o 0 -g 0 -d $(ROOT)/usr/share/man/man6/
-	install -m 755 -o 0 -g 0 sst.6 $(ROOT)/usr/share/man/man6/sst.6
-	mkdir -p /usr/share/doc/sst/
-	install -m 644 -o 0 -g 0 sst.doc $(ROOT)/usr/share/doc/sst/
-	install -m 644 -o 0 -g 0 sst-doc.html $(ROOT)/usr/share/doc/sst/index.html
-
-uninstall:
-	rm -f ${ROOT}/usr/bin/sst ${ROOT}/usr/share/man/man6/sst.6
-	rm -fr ${ROOT}/usr/share/doc/sst/
-
-clean:
-	rm -f *.o sst sst-doc.html sst-doc.txt sst.doc
-
-# The "trunk" below assumes this is a Subversion working copy
-sst-$(VERSION).tar.gz: $(SOURCES) sst.6
-	ls $(SOURCES) sst.6 | sed s:^:sst-$(VERSION)/: >MANIFEST
-	(cd ..; ln -s trunk sst-$(VERSION))
-	(cd ..; tar -czvf trunk/sst-$(VERSION).tar.gz `cat trunk/MANIFEST`)
-	(cd ..; rm sst-$(VERSION))
-
-dist: sst-$(VERSION).tar.gz
-
-release: sst-$(VERSION).tar.gz sst.html
-	shipper; rm -f CHANGES ANNOUNCE* *.6 *.html *.rpm *.lsm MANIFEST
-
-version:
-	@echo $(VERSION)
-
-# Experimental XaW code, not yet integrated with the game
-xio: xio.c
-	cc xio.c -lXaw3d -o xio

Copied: trunk/Makefile.am (from rev 538, branches/at-work/Makefile.am)

Copied: trunk/Makefile.in (from rev 538, branches/at-work/Makefile.in)

Copied: trunk/NEWS (from rev 538, branches/at-work/NEWS)

Modified: trunk/README
===================================================================
--- trunk/README	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/README	2006-09-13 17:20:32 UTC (rev 541)
@@ -5,9 +5,6 @@
 This is the classic Super Star Trek game from the days of slow teletypes, 
 reloaded.
 
-There is one binary, sst.  
-On-line documentation goes to /usr/share/doc/sst.doc.
-
 If you enjoy this, check out other ancient games in the Retrocomputing Museum 
 at <http://www.catb.org/retro/>.
 

Modified: trunk/TODO
===================================================================
--- trunk/TODO	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/TODO	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,4 +1,21 @@
 		Super Star Trek TO-DO list
 
+
+Short-term items:
+
+* Bring the online help in sync with our commands changes
+
+* Find out why the online help contains the escape sequences like ~@~T (Eric?)
+
+* Adjust the sst.spec wrt the build system changes
+
+* Maybe make a release
+
+
+Long-term items:
+
+* gettextize
+
+* Russian translation
+
 * Wrap a GUI around it.
-

Copied: trunk/aclocal.m4 (from rev 538, branches/at-work/aclocal.m4)

Deleted: trunk/ai.c
===================================================================
--- trunk/ai.c	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/ai.c	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,615 +0,0 @@
-#include "sst.h"
-
-static int tryexit(int lookx, int looky, int ienm, int loccom, int irun) 
-{
-    int iqx, iqy, l;
-
-    iqx = quadx+(lookx+(QUADSIZE-1))/QUADSIZE - 1;
-    iqy = quady+(looky+(QUADSIZE-1))/QUADSIZE - 1;
-    if (!VALID_QUADRANT(iqx,iqy) ||
-	game.state.galaxy[iqx][iqy].supernova ||
-	game.state.galaxy[iqx][iqy].klingons > 8)
-	return 0; /* no can do -- neg energy, supernovae, or >8 Klingons */
-    if (ienm == IHR) return 0; /* Romulans cannot escape! */
-    if (irun == 0) {
-	/* avoid intruding on another commander's territory */
-	if (ienm == IHC) {
-	    for_commanders(l)
-		if (game.state.cx[l]==iqx && game.state.cy[l]==iqy) return 0;
-	    /* refuse to leave if currently attacking starbase */
-	    if (batx==quadx && baty==quady) return 0;
-	}
-	/* don't leave if over 1000 units of energy */
-	if (game.kpower[loccom] > 1000.) return 0;
-    }
-    /* print escape message and move out of quadrant.
-       We know this if either short or long range sensors are working */
-    if (game.damage[DSRSENS] == 0.0 || game.damage[DLRSENS] == 0.0 ||
-	condit == IHDOCKED) {
-	crmena(1, ienm, 2, game.kx[loccom], game.ky[loccom]);
-	prout(" escapes to %s (and regains strength).",
-	      cramlc(quadrant, iqx, iqy));
-    }
-    /* handle local matters related to escape */
-    game.quad[game.kx[loccom]][game.ky[loccom]] = IHDOT;
-    game.kx[loccom] = game.kx[nenhere];
-    game.ky[loccom] = game.ky[nenhere];
-    game.kavgd[loccom] = game.kavgd[nenhere];
-    game.kpower[loccom] = game.kpower[nenhere];
-    game.kdist[loccom] = game.kdist[nenhere];
-    klhere--;
-    nenhere--;
-    if (condit != IHDOCKED) newcnd();
-    /* Handle global matters related to escape */
-    game.state.galaxy[quadx][quady].klingons--;
-    game.state.galaxy[iqx][iqy].klingons++;
-    if (ienm==IHS) {
-	ishere=0;
-	iscate=0;
-	ientesc=0;
-	isatb=0;
-	game.future[FSCMOVE]=0.2777+game.state.date;
-	game.future[FSCDBAS]=FOREVER;
-	game.state.isx=iqx;
-	game.state.isy=iqy;
-    }
-    else {
-	for_commanders(l) {
-	    if (game.state.cx[l]==quadx && game.state.cy[l]==quady) {
-		game.state.cx[l]=iqx;
-		game.state.cy[l]=iqy;
-		break;
-	    }
-	}
-	comhere = 0;
-    }
-    return 1; /* success */
-}
-
-
-static void movebaddy(int comx, int comy, int loccom, int ienm) 
-{
-    int motion, mdist, nsteps, mx, my, nextx, nexty, lookx, looky, ll;
-    int irun = 0;
-    int krawlx, krawly;
-    int success;
-    int attempts;
-    /* This should probably be just comhere + ishere */
-    int nbaddys = skill >= SKILL_EXPERT ?
-	(int)((comhere*2 + ishere*2+klhere*1.23+irhere*1.5)/2.0):
-	(comhere + ishere);
-    double dist1, forces;
-
-    dist1 = game.kdist[loccom];
-    mdist = dist1 + 0.5; /* Nearest integer distance */
-
-    /* If SC, check with spy to see if should hi-tail it */
-    if (ienm==IHS &&
-	(game.kpower[loccom] <= 500.0 || (condit==IHDOCKED && game.damage[DPHOTON]==0))) {
-	irun = 1;
-	motion = -QUADSIZE;
-    }
-    else {
-	/* decide whether to advance, retreat, or hold position */
-/* Algorithm:
- * Enterprise has "force" based on condition of phaser and photon torpedoes.
- If both are operating full strength, force is 1000. If both are damaged,
- force is -1000. Having shields down subtracts an additional 1000.
-
- * Enemy has forces equal to the energy of the attacker plus
- 100*(K+R) + 500*(C+S) - 400 for novice through good levels OR
- 346*K + 400*R + 500*(C+S) - 400 for expert and emeritus.
-
- Attacker Initial energy levels (nominal):
- Klingon   Romulan   Commander   Super-Commander
- Novice    400        700        1200        
- Fair      425        750        1250
- Good      450        800        1300        1750
- Expert    475        850        1350        1875
- Emeritus  500        900        1400        2000
- VARIANCE   75        200         200         200
-
- Enemy vessels only move prior to their attack. In Novice - Good games
- only commanders move. In Expert games, all enemy vessels move if there
- is a commander present. In Emeritus games all enemy vessels move.
-
- *  If Enterprise is not docked, an agressive action is taken if enemy
- forces are 1000 greater than Enterprise.
-
- Agressive action on average cuts the distance between the ship and
- the enemy to 1/4 the original.
-
- *  At lower energy advantage, movement units are proportional to the
- advantage with a 650 advantage being to hold ground, 800 to move forward
- 1, 950 for two, 150 for back 4, etc. Variance of 100.
-
- If docked, is reduced by roughly 1.75*skill, generally forcing a
- retreat, especially at high skill levels.
-
- *  Motion is limited to skill level, except for SC hi-tailing it out.
- */
-
-	forces = game.kpower[loccom]+100.0*nenhere+400*(nbaddys-1);
-	if (shldup==0) forces += 1000; /* Good for enemy if shield is down! */
-	if (game.damage[DPHASER] == 0.0 || game.damage[DPHOTON] == 0.0) {
-	    if (game.damage[DPHASER] != 0) /* phasers damaged */
-		forces += 300.0;
-	    else
-		forces -= 0.2*(energy - 2500.0);
-	    if (game.damage[DPHOTON] != 0) /* photon torpedoes damaged */
-		forces += 300.0;
-	    else
-		forces -= 50.0*torps;
-	}
-	else {
-	    /* phasers and photon tubes both out! */
-	    forces += 1000.0;
-	}
-	motion = 0;
-	if (forces <= 1000.0 && condit != IHDOCKED) /* Typical situation */
-	    motion = ((forces+200.0*Rand())/150.0) - 5.0;
-	else {
-	    if (forces > 1000.0) /* Very strong -- move in for kill */
-		motion = (1.0-square(Rand()))*dist1 + 1.0;
-	    if (condit==IHDOCKED && (game.options & OPTION_BASE)) /* protected by base -- back off ! */
-		motion -= skill*(2.0-square(Rand()));
-	}
-#ifdef DEBUG
-	if (idebug) {
-	    proutn("MOTION = %1.2f", motion);
-	    proutn("  FORCES = %1,2f", forces);
-	}
-#endif
-	/* don't move if no motion */
-	if (motion==0) return;
-	/* Limit motion according to skill */
-	if (abs(motion) > skill) motion = (motion < 0) ? -skill : skill;
-    }
-    /* calculate preferred number of steps */
-    nsteps = motion < 0 ? -motion : motion;
-    if (motion > 0 && nsteps > mdist) nsteps = mdist; /* don't overshoot */
-    if (nsteps > QUADSIZE) nsteps = QUADSIZE; /* This shouldn't be necessary */
-    if (nsteps < 1) nsteps = 1; /* This shouldn't be necessary */
-#ifdef DEBUG
-    if (idebug) {
-	prout("NSTEPS = %d", nsteps);
-    }
-#endif
-    /* Compute preferred values of delta X and Y */
-    mx = sectx - comx;
-    my = secty - comy;
-    if (2.0 * abs(mx) < abs(my)) mx = 0;
-    if (2.0 * abs(my) < abs(sectx-comx)) my = 0;
-    if (mx != 0) mx = mx*motion < 0 ? -1 : 1;
-    if (my != 0) my = my*motion < 0 ? -1 : 1;
-    nextx = comx;
-    nexty = comy;
-    /* main move loop */
-    for (ll = 0; ll < nsteps; ll++) {
-#ifdef DEBUG
-	if (idebug) {
-	    prout("%d", ll+1);
-	}
-#endif
-	/* Check if preferred position available */
-	lookx = nextx + mx;
-	looky = nexty + my;
-	krawlx = mx < 0 ? 1 : -1;
-	krawly = my < 0 ? 1 : -1;
-	success = 0;
-	attempts = 0; /* Settle mysterious hang problem */
-	while (attempts++ < 20 && !success) {
-	    if (lookx < 1 || lookx > QUADSIZE) {
-		if (motion < 0 && tryexit(lookx, looky, ienm, loccom, irun))
-		    return;
-		if (krawlx == mx || my == 0) break;
-		lookx = nextx + krawlx;
-		krawlx = -krawlx;
-	    }
-	    else if (looky < 1 || looky > QUADSIZE) {
-		if (motion < 0 && tryexit(lookx, looky, ienm, loccom, irun))
-		    return;
-		if (krawly == my || mx == 0) break;
-		looky = nexty + krawly;
-		krawly = -krawly;
-	    }
-	    else if ((game.options & OPTION_RAMMING) && game.quad[lookx][looky] != IHDOT) {
-		/* See if we should ram ship */
-		if (game.quad[lookx][looky] == ship &&
-		    (ienm == IHC || ienm == IHS)) {
-		    ram(1, ienm, comx, comy);
-		    return;
-		}
-		if (krawlx != mx && my != 0) {
-		    lookx = nextx + krawlx;
-		    krawlx = -krawlx;
-		}
-		else if (krawly != my && mx != 0) {
-		    looky = nexty + krawly;
-		    krawly = -krawly;
-		}
-		else break; /* we have failed */
-	    }
-	    else success = 1;
-	}
-	if (success) {
-	    nextx = lookx;
-	    nexty = looky;
-#ifdef DEBUG
-	    if (idebug) {
-		prout(cramlc(neither, nextx, nexty));
-	    }
-#endif
-	}
-	else break; /* done early */
-    }
-    /* Put commander in place within same quadrant */
-    game.quad[comx][comy] = IHDOT;
-    game.quad[nextx][nexty] = ienm;
-    if (nextx != comx || nexty != comy) {
-	/* it moved */
-	game.kx[loccom] = nextx;
-	game.ky[loccom] = nexty;
-	game.kdist[loccom] = game.kavgd[loccom] =
-	    sqrt(square(sectx-nextx)+square(secty-nexty));
-	if (game.damage[DSRSENS] == 0 || condit == IHDOCKED) {
-	    proutn("***");
-	    cramen(ienm);
-	    proutn(" from %s", cramlc(2, comx, comy));
-	    if (game.kdist[loccom] < dist1) proutn(" advances to ");
-	    else proutn(" retreats to ");
-	    prout(cramlc(sector, nextx, nexty));
-	}
-    }
-}
-
-void movcom(void) 
-{
-    int ix, iy, i;
-
-#ifdef DEBUG
-    if (idebug) prout("MOVCOM");
-#endif
-
-    /* Figure out which Klingon is the commander (or Supercommander)
-       and do move */
-    if (comhere) 
-	for_local_enemies(i) {
-	    ix = game.kx[i];
-	    iy = game.ky[i];
-	    if (game.quad[ix][iy] == IHC) {
-		movebaddy(ix, iy, i, IHC);
-		break;
-	    }
-	}
-    if (ishere) 
-	for_local_enemies(i) {
-	    ix = game.kx[i];
-	    iy = game.ky[i];
-	    if (game.quad[ix][iy] == IHS) {
-		movebaddy(ix, iy, i, IHS);
-		break;
-	    }
-	}
-    /* if skill level is high, move other Klingons and Romulans too!
-       Move these last so they can base their actions on what the
-       commander(s) do. */
-    if (skill >= SKILL_EXPERT && (game.options & OPTION_MVBADDY)) 
-	for_local_enemies(i) {
-	    ix = game.kx[i];
-	    iy = game.ky[i];
-	    if (game.quad[ix][iy] == IHK || game.quad[ix][iy] == IHR)
-		movebaddy(ix, iy, i, game.quad[ix][iy]);
-	}
-
-    sortkl();
-}
-
-static int movescom(int iqx, int iqy, int flag, int *ipage) 
-{
-    int i;
-
-    if ((iqx==quadx && iqy==quady) ||
-	!VALID_QUADRANT(iqx, iqy) ||
-	game.state.galaxy[iqx][iqy].supernova ||
-	game.state.galaxy[iqx][iqy].klingons > 8) 
-	return 1;
-    if (flag) {
-	/* Avoid quadrants with bases if we want to avoid Enterprise */
-	for_starbases(i)
-	    if (game.state.baseqx[i]==iqx && game.state.baseqy[i]==iqy) return 1;
-    }
-    if (justin && !iscate) return 1;
-    /* do the move */
-    game.state.galaxy[game.state.isx][game.state.isy].klingons--;
-    game.state.isx = iqx;
-    game.state.isy = iqy;
-    game.state.galaxy[game.state.isx][game.state.isy].klingons++;
-    if (ishere) {
-	/* SC has scooted, Remove him from current quadrant */
-	iscate=0;
-	isatb=0;
-	ishere=0;
-	ientesc=0;
-	game.future[FSCDBAS]=FOREVER;
-	for_local_enemies(i) 
-	    if (game.quad[game.kx[i]][game.ky[i]] == IHS) break;
-	game.quad[game.kx[i]][game.ky[i]] = IHDOT;
-	game.kx[i] = game.kx[nenhere];
-	game.ky[i] = game.ky[nenhere];
-	game.kdist[i] = game.kdist[nenhere];
-	game.kavgd[i] = game.kavgd[nenhere];
-	game.kpower[i] = game.kpower[nenhere];
-	klhere--;
-	nenhere--;
-	if (condit!=IHDOCKED) newcnd();
-	sortkl();
-    }
-    /* check for a helpful planet */
-    for (i = 0; i < inplan; i++) {
-	if (game.state.plnets[i].x==game.state.isx && game.state.plnets[i].y==game.state.isy &&
-	    game.state.plnets[i].crystals == 1) {
-	    /* destroy the planet */
-	    DESTROY(&game.state.plnets[i]);
-	    game.state.galaxy[game.state.isx][game.state.isy].planets -= 1;
-	    if (game.damage[DRADIO] == 0.0 || condit == IHDOCKED) {
-		if (*ipage==0) pause_game(1);
-		*ipage = 1;
-		prout("Lt. Uhura-  \"Captain, Starfleet Intelligence reports");
-		proutn("   a planet in ");
-		proutn(cramlc(quadrant, game.state.isx, game.state.isy));
-		prout(" has been destroyed");
-		prout("   by the Super-commander.\"");
-	    }
-	    break;
-	}
-    }
-    return 0; /* looks good! */
-}
-			
-void scom(int *ipage)
-{
-    int i, i2, j, ideltax, ideltay, ibqx, ibqy, sx, sy, ifindit, iwhichb;
-    int iqx, iqy;
-    int basetbl[BASEMAX+1];
-    double bdist[BASEMAX+1];
-    int flag;
-#ifdef DEBUG
-    if (idebug) prout("SCOM");
-#endif
-
-    /* Decide on being active or passive */
-    flag = ((NKILLC+NKILLK)/(game.state.date+0.01-indate) < 0.1*skill*(skill+1.0) ||
-	    (game.state.date-indate) < 3.0);
-    if (iscate==0 && flag) {
-	/* compute move away from Enterprise */
-	ideltax = game.state.isx-quadx;
-	ideltay = game.state.isy-quady;
-	if (sqrt(ideltax*(double)ideltax+ideltay*(double)ideltay) > 2.0) {
-	    /* circulate in space */
-	    ideltax = game.state.isy-quady;
-	    ideltay = quadx-game.state.isx;
-	}
-    }
-    else {
-	/* compute distances to starbases */
-	if (game.state.rembase <= 0) {
-	    /* nothing left to do */
-	    game.future[FSCMOVE] = FOREVER;
-	    return;
-	}
-	sx = game.state.isx;
-	sy = game.state.isy;
-	for_starbases(i) {
-	    basetbl[i] = i;
-	    ibqx = game.state.baseqx[i];
-	    ibqy = game.state.baseqy[i];
-	    bdist[i] = sqrt(square(ibqx-sx) + square(ibqy-sy));
-	}
-	if (game.state.rembase > 1) {
-	    /* sort into nearest first order */
-	    int iswitch;
-	    do {
-		iswitch = 0;
-		for (i=1; i < game.state.rembase-1; i++) {
-		    if (bdist[i] > bdist[i+1]) {
-			int ti = basetbl[i];
-			double t = bdist[i];
-			bdist[i] = bdist[i+1];
-			bdist[i+1] = t;
-			basetbl[i] = basetbl[i+1];
-			basetbl[i+1] =ti;
-			iswitch = 1;
-		    }
-		}
-	    } while (iswitch);
-	}
-	/* look for nearest base without a commander, no Enterprise, and
-	   without too many Klingons, and not already under attack. */
-	ifindit = iwhichb = 0;
-
-	for_starbases(i2) {
-	    i = basetbl[i2];	/* bug in original had it not finding nearest*/
-	    ibqx = game.state.baseqx[i];
-	    ibqy = game.state.baseqy[i];
-	    if ((ibqx == quadx && ibqy == quady) ||
-		(ibqx == batx && ibqy == baty) ||
-		game.state.galaxy[ibqx][ibqy].supernova ||
-		game.state.galaxy[ibqx][ibqy].klingons > 8) 
-		continue;
-	    /* if there is a commander, an no other base is appropriate,
-	       we will take the one with the commander */
-	    for_commanders (j) {
-		if (ibqx==game.state.cx[j] && ibqy==game.state.cy[j] && ifindit!= 2) {
-		    ifindit = 2;
-		    iwhichb = i;
-		    break;
-		}
-	    }
-	    if (j > game.state.remcom) { /* no commander -- use this one */
-		ifindit = 1;
-		iwhichb = i;
-		break;
-	    }
-	}
-	if (ifindit==0) return; /* Nothing suitable -- wait until next time*/
-	ibqx = game.state.baseqx[iwhichb];
-	ibqy = game.state.baseqy[iwhichb];
-	/* decide how to move toward base */
-	ideltax = ibqx - game.state.isx;
-	ideltay = ibqy - game.state.isy;
-    }
-    /* Maximum movement is 1 quadrant in either or both axis */
-    if (ideltax > 1) ideltax = 1;
-    if (ideltax < -1) ideltax = -1;
-    if (ideltay > 1) ideltay = 1;
-    if (ideltay < -1) ideltay = -1;
-
-    /* try moving in both x and y directions */
-    iqx = game.state.isx + ideltax;
-    iqy = game.state.isy + ideltax;
-    if (movescom(iqx, iqy, flag, ipage)) {
-	/* failed -- try some other maneuvers */
-	if (ideltax==0 || ideltay==0) {
-	    /* attempt angle move */
-	    if (ideltax != 0) {
-		iqy = game.state.isy + 1;
-		if (movescom(iqx, iqy, flag, ipage)) {
-		    iqy = game.state.isy - 1;
-		    movescom(iqx, iqy, flag, ipage);
-		}
-	    }
-	    else {
-		iqx = game.state.isx + 1;
-		if (movescom(iqx, iqy, flag, ipage)) {
-		    iqx = game.state.isx - 1;
-		    movescom(iqx, iqy, flag, ipage);
-		}
-	    }
-	}
-	else {
-	    /* try moving just in x or y */
-	    iqy = game.state.isy;
-	    if (movescom(iqx, iqy, flag, ipage)) {
-		iqy = game.state.isy + ideltay;
-		iqx = game.state.isx;
-		movescom(iqx, iqy, flag, ipage);
-	    }
-	}
-    }
-    /* check for a base */
-    if (game.state.rembase == 0) {
-	game.future[FSCMOVE] = FOREVER;
-    }
-    else for_starbases(i) {
-	ibqx = game.state.baseqx[i];
-	ibqy = game.state.baseqy[i];
-	if (ibqx==game.state.isx && ibqy == game.state.isy && game.state.isx != batx && game.state.isy != baty) {
-	    /* attack the base */
-	    if (flag) return; /* no, don't attack base! */
-	    iseenit = 0;
-	    isatb=1;
-	    game.future[FSCDBAS] = game.state.date + 1.0 +2.0*Rand();
-	    if (game.future[FCDBAS] < FOREVER) game.future[FSCDBAS] +=
-		game.future[FCDBAS]-game.state.date;
-	    if (game.damage[DRADIO] > 0 && condit != IHDOCKED)
-		return; /* no warning */
-	    iseenit = 1;
-	    if (*ipage == 0)  pause_game(1);
-	    *ipage=1;
-	    proutn("Lt. Uhura-  \"Captain, the starbase in ");
-	    proutn(cramlc(quadrant, game.state.isx, game.state.isy));
-	    skip(1);
-	    prout("   reports that it is under attack from the Klingon Super-commander.");
-	    proutn("   It can survive until stardate %d.\"",
-		   (int)game.future[FSCDBAS]);
-	    if (resting==0) return;
-	    prout("Mr. Spock-  \"Captain, shall we cancel the rest period?\"");
-	    if (ja()==0) return;
-	    resting = 0;
-	    Time = 0.0; /* actually finished */
-	    return;
-	}
-    }
-    /* Check for intelligence report */
-    if (
-#ifdef DEBUG
-	idebug==0 &&
-#endif
-	(Rand() > 0.2 ||
-	 (game.damage[DRADIO] > 0.0 && condit != IHDOCKED) ||
-	 !game.state.galaxy[game.state.isx][game.state.isy].charted))
-	return;
-    if (*ipage==0) pause_game(1);
-    *ipage = 1;
-    prout("Lt. Uhura-  \"Captain, Starfleet Intelligence reports");
-    proutn("   the Super-commander is in ");
-    proutn(cramlc(quadrant, game.state.isx, game.state. isy));
-    prout(".\"");
-    return;
-}
-
-void movetho(void)
-{
-    int idx, idy, im, i, dum, my;
-    /* Move the Tholian */
-    if (ithere==0 || justin == 1) return;
-
-    if (ithx == 1 && ithy == 1) {
-	idx = 1; idy = QUADSIZE;
-    }
-    else if (ithx == 1 && ithy == QUADSIZE) {
-	idx = QUADSIZE; idy = QUADSIZE;
-    }
-    else if (ithx == QUADSIZE && ithy == QUADSIZE) {
-	idx = QUADSIZE; idy = 1;
-    }
-    else if (ithx == QUADSIZE && ithy == 1) {
-	idx = 1; idy = 1;
-    }
-    else {
-	/* something is wrong! */
-	ithere = 0;
-	return;
-    }
-
-    /* Do nothing if we are blocked */
-    if (game.quad[idx][idy]!= IHDOT && game.quad[idx][idy]!= IHWEB) return;
-    game.quad[ithx][ithy] = IHWEB;
-
-    if (ithx != idx) {
-	/* move in x axis */
-	im = fabs((double)idx - ithx)/((double)idx - ithx);
-	while (ithx != idx) {
-	    ithx += im;
-	    if (game.quad[ithx][ithy]==IHDOT) game.quad[ithx][ithy] = IHWEB;
-	}
-    }
-    else if (ithy != idy) {
-	/* move in y axis */
-	im = fabs((double)idy - ithy)/((double)idy - ithy);
-	while (ithy != idy) {
-	    ithy += im;
-	    if (game.quad[ithx][ithy]==IHDOT) game.quad[ithx][ithy] = IHWEB;
-	}
-    }
-    game.quad[ithx][ithy] = IHT;
-    game.kx[nenhere]=ithx;
-    game.ky[nenhere]=ithy;
-
-    /* check to see if all holes plugged */
-    for_sectors(i) {
-	if (game.quad[1][i]!=IHWEB && game.quad[1][i]!=IHT) return;
-	if (game.quad[QUADSIZE][i]!=IHWEB && game.quad[QUADSIZE][i]!=IHT) return;
-	if (game.quad[i][1]!=IHWEB && game.quad[i][1]!=IHT) return;
-	if (game.quad[i][QUADSIZE]!=IHWEB && game.quad[i][QUADSIZE]!=IHT) return;
-    }
-    /* All plugged up -- Tholian splits */
-    game.quad[ithx][ithy]=IHWEB;
-    dropin(IHBLANK, &dum, &my);
-    crmena(1,IHT, 2, ithx, ithy);
-    prout(" completes web.");
-    ithere = ithx = ithy = 0;
-    nenhere--;
-    return;
-}

Copied: trunk/autogen.sh (from rev 538, branches/at-work/autogen.sh)

Deleted: trunk/battle.c
===================================================================
--- trunk/battle.c	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/battle.c	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,1226 +0,0 @@
-#include <unistd.h>
-#include "sst.h"
-
-void doshield(int i) 
-{
-    int key;
-    enum {NONE, SHUP, SHDN, NRG} action = NONE;
-
-    ididit = 0;
-
-    if (i == 2) action = SHUP;
-    else {
-	key = scan();
-	if (key == IHALPHA) {
-	    if (isit("transfer"))
-		action = NRG;
-	    else {
-		chew();
-		if (game.damage[DSHIELD]) {
-		    prout("Shields damaged and down.");
-		    return;
-		}
-		if (isit("up"))
-		    action = SHUP;
-		else if (isit("down"))
-		    action = SHDN;
-	    }
-	}
-	if (action==NONE) {
-	    proutn("Do you wish to change shield energy? ");
-	    if (ja()) {
-		proutn("Energy to transfer to shields- ");
-		action = NRG;
-	    }
-	    else if (game.damage[DSHIELD]) {
-		prout("Shields damaged and down.");
-		return;
-	    }
-	    else if (shldup) {
-		proutn("Shields are up. Do you want them down? ");
-		if (ja()) action = SHDN;
-		else {
-		    chew();
-		    return;
-		}
-	    }
-	    else {
-		proutn("Shields are down. Do you want them up? ");
-		if (ja()) action = SHUP;
-		else {
-		    chew();
-		    return;
-		}
-	    }
-	}
-    }
-    switch (action) {
-    case SHUP: /* raise shields */
-	if (shldup) {
-	    prout("Shields already up.");
-	    return;
-	}
-	shldup = 1;
-	shldchg = 1;
-	if (condit != IHDOCKED) energy -= 50.0;
-	prout("Shields raised.");
-	if (energy <= 0) {
-	    skip(1);
-	    prout("Shields raising uses up last of energy.");
-	    finish(FNRG);
-	    return;
-	}
-	ididit=1;
-	return;
-    case SHDN:
-	if (shldup==0) {
-	    prout("Shields already down.");
-	    return;
-	}
-	shldup=0;
-	shldchg=1;
-	prout("Shields lowered.");
-	ididit=1;
-	return;
-    case NRG:
-	while (scan() != IHREAL) {
-	    chew();
-	    proutn("Energy to transfer to shields- ");
-	}
-	chew();
-	if (aaitem==0) return;
-	if (aaitem > energy) {
-	    prout("Insufficient ship energy.");
-	    return;
-	}
-	ididit = 1;
-	if (shield+aaitem >= inshld) {
-	    prout("Shield energy maximized.");
-	    if (shield+aaitem > inshld) {
-		prout("Excess energy requested returned to ship energy");
-	    }
-	    energy -= inshld-shield;
-	    shield = inshld;
-	    return;
-	}
-	if (aaitem < 0.0 && energy-aaitem > inenrg) {
-	    /* Prevent shield drain loophole */
-	    skip(1);
-	    prout("Engineering to bridge--");
-	    prout("  Scott here. Power circuit problem, Captain.");
-	    prout("  I can't drain the shields.");
-	    ididit = 0;
-	    return;
-	}
-	if (shield+aaitem < 0) {
-	    prout("All shield energy transferred to ship.");
-	    energy += shield;
-	    shield = 0.0;
-	    return;
-	}
-	proutn("Scotty- \"");
-	if (aaitem > 0)
-	    prout("Transferring energy to shields.\"");
-	else
-	    prout("Draining energy from shields.\"");
-	shield += aaitem;
-	energy -= aaitem;
-	return;
-    case NONE:;	/* avoid gcc warning */
-    }
-}
-
-void ram(int ibumpd, int ienm, int ix, int iy)
-{
-    double type = 1.0, extradm;
-    int icas, l;
-	
-    prouts("***RED ALERT!  RED ALERT!");
-    skip(1);
-    prout("***COLLISION IMMINENT.");
-    skip(2);
-    proutn("***");
-    crmshp();
-    switch (ienm) {
-    case IHR: type = 1.5; break;
-    case IHC: type = 2.0; break;
-    case IHS: type = 2.5; break;
-    case IHT: type = 0.5; break;
-    case IHQUEST: type = 4.0; break;
-    }
-    proutn(ibumpd ? " rammed by " : " rams ");
-    crmena(0, ienm, 2, ix, iy);
-    if (ibumpd) proutn(" (original position)");
-    skip(1);
-    deadkl(ix, iy, ienm, sectx, secty);
-    proutn("***");
-    crmshp();
-    prout(" heavily damaged.");
-    icas = 10.0+20.0*Rand();
-    prout("***Sickbay reports %d casualties", icas);
-    casual += icas;
-    for (l=0; l < NDEVICES; l++) {
-	if (l == DDRAY) 
-	    continue; // Don't damage deathray 
-	if (game.damage[l] < 0) 
-	    continue;
-	extradm = (10.0*type*Rand()+1.0)*damfac;
-	game.damage[l] += Time + extradm; /* Damage for at least time of travel! */
-    }
-    shldup = 0;
-    if (KLINGREM) {
-	pause_game(2);
-	dreprt();
-    }
-    else finish(FWON);
-    return;
-}
-
-void torpedo(double course, double r, int inx, int iny, double *hit, int i, int n)
-{
-    int l, iquad=0, ix=0, iy=0, jx=0, jy=0, shoved=0, ll;
-	
-    double ac=course + 0.25*r;
-    double angle = (15.0-ac)*0.5235988;
-    double bullseye = (15.0 - course)*0.5235988;
-    double deltax=-sin(angle), deltay=cos(angle), x=inx, y=iny, bigger;
-    double ang, temp, xx, yy, kp, h1;
-
-    bigger = fabs(deltax);
-    if (fabs(deltay) > bigger) bigger = fabs(deltay);
-    deltax /= bigger;
-    deltay /= bigger;
-    if (game.damage[DSRSENS]==0 || condit==IHDOCKED) 
-	setwnd(srscan_window);
-    else 
-	setwnd(message_window);
-    /* Loop to move a single torpedo */
-    for (l=1; l <= 15; l++) {
-	x += deltax;
-	ix = x + 0.5;
-	y += deltay;
-	iy = y + 0.5;
-	if (!VALID_SECTOR(ix, iy)) break;
-	iquad=game.quad[ix][iy];
-	tracktorpedo(ix, iy, l, i, n, iquad);
-	if (iquad==IHDOT) continue;
-	/* hit something */
-	setwnd(message_window);
-	skip(1);	/* start new line after text track */
-	switch(iquad) {
-	case IHE: /* Hit our ship */
-	case IHF:
-	    skip(1);
-	    proutn("Torpedo hits ");
-	    crmshp();
-	    prout(".");
-	    *hit = 700.0 + 100.0*Rand() -
-		1000.0*sqrt(square(ix-inx)+square(iy-iny))*
-		fabs(sin(bullseye-angle));
-	    *hit = fabs(*hit);
-	    newcnd(); /* we're blown out of dock */
-	    /* We may be displaced. */
-	    if (landed==1 || condit==IHDOCKED) return; /* Cheat if on a planet */
-	    ang = angle + 2.5*(Rand()-0.5);
-	    temp = fabs(sin(ang));
-	    if (fabs(cos(ang)) > temp) temp = fabs(cos(ang));
-	    xx = -sin(ang)/temp;
-	    yy = cos(ang)/temp;
-	    jx=ix+xx+0.5;
-	    jy=iy+yy+0.5;
-	    if (!VALID_SECTOR(jx, jy)) return;
-	    if (game.quad[jx][jy]==IHBLANK) {
-		finish(FHOLE);
-		return;
-	    }
-	    if (game.quad[jx][jy]!=IHDOT) {
-		/* can't move into object */
-		return;
-	    }
-	    sectx = jx;
-	    secty = jy;
-	    crmshp();
-	    shoved = 1;
-	    break;
-					  
-	case IHC: /* Hit a commander */
-	case IHS:
-	    if (Rand() <= 0.05) {
-		crmena(1, iquad, 2, ix, iy);
-		prout(" uses anti-photon device;");
-		prout("   torpedo neutralized.");
-		return;
-	    }
-	case IHR: /* Hit a regular enemy */
-	case IHK:
-	    /* find the enemy */
-	    for_local_enemies(ll)
-		if (ix==game.kx[ll] && iy==game.ky[ll]) break;
-	    kp = fabs(game.kpower[ll]);
-	    h1 = 700.0 + 100.0*Rand() -
-		1000.0*sqrt(square(ix-inx)+square(iy-iny))*
-		fabs(sin(bullseye-angle));
-	    h1 = fabs(h1);
-	    if (kp < h1) h1 = kp;
-	    game.kpower[ll] -= (game.kpower[ll]<0 ? -h1 : h1);
-	    if (game.kpower[ll] == 0) {
-		deadkl(ix, iy, iquad, ix, iy);
-		return;
-	    }
-	    crmena(1, iquad, 2, ix, iy);
-	    /* If enemy damaged but not destroyed, try to displace */
-	    ang = angle + 2.5*(Rand()-0.5);
-	    temp = fabs(sin(ang));
-	    if (fabs(cos(ang)) > temp) temp = fabs(cos(ang));
-	    xx = -sin(ang)/temp;
-	    yy = cos(ang)/temp;
-	    jx=ix+xx+0.5;
-	    jy=iy+yy+0.5;
-	    if (!VALID_SECTOR(jx, jy)) {
-		prout(" damaged but not destroyed.");
-		return;
-	    }
-	    if (game.quad[jx][jy]==IHBLANK) {
-		prout(" buffeted into black hole.");
-		deadkl(ix, iy, iquad, jx, jy);
-		return;
-	    }
-	    if (game.quad[jx][jy]!=IHDOT) {
-		/* can't move into object */
-		prout(" damaged but not destroyed.");
-		return;
-	    }
-	    proutn(" damaged--");
-	    game.kx[ll] = jx;
-	    game.ky[ll] = jy;
-	    shoved = 1;
-	    break;
-	case IHB: /* Hit a base */
-	    skip(1);
-	    prout("***STARBASE DESTROYED..");
-	    for_starbases(ll) {
-		if (game.state.baseqx[ll]==quadx && game.state.baseqy[ll]==quady) {
-		    game.state.baseqx[ll]=game.state.baseqx[game.state.rembase];
-		    game.state.baseqy[ll]=game.state.baseqy[game.state.rembase];
-		    break;
-		}
-	    }
-	    game.quad[ix][iy]=IHDOT;
-	    game.state.rembase--;
-	    basex=basey=0;
-	    game.state.galaxy[quadx][quady].starbase--;
-	    game.state.chart[quadx][quady].starbase--;
-	    game.state.basekl++;
-	    newcnd();
-	    return;
-	case IHP: /* Hit a planet */
-	    crmena(1, iquad, 2, ix, iy);
-	    prout(" destroyed.");
-	    game.state.nplankl++;
-	    game.state.galaxy[quadx][quady].planets--;
-	    DESTROY(&game.state.plnets[iplnet]);
-	    iplnet = 0;
-	    plnetx = plnety = 0;
-	    game.quad[ix][iy] = IHDOT;
-	    if (landed==1) {
-		/* captain perishes on planet */
-		finish(FDPLANET);
-	    }
-	    return;
-	case IHSTAR: /* Hit a star */
-	    if (Rand() > 0.10) {
-		nova(ix, iy);
-		return;
-	    }
-	    crmena(1, IHSTAR, 2, ix, iy);
-	    prout(" unaffected by photon blast.");
-	    return;
-	case IHQUEST: /* Hit a thingy */
-	    if (!(game.options & OPTION_THINGY) || Rand()>0.7) {
-		skip(1);
-		prouts("AAAAIIIIEEEEEEEEAAAAAAAAUUUUUGGGGGHHHHHHHHHHHH!!!");
-		skip(1);
-		prouts("    HACK!     HACK!    HACK!        *CHOKE!*  ");
-		skip(1);
-		proutn("Mr. Spock-");
-		prouts("  \"Fascinating!\"");
-		skip(1);
-		deadkl(ix, iy, iquad, ix, iy);
-	    } else {
-		/*
-		 * Stas Sergeev added the possibility that
-		 * you can shove the Thingy and piss it off.
-		 * It then becomes an enemy and may fire at you.
-		 */
-		iqengry=1;
-		shoved=1;
-	    }
-	    return;
-	case IHBLANK: /* Black hole */
-	    skip(1);
-	    crmena(1, IHBLANK, 2, ix, iy);
-	    prout(" swallows torpedo.");
-	    return;
-	case IHWEB: /* hit the web */
-	    skip(1);
-	    prout("***Torpedo absorbed by Tholian web.");
-	    return;
-	case IHT:  /* Hit a Tholian */
-	    h1 = 700.0 + 100.0*Rand() -
-		1000.0*sqrt(square(ix-inx)+square(iy-iny))*
-		fabs(sin(bullseye-angle));
-	    h1 = fabs(h1);
-	    if (h1 >= 600) {
-		game.quad[ix][iy] = IHDOT;
-		ithere = 0;
-		ithx = ithy = 0;
-		deadkl(ix, iy, iquad, ix, iy);
-		return;
-	    }
-	    skip(1);
-	    crmena(1, IHT, 2, ix, iy);
-	    if (Rand() > 0.05) {
-		prout(" survives photon blast.");
-		return;
-	    }
-	    prout(" disappears.");
-	    game.quad[ix][iy] = IHWEB;
-	    ithere = ithx = ithy = 0;
-	    nenhere--;
-	    {
-		int dum, my;
-		dropin(IHBLANK, &dum, &my);
-	    }
-	    return;
-					
-	default: /* Problem! */
-	    skip(1);
-	    proutn("Don't know how to handle collision with ");
-	    crmena(1, iquad, 2, ix, iy);
-	    skip(1);
-	    return;
-	}
-	break;
-    }
-    if(curwnd!=message_window) {
-	setwnd(message_window);
-    }
-    if (shoved) {
-	game.quad[jx][jy]=iquad;
-	game.quad[ix][iy]=IHDOT;
-	prout(" displaced by blast to %s ", cramlc(sector, jx, jy));
-	for_local_enemies(ll)
-	    game.kdist[ll] = game.kavgd[ll] = sqrt(square(sectx-game.kx[ll])+square(secty-game.ky[ll]));
-	sortkl();
-	return;
-    }
-    skip(1);
-    prout("Torpedo missed.");
-    return;
-}
-
-static void fry(double hit) 
-{
-    double ncrit, extradm;
-    int ktr=1, l, ll, j, cdam[NDEVICES];
-
-    /* a critical hit occured */
-    if (hit < (275.0-25.0*skill)*(1.0+0.5*Rand())) return;
-
-    ncrit = 1.0 + hit/(500.0+100.0*Rand());
-    proutn("***CRITICAL HIT--");
-    /* Select devices and cause damage */
-    for (l = 0; l < ncrit && 0 < NDEVICES; l++) {
-	do {
-	    j = NDEVICES*Rand();
-	    /* Cheat to prevent shuttle damage unless on ship */
-	} while 
-	      (game.damage[j]<0.0 || (j==DSHUTTL && iscraft!=1) || j==DDRAY);
-	cdam[l] = j;
-	extradm = (hit*damfac)/(ncrit*(75.0+25.0*Rand()));
-	game.damage[j] += extradm;
-	if (l > 0) {
-	    for (ll=2; ll<=l && j != cdam[ll-1]; ll++) ;
-	    if (ll<=l) continue;
-	    ktr += 1;
-	    if (ktr==3) skip(1);
-	    proutn(" and ");
-	}
-	proutn(device[j]);
-    }
-    prout(" damaged.");
-    if (game.damage[DSHIELD] && shldup) {
-	prout("***Shields knocked down.");
-	shldup=0;
-    }
-}
-
-void attack(int torps_ok) 
-{
-    /* torps_ok == 0 forces use of phasers in an attack */
-    int percent, ihurt=0, l, i=0, jx, jy, iquad, itflag;
-    int atackd = 0, attempt = 0;
-    double hit;
-    double pfac, dustfac, hitmax=0.0, hittot=0.0, chgfac=1.0, r;
-
-    iattak = 1;
-    if (alldone) return;
-#ifdef DEBUG
-    if (idebug) prout("ATTACK!");
-#endif
-
-    if (ithere) movetho();
-
-    if (neutz) { /* The one chance not to be attacked */
-	neutz = 0;
-	return;
-    }
-    if ((((comhere || ishere) && (justin == 0)) || skill == SKILL_EMERITUS)&&(torps_ok!=0)) movcom();
-    if (nenhere==0 || (nenhere==1 && iqhere && iqengry==0)) return;
-    pfac = 1.0/inshld;
-    if (shldchg == 1) chgfac = 0.25+0.5*Rand();
-    skip(1);
-    if (skill <= SKILL_FAIR) i = 2;
-    for_local_enemies(l) {
-	if (game.kpower[l] < 0) continue;	/* too weak to attack */
-	/* compute hit strength and diminsh shield power */
-	r = Rand();
-	/* Increase chance of photon torpedos if docked or enemy energy low */
-	if (condit == IHDOCKED) r *= 0.25;
-	if (game.kpower[l] < 500) r *= 0.25; 
-	jx = game.kx[l];
-	jy = game.ky[l];
-	iquad = game.quad[jx][jy];
-	if (iquad==IHT || (iquad==IHQUEST && !iqengry)) continue;
-	itflag = (iquad == IHK && r > 0.0005) || !torps_ok ||
-	    (iquad==IHC && r > 0.015) ||
-	    (iquad==IHR && r > 0.3) ||
-	    (iquad==IHS && r > 0.07) ||
-	    (iquad==IHQUEST && r > 0.05);
-	if (itflag) {
-	    /* Enemy uses phasers */
-	    if (condit == IHDOCKED) continue; /* Don't waste the effort! */
-	    attempt = 1; /* Attempt to attack */
-	    dustfac = 0.8+0.05*Rand();
-	    hit = game.kpower[l]*pow(dustfac,game.kavgd[l]);
-	    game.kpower[l] *= 0.75;
-	}
-	else { /* Enemy used photon torpedo */
-	    double course = 1.90985*atan2((double)secty-jy, (double)jx-sectx);
-	    hit = 0;
-	    proutn("***TORPEDO INCOMING");
-	    if (game.damage[DSRSENS] <= 0.0) {
-		proutn(" From ");
-		crmena(0, iquad, i, jx, jy);
-	    }
-	    attempt = 1;
-	    prout("  ");
-	    r = (Rand()+Rand())*0.5 -0.5;
-	    r += 0.002*game.kpower[l]*r;
-	    torpedo(course, r, jx, jy, &hit, 1, 1);
-	    if (KLINGREM==0) 
-		finish(FWON); /* Klingons did themselves in! */
-	    if (game.state.galaxy[quadx][quady].supernova || alldone) 
-		return; /* Supernova or finished */
-	    if (hit == 0) continue;
-	}
-	if (shldup != 0 || shldchg != 0 || condit==IHDOCKED) {
-	    /* shields will take hits */
-	    double absorb, hitsh, propor = pfac*shield*(condit==IHDOCKED ? 2.1 : 1.0);
-	    if(propor < 0.1) propor = 0.1;
-	    hitsh = propor*chgfac*hit+1.0;
-	    atackd=1;
-	    absorb = 0.8*hitsh;
-	    if (absorb > shield) absorb = shield;
-	    shield -= absorb;
-	    hit -= hitsh;
-	    if (condit==IHDOCKED) dock(0);
-	    if (propor > 0.1 && hit < 0.005*energy) continue;
-	}
-	/* It's a hit -- print out hit size */
-	atackd = 1; /* We weren't going to check casualties, etc. if
-		       shields were down for some strange reason. This
-		       doesn't make any sense, so I've fixed it */
-	ihurt = 1;
-	proutn("%d unit hit", (int)hit);
-	if ((game.damage[DSRSENS] > 0 && itflag) || skill<=SKILL_FAIR) {
-	    proutn(" on the ");
-	    crmshp();
-	}
-	if (game.damage[DSRSENS] <= 0.0 && itflag) {
-	    proutn(" from ");
-	    crmena(0, iquad, i, jx, jy);
-	}
-	skip(1);
-	/* Decide if hit is critical */
-	if (hit > hitmax) hitmax = hit;
-	hittot += hit;
-	fry(hit);
-	prout("Hit %g energy %g", hit, energy);
-	energy -= hit;
-	if (condit==IHDOCKED) 
-	    dock(0);
-    }
-    if (energy <= 0) {
-	/* Returning home upon your shield, not with it... */
-	finish(FBATTLE);
-	return;
-    }
-    if (attempt == 0 && condit == IHDOCKED)
-	prout("***Enemies decide against attacking your ship.");
-    if (atackd == 0) return;
-    percent = 100.0*pfac*shield+0.5;
-    if (ihurt==0) {
-	/* Shields fully protect ship */
-	proutn("Enemy attack reduces shield strength to ");
-    }
-    else {
-	/* Print message if starship suffered hit(s) */
-	skip(1);
-	proutn("Energy left %2d    shields ", (int)energy);
-	if (shldup) proutn("up ");
-	else if (game.damage[DSHIELD] == 0) proutn("down ");
-	else proutn("damaged, ");
-    }
-    prout("%d%%,   torpedoes left %d", percent, torps);
-    /* Check if anyone was hurt */
-    if (hitmax >= 200 || hittot >= 500) {
-	int icas= hittot*Rand()*0.015;
-	if (icas >= 2) {
-	    skip(1);
-	    prout("Mc Coy-  \"Sickbay to bridge.  We suffered %d casualties", icas);
-	    prout("   in that last attack.\"");
-	    casual += icas;
-	}
-    }
-    /* After attack, reset average distance to enemies */
-    for_local_enemies(l)
-	game.kavgd[l] = game.kdist[l];
-    sortkl();
-    return;
-}
-		
-void deadkl(int ix, int iy, int type, int ixx, int iyy) 
-{
-    /* Added ixx and iyy allow enemy to "move" before dying */
-
-    int i,j;
-
-    skip(1);
-    crmena(1, type, 2, ixx, iyy);
-    /* Decide what kind of enemy it is and update approriately */
-    if (type == IHR) {
-	/* chalk up a Romulan */
-	game.state.galaxy[quadx][quady].romulans--;
-	irhere--;
-	game.state.nromrem--;
-    }
-    else if (type == IHT) {
-	/* Killed a Tholian */
-	ithere = 0;
-    }
-    else if (type == IHQUEST) {
-	/* Killed a Thingy */
-	iqhere=iqengry=thingx=thingy=0;
-    }
-    else {
-	/* Some type of a Klingon */
-	game.state.galaxy[quadx][quady].klingons--;
-	klhere--;
-	switch (type) {
-	case IHC:
-	    comhere = 0;
-	    for_commanders (i)
-		if (game.state.cx[i]==quadx && game.state.cy[i]==quady) break;
-	    game.state.cx[i] = game.state.cx[game.state.remcom];
-	    game.state.cy[i] = game.state.cy[game.state.remcom];
-	    game.state.cx[game.state.remcom] = 0;
-	    game.state.cy[game.state.remcom] = 0;
-	    game.state.remcom--;
-	    game.future[FTBEAM] = FOREVER;
-	    if (game.state.remcom != 0)
-		game.future[FTBEAM] = game.state.date + expran(1.0*incom/game.state.remcom);
-	    break;
-	case IHK:
-	    game.state.remkl--;
-	    break;
-	case IHS:
-	    game.state.nscrem--;
-	    ishere = game.state.isx = game.state.isy = isatb = iscate = 0;
-	    game.future[FSCMOVE] = game.future[FSCDBAS] = FOREVER;
-	    break;
-	}
-    }
-
-    /* For each kind of enemy, finish message to player */
-    prout(" destroyed.");
-    game.quad[ix][iy] = IHDOT;
-    if (KLINGREM==0) return;
-
-    game.state.remtime = game.state.remres/(game.state.remkl + 4*game.state.remcom);
-
-    /* Remove enemy ship from arrays describing local conditions */
-    if (game.future[FCDBAS] < FOREVER && batx==quadx && baty==quady && type==IHC)
-	game.future[FCDBAS] = FOREVER;
-    for_local_enemies(i)
-	if (game.kx[i]==ix && game.ky[i]==iy) break;
-    nenhere--;
-    if (i <= nenhere)  {
-	for (j=i; j<=nenhere; j++) {
-	    game.kx[j] = game.kx[j+1];
-	    game.ky[j] = game.ky[j+1];
-	    game.kpower[j] = game.kpower[j+1];
-	    game.kavgd[j] = game.kdist[j] = game.kdist[j+1];
-	}
-    }
-    game.kx[nenhere+1] = 0;
-    game.ky[nenhere+1] = 0;
-    game.kdist[nenhere+1] = 0;
-    game.kavgd[nenhere+1] = 0;
-    game.kpower[nenhere+1] = 0;
-    return;
-}
-
-static int targetcheck(double x, double y, double *course) 
-{
-    double deltx, delty;
-    /* Return TRUE if target is invalid */
-    if (!VALID_SECTOR(x, y)) {
-	huh();
-	return 1;
-    }
-    deltx = 0.1*(y - secty);
-    delty = 0.1*(sectx - x);
-    if (deltx==0 && delty== 0) {
-	skip(1);
-	prout("Spock-  \"Bridge to sickbay.  Dr. McCoy,");
-	prout("  I recommend an immediate review of");
-	prout("  the Captain's psychological profile.\"");
-	chew();
-	return 1;
-    }
-    *course = 1.90985932*atan2(deltx, delty);
-    return 0;
-}
-
-void photon(void) 
-{
-    double targ[4][3], course[4];
-    double r, dummy;
-    int key, n, i, osuabor;
-
-    ididit = 0;
-
-    if (game.damage[DPHOTON]) {
-	prout("Photon tubes damaged.");
-	chew();
-	return;
-    }
-    if (torps == 0) {
-	prout("No torpedoes left.");
-	chew();
-	return;
-    }
-    key = scan();
-    for (;;) {
-	if (key == IHALPHA) {
-	    huh();
-	    return;
-	}
-	else if (key == IHEOL) {
-	    prout("%d torpedoes left.", torps);
-	    proutn("Number of torpedoes to fire- ");
-	    key = scan();
-	}
-	else /* key == IHREAL */ {
-	    n = aaitem + 0.5;
-	    if (n <= 0) { /* abort command */
-		chew();
-		return;
-	    }
-	    if (n > 3) {
-		chew();
-		prout("Maximum of 3 torpedoes per burst.");
-		key = IHEOL;
-		return;
-	    }
-	    if (n <= torps) break;
-	    chew();
-	    key = IHEOL;
-	}
-    }
-    for (i = 1; i <= n; i++) {
-	key = scan();
-	if (i==1 && key == IHEOL) {
-	    break;	/* we will try prompting */
-	}
-	if (i==2 && key == IHEOL) {
-	    /* direct all torpedoes at one target */
-	    while (i <= n) {
-		targ[i][1] = targ[1][1];
-		targ[i][2] = targ[1][2];
-		course[i] = course[1];
-		i++;
-	    }
-	    break;
-	}
-	if (key != IHREAL) {
-	    huh();
-	    return;
-	}
-	targ[i][1] = aaitem;
-	key = scan();
-	if (key != IHREAL) {
-	    huh();
-	    return;
-	}
-	targ[i][2] = aaitem;
-	if (targetcheck(targ[i][1], targ[i][2], &course[i])) return;
-    }
-    chew();
-    if (i == 1 && key == IHEOL) {
-	/* prompt for each one */
-	for (i = 1; i <= n; i++) {
-	    proutn("Target sector for torpedo number %d- ", i);
-	    key = scan();
-	    if (key != IHREAL) {
-		huh();
-		return;
-	    }
-	    targ[i][1] = aaitem;
-	    key = scan();
-	    if (key != IHREAL) {
-		huh();
-		return;
-	    }
-	    targ[i][2] = aaitem;
-	    chew();
-	    if (targetcheck(targ[i][1], targ[i][2], &course[i])) return;
-	}
-    }
-    ididit = 1;
-    /* Loop for moving <n> torpedoes */
-    osuabor = 0;
-    for (i = 1; i <= n && !osuabor; i++) {
-	if (condit != IHDOCKED) torps--;
-	r = (Rand()+Rand())*0.5 -0.5;
-	if (fabs(r) >= 0.47) {
-	    /* misfire! */
-	    r = (Rand()+1.2) * r;
-	    if (n>1) {
-		prouts("***TORPEDO NUMBER %d MISFIRES", i);
-	    }
-	    else prouts("***TORPEDO MISFIRES.");
-	    skip(1);
-	    if (i < n)
-		prout("  Remainder of burst aborted.");
-	    osuabor=1;
-	    if (Rand() <= 0.2) {
-		prout("***Photon tubes damaged by misfire.");
-		game.damage[DPHOTON] = damfac*(1.0+2.0*Rand());
-		break;
-	    }
-	}
-	if (shldup || condit == IHDOCKED) 
-	    r *= 1.0 + 0.0001*shield;
-	torpedo(course[i], r, sectx, secty, &dummy, i, n);
-	if (alldone || game.state.galaxy[quadx][quady].supernova)
-	    return;
-    }
-    if (KLINGREM==0) finish(FWON);
-}
-
-	
-
-static void overheat(double rpow) 
-{
-    if (rpow > 1500) {
-	double chekbrn = (rpow-1500.)*0.00038;
-	if (Rand() <= chekbrn) {
-	    prout("Weapons officer Sulu-  \"Phasers overheated, sir.\"");
-	    game.damage[DPHASER] = damfac*(1.0 + Rand()) * (1.0+chekbrn);
-	}
-    }
-}
-
-static int checkshctrl(double rpow) 
-{
-    double hit;
-    int icas;
-	
-    skip(1);
-    if (Rand() < .998) {
-	prout("Shields lowered.");
-	return 0;
-    }
-    /* Something bad has happened */
-    prouts("***RED ALERT!  RED ALERT!");
-    skip(2);
-    hit = rpow*shield/inshld;
-    energy -= rpow+hit*0.8;
-    shield -= hit*0.2;
-    if (energy <= 0.0) {
-	prouts("Sulu-  \"Captain! Shield malf***********************\"");
-	skip(1);
-	stars();
-	finish(FPHASER);
-	return 1;
-    }
-    prouts("Sulu-  \"Captain! Shield malfunction! Phaser fire contained!\"");
-    skip(2);
-    prout("Lt. Uhura-  \"Sir, all decks reporting damage.\"");
-    icas = hit*Rand()*0.012;
-    skip(1);
-    fry(0.8*hit);
-    if (icas) {
-	skip(1);
-	prout("McCoy to bridge- \"Severe radiation burns, Jim.");
-	prout("  %d casualties so far.\"", icas);
-	casual -= icas;
-    }
-    skip(1);
-    prout("Phaser energy dispersed by shields.");
-    prout("Enemy unaffected.");
-    overheat(rpow);
-    return 1;
-}
-	
-
-void phasers(void) 
-{
-    double hits[21], rpow=0, extra, powrem, over, temp;
-    int kz = 0, k=1, i, irec=0; /* Cheating inhibitor */
-    int ifast=0, no=0, ipoop=1, msgflag = 1;
-    enum {NOTSET, MANUAL, FORCEMAN, AUTOMATIC} automode = NOTSET;
-    int key=0;
-
-    skip(1);
-    /* SR sensors and Computer */
-    if (game.damage[DSRSENS]+game.damage[DCOMPTR] > 0) ipoop = 0;
-    if (condit == IHDOCKED) {
-	prout("Phasers can't be fired through base shields.");
-	chew();
-	return;
-    }
-    if (game.damage[DPHASER] != 0) {
-	prout("Phaser control damaged.");
-	chew();
-	return;
-    }
-    if (shldup) {
-	if (game.damage[DSHCTRL]) {
-	    prout("High speed shield control damaged.");
-	    chew();
-	    return;
-	}
-	if (energy <= 200.0) {
-	    prout("Insufficient energy to activate high-speed shield control.");
-	    chew();
-	    return;
-	}
-	prout("Weapons Officer Sulu-  \"High-speed shield control enabled, sir.\"");
-	ifast = 1;
-		
-    }
-    /* Original code so convoluted, I re-did it all */
-    while (automode==NOTSET) {
-	key=scan();
-	if (key == IHALPHA) {
-	    if (isit("manual")) {
-		if (nenhere==0) {
-		    prout("There is no enemy present to select.");
-		    chew();
-		    key = IHEOL;
-		    automode=AUTOMATIC;
-		}
-		else {
-		    automode = MANUAL;
-		    key = scan();
-		}
-	    }
-	    else if (isit("automatic")) {
-		if ((!ipoop) && nenhere != 0) {
-		    automode = FORCEMAN;
-		}
-		else {
-		    if (nenhere==0)
-			prout("Energy will be expended into space.");
-		    automode = AUTOMATIC;
-		    key = scan();
-		}
-	    }
-	    else if (isit("no")) {
-		no = 1;
-	    }
-	    else {
-		huh();
-		return;
-	    }
-	}
-	else if (key == IHREAL) {
-	    if (nenhere==0) {
-		prout("Energy will be expended into space.");
-		automode = AUTOMATIC;
-	    }
-	    else if (!ipoop)
-		automode = FORCEMAN;
-	    else
-		automode = AUTOMATIC;
-	}
-	else {
-	    /* IHEOL */
-	    if (nenhere==0) {
-		prout("Energy will be expended into space.");
-		automode = AUTOMATIC;
-	    }
-	    else if (!ipoop)
-		automode = FORCEMAN;
-	    else 
-		proutn("Manual or automatic? ");
-	}
-    }
-				
-    switch (automode) {
-    case AUTOMATIC:
-	if (key == IHALPHA && isit("no")) {
-	    no = 1;
-	    key = scan();
-	}
-	if (key != IHREAL && nenhere != 0) {
-	    prout("Phasers locked on target. Energy available: %.2f",
-		  ifast?energy-200.0:energy,1,2);
-	}
-	irec=0;
-	do {
-	    chew();
-	    if (!kz) for_local_enemies(i)
-		irec+=fabs(game.kpower[i])/(PHASEFAC*pow(0.90,game.kdist[i]))*
-		    (1.01+0.05*Rand()) + 1.0;
-	    kz=1;
-	    proutn("(%d) units required. ", irec);
-	    chew();
-	    proutn("Units to fire= ");
-	    key = scan();
-	    if (key!=IHREAL) return;
-	    rpow = aaitem;
-	    if (rpow > (ifast?energy-200:energy)) {
-		proutn("Energy available= %.2f",
-		       ifast?energy-200:energy);
-		skip(1);
-		key = IHEOL;
-	    }
-	} while (rpow > (ifast?energy-200:energy));
-	if (rpow<=0) {
-	    /* chicken out */
-	    chew();
-	    return;
-	}
-	if ((key=scan()) == IHALPHA && isit("no")) {
-	    no = 1;
-	}
-	if (ifast) {
-	    energy -= 200; /* Go and do it! */
-	    if (checkshctrl(rpow)) return;
-	}
-	chew();
-	energy -= rpow;
-	extra = rpow;
-	if (nenhere) {
-	    extra = 0.0;
-	    powrem = rpow;
-	    for_local_enemies(i) {
-		hits[i] = 0.0;
-		if (powrem <= 0) continue;
-		hits[i] = fabs(game.kpower[i])/(PHASEFAC*pow(0.90,game.kdist[i]));
-		over = (0.01 + 0.05*Rand())*hits[i];
-		temp = powrem;
-		powrem -= hits[i] + over;
-		if (powrem <= 0 && temp < hits[i]) hits[i] = temp;
-		if (powrem <= 0) over = 0.0;
-		extra += over;
-	    }
-	    if (powrem > 0.0) extra += powrem;
-	    hittem(hits);
-	    ididit=1;
-	}
-	if (extra > 0 && alldone == 0) {
-	    if (ithere) {
-		proutn("*** Tholian web absorbs ");
-		if (nenhere>0) proutn("excess ");
-		prout("phaser energy.");
-	    }
-	    else {
-		prout("%d expended on empty space.", (int)extra);
-	    }
-	}
-	break;
-
-    case FORCEMAN:
-	chew();
-	key = IHEOL;
-	if (game.damage[DCOMPTR]!=0)
-	    prout("Battle comuter damaged, manual file only.");
-	else {
-	    skip(1);
-	    prouts("---WORKING---");
-	    skip(1);
-	    prout("Short-range-sensors-damaged");
-	    prout("Insufficient-data-for-automatic-phaser-fire");
-	    prout("Manual-fire-must-be-used");
-	    skip(1);
-	}
-    case MANUAL:
-	rpow = 0.0;
-	for (k = 1; k <= nenhere;) {
-	    int ii = game.kx[k], jj = game.ky[k];
-	    int ienm = game.quad[ii][jj];
-	    if (msgflag) {
-		proutn("Energy available= %.2f",
-		       energy-.006-(ifast?200:0));
-		skip(1);
-		msgflag = 0;
-		rpow = 0.0;
-	    }
-	    if (game.damage[DSRSENS] && !(abs(sectx-ii) < 2 && abs(secty-jj) < 2) &&
-		(ienm == IHC || ienm == IHS)) {
-		cramen(ienm);
-		prout(" can't be located without short range scan.");
-		chew();
-		key = IHEOL;
-		hits[k] = 0; /* prevent overflow -- thanks to Alexei Voitenko */
-		k++;
-		continue;
-	    }
-	    if (key == IHEOL) {
-		chew();
-		if (ipoop && k > kz)
-		    irec=(fabs(game.kpower[k])/(PHASEFAC*pow(0.9,game.kdist[k])))*
-			(1.01+0.05*Rand()) + 1.0;
-		kz = k;
-		proutn("(");
-		if (game.damage[DCOMPTR]==0) proutn("%d", irec);
-		else proutn("??");
-		proutn(")  ");
-		proutn("units to fire at ");
-		crmena(0, ienm, 2, ii, jj);
-		proutn("-  ");
-		key = scan();
-	    }
-	    if (key == IHALPHA && isit("no")) {
-		no = 1;
-		key = scan();
-		continue;
-	    }
-	    if (key == IHALPHA) {
-		huh();
-		return;
-	    }
-	    if (key == IHEOL) {
-		if (k==1) { /* Let me say I'm baffled by this */
-		    msgflag = 1;
-		}
-		continue;
-	    }
-	    if (aaitem < 0) {
-		/* abort out */
-		chew();
-		return;
-	    }
-	    hits[k] = aaitem;
-	    rpow += aaitem;
-	    /* If total requested is too much, inform and start over */
-				
-	    if (rpow > (ifast?energy-200:energy)) {
-		prout("Available energy exceeded -- try again.");
-		chew();
-		return;
-	    }
-	    key = scan(); /* scan for next value */
-	    k++;
-	}
-	if (rpow == 0.0) {
-	    /* zero energy -- abort */
-	    chew();
-	    return;
-	}
-	if (key == IHALPHA && isit("no")) {
-	    no = 1;
-	}
-	energy -= rpow;
-	chew();
-	if (ifast) {
-	    energy -= 200.0;
-	    if (checkshctrl(rpow)) return;
-	}
-	hittem(hits);
-	ididit=1;
-    case NOTSET:;	/* avoid gcc warning */
-    }
-    /* Say shield raised or malfunction, if necessary */
-    if (alldone) 
-	return;
-    if (ifast) {
-	skip(1);
-	if (no == 0) {
-	    if (Rand() >= 0.99) {
-		prout("Sulu-  \"Sir, the high-speed shield control has malfunctioned . . .");
-		prouts("         CLICK   CLICK   POP  . . .");
-		prout(" No  response, sir!");
-		shldup = 0;
-	    }
-	    else
-		prout("Shields raised.");
-	}
-	else
-	    shldup = 0;
-    }
-    overheat(rpow);
-}
-
-void hittem(double *hits) 
-{
-    double kp, kpow, wham, hit, dustfac, kpini;
-    int nenhr2=nenhere, k=1, kk=1, ii, jj, ienm;
-
-    skip(1);
-
-    for (; k <= nenhr2; k++, kk++) {
-	if ((wham = hits[k])==0) continue;
-	dustfac = 0.9 + 0.01*Rand();
-	hit = wham*pow(dustfac,game.kdist[kk]);
-	kpini = game.kpower[kk];
-	kp = fabs(kpini);
-	if (PHASEFAC*hit < kp) kp = PHASEFAC*hit;
-	game.kpower[kk] -= (game.kpower[kk] < 0 ? -kp: kp);
-	kpow = game.kpower[kk];
-	ii = game.kx[kk];
-	jj = game.ky[kk];
-	if (hit > 0.005) {
-	    if (game.damage[DSRSENS]==0)
-		boom(ii, jj);
-	    proutn("%d unit hit on ", (int)hit);
-	}
-	else
-	    proutn("Very small hit on ");
-	ienm = game.quad[ii][jj];
-	if (ienm==IHQUEST) iqengry=1;
-	crmena(0,ienm,2,ii,jj);
-	skip(1);
-	if (kpow == 0) {
-	    deadkl(ii, jj, ienm, ii, jj);
-	    if (KLINGREM==0) finish(FWON);
-	    if (alldone) return;
-	    kk--; /* don't do the increment */
-	}
-	else /* decide whether or not to emasculate klingon */
-	    if (kpow > 0 && Rand() >= 0.9 &&
-		kpow <= ((0.4 + 0.4*Rand())*kpini)) {
-		prout("***Mr. Spock-  \"Captain, the vessel at ",
-		      cramlc(sector,ii,jj));
-		prout("   has just lost its firepower.\"");
-		game.kpower[kk] = -kpow;
-	    }
-    }
-    return;
-}
-

Copied: trunk/compile (from rev 538, branches/at-work/compile)

Copied: trunk/config.guess (from rev 538, branches/at-work/config.guess)

Copied: trunk/config.rpath (from rev 538, branches/at-work/config.rpath)

Copied: trunk/config.sub (from rev 538, branches/at-work/config.sub)

Copied: trunk/configure (from rev 538, branches/at-work/configure)

Copied: trunk/configure.ac (from rev 538, branches/at-work/configure.ac)

Copied: trunk/depcomp (from rev 538, branches/at-work/depcomp)

Copied: trunk/doc (from rev 538, branches/at-work/doc)

Deleted: trunk/events.c
===================================================================
--- trunk/events.c	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/events.c	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,755 +0,0 @@
-#include "sst.h"
-#include <math.h>
-
-void events(void) 
-{
-    int ictbeam=0, ipage=0, istract=0, line, i=0, j, k, l, ixhold=0, iyhold=0;
-    double fintim = game.state.date + Time, datemin, xtime, repair, yank=0;
-    int radio_was_broken;
-
-#ifdef DEBUG
-    if (idebug) prout("EVENTS");
-#endif
-
-    radio_was_broken = (game.damage[DRADIO] != 0.0);
-
-    for (;;) {
-	/* Select earliest extraneous event, line==0 if no events */
-	line = FSPY;
-	if (alldone) return;
-	datemin = fintim;
-	for (l = 1; l < NEVENTS; l++)
-	    if (game.future[l] < datemin) {
-		line = l;
-		datemin = game.future[l];
-	    }
-	xtime = datemin-game.state.date;
-	game.state.date = datemin;
-	/* Decrement Federation resources and recompute remaining time */
-	game.state.remres -= (game.state.remkl+4*game.state.remcom)*xtime;
-	game.state.remtime = game.state.remres/(game.state.remkl+4*game.state.remcom);
-	if (game.state.remtime <=0) {
-	    finish(FDEPLETE);
-	    return;
-	}
-	/* Is life support adequate? */
-	if (game.damage[DLIFSUP] && condit != IHDOCKED) {
-	    if (lsupres < xtime && game.damage[DLIFSUP] > lsupres) {
-		finish(FLIFESUP);
-		return;
-	    }
-	    lsupres -= xtime;
-	    if (game.damage[DLIFSUP] <= xtime) lsupres = inlsr;
-	}
-	/* Fix devices */
-	repair = xtime;
-	if (condit == IHDOCKED) repair /= docfac;
-	/* Don't fix Deathray here */
-	for (l=0; l<NDEVICES; l++)
-	    if (game.damage[l] > 0.0 && l != DDRAY)
-		game.damage[l] -= (game.damage[l]-repair > 0.0 ? repair : game.damage[l]);
-	/* If radio repaired, update star chart and attack reports */
-	if (radio_was_broken && game.damage[DRADIO] == 0.0) {
-	    prout("Lt. Uhura- \"Captain, the sub-space radio is working and");
-	    prout("   surveillance reports are coming in.");
-	    skip(1);
-	    if (iseenit==0) {
-		attakreport(0);
-		iseenit = 1;
-	    }
-	    rechart();
-	    prout("   The star chart is now up to date.\"");
-	    skip(1);
-	}
-	/* Cause extraneous event LINE to occur */
-	Time -= xtime;
-	switch (line) {
-	case FSNOVA: /* Supernova */
-	    if (ipage==0) pause_game(1);
-	    ipage=1;
-	    snova(0,0);
-	    game.future[FSNOVA] = game.state.date + expran(0.5*intime);
-	    if (game.state.galaxy[quadx][quady].supernova) return;
-	    break;
-	case FSPY: /* Check with spy to see if S.C. should tractor beam */
-	    if (game.state.nscrem == 0 ||
-		ictbeam+istract > 0 ||
-		condit==IHDOCKED || isatb==1 || iscate==1) return;
-	    if (ientesc ||
-		(energy < 2000 && torps < 4 && shield < 1250) ||
-		(game.damage[DPHASER]>0 && (game.damage[DPHOTON]>0 || torps < 4)) ||
-		(game.damage[DSHIELD] > 0 &&
-		 (energy < 2500 || game.damage[DPHASER] > 0) &&
-		 (torps < 5 || game.damage[DPHOTON] > 0))) {
-		/* Tractor-beam her! */
-		istract=1;
-		yank = square(game.state.isx-quadx) + square(game.state.isy-quady);
-		/********* fall through to FTBEAM code ***********/
-	    }
-	    else return;
-	case FTBEAM: /* Tractor beam */
-	    if (line==FTBEAM) {
-		if (game.state.remcom == 0) {
-		    game.future[FTBEAM] = FOREVER;
-		    break;
-		}
-		i = Rand()*game.state.remcom+1.0;
-		yank = square(game.state.cx[i]-quadx) + square(game.state.cy[i]-quady);
-		if (istract || condit == IHDOCKED || yank == 0) {
-		    /* Drats! Have to reschedule */
-		    game.future[FTBEAM] = game.state.date + Time +
-			expran(1.5*intime/game.state.remcom);
-		    break;
-		}
-	    }
-	    /* tractor beaming cases merge here */
-	    yank = sqrt(yank);
-	    if (ipage==0) pause_game(1);
-	    ipage=1;
-	    Time = (10.0/(7.5*7.5))*yank; /* 7.5 is yank rate (warp 7.5) */
-	    ictbeam = 1;
-	    skip(1);
-	    proutn("***");
-	    crmshp();
-	    prout(" caught in long range tractor beam--");
-	    /* If Kirk & Co. screwing around on planet, handle */
-	    atover(1); /* atover(1) is Grab */
-	    if (alldone) return;
-	    if (icraft == 1) { /* Caught in Galileo? */
-		finish(FSTRACTOR);
-		return;
-	    }
-	    /* Check to see if shuttle is aboard */
-	    if (iscraft==0) {
-		skip(1);
-		if (Rand() > 0.5) {
-		    prout("Galileo, left on the planet surface, is captured");
-		    prout("by aliens and made into a flying McDonald's.");
-		    game.damage[DSHUTTL] = -10;
-		    iscraft = -1;
-		}
-		else {
-		    prout("Galileo, left on the planet surface, is well hidden.");
-		}
-	    }
-	    if (line==0) {
-		quadx = game.state.isx;
-		quady = game.state.isy;
-	    }
-	    else {
-		quadx = game.state.cx[i];
-		quady = game.state.cy[i];
-	    }
-	    iran(QUADSIZE, &sectx, &secty);
-	    crmshp();
-	    proutn(" is pulled to ");
-	    proutn(cramlc(quadrant, quadx, quady));
-	    proutn(", ");
-	    prout(cramlc(sector, sectx, secty));
-	    if (resting) {
-		prout("(Remainder of rest/repair period cancelled.)");
-		resting = 0;
-	    }
-	    if (shldup==0) {
-		if (game.damage[DSHIELD]==0 && shield > 0) {
-		    doshield(2); /* Shldsup */
-		    shldchg=0;
-		}
-		else prout("(Shields not currently useable.)");
-	    }
-	    newqad(0);
-	    /* Adjust finish time to time of tractor beaming */
-	    fintim = game.state.date+Time;
-	    attack(0);
-	    if (game.state.remcom <= 0) game.future[FTBEAM] = FOREVER;
-	    else game.future[FTBEAM] = game.state.date+Time+expran(1.5*intime/game.state.remcom);
-	    break;
-	case FSNAP: /* Snapshot of the universe (for time warp) */
-	    game.snapsht = game.state;
-	    game.state.snap = 1;
-	    game.future[FSNAP] = game.state.date + expran(0.5 * intime);
-	    break;
-	case FBATTAK: /* Commander attacks starbase */
-	    if (game.state.remcom==0 || game.state.rembase==0) {
-		/* no can do */
-		game.future[FBATTAK] = game.future[FCDBAS] = FOREVER;
-		break;
-	    }
-	    i = 0;
-	    for_starbases(j) {
-		for_commanders(k)
-		    if (game.state.baseqx[j]==game.state.cx[k] && game.state.baseqy[j]==game.state.cy[k] &&
-			(game.state.baseqx[j]!=quadx || game.state.baseqy[j]!=quady) &&
-			(game.state.baseqx[j]!=game.state.isx || game.state.baseqy[j]!=game.state.isy)) {
-			i = 1;
-			break;
-		    }
-		if (i == 1) break;
-	    }
-	    if (j>game.state.rembase) {
-		/* no match found -- try later */
-		game.future[FBATTAK] = game.state.date + expran(0.3*intime);
-		game.future[FCDBAS] = FOREVER;
-		break;
-	    }
-	    /* commander + starbase combination found -- launch attack */
-	    batx = game.state.baseqx[j];
-	    baty = game.state.baseqy[j];
-	    game.future[FCDBAS] = game.state.date+1.0+3.0*Rand();
-	    if (isatb) /* extra time if SC already attacking */
-		game.future[FCDBAS] += game.future[FSCDBAS]-game.state.date;
-	    game.future[FBATTAK] = game.future[FCDBAS] +expran(0.3*intime);
-	    iseenit = 0;
-	    if (game.damage[DRADIO] != 0.0 &&
-		condit != IHDOCKED) break; /* No warning :-( */
-	    iseenit = 1;
-	    if (ipage==0) pause_game(1);
-	    ipage = 1;
-	    skip(1);
-	    proutn("Lt. Uhura-  \"Captain, the starbase in ");
-	    prout(cramlc(quadrant, batx, baty));
-	    prout("   reports that it is under attack and that it can");
-	    proutn("   hold out only until stardate %d",
-		   (int)game.future[FCDBAS]);
-	    prout(".\"");
-	    if (resting) {
-		skip(1);
-		proutn("Mr. Spock-  \"Captain, shall we cancel the rest period?\" ");
-		if (ja()) {
-		    resting = 0;
-		    Time = 0.0;
-		    return;
-		}
-	    }
-	    break;
-	case FSCDBAS: /* Supercommander destroys base */
-	    game.future[FSCDBAS] = FOREVER;
-	    isatb = 2;
-	    if (!game.state.galaxy[game.state.isx][game.state.isy].starbase) 
-		break; /* WAS RETURN! */
-	    ixhold = batx;
-	    iyhold = baty;
-	    batx = game.state.isx;
-	    baty = game.state.isy;
-	case FCDBAS: /* Commander succeeds in destroying base */
-	    if (line==FCDBAS) {
-		game.future[FCDBAS] = FOREVER;
-		/* find the lucky pair */
-		for_commanders(i)
-		    if (game.state.cx[i]==batx && game.state.cy[i]==baty) 
-			break;
-		if (i > game.state.remcom || game.state.rembase == 0 ||
-		    !game.state.galaxy[batx][baty].starbase) {
-		    /* No action to take after all */
-		    batx = baty = 0;
-		    break;
-		}
-	    }
-	    /* Code merges here for any commander destroying base */
-	    /* Not perfect, but will have to do */
-	    /* Handle case where base is in same quadrant as starship */
-	    if (batx==quadx && baty==quady) {
-		game.state.chart[batx][baty].starbase = FALSE;
-		game.quad[basex][basey]= IHDOT;
-		basex=basey=0;
-		newcnd();
-		skip(1);
-		prout("Spock-  \"Captain, I believe the starbase has been destroyegame.state.\"");
-	    }
-	    else if (game.state.rembase != 1 &&
-		     (game.damage[DRADIO] <= 0.0 || condit == IHDOCKED)) {
-		/* Get word via subspace radio */
-		if (ipage==0) pause_game(1);
-		ipage = 1;
-		skip(1);
-		prout("Lt. Uhura-  \"Captain, Starfleet Command reports that");
-		proutn("   the starbase in ");
-		proutn(cramlc(quadrant, batx, baty));
-		prout(" has been destroyed by");
-		if (isatb==2) prout("the Klingon Super-Commander");
-		else prout("a Klingon Commander");
-		game.state.chart[batx][baty].starbase = FALSE;
-	    }
-	    /* Remove Starbase from galaxy */
-	    game.state.galaxy[batx][baty].starbase = FALSE;
-	    for_starbases(i)
-		if (game.state.baseqx[i]==batx && game.state.baseqy[i]==baty) {
-		    game.state.baseqx[i]=game.state.baseqx[game.state.rembase];
-		    game.state.baseqy[i]=game.state.baseqy[game.state.rembase];
-		}
-	    game.state.rembase--;
-	    if (isatb == 2) {
-		/* reinstate a commander's base attack */
-		batx = ixhold;
-		baty = iyhold;
-		isatb = 0;
-	    }
-	    else {
-		batx = baty = 0;
-	    }
-	    break;
-	case FSCMOVE: /* Supercommander moves */
-	    game.future[FSCMOVE] = game.state.date+0.2777;
-	    if (ientesc+istract==0 &&
-		isatb!=1 &&
-		(iscate!=1 || justin==1)) scom(&ipage);
-	    break;
-	case FDSPROB: /* Move deep space probe */
-	    game.future[FDSPROB] = game.state.date + 0.01;
-	    probex += probeinx;
-	    probey += probeiny;
-	    i = (int)(probex/QUADSIZE +0.05);
-	    j = (int)(probey/QUADSIZE + 0.05);
-	    if (probecx != i || probecy != j) {
-		probecx = i;
-		probecy = j;
-		if (!VALID_QUADRANT(i, j) ||
-		    game.state.galaxy[probecx][probecy].supernova) {
-		    // Left galaxy or ran into supernova
-		    if (game.damage[DRADIO]==0.0 || condit == IHDOCKED) {
-			if (ipage==0) pause_game(1);
-			ipage = 1;
-			skip(1);
-			proutn("Lt. Uhura-  \"The deep space probe ");
-			if (!VALID_QUADRANT(j, i))
-			    proutn("has left the galaxy");
-			else
-			    proutn("is no longer transmitting");
-			prout(".\"");
-		    }
-		    game.future[FDSPROB] = FOREVER;
-		    break;
-		}
-		if (game.damage[DRADIO]==0.0   || condit == IHDOCKED) {
-		    if (ipage==0) pause_game(1);
-		    ipage = 1;
-		    skip(1);
-		    proutn("Lt. Uhura-  \"The deep space probe is now in ");
-		    proutn(cramlc(quadrant, probecx, probecy));
-		    prout(".\"");
-		}
-	    }
-	    /* Update star chart if Radio is working or have access to
-	       radio. */
-	    if (game.damage[DRADIO] == 0.0 || condit == IHDOCKED) {
-		game.state.chart[probecx][probecy].klingons = game.state.galaxy[probecx][probecy].klingons;
-		game.state.chart[probecx][probecy].starbase = game.state.galaxy[probecx][probecy].starbase;
-		game.state.chart[probecx][probecy].stars = game.state.galaxy[probecx][probecy].stars;
-		game.state.galaxy[probecx][probecy].charted = TRUE;
-	    }
-	    proben--; // One less to travel
-	    if (proben == 0 && isarmed &&
-		game.state.galaxy[probecx][probecy].stars) {
-		/* lets blow the sucker! */
-		snova(1,0);
-		game.future[FDSPROB] = FOREVER;
-		if (game.state.galaxy[quadx][quady].supernova) 
-		    return;
-	    }
-	    break;
-	}
-    }
-}
-
-				
-void wait(void) 
-{
-    int key;
-    double temp, delay, origTime;
-
-    ididit = 0;
-    for (;;) {
-	key = scan();
-	if (key  != IHEOL) break;
-	proutn("How long? ");
-    }
-    chew();
-    if (key != IHREAL) {
-	huh();
-	return;
-    }
-    origTime = delay = aaitem;
-    if (delay <= 0.0) return;
-    if (delay >= game.state.remtime || nenhere != 0) {
-	proutn("Are you sure? ");
-	if (ja() == 0) return;
-    }
-
-    /* Alternate resting periods (events) with attacks */
-
-    resting = 1;
-    do {
-	if (delay <= 0) resting = 0;
-	if (resting == 0) {
-	    prout("%d stardates left.", (int)game.state.remtime);
-	    return;
-	}
-	temp = Time = delay;
-
-	if (nenhere) {
-	    double rtime = 1.0 + Rand();
-	    if (rtime < temp) temp = rtime;
-	    Time = temp;
-	}
-	if (Time < delay) attack(0);
-	if (alldone) return;
-	events();
-	ididit = 1;
-	if (alldone) return;
-	delay -= temp;
-	/* Repair Deathray if long rest at starbase */
-	if (origTime-delay >= 9.99 && condit == IHDOCKED)
-	    game.damage[DDRAY] = 0.0;
-    } while 
-	// leave if quadrant supernovas
-	(!game.state.galaxy[quadx][quady].supernova);
-
-    resting = 0;
-    Time = 0;
-}
-
-void nova(int ix, int iy) 
-{
-    static double course[] =
-	{0.0, 10.5, 12.0, 1.5, 9.0, 0.0, 3.0, 7.5, 6.0, 4.5};
-    int bot, top, top2, hits[QUADSIZE+1][3], kount, icx, icy, mm, nn, j;
-    int iquad, iquad1, i, ll, newcx, newcy, ii, jj;
-    if (Rand() < 0.05) {
-	/* Wow! We've supernova'ed */
-	snova(ix, iy);
-	return;
-    }
-
-    /* handle initial nova */
-    game.quad[ix][iy] = IHDOT;
-    crmena(1, IHSTAR, 2, ix, iy);
-    prout(" novas.");
-    game.state.galaxy[quadx][quady].stars--;
-    game.state.starkl++;
-	
-    /* Set up stack to recursively trigger adjacent stars */
-    bot = top = top2 = 1;
-    kount = 0;
-    icx = icy = 0;
-    hits[1][1] = ix;
-    hits[1][2] = iy;
-    while (1) {
-	for (mm = bot; mm <= top; mm++) 
-	    for (nn = 1; nn <= 3; nn++)  /* nn,j represents coordinates around current */
-		for (j = 1; j <= 3; j++) {
-		    if (j==2 && nn== 2) continue;
-		    ii = hits[mm][1]+nn-2;
-		    jj = hits[mm][2]+j-2;
-		    if (!VALID_SECTOR(jj, ii)) continue;
-		    iquad = game.quad[ii][jj];
-		    switch (iquad) {
-		    // case IHDOT:	/* Empty space ends reaction
-		    // case IHQUEST:
-		    // case IHBLANK:
-		    // case IHT:
-		    // case IHWEB:
-		    default:
-			break;
-		    case IHSTAR: /* Affect another star */
-			if (Rand() < 0.05) {
-			    /* This star supernovas */
-			    snova(ii,jj);
-			    return;
-			}
-			top2++;
-			hits[top2][1]=ii;
-			hits[top2][2]=jj;
-			game.state.galaxy[quadx][quady].stars -= 1;
-			game.state.starkl++;
-			crmena(1, IHSTAR, 2, ii, jj);
-			prout(" novas.");
-			game.quad[ii][jj] = IHDOT;
-			break;
-		    case IHP: /* Destroy planet */
-			game.state.galaxy[quadx][quady].planets -= 1;
-			game.state.nplankl++;
-			crmena(1, IHP, 2, ii, jj);
-			prout(" destroyed.");
-			DESTROY(&game.state.plnets[iplnet]);
-			iplnet = plnetx = plnety = 0;
-			if (landed == 1) {
-			    finish(FPNOVA);
-			    return;
-			}
-			game.quad[ii][jj] = IHDOT;
-			break;
-		    case IHB: /* Destroy base */
-			game.state.galaxy[quadx][quady].starbase = FALSE;
-			for_starbases(i)
-			    if (game.state.baseqx[i]==quadx && game.state.baseqy[i]==quady) 
-				break;
-			game.state.baseqx[i] = game.state.baseqx[game.state.rembase];
-			game.state.baseqy[i] = game.state.baseqy[game.state.rembase];
-			game.state.rembase--;
-			basex = basey = 0;
-			game.state.basekl++;
-			newcnd();
-			crmena(1, IHB, 2, ii, jj);
-			prout(" destroyed.");
-			game.quad[ii][jj] = IHDOT;
-			break;
-		    case IHE: /* Buffet ship */
-		    case IHF:
-			prout("***Starship buffeted by nova.");
-			if (shldup) {
-			    if (shield >= 2000.0) shield -= 2000.0;
-			    else {
-				double diff = 2000.0 - shield;
-				energy -= diff;
-				shield = 0.0;
-				shldup = 0;
-				prout("***Shields knocked out.");
-				game.damage[DSHIELD] += 0.005*damfac*Rand()*diff;
-			    }
-			}
-			else energy -= 2000.0;
-			if (energy <= 0) {
-			    finish(FNOVA);
-			    return;
-			}
-			/* add in course nova contributes to kicking starship*/
-			icx += sectx-hits[mm][1];
-			icy += secty-hits[mm][2];
-			kount++;
-			break;
-		    case IHK: /* kill klingon */
-			deadkl(ii,jj,iquad, ii, jj);
-			break;
-		    case IHC: /* Damage/destroy big enemies */
-		    case IHS:
-		    case IHR:
-			for_local_enemies(ll)
-			    if (game.kx[ll]==ii && game.ky[ll]==jj) break;
-			game.kpower[ll] -= 800.0; /* If firepower is lost, die */
-			if (game.kpower[ll] <= 0.0) {
-			    deadkl(ii, jj, iquad, ii, jj);
-			    break;
-			}
-			newcx = ii + ii - hits[mm][1];
-			newcy = jj + jj - hits[mm][2];
-			crmena(1, iquad, 2, ii, jj);
-			proutn(" damaged");
-			if (!VALID_SECTOR(newcx, newcy)) {
-			    /* can't leave quadrant */
-			    skip(1);
-			    break;
-			}
-			iquad1 = game.quad[newcx][newcy];
-			if (iquad1 == IHBLANK) {
-			    proutn(", blasted into ");
-			    crmena(0, IHBLANK, 2, newcx, newcy);
-			    skip(1);
-			    deadkl(ii, jj, iquad, newcx, newcy);
-			    break;
-			}
-			if (iquad1 != IHDOT) {
-			    /* can't move into something else */
-			    skip(1);
-			    break;
-			}
-			proutn(", buffeted to ");
-			proutn(cramlc(sector, newcx, newcy));
-			game.quad[ii][jj] = IHDOT;
-			game.quad[newcx][newcy] = iquad;
-			game.kx[ll] = newcx;
-			game.ky[ll] = newcy;
-			game.kavgd[ll] = sqrt(square(sectx-newcx)+square(secty-newcy));
-			game.kdist[ll] = game.kavgd[ll];
-			skip(1);
-			break;
-		    }
-		}
-	if (top == top2) 
-	    break;
-	bot = top + 1;
-	top = top2;
-    }
-    if (kount==0) 
-	return;
-
-    /* Starship affected by nova -- kick it away. */
-    dist = kount*0.1;
-    if (icx) icx = (icx < 0 ? -1 : 1);
-    if (icy) icy = (icy < 0 ? -1 : 1);
-    direc = course[3*(icx+1)+icy+2];
-    if (direc == 0.0) dist = 0.0;
-    if (dist == 0.0) return;
-    Time = 10.0*dist/16.0;
-    skip(1);
-    prout("Force of nova displaces starship.");
-    iattak=2;	/* Eliminates recursion problem */
-    imove();
-    Time = 10.0*dist/16.0;
-    return;
-}
-	
-	
-void snova(int insx, int insy) 
-{
-    int comdead, nqx=0, nqy=0, nsx, nsy, num=0, kldead, iscdead;
-    int nrmdead, npdead;
-    int incipient=0;
-
-    nsx = insy;
-    nsy = insy;
-
-    if (insy== 0) {
-	if (insx == 1) {
-	    /* NOVAMAX being used */
-	    nqx = probecx;
-	    nqy = probecy;
-	}
-	else {
-	    int stars = 0;
-	    /* Scheduled supernova -- select star */
-	    /* logic changed here so that we won't favor quadrants in top
-	       left of universe */
-	    for_quadrants(nqx) {
-		for_quadrants(nqy) {
-		    stars += game.state.galaxy[nqx][nqy].stars;
-		}
-	    }
-	    if (stars == 0) return; /* nothing to supernova exists */
-	    num = Rand()*stars + 1;
-	    for_quadrants(nqx) {
-		for_quadrants(nqy) {
-		    num -= game.state.galaxy[nqx][nqy].stars;
-		    if (num <= 0) break;
-		}
-		if (num <=0) break;
-	    }
-#ifdef DEBUG
-	    if (idebug) {
-		proutn("Super nova here?");
-		if (ja()==1) {
-		    nqx = quadx;
-		    nqy = quady;
-		}
-	    }
-#endif
-	}
-
-	if (nqx != quady || nqy != quady || justin != 0) {
-	    /* it isn't here, or we just entered (treat as inroute) */
-	    if (game.damage[DRADIO] == 0.0 || condit == IHDOCKED) {
-		skip(1);
-		prout("Message from Starfleet Command       Stardate %.2f", game.state.date);
-		prout("     Supernova in %s; caution advised.",
-		      cramlc(quadrant, nqx, nqy));
-	    }
-	}
-	else {
-	    /* we are in the quadrant! */
-	    incipient = 1;
-	    num = Rand()* game.state.galaxy[nqx][nqy].stars + 1;
-	    for_sectors(nsx) {
-		for_sectors(nsy) {
-		    if (game.quad[nsx][nsy]==IHSTAR) {
-			num--;
-			if (num==0) break;
-		    }
-		}
-		if (num==0) break;
-	    }
-	}
-    }
-    else {
-	incipient = 1;
-    }
-
-    if (incipient) {
-	skip(1);
-	prouts("***RED ALERT!  RED ALERT!");
-	skip(1);
-	prout("***Incipient supernova detected at ", cramlc(sector, nsx, nsy));
-	nqx = quadx;
-	nqy = quady;
-	if (square(nsx-sectx) + square(nsy-secty) <= 2.1) {
-	    proutn("Emergency override attempts t");
-	    prouts("***************");
-	    skip(1);
-	    stars();
-	    alldone=1;
-	}
-    }
-    /* destroy any Klingons in supernovaed quadrant */
-    kldead = game.state.galaxy[nqx][nqy].klingons;
-    game.state.galaxy[nqx][nqy].klingons = 0;
-    comdead = iscdead = 0;
-    if (nqx==game.state.isx && nqy == game.state.isy) {
-	/* did in the Supercommander! */
-	game.state.nscrem = game.state.isx = game.state.isy = isatb = iscate = 0;
-	iscdead = 1;
-	game.future[FSCMOVE] = game.future[FSCDBAS] = FOREVER;
-    }
-    if (game.state.remcom) {
-	int maxloop = game.state.remcom, l;
-	for (l = 1; l <= maxloop; l++) {
-	    if (game.state.cx[l] == nqx && game.state.cy[l] == nqy) {
-		game.state.cx[l] = game.state.cx[game.state.remcom];
-		game.state.cy[l] = game.state.cy[game.state.remcom];
-		game.state.cx[game.state.remcom] = game.state.cy[game.state.remcom] = 0;
-		game.state.remcom--;
-		kldead--;
-		comdead++;
-		if (game.state.remcom==0) game.future[FTBEAM] = FOREVER;
-		break;
-	    }
-	}
-    }
-    game.state.remkl -= kldead;
-    /* destroy Romulans and planets in supernovaed quadrant */
-    nrmdead = game.state.galaxy[nqx][nqy].romulans;
-    game.state.galaxy[nqx][nqy].romulans = 0;
-    game.state.nromrem -= nrmdead;
-    npdead = num - nrmdead*10;
-    if (npdead) {
-	int l;
-	for (l = 0; l < inplan; l++)
-	    if (game.state.plnets[l].x == nqx && game.state.plnets[l].y == nqy) {
-		DESTROY(&game.state.plnets[l]);
-	    }
-    }
-    /* Destroy any base in supernovaed quadrant */
-    if (game.state.rembase) {
-	int maxloop = game.state.rembase, l;
-	for (l = 1; l <= maxloop; l++)
-	    if (game.state.baseqx[l]==nqx && game.state.baseqy[l]==nqy) {
-		game.state.baseqx[l] = game.state.baseqx[game.state.rembase];
-		game.state.baseqy[l] = game.state.baseqy[game.state.rembase];
-		game.state.baseqx[game.state.rembase] = game.state.baseqy[game.state.rembase] = 0;
-		game.state.rembase--;
-		break;
-	    }
-    }
-    /* If starship caused supernova, tally up destruction */
-    if (insx) {
-	game.state.starkl += game.state.galaxy[nqx][nqy].stars;
-	game.state.basekl += game.state.galaxy[nqx][nqy].starbase;
-	game.state.nplankl += npdead;
-    }
-    /* mark supernova in galaxy and in star chart */
-    if ((quadx == nqx && quady == nqy) ||
-	game.damage[DRADIO] == 0 ||
-	condit == IHDOCKED)
-	game.state.galaxy[nqx][nqy].supernova = TRUE;
-    /* If supernova destroys last klingons give special message */
-    if (KLINGREM==0 && (nqx != quadx || nqy != quady)) {
-	skip(2);
-	if (insx == 0) prout("Lucky you!");
-	proutn("A supernova in %s has just destroyed the last Klingons.",
-	       cramlc(quadrant, nqx, nqy));
-	finish(FWON);
-	return;
-    }
-    /* if some Klingons remain, continue or die in supernova */
-    if (alldone) finish(FSNOVAED);
-    return;
-}
-		
-				

Deleted: trunk/finish.c
===================================================================
--- trunk/finish.c	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/finish.c	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,453 +0,0 @@
-#include "sst.h"
-#include <string.h>
-#include <time.h>
-
-void dstrct() 
-{
-    /* Finish with a BANG! */
-    chew();
-    if (game.damage[DCOMPTR] != 0.0) {
-	prout("Computer damaged; cannot execute destruct sequence.");
-	return;
-    }
-    prouts("---WORKING---"); skip(1);
-    prouts("SELF-DESTRUCT-SEQUENCE-ACTIVATED"); skip(1);
-    prouts("   10"); skip(1);
-    prouts("       9"); skip(1);
-    prouts("          8"); skip(1);
-    prouts("             7"); skip(1);
-    prouts("                6"); skip(1);
-    skip(1);
-    prout("ENTER-CORRECT-PASSWORD-TO-CONTINUE-");
-    skip(1);
-    prout("SELF-DESTRUCT-SEQUENCE-OTHERWISE-");
-    skip(1);
-    prout("SELF-DESTRUCT-SEQUENCE-WILL-BE-ABORTED");
-    skip(1);
-    scan();
-    chew();
-    if (strcmp(game.passwd, citem) != 0) {
-	prouts("PASSWORD-REJECTED;"); skip(1);
-	prouts("CONTINUITY-EFFECTED");
-	skip(2);
-	return;
-    }
-    prouts("PASSWORD-ACCEPTED"); skip(1);
-    prouts("                   5"); skip(1);
-    prouts("                      4"); skip(1);
-    prouts("                         3"); skip(1);
-    prouts("                            2"); skip(1);
-    prouts("                              1"); skip(1);
-    if (Rand() < 0.15) {
-	prouts("GOODBYE-CRUEL-WORLD");
-	skip(1);
-    }
-    kaboom();
-}
-
-void kaboom(void) 
-{
-    stars();
-    if (ship==IHE) prouts("***");
-    prouts("********* Entropy of ");
-    crmshp();
-    prouts(" maximized *********");
-    skip(1);
-    stars();
-    skip(1);
-    if (nenhere != 0) {
-	double whammo = 25.0 * energy;
-	int l=1;
-	while (l <= nenhere) {
-	    if (game.kpower[l]*game.kdist[l] <= whammo) 
-		deadkl(game.kx[l],game.ky[l], game.quad[game.kx[l]][game.ky[l]], game.kx[l], game.ky[l]);
-	    l++;
-	}
-    }
-    finish(FDILITHIUM);
-}
-				
-
-void finish(FINTYPE ifin) 
-{
-    int igotit = 0;
-    alldone = 1;
-    skip(3);
-    prout("It is stardate %.1f.", game.state.date);
-    skip(1);
-    switch (ifin) {
-    case FWON: // Game has been won
-	if (game.state.nromrem != 0)
-	    prout("The remaining %d Romulans surrender to Starfleet Command.",
-		  game.state.nromrem);
-
-	prout("You have smashed the Klingon invasion fleet and saved");
-	prout("the Federation.");
-	gamewon=1;
-	if (alive) {
-	    double badpt;
-	    badpt = 5.0*game.state.starkl + casual + 10.0*game.state.nplankl +
-		45.*nhelp+100.*game.state.basekl;
-	    if (ship == IHF) badpt += 100.0;
-	    else if (ship == 0) badpt += 200.0;
-	    if (badpt < 100.0) badpt = 0.0;	// Close enough!
-	    if (game.state.date-indate < 5.0 ||
-		// killsPerDate >= RateMax
-		KLINGKILLED/(game.state.date-indate) >=
-		0.1*skill*(skill+1.0) + 0.1 + 0.008*badpt) {
-		skip(1);
-		prout("In fact, you have done so well that Starfleet Command");
-		switch (skill) {
-		case SKILL_NOVICE:
-		    prout("promotes you one step in rank from \"Novice\" to \"Fair\".");
-		    break;
-		case SKILL_FAIR:
-		    prout("promotes you one step in rank from \"Fair\" to \"Good\".");
-		    break;
-		case SKILL_GOOD:
-		    prout("promotes you one step in rank from \"Good\" to \"Expert\".");
-		    break;
-		case SKILL_EXPERT:
-		    prout("promotes you to Commodore Emeritus.");
-		    skip(1);
-		    prout("Now that you think you're really good, try playing");
-		    prout("the \"Emeritus\" game. It will splatter your ego.");
-		    break;
-		case SKILL_EMERITUS:
-		    skip(1);
-		    proutn("Computer-  ");
-		    prouts("ERROR-ERROR-ERROR-ERROR");
-		    skip(2);
-		    prouts("  YOUR-SKILL-HAS-EXCEEDED-THE-CAPACITY-OF-THIS-PROGRAM");
-		    skip(1);
-		    prouts("  THIS-PROGRAM-MUST-SURVIVE");
-		    skip(1);
-		    prouts("  THIS-PROGRAM-MUST-SURVIVE");
-		    skip(1);
-		    prouts("  THIS-PROGRAM-MUST-SURVIVE");
-		    skip(1);
-		    prouts("  THIS-PROGRAM-MUST?- MUST ? - SUR? ? -?  VI");
-		    skip(2);
-		    prout("Now you can retire and write your own Star Trek game!");
-		    skip(1);
-		    break;
-		}
-		if (skill >= SKILL_EXPERT) {
-		    if (thawed
-#ifdef DEBUG
-			&& !idebug
-#endif
-			)
-			prout("You cannot get a citation, so...");
-		    else {
-			proutn("Do you want your Commodore Emeritus Citation printed? ");
-			chew();
-			if (ja()) {
-			    igotit = 1;
-			}
-		    }
-		}
-	    }
-	    // Only grant long life if alive (original didn't!)
-	    skip(1);
-	    prout("LIVE LONG AND PROSPER.");
-	}
-	score();
-	if (igotit != 0) plaque();
-	return;
-    case FDEPLETE: // Federation Resources Depleted
-	prout("Your time has run out and the Federation has been");
-	prout("conquered.  Your starship is now Klingon property,");
-	prout("and you are put on trial as a war criminal.  On the");
-	proutn("basis of your record, you are ");
-	if (KLINGREM*3.0 > INKLINGTOT) {
-	    prout("aquitted.");
-	    skip(1);
-	    prout("LIVE LONG AND PROSPER.");
-	}
-	else {
-	    prout("found guilty and");
-	    prout("sentenced to death by slow torture.");
-	    alive = 0;
-	}
-	score();
-	return;
-    case FLIFESUP:
-	prout("Your life support reserves have run out, and");
-	prout("you die of thirst, starvation, and asphyxiation.");
-	prout("Your starship is a derelict in space.");
-	break;
-    case FNRG:
-	prout("Your energy supply is exhausted.");
-	skip(1);
-	prout("Your starship is a derelict in space.");
-	break;
-    case FBATTLE:
-	proutn("The ");
-	crmshp();
-	prout("has been destroyed in battle.");
-	skip(1);
-	prout("Dulce et decorum est pro patria mori.");
-	break;
-    case FNEG3:
-	prout("You have made three attempts to cross the negative energy");
-	prout("barrier which surrounds the galaxy.");
-	skip(1);
-	prout("Your navigation is abominable.");
-	score();
-	return;
-    case FNOVA:
-	prout("Your starship has been destroyed by a nova.");
-	prout("That was a great shot.");
-	skip(1);
-	break;
-    case FSNOVAED:
-	proutn("The ");
-	crmshp();
-	prout(" has been fried by a supernova.");
-	prout("...Not even cinders remain...");
-	break;
-    case FABANDN:
-	prout("You have been captured by the Klingons. If you still");
-	prout("had a starbase to be returned to, you would have been");
-	prout("repatriated and given another chance. Since you have");
-	prout("no starbases, you will be mercilessly tortured to death.");
-	break;
-    case FDILITHIUM:
-	prout("Your starship is now an expanding cloud of subatomic particles");
-	break;
-    case FMATERIALIZE:
-	prout("Starbase was unable to re-materialize your starship.");
-	prout("Sic transit gloria muntdi");
-	break;
-    case FPHASER:
-	proutn("The ");
-	crmshp();
-	prout(" has been cremated by its own phasers.");
-	break;
-    case FLOST:
-	prout("You and your landing party have been");
-	prout("converted to energy, disipating through space.");
-	break;
-    case FMINING:
-	prout("You are left with your landing party on");
-	prout("a wild jungle planet inhabited by primitive cannibals.");
-	skip(1);
-	prout("They are very fond of \"Captain Kirk\" soup.");
-	skip(1);
-	proutn("Without your leadership, the ");
-	crmshp();
-	prout(" is destroyed.");
-	break;
-    case FDPLANET:
-	prout("You and your mining party perish.");
-	skip(1);
-	prout("That was a great shot.");
-	skip(1);
-	break;
-    case FSSC:
-	prout("The Galileo is instantly annihilated by the supernova.");
-	// no break;
-    case FPNOVA:
-	prout("You and your mining party are atomized.");
-	skip(1);
-	proutn("Mr. Spock takes command of the ");
-	crmshp();
-	prout(" and");
-	prout("joins the Romulans, reigning terror on the Federation.");
-	break;
-    case FSTRACTOR:
-	prout("The shuttle craft Galileo is also caught,");
-	prout("and breaks up under the strain.");
-	skip(1);
-	prout("Your debris is scattered for millions of miles.");
-	proutn("Without your leadership, the ");
-	crmshp();
-	prout(" is destroyed.");
-	break;
-    case FDRAY:
-	prout("The mutants attack and kill Spock.");
-	prout("Your ship is captured by Klingons, and");
-	prout("your crew is put on display in a Klingon zoo.");
-	break;
-    case FTRIBBLE:
-	prout("Tribbles consume all remaining water,");
-	prout("food, and oxygen on your ship.");
-	skip(1);
-	prout("You die of thirst, starvation, and asphyxiation.");
-	prout("Your starship is a derelict in space.");
-	break;
-    case FHOLE:
-	prout("Your ship is drawn to the center of the black hole.");
-	prout("You are crushed into extremely dense matter.");
-	break;
-    }
-    if (ship==IHF) ship= 0;
-    else if (ship == IHE) ship = IHF;
-    alive = 0;
-    if (KLINGREM != 0) {
-	double goodies = game.state.remres/inresor;
-	double baddies = (game.state.remkl + 2.0*game.state.remcom)/(inkling+2.0*incom);
-	if (goodies/baddies >= 1.0+0.5*Rand()) {
-	    prout("As a result of your actions, a treaty with the Klingon");
-	    prout("Empire has been signed. The terms of the treaty are");
-	    if (goodies/baddies >= 3.0+Rand()) {
-		prout("favorable to the Federation.");
-		skip(1);
-		prout("Congratulations!");
-	    }
-	    else
-		prout("highly unfavorable to the Federation.");
-	}
-	else
-	    prout("The Federation will be destroyed.");
-    }
-    else {
-	prout("Since you took the last Klingon with you, you are a");
-	prout("martyr and a hero. Someday maybe they'll erect a");
-	prout("statue in your memory. Rest in peace, and try not");
-	prout("to think about pigeons.");
-	gamewon = 1;
-    }
-    score();
-}
-
-void score(void) 
-{
-    double timused = game.state.date - indate;
-    int ithperd, iwon, klship;
-
-    iskill = skill;
-    if ((timused == 0 || KLINGREM != 0) && timused < 5.0) timused = 5.0;
-    perdate = KLINGKILLED/timused;
-    ithperd = 500*perdate + 0.5;
-    iwon = 0;
-    if (gamewon) iwon = 100*skill;
-    if (ship == IHE) klship = 0;
-    else if (ship == IHF) klship = 1;
-    else klship = 2;
-    if (gamewon == 0) game.state.nromrem = 0; // None captured if no win
-    iscore = 10*NKILLK + 50*NKILLC + ithperd + iwon
-	- 100*game.state.basekl - 100*klship - 45*nhelp -5*game.state.starkl - casual
-	+ 20*NKILLROM + 200*NKILLSC - 10*game.state.nplankl + game.state.nromrem;
-    if (alive == 0) iscore -= 200;
-    skip(2);
-    prout("Your score --");
-    if (NKILLROM)
-	prout("%6d Romulans destroyed                 %5d",
-	      NKILLROM,20*NKILLROM);
-    if (game.state.nromrem)
-	prout("%6d Romulans captured                  %5d",
-	      game.state.nromrem, game.state.nromrem);
-    if (NKILLK)
-	prout("%6d ordinary Klingons destroyed        %5d",
-	      NKILLK, 10*NKILLK);
-    if (NKILLC)
-	prout("%6d Klingon commanders destroyed       %5d",
-	      NKILLC, 50*NKILLC);
-    if (NKILLSC)
-	prout("%6d Super-Commander destroyed          %5d",
-	      NKILLSC, 200*NKILLSC);
-    if (ithperd)
-	prout("%6.2f Klingons per stardate              %5d",
-	      perdate, ithperd);
-    if (game.state.starkl)
-	prout("%6d stars destroyed by your action     %5d",
-	      game.state.starkl, -5*game.state.starkl);
-    if (game.state.nplankl)
-	prout("%6d planets destroyed by your action   %5d",
-	      game.state.nplankl, -10*game.state.nplankl);
-    if (game.state.basekl)
-	prout("%6d bases destroyed by your action     %5d",
-	      game.state.basekl, -100*game.state.basekl);
-    if (nhelp)
-	prout("%6d calls for help from starbase       %5d",
-	      nhelp, -45*nhelp);
-    if (casual)
-	prout("%6d casualties incurred                %5d",
-	      casual, -casual);
-    if (klship)
-	prout("%6d ship(s) lost or destroyed          %5d",
-	      klship, -100*klship);
-    if (alive==0)
-	prout("Penalty for getting yourself killed        -200");
-    if (gamewon) {
-	proutn("Bonus for winning ");
-	switch (skill) {
-	case SKILL_NOVICE:   proutn("Novice game  "); break;
-	case SKILL_FAIR:     proutn("Fair game    "); break;
-	case SKILL_GOOD:     proutn("Good game    "); break;
-	case SKILL_EXPERT:   proutn("Expert game  "); break;
-	case SKILL_EMERITUS: proutn("Emeritus game"); break;
-	}
-	prout("           %5d", iwon);
-    }
-    skip(1);
-    prout("TOTAL SCORE                               %5d", iscore);
-}
-
-void plaque(void) {
-	FILE *fp=NULL;
-	time_t t;
-	char *timestring;
-	int nskip;
-	char winner[128];
-
-	skip(2);
-	
-	while (fp == NULL) {
-                proutn("File or device name for your plaque: ");
-                cgetline(winner, sizeof(winner));
-		fp = fopen(winner, "w");
-		if (fp==NULL) {
-                        prout("Invalid name.");
-		}
-	}
-
-        proutn("Enter name to go on plaque (up to 30 characters): ");
-        cgetline(winner, sizeof(winner));
-	/* The 38 below must be 64 for 132-column paper */
-	nskip = 38 - strlen(winner)/2;
-
-	fprintf(fp,"\n\n\n\n");
-	/* --------DRAW ENTERPRISE PICTURE. */
-        fprintf(fp, "                                       EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\n" );
-	fprintf(fp, "                                      EEE                      E  : :                                         :  E\n" );
-	fprintf(fp, "                                    EE   EEE                   E  : :                   NCC-1701              :  E\n");
-        fprintf(fp, "EEEEEEEEEEEEEEEE        EEEEEEEEEEEEEEE  : :                              : E\n");
-        fprintf(fp, " E                                     EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\n");
-	fprintf(fp, "                      EEEEEEEEE               EEEEEEEEEEEEE                 E  E\n");
-	fprintf(fp, "                               EEEEEEE   EEEEE    E          E              E  E\n");
-	fprintf(fp, "                                      EEE           E          E            E  E\n");
-	fprintf(fp, "                                                       E         E          E  E\n");
-	fprintf(fp, "                                                         EEEEEEEEEEEEE      E  E\n");
-	fprintf(fp, "                                                      EEE :           EEEEEEE  EEEEEEEE\n");
-	fprintf(fp, "                                                    :E    :                 EEEE       E\n");
-	fprintf(fp, "                                                   .-E   -:-----                       E\n");
-	fprintf(fp, "                                                    :E    :                            E\n");
-	fprintf(fp, "                                                      EE  :                    EEEEEEEE\n");
-	fprintf(fp, "                                                       EEEEEEEEEEEEEEEEEEEEEEE\n");
-	fprintf(fp, "\n\n\n");
-	fprintf(fp, "                                                       U. S. S. ENTERPRISE\n");
-	fprintf(fp, "\n\n\n\n");
-	fprintf(fp, "                                  For demonstrating outstanding ability as a starship captain\n");
-	fprintf(fp, "\n");
-	fprintf(fp, "                                                Starfleet Command bestows to you\n");
-	fprintf(fp, "\n");
-	fprintf(fp,"%*s%s\n\n", nskip, "", winner);
-	fprintf(fp, "                                                           the rank of\n\n");
-	fprintf(fp, "                                                       \"Commodore Emeritus\"\n\n");
-	fprintf(fp, "                                                          ");
-	switch (iskill) {
-		case SKILL_EXPERT: fprintf(fp," Expert level\n\n"); break;
-		case SKILL_EMERITUS: fprintf(fp,"Emeritus level\n\n"); break;
-		default: fprintf(fp," Cheat level\n\n"); break;
-	}
-	t = time(NULL);
-	timestring = ctime(&t);
-	fprintf(fp, "                                                 This day of %.6s %.4s, %.8s\n\n",
-			timestring+4, timestring+20, timestring+11);
-	fprintf(fp,"                                                        Your score:  %d\n\n", iscore);
-	fprintf(fp,"                                                    Klingons per stardate:  %.2f\n", perdate);
-	fclose(fp);
-}

Copied: trunk/install-sh (from rev 538, branches/at-work/install-sh)

Deleted: trunk/io.c
===================================================================
--- trunk/io.c	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/io.c	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,439 +0,0 @@
-#include <stdio.h>
-#include <unistd.h>
-#include <termios.h>
-#include <curses.h>
-#include <signal.h>
-#include <ctype.h>
-#include <stdarg.h>
-
-#include "sst.h"
-#include "sstlinux.h"
-
-static int rows, linecount;	/* for paging */
-
-WINDOW *curwnd;
-
-static void outro(void)
-/* wrap up, either normally or due to signal */
-{
-    if (game.options & OPTION_CURSES) {
-	clear();
-	curs_set(1);
-	(void)refresh();
-	(void)resetterm();
-	//(void)echo();
-	(void)endwin();
-	putchar('\n');
-    }
-}
-
-void iostart(void) 
-{
-    if (!(game.options & OPTION_CURSES)) {
-	rows = atoi(getenv("LINES"));
-    } else {
-	if (atexit(outro)){
-	    fprintf(stderr,"Unable to register outro(), exiting...\n");
-	    exit(1);
-	}
-	(void)initscr();
-#ifdef KEY_MIN
-	keypad(stdscr, TRUE);
-#endif /* KEY_MIN */
-	(void)saveterm();
-	(void)nonl();
-	(void)cbreak();
-#ifdef A_COLOR
-	{
-	    start_color();
-	    init_pair(COLOR_BLACK, COLOR_BLACK, COLOR_BLACK);
-	    init_pair(COLOR_GREEN, COLOR_GREEN, COLOR_BLACK);
-	    init_pair(COLOR_RED, COLOR_RED, COLOR_BLACK);
-	    init_pair(COLOR_CYAN, COLOR_CYAN, COLOR_BLACK);
-	    init_pair(COLOR_WHITE, COLOR_WHITE, COLOR_BLACK);
-	    init_pair(COLOR_MAGENTA, COLOR_MAGENTA, COLOR_BLACK);
-	    init_pair(COLOR_BLUE, COLOR_BLUE, COLOR_BLACK);
-	    init_pair(COLOR_YELLOW, COLOR_YELLOW, COLOR_BLACK);
-	}
-#endif /* A_COLOR */
-	//(void)noecho();
-	fullscreen_window = stdscr;
-	srscan_window     = newwin(12, 25, 0,       0);
-	report_window     = newwin(10, 0,  1,       25);
-	lrscan_window     = newwin(10, 0,  0,       64); 
-	message_window    = newwin(0,  0,  12,      0);
-	prompt_window     = newwin(1,  0,  LINES-2, 0); 
-	scrollok(message_window, TRUE);
-	setwnd(fullscreen_window);
-	textcolor(DEFAULT);
-    }
-}
-
-
-void waitfor(void)
-/* wait for user action -- OK to do nothing if on a TTY */
-{
-    if (game.options & OPTION_CURSES)
-	getch();
-}
-
-void pause_game(int i) 
-{
-    char *prompt;
-    char buf[BUFSIZ];
-    if (i==1) {
-	if (skill > SKILL_FAIR)
-	    prompt = "[ANOUNCEMENT ARRIVING...]";
-	else
-	    prompt = "[IMPORTANT ANNOUNCEMENT ARRIVING -- PRESS ENTER TO CONTINUE]";
-    }
-    else {
-	if (skill > SKILL_FAIR)
-	    prompt = "[CONTINUE?]";
-	else
-	    prompt = "[PRESS ENTER TO CONTINUE]";
-
-    }
-    if (game.options & OPTION_CURSES) {
-	drawmaps(0);
-	setwnd(prompt_window);
-	wclear(prompt_window);
-	waddstr(prompt_window, prompt);
-	wgetnstr(prompt_window, buf, sizeof(buf));
-	wclear(prompt_window);
-	wrefresh(prompt_window);
-	setwnd(message_window);
-    } else {
-	putchar('\n');
-	proutn(prompt);
-	fgets(buf, sizeof(buf), stdin);
-	if (i != 0) {
-	    int j;
-	    for (j = 0; j < rows; j++)
-		putchar('\n');
-	}
-	linecount = 0;
-    }
-}
-
-
-void skip(int i) 
-{
-    while (i-- > 0) {
-	if (game.options & OPTION_CURSES) {
-	    if (curwnd == message_window && linecount >= getmaxy(curwnd) - 3) {
-		pause_game(0);
-		clrscr();
-	    } else {
-		proutn("\n");
-		if (curwnd == message_window)
-		    linecount++;
-	    }
-	} else {
-	    linecount++;
-	    if (linecount >= rows)
-		pause_game(0);
-	    else
-		putchar('\n');
-	}
-    }
-}
-
-static void vproutn(char *fmt, va_list ap) 
-{
-    if (game.options & OPTION_CURSES) {
-	vwprintw(curwnd, fmt, ap);
-	wrefresh(curwnd);
-    }
-    else
-	vprintf(fmt, ap);
-}
-
-void proutn(char *fmt, ...) 
-{
-    va_list ap;
-    va_start(ap, fmt);
-    vproutn(fmt, ap);
-    va_end(ap);
-}
-
-void prout(char *fmt, ...) 
-{
-    va_list ap;
-    va_start(ap, fmt);
-    vproutn(fmt, ap);
-    va_end(ap);
-    skip(1);
-}
-
-void prouts(char *fmt, ...) 
-/* print slowly! */
-{
-    char *s, buf[BUFSIZ];
-    va_list ap;
-    va_start(ap, fmt);
-    vsprintf(buf, fmt, ap);
-    va_end(ap);
-    for (s = buf; *s; s++) {
-	delay(30);
-	if (game.options & OPTION_CURSES) {
-	    waddch(curwnd, *s);
-	    wrefresh(curwnd);
-	}
-	else {
-	    putchar(*s);
-	    fflush(stdout);
-	}
-    }
-}
-
-void cgetline(char *line, int max)
-{
-    if (game.options & OPTION_CURSES) {
-	wgetnstr(curwnd, line, max);
-	strcat(line, "\n");
-	wrefresh(curwnd);
-    } else {
-	fgets(line, max, stdin);
-    }
-    line[strlen(line)-1] = '\0';
-}
-
-void setwnd(WINDOW *wnd)
-/* change windows -- OK for this to be a no-op in tty mode */
-{
-    if (game.options & OPTION_CURSES) {
-     curwnd=wnd;
-     curs_set(wnd == fullscreen_window || wnd == message_window || wnd == prompt_window);
-    }
-}
-
-void clreol (void)
-/* clear to end of line -- can be a no-op in tty mode */
-{
-   if (game.options & OPTION_CURSES) {
-       wclrtoeol(curwnd);
-       wrefresh(curwnd);
-   }
-}
-
-void clrscr (void)
-/* clear screen -- can be a no-op in tty mode */
-{
-   if (game.options & OPTION_CURSES) {
-       wclear(curwnd);
-       wmove(curwnd,0,0);
-       wrefresh(curwnd);
-   }
-   linecount = 0;
-}
-
-void textcolor (int color)
-{
-#ifdef A_COLOR
-    if (game.options & OPTION_CURSES) {
-	switch(color) {
-	case DEFAULT: 
-	    wattrset(curwnd, 0);
-	    break;
-	case BLACK: 
-	    wattron(curwnd, COLOR_PAIR(COLOR_BLACK));
-	    break;
-	case BLUE: 
-	    wattron(curwnd, COLOR_PAIR(COLOR_BLUE));
-	    break;
-	case GREEN: 
-	    wattron(curwnd, COLOR_PAIR(COLOR_GREEN));
-	    break;
-	case CYAN: 
-	    wattron(curwnd, COLOR_PAIR(COLOR_CYAN));
-	    break;
-	case RED: 
-	    wattron(curwnd, COLOR_PAIR(COLOR_RED));
-	    break;
-	case MAGENTA: 
-	    wattron(curwnd, COLOR_PAIR(COLOR_MAGENTA));
-	    break;
-	case BROWN: 
-	    wattron(curwnd, COLOR_PAIR(COLOR_YELLOW));
-	    break;
-	case LIGHTGRAY: 
-	    wattron(curwnd, COLOR_PAIR(COLOR_WHITE));
-	    break;
-	case DARKGRAY: 
-	    wattron(curwnd, COLOR_PAIR(COLOR_BLACK) | A_BOLD);
-	    break;
-	case LIGHTBLUE: 
-	    wattron(curwnd, COLOR_PAIR(COLOR_BLUE) | A_BOLD);
-	    break;
-	case LIGHTGREEN: 
-	    wattron(curwnd, COLOR_PAIR(COLOR_GREEN) | A_BOLD);
-	    break;
-	case LIGHTCYAN: 
-	    wattron(curwnd, COLOR_PAIR(COLOR_CYAN) | A_BOLD);
-	    break;
-	case LIGHTRED: 
-	    wattron(curwnd, COLOR_PAIR(COLOR_RED) | A_BOLD);
-	    break;
-	case LIGHTMAGENTA: 
-	    wattron(curwnd, COLOR_PAIR(COLOR_MAGENTA) | A_BOLD);
-	    break;
-	case YELLOW: 
-	    wattron(curwnd, COLOR_PAIR(COLOR_YELLOW) | A_BOLD);
-	    break;
-	case WHITE:
-	    wattron(curwnd, COLOR_PAIR(COLOR_WHITE) | A_BOLD);
-	    break;
-	}
-    }
-#endif /* A_COLOR */
-}
-
-void highvideo (void)
-{
-    if (game.options & OPTION_CURSES) {
-	wattron(curwnd, A_REVERSE);
-    }
-}
- 
-void commandhook(char *cmd, int before) {
-}
-
-/*
- * Things past this point have policy implications.
- */
-
-void drawmaps(short l)
-/* hook to be called after moving to redraw maps */
-{
-    if (game.options & OPTION_CURSES) {
-	if (l == 1)
-	    sensor();
-        setwnd(srscan_window);
-        wmove(curwnd, 0, 0);
-        enqueue("no");
-        srscan(SCAN_FULL);
-	if (l != 2) {
-	    setwnd(report_window);
-	    wclear(report_window);
-	    wmove(report_window, 0, 0);
-	    srscan(SCAN_NO_LEFTSIDE);
-	    setwnd(lrscan_window);
-	    wclear(lrscan_window);
-	    wmove(lrscan_window, 0, 0);
-	    enqueue("l");
-	    lrscan();
-	}
-    }
-}
-
-static void put_srscan_sym(int x, int y, char sym)
-{
-    wmove(srscan_window, x+1, y*2+2);
-    waddch(srscan_window, sym);
-    wrefresh(srscan_window);
-}
-
-void boom(int ii, int jj)
-/* enemy fall down, go boom */ 
-{
-    if (game.options & OPTION_CURSES) {
-	drawmaps(2);
-	setwnd(srscan_window);
-	wattron(srscan_window, A_REVERSE);
-	put_srscan_sym(ii, jj, game.quad[ii][jj]);
-	sound(500);
-	delay(1000);
-	nosound();
-	wattroff(srscan_window, A_REVERSE);
-	put_srscan_sym(ii, jj, game.quad[ii][jj]);
-	delay(500);
-	setwnd(message_window);
-    }
-} 
-
-void warble(void)
-/* sound and visual effects for teleportation */
-{
-    if (game.options & OPTION_CURSES) {
-	drawmaps(2);
-	setwnd(message_window);
-	sound(50);
-    }
-    prouts("     . . . . .     ");
-    if (game.options & OPTION_CURSES) {
-	delay(1000);
-	nosound();
-    }
-}
-
-void tracktorpedo(int ix, int iy, int l, int i, int n, int iquad)
-/* torpedo-track animation */
-{
-    if (!game.options & OPTION_CURSES) {
-	if (l == 1) {
-	    if (n != 1) {
-		skip(1);
-		proutn("Track for torpedo number %d-  ", i);
-	    }
-	    else {
-		skip(1);
-		proutn("Torpedo track- ");
-	    }
-	} else if (l==4 || l==9) 
-	    skip(1);
-	proutn("%d - %d   ", ix, iy);
-    } else {
-	if (game.damage[DSRSENS]==0 || condit==IHDOCKED) {
-	    if (i != 1 && l == 1) {
-		drawmaps(2);
-		delay(400);
-	    }
-	    if ((iquad==IHDOT)||(iquad==IHBLANK)){
-		put_srscan_sym(ix, iy, '+');
-		sound(l*10);
-		delay(100);
-		nosound();
-		put_srscan_sym(ix, iy, iquad);
-	    }
-	    else {
-		wattron(curwnd, A_REVERSE);
-		put_srscan_sym(ix, iy, iquad);
-		sound(500);
-		delay(1000);
-		nosound();
-		wattroff(curwnd, A_REVERSE);
-		put_srscan_sym(ix, iy, iquad);
-	    }
-	} else {
-	    proutn("%d - %d   ", ix, iy);
-	}
-    }
-}
-
-void makechart(void) 
-{
-    if (game.options & OPTION_CURSES) {
-	setwnd(message_window);
-	wclear(message_window);
-	chart(0);
-    }
-}
-
-void setpassword(void) 
-{
-    if (!(game.options & OPTION_CURSES)) {
-	while (TRUE) {
-	    scan();
-	    strcpy(game.passwd, citem);
-	    chew();
-	    if (*game.passwd != 0) break;
-	    proutn("Please type in a secret password-");
-	}
-    } else {
-	int i;
-        for(i=0;i<3;i++) game.passwd[i]=(char)(97+(int)(Rand()*25));
-        game.passwd[3]=0;
-    }
-}
-

Copied: trunk/m4 (from rev 538, branches/at-work/m4)

Deleted: trunk/makehelp.py
===================================================================
--- trunk/makehelp.py	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/makehelp.py	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,45 +0,0 @@
-#!/usr/bin/env python
-#
-# Generate an on-line help file for SST 2K from the text generated from
-# the XML documentation.
-#
-# By Eric S. Raymond for the Super Star Trek project
-import os, re, sys
-
-enddelim = "********\n"
-
-# This is the part most likely to bit-rot
-beginmarker1 = "Mnemonic:"
-endmarker1 = "Miscellaneous Notes"
-beginmarker2 = " ABBREV"
-endmarker2 = "Game History and Modifications"
-
-fp = open("sst-doc.txt", "r")
-savetext = ""
-state = 0
-while True:
-    line = fp.readline()
-    if not line:
-        break
-    if state == 0 and line.startswith(beginmarker1):
-        line = "%% " + line[12:].lstrip()
-        state = 1
-    if state == 0 and line.startswith(beginmarker2):
-        savetext += enddelim + "%% ABBREV\n"
-        state = 2
-    if state == 1:
-        if line.find(endmarker1) > -1:
-            state = 0
-    if state == 2:
-        if line.find(endmarker2) > -1:
-            state = 0
-    if state:
-        savetext += line
-
-# Remove the section titles
-savetext = re.sub("\n+.*\n*Mnemonic:\\s*", "\n********\n%% ", savetext)
-
-# Hack Unicode non-breaking spaces into ordinary spaces
-savetext = savetext.replace("\xc2\xa0", " ").replace("\240", "")
-
-sys.stdout.write(savetext + enddelim)

Copied: trunk/missing (from rev 538, branches/at-work/missing)

Copied: trunk/mkinstalldirs (from rev 538, branches/at-work/mkinstalldirs)

Deleted: trunk/moving.c
===================================================================
--- trunk/moving.c	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/moving.c	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,1009 +0,0 @@
-#include <unistd.h>
-#include "sstlinux.h"
-#include "sst.h"
-
-static void getcd(int, int);
-
-void imove(void) 
-{
-    double angle, deltax, deltay, bigger, x, y,
-        finald, finalx, finaly, stopegy, probf;
-    int trbeam = 0, n, l, ix=0, iy=0, kink, kinks, iquad;
-
-    if (inorbit) {
-	prout("Helmsman Sulu- \"Leaving standard orbit.\"");
-	inorbit = FALSE;
-    }
-
-    angle = ((15.0 - direc) * 0.5235988);
-    deltax = -sin(angle);
-    deltay = cos(angle);
-    if (fabs(deltax) > fabs(deltay))
-	bigger = fabs(deltax);
-    else
-	bigger = fabs(deltay);
-		
-    deltay /= bigger;
-    deltax /= bigger;
-
-    /* If tractor beam is to occur, don't move full distance */
-    if (game.state.date+Time >= game.future[FTBEAM]) {
-	trbeam = 1;
-	condit = IHRED;
-	dist = dist*(game.future[FTBEAM]-game.state.date)/Time + 0.1;
-	Time = game.future[FTBEAM] - game.state.date + 1e-5;
-    }
-    /* Move within the quadrant */
-    game.quad[sectx][secty] = IHDOT;
-    x = sectx;
-    y = secty;
-    n = 10.0*dist*bigger+0.5;
-
-    if (n > 0) {
-	for (l = 1; l <= n; l++) {
-	    ix = (x += deltax) + 0.5;
-	    iy = (y += deltay) + 0.5;
-	    if (!VALID_SECTOR(ix, iy)) {
-		/* Leaving quadrant -- allow final enemy attack */
-		/* Don't do it if being pushed by Nova */
-		if (nenhere != 0 && iattak != 2) {
-		    newcnd();
-		    for_local_enemies(l) {
-			finald = sqrt((ix-game.kx[l])*(double)(ix-game.kx[l]) +
-				      (iy-game.ky[l])*(double)(iy-game.ky[l]));
-			game.kavgd[l] = 0.5 * (finald+game.kdist[l]);
-		    }
-		    /*
-		     * Stas Sergeev added the condition
-		     * that attacks only happen if Klingons
-		     * are present and your skill is good.
-		     */
-		    if (skill > SKILL_GOOD && klhere > 0 && !game.state.galaxy[quadx][quady].supernova)
-			attack(0);
-		    if (alldone) return;
-		}
-		/* compute final position -- new quadrant and sector */
-		x = QUADSIZE*(quadx-1)+sectx;
-		y = QUADSIZE*(quady-1)+secty;
-		ix = x+10.0*dist*bigger*deltax+0.5;
-		iy = y+10.0*dist*bigger*deltay+0.5;
-		/* check for edge of galaxy */
-		kinks = 0;
-		do {
-		    kink = 0;
-		    if (ix <= 0) {
-			ix = -ix + 1;
-			kink = 1;
-		    }
-		    if (iy <= 0) {
-			iy = -iy + 1;
-			kink = 1;
-		    }
-		    if (ix > GALSIZE*QUADSIZE) {
-			ix = (GALSIZE*QUADSIZE*2)+1 - ix;
-			kink = 1;
-		    }
-		    if (iy > GALSIZE*QUADSIZE) {
-			iy = (GALSIZE*QUADSIZE*2)+1 - iy;
-			kink = 1;
-		    }
-		    if (kink) kinks = 1;
-		} while (kink);
-
-		if (kinks) {
-		    nkinks += 1;
-		    if (nkinks == 3) {
-			/* Three strikes -- you're out! */
-			finish(FNEG3);
-			return;
-		    }
-		    skip(1);
-		    prout("YOU HAVE ATTEMPTED TO CROSS THE NEGATIVE ENERGY BARRIER");
-		    prout("AT THE EDGE OF THE GALAXY.  THE THIRD TIME YOU TRY THIS,");
-		    prout("YOU WILL BE DESTROYED.");
-		}
-		/* Compute final position in new quadrant */
-		if (trbeam) return; /* Don't bother if we are to be beamed */
-		quadx = (ix+(QUADSIZE-1))/QUADSIZE;
-		quady = (iy+(QUADSIZE-1))/QUADSIZE;
-		sectx = ix - QUADSIZE*(quadx-1);
-		secty = iy - QUADSIZE*(quady-1);
-		skip(1);
-		prout("Entering %s.",
-		      cramlc(quadrant, quadx, quady));
-		game.quad[sectx][secty] = ship;
-		newqad(0);
-		if (skill>SKILL_NOVICE) attack(0);
-		return;
-	    }
-	    iquad = game.quad[ix][iy];
-	    if (iquad != IHDOT) {
-		/* object encountered in flight path */
-		stopegy = 50.0*dist/Time;
-		dist=0.1*sqrt((sectx-ix)*(double)(sectx-ix) +
-			      (secty-iy)*(double)(secty-iy));
-		switch (iquad) {
-		case IHT: /* Ram a Tholian */
-		case IHK: /* Ram enemy ship */
-		case IHC:
-		case IHS:
-		case IHR:
-		case IHQUEST:
-		    sectx = ix;
-		    secty = iy;
-		    ram(0, iquad, sectx, secty);
-		    finalx = sectx;
-		    finaly = secty;
-		    break;
-		case IHBLANK:
-		    skip(1);
-		    prouts("***RED ALERT!  RED ALERT!");
-		    skip(1);
-		    proutn("***");
-		    crmshp();
-		    proutn(" pulled into black hole at ");
-		    prout(cramlc(sector, ix, iy));
-		    /*
-		     * Getting pulled into a black hole was certain
-		     * death in Almy's original.  Stas Sergeev added a
-		     * possibility that you'll get timewarped instead.
-		     */
-		    n=0;
-		    for (l=0;l<NDEVICES;l++)
-			if (game.damage[l]>0) 
-			    n++;
-		    probf=pow(1.4,(energy+shield)/5000.0-1.0)*pow(1.3,1.0/(n+1)-1.0);
-		    if ((game.options & OPTION_BLKHOLE) && Rand()>probf) 
-			timwrp();
-		    else 
-			finish(FHOLE);
-		    return;
-		default:
-		    /* something else */
-		    skip(1);
-		    crmshp();
-		    if (iquad == IHWEB)
-			proutn(" encounters Tholian web at ");
-		    else
-			proutn(" blocked by object at ");
-		    proutn(cramlc(sector, ix,iy));
-		    prout(";");
-		    proutn("Emergency stop required ");
-		    prout("%2d units of energy.", (int)stopegy);
-		    energy -= stopegy;
-		    finalx = x-deltax+0.5;
-		    sectx = finalx;
-		    finaly = y-deltay+0.5;
-		    secty = finaly;
-		    if (energy <= 0) {
-			finish(FNRG);
-			return;
-		    }
-		    break;
-		}
-		goto no_quad_change;	/* sorry! */
-	    }
-	}
-	dist = 0.1*sqrt((sectx-ix)*(double)(sectx-ix) +
-			(secty-iy)*(double)(secty-iy));
-	sectx = ix;
-	secty = iy;
-    }
-    finalx = sectx;
-    finaly = secty;
-no_quad_change:
-    /* No quadrant change -- compute new avg enemy distances */
-    game.quad[sectx][secty] = ship;
-    if (nenhere) {
-	for_local_enemies(l) {
-	    finald = sqrt((ix-game.kx[l])*(double)(ix-game.kx[l]) +
-			  (iy-game.ky[l])*(double)(iy-game.ky[l]));
-	    game.kavgd[l] = 0.5 * (finald+game.kdist[l]);
-	    game.kdist[l] = finald;
-	}
-	sortkl();
-	if (!game.state.galaxy[quadx][quady].supernova && iattak == 0)
-	    attack(0);
-	for_local_enemies(l) game.kavgd[l] = game.kdist[l];
-    }
-    newcnd();
-    iattak = 0;
-    drawmaps(0);
-    setwnd(message_window);
-    return;
-}
-
-void dock(int l) 
-{
-    chew();
-    if (condit == IHDOCKED && l) {
-	prout("Already docked.");
-	return;
-    }
-    if (inorbit) {
-	prout("You must first leave standard orbit.");
-	return;
-    }
-    if (basex==0 || abs(sectx-basex) > 1 || abs(secty-basey) > 1) {
-	crmshp();
-	prout(" not adjacent to base.");
-	return;
-    }
-    condit = IHDOCKED;
-    if (l) prout("Docked.");
-    ididit=1;
-    if (energy < inenrg) energy = inenrg;
-    shield = inshld;
-    torps = intorps;
-    lsupres = inlsr;
-    if (game.damage[DRADIO] == 0.0 &&
-	(game.future[FCDBAS] < FOREVER || isatb == 1) && iseenit == 0) {
-	/* get attack report from base */
-	prout("Lt. Uhura- \"Captain, an important message from the starbase:\"");
-	attakreport(0);
-	iseenit = 1;
-    }
-}
-
-static void getcd(int isprobe, int akey) {
-	/* This program originally required input in terms of a (clock)
-	   direction and distance. Somewhere in history, it was changed to
-	   cartesian coordinates. So we need to convert. I think
-	   "manual" input should still be done this way -- it's a real
-	   pain if the computer isn't working! Manual mode is still confusing
-	   because it involves giving x and y motions, yet the coordinates
-	   are always displayed y - x, where +y is downward! */
-
-	
-        int irowq=quadx, icolq=quady, irows, icols, itemp=0, iprompt=0, key=0;
-	double xi, xj, xk, xl;
-	double deltax, deltay;
-	int automatic = -1;
-
-	/* Get course direction and distance. If user types bad values, return
-	   with DIREC = -1.0. */
-
-	direc = -1.0;
-	
-	if (landed == 1 && !isprobe) {
-		prout("Dummy! You can't leave standard orbit until you");
-		proutn("are back aboard the ");
-		crmshp();
-		prout(".");
-		chew();
-		return;
-	}
-	while (automatic == -1) {
-		if (game.damage[DCOMPTR]) {
-			if (isprobe)
-				prout("Computer damaged; manual navigation only");
-			else
-				prout("Computer damaged; manual movement only");
-			chew();
-			automatic = 0;
-			key = IHEOL;
-			break;
-		}
-		if (isprobe && akey != -1) {
-			/* For probe launch, use pre-scaned value first time */
-			key = akey;
-			akey = -1;
-		}
-		else 
-			key = scan();
-
-		if (key == IHEOL) {
-			proutn("Manual or automatic- ");
-			iprompt = 1;
-			chew();
-		}
-		else if (key == IHALPHA) {
-			if (isit("manual")) {
-				automatic =0;
-				key = scan();
-				break;
-			}
-			else if (isit("automatic")) {
-				automatic = 1;
-				key = scan();
-				break;
-			}
-			else {
-				huh();
-				chew();
-				return;
-			}
-		}
-		else { /* numeric */
-			if (isprobe)
-				prout("(Manual navigation assumed.)");
-			else
-				prout("(Manual movement assumed.)");
-			automatic = 0;
-			break;
-		}
-	}
-
-	if (automatic) {
-		while (key == IHEOL) {
-			if (isprobe)
-				proutn("Target quadrant or quadrant&sector- ");
-			else
-				proutn("Destination sector or quadrant&sector- ");
-			chew();
-			iprompt = 1;
-			key = scan();
-		}
-
-		if (key != IHREAL) {
-			huh();
-			return;
-		}
-		xi = aaitem;
-		key = scan();
-		if (key != IHREAL){
-			huh();
-			return;
-		}
-		xj = aaitem;
-		key = scan();
-		if (key == IHREAL) {
-			/* both quadrant and sector specified */
-			xk = aaitem;
-			key = scan();
-			if (key != IHREAL) {
-				huh();
-				return;
-			}
-			xl = aaitem;
-
-			irowq = xi + 0.5;
-			icolq = xj + 0.5;
-			irows = xk + 0.5;
-			icols = xl + 0.5;
-		}
-		else {
-			if (isprobe) {
-				/* only quadrant specified -- go to center of dest quad */
-				irowq = xi + 0.5;
-				icolq = xj + 0.5;
-				irows = icols = 5;
-			}
-			else {
-				irows = xi + 0.5;
-				icols = xj + 0.5;
-			}
-			itemp = 1;
-		}
-		if (!VALID_QUADRANT(icolq,irowq)||!VALID_SECTOR(icols,irows)) {
-		    huh();
-		    return;
-		}
-		skip(1);
-		if (!isprobe) {
-			if (itemp) {
-				if (iprompt) {
-					prout("Helmsman Sulu- \"Course locked in for %s.\"",
-						cramlc(sector, irows, icols));
-				}
-			}
-			else prout("Ensign Chekov- \"Course laid in, Captain.\"");
-		}
-		deltax = icolq - quady + 0.1*(icols-secty);
-		deltay = quadx - irowq + 0.1*(sectx-irows);
-	}
-	else { /* manual */
-		while (key == IHEOL) {
-			proutn("X and Y displacements- ");
-			chew();
-			iprompt = 1;
-			key = scan();
-		}
-		itemp = 2;
-		if (key != IHREAL) {
-			huh();
-			return;
-		}
-		deltax = aaitem;
-		key = scan();
-		if (key != IHREAL) {
-			huh();
-			return;
-		}
-		deltay = aaitem;
-	}
-	/* Check for zero movement */
-	if (deltax == 0 && deltay == 0) {
-		chew();
-		return;
-	}
-	if (itemp == 2 && !isprobe) {
-		skip(1);
-		prout("Helmsman Sulu- \"Aye, Sir.\"");
-	}
-	dist = sqrt(deltax*deltax + deltay*deltay);
-	direc = atan2(deltax, deltay)*1.90985932;
-	if (direc < 0.0) direc += 12.0;
-	chew();
-	return;
-
-}
-		
-
-
-void impuls(void) 
-{
-    double power;
-
-    ididit = 0;
-    if (game.damage[DIMPULS]) {
-	chew();
-	skip(1);
-	prout("Engineer Scott- \"The impulse engines are damaged, Sir.\"");
-	return;
-    }
-
-    if (energy > 30.0) {
-	getcd(FALSE, 0);
-	if (direc == -1.0) return;
-	power = 20.0 + 100.0*dist;
-    }
-    else
-	power = 30.0;
-
-    if (power >= energy) {
-	/* Insufficient power for trip */
-	skip(1);
-	prout("First Officer Spock- \"Captain, the impulse engines");
-	prout("require 20.0 units to engage, plus 100.0 units per");
-	if (energy > 30) {
-	    proutn("quadrant.  We can go, therefore, a maximum of %d", 
-		   (int)(0.01 * (energy-20.0)-0.05));
-	    prout(" quadrants.\"");
-	}
-	else {
-	    prout("quadrant.  They are, therefore, useless.\"");
-	}
-	chew();
-	return;
-    }
-    /* Make sure enough time is left for the trip */
-    Time = dist/0.095;
-    if (Time >= game.state.remtime) {
-	prout("First Officer Spock- \"Captain, our speed under impulse");
-	prout("power is only 0.95 sectors per stardate. Are you sure");
-	proutn("we dare spend the time?\" ");
-	if (ja() == 0) return;
-    }
-    /* Activate impulse engines and pay the cost */
-    imove();
-    ididit = 1;
-    if (alldone) return;
-    power = 20.0 + 100.0*dist;
-    energy -= power;
-    Time = dist/0.095;
-    if (energy <= 0) finish(FNRG);
-    return;
-}
-
-
-void warp(int i) 
-{
-    int blooey=0, twarp=0, iwarp;
-    double power;
-
-    if (i!=2) { /* Not WARPX entry */
-	ididit = 0;
-	if (game.damage[DWARPEN] > 10.0) {
-	    chew();
-	    skip(1);
-	    prout("Engineer Scott- \"The impulse engines are damaged, Sir.\"");
-	    return;
-	}
-	if (game.damage[DWARPEN] > 0.0 && warpfac > 4.0) {
-	    chew();
-	    skip(1);
-	    prout("Engineer Scott- \"Sorry, Captain. Until this damage");
-	    prout("  is repaired, I can only give you warp 4.\"");
-	    return;
-	}
-			
-	/* Read in course and distance */
-	getcd(FALSE, 0);
-	if (direc == -1.0) return;
-
-	/* Make sure starship has enough energy for the trip */
-	power = (dist+0.05)*warpfac*warpfac*warpfac*(shldup+1);
-
-
-	if (power >= energy) {
-	    /* Insufficient power for trip */
-	    ididit = 0;
-	    skip(1);
-	    prout("Engineering to bridge--");
-	    if (shldup==0 || 0.5*power > energy) {
-		iwarp = pow((energy/(dist+0.05)), 0.333333333);
-		if (iwarp <= 0) {
-		    prout("We can't do it, Captain. We haven't the energy.");
-		}
-		else {
-		    proutn("We haven't the energy, but we could do it at warp %d", iwarp);
-		    if (shldup) {
-			prout(",");
-			prout("if you'll lower the shields.");
-		    }
-		    else
-			prout(".");
-		}
-	    }
-	    else
-		prout("We haven't the energy to go that far with the shields up.");
-	    return;
-	}
-						
-	/* Make sure enough time is left for the trip */
-	Time = 10.0*dist/wfacsq;
-	if (Time >= 0.8*game.state.remtime) {
-	    skip(1);
-	    prout("First Officer Spock- \"Captain, I compute that such");
-	    proutn("  a trip would require approximately %2.0f",
-		   100.0*Time/game.state.remtime);
-	    prout(" percent of our");
-	    proutn("  remaining time.  Are you sure this is wise?\" ");
-	    if (ja() == 0) { ididit = 0; Time=0; return;}
-	}
-    }
-    /* Entry WARPX */
-    if (warpfac > 6.0) {
-	/* Decide if engine damage will occur */
-	double prob = dist*(6.0-warpfac)*(6.0-warpfac)/66.666666666;
-	if (prob > Rand()) {
-	    blooey = 1;
-	    dist = Rand()*dist;
-	}
-	/* Decide if time warp will occur */
-	if (0.5*dist*pow(7.0,warpfac-10.0) > Rand()) twarp=1;
-#ifdef DEBUG
-	if (idebug &&warpfac==10 && twarp==0) {
-	    blooey=0;
-	    proutn("Force time warp? ");
-	    if (ja()==1) twarp=1;
-	}
-#endif
-	if (blooey || twarp) {
-	    /* If time warp or engine damage, check path */
-	    /* If it is obstructed, don't do warp or damage */
-	    double angle = ((15.0-direc)*0.5235998);
-	    double deltax = -sin(angle);
-	    double deltay = cos(angle);
-	    double bigger, x, y;
-	    int n, l, ix, iy;
-	    if (fabs(deltax) > fabs(deltay))
-		bigger = fabs(deltax);
-	    else
-		bigger = fabs(deltay);
-			
-	    deltax /= bigger;
-	    deltay /= bigger;
-	    n = 10.0 * dist * bigger +0.5;
-	    x = sectx;
-	    y = secty;
-	    for (l = 1; l <= n; l++) {
-		x += deltax;
-		ix = x + 0.5;
-		y += deltay;
-		iy = y +0.5;
-		if (!VALID_SECTOR(ix, iy)) break;
-		if (game.quad[ix][iy] != IHDOT) {
-		    blooey = 0;
-		    twarp = 0;
-		}
-	    }
-	}
-    }
-				
-
-    /* Activate Warp Engines and pay the cost */
-    imove();
-    if (alldone) return;
-    energy -= dist*warpfac*warpfac*warpfac*(shldup+1);
-    if (energy <= 0) finish(FNRG);
-    Time = 10.0*dist/wfacsq;
-    if (twarp) timwrp();
-    if (blooey) {
-	game.damage[DWARPEN] = damfac*(3.0*Rand()+1.0);
-	skip(1);
-	prout("Engineering to bridge--");
-	prout("  Scott here.  The warp engines are damaged.");
-	prout("  We'll have to reduce speed to warp 4.");
-    }
-    ididit = 1;
-    return;
-}
-
-
-
-void setwrp(void) 
-{
-    int key;
-    double oldfac;
-	
-    while ((key=scan()) == IHEOL) {
-	chew();
-	proutn("Warp factor- ");
-    }
-    chew();
-    if (key != IHREAL) {
-	huh();
-	return;
-    }
-    if (game.damage[DWARPEN] > 10.0) {
-	prout("Warp engines inoperative.");
-	return;
-    }
-    if (game.damage[DWARPEN] > 0.0 && aaitem > 4.0) {
-	prout("Engineer Scott- \"I'm doing my best, Captain,");
-	prout("  but right now we can only go warp 4.\"");
-	return;
-    }
-    if (aaitem > 10.0) {
-	prout("Helmsman Sulu- \"Our top speed is warp 10, Captain.\"");
-	return;
-    }
-    if (aaitem < 1.0) {
-	prout("Helmsman Sulu- \"We can't go below warp 1, Captain.\"");
-	return;
-    }
-    oldfac = warpfac;
-    warpfac = aaitem;
-    wfacsq=warpfac*warpfac;
-    if (warpfac <= oldfac || warpfac <= 6.0) {
-	proutn("Helmsman Sulu- \"Warp factor %d, Captain.\"", 
-	       (int)warpfac);
-	return;
-    }
-    if (warpfac < 8.00) {
-	prout("Engineer Scott- \"Aye, but our maximum safe speed is warp 6.\"");
-	return;
-    }
-    if (warpfac == 10.0) {
-	prout("Engineer Scott- \"Aye, Captain, we'll try it.\"");
-	return;
-    }
-    prout("Engineer Scott- \"Aye, Captain, but our engines may not take it.\"");
-    return;
-}
-
-void atover(int igrab) 
-{
-    double power, distreq;
-
-    chew();
-    /* is captain on planet? */
-    if (landed==1) {
-	if (game.damage[DTRANSP]) {
-	    finish(FPNOVA);
-	    return;
-	}
-	prout("Scotty rushes to the transporter controls.");
-	if (shldup) {
-	    prout("But with the shields up it's hopeless.");
-	    finish(FPNOVA);
-	}
-	prouts("His desperate attempt to rescue you . . .");
-	if (Rand() <= 0.5) {
-	    prout("fails.");
-	    finish(FPNOVA);
-	    return;
-	}
-	prout("SUCCEEDS!");
-	if (imine) {
-	    imine = 0;
-	    proutn("The crystals mined were ");
-	    if (Rand() <= 0.25) {
-		prout("lost.");
-	    }
-	    else {
-		prout("saved.");
-		icrystl = 1;
-	    }
-	}
-    }
-    if (igrab) return;
-
-    /* Check to see if captain in shuttle craft */
-    if (icraft) finish(FSTRACTOR);
-    if (alldone) return;
-
-    /* Inform captain of attempt to reach safety */
-    skip(1);
-    do {
-	if (justin) {
-	    prouts("***RED ALERT!  READ ALERT!");
-	    skip(1);
-	    proutn("The ");
-	    crmshp();
-	    prout(" has stopped in a quadrant containing");
-	    prouts("   a supernova.");
-	    skip(2);
-	}
-	proutn("***Emergency automatic override attempts to hurl ");
-	crmshp();
-	skip(1);
-	prout("safely out of quadrant.");
-	if (game.damage[DRADIO] == 0.0)
-	    game.state.galaxy[quadx][quady].charted = TRUE;
-	/* Try to use warp engines */
-	if (game.damage[DWARPEN]) {
-	    skip(1);
-	    prout("Warp engines damaged.");
-	    finish(FSNOVAED);
-	    return;
-	}
-	warpfac = 6.0+2.0*Rand();
-	wfacsq = warpfac * warpfac;
-	prout("Warp factor set to %d", (int)warpfac);
-	power = 0.75*energy;
-	dist = power/(warpfac*warpfac*warpfac*(shldup+1));
-	distreq = 1.4142+Rand();
-	if (distreq < dist) dist = distreq;
-	Time = 10.0*dist/wfacsq;
-	direc = 12.0*Rand();	/* How dumb! */
-	justin = 0;
-	inorbit = 0;
-	warp(2);
-	if (justin == 0) {
-	    /* This is bad news, we didn't leave quadrant. */
-	    if (alldone) return;
-	    skip(1);
-	    prout("Insufficient energy to leave quadrant.");
-	    finish(FSNOVAED);
-	    return;
-	}
-    } while 
-	/* Repeat if another snova */
-	(game.state.galaxy[quadx][quady].supernova);
-    if (KLINGREM==0) 
-	finish(FWON); /* Snova killed remaining enemy. */
-}
-
-void timwrp() 
-{
-    int l, gotit;
-    prout("***TIME WARP ENTERED.");
-    if (game.state.snap && Rand() < 0.5) {
-	/* Go back in time */
-	prout("You are traveling backwards in time %d stardates.",
-	      (int)(game.state.date-game.snapsht.date));
-	game.state = game.snapsht;
-	game.state.snap = 0;
-	if (game.state.remcom) {
-	    game.future[FTBEAM] = game.state.date + expran(intime/game.state.remcom);
-	    game.future[FBATTAK] = game.state.date + expran(0.3*intime);
-	}
-	game.future[FSNOVA] = game.state.date + expran(0.5*intime);
-	game.future[FSNAP] = game.state.date +expran(0.25*game.state.remtime); /* next snapshot will
-										  be sooner */
-	if (game.state.nscrem) game.future[FSCMOVE] = 0.2777;
-	isatb = 0;
-	game.future[FCDBAS] = game.future[FSCDBAS] = FOREVER;
-	batx = baty = 0;
-
-	/* Make sure Galileo is consistant -- Snapshot may have been taken
-	   when on planet, which would give us two Galileos! */
-	gotit = 0;
-	for (l = 0; l < inplan; l++) {
-	    if (game.state.plnets[l].known == shuttle_down) {
-		gotit = 1;
-		if (iscraft==1 && ship==IHE) {
-		    prout("Checkov-  \"Security reports the Galileo has disappeared, Sir!");
-		    iscraft = 0;
-		}
-	    }
-	}
-	/* Likewise, if in the original time the Galileo was abandoned, but
-	   was on ship earlier, it would have vanished -- lets restore it */
-	if (iscraft==0 && gotit==0 && game.damage[DSHUTTL] >= 0.0) {
-	    prout("Checkov-  \"Security reports the Galileo has reappeared in the dock!\"");
-	    iscraft = 1;
-	}
-	/* 
-	 * There used to be code to do the actual reconstrction here,
-	 * but the starchart is now part of the snapshotted galaxy state.
-	 */
-	prout("Spock has reconstructed a correct star chart from memory");
-    }
-    else {
-	/* Go forward in time */
-	Time = -0.5*intime*log(Rand());
-	prout("You are traveling forward in time %d stardates.", (int)Time);
-	/* cheat to make sure no tractor beams occur during time warp */
-	game.future[FTBEAM] += Time;
-	game.damage[DRADIO] += Time;
-    }
-    newqad(0);
-    events();	/* Stas Sergeev added this -- do pending events */
-}
-
-void probe(void) 
-{
-    double angle, bigger;
-    int key;
-    /* New code to launch a deep space probe */
-    if (nprobes == 0) {
-	chew();
-	skip(1);
-	if (ship == IHE) 
-	    prout("Engineer Scott- \"We have no more deep space probes, Sir.\"");
-	else
-	    prout("Ye Faerie Queene has no deep space probes.");
-	return;
-    }
-    if (game.damage[DDSP] != 0.0) {
-	chew();
-	skip(1);
-	prout("Engineer Scott- \"The probe launcher is damaged, Sir.\"");
-	return;
-    }
-    if (game.future[FDSPROB] != FOREVER) {
-	chew();
-	skip(1);
-	if (game.damage[DRADIO] != 0 && condit != IHDOCKED) {
-	    prout("Spock-  \"Records show the previous probe has not yet");
-	    prout("   reached its destination.\"");
-	}
-	else
-	    prout("Uhura- \"The previous probe is still reporting data, Sir.\"");
-	return;
-    }
-    key = scan();
-
-    if (key == IHEOL) {
-	/* slow mode, so let Kirk know how many probes there are left */
-	prout(nprobes==1 ? "%d probe left." : "%d probes left.", nprobes);
-	proutn("Are you sure you want to fire a probe? ");
-	if (ja()==0) return;
-    }
-
-    isarmed = FALSE;
-    if (key == IHALPHA && strcmp(citem,"armed") == 0) {
-	isarmed = TRUE;
-	key = scan();
-    }
-    else if (key == IHEOL) {
-	proutn("Arm NOVAMAX warhead? ");
-	isarmed = ja();
-    }
-    getcd(TRUE, key);
-    if (direc == -1.0) return;
-    nprobes--;
-    angle = ((15.0 - direc) * 0.5235988);
-    probeinx = -sin(angle);
-    probeiny = cos(angle);
-    if (fabs(probeinx) > fabs(probeiny))
-	bigger = fabs(probeinx);
-    else
-	bigger = fabs(probeiny);
-		
-    probeiny /= bigger;
-    probeinx /= bigger;
-    proben = 10.0*dist*bigger +0.5;
-    probex = quadx*QUADSIZE + sectx - 1;	// We will use better packing than original
-    probey = quady*QUADSIZE + secty - 1;
-    probecx = quadx;
-    probecy = quady;
-    game.future[FDSPROB] = game.state.date + 0.01; // Time to move one sector
-    prout("Ensign Chekov-  \"The deep space probe is launched, Captain.\"");
-    ididit = 1;
-    return;
-}
-
-void help(void) 
-{
-    /* There's more than one way to move in this game! */
-    double ddist, xdist, probf;
-    int line = 0, l, ix, iy;
-
-    chew();
-    /* Test for conditions which prevent calling for help */
-    if (condit == IHDOCKED) {
-	prout("Lt. Uhura-  \"But Captain, we're already docked.\"");
-	return;
-    }
-    if (game.damage[DRADIO] != 0) {
-	prout("Subspace radio damaged.");
-	return;
-    }
-    if (game.state.rembase==0) {
-	prout("Lt. Uhura-  \"Captain, I'm not getting any response from Starbase.\"");
-	return;
-    }
-    if (landed == 1) {
-	proutn("You must be aboard the ");
-	crmshp();
-	prout(".");
-	return;
-    }
-    /* OK -- call for help from nearest starbase */
-    nhelp++;
-    if (basex!=0) {
-	/* There's one in this quadrant */
-	ddist = sqrt(square(basex-sectx)+square(basey-secty));
-    }
-    else {
-	ddist = FOREVER;
-	for_starbases(l) {
-	    xdist=10.0*sqrt(square(game.state.baseqx[l]-quadx)+square(game.state.baseqy[l]-quady));
-	    if (xdist < ddist) {
-		ddist = xdist;
-		line = l;
-	    }
-	}
-	/* Since starbase not in quadrant, set up new quadrant */
-	quadx = game.state.baseqx[line];
-	quady = game.state.baseqy[line];
-	newqad(1);
-    }
-    /* dematerialize starship */
-    game.quad[sectx][secty]=IHDOT;
-    proutn("Starbase in %s responds--", cramlc(quadrant, quadx, quady));
-    proutn("");
-    crmshp();
-    prout(" dematerializes.");
-    sectx=0;
-    for (l = 1; l <= 5; l++) {
-	ix = basex+3.0*Rand()-1;
-	iy = basey+3.0*Rand()-1;
-	if (VALID_SECTOR(ix,iy) && game.quad[ix][iy]==IHDOT) {
-	    /* found one -- finish up */
-	    sectx=ix;
-	    secty=iy;
-	    break;
-	}
-    }
-    if (sectx==0){
-	prout("You have been lost in space...");
-	finish(FMATERIALIZE);
-	return;
-    }
-    /* Give starbase three chances to rematerialize starship */
-    probf = pow((1.0 - pow(0.98,ddist)), 0.33333333);
-    for (l = 1; l <= 3; l++) {
-	switch (l) {
-	case 1: proutn("1st"); break;
-	case 2: proutn("2nd"); break;
-	case 3: proutn("3rd"); break;
-	}
-	proutn(" attempt to re-materialize ");
-	crmshp();
-	switch (l){
-	case 1: game.quad[ix][iy]=IHMATER0;
-	    break;
-	case 2: game.quad[ix][iy]=IHMATER1;
-	    break;
-	case 3: game.quad[ix][iy]=IHMATER2;
-	    break;
-	}
-	textcolor(RED);
-	warble();
-	if (Rand() > probf) break;
-	prout("fails.");
-	delay(500);
-	textcolor(DEFAULT);
-    }
-    if (l > 3) {
-	game.quad[ix][iy]=IHQUEST;
-	alive = 0;
-	drawmaps(1);
-	setwnd(message_window);
-	finish(FMATERIALIZE);
-	return;
-    }
-    game.quad[ix][iy]=ship;
-    textcolor(GREEN);
-    prout("succeeds.");
-    textcolor(DEFAULT);
-    dock(0);
-    skip(1);
-    prout("Lt. Uhura-  \"Captain, we made it!\"");
-}

Deleted: trunk/planets.c
===================================================================
--- trunk/planets.c	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/planets.c	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,506 +0,0 @@
-#include "sst.h"
-
-static char *classes[] = {"M","N","O"};
-
-static int consumeTime(void) 
-{
-/* I think most of this avoidance was caused by overlay scheme.
-   Let's see what happens if all events can occur here */
-
-//  double asave;
-    ididit = 1;
-#if 0
-    /* Don't worry about this */
-    if (future[FTBEAM] <= game.state.date+Time && game.state.remcom != 0 && condit != IHDOCKED) {
-	/* We are about to be tractor beamed -- operation fails */
-	return 1;
-    }
-#endif
-//	asave = future[FSNOVA];
-//	future[FSNOVA] = FOREVER; /* defer supernovas */
-    events();	/* Used to avoid if future[FSCMOVE] within time */
-//	future[FSNOVA] = asave;
-    /*fails if game over, quadrant super-novas or we've moved to new quadrant*/
-    if (alldone || game.state.galaxy[quadx][quady].supernova || justin != 0) return 1;
-    return 0;
-}
-
-void preport(void) 
-{
-    int iknow = 0, i;
-    skip(1);
-    chew();
-    prout("Spock-  \"Planet report follows, Captain.\"");
-    skip(1);
-    for (i = 0; i < inplan; i++) {
-	if (game.state.plnets[i].known != unknown
-#ifdef DEBUG
-	    || ( idebug && game.state.plnets[i].x !=0)
-#endif
-	    ) {
-	    iknow = 1;
-#ifdef DEBUG
-	    if (idebug && game.state.plnets[i].known==unknown) proutn("(Unknown) ");
-#endif
-	    proutn(cramlc(quadrant, game.state.plnets[i].x, game.state.plnets[i].y));
-	    proutn("   class ");
-	    proutn(classes[game.state.plnets[i].pclass]);
-	    proutn("   ");
-	    if (game.state.plnets[i].crystals == 0) proutn("no ");
-	    prout("dilithium crystals present.");
-	    if (game.state.plnets[i].known==shuttle_down) 
-		prout("    Shuttle Craft Galileo on surface.");
-	}
-    }
-    if (iknow==0) prout("No information available.");
-}
-
-void orbit(void) 
-{
-    skip(1);
-    chew();
-    if (inorbit!=0) {
-	prout("Already in standard orbit.");
-	return;
-    }
-    if (game.damage[DWARPEN] != 0 && game.damage[DIMPULS] != 0) {
-	prout("Both warp and impulse engines damaged.");
-	return;
-    }
-    if (plnetx == 0 || abs(sectx-plnetx) > 1 || abs(secty-plnety) > 1) {
-	crmshp();
-	prout(" not adjacent to planet.");
-	skip(1);
-	return;
-    }
-    Time = 0.02+0.03*Rand();
-    prout("Helmsman Sulu-  \"Entering standard orbit, Sir.\"");
-    newcnd();
-    if (consumeTime()) return;
-    game.height = (1400.0+7200.0*Rand());
-    prout("Sulu-  \"Entered orbit at altitude %.2f kilometers.\"", game.height);
-    inorbit = 1;
-    ididit=1;
-}
-
-void sensor(void) 
-{
-    skip(1);
-    chew();
-    if (game.damage[DSRSENS] != 0.0) {
-	prout("Short range sensors damaged.");
-	return;
-    }
-    if (!plnetx && (game.options & OPTION_TTY)) {
-	prout("Spock- \"No planet in this quadrant, Captain.\"");
-	return;
-    }
-    if ((plnetx != 0)&& (game.state.plnets[iplnet].known == unknown)) {
-	prout("Spock-  \"Sensor scan for %s-", cramlc(quadrant, quadx, quady));
-	skip(1);
-	prout("         Planet at %s is of class %s.", 
-	      cramlc(sector, plnetx, plnety),
-	      classes[game.state.plnets[iplnet].pclass]);
-	if (game.state.plnets[iplnet].known==shuttle_down) 
-	    prout("         Sensors show Galileo still on surface.");
-	proutn("         Readings indicate");
-	if (game.state.plnets[iplnet].crystals == 0) proutn(" no");
-	prout(" dilithium crystals present.\"");
-	if (game.state.plnets[iplnet].known == unknown) game.state.plnets[iplnet].known = known;
-    }
-}
-
-void beam(void) 
-{
-    chew();
-    skip(1);
-    if (game.damage[DTRANSP] != 0) {
-	prout("Transporter damaged.");
-	if (game.damage[DSHUTTL]==0 && (game.state.plnets[iplnet].known==shuttle_down || iscraft == 1)) {
-	    skip(1);
-	    proutn("Spock-  \"May I suggest the shuttle craft, Sir?\" ");
-	    if (ja() != 0) shuttle();
-	}
-	return;
-    }
-    if (inorbit==0) {
-	crmshp();
-	prout(" not in standard orbit.");
-	return;
-    }
-    if (shldup!=0) {
-	prout("Impossible to transport through shields.");
-	return;
-    }
-    if (game.state.plnets[iplnet].known==unknown) {
-	prout("Spock-  \"Captain, we have no information on this planet");
-	prout("  and Starfleet Regulations clearly state that in this situation");
-	prout("  you may not go down.\"");
-	return;
-    }
-    if (landed==1) {
-	/* Coming from planet */
-	if (game.state.plnets[iplnet].known==shuttle_down) {
-	    proutn("Spock-  \"Wouldn't you rather take the Galileo?\" ");
-	    if (ja() != 0) {
-		chew();
-		return;
-	    }
-	    prout("Your crew hides the Galileo to prevent capture by aliens.");
-	}
-	prout("Landing party assembled, ready to beam up.");
-	skip(1);
-	prout("Kirk whips out communicator...");
-	prouts("BEEP  BEEP  BEEP");
-	skip(2);
-	prout("\"Kirk to enterprise-  Lock on coordinates...energize.\"");
-    }
-    else {
-	/* Going to planet */
-	if (game.state.plnets[iplnet].crystals==0) {
-	    prout("Spock-  \"Captain, I fail to see the logic in");
-	    prout("  exploring a planet with no dilithium crystals.");
-	    proutn("  Are you sure this is wise?\" ");
-	    if (ja()==0) {
-		chew();
-		return;
-	    }
-	}
-	prout("Scotty-  \"Transporter room ready, Sir.\"");
-	skip(1);
-	prout("Kirk, and landing party prepare to beam down to planet surface.");
-	skip(1);
-	prout("Kirk-  \"Energize.\"");
-    }
-    ididit=1;
-    skip(1);
-    prouts("WWHOOOIIIIIRRRRREEEE.E.E.  .  .  .  .   .    .");
-    skip(2);
-    if (Rand() > 0.98) {
-	prouts("BOOOIIIOOOIIOOOOIIIOIING . . .");
-	skip(2);
-	prout("Scotty-  \"Oh my God!  I've lost them.\"");
-	finish(FLOST);
-	return;
-    }
-    prouts(".    .   .  .  .  .  .E.E.EEEERRRRRIIIIIOOOHWW");
-    skip(2);
-    prout("Transport complete.");
-    landed = -landed;
-    if (landed==1 && game.state.plnets[iplnet].known==shuttle_down) {
-	prout("The shuttle craft Galileo is here!");
-    }
-    if (landed!=1 && imine==1) {
-	icrystl = 1;
-	cryprob = 0.05;
-    }
-    imine = 0;
-    return;
-}
-
-void mine(void) 
-{
-    skip(1);
-    chew();
-    if (landed!= 1) {
-	prout("Mining party not on planet.");
-	return;
-    }
-    if (game.state.plnets[iplnet].crystals == 0) {
-	prout("No dilithium crystals on this planet.");
-	return;
-    }
-    if (imine == 1) {
-	prout("You've already mined enough crystals for this trip.");
-	return;
-    }
-    if (icrystl == 1 && cryprob == 0.05) {
-	proutn("With all those fresh crystals aboard the ");
-	crmshp();
-	skip(1);
-	prout("there's no reason to mine more at this time.");
-	return;
-    }
-    Time = (0.1+0.2*Rand())*game.state.plnets[iplnet].pclass;
-    if (consumeTime()) return;
-    prout("Mining operation complete.");
-    imine = 1;
-    ididit=1;
-}
-
-void usecrystals(void) 
-{
-    ididit=0;
-    skip(1);
-    chew();
-    if (icrystl!=1) {
-	prout("No dilithium crystals available.");
-	return;
-    }
-    if (energy >= 1000) {
-	prout("Spock-  \"Captain, Starfleet Regulations prohibit such an operation");
-	prout("  except when condition Yellow exists.");
-	return;
-    }
-    prout("Spock- \"Captain, I must warn you that loading");
-    prout("  raw dilithium crystals into the ship's power");
-    prout("  system may risk a severe explosion.");
-    proutn("  Are you sure this is wise?\" ");
-    if (ja()==0) {
-	chew();
-	return;
-    }
-    skip(1);
-    prout("Engineering Officer Scott-  \"(GULP) Aye Sir.");
-    prout("  Mr. Spock and I will try it.\"");
-    skip(1);
-    prout("Spock-  \"Crystals in place, Sir.");
-    prout("  Ready to activate circuit.\"");
-    skip(1);
-    prouts("Scotty-  \"Keep your fingers crossed, Sir!\"");
-    skip(1);
-    if (Rand() <= cryprob) {
-	prouts("  \"Activating now! - - No good!  It's***");
-	skip(2);
-	prouts("***RED ALERT!  RED A*L********************************");
-	skip(1);
-	stars();
-	prouts("******************   KA-BOOM!!!!   *******************");
-	skip(1);
-	kaboom();
-	return;
-    }
-    energy += 5000.0*(1.0 + 0.9*Rand());
-    prouts("  \"Activating now! - - ");
-    prout("The instruments");
-    prout("   are going crazy, but I think it's");
-    prout("   going to work!!  Congratulations, Sir!\"");
-    cryprob *= 2.0;
-    ididit=1;
-}
-
-void shuttle(void) 
-{
-    chew();
-    skip(1);
-    if(game.damage[DSHUTTL] != 0.0) {
-	if (game.damage[DSHUTTL] == -1.0) {
-	    if (inorbit && game.state.plnets[iplnet].known == shuttle_down)
-		prout("Ye Faerie Queene has no shuttle craft bay to dock it at.");
-	    else
-		prout("Ye Faerie Queene had no shuttle craft.");
-	}
-	else if (game.damage[DSHUTTL] > 0)
-	    prout("The Galileo is damaged.");
-	else prout("Shuttle craft is now serving Big Macs.");
-	return;
-    }
-    if (inorbit==0) {
-	crmshp();
-	prout(" not in standard orbit.");
-	return;
-    }
-    if ((game.state.plnets[iplnet].known != shuttle_down) && iscraft != 1) {
-	prout("Shuttle craft not currently available.");
-	return;
-    }
-    if (landed==-1 && game.state.plnets[iplnet].known==shuttle_down) {
-	prout("You will have to beam down to retrieve the shuttle craft.");
-	return;
-    }
-    if (shldup!=0 || condit == IHDOCKED) {
-	prout("Shuttle craft cannot pass through shields.");
-	return;
-    }
-    if (game.state.plnets[iplnet].known==unknown) {
-	prout("Spock-  \"Captain, we have no information on this planet");
-	prout("  and Starfleet Regulations clearly state that in this situation");
-	prout("  you may not fly down.\"");
-	return;
-    }
-    Time = 3.0e-5*game.height;
-    if (Time >= 0.8*game.state.remtime) {
-	prout("First Officer Spock-  \"Captain, I compute that such");
-	proutn("  a maneuver would require approximately 2d%% of our",
-	       (int)(100*Time/game.state.remtime));
-	prout("remaining time.");
-	proutn("Are you sure this is wise?\" ");
-	if (ja()==0) {
-	    Time = 0.0;
-	    return;
-	}
-    }
-    if (landed == 1) {
-	/* Kirk on planet */
-	if (iscraft==1) {
-	    /* Galileo on ship! */
-	    if (game.damage[DTRANSP]==0) {
-		proutn("Spock-  \"Would you rather use the transporter?\" ");
-		if (ja() != 0) {
-		    beam();
-		    return;
-		}
-		proutn("Shuttle crew");
-	    }
-	    else
-		proutn("Rescue party");
-	    prout(" boards Galileo and swoops toward planet surface.");
-	    iscraft = 0;
-	    skip(1);
-	    if (consumeTime()) return;
-	    game.state.plnets[iplnet].known=shuttle_down;
-	    prout("Trip complete.");
-	    return;
-	}
-	else {
-	    /* Ready to go back to ship */
-	    prout("You and your mining party board the");
-	    prout("shuttle craft for the trip back to the Enterprise.");
-	    skip(1);
-	    prout("The short hop begins . . .");
-	    game.state.plnets[iplnet].known=known;
-	    icraft = 1;
-	    skip(1);
-	    landed = -1;
-	    if (consumeTime()) return;
-	    iscraft = 1;
-	    icraft = 0;
-	    if (imine!=0) {
-		icrystl = 1;
-		cryprob = 0.05;
-	    }
-	    imine = 0;
-	    prout("Trip complete.");
-	    return;
-	}
-    }
-    else {
-	/* Kirk on ship */
-	/* and so is Galileo */
-	prout("Mining party assembles in the hangar deck,");
-	prout("ready to board the shuttle craft \"Galileo\".");
-	skip(1);
-	prouts("The hangar doors open; the trip begins.");
-	skip(1);
-	icraft = 1;
-	iscraft = 0;
-	if (consumeTime()) return;
-	game.state.plnets[iplnet].known = shuttle_down;
-	landed = 1;
-	icraft = 0;
-	prout("Trip complete");
-	return;
-    }
-}
-
-void deathray(void) 
-{
-    double dprob, r = Rand();
-	
-    ididit = 0;
-    skip(1);
-    chew();
-    if (ship != IHE) {
-	prout("Ye Faerie Queene has no death ray.");
-	return;
-    }
-    if (nenhere==0) {
-	prout("Sulu-  \"But Sir, there are no enemies in this quadrant.\"");
-	return;
-    }
-    if (game.damage[DDRAY] > 0.0) {
-	prout("Death Ray is damaged.");
-	return;
-    }
-    prout("Spock-  \"Captain, the 'Experimental Death Ray'");
-    prout("  is highly unpredictible.  Considering the alternatives,");
-    proutn("  are you sure this is wise?\" ");
-    if (ja()==0) return;
-    prout("Spock-  \"Acknowledged.\"");
-    skip(1);
-    ididit=1;
-    prouts("WHOOEE ... WHOOEE ... WHOOEE ... WHOOEE");
-    skip(1);
-    prout("Crew scrambles in emergency preparation.");
-    prout("Spock and Scotty ready the death ray and");
-    prout("prepare to channel all ship's power to the device.");
-    skip(1);
-    prout("Spock-  \"Preparations complete, sir.\"");
-    prout("Kirk-  \"Engage!\"");
-    skip(1);
-    prouts("WHIRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR");
-    skip(1);
-    dprob = .30;
-    if (game.options & OPTION_PLAIN)
-	dprob = .5;
-    if (r > dprob) {
-	prouts("Sulu- \"Captain!  It's working!\"");
-	skip(2);
-	while (nenhere > 0)
-	    deadkl(game.kx[1],game.ky[1],game.quad[game.kx[1]][game.ky[1]],game.kx[1],game.ky[1]);
-	prout("Ensign Chekov-  \"Congratulations, Captain!\"");
-	if (KLINGREM == 0) finish(FWON);
-	if ((game.options & OPTION_PLAIN) == 0) {
-	    prout("Spock-  \"Captain, I believe the `Experimental Death Ray'");
-	    if (Rand() <= 0.05) {
-		prout("   is still operational.\"");
-	    }
-	    else {
-		prout("   has been rendered nonfunctional.\"");
-		game.damage[DDRAY] = 39.95;
-	    }
-	}
-	return;
-    }
-    r = Rand();	// Pick failure method 
-    if (r <= .30) {
-	prouts("Sulu- \"Captain!  It's working!\"");
-	skip(1);
-	prouts("***RED ALERT!  RED ALERT!");
-	skip(1);
-	prout("***MATTER-ANTIMATTER IMPLOSION IMMINENT!");
-	skip(1);
-	prouts("***RED ALERT!  RED A*L********************************");
-	skip(1);
-	stars();
-	prouts("******************   KA-BOOM!!!!   *******************");
-	skip(1);
-	kaboom();
-	return;
-    }
-    if (r <= .55) {
-	prouts("Sulu- \"Captain!  Yagabandaghangrapl, brachriigringlanbla!\"");
-	skip(1);
-	prout("Lt. Uhura-  \"Graaeek!  Graaeek!\"");
-	skip(1);
-	prout("Spock-  \"Fascinating!  . . . All humans aboard");
-	prout("  have apparently been transformed into strange mutations.");
-	prout("  Vulcans do not seem to be affected.");
-	skip(1);
-	prout("Kirk-  \"Raauch!  Raauch!\"");
-	finish(FDRAY);
-	return;
-    }
-    if (r <= 0.75) {
-	int i,j;
-	prouts("Sulu- \"Captain!  It's   --WHAT?!?!\"");
-	skip(2);
-	proutn("Spock-  \"I believe the word is");
-	prouts(" *ASTONISHING*");
-	prout(" Mr. Sulu.");
-	for_sectors(i)
-	    for_sectors(j)
-		if (game.quad[i][j] == IHDOT) game.quad[i][j] = IHQUEST;
-	prout("  Captain, our quadrant is now infested with");
-	prouts(" - - - - - -  *THINGS*.");
-	skip(1);
-	prout("  I have no logical explanation.\"");
-	return;
-    }
-    prouts("Sulu- \"Captain!  The Death Ray is creating tribbles!\"");
-    skip(1);
-    prout("Scotty-  \"There are so many tribbles down here");
-    prout("  in Engineering, we can't move for 'em, Captain.\"");
-    finish(FTRIBBLE);
-    return;
-}

Copied: trunk/po (from rev 538, branches/at-work/po)

Deleted: trunk/reports.c
===================================================================
--- trunk/reports.c	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/reports.c	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,537 +0,0 @@
-#include "sst.h"
-#include <math.h>
-#include <stdlib.h>
-#include <string.h>
-
-void attakreport(int curt) 
-{
-    if (!curt) {
-	if (game.future[FCDBAS] < FOREVER) {
-	    prout("Starbase in %s is currently under Commander attack.",
-		  cramlc(quadrant, batx, baty));
-	    prout("It can hold out until Stardate %d.", 
-		  (int)game.future[FCDBAS]);
-	}
-	if (isatb == 1) {
-	    prout("Starbase in %s is under Super-commander attack.",
-		  cramlc(quadrant, game.state.isx, game.state.isy));
-	    prout("It can hold out until Stardate %d.", 
-		  (int)game.future[FSCDBAS]);
-	}
-    } else {
-        if (game.future[FCDBAS] < FOREVER)
-	    proutn("Base in %i - %i attacked by C. Alive until %.1f", batx, baty, game.future[FCDBAS]);
-        if (isatb == 1)
-	    proutn("Base in %i - %i attacked by S. Alive until %.1f", game.state.isx, game.state.isy, game.future[FSCDBAS]);
-    }
-    clreol();
-}
-	
-
-void report(void) 
-{
-    char *s1,*s2,*s3;
-
-    chew();
-    s1 = (thawed?"thawed ":"");
-    switch (length) {
-    case 1: s2="short"; break;
-    case 2: s2="medium"; break;
-    case 4: s2="long"; break;
-    default: s2="unknown length"; break;
-    }
-    switch (skill) {
-    case SKILL_NOVICE: s3="novice"; break;
-    case SKILL_FAIR: s3="fair"; break;
-    case SKILL_GOOD: s3="good"; break;
-    case SKILL_EXPERT: s3="expert"; break;
-    case SKILL_EMERITUS: s3="emeritus"; break;
-    default: s3="skilled"; break;
-    }
-    prout("");
-    prout("You %s playing a %s%s %s game.",
-	  alldone? "were": "are now", s1, s2, s3);
-    if (skill>SKILL_GOOD && thawed && !alldone) prout("No plaque is allowed.");
-    if (tourn) prout("This is tournament game %d.", tourn);
-    prout("Your secret password is \"%s\"",game.passwd);
-    proutn("%d of %d Klingons have been killed", KLINGKILLED, INKLINGTOT);
-    if (NKILLC) prout(", including %d Commander%s.", NKILLC, NKILLC==1?"":"s");
-    else if (NKILLK + NKILLSC > 0) prout(", but no Commanders.");
-    else prout(".");
-    if (skill > SKILL_FAIR) prout("The Super Commander has %sbeen destroyed.",
-				  game.state.nscrem?"not ":"");
-    if (game.state.rembase != inbase) {
-	proutn("There ");
-	if (inbase-game.state.rembase==1) proutn("has been 1 base");
-	else {
-	    proutn("have been %d bases", inbase-game.state.rembase);
-	}
-	prout(" destroyed, %d remaining.", game.state.rembase);
-    }
-    else prout("There are %d bases.", inbase);
-    if (game.damage[DRADIO] == 0.0 || condit == IHDOCKED || iseenit) {
-	/* Don't report this if not seen and
-	   either the radio is dead or not at base! */
-	attakreport(0);
-	iseenit = 1;
-    }
-    if (casual) prout("%d casualt%s suffered so far.",
-		      casual, casual==1? "y" : "ies");
-    if (nhelp) prout("There were %d call%s for help.",
-		     nhelp, nhelp==1 ? "" : "s");
-    if (ship == IHE) {
-	proutn("You have ");
-	if (nprobes) proutn("%d", nprobes);
-	else proutn("no");
-	proutn(" deep space probe");
-	if (nprobes!=1) proutn("s");
-	prout(".");
-    }
-    if ((game.damage[DRADIO] == 0.0 || condit == IHDOCKED)&&
-	game.future[FDSPROB] != FOREVER) {
-	if (isarmed) 
-	    proutn("An armed deep space probe is in");
-	else
-	    proutn("A deep space probe is in");
-	proutn(cramlc(quadrant, probecx, probecy));
-	prout(".");
-    }
-    if (icrystl) {
-	if (cryprob <= .05)
-	    prout("Dilithium crystals aboard ship... not yet used.");
-	else {
-	    int i=0;
-	    double ai = 0.05;
-	    while (cryprob > ai) {
-		ai *= 2.0;
-		i++;
-	    }
-	    prout("Dilithium crystals have been used %d time%s.",
-		  i, i==1? "" : "s");
-	}
-    }
-    skip(1);
-}
-	
-void lrscan(void) 
-{
-    int x, y;
-    chew();
-    if (game.damage[DLRSENS] != 0.0) {
-	/* Now allow base's sensors if docked */
-	if (condit != IHDOCKED) {
-	    prout("LONG-RANGE SENSORS DAMAGED.");
-	    return;
-	}
-	prout("Starbase's long-range scan");
-    }
-    else {
-	prout("Long-range scan");
-    }
-    for (x = quadx-1; x <= quadx+1; x++) {
-	proutn(" ");
-	for (y = quady-1; y <= quady+1; y++) {
-	    if (!VALID_QUADRANT(x, y))
-		proutn("  -1");
-	    else {
-		if (!game.damage[DRADIO])
-		    game.state.galaxy[x][y].charted = TRUE;
-		game.state.chart[x][y].klingons = game.state.galaxy[x][y].klingons;
-		game.state.chart[x][y].starbase = game.state.galaxy[x][y].starbase;
-		game.state.chart[x][y].stars = game.state.galaxy[x][y].stars;
-		if (game.state.galaxy[x][y].supernova) 
-		    proutn(" ***");
-		else
-		    proutn(" %3d", game.state.chart[x][y].klingons*100 + game.state.chart[x][y].starbase * 10 + game.state.chart[x][y].stars);
-	    }
-	}
-	prout(" ");
-    }
-}
-
-void dreprt(void) 
-{
-    int jdam = FALSE, i;
-    chew();
-
-    for (i = 0; i < NDEVICES; i++) {
-	if (game.damage[i] > 0.0) {
-	    if (!jdam) {
-		prout("DEVICE            -REPAIR TIMES-");
-		prout("                IN FLIGHT   DOCKED");
-		jdam = TRUE;
-	    }
-	    prout("  %16s %8.2f  %8.2f", 
-		  device[i],
-		  game.damage[i]+0.05,
-		  docfac*game.damage[i]+0.005);
-	}
-    }
-    if (!jdam) prout("All devices functional.");
-}
-
-void rechart(void)
-/* update the chart in the Enterprise's computer from galaxy data */
-{
-    int i, j;
-    lastchart = game.state.date;
-    for_quadrants(i)
-	for_quadrants(j) 
-	    if (game.state.galaxy[i][j].charted) {
-		game.state.chart[i][j].klingons = game.state.galaxy[i][j].klingons;
-		game.state.chart[i][j].starbase = game.state.galaxy[i][j].starbase;
-		game.state.chart[i][j].stars = game.state.galaxy[i][j].stars;
-	    }
-}
-
-void chart(int nn) 
-{
-    int i,j;
-    chew();
-
-    if (game.damage[DRADIO] == 0.0)
-	rechart();
-
-    if (lastchart < game.state.date && condit == IHDOCKED) {
-	prout("Spock-  \"I revised the Star Chart from the starbase's records.\"");
-	rechart();
-    }
-
-    if (nn == 0) prout("       STAR CHART FOR THE KNOWN GALAXY");
-    if (game.state.date > lastchart)
-	prout("(Last surveillance update %d stardates ago).",
-	      (int)(game.state.date-lastchart));
-    prout("      1    2    3    4    5    6    7    8");
-    for_quadrants(i) {
-	proutn("%d |", i);
-	for_quadrants(j) {
-	    char buf[4];
-	    if ((game.options & OPTION_SHOWME) && i == quadx && j == quady)
-		proutn("<");
-	    else
-		proutn(" ");
-	    if (game.state.galaxy[i][j].supernova)
-		strcpy(buf, "***");
-	    else if (!game.state.galaxy[i][j].charted && game.state.galaxy[i][j].starbase)
-		strcpy(buf, ".1.");
-	    else if (game.state.galaxy[i][j].charted)
-		sprintf(buf, "%3d", game.state.chart[i][j].klingons*100 + game.state.chart[i][j].starbase * 10 + game.state.chart[i][j].stars);
-	    else
-		strcpy(buf, "...");
-	    proutn(buf);
-	    if ((game.options & OPTION_SHOWME) && i == quadx && j == quady)
-		proutn(">");
-	    else
-		proutn(" ");
-	}
-	proutn("  |");
-	if (i<GALSIZE) skip(1);
-    }
-}
-
-static void sectscan(int goodScan, int i, int j) 
-{
-    if (goodScan || (abs(i-sectx)<= 1 && abs(j-secty) <= 1)){
-	if ((game.quad[i][j]==IHMATER0)||(game.quad[i][j]==IHMATER1)||(game.quad[i][j]==IHMATER2)||(game.quad[i][j]==IHE)||(game.quad[i][j]==IHF)){
-	    switch (condit) {
-	    case IHRED: textcolor(RED); break;
-	    case IHGREEN: textcolor(GREEN); break;
-	    case IHYELLOW: textcolor(YELLOW); break;
-	    case IHDOCKED: textcolor(CYAN); break;
-	    case IHDEAD: textcolor(BROWN);
-	    }
-	    if (game.quad[i][j] != ship) 
-		highvideo();
-	}
-	proutn("%c ",game.quad[i][j]);
-	textcolor(DEFAULT);
-    }
-    else
-	proutn("- ");
-}
-
-static void status(int req) 
-{
-    char *cp = NULL;
-    int t, dam = 0;
-    switch (req) {
-    case 1:
-	proutn("Stardate      %.1f, Time Left %.2f", game.state.date, game.state.remtime);
-	break;
-    case 2:
-	if (condit != IHDOCKED) newcnd();
-	switch (condit) {
-	case IHRED: cp = "RED"; break;
-	case IHGREEN: cp = "GREEN"; break;
-	case IHYELLOW: cp = "YELLOW"; break;
-	case IHDOCKED: cp = "DOCKED"; break;
-	case IHDEAD: cp="DEAD"; break;
-	}
-	for (t=0;t<NDEVICES;t++)
-	    if (game.damage[t]>0) 
-		dam++;
-	proutn("Condition     %s, %i DAMAGES", cp, dam);
-	break;
-    case 3:
-	proutn("Position      %d - %d , %d - %d",
-	       quadx, quady, sectx, secty);
-	break;
-    case 4:
-	proutn("Life Support  ");
-	if (game.damage[DLIFSUP] != 0.0) {
-	    if (condit == IHDOCKED)
-		proutn("DAMAGED, Base provides");
-	    else
-		proutn("DAMAGED, reserves=%4.2f", lsupres);
-	}
-	else
-	    proutn("ACTIVE");
-	break;
-    case 5:
-	proutn("Warp Factor   %.1f", warpfac);
-	break;
-    case 6:
-	proutn("Energy        %.2f", energy);
-	if (icrystl && (game.options & OPTION_SHOWME))	/* ESR */
-	    proutn(" (have crystals)");
-	break;
-    case 7:
-	proutn("Torpedoes     %d", torps);
-	break;
-    case 8:
-	proutn("Shields       ");
-	if (game.damage[DSHIELD] != 0)
-	    proutn("DAMAGED,");
-	else if (shldup)
-	    proutn("UP,");
-	else
-	    proutn("DOWN,");
-	proutn(" %d%% %.1f units",
-	       (int)((100.0*shield)/inshld + 0.5), shield);
-	break;
-    case 9:
-	proutn("Klingons Left %d", KLINGREM);
-	break;
-    case 10:
-	attakreport(1);
-	break;
-    }
-}
-		
-int srscan(int l) 
-{
-    static char requests[][3] =
-	{"","da","co","po","ls","wa","en","to","sh","kl","ti"};
-    int leftside=TRUE, rightside=TRUE, i, j, jj, req=0, nn=FALSE;
-    int goodScan=TRUE;
-    switch (l) {
-    case SCAN_FULL: // SRSCAN
-	if (game.damage[DSRSENS] != 0) {
-	    /* Allow base's sensors if docked */
-	    if (condit != IHDOCKED) {
-		prout("   S.R. SENSORS DAMAGED!");
-		goodScan=FALSE;
-	    }
-	    else
-		prout("  [Using Base's sensors]");
-	}
-	else prout("     Short-range scan");
-	if (goodScan && !game.damage[DRADIO]) { 
-	    game.state.chart[quadx][quady].klingons = game.state.galaxy[quadx][quady].klingons;
-	    game.state.chart[quadx][quady].starbase = game.state.galaxy[quadx][quady].starbase;
-	    game.state.chart[quadx][quady].stars = game.state.galaxy[quadx][quady].stars;
-	    game.state.galaxy[quadx][quady].charted = TRUE;
-	}
-	scan();
-	if (isit("chart")) nn = TRUE;
-	if (isit("no")) rightside = FALSE;
-	chew();
-	prout("    1 2 3 4 5 6 7 8 9 10");
-	break;
-    case SCAN_REQUEST:
-	while (scan() == IHEOL)
-	    proutn("Information desired? ");
-	chew();
-	for (req = 1; req <= sizeof(requests)/sizeof(requests[0]); req++)
-	    if (strncmp(citem,requests[req],min(2,strlen(citem)))==0)
-		break;
-	if (req > sizeof(requests)/sizeof(requests[0])) {
-	    prout("UNRECOGNIZED REQUEST. Legal requests are:");
-	    prout("  date, condition, position, lsupport, warpfactor,");
-	    prout("  energy, torpedoes, shields, klingons, time, bases.");
-	    return FALSE;
-	}
-	// no break
-    case SCAN_STATUS: // STATUS
-	chew();
-	leftside = FALSE;
-	skip(1);
-	// no break
-    case SCAN_NO_LEFTSIDE: // REQUEST
-	leftside=FALSE;
-	break;
-    }
-    if (condit != IHDOCKED) newcnd();
-    for (i = 1; i <= max(QUADSIZE, sizeof(requests)/sizeof(requests[0])); i++) {
-	jj = (req!=0 ? req : i);
-	if (leftside && i <= QUADSIZE) {
-	    proutn("%2d  ", i);
-	    for_sectors(j) {
-		sectscan(goodScan, i, j);
-	    }
-	}
-	if (rightside)
-	    status(jj);
-	if (i<sizeof(requests)/sizeof(requests[0])) skip(1);
-	if (req!=0) return(goodScan);
-    }
-    prout("");
-    if (nn) chart(1);
-    return(goodScan);
-}
-			
-			
-void eta(void)
-{
-    int ix1, ix2, iy1, iy2, prompt=FALSE;
-    int wfl;
-    double ttime, twarp, tpower;
-    if (game.damage[DCOMPTR] != 0.0) {
-	prout("COMPUTER DAMAGED, USE A POCKET CALCULATOR.");
-	skip(1);
-	return;
-    }
-    if (scan() != IHREAL) {
-	prompt = TRUE;
-	chew();
-	proutn("Destination quadrant and/or sector? ");
-	if (scan()!=IHREAL) {
-	    huh();
-	    return;
-	}
-    }
-    iy1 = aaitem +0.5;
-    if (scan() != IHREAL) {
-	huh();
-	return;
-    }
-    ix1 = aaitem + 0.5;
-    if (scan() == IHREAL) {
-	iy2 = aaitem + 0.5;
-	if (scan() != IHREAL) {
-	    huh();
-	    return;
-	}
-	ix2 = aaitem + 0.5;
-    }
-    else {
-	if (quady>ix1) ix2 = 1;
-	else ix2=QUADSIZE;
-	if (quadx>iy1) iy2 = 1;
-	else iy2=QUADSIZE;
-    }
-
-    if (!VALID_QUADRANT(ix1, iy1) || !VALID_SECTOR(ix2, iy2)) {
-	huh();
-	return;
-    }
-    dist = sqrt(square(iy1-quadx+0.1*(iy2-sectx))+
-		square(ix1-quady+0.1*(ix2-secty)));
-    wfl = FALSE;
-
-    if (prompt) prout("Answer \"no\" if you don't know the value:");
-    while (TRUE) {
-	chew();
-	proutn("Time or arrival date? ");
-	if (scan()==IHREAL) {
-	    ttime = aaitem;
-	    if (ttime > game.state.date) ttime -= game.state.date; // Actually a star date
-	    if (ttime <= 1e-10 ||
-		(twarp=(floor(sqrt((10.0*dist)/ttime)*10.0)+1.0)/10.0) > 10) {
-		prout("We'll never make it, sir.");
-		chew();
-		return;
-	    }
-	    if (twarp < 1.0) twarp = 1.0;
-	    break;
-	}
-	chew();
-	proutn("Warp factor? ");
-	if (scan()== IHREAL) {
-	    wfl = TRUE;
-	    twarp = aaitem;
-	    if (twarp<1.0 || twarp > 10.0) {
-		huh();
-		return;
-	    }
-	    break;
-	}
-	prout("Captain, certainly you can give me one of these.");
-    }
-    while (TRUE) {
-	chew();
-	ttime = (10.0*dist)/square(twarp);
-	tpower = dist*twarp*twarp*twarp*(shldup+1);
-	if (tpower >= energy) {
-	    prout("Insufficient energy, sir.");
-	    if (shldup==0 || tpower > energy*2.0) {
-		if (!wfl) return;
-		proutn("New warp factor to try? ");
-		if (scan() == IHREAL) {
-		    wfl = TRUE;
-		    twarp = aaitem;
-		    if (twarp<1.0 || twarp > 10.0) {
-			huh();
-			return;
-		    }
-		    continue;
-		}
-		else {
-		    chew();
-		    skip(1);
-		    return;
-		}
-	    }
-	    prout("But if you lower your shields,");
-	    proutn("remaining");
-	    tpower /= 2;
-	}
-	else
-	    proutn("Remaining");
-	prout(" energy will be %.2f.", energy-tpower);
-	if (wfl) {
-	    prout("And we will arrive at stardate %.2f.",
-		  game.state.date+ttime);
-	}
-	else if (twarp==1.0)
-	    prout("Any warp speed is adequate.");
-	else {
-	    prout("Minimum warp needed is %.2f,", twarp);
-	    prout("and we will arrive at stardate %.2f.",
-		  game.state.date+ttime);
-	}
-	if (game.state.remtime < ttime)
-	    prout("Unfortunately, the Federation will be destroyed by then.");
-	if (twarp > 6.0)
-	    prout("You'll be taking risks at that speed, Captain");
-	if ((isatb==1 && game.state.isy == ix1 && game.state.isx == iy1 &&
-	     game.future[FSCDBAS]< ttime+game.state.date)||
-	    (game.future[FCDBAS]<ttime+game.state.date && baty==ix1 && batx == iy1))
-	    prout("The starbase there will be destroyed by then.");
-	proutn("New warp factor to try? ");
-	if (scan() == IHREAL) {
-	    wfl = TRUE;
-	    twarp = aaitem;
-	    if (twarp<1.0 || twarp > 10.0) {
-		huh();
-		return;
-	    }
-	}
-	else {
-	    chew();
-	    skip(1);
-	    return;
-	}
-    }
-			
-}

Deleted: trunk/setup.c
===================================================================
--- trunk/setup.c	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/setup.c	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,742 +0,0 @@
-#include <time.h>
-#include <sys/stat.h>
-#include "sst.h"
-
-static long filelength(int fd) {
-struct stat buf;
-    fstat(fd, &buf);
-    return buf.st_size;
-}
-
-void prelim(void) 
-{
-    skip(2);
-    prout("-SUPER- STAR TREK");
-    skip(1);
-#ifdef __HISTORICAL__
-    prout("Latest update-21 Sept 78");
-    skip(1);
-#endif /* __HISTORICAL__ */
-}
-
-void freeze(int boss) 
-{
-    FILE *fp;
-    int key;
-    if (boss) {
-	strcpy(citem, "emsave.trk");
-    }
-    else {
-	if ((key = scan()) == IHEOL) {
-	    proutn("File name: ");
-	    key = scan();
-	}
-	if (key != IHALPHA) {
-	    huh();
-	    return;
-	}
-	chew();
-	if (strchr(citem, '.') == NULL) {
-	    strcat(citem, ".trk");
-	}
-    }
-    if ((fp = fopen(citem, "wb")) == NULL) {
-	proutn("Can't freeze game as file ");
-	proutn(citem);
-	skip(1);
-	return;
-    }
-    strcpy(game.magic, SSTMAGIC);
-    fwrite(&game, sizeof(game), 1, fp);
-
-    fclose(fp);
-
-    /* I hope that's enough! */
-}
-
-
-int thaw(void) 
-{
-    FILE *fp;
-    int key;
-
-    game.passwd[0] = '\0';
-    if ((key = scan()) == IHEOL) {
-	proutn("File name: ");
-	key = scan();
-    }
-    if (key != IHALPHA) {
-	huh();
-	return 1;
-    }
-    chew();
-    if (strchr(citem, '.') == NULL) {
-	strcat(citem, ".trk");
-    }
-    if ((fp = fopen(citem, "rb")) == NULL) {
-	proutn("Can't find game file ");
-	proutn(citem);
-	skip(1);
-	return 1;
-    }
-    fread(&game, sizeof(game), 1, fp);
-    if (feof(fp) || ftell(fp) != filelength(fileno(fp)) || strcmp(game.magic, SSTMAGIC)) {
-	prout("Game file format is bad, should begin with " SSTMAGIC);
-	skip(1);
-	fclose(fp);
-	return 1;
-    }
-
-    fclose(fp);
-
-    return 0;
-}
-
-void abandn(void) 
-{
-    int nb, l;
-
-    chew();
-    if (condit==IHDOCKED) {
-	if (ship!=IHE) {
-	    prout("You cannot abandon Ye Faerie Queene.");
-	    return;
-	}
-    }
-    else {
-	/* Must take shuttle craft to exit */
-	if (game.damage[DSHUTTL]==-1) {
-	    prout("Ye Faerie Queene has no shuttle craft.");
-	    return;
-	}
-	if (game.damage[DSHUTTL]<0) {
-	    prout("Shuttle craft now serving Big Mac's.");
-	    return;
-	}
-	if (game.damage[DSHUTTL]>0) {
-	    prout("Shuttle craft damaged.");
-	    return;
-	}
-	if (landed==1) {
-	    prout("You must be aboard the Enterprise.");
-	    return;
-	}
-	if (iscraft!=1) {
-	    prout("Shuttle craft not currently available.");
-	    return;
-	}
-	/* Print abandon ship messages */
-	skip(1);
-	prouts("***ABANDON SHIP!  ABANDON SHIP!");
-	skip(1);
-	prouts("***ALL HANDS ABANDON SHIP!");
-	skip(2);
-	prout("Captain and crew escape in shuttle craft.");
-	prout("Remainder of ship's complement beam down");
-	prout("to nearest habitable planet.");
-	if (game.state.rembase==0) {
-	    /* Ops! no place to go... */
-	    finish(FABANDN);
-	    return;
-	}
-	/* If at least one base left, give 'em the Faerie Queene */
-	skip(1);
-	icrystl = 0; /* crystals are lost */
-	nprobes = 0; /* No probes */
-	prout("You are captured by Klingons and released to");
-	prout("the Federation in a prisoner-of-war exchange.");
-	nb = Rand()*game.state.rembase+1;
-	/* Set up quadrant and position FQ adjacient to base */
-	if (quadx!=game.state.baseqx[nb] || quady!=game.state.baseqy[nb]) {
-	    quadx = game.state.baseqx[nb];
-	    quady = game.state.baseqy[nb];
-	    sectx = secty = 5;
-	    newqad(1);
-	}
-	for (;;) {
-	    /* position next to base by trial and error */
-	    game.quad[sectx][secty] = IHDOT;
-	    for_sectors(l) {
-		sectx = 3.0*Rand() - 1.0 + basex;
-		secty = 3.0*Rand() - 1.0 + basey;
-		if (VALID_SECTOR(sectx, secty) &&
-		    game.quad[sectx][secty] == IHDOT) break;
-	    }
-	    if (l < QUADSIZE+1) break; /* found a spot */
-	    sectx=QUADSIZE/2;
-	    secty=QUADSIZE/2;
-	    newqad(1);
-	}
-    }
-    /* Get new commission */
-    game.quad[sectx][secty] = ship = IHF;
-    prout("Starfleet puts you in command of another ship,");
-    prout("the Faerie Queene, which is antiquated but,");
-    prout("still useable.");
-    if (icrystl!=0) prout("The dilithium crystals have been moved.");
-    imine=0;
-    iscraft=0; /* Gallileo disappears */
-    /* Resupply ship */
-    condit=IHDOCKED;
-    for (l = 0; l < NDEVICES; l++) 
-	game.damage[l] = 0.0;
-    game.damage[DSHUTTL] = -1;
-    energy = inenrg = 3000.0;
-    shield = inshld = 1250.0;
-    torps = intorps = 6;
-    lsupres=inlsr=3.0;
-    shldup=0;
-    warpfac=5.0;
-    wfacsq=25.0;
-    return;
-}
-	
-void setup(int needprompt) 
-{
-    int i,j, krem, klumper;
-    int ix, iy;
-#ifdef DEBUG
-    idebug = 0;
-#endif
-    //  Decide how many of everything
-    if (choose(needprompt)) return; // frozen game
-    // Prepare the Enterprise
-    alldone = gamewon = 0;
-    ship = IHE;
-    energy = inenrg = 5000.0;
-    shield = inshld = 2500.0;
-    shldchg = shldup = 0;
-    inlsr = 4.0;
-    lsupres = 4.0;
-    iran(GALSIZE, &quadx, &quady);
-    iran(QUADSIZE, &sectx, &secty);
-    torps = intorps = 10;
-    nprobes = (int)(3.0*Rand() + 2.0);	/* Give them 2-4 of these wonders */
-    warpfac = 5.0;
-    wfacsq = warpfac * warpfac;
-    for (i=0; i < NDEVICES; i++) 
-	game.damage[i] = 0.0;
-    // Set up assorted game parameters
-    batx = baty = 0;
-    game.state.date = indate = 100.0*(int)(31.0*Rand()+20.0);
-    nkinks = nhelp = resting = casual = 0;
-    isatb = iscate = imine = icrystl = icraft = game.state.nplankl = 0;
-    game.state.starkl = game.state.basekl = 0;
-    iscraft = 1;
-    landed = -1;
-    alive = 1;
-    docfac = 0.25;
-    for_quadrants(i)
-	for_quadrants(j) {
-	    game.state.galaxy[i][j].charted = 0;
-	    game.state.galaxy[i][j].planets = 0;
-	    game.state.galaxy[i][j].romulans = 0;
-	    game.state.galaxy[i][j].klingons = 0;
-	    game.state.galaxy[i][j].starbase = 0;
-	    game.state.galaxy[i][j].supernova = 0;
-	}
-    // Initialize times for extraneous events
-    game.future[FSNOVA] = game.state.date + expran(0.5 * intime);
-    game.future[FTBEAM] = game.state.date + expran(1.5 * (intime / game.state.remcom));
-    game.future[FSNAP] = game.state.date + 1.0 + Rand(); // Force an early snapshot
-    game.future[FBATTAK] = game.state.date + expran(0.3*intime);
-    game.future[FCDBAS] = FOREVER;
-    game.future[FSCMOVE] = game.state.nscrem ? game.state.date+0.2777 : FOREVER;
-    game.future[FSCDBAS] = FOREVER;
-    game.future[FDSPROB] = FOREVER;
-    // Starchart is functional but we've never seen it
-    lastchart = FOREVER;
-    // Put stars in the galaxy
-    instar = 0;
-    for_quadrants(i)
-	for_quadrants(j) {
-	    int k = Rand()*9.0 + 1.0;
-	    instar += k;
-	    game.state.galaxy[i][j].stars = k;
-	}
-    // Locate star bases in galaxy
-    for (i = 1; i <= inbase; i++) {
-	int contflag;
-	do {
-	    do iran(GALSIZE, &ix, &iy);
-	    while (game.state.galaxy[ix][iy].starbase);
-	    contflag = FALSE;
-	    for (j = i-1; j > 0; j--) {
-		/* Improved placement algorithm to spread out bases */
-		double distq = square(ix-game.state.baseqx[j]) + square(iy-game.state.baseqy[j]);
-		if (distq < 6.0*(BASEMAX+1-inbase) && Rand() < 0.75) {
-		    contflag = TRUE;
-#ifdef DEBUG
-		    prout("DEBUG: Abandoning base #%d at %d-%d", i, ix, iy);
-#endif
-		    break;
-		}
-#ifdef DEBUG
-		else if (distq < 6.0 * (BASEMAX+1-inbase)) {
-		    prout("DEBUG: saving base #%d, close to #%d", i, j);
-		}
-#endif
-	    }
-	} while (contflag);
-			
-	game.state.baseqx[i] = ix;
-	game.state.baseqy[i] = iy;
-	game.state.galaxy[ix][iy].starbase = 1;
-	game.state.chart[ix][iy].starbase = 1;
-    }
-    // Position ordinary Klingon Battle Cruisers
-    krem = inkling;
-    klumper = 0.25*skill*(9.0-length)+1.0;
-    if (klumper > 9) klumper = 9; // Can't have more than 9 in quadrant
-    do {
-	double r = Rand();
-	int klump = (1.0 - r*r)*klumper;
-	if (klump > krem) klump = krem;
-	krem -= klump;
-	do iran(GALSIZE,&ix,&iy);
-	while (game.state.galaxy[ix][iy].supernova ||
-		game.state.galaxy[ix][iy].klingons + klump > 9);
-	game.state.galaxy[ix][iy].klingons += klump;
-    } while (krem > 0);
-    // Position Klingon Commander Ships
-#ifdef DEBUG
-    klumper = 1;
-#endif
-    for (i = 1; i <= incom; i++) {
-	do {
-	    do { /* IF debugging, put commanders by bases, always! */
-#ifdef DEBUG
-		if (idebug && klumper <= inbase) {
-		    ix = game.state.baseqx[klumper];
-		    iy = game.state.baseqy[klumper];
-		    klumper++;
-		}
-		else
-#endif
-		    iran(GALSIZE, &ix, &iy);
-	    }
-	    while ((!game.state.galaxy[ix][iy].klingons && Rand() < 0.75)||
-		   game.state.galaxy[ix][iy].supernova||
-		   game.state.galaxy[ix][iy].klingons > 8);
-	    // check for duplicate
-	    for (j = 1; j < i; j++)
-		if (game.state.cx[j]==ix && game.state.cy[j]==iy) break;
-	} while (j < i);
-	game.state.galaxy[ix][iy].klingons++;
-	game.state.cx[i] = ix;
-	game.state.cy[i] = iy;
-    }
-    // Locate planets in galaxy
-    for (i = 0; i < inplan; i++) {
-	do iran(GALSIZE, &ix, &iy); while (game.state.galaxy[ix][iy].planets);
-	game.state.galaxy[ix][iy].planets = 1;
-	game.state.plnets[i].x = ix;
-	game.state.plnets[i].y = iy;
-	game.state.plnets[i].pclass = Rand()*3.0; // Planet class M N or O
-	game.state.plnets[i].crystals = 1.5*Rand();		// 1 in 3 chance of crystals
-	game.state.plnets[i].known = unknown;
-    }
-    // Locate Romulans
-    for (i = 1; i <= game.state.nromrem; i++) {
-	iran(GALSIZE, &ix, &iy);
-	game.state.galaxy[ix][iy].romulans = 1;
-    }
-    // Locate the Super Commander
-    if (game.state.nscrem > 0) {
-	do iran(GALSIZE, &ix, &iy);
-	while (game.state.galaxy[ix][iy].supernova || game.state.galaxy[ix][iy].klingons > 8);
-	game.state.isx = ix;
-	game.state.isy = iy;
-	game.state.galaxy[ix][iy].klingons++;
-    }
-    // Place thing (in tournament game, thingx == -1, don't want one!)
-    if (thingx != -1) {
-	iran(GALSIZE, &thingx, &thingy);
-    }
-    else {
-	thingx = thingy = 0;
-    }
-
-//	idate = date;
-    skip(2);
-    game.state.snap = 0;
-		
-    if (skill == SKILL_NOVICE) {
-	prout("It is stardate %d. The Federation is being attacked by",
-	      (int)game.state.date);
-	prout("a deadly Klingon invasion force. As captain of the United");
-	prout("Starship U.S.S. Enterprise, it is your mission to seek out");
-	prout("and destroy this invasion force of %d battle cruisers.",
-	      INKLINGTOT);
-	prout("You have an initial allotment of %d stardates to complete", (int)intime);
-	prout("your mission.  As you proceed you may be given more time.");
-	prout("");
-	prout("You will have %d supporting starbases.", inbase);
-	proutn("Starbase locations-  ");
-    }
-    else {
-	prout("Stardate %d.", (int)game.state.date);
-	prout("");
-	prout("%d Klingons.", INKLINGTOT);
-	prout("An unknown number of Romulans.");
-	if (game.state.nscrem) prout("and one (GULP) Super-Commander.");
-	prout("%d stardates.",(int)intime);
-	proutn("%d starbases in ", inbase);
-    }
-    for (i = 1; i <= inbase; i++) {
-	proutn(cramlc(0, game.state.baseqx[i], game.state.baseqy[i]));
-	proutn("  ");
-    }
-    skip(2);
-    proutn("The Enterprise is currently in ");
-    proutn(cramlc(quadrant, quadx, quady));
-    proutn(" ");
-    proutn(cramlc(sector, sectx, secty));
-    skip(2);
-    prout("Good Luck!");
-    if (game.state.nscrem) prout("  YOU'LL NEED IT.");
-    waitfor();
-    newqad(0);
-    if (nenhere-iqhere-ithere) shldup=1.0;
-    if (neutz) attack(0);	// bad luck to start in a Romulan Neutral Zone
-}
-
-void randomize(void) 
-{
-    srand((int)time(NULL));
-}
-
-int choose(int needprompt) 
-{
-    while (TRUE) {
-	tourn = 0;
-	thawed = 0;
-	skill = SKILL_NONE;
-	length = 0;
-	if (needprompt) /* Can start with command line options */
-	    proutn("Would you like a regular, tournament, or saved game? ");
-	scan();
-	if (strlen(citem)==0) continue; // Try again
-	if (isit("tournament")) {
-	    while (scan() == IHEOL) {
-		proutn("Type in tournament number-");
-	    }
-	    if (aaitem == 0) {
-		chew();
-		continue; // We don't want a blank entry
-	    }
-	    tourn = (int)aaitem;
-	    thingx = -1;
-	    srand((unsigned int)(int)aaitem);
-	    break;
-	}
-	if (isit("saved") || isit("frozen")) {
-	    if (thaw()) continue;
-	    chew();
-	    if (*game.passwd==0) continue;
-	    if (!alldone) thawed = 1; // No plaque if not finished
-	    report();
-	    waitfor();
-	    return TRUE;
-	}
-	if (isit("regular")) break;
-	proutn("What is \"");
-	proutn(citem);
-	prout("\"?");
-	chew();
-    }
-    while (length==0 || skill==SKILL_NONE) {
-	if (scan() == IHALPHA) {
-	    if (isit("short")) length = 1;
-	    else if (isit("medium")) length = 2;
-	    else if (isit("long")) length = 4;
-	    else if (isit("novice")) skill = SKILL_NOVICE;
-	    else if (isit("fair")) skill = SKILL_FAIR;
-	    else if (isit("good")) skill = SKILL_GOOD;
-	    else if (isit("expert")) skill = SKILL_EXPERT;
-	    else if (isit("emeritus")) skill = SKILL_EMERITUS;
-	    else {
-		proutn("What is \"");
-		proutn(citem);
-		prout("\"?");
-	    }
-	}
-	else {
-	    chew();
-	    if (length==0) proutn("Would you like a Short, Medium, or Long game? ");
-	    else if (skill == SKILL_NONE) proutn("Are you a Novice, Fair, Good, Expert, or Emeritus player? ");
-	}
-    }
-    // Choose game options -- added by ESR for SST2K
-    if (scan() != IHALPHA) {
-	chew();
-	proutn("Choose your game options: ");
-	scan();
-    }
-    if (isit("plain")) {
-	// Approximates the UT FORTRAN version.
-	game.options &=~ (OPTION_THOLIAN | OPTION_PLANETS | OPTION_THINGY | OPTION_PROBE | OPTION_RAMMING | OPTION_MVBADDY | OPTION_BLKHOLE | OPTION_BASE);
-	game.options |= OPTION_PLAIN;
-    } 
-    else if (isit("almy")) {
-	// Approximates Tom Almy's version.
-	game.options &=~ (OPTION_THINGY | OPTION_BLKHOLE | OPTION_BASE);
-	game.options |= OPTION_ALMY;
-    }
-    else if (isit("fancy"))
-	/* do nothing */;
-    else if (strlen(citem)) {
-	    proutn("What is \"");
-	    proutn(citem);
-	    prout("\"?");
-    }
-    setpassword();
-#ifdef DEBUG
-    if (strcmp(game.passwd, "debug")==0) idebug = 1;
-#endif
-
-    // Use parameters to generate initial values of things
-    damfac = 0.5 * skill;
-    game.state.rembase = 2.0 + Rand()*(BASEMAX-2.0);
-    inbase = game.state.rembase;
-    if (game.options & OPTION_PLANETS)
-	inplan = (PLNETMAX/2) + (PLNETMAX/2+1)*Rand();
-    game.state.nromrem = inrom = (2.0+Rand())*skill;
-    game.state.nscrem = inscom = (skill > SKILL_FAIR ? 1 : 0);
-    game.state.remtime = 7.0 * length;
-    intime = game.state.remtime;
-    game.state.remkl = inkling = 2.0*intime*((skill+1 - 2*Rand())*skill*0.1+.15);
-    incom = skill + 0.0625*inkling*Rand();
-    game.state.remcom = min(10, incom);
-    incom = game.state.remcom;
-    game.state.remres = (inkling+4*incom)*intime;
-    inresor = game.state.remres;
-    if (inkling > 50) {
-	inbase = (game.state.rembase += 1);
-    }
-    return FALSE;
-}
-
-void dropin(int iquad, int *ix, int *iy) 
-{
-    do iran(QUADSIZE, ix, iy);
-    while (game.quad[*ix][*iy] != IHDOT);
-    game.quad[*ix][*iy] = iquad;
-}
-
-void newcnd(void) 
-{
-    condit = IHGREEN;
-    if (energy < 1000.0) condit = IHYELLOW;
-    if (game.state.galaxy[quadx][quady].klingons || game.state.galaxy[quadx][quady].romulans)
-	condit = IHRED;
-    if (!alive) condit=IHDEAD;
-}
-
-
-void newqad(int shutup) 
-{
-    int i, j, ix, iy, nplan;
-
-    iattak = 1;
-    justin = 1;
-    basex = basey = 0;
-    klhere = 0;
-    comhere = 0;
-    plnetx = plnety = 0;
-    ishere = 0;
-    irhere = 0;
-    iplnet = 0;
-    nenhere = 0;
-    neutz = 0;
-    inorbit = 0;
-    landed = -1;
-    ientesc = 0;
-    ithere = 0;
-    iqhere=0;
-    iqengry=0;
-    iseenit = 0;
-    if (iscate) {
-	// Attempt to escape Super-commander, so tbeam back!
-	iscate = 0;
-	ientesc = 1;
-    }
-    // Clear quadrant
-    for_sectors(i)
-	for_sectors(j) 
-	    game.quad[i][j] = IHDOT;
-    // cope with supernova
-    if (game.state.galaxy[quadx][quady].supernova)
-	return;
-    klhere = game.state.galaxy[quadx][quady].klingons;
-    irhere = game.state.galaxy[quadx][quady].romulans;
-    nplan  = game.state.galaxy[quadx][quady].planets;
-    nenhere = klhere + irhere;
-
-    // Position Starship
-    game.quad[sectx][secty] = ship;
-
-    if (game.state.galaxy[quadx][quady].klingons) {
-	// Position ordinary Klingons
-	for (i = 1; i <= klhere; i++) {
-	    dropin(IHK, &ix, &iy);
-	    game.kx[i] = ix;
-	    game.ky[i] = iy;
-	    game.kdist[i] = game.kavgd[i] = sqrt(square(sectx-ix) + square(secty-iy));
-	    game.kpower[i] = Rand()*150.0 +300.0 +25.0*skill;
-	}
-	// If we need a commander, promote a Klingon
-	for_commanders(i)
-	    if (game.state.cx[i]==quadx && game.state.cy[i]==quady) break;
-			
-	if (i <= game.state.remcom) {
-	    game.quad[ix][iy] = IHC;
-	    game.kpower[klhere] = 950.0+400.0*Rand()+50.0*skill;
-	    comhere = 1;
-	}
-
-	// If we need a super-commander, promote a Klingon
-	if (quadx == game.state.isx && quady == game.state.isy) {
-	    game.quad[game.kx[1]][game.ky[1]] = IHS;
-	    game.kpower[1] = 1175.0 + 400.0*Rand() + 125.0*skill;
-	    iscate = game.state.remkl>1;
-	    ishere = 1;
-	}
-    }
-    // Put in Romulans if needed
-    for (i = klhere+1; i <= nenhere; i++) {
-	dropin(IHR, &ix, &iy);
-	game.kx[i] = ix;
-	game.ky[i] = iy;
-	game.kdist[i] = game.kavgd[i] = sqrt(square(sectx-ix) + square(secty-iy));
-	game.kpower[i] = Rand()*400.0 + 450.0 + 50.0*skill;
-    }
-    // If quadrant needs a starbase, put it in
-    if (game.state.galaxy[quadx][quady].starbase)
-	dropin(IHB, &basex, &basey);
-	
-    if (nplan) {
-	// If quadrant needs a planet, put it in
-	for (i=0; i < inplan; i++)
-	    if (game.state.plnets[i].x == quadx && game.state.plnets[i].y == quady) break;
-	if (i < inplan) {
-	    iplnet = i;
-	    dropin(IHP, &plnetx, &plnety);
-	}
-    }
-    // Check for condition
-    newcnd();
-    // And finally the stars
-    for (i = 1; i <= game.state.galaxy[quadx][quady].stars; i++) 
-	dropin(IHSTAR, &ix, &iy);
-
-    // Check for RNZ
-    if (irhere > 0 && klhere == 0) {
-	neutz = 1;
-	if (game.damage[DRADIO] <= 0.0) {
-	    skip(1);
-	    prout("LT. Uhura- \"Captain, an urgent message.");
-	    prout("  I'll put it on audio.\"  CLICK");
-	    skip(1);
-	    prout("INTRUDER! YOU HAVE VIOLATED THE ROMULAN NEUTRAL ZONE.");
-	    prout("LEAVE AT ONCE, OR YOU WILL BE DESTROYED!");
-	}
-    }
-
-    if (shutup==0) {
-	// Put in THING if needed
-	if (thingx == quadx && thingy == quady) {
-	    dropin(IHQUEST, &ix, &iy);
-	    iran(GALSIZE, &thingx, &thingy);
-	    nenhere++;
-	    iqhere=1;
-	    game.kx[nenhere] = ix;
-	    game.ky[nenhere] = iy;
-	    game.kdist[nenhere] = game.kavgd[nenhere] =
-		sqrt(square(sectx-ix) + square(secty-iy));
-	    game.kpower[nenhere] = Rand()*6000.0 +500.0 +250.0*skill;
-	    if (game.damage[DSRSENS] == 0.0) {
-		skip(1);
-		prout("MR. SPOCK- \"Captain, this is most unusual.");
-		prout("    Please examine your short-range scan.\"");
-	    }
-	}
-    }
-
-    // Decide if quadrant needs a Tholian
-    if (game.options & OPTION_THOLIAN) {
-	if ((skill < SKILL_GOOD && Rand() <= 0.02) ||   /* Lighten up if skill is low */
-	    (skill == SKILL_GOOD && Rand() <= 0.05) ||
-	    (skill > SKILL_GOOD && Rand() <= 0.08)
-    #ifdef DEBUG
-	    || strcmp(game.passwd, "tholianx")==0
-    #endif
-	    ) {
-	    do {
-		ithx = Rand() > 0.5 ? QUADSIZE : 1;
-		ithy = Rand() > 0.5 ? QUADSIZE : 1;
-	    } while (game.quad[ithx][ithy] != IHDOT);
-	    game.quad[ithx][ithy] = IHT;
-	    ithere = 1;
-	    nenhere++;
-	    game.kx[nenhere] = ithx;
-	    game.ky[nenhere] = ithy;
-	    game.kdist[nenhere] = game.kavgd[nenhere] =
-		sqrt(square(sectx-ithx) + square(secty-ithy));
-	    game.kpower[nenhere] = Rand()*400.0 +100.0 +25.0*skill;
-	    /* Reserve unocupied corners */
-	    if (game.quad[1][1]==IHDOT) game.quad[1][1] = 'X';
-	    if (game.quad[1][QUADSIZE]==IHDOT) game.quad[1][QUADSIZE] = 'X';
-	    if (game.quad[QUADSIZE][1]==IHDOT) game.quad[QUADSIZE][1] = 'X';
-	    if (game.quad[QUADSIZE][QUADSIZE]==IHDOT) game.quad[QUADSIZE][QUADSIZE] = 'X';
-	}
-    }
-
-    sortkl();
-
-    // Put in a few black holes
-    for (i = 1; i <= 3; i++)
-	if (Rand() > 0.5) 
-	    dropin(IHBLANK, &ix, &iy);
-
-    // Take out X's in corners if Tholian present
-    if (ithere) {
-	if (game.quad[1][1]=='X') game.quad[1][1] = IHDOT;
-	if (game.quad[1][QUADSIZE]=='X') game.quad[1][QUADSIZE] = IHDOT;
-	if (game.quad[QUADSIZE][1]=='X') game.quad[QUADSIZE][1] = IHDOT;
-	if (game.quad[QUADSIZE][QUADSIZE]=='X') game.quad[QUADSIZE][QUADSIZE] = IHDOT;
-    }		
-}
-
-void sortkl(void) 
-{
-    double t;
-    int sw, j, k;
-
-    // The author liked bubble sort. So we will use it. :-(
-
-    if (nenhere-iqhere-ithere < 2) return;
-
-    do {
-	sw = FALSE;
-	for (j = 1; j < nenhere; j++)
-	    if (game.kdist[j] > game.kdist[j+1]) {
-		sw = TRUE;
-		t = game.kdist[j];
-		game.kdist[j] = game.kdist[j+1];
-		game.kdist[j+1] = t;
-		t = game.kavgd[j];
-		game.kavgd[j] = game.kavgd[j+1];
-		game.kavgd[j+1] = t;
-		k = game.kx[j];
-		game.kx[j] = game.kx[j+1];
-		game.kx[j+1] = k;
-		k = game.ky[j];
-		game.ky[j] = game.ky[j+1];
-		game.ky[j+1] = k;
-		t = game.kpower[j];
-		game.kpower[j] = game.kpower[j+1];
-		game.kpower[j+1] = t;
-	    }
-    } while (sw);
-}

Copied: trunk/src (from rev 538, branches/at-work/src)

Deleted: trunk/sst-doc.xml
===================================================================
--- trunk/sst-doc.xml	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/sst-doc.xml	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,1964 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1"?>
-<!DOCTYPE book PUBLIC 
-    "-//OASIS//DTD DocBook XML V4.1.2//EN" 
-    "docbook/docbookxx.dtd"[
-<!ENTITY sst-site      "http://sst.berlios.de/">
-<!ENTITY retro         "http://catb.org/~esr/retro/">
-]>
-<book>
-<bookinfo>
-<title>Super Star Trek</title>
-
-<authorgroup>
-<author>
-  <firstname>David</firstname>
-  <surname>Matuzsek</surname>
-</author>
-<author>
-  <firstname>Paul</firstname>
-  <surname>Reynolds</surname>
-</author>
-<author>
-  <firstname>Tom</firstname>
-  <surname>Almy</surname>
-</author>
-<author>
-  <firstname>Stas</firstname>
-  <surname>Sergeev</surname>
-</author>
-<author>
-  <firstname>Eric</firstname>
-  <othername>Steven</othername>
-  <surname>Raymond</surname>
-</author>
-</authorgroup>
-
-<legalnotice>
-<para>Permission is hereby granted for the copying, distribution,
-modification and use of this program and associated documentation
-for recreational purposes, provided that all references to the
-authors are retained.  However, permission is not and will not be
-granted for the sale or promotional use of this program or program
-documentation, or for use in any situation in which profit may be
-considered an objective, since it is the desire of the authors to
-respect the copyrights of the originators of Star Trek.</para>
-</legalnotice>
-</bookinfo>
-
-
-<dedication>
-<literallayout format='linespecific' class='monospaced'>
-                SSSSS   U   U   PPPPP   EEEEE   RRRRR
-                S       U   U   P   P   E       R   R
-                SSSSS   U   U   PPPPP   EEEE    RRRRR
-                    S   U   U   P       E       R  R
-                SSSSS   UUUUU   P       EEEEE   R   R
-
-
-                 SSSSSSS  TTTTTTTT     A     RRRRRRR
-                SSSSSSSS  TTTTTTTT    AAA    RRRRRRRR
-               SS            TT       AAA    RR     RR
-               SSSSSSS       TT      AA AA   RR     RR
-                SSSSSSS      TT      AA AA   RRRRRRRR
-                      SS     TT     AAAAAAA  RRRRRRR
-                      SS     TT     AAAAAAA  RR   RR
-               SSSSSSSS      TT    AA     AA RR    RR
-               SSSSSSS       TT    AA     AA RR     RR
-    
-    
-    
-                TTTTTTTT RRRRRRR   EEEEEEEEE KK     KK
-                TTTTTTTT RRRRRRRR  EEEEEEEEE KK    KK
-                   TT    RR     RR EE        KK   KK
-                   TT    RR     RR EEEEEE    KKKKKK
-                   TT    RRRRRRRR  EEEEEE    KKKKK
-                   TT    RRRRRRR   EE        KK  KK
-                   TT    RR   RR   EE        KK   KK
-                   TT    RR    RR  EEEEEEEEE KK    KK
-                   TT    RR     RR EEEEEEEEE KK     KK
-
-
-                     Produced For Your Enjoyment
-
-                                 By
-
-                            David Matuszek
-                                 and
-                            Paul Reynolds
-
-                        With Modifications By
-                              Don Smith
-
-                            Resurrected By
-                               Tom Almy
-
-			  Curses Interface By
-                              Stas Sergeev 
-
-		SST 2K polishing and historical research by
-			     Eric S. Raymond
-</literallayout>
-</dedication>
-
-<chapter><title>Introduction</title>
-<para>The Organian Peace Treaty has collapsed, and the Federation is at war
-with the Klingon Empire.  Joining the Klingons against the Federation
-are the members of the <quote>Romulan Star Empire.</quote>  As commander of the
-Starship U.S.S. Enterprise, your job is to wipe out the Klingon
-invasion fleet and make the galaxy safe for democracy.</para>
-
-<para>Your battleground is the entire galaxy, which for convenience is
-divided up into eight rows of eight quadrants each, like a
-checkerboard.  Rows are numbered from top to bottom, and columns are
-numbered left to right, so quadrant 1 - 8 would be in the upper right
-hand corner of the galaxy.</para>
-
-<para>During battle you will be concerned only with those enemies that
-occupy the same quadrant as yourself.  Quadrants are divided up into
-sectors: ten rows of ten sectors each. Sectors are numbered in the
-same way as quadrants, so the sector in the upper right corner is
-sector 1 - 10.  You have a short-range scanner which allows you to
-look at the entire quadrant in a single display.</para>
-
-<para>Enemies recharge during your absence.  If you leave a quadrant
-containing a weakened enemy, when you return to that quadrant he will
-be strong again.  Also, each time you enter a quadrant, the positions
-of everthing in the quadrant (except your ship) are randomized, to
-save you the trouble of trying to remember where everything in the
-quadrant is.  Notice that this refers only to the positions of things
-in the quadrant&mdash;the numbers of each kind of thing are not changed
-(except for black holes and the Super-commander, which move around
-the galaxy).  If you kill something, it stays dead.</para>
-
-<para>The Romulans are not as serious a threat to the Federation as the
-Klingons.  For one thing, there are not as many of them.  For
-another, the Romulans are not as treacherous.  However, Romulans are
-not to be trifled with, especially when you are in violation of the
-Romulan Neutral Zone.</para>
-
-<para>There are two kinds of Klingons: Ordinary Klingons, which are
-bad enough, and Klingon Commanders, which are even worse.  Commanders
-are about three times stronger than ordinary Klingons.  Commanders are
-more resistant to your weapons.  Commanders can move about during
-battle while Ordinary Klingons stay put.  And finally, Commanders have
-a thing called a <quote>long-range tractor beam</quote> which they can
-use, at random intervals, to yank you away from what you are doing
-into their quadrant, to do battle with them.  There is also a special
-commander, called the <quote>Super-commander.</quote> This character
-is so bad he is reserved for the Good, Expert, and Emeritus games.
-Fortunately, there is just one Super-commander in a game.  In addition
-to the undesirable traits of Commanders, he can move from quadrant to
-quadrant at will, seeking out and destroying your starbases and any
-helpful planets he runs across.  He also has a spy planted aboard your
-ship, giving him valuable information about your condition.  Using
-this information, he can do dastardly things like tractor beam your
-ship when you are in bad shape.  And once you've been tractor beamed
-by the Super-commander &mdash;</para>
-
-<para>But the advantages are not all on the side of the enemy.  Your ship
-is more powerful, and has better weapons.  Besides, in the this
-galaxy there are from two to five starbases, at which you can stop to
-refuel and lick your wounds, safe from phaser attack or tractor
-beams.  But you had best not dally there too long, since time is not
-on your side.  The Klingons are not just after you; they are
-attacking the entire Federation.  There is always a finite <quote>time
-left,</quote> which is how much longer the Federation can hold out if you
-just sit on your fat behind and do nothing.  As you wipe out
-Klingons, you reduce the rate at which the invasion fleet weakens the
-Federation, and so the time left until the Federation collapses may
-actually increase.  Since Klingons are the main threat to the
-Federation, the Romulans do not figure into the <quote>time left.</quote>  In
-fact, you need not kill all the Romulans to win.  If you can get all
-the Klingons, the Federation will abide forever, and you have won the
-game.</para>
-
-<para>Space is vast, and it takes precious time to move from one place to
-another.  In comparison, other things happen so quickly that we
-assume they take no time at all. Two ways that time can pass are when
-you move, or when you issue a command to sit still and rest for a
-period of time.  You will sometimes want to do the latter, since the
-various devices aboard your starship may be damaged and require time
-to repair.  Of course, repairs can be made more quickly at a starbase
-than than can in flight.</para>
-
-<para>In addition to Klingons, Romulans, and starbases, the galaxy
-contains (surprise) stars.  Mostly, stars are a nuisance and just get
-in your way.  You can trigger a star into going nova by shooting one
-of your photon torpedoes at it.  When a star novas, it does a lot of
-dammage to anything immediately adjacent to it.  If another star is
-adjacent to a nova, it too will go nova.  Stars may also occasionally
-go supernova; a supernova in a quadrant destroys everything in the
-quadrant andmakes the quadrant permanently uninhabitable.  You may
-<quote>jump over</quote> a quadrant containing a supernova when you
-move, but you should not stop there.</para>
-
-<para>Supernovas may happen spontaneously, without provocation.  If a
-supernova occurs in the same quadrant you are in, your starship has an
-<quote>emergency automatic override</quote> which picks some random
-direction and some random warp factor, and tries to throw you clear of
-the supernova. If the supernova occurs in some other quadrant, you
-just get a warning message from starfleet about it (provided, of
-course, that your subspace radio is working).</para>
-
-<para>Also a few planets are scattered through the galaxy.  These can
-sometimes be a great help since some of them will have <quote>dilithium
-crystals,</quote> which are capable of replenishing the ship's energy
-supply.  You can either beam down to the planet surface using the
-transporter, or take the shuttle craft <quote>Galileo</quote>.</para>
-
-<para>Finally, each quadrant will contain from zero to three black
-holes.  These can deflect or swallow torpedoes passing near them. They
-also swallow enemy ships knocked into them.  If your ship enters one
-&mdash;</para>
-
-<para>Star Trek is a rich game, full of detail.  These instructions are
-written at a moderate level&mdash;no attempt has been made fully to
-describe everything about the game, but there is quite a bit more
-here than you need to get started.  If you are new to the game, just
-get a rough idea of the kinds of commands available, and start
-playing.  After a game or two you will have learned everthing
-important, and the detailed command descriptions which follow will be
-a lot more meaningful to you.</para>
-
-<para>You have weapons: phasers and photon torpedoes. You have a defense:
-deflector shields.  You can look at things: long-range scaners,
-short-range scanners, and a star chart.  You can move about, under
-warp drive or impulse power.  You can also dock at a starbase, rest
-while repairs are being made, abandon ship, self destruct, or give up
-and start a new game.</para>
-
-<para>The Klingons are waiting.</para>
-
-</chapter>
-<chapter><title>Starting the Game</title>
-
-<para>The program will ask you some setup questions.  You can give it 
-command-line arguments that will be treated as answers.  Any token
-may be abbreviated to a unique prefix.</para>
-
-<para>The first question concerns whether you want a regullar,
-tournament, or saved game.  For discussion, see the <link
-linkend="freeze">description of the freeze command</link>.</para>
-
-<para>The second question will concern the length of the game.  
-Longer games include more enemies.</para>
-
-<para>The third question will set the game's difficulty level.
-You should probably start out at the novice level, even if you are
-already familiar with one of the other versions of the Star Trek
-game&mdash;but, of course, the level of game you play is up to you.  If
-you want to start at the Expert level, go ahead.  It's your funeral.
-The Emeritus game is strictly for masochists.</para>
-
-<para>The fourth question, new in SST2K, sets your game options.  A
-blank answer or 'fancy' enables all SST2K features.  The option
-'plain' disables a number of features (Tholians, planets &amp;
-dilithium, Thingies shooting back, deep-space-probes, Klingon ramming
-and movement, time-warping through black holes, death-ray upgrade),
-approximating the original CDC 6600 FORTRAN game from UT Austin.  The
-option 'almy' approximates Tom Almy's C translation from 1979,
-disabling Thingies shooting back, base shields, and time-warping
-through black holes.</para>
-
-</chapter>
-<chapter><title>How To Issue Commands</title>
-
-<para>When the game is waiting for you to enter a command it will
-print out</para>
-
-<screen>
-	COMMAND>
-</screen>
-
-<para>You may then type in your command.  All you have to remember for each
-command is the mnemonic. For example, if you want to move straight up
-one quadrant, you can type in the mnemonic (case insensitive)</para>
-
-<screen>
-	move
-</screen>
-
-<para>and the computer will prompt you with</para>
-
-<screen>
-	Manual or automatic- 
-</screen>
-
-<para>Say you type in <quote>manual</quote>. The computer then responds</para>
-
-<screen>
-	X and Y displacements- 
-</screen>
-
-<para>Now you type in <quote>0 1</quote> which specifies an X movement of zero and a Y
-movement of one.</para>
-
-<para>When you have learned the commands, you can avoid being prompted
-simply by typing in the information without waiting to be asked for
-it. For example, in the above example, you could simply type in</para>
-
-<screen>
-	move manual 0 1
-</screen>
-
-<para>and it will be done.  Or you could type in</para>
-
-<screen>
-	move manual
-</screen>
-
-<para>and when the computer responds with the displacement prompt, you
-can type in</para>
-
-<screen>
-	0 1
-</screen>
-
-<para>and it will understand.</para>
-
-<para>You can abbreviate most mnemonics.  For <quote>move</quote>, you can use any
-of</para>
-
-<screen>
-	move mov mo m
-</screen>
-
-<para>successfully.  For your safety, certain critical commands (such as to
-abandon ship) must be written out in full.  Also, in a few cases two
-or more commands begin with the same letter, and in this case that
-letter refers to a particular one of the commands; to get the other,
-your abbreviation must be two or more characters long.  This sounds
-complicated, but you will learn the abbreviations qGuickly enough.</para>
-
-<para>What this all boils down to is:</para>
-
-<orderedlist>
-<listitem><para>You can abbreviate practically anything</para></listitem>
-<listitem><para>If you forget, the computer will prompt you</para></listitem>
-<listitem><para>If you remember, you can type it all on one line</para></listitem>
-</orderedlist>
-
-<para>If you are part way through entering a command and you change your
-minde, you can cancel the command by typing -1 as one of the
-parameters, with the exception of the manual move command.</para>
-
-<para>If anything is not clear to you, experiment.  The worst you can do is
-lose a game or two.</para>
-
-</chapter>
-<chapter><title>List of Commands</title>
-
-<sect1><title>Short-Range Scan</title>
-
-<literallayout>
-Mnemonic:  SRSCAN
-Shortest abbreviation:  S
-Full commands:  SRSCAN
-                SRSCAN NO
-                SRSCAN CHART
-</literallayout>
-
-<!-- This is new in SST 2K -->
-<para>If you are using the screen-oriented interface, this command is
-suppressed; instead, a short-range scan will always be present on the
-screen.</para>
-
-<para>The short-range scan gives you a considerable amount of information
-about the quadrant your starship is in.  A short-range scan is best
-described by an example.</para>
-
-<screen>
-         1 2 3 4 5 6 7 8 9 10
-      1  * . . . . R . . . .  Stardate      2516.3
-      2  . . . E . . . . . .  Condition     RED  
-      3  . . . . . * . B . .  Position      5 - 1, 2 - 4
-      4  . . . S . . . . . .  Life Support  DAMAGED, Reserves=2.30
-      5  . . . . . . . K . .  Warp Factor   5.0
-      6  . K .   . . . . * .  Energy        2176.24
-      7  . . . . . P . . . .  Torpedoes     3
-      8  . . . . * . . . . .  Shields       UP, 42% 1050.0 units
-      9  . * . . * . . . C .  Klingons Left 12
-     10  . . . . . . . . . .  Time Left     3.72
-</screen>
-
-<para>The left part is a picture of the quadrant.  The E at sector 2 -
-4 represents the Enterprise; the B at sector 3 - 8 is a starbase.
-There are ordinary Klingons (K) at sectors 5 - 8 and 6 - 2, and a
-Klingon Commander (C) at 9 - 9.  The (GULP)
-<quote>Super-commander</quote> (S) is occupies sector 4 - 4, and a
-Romulan (R) is at 1 - 6.  A planet (P) is at sector 7 - 6.  There are
-also a large number of stars (*). The periods (.) are just empty
-space&mdash;they are printed to help you get your bearings.  Sector 6
-- 4 contains a black hole ( ).</para>
-
-<para>The information on the right is assorted status information. You
-can get this alone with the STATUS command.  The status information
-will be absent if you type <quote>N</quote> after SRSCAN.  Otherwise
-status information will be presented.</para>
-
-<para>If you type <quote>C</quote> after SRSCAN, you will be given a
-short-range scan and a Star Chart.</para>
-
-<para>Short-range scans are free.  That is, they use up no energy and no
-time.  If you are in battle, doing a short-range scan does not give
-the enemies another chance to hit you.  You can safely do a
-short-range scan anytime you like.</para>
-
-<para>If your short-range sensors are damaged, this command will only show
-the contents of adjacent sectors.</para>
-</sect1>
-<sect1><title>Status Report</title>
-
-<literallayout>
-Mnemonic:  STATUS
-Shortest abbreviation: ST
-</literallayout>
-
-<!-- This is new in SST 2K --> 
-<para>If you are using the screen-oriented interface, this command is
-suppressed; instead, a full status report will always be present on the
-screen.</para>
-
-<para>This command gives you information about the current state of your
-starship as follows:</para>
-
-<variablelist>
-<varlistentry>
-<term>STARDATE</term>
-<listitem>
-<para>The current date. A stardate is the same as a day.</para>
-</listitem>
-</varlistentry>
-<varlistentry>
-<term>CONDITION</term>
-<listitem>
-<para>There are four possible conditions:</para>
-    <variablelist>
-    <varlistentry>
-    <term>DOCKED</term>
-    <listitem><para>docked at starbase.</para></listitem>
-    </varlistentry>
-    <varlistentry>
-    <term>RED</term>
-    <listitem><para>in battle.</para></listitem>
-    </varlistentry>
-    <varlistentry>
-    <term>YELLOW</term>
-    <listitem><para>low on energy (&lt;1000 units)</para></listitem>
-    </varlistentry>
-    <varlistentry>
-    <term>GREEN</term>
-    <listitem><para>none of the above</para></listitem>
-    </varlistentry>
-    </variablelist>
-</listitem>
-</varlistentry>
-<varlistentry>
-<term>POSITION</term>
-<listitem>
-<para>Quadrant is given first, then sector</para>
-</listitem>
-</varlistentry>
-<varlistentry>
-<term>LIFE SUPPOR</term>
-<listitem>
-<para>If <quote>ACTIVE</quote> then life support systems are functioning
-normally. If on <quote>RESERVES</quote> the number is how many stardates your
-reserve food, air, etc. will last&mdash;you must get repairs made or get to
-starbase before your reserves run out.</para>
-</listitem>
-</varlistentry>
-<varlistentry>
-<term>WARP FACTOR</term>
-<listitem>
-<para>What your warp factor is currently set to.</para>
-</listitem>
-</varlistentry>
-<varlistentry>
-<term>ENERGY</term>
-<listitem>
-<para>The amount of energy you have left. If it drops to zero, you die.</para>
-</listitem>
-</varlistentry>
-<varlistentry>
-<term>TORPEDOES</term>
-<listitem>
-<para>How many photon torpedoes you have left.</para>
-</listitem>
-</varlistentry>
-<varlistentry>
-<term>SHIELDS</term>
-<listitem>
-<para>Whether your shields are up or down, how strong they are
-(what percentage of a hit they can deflect), and shield energy.</para> 
-</listitem>
-</varlistentry>
-<varlistentry>
-<term>KLINGONS LEFT</term>
-<listitem>
-<para>How many of the Klingons are still out there.</para>
-</listitem>
-</varlistentry>
-<varlistentry>
-<term>TIME LEFT</term>
-<listitem>
-<para>How long the Federation can hold out against the
-present number of Klingons; that is, how long until the end
-if you do nothing in the meantime.  If you kill Klingons
-quickly, this number will go up&mdash;if not, it will go down.  If
-it reaches zero, the federation is conquered and you lose.</para>
-</listitem>
-</varlistentry>
-</variablelist>
-
-<para>Status information is free&mdash;it uses no time or energy, and
-if you are in battle, the Klingons are not given another chance to hit
-you.</para>
-
-<para>Status information can also be obtained by doing a short-range scan.
-See the SRSCAN command for details.</para>
-
-<para>Each item of information can be obtained singly by requesting it.
-See REQUEST command for details.</para>
-
-</sect1>
-<sect1><title>Long-Range Scan</title>
-
-<literallayout>
-Mnemonic:  LRSCAN
-Shortest abbreviation:  L
-</literallayout>
-
-<!-- This is new in SST 2K --> 
-<para>If you are using the screen-oriented interface, this command is
-suppressed; instead, a long-range scan will always be present on the
-screen.</para>
-
-<para>A long-range scan gives you general information about where you are
-and what is around you.  Here is an example output.</para>
-
-<screen>
-    Long-range scan for Quadrant 5 - 1
-       -1  107  103
-       -1  316    5
-       -1  105 1000
-</screen>
-
-<para>This scan says that you are in row 5, column 1 of the 8 by 8 galaxy.
-The numbers in the scan indicate how many of each kind of thing there
-is in your quadrant and all adjacent quadrants.  The digits are
-interpreted as follows.</para>
-
-<informaltable>
-<tgroup cols='2'>
-<tbody>
-<row>
-  <entry>Thousands digit:</entry>
-  <entry>1000 indicates a supernova (only)</entry>
-</row>
-<row>
-  <entry>Hundreds digit:</entry>
-  <entry>number of Klingons present</entry>
-</row>
-<row>
-  <entry>Tens digit:</entry>
-  <entry>number of starbases present</entry>
-</row>
-<row>
-  <entry>Ones digit:</entry>
-  <entry>number of stars present</entry>
-</row>
-</tbody>
-</tgroup>
-</informaltable>
-
-<para>For example, in your quadrant (5 - 1) the number is 316, which
-indicates 3 Klingons, 1 starbase, and 6 stars.  The long-range
-scanner does not distinguish between ordinary Klingons and Klingon
-command ships.  If there is a supernova, as in the quadrant below and
-to your right (quadrant 6 - 2), there is nothing else in the
-quadrant. </para>
-
-<para>Romulans possess a <quote>cloaking device</quote> which prevents
-their detection by long-range scan.  Because of this fact, Starfleet
-Command is never sure how many Romulans are <quote>out there</quote>.
-When you kill the last Klingon, the remaining Romulans surrender to
-the Federation.</para>
-
-<para>Planets are also undetectable by long-range scan.  The only way to
-detect a planet is to find it in your current quadrant with the
-short-range sensors.</para>
-
-<para>Since you are in column 1, there are no quadrants to your left. The
-minus ones indicate the negative energy barrier at the edge of the
-galaxy, which you are not permitted to cross.</para>
-
-<para>Long-range scans are free.  They use up no energy or time, and can be
-done safely regardless of battle conditions.</para>
-</sect1>
-<sect1><title>Star Chart</title>
-
-<literallayout>
-Mnemonic:  CHART
-Shortest abbreviation:  C
-</literallayout>
-
-<para>As you proceed in the game, you learn more and more about what things
-are where in the galaxy. When ever you first do a scan in a quadrant,
-telemetry sensors are ejected which will report any changes in the
-quadrant(s) back to your ship, providing the sub-space radio is
-working. Spock will enter this information in the chart. If the radio
-is not working, Spock can only enter new information discovered from
-scans, and information in other quadrants may be obsolete.</para>
-
-<para>The chart looks like an 8 by 8 array of numbers.  These numbers are
-interpreted exactly as they are on a long-range scan. A period (.) in
-place of a digit means you do not know that information yet.  For
-example, ... means you know nothing about the quadrant, while .1.
-menas you know it contains a base, but an unknown number of Klingons
-and stars.</para>
-
-<para>Looking at the star chart is a free operation.  It costs neither time
-nor energy, and can be done safely whether in or out of battle.</para>
-
-</sect1>
-<sect1><title>Damage Report</title>
-
-<literallayout>
-Mnemonic:  DAMAGES
-Shortest abbreviation:  DA
-</literallayout>
-
-<para>At any time you may ask for a damage report to find out what devices
-are damaged and how long it will take to repair them.  Naturally,
-repairs proceed faster at a starbase.</para>
-
-<para>If you suffer damages while moving, it is possible that a subsequent
-damage report will not show any damage.  This happens if the time
-spent on the move exceeds the repair time, since in this case the
-damaged devices were fixed en route.</para>
-
-<para>Damage reports are free.  They use no energy or time, and can be done
-safely even in the midst of battle.</para>
-
-</sect1>
-<sect1><title>Move Under Warp Drive</title>
-
-<literallayout>
-Mnemonic:  MOVE
-Shortest abbreviation:  M
-Full command:  MOVE MANUAL &lt;displacement&gt;
-               MOVE AUTOMATIC &lt;destination&gt;
-</literallayout>
-
-<para>This command is the usual way to move from one place to another
-within the galaxy.  You move under warp drive, according to the
-current warp factor (see <quote>WARP FACTOR</quote>).</para>
-
-<para>There are two command modes for movement: MANUAL and AUTOMATIC.
-The manual mode requires the following format:</para>
-
-<screen>
-	MOVE MANUAL &lt;deltax&gt; &lt;deltay&gt;
-</screen>
-
-<para>&lt;deltax&gt; and &lt;deltay&gt; are the horizontal and vertical
-displacements for your starship, in quadrants; a displacement of one
-sector is 0.1 quadrants.  Specifying &lt;deltax&gt; and &lt;deltay&gt;
-causes your ship to move in a straight line to the specified
-destination. If &lt;deltay&gt; is omitted, it is assumed zero. For
-example, the shortest possible command to move one sector to the right
-would be</para>
-
-<screen>
-	M M .1
-</screen>
-
-<para>The following examples of manual movement refer to the short-range
-scan shown earlier.</para>
-
-<screen>
-  Destination Sector	Manual Movement command
-	3 - 1			M M -.3 -.1
-	2 - 1			M M -.3
-	1 - 2			M M -.2 .1
-	1 - 4			M M 0 .1
-  (leaving quadrant)		M M 0 .2
-</screen>
-
-<para>The automatic mode is as follows:</para>
-
-<screen>
-	MOVE AUTOMATIC &lt;qrow&gt; &lt;qcol&gt; &lt;srow&gt; &lt;scol&gt;
-</screen>
-
-<para>&lt;para&gt;where &lt;qrow&gt; and &lt;qcol&gt; are the row and column
-numbers of the destination quadrant, and &lt;srow&gt; and &lt;scol&gt;
-are the row and column numbers of the destination sector in that
-quadrant.  This command also moves your ship in a straight line path
-to the destination.  For moving within a quadrant, &lt;qrow&gt; and
-&lt;qcol&gt; may be omitted. For example, to move to sector 2 - 9 in
-the current quadrant, the shortest command would be</para>
-
-<screen>
-	M A 2 9
-</screen>
-
-<para>To move to quadrant 3 - 7, sector 5 - 8, type</para>
-
-<screen>
-	M A 3 7 5 8
-</screen>
-
-<para>and it will be done.  In automatic mode, either two or four numbers
-must be supplied.</para>
-
-<para>Automatic mode utilizes the ship's <quote>battle computer.</quote>  If the
-computer is damaged, manual movement must be used.</para>
-
-<para>If warp engines are damaged less than 10 stardates (undocked) you can
-still go warp 4.</para>
-
-<para>It uses time and energy to move.  How much time and how much energy
-depends on your current warp factor, the distance you move, and
-whether your shields are up.  The higher the warp factor, the faster
-you move, but higher warp factors require more energy.  You may move
-with your shields up, but this doubles the energy required.</para>
-
-<para>You can move within a quadrant without being attacked if you just
-entered the quadrant or have been attacked since your last move
-command.  This enables you to move and hit them before they
-retaliate.</para>
-
-</sect1>
-<sect1><title>Warp Factor</title>
-
-<literallayout>
-Mnemonic:  WARP
-Shortest abbreviation:  W
-Full command:  WARP &lt;number&gt;
-</literallayout>
-
-<para>Your warp factor controls the speed of your starship.  The larger the
-warp factor, the faster you go and the more energy you use.</para>
-
-<para>Your minimum warp factor is 1.0 and your maximum warp factor is 10.0
-(which is 100 times as fast and uses 1000 times as much energy).  At
-speeds above warp 6 there is some danger of causing damage to your
-warp engines; this damage is larger at higher warp factors and also
-depends on how far you go at that warp factor.</para>
-
-<para>At exactly warp 10 there is some probability of entering a
-so-called <quote>time warp</quote> and being thrown foward or backward
-in time.  The farther you go at warp 10, the greater is the
-probability of entering the time warp.</para>
-
-</sect1>
-<sect1><title>Impulse Engines</title>
-
-<literallayout>
-Mnemonic:  IMPULSE
-Shortest abbreviation:  I
-Full command:  IMPULSE MANUAL &lt;displacement&gt;
-               IMPULSE AUTOMATIC &lt;destination&gt;
-</literallayout>
-
-<para>The impulse engines give you a way to move when your warp engines are
-damaged.  They move you at a speed of 0.95 sectors per stardate,
-which is the equivalent of a warp factor of about 0.975, so they are
-much too slow to use except in emergencies.</para>
-
-<para>Movement commands are indicated just as in the <quote>MOVE</quote> command.</para>
-
-<para>The impulse engines require 20 units of energy to engage, plus 10
-units per sector (100 units per quadrant) traveled. It does not cost
-extra to move with the shields up.</para>
-
-</sect1>
-<sect1><title>Deflector Shields</title>
-
-<literallayout>
-Mnemonic:  SHIELDS
-Shortest abbreviation:  SH
-Full commands:  SHIELDS UP
-                SHIELDS DOWN
-                SHIELDS TRANSFER &lt;amount of energy to transfer&gt;
-</literallayout>
-
-<para>Your deflector shields are a defensive device to protect you from
-Klingon attacks (and nearby novas).  As the shields protect you, they
-gradually weaken.  A shield strength of 75%, for example, means that
-the next time a Klingon hits you, your shields will deflect 75% of
-the hit, and let 25% get through to hurt you.</para>
-
-<para>It costs 50 units of energy to raise shields, nothing to lower them.
-You may move with your shields up; this costs nothing under impulse
-power, but doubles the energy required for warp drive.</para>
-
-<para>Each time you raise or lower your shields, the Klingons have another
-chance to attack.  Since shields do not raise and lower
-instantaneously, the hits you receive will be intermediate between
-what they would be if the shields were completely up or completely
-down. </para>
-
-<para>You may not fire phasers through your shields.  However you may
-use the <quote>high-speed shield control</quote> to lower shields,
-fire phasers, and raise the shields again before the Klingons can
-react.  Since rapid lowering and raising of the shields requires more
-energy than normal speed operation, it costs you 200 units of energy
-to activate this control.  It is automatically activated when you fire
-phasers while shields are up.  You may fire photon torpedoes, but they
-may be deflected considerably from their intended course as they pass
-through the shields (depending on shield strength).</para>
-
-<para>You may transfer energy beteen the ship's energy (given as
-<quote>Energy</quote> in the status) and the shields.  The word
-<quote>TRANSFER</quote> may be abbreviated <quote>T</quote>.  The
-ammount of energy to transfer is the number of units of energy you
-wish to take from the ship's energy and put into the shields.  If you
-specify an negative number, energy is drained from the shields to the
-ship.  Transfering energy constitutes a turn.  If you transfer energy
-to the shields while you are under attack, they will be at the new
-energy level when you are next hit.</para>
-
-<para>Enemy torpedoes hitting your ship explode on your shields (if they
-are up) and have essentially the same effect as phaser hits.</para>
-
-</sect1>
-<sect1><title>Phasers</title>
-
-<literallayout>
-Mnemonic:  PHASERS
-Shortest abbreviation:  P
-Full commands:  PHASERS AUTOMATIC &lt;AMOUNT TO FIRE&gt; &lt;NO&gt;
-                PHASERS &lt;AMOUNT TO FIRE&gt; &lt;NO&gt;
-                PHASERS MANUAL &lt;NO&gt; &lt;AMOUNT 1&gt; &lt;AMOUNT 2&gt;...&lt;AMOUNT N&gt; 
-</literallayout>
-
-<para>Phasers are energy weapons. As you fire phasers at Klingons, you
-specify an <quote>amount to fire</quote> which is drawn from your
-energy reserves.  The amount of total hit required to kill an enemy is
-partly random.  but also depends on skill level.</para>
-
-<para>The average hit required to kill an ordinary Klingon varies from 200
-units in the Novice game to 250 units in the Emeritus game.
-Commanders normally require from 600 (Novice) to 700 (Emeritus).  The
-Super-commander requres from 875 (Good) to 1000 (Emeritus). Romulans
-require an average of 350 (Novice) to 450 (Emeritus).</para>
-
-<para>Hits on enemies are cumulative, as long as you don't leave the
-quadrant. </para>
-
-<para>In general, not all that you fire will reach the Klingons.  The
-farther away they are, the less phaser energy will reach them. If a
-Klingon is adjacent to you, he will receive about 90% of the phaser
-energy directed at him; a Klingon 5 sectors away will receive about
-60% and a Klingon 10 sectors away will receive about 35%. There is
-some randomness involved, so these figures are not exact. Phasers
-have no effect beyond the boundaries of the quadrant you are in.</para>
-
-<para>Phasers may overheat (and be damaged) if you fire too large a burst
-at once. Firing up to 1500 units is safe.  From 1500 on up the
-probability of overheat increases with the amount fired.</para>
-
-<para>If phaser firing is automatic, the computer decides how to
-divide up your &lt;amount to fire&gt; among the Klingons present.  If
-phaser firing is manual, you specify how much energy to fire at each
-Klingon present (nearest first), rather than just specifying a total
-amount.  You can abreviate <quote>MANUAL</quote> and
-<quote>AUTOMATIC</quote> to one or more letters; if you mention
-neither, automatic fire is usually assumed.</para>
-
-<para>Battle computer information is available by firing phasers manually,
-and allowing the computer to prompt you.  If you enter zero for the
-amount to fire at each enemy, you will get a complete report, without
-cost.  The battle computer will tell you how much phaser energy to
-fire at each enemy for a sure kill.  This information appears in
-parentheses prior to the prompt for each enemy.  Since the amount is
-computed from sensor data, if either the computer or the S.R. sensors
-are damaged, this information will be unavailable, and phasers must
-be fired manually.</para>
-
-<para>A safety interlock prevents phasers from being fired through
-the shields.  If this were not so, the shields would contain your fire
-and you would fry yourself.  However, you may utilize the
-<quote>high-speed shield control</quote> to drop shields, fire
-phasers, and raise shields before the enemy can react.  Since it takes
-more energy to work the shields rapidly with a shot, it costs you 200
-units of energy each time you activate this control.  It is
-automatically activated when you fire phasers while the shields are
-up. By specifying the &lt;no&gt; option, shields are not raised after
-firing.</para>
-
-<para>Phasers have no effect on starbases (which are shielded) or on
-stars.</para>
-
-</sect1>
-<sect1><title>Report</title>
-
-<literallayout>
-Mnemonic:  REPORT
-Shortest abbreviation: REP
-</literallayout>
-
-<para>This command supplies you with information about the state of the
-current game.  Its purpose is to remind you of things that you have
-learned during play, but may have forgotten, and cannot otherwise
-retrieve if you are not playing at a hard-copy terminal.</para>
-
-<para>You are told the following things:</para>
-
-<itemizedlist>
-<listitem><para>The length and skill level of the game you are playing</para></listitem>
-<listitem><para>The original number of Klingons</para></listitem>
-<listitem><para>How many Klingons you have destroyed</para></listitem>
-<listitem><para>Whether the Super-Commander has been destroyed</para></listitem>
-<listitem><para>How many bases have been destroyed</para></listitem>
-<listitem><para>How many bases are left</para></listitem>
-<listitem><para>What bases (if any) are under attack; your subspace radio
-must have been working since the attack to get this 
-information.</para></listitem>
-<listitem><para>How many casualties you have suffered</para></listitem>
-<listitem><para>How many times you have called for help.</para></listitem>
-</itemizedlist>
-
-<para>This same information is automatically given to you when you start to
-play a frozen game.</para>
-
-</sect1>
-<sect1><title>Computer</title>
-
-<literallayout>
-Mnemonic:  COMPUTER
-Shortest abbreviation: CO
-</literallayout>
-
-<para>This command allows using the ship's computer (if functional) to
-calculate travel times and energy usage.</para>
-
-</sect1>
-<sect1><title>Photon Torpedoes</title>
-
-<literallayout>
-Mnemonic:  PHOTONS
-Shortest abbreviation:  PHO
-Full commands:  PHOTONS &lt;NUMBER&gt; &lt;TARG1&gt; &lt;TARG2&gt; &lt;TARG3&gt;
-</literallayout>
-
-<para>Photon torpedoes are projectile weapons&mdash;you either hit what you aim
-at, or you don't.  There are no <quote>partial hits</quote>.</para>
-
-<para>One photon torpedo will usually kill one ordinary Klingon, but it
-usually takes about two for a Klingon Commander.  Photon torpedoes
-can also blow up stars and starbases, if you aren't careful.</para>
-
-<para>You may fire photon torpedoes singly, or in bursts of two or three.
-Each torpedo is individually targetable.  The computer will prompt
-you, asking for the target sector for each torpedo.  Alternately, you
-may specify each target in the command line.</para>
-
-<para>Photon torpedoes cannot be aimed precisely&mdash;there is always some
-randomness involved in the direction they go.  Photon torpedoes may
-be fired with your shields up, but as they pass through the shields
-they are randomly deflected from their intended course even more.</para>
-
-<para>Photon torpedoes are proximity-fused.  The closer they explode to the
-enemy, the more damage they do.  There is a hit <quote>window</quote> about one
-sector wide.  If the torpedo misses the hit window, it does not
-explode and the enemy is unaffected.  Photon torpedoes are only
-effective within the quadrant.  They have no effect on things in
-adjacent quadrants.</para>
-
-<para>If more than one torpedo is fired and only one target sector is
-specified, all torpedoes are fired at that sector.  For example, to
-fire two torpedoes at sector 3 - 4, you type</para>
-
-<screen>
-     PHO 2 3 4           (or)           PHO 2 3 4 3 4
-</screen>
-
-<para>To fire torpedoes at, consecutively, sectors 2 - 6, 1 - 10, and 4 -
-7, type</para>
-
-<screen>
-     PHO 3 2 6 1 10 4 7
-</screen>
-
-<para>There is no restriction to fire directly at a sector.  For example,
-you can enter</para>
-
-<screen>
-       PHO 1 3 2.5
-</screen>
-
-<para>to aim between two sectors.  However, sector numbers must be 1 to 10
-inclusive.</para>
-
-</sect1>
-<sect1><title>Dock at Starbase</title>
-
-<literallayout>
-Mnemonic:  DOCK
-Shortest abbreviation:  D
-</literallayout>
-
-<para>You may dock your starship whenever you are in one of the eight
-sector positions immediately adjacent to a starbase.  When you dock,
-your starship is resupplied with energy, shield energy photon
-torpedoes, and life support reserves.  Repairs also proceed faster at
-starbase, so if some of your devices are damaged, you may wish to stay
-at base (by using the <quote>REST</quote> command) until they are
-fixed.  If your ship has more than its normal maximum energy (which
-can happen if you've loaded crystals) the ship's energy is not
-changed.</para>
-
-<para>You may not dock while in standard orbit around a planet.</para>
-
-<para>Starbases have their own deflector shields, so you are completely
-safe from phaser attack while docked.  You are also safe from
-long-range tractor beams.</para>
-
-<para>Starbases also have both short and long range sensors, which you can
-use if yours are broken. There's also a subspace radio to get
-information about happenings in the galaxy. Mr. Spock will update the
-star chart if your ask for it while docked and your own radio is dead.</para>
-
-</sect1>
-<sect1><title>Rest</title>
-
-<literallayout>
-Mnemonic:  REST
-Shortest abbreviation:  R
-Full command:  REST &lt;NUMBER OF STARDATES&gt;
-</literallayout>
-
-<para>This command simply allows the specified number of stardates to go
-by.  This is useful if you have suffered damages and wish to wait
-until repairs are made before you go back into battle.</para>
-
-<para>It is not generally advisable to rest while you are under attack by
-Klingons.</para>
-
-</sect1>
-<sect1><title>Call Starbase for Help</title>
-
-<literallayout>
-Mnemonic:  MAYDAY
-(No abbreviation)
-</literallayout>
-
-<para>[Originally, this command was called <quote>HELP</quote>, but
-these days that might be misconstrued as an attempt to browae built-in
-documentation! In some later versions it was CALL.]</para>
-
-<para>When you get into serious trouble, you may call a starbase for
-help.  Starbases have a device called a <quote>long-range transporter
-beam</quote> which they can use to teleport you to base.  This works
-by dematerializing your starship at its current position and
-re-materializing it adjacent to the nearest starbase.  Teleportation
-is instantaneous, and starbase supplies the required energy&mdash;all
-you have to do is let them know (via subspace radio) that you need to
-be rescued.</para>
-
-<para>This command should be employed only when absolutely necessary.  In
-the first place, calling for help is an admission on your part that
-you got yourself into something you cannot get yourself out of, and
-you are heavily penalized for this in the final scoring.  Secondly,
-the long-range transporter beam is not reliable&mdash;starbase can always
-manage to dematerialize your starship, but (depending on distance)
-may or may not be able to re-materialize you again.  The long-range
-transporter beam has no absolute maximum range; if you are in the
-same quadrant as a starbase, you have a good chance (about 90%) of
-re-materializing successfully.  your chances drop to roughly 50-50 at
-just over 3 quadrants.</para>
-
-</sect1>
-<sect1><title>Abandon Ship</title>
-
-<literallayout>
-Mnemonic:  ABANDON
-(no abbreviation)
-</literallayout>
-
-<para>You may abandon the Enterprise if necessary.  If there is still a
-starbase in the galaxy, you will be sent there and put in charge of a
-weaker ship, the Faerie Queene.</para>
-
-<para>The Faerie Queene cannot be abandoned.</para>
-
-</sect1>
-<sect1><title>Self-Destruct</title>
-
-<literallayout>
-Mnemonic:  DESTRUCT
-(no abbreviation)
-</literallayout>
-
-<para>You may self-destruct, thus killing yourself and ending the game.  If
-there are nearby Klingons, you may take a few of them with you (the
-more energy you have left, the bigger the bang).</para>
-
-<para>In order to self-destruct you must remember the password you typed in
-at the beginning of the game.</para>
-
-</sect1>
-<sect1><title>Quit Game</title>
-
-<literallayout>
-Mnemonic:  QUIT
-(no abbreviation)
-</literallayout>
-
-<para>Immediately cancel the current game; no conclusion is reached.  You
-will be given an opportunity to start a new game or to leave the Star
-Trek program.</para>
-
-</sect1>
-<sect1><title>Sensor-Scan</title>
-
-<literallayout>
-Mnemonic:  SENSORS
-Shortest abbreviation:  SE
-</literallayout>
-
-<para>Utilizing the short-range sensors, science officer Spock gives you a
-readout on any planet in your quadrant.  Planets come in three
-classes: M, N, and O.  Only class M planets have earth-like
-conditions.  Spock informs you if the planet has any dilithium
-crystals.  Sensor scans are free.</para>
-
-</sect1>
-<sect1><title>Enter Standard Orbit</title>
-
-<literallayout>
-Mnemonic:  ORBIT
-Shortest abbreviation:  O
-</literallayout>
-
-<para>To land on a planet you must first be in standard orbit.  You achieve
-this in a manner similar to docking at starbase.  Moving to one of
-the eight sector positions immediately adjacent to the planet, you
-give the orbit command which puts your ship into standard orbit about
-the planet.  Since this is a maneuver, a small amount of time is
-used; negligible energy is required.  If enemies are present, they
-will attack.</para>
-
-</sect1>
-<sect1><title>Transporter Travel</title>
-
-<literallayout>
-Mnemonic:  TRANSPORT
-Shortest abbreviation:  T
-</literallayout>
-
-<para>The transporter is a device which can convert any physical object
-into energy, beam the energy through space, and reconstruct the
-physical object at some destination.  Transporting is one way to land
-on a planet.  Since the transporter has a limited range, you must be
-in standard orbit to beam down to a planet.  Shields must be down
-while transporting.</para>
-
-<para>The transport command is used to beam a landing party onto a planet
-to mine <quote>dilithium crystals</quote>.  Each time the command is given the
-landing party (which you lead) moves from the ship to the planet, or
-vice-versa.</para>
-
-<para>You are advised against needless transporting, since like all
-devices, the transporter will sometimes malfunction.</para>
-
-<para>The transporter consumes negligible time and energy.  Its use does
-not constitute a <quote>turn</quote>.</para>
-
-</sect1>
-<sect1><title>Shuttle Craft</title>
-
-<literallayout>
-Mnemonic:  SHUTTLE
-Shortest abbreviation:  SHU
-</literallayout>
-
-<para>An alternate way to travel to and from planets.  Because of limited
-range, you must be in standard orbit to use the shuttle craft, named
-"Galileo".  Shields must be down.</para>
-
-<para>Unlike transporting, use of the shuttle craft does constitute a
-<quote>turn</quote> since time is consumed.  The time naturally
-depends on orbit altitude, and is equal to 3.0e-5 times altitude.
-Shuttling uses no ship energy.</para>
-
-<para>You should use the same travel device going from the planet to the
-ship as you use to go from the ship to the planet. However it is
-possible to transport to the planet and have the Galileo crew come
-and pick your landing party up, or to take the Galileo to the planet
-and then transport back, leaving the shuttle craft on the planet.</para>
-
-</sect1>
-<sect1><title>Mine Dilithium Crystals</title>
-
-<literallayout>  
-Mnemonic:  MINE
-Shortest abbreviation:  MI
-</literallayout>
-
-<para>Once you and your mining party are on the surface of a planet which
-has dilithium crystals, this command will dig them for you.</para>
-
-<para>Mining requires time and constitutes a <quote>turn</quote>.  No
-energy is used.  Class M planets require 0.1 to 0.3 stardates to mine.
-Class N planets take twice as long, and class O planets take three
-times as long.</para>
-
-<para>Dilithium crystals contain enormous energy in a form that is readily
-released in the ship's power system.  It is an excellent idea to mine
-them whenever possible, for use in emergencies.  You keep the
-crystals until the game is over or you abandon ship when not at a
-starbase.</para>
-
-</sect1>
-<sect1><title>Load Dilithium Crystals</title>
-
-<literallayout>  
-Mnemonic:  CRYSTALS
-Shortest abbreviation:  CR
-</literallayout>
-
-<para>This is a very powerful command which should be used with caution.
-Once you have dilithium crystals aboard ship, this command will
-instruct engineering officer Scott and Mr. Spock to place a raw
-dilithium crystal into the power channel of the ship's
-matter-antimatter converter.  When it works, this command will
-greatly boost the ship's energy.</para>
-
-<para>Because the crystals are raw and impure, instabilities can occur in
-the power channel.  Usually Scotty can control these.  When he
-cannot, the results are disastrous. Scotty will use those crystals
-that appear to be most stable first.</para>
-
-<para>Since using raw dilithium crystals for this purpose entails
-considerable risk, Starfleet Regulations allow its use only during
-"condition yellow".  No time or energy is used.</para>
-
-</sect1>
-<sect1><title>Planet Report</title>
-
-<literallayout>  
-Mnemonic:  PLANETS
-Shortest abbreviation:  PL
-</literallayout>
-
-<para>Mr. Spock presents you a list of the available information on planets
-in the galaxy.  Since planets do not show up on long-range scans, the
-only way to obtain this information is with the <quote>SENSORS</quote> command.</para>
-
-</sect1>
-<sect1 id="freeze"><title>Freeze</title>
-
-<literallayout> 
-Mnemonic:  FREEZE
-(no abbreviation)
-Full command:  FREEZE &lt;FILE NAME&gt;
-</literallayout>
-
-<para>The purpose of the FREEZE command is to allow a player to save the
-current state of the game, so that it can be finished later.  A
-plaque may not be generated from a frozen game. A file with the
-specified &lt;file name&gt; and type '.TRK' is created (if necessary) in
-the current directory, and all pertinent information about the game
-is written to that file. The game may be continued as usual or be
-terminated at the user's option.</para>
-
-<para>To restart a game created by the <quote>FREEZE</quote> command,
-the user need only type <quote>FROZEN</quote> in response to the
-initial question about the type of game desired, followed by the
-&lt;file name&gt;.</para>
-
-<para>NOTE: A <quote>tournament</quote> game is like a frozen game,
-with the following differences.  (1) Tournament games always start
-from the beginning, while a frozen game can start at any point.  (2)
-Tournament games require only that the player remember the name or
-number of the tournament, while the information about a frozen game
-must be kept on a file. Tournament games can be frozen, but then they
-behave like regular frozen games.</para>
-
-<para>A point worth noting is that 'FREEZE' does not save the seed for the
-random number generator, so that identical actions after restarting
-the same frozen game can lead to different results.  However,
-identical actions after starting a given tournament game always lead
-to the same results.</para>
-
-</sect1>
-<sect1><title>Request</title>
-
-<literallayout>  
-Mnemonic:  REQUEST
-Shortest abbreviation:  REQ
-Full command:  REQUEST &lt;ITEM&gt;
-</literallayout>
-
-<!-- This is new in SST 2K --> 
-<para>If you are using the screen-oriented interface, this command is
-suppressed; instead, a full status report will always be present on the
-screen.</para>
-
-<para>This command allows you to get any single piece of information
-from the &lt;STATUS&gt; command.  &lt;ITEM&gt; specifies which
-information as follows:</para>
-
-<informaltable> 
-<tgroup cols='3'>
-<thead>
-<row>
-  <entry>Information</entry>
-  <entry>Mnemonic for &lt;item&gt;</entry>
-  <entry>Shortest Abbreviation</entry>
-</row>
-</thead>
-<tbody>
-<row><entry>STARDATE</entry>    <entry>DATE</entry>      <entry>D</entry></row>
-<row><entry>CONDITION</entry>   <entry>CONDITION</entry> <entry>C</entry></row>
-<row><entry>POSITION</entry>    <entry>POSITION</entry>  <entry>P</entry></row>
-<row><entry>LIFE SUPPORT</entry><entry>LSUPPORT</entry>  <entry>L</entry></row> 
-<row><entry>WARP FACTOR</entry> <entry>WARPFACTOR</entry><entry>W</entry></row>
-<row><entry>ENERGY</entry>      <entry>ENERGY</entry>    <entry>E</entry></row>
-<row><entry>TORPEDOES</entry>   <entry>TORPEDOES</entry> <entry>T</entry></row>
-<row><entry>SHIELDS</entry>     <entry>SHIELDS</entry>   <entry>S</entry></row>
-<row><entry>KLINGONS LEFT</entry><entry>KLINGONS</entry> <entry>K</entry></row>
-<row><entry>TIME LEFT</entry>   <entry>TIME</entry>     <entry>TI</entry></row>
-<row><entry>BASES LEFT</entry>   <entry>BASES</entry>   <entry>BA</entry></row>
-</tbody>
-</tgroup>
-</informaltable>
-
-</sect1>
-<sect1><title>Experimental Death Ray</title>
-
-<literallayout>
-Mnemonic:  DEATHRAY
-(No abbreviation)
-</literallayout>
-
-<para>This command should be used only in those desperate cases where
-you have absolutely no alternative.  The death ray uses energy to
-rearrange matter.  Unfortunately, its working principles are not yet
-thoroughly understood, and the results are highly
-unpredictable.</para>
-
-<para>The only good thing that can result is the destruction of all
-enemies in your current quadrant.  This will happen about 70% of the
-time.  Only enemies are destroyed; starbases, stars, and planets are
-unaffected.</para>
-
-<para>Constituting the remaining 30% are results varying from bad to
-fatal.</para>
-
-<para>The death ray requires no energy or time, but if you survive, enemies
-will hit you.</para>
-
-<para>The Faerie Queene has no death ray.</para>
-
-<para>If the death ray is damaged in its use, it must be totally replaced.
-This can only be done at starbase.  Because it is a very complex
-device, it takes 9.99 stardates at base to replace the death ray.
-The death ray cannot be repaired in flight.</para>
-
-</sect1>
-<sect1><title>Launch Deep Space Probe</title>
-
-<literallayout>
-Mnemonic:  PROBE
-Shortest abbreviation:  PR
-Full command:  PROBE &lt;ARMED&gt; MANUAL &lt;displacement&gt;
-               PROBE &lt;ARMED&gt; AUTOMATIC &lt;destination&gt;
-</literallayout>
-
-<para>The Enterprise carries a limited number of Long Range Probes. These
-fly to the end of the galaxy and report back a count of the number of
-important things found in each quadrant through which it went. The
-probe flies at warp 10, and therefore uses time during its flight.
-Results are reported immediately via subspace radio and are recorded
-in the star chart.</para>
-
-<para>The probe can also be armed with a NOVAMAX warhead. When launched
-with the warhead armed, the probe flies the same except as soon as it
-reaches the target location, it detonates the warhead in the heart of
-a star, causing a supernova and destroying everything in the
-quadrant. It then flies no further. There must be a star in the
-target quadrant for the NOVAMAX to function. </para>
-
-<para>The probe can fly around objects in a galaxy, but is destroyed if it
-enters a quadrant containing a supernova, or if it leaves the galaxy.</para>
-
-<para>The target location is specified in the same manner as the MOVE
-command, however for automatic movement, if only one pair of
-coordinates are specified they are assumed to be the quadrant and not
-the sector in the current quadrant!</para>
-
-<para>The Faerie Queene has no probes.</para>
-
-</sect1>
-<sect1><title>Emergency Exit</title>
-
-<literallayout>
-Mnemonic:  EMEXIT
-Shortest abbreviation:  E
-</literallayout>
-
-<para>This command provides a quick way to exit from the game when you
-observe a Klingon battle cruiser approaching your terminal.  Its
-effect is to freeze the game on the file 'EMSAVE.TRK' in your current
-directory, erase the screen, and exit.</para>
-
-<para>Of course, you do lose the chance to get a plaque when you use this
-maneuver.</para>
-
-</sect1>
-<sect1><title>Ask for Help</title>
-
-<literallayout>
-Mnemonic:  HELP
-Full command:  HELP &lt;command&gt;
-</literallayout>
-
-<para>This command reads the appropriate section from the SST.DOC file,
-providing the file is in the current directory.</para>
-
-</sect1>
-</chapter>
-<chapter><title>Miscellaneous Notes</title>
-
-<para>Starbases can be attacked by either commanders or by the
-<quote>Super-Commander</quote>.  When this happens, you will be
-notified by subspace radio, provided it is working.  The message will
-inform you how long the base under attack can last.  Since the
-<quote>Super-Commander</quote> is more powerful than an ordinary
-commander, he can destroy a base more quickly.</para>
-
-<para>The <quote>Super-Commander</quote> travels around the galaxy at
-a speed of about warp 6 or 7.  His movement is strictly time based;
-the more time passes, the further he can go.</para>
-
-<para>Scattered through the galaxy are certain zones of control,
-collectively designated the <quote>Romulan Neutral Zone</quote>.  Any
-quadrant which contains Romulans without Klingons is part of the
-Neutral Zone, except if a base is present.  Since Romulans do not show
-on either the long-range scan or the star chart, it is easy for you to
-stumble into this zone.  When you do, if your subspace radio is
-working, you will receive a warning message from the Romulan, politely
-asking you to leave.</para>
-
-<para>In general, Romulans are a galactic nuisance.</para>
-
-<para>The high-speed shield control is fairly reliable, but it has been
-known to malfunction.</para>
-
-<para>You can observe the galactic movements of the
-<quote>Super-Commander</quote> on the star chart, provided he is in
-territory you have scanned and your subspace radio is working.</para>
-
-<para>Periodically, you will receive intelligence reports from
-starfleet command, indicating the current quadrant of the
-<quote>Super-Commander</quote>.  Your subspace radio must be working,
-of course.</para>
-
-<para>Each quadrant will contain from 0 to 3 black holes.  Torpedoes
-entering a black hole disappear.  In fact, anything entering a black
-hole disappears, permanently.  If you can displace an enemy into one,
-he is a goner.  Black holes do not necessarily remain in a quadrant.
-they are transient phenomena.</para>
-
-<para>Commanders will ram your ship, killing themselves and inflicting
-heavy damage to you, if they should happen to decide to advance into
-your sector.</para>
-
-<para>You can get a list of commands by typing
-<quote>COMMANDS</quote>.</para>
-
-</chapter>
-<chapter><title>Scoring</title>
-
-<para>Scoring is fairly simple.  You get points for good things, and you
-lose points for bad things.</para>
-
-<para>You gain&mdash;</para>
-
-<orderedlist>
-<listitem><para>10 points for each ordinary Klingon you kill,</para></listitem>
-<listitem><para>50 points for each commander you kill,</para></listitem>
-<listitem><para>200 points for killing the <quote>Super-Commander</quote>,</para></listitem>
-<listitem><para>20 points for each Romulan killed,</para></listitem>
-<listitem><para>1 point for each Romulan captured.</para></listitem>
-<listitem>
-<para>100 times your average Klingon/stardate kill rate.  If you lose
-the game, your kill rate is based on a minimum of 5 stardates.</para>
-</listitem>
-<listitem>
-<para>You get a bonus if you win the game, based on your rating:</para>
-<para>Novice=100, Fair=200, Good=300, Expert=400, Emeritus=500.</para>
-</listitem>
-</orderedlist>
-
-<para>You lose&mdash;</para>
-
-<orderedlist>
-<listitem><para>200 points if you get yourself killed,</para></listitem>
-<listitem><para>100 points for each starbase you destroy,</para></listitem>
-<listitem><para>100 points for each starship you lose,</para></listitem>
-<listitem><para>45 points for each time you had to call for help,</para></listitem>
-<listitem><para>10 points for each planet you destroyed,</para></listitem>
-<listitem><para>5 points for each star you destroyed, and</para></listitem>
-<listitem><para>1 point for each casualty you incurred.</para></listitem>
-</orderedlist>
-
-<para>In addition to your score, you may also be promoted one grade in rank
-if you play well enough.  Promotion is based primarily on your
-Klingon/stardate kill rate, since this is the best indicator of
-whether you are ready to go on to the next higher rating.  However,
-if you have lost 100 or more points in penalties, the required kill
-rate goes up. Normally, the required kill rate is 0.1 * skill *
-(skill + 1.0) + 0.1, where skill ranges from 1 for Novice to 5 for
-Emeritus.</para>
-
-<para>You can be promoted from any level.  There is a special
-promotion available if you go beyond the <quote>Expert</quote> range.
-You can also have a certificate of merit printed with your name, date,
-and Klingon kill rate, provided you are promoted from either the
-<quote>Expert</quote> or <quote>Emeritus</quote> levels. This
-<quote>plaque</quote> requires a 132 column printer. You may need
-print the certificate to a file, import it into your word processor,
-selecting Courier 8pt font, and then print in <quote>landscape
-orientation</quote>.</para>
-
-</chapter>
-<chapter><title>Handy Reference Page</title>
-
-<literallayout format='linespecific' class='monospaced'>
- ABBREV    FULL COMMAND                           DEVICE USED
- ------    ------------                           -----------
- ABANDON   ABANDON                                shuttle craft
- C         CHART                                  (none)
- CO        COMPUTER                               computer
- CR        CRYSTALS                               (none)
- DA        DAMAGES                                (none)
- DEATHRAY  DEATHRAY                               (none)  
- DESTRUCT  DESTRUCT                               computer
- D         DOCK                                   (none)
- E         EMEXIT                                 (none)
- FREEZE    FREEZE &lt;FILE NAME&gt;                     (none)
- I         IMPULSE &lt;MANUAL&gt; &lt;DISPLACEMENT&gt;        impulse engines
-           IMPULSE AUTOMATIC &lt;DESTINATION&gt;        impulse engines and computer
- L         LRSCAN                                 long-range sensors
- MAYDAY    MAYDAY (for help)                      subspace radio
- MI        MINE                                   (none)
- M         MOVE &lt;MANUAL&gt; &lt;DISPLACEMENT&gt;           warp engines
-           MOVE AUTOMATIC &lt;DESTINATION&gt;           warp engines and computer
- O         ORBIT                                  warp or impulse engines
- P         PHASERS &lt;TOTAL AMOUNT&gt;                 phasers and computer
-           PHASERS AUTOMATIC &lt;TOTAL AMOUNT&gt;       phasers, computer, sr sensors
-           PHASERS MANUAL &lt;AMT1&gt; &lt;AMT2&gt; ...       phasers
- PHO       PHOTONS &lt;NUMBER&gt; &lt;TARGETS&gt;             torpedo tubes 
- PL        PLANETS                                (none)
- PR        PROBE &lt;ARMED&gt; &lt;MANUAL&gt; &lt;DISPLACEMENT&gt;  probe launcher, radio 
-           PROBE &lt;ARMED&gt; AUTOMATIC &lt;DESTINATION&gt;  launcher, radio, computer
- REP       REPORT                                 (none)
- REQ       REQUEST                                (none)
- R         REST &lt;NUMBER OF STARDATES&gt;             (none)
- QUIT      QUIT                                   (none)
- S         SRSCAN &lt;NO or CHART&gt;                   short-range sensors
- SE        SENSORS                                short-range sensors
- SH        SHIELDS &lt;UP, DOWN, or TRANSFER&gt;        deflector shields
- SHU       SHUTTLE                                shuttle craft
- ST        STATUS                                 (none)
- T         TRANSPORT                              transporter
- W         WARP &lt;FACTOR&gt;                          (none)
-
- L. R. Scan:   thousands digit:   supernova
-               hundreds digit:    Klingons
-               tens digit:        starbases
-               ones digit:        stars
-               period (.):        digit not known (star chart only)
-
-Courses are given in manual mode in X - Y displacements; in automatic
-    mode as destination quadrant and/or sector.  Manual mode is default.
-Distances are given in quadrants.  A distance of one sector is 0.1 quadrant.
-Ordinary Klingons have about 400 units of energy, Commanders about
-    1200.  Romulans normally have about 800 units of energy, and the
-    (GULP) "Super-Commander" has about 1800.
-Phaser fire diminishes to about 60 percent at 5 sectors.  Up to 1500
-    units may be fired in a single burst without danger of overheat.
-Warp 6 is the fastest safe speed.  At higher speeds, engine damage
-    may occur.  At warp 10 you may enter a time warp.
-Shields cost 50 units of energy to raise, and double the power
-    requirements of moving under warp drive.  Engaging the high-speed
-    shield control requires 200 units of energy.
-Warp drive requires (distance)*(warp factor cubed) units of energy
-    to travel at a speed of (warp factor squared)/10 quadrants per stardate.
-Impulse engines require 20 units to warm up, plus 100 units per
-     quadrant.  Speed is just under one sector per stardate.
-</literallayout>
-
-</chapter>
-<chapter><title>Game History and Modifications</title>
-
-<sect1><title>Origins</title>
-
-<para>The original Star Trek seems to have been written by Mike
-Mayfield at the beginning of the 1970s.  His first version was in
-BASIC for a Sigma 7 in 1971; in 1972 he rewrote it in Hewlett Packard
-BASIC. The source is <ulink
-url="&sst-site;www/historic/mayfield.basic">available</ulink> on the
-SST2K website. In January 1975 it became part of the DECUS library
-under the name <ulink
-url='http://www.trailing-edge.com/~shoppa/decus/110174.html'>SPACWR</ulink>.</para>
-
-<para>While some people claim to have recollections of playing Trek
-games in the late 1960s, the earlier ones seem actually to have been
-variants of
-<ulink url='http://en.wikipedia.org/wiki/Spacewar!'>
-SPACEWAR</ulink>, the earlier space-combat game on the
-PDP-1. Mayfield <ulink
-url='http://www3.sympatico.ca/maury/games/space/star_trek.html'>wrote
-in 2000</ulink> that he invented the Trek-style galactic grid, and the
-evidence seems to back that up.  Some of the confusion probably stems 
-from the fact that Mayfield's original and several early descendants 
-were distributed under the name SPACWR.</para>
-
-<para>Many different versions radiated from Mayfield's original; most
-of the ones in BASIC are descended from a SPACWR version that David
-Ahl published in <citetitle>101 BASIC Computer Games</citetitle>,
-July 1973. This was a port of Mayfield's version obtained from the HP
-Contributed Programs library.  </para>
-
-<para>Our SST2K is descended from a Taurus BASIC program by Grady
-Hicks dated 5 April 1973. This does not appear to have been derived
-from Ahl's SPACWR. The header says "GENERAL IDEA STOLEN FROM
-PENN. U.", and the game has several features not present in SPACEWR:
-notably, the Death Ray, ramming, and the Klingon summons to surrender.
-And, of course, it predates Ahl's book.  The source is <ulink
-url="&sst-site;www/historic/UT-Trek.basic">available</ulink> on the
-SST2K website.</para>
-
-<para>Dave Matuszek, Paul Reynolds et. al. at UT Austin played the
-Hicks version on a CDC6600, but disliked the long load time and
-extreme slowness of the BASIC program. (David Matuszek notes that the
-Hicks version he played had a habit of throwing long
-quotes from Marcus Aurelius at the users, a feature he found
-intolerable on a TTY at 110 baud.  It must, therefore, have been
-rather longer than  the one we have.)  The Austin crew proceeded to
-write their own Trek game, loosely based on the Hicks version, in
-CDC6600 FORTRAN.  At that time, it was just called "Star Trek"; the
-"Super" was added by later developers. In the rest of this history
-we'll call it the "UT FORTRAN" version.</para>
-
-<para>At the time the UT FORTRAN source was last translated to C it emitted
-the message "Latest update-21 Sept 78".  Thus, it actually predated
-(and may have influenced) the best-known BASIC version, the "Super
-Star Trek" published by David Ahl in his November 1978 sequel
-<citetitle>BASIC Computer Games</citetitle>.</para>
-
-<para>This 1978 "Super Star Trek" had been reworked by Robert Leedom and
-friends from (according to Leedom) Mayfield's HP port. There is
-internal evidence to suggest that at least some features of Leedom's
-SST may have derived from the UT FORTRAN version.  In particular, Dave
-Matuszek recalls implementing command words to replace the original
-numeric command codes, a feature Leedom's SST also had but the
-1973 and 1975 SPACWRs did not.</para>
-
-<para>One signature trait of the UT FORTRAN game and its descendants
-is that the sectors are 10x10 (rather than the 8x8 in Mike Mayfield's
-1972 original and its BASIC descendants).  The UT FORTRAN version also
-preserves the original numbered quadrants rather than the
-astronomically-named quadrants introduced in Ahl's SST and its
-descendants.</para>
-
-<!-- Dave thinks his Fortran Star Trek used the clockface for quadrant -->
-<!-- navigation. -->
-
-<para>Eric Allman's BSD Trek game is one of these, also descended from
-the UT FORTRAN version via translation to C.  However, the mainline version
-(now SST2K) has had a lot more stuff folded into it over the years
-&mdash; deep space probes, dilithium mining, the Tholian Web, and so
-forth.</para>
-</sect1>
-
-<sect1><title>Tom Almy's story</title>
-
-<para>Back in (about) 1977 I got a copy of the Super Star Trek game for
-the CDC 6600 mainframe computer. Someone had converted it to PDP-11
-Fortran but couldn't get it to run because of its size. I modified
-the program to use overlays and managed to shoehorn it in on the 56k
-byte machine.</para>
-
-<para>I liked the game so much I put some time into fixing bugs, mainly
-what could be called continuity errors and loopholes in the game's
-logic. We even played a couple tournaments.</para>
-
-<para>In 1979, I lost access to that PDP-11. I did save the source code
-listing. In 1995, missing that old friend, I started converting the
-program into portable ANSI C. It's been slow, tedious work that took
-over a year to accomplish.</para>
-
-<para>In early 1997, I got the bright idea to look for references to
-<quote>Super Star Trek</quote> on the World Wide Web. There weren't
-many hits, but there was one that came up with 1979 Fortran sources!
-This version had a few additional features that mine didn't have,
-however mine had some feature it didn't have. So I merged its features
-that I liked. I also took a peek at the DECUS version (a port, less
-sources, to the PDP-10), and some other variations.</para>
-
-<para>Modifications I made:</para>
-
-<para>Compared to original version, I've changed the
-<quote>help</quote> command to <quote>call</quote> and the
-<quote>terminate</quote> command to <quote>quit</quote> to better
-match user expectations. The DECUS version apparently made those
-changes as well as changing <quote>freeze</quote> to
-<quote>save</quote>. However I like <quote>freeze</quote>.</para>
-
-<para>I added EMEXIT from the 1979 version.</para>
-
-<para>That later version also mentions srscan and lrscan working when
-docked (using the starbase's scanners), so I made some changes here
-to do this (and indicating that fact to the player), and then
-realized the base would have a subspace radio as well &mdash; doing a
-Chart when docked updates the star chart, and all radio reports will
-be heard. The Dock command will also give a report if a base is under
-attack.</para>
-
-<para>It also had some added logic to spread the initial positioning of
-bases. That made sense to add because most people abort games with
-bad base placement.</para>
-
-<para>The experimental deathray originally had only a 5% chance of success,
-but could be used repeatedly. I guess after a couple years of use, it
-was less <quote>experimental</quote> because the 1979 version had a 70% success
-rate. However it was prone to breaking after use. I upgraded the
-deathray, but kept the original set of failure modes (great humor!).</para>
-
-<para>I put in the Tholian Web code from the 1979 version.</para>
-
-<para>I added code so that Romulans and regular Klingons could move in 
-advanced games. I re-enabled the code which allows enemy ships to
-ram the Enterprise; it had never worked right. The 1979 version
-seems to have it all fixed up, but I'm still not overly happy with
-the algorithm.</para>
-
-<para>The DECUS version had a Deep Space Probe. Looked like a good idea
-so I implemented it based on its description.</para>
-
-</sect1>
-<sect1><title>Stas Sergeev's story</title>
-
-<para>I started from an older Tom Almy version and added features I had
-seen in other mainframe variants of the game, I wrote a screen-oriented 
-interface for it based on the curses library.</para>
-
-<itemizedlist>
-<listitem>
-<para>The Space Thingy can be shoved, if you ram it, and can fire back if 
-fired upon.</para>
-</listitem>
-<listitem>
-<para>The Tholian can be hit with phasers.</para>
-</listitem>
-<listitem>
-<para>When you are docked, base covers you with an almost invincible shields 
-      (a commander can still ram you, or a Romulan can destroy the base,
-      or a SCom can even succeed with direct attack IIRC, but this rarely 
-      happens).</para>
-</listitem>
-<listitem>
-<para>SCom can't escape from you if no more enemies remain (without this, 
-      chasing SCom can take an eternity).</para>
-</listitem>
-<listitem>
-<para>Probe target you enter is now the destination quadrant. Before I don't 
-      remember what it was, but it was something I had difficulty using.</para>
-</listitem>
-<listitem>
-<para>Secret password is now autogenerated.</para>
-</listitem>
-<listitem>
-<para>Victory plaque is adjusted for A4 paper rather than 132-column greenbar
-:-)</para>
-</listitem>
-<listitem>
-<para>Phasers now tells you how much energy needed, but only if the computer 
-is alive.</para>
-</listitem>
-<listitem>
-<para>Planets are auto-scanned when you enter the quadrant.</para>
-</listitem>
-<listitem>
-<para>Mining or using crystals in presense of enemy now yields an attack.
-There are other minor adjustments to what yields an attack
-and what does not.</para>
-</listitem>
-<listitem>
-<para>Ramming a black hole is no longer instant death.  There is a
-chance you might get timewarped instead.</para>
-</listitem>
-<listitem>
-<para>"freeze" command reverts to "save", most people will understand this
-better anyway.</para>
-</listitem>
-<listitem>
-<para>Screen-oriented interface, with sensor scans always up.</para>
-</listitem>
-</itemizedlist>
-
-<para>My changes got merged into SST2K in 2005, and I work on it now.</para>
-
-</sect1>
-<sect1><title>Eric Raymond's story</title>
-
-<para>I played the FORTRAN version of this game in the late 1970s on a
-DEC minicomputer.  In the late 1980s Dave Matuszek and I became
-friends; I was vaguely aware that he had had something to do with the
-original Star Trek game.  In October 2004, sitting in Dave's living
-room, we got to talking about the game and I realized it would make a
-great exhibit for the <ulink
-url='&retro;'>Retrocomputing Museum</ulink>.</para>
-
-<para>A few quick web searches later we found Tom Almy's page.  We
-downloaded his code and Dave verified that that it was a direct
-descendent of UT Super Star Trek &mdash; even though it had been translated
-to C, he was able to recognize names and techniques from the FORTRAN
-version he co-wrote.</para>
-
-<para>This game became an open-source project; see the <ulink
-url='http://developer.berlios.de/projects/sst/'>project
-site</ulink>.</para>
-
-<para>After I launched the Berlios project, Stas Sergeev contacted me.
-We worked together to merge in his changes.</para>
-
-<para>Modifications I've made:</para>
-
-<itemizedlist>
-<listitem><para>
-I converted the flat-text SST.DOC file to XML-Docbook so it can be
-webbed. (That's what you're reading now.)
-</para></listitem>
-<listitem><para>
-The command-help code needed a rewrite because the flat-text form of
-the documentation is now generated from XML and doesn't have the
-easily recognizable section delimiters it used to.  I wrote a script
-to filter that flat-text form into an sst.doc that's easy to parse for
-command descriptions, and changed some logic in sst.c to match.
-</para></listitem>
-<listitem><para>
-I've cleaned up a lot of grubby FORTRANisms in the code internals --
-used sizeof(), replaced magic numeric constants with #defines,
-that sort of thing.
-</para></listitem>
-<listitem><para>
-I fixed a surprising number of typos in the code and documentation.
-</para></listitem>
-<listitem><para>
-All the game state now lives in one big structure that can be
-written to and read from disk as one blob.  The write gives it an
-an identifiable magic number and the thaw logic checks for same. 
-</para></listitem>
-<listitem><para>
-I made the internal pager work, and in the process got rid of a number
-of platform dependencies in the code.
-</para></listitem>
-<listitem><para>
-The HELP/CALL/SOS command is now MAYDAY.
-</para></listitem>
-<listitem><para>
-Status report now indicates if dilithium crystals are on board.
-</para></listitem>
-<listitem><para>
-At Dave's prompting, restored the Space Thingy's original elusive behavior.
-</para></listitem>
-<listitem><para>
-Clean separation of game engine from the UI code, improving Stas
-Sergeev's excellent work on the curses interface.
-</para></listitem>
-</itemizedlist>
-
-<para>Here are some good pages on the history of Star Trek games:</para>
-
-<itemizedlist>
-<listitem><para>
-<ulink url='http://www.dunnington.u-net.com/public/startrek/'>http://www.dunnington.u-net.com/public/startrek/</ulink>
-</para></listitem>
-<listitem><para>
-<ulink url='http://www3.sympatico.ca/maury/games/space/star_trek.html'>http://www3.sympatico.ca/maury/games/space/star_trek.html</ulink>
-</para></listitem>
-<listitem><para>
-<ulink url='http://www.cactus.org/%7Enystrom/startrek.html'>http://www.cactus.org/%7Enystrom/startrek.html</ulink>
-</para></listitem>
-</itemizedlist>
-
-</sect1>
-<sect1><title>Authors' Acknowledgments</title>
-
-<para>These are the original acknowledgments by Dave Matuszek and Paul
-Reynolds:</para>
-
-<para>The authors would like to thank Professor Michael Duggan for his
-encouragement and administrative assistance with the development of
-the Star Trek game, without which it might never have been completed.</para>
-
-<para>Much credit is due to Patrick McGehearty and Rich Cohen, who assisted
-with the original design of the game and contributed greatly to its
-conceptual development.</para>
-
-<para>Thanks are also due to Carl Strange, Hardy Tichenor and Steven Bruell
-for their assistance with certain coding problems.</para>
-
-<para>This game was inspired by and rather loosely based on an earlier
-game, programmed in the BASIC language, by Jim Korp and Grady Hicks.
-It is the authors' understanding that the BASIC game was in turn
-derived from a still earlier version in use at Penn State University.</para>
-
-</sect1>
-<sect1><title>References</title>
-
-<orderedlist>
-<listitem><para><citetitle>Star Trek</citetitle> (the original television
-series), produced and directed by Gene Rodenberry.</para></listitem>
-
-<listitem><para><citetitle>Star Trek</citetitle> (the animated
-television series), produced by Gene Rodenberry and directed by Hal
-Sutherland.  Also excellent, and not just kiddie fare.  If you enjoyed
-the original series you should enjoy this one (unless you have some
-sort of a hangup about watching cartoons).</para></listitem>
-
-<listitem><para><citetitle>The Making of Star Trek</citetitle>, by
-Steven E. Whitfield and Gene Rodenberry.  The best and most complete
-readily available book about Star Trek.  (Ballantine
-Books)</para></listitem>
-
-<listitem><para><citetitle>The World of Star Trek</citetitle>, by
-David Gerrold.  Similiar in scope to the above book.
-(Bantam)</para></listitem>
-
-<listitem><para><citetitle>The Star Trek Guide</citetitle>, third revision 4/17/67, by Gene
-Roddenberry.  The original writer's guide for the television
-series, but less comprehensive than (3) above.
-(Norway Productions)</para></listitem>
-
-<listitem><para><citetitle>The Trouble With Tribbles</citetitle>, by
-David Gerrold.  Includes the complete script of this popular show.
-(Ballantine Books)</para></listitem>
-
-<listitem><para><citetitle>Star Trek</citetitle>, <citetitle>Star Trek
-2</citetitle>, ..., <citetitle>Star Trek 9</citetitle>, by James
-Blish.  The original shows in short story form.
-(Bantam)</para></listitem>
-
-<listitem><para><citetitle>Spock Must Die</citetitle>, by James Blish.
-An original novel, but rather similar to the show <citetitle>The Enemy
-Within</citetitle>.  (Bantam)</para></listitem>
-
-<listitem><para>Model kits of the Enterprise and a <quote>Klingon
-Battle-Cruiser</quote> by AMT Corporation are available at most hobby
-shops.</para></listitem>
-</orderedlist>
-
-</sect1>
-</chapter>
-</book>

Deleted: trunk/sst-layer.xsl
===================================================================
--- trunk/sst-layer.xsl	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/sst-layer.xsl	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,11 +0,0 @@
-<?xml version="1.0"?>
-<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
-                version="1.0">
-
-<!-- force an encoding we can throw on an xterm window -->
-<xsl:output method="html"
-            encoding="ISO-8859-1"
-            indent="no"/>
-
-</xsl:stylesheet>
-

Deleted: trunk/sst.c
===================================================================
--- trunk/sst.c	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/sst.c	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,846 +0,0 @@
-#define INCLUDED	// Define externs here
-#include <ctype.h>
-#include <getopt.h>
-#include <time.h>
-#include "sstlinux.h"
-#include "sst.h"
-
-#ifndef SSTDOC
-#define SSTDOC	"sst.doc"
-#endif
-	
-/*
-
-Dave Matuszek says:
-
-   SRSCAN, MOVE, PHASERS, CALL, STATUS, IMPULSE, PHOTONS, ABANDON,
-   LRSCAN, WARP, SHIELDS, DESTRUCT, CHART, REST, DOCK, QUIT, and DAMAGE
-   were in the original non-"super" version of UT FORTRAN Star Trek.
-
-   Tholians weren't in the original. Dave is dubious about their merits.
-   (They are now controlled by OPTION_THOLIAN and turned off if the game
-   type is "plain".)
-
-   Planets and dilithium crystals weren't in the original.  Dave is OK
-   with this idea. (It's now controlled by OPTION_PLANETS and turned 
-   off if the game type is "plain".)
-
-   Dave says the bit about the Galileo getting turned into a
-   McDonald's is "consistant with our original vision".  (This has been
-   left permanently enabled, as it can only happen if OPTION_PLANETS
-   is on.)
-
-   Dave also says the Space Thingy should not be preserved across saved
-   games, so you can't prove to others that you've seen it.  He says it
-   shouldn't fire back, either.  It should do nothing except scream and
-   disappear when hit by photon torpedos.  It's OK that it may move
-   when attacked, but it didn't in the original.  (Whether the Thingy
-   can fire back is now controlled by OPTION_THINGY and turned off if the
-   game type is "plain" or "almy".  The no-save behavior has been restored.)
-
-   The Faerie Queen, black holes, and time warping were in the original.
-
-Here are Tom Almy's changes:
-
-   In early 1997, I got the bright idea to look for references to
-   "Super Star Trek" on the World Wide Web. There weren't many hits,
-   but there was one that came up with 1979 Fortran sources! This
-   version had a few additional features that mine didn't have,
-   however mine had some feature it didn't have. So I merged its
-   features that I liked. I also took a peek at the DECUS version (a
-   port, less sources, to the PDP-10), and some other variations.
-
-   1, Compared to the original UT version, I've changed the "help" command to
-      "call" and the "terminate" command to "quit" to better match
-      user expectations. The DECUS version apparently made those changes
-      as well as changing "freeze" to "save". However I like "freeze".
-      (Both "freeze" and "save" work in SST2K.)
-
-   2. The experimental deathray originally had only a 5% chance of
-      success, but could be used repeatedly. I guess after a couple
-      years of use, it was less "experimental" because the 1979
-      version had a 70% success rate. However it was prone to breaking
-      after use. I upgraded the deathray, but kept the original set of
-      failure modes (great humor!).  (Now controlled by OPTION_DEATHRAY
-      and turned off if game type is "plain".)
-
-   3. The 1979 version also mentions srscan and lrscan working when
-      docked (using the starbase's scanners), so I made some changes here
-      to do this (and indicating that fact to the player), and then realized
-      the base would have a subspace radio as well -- doing a Chart when docked
-      updates the star chart, and all radio reports will be heard. The Dock
-      command will also give a report if a base is under attack.
-
-   4. Tholian Web from the 1979 version.  (Now controlled by
-      OPTION_THOLIAN and turned off if game type is "plain".)
-
-   5. Enemies can ram the Enterprise. (Now controlled by OPTION_RAMMING
-      and turned off if game type is "plain".)
-
-   6. Regular Klingons and Romulans can move in Expert and Emeritus games. 
-      This code could use improvement. (Now controlled by OPTION_MVBADDY
-      and turned off if game type is "plain".)
-
-   7. The deep-space probe feature from the DECUS version.  (Now controlled
-      by OPTION_PROBE and turned off if game type is "plain").
-
-   8. 'emexit' command from the 1979 version.
-
-   9. Bugfix: Klingon commander movements are no longer reported if long-range 
-      sensors are damaged.
-
-   10. Bugfix: Better base positioning at startup (more spread out).
-      That made sense to add because most people abort games with 
-      bad base placement.
-
-   In June 2002, I fixed two known bugs and a documentation typo.
-   In June 2004 I fixed a number of bugs involving: 1) parsing invalid
-   numbers, 2) manual phasers when SR scan is damaged and commander is
-   present, 3) time warping into the future, 4) hang when moving
-   klingons in crowded quadrants.  (These fixes are in SST2K.)
-
-Here are Stas Sergeev's changes:
-
-   1. The Space Thingy can be shoved, if you ram it, and can fire back if 
-      fired upon. (Now controlled by OPTION_THINGY and turned off if game 
-      type is "plain" or "almy".)
-
-   2. When you are docked, base covers you with an almost invincible shield. 
-      (A commander can still ram you, or a Romulan can destroy the base,
-      or a SCom can even succeed with direct attack IIRC, but this rarely 
-      happens.)  (Now controlled by OPTION_BASE and turned off if game 
-      type is "plain" or "almy".)
-
-   3. Ramming a black hole is no longer instant death.  There is a
-      chance you might get timewarped instead. (Now controlled by 
-      OPTION_BLKHOLE and turned off if game type is "plain" or "almy".)
-
-   4. The Tholian can be hit with phasers.
-
-   5. SCom can't escape from you if no more enemies remain 
-      (without this, chasing SCom can take an eternity).
-
-   6. Probe target you enter is now the destination quadrant. Before I don't 
-      remember what it was, but it was something I had difficulty using.
-
-   7. Secret password is now autogenerated.
-
-   8. "Plaque" is adjusted for A4 paper :-)
-
-   9. Phasers now tells you how much energy needed, but only if the computer 
-      is alive.
-
-   10. Planets are auto-scanned when you enter the quadrant.
-
-   11. Mining or using crystals in presense of enemy now yields an attack.
-       There are other minor adjustments to what yields an attack
-       and what does not.
-
-   12. "freeze" command reverts to "save", most people will understand this
-       better anyway. (SST2K recognizes both.)
-
-   13. Screen-oriented interface, with sensor scans always up.  (SST2K
-       supports both screen-oriented and TTY modes.)
-
-Eric Raymond's changes:
-
-Mainly, I translated this C code out of FORTRAN into C -- created #defines
-for a lot of magic numbers and refactored the heck out of it.
-
-   1. "sos" and "call" becomes "mayday", "freeze" and "save" are both good.
-
-   2. Status report now indicates when dilithium crystals are on board.
-
-   3. Per Dave Matuszek's remarks, Thingy state is never saved across games.
-
-   4. Added game option selection so you can play a close (but not bug-for-
-      bug identical) approximation of older versions.
-*/
-
-/* the input queue */
-static char line[128], *linep = line;
-
-static struct 
-{
-    char *name;
-    int value;
-    unsigned long option;
-}
-commands[] = {
-#define SRSCAN	0
-	{"SRSCAN",	SRSCAN,		OPTION_TTY},
-#define STATUS	1
-	{"STATUS",	STATUS,		OPTION_TTY},
-#define REQUEST	2
-	{"REQUEST",	REQUEST,	OPTION_TTY},
-#define LRSCAN	3
-	{"LRSCAN",	LRSCAN,		OPTION_TTY},
-#define PHASERS	4
-	{"PHASERS",	PHASERS,	0},
-#define TORPEDO	5
-        {"TORPEDO",	TORPEDO,	0},
-	{"PHOTONS",	TORPEDO,	0},
-#define MOVE	6
-	{"MOVE",	MOVE,		0},
-#define SHIELDS	7
-	{"SHIELDS",	SHIELDS,	0},
-#define DOCK	8
-	{"DOCK",	DOCK,		0},
-#define DAMAGES	9
-	{"DAMAGES",	DAMAGES,	0},
-#define CHART	10
-	{"CHART",	CHART,		0},
-#define IMPULSE	11
-	{"IMPULSE",	IMPULSE,	0},
-#define REST	12
-	{"REST",	REST,		0},
-#define WARP	13
-	{"WARP",	WARP,		0},
-#define SCORE	14
-	{"SCORE",	SCORE,		0},
-#define SENSORS	15
-	{"SENSORS",	SENSORS,	OPTION_PLANETS},
-#define ORBIT	16
-	{"ORBIT",	ORBIT,		OPTION_PLANETS},
-#define TRANSPORT	17
-	{"TRANSPORT",	TRANSPORT,	OPTION_PLANETS},
-#define MINE	18
-	{"MINE",	MINE,		OPTION_PLANETS},
-#define CRYSTALS	19
-	{"CRYSTALS",	CRYSTALS,	OPTION_PLANETS},
-#define SHUTTLE	20
-	{"SHUTTLE",	SHUTTLE,	OPTION_PLANETS},
-#define PLANETS	21
-	{"PLANETS",	PLANETS,	OPTION_PLANETS},
-#define REPORT	22
-	{"REPORT",	REPORT,		0},
-#define COMPUTER	23
-	{"COMPUTER",	COMPUTER,      	0},
-#define COMMANDS	24
-	{"COMMANDS",	COMMANDS,      	0},
-#define EMEXIT	25
-	{"EMEXIT",	EMEXIT,		0},
-#define PROBE	26
-	{"PROBE",	PROBE,		OPTION_PROBE},
-#define SAVE	27
-	{"SAVE",	SAVE,		0},
-	{"FREEZE",	SAVE,		0},
-#define ABANDON	28
-	{"ABANDON",	ABANDON,	0},
-#define DESTRUCT	29
-	{"DESTRUCT",	DESTRUCT,	0},
-#define DEATHRAY	30
-	{"DEATHRAY",	DEATHRAY,	0},
-#define DEBUGCMD	31
-	{"DEBUG",	DEBUGCMD,	0},
-#define MAYDAY	32
-	{"MAYDAY",	MAYDAY,		0},
-	//{"SOS",		MAYDAY,		0},
-	//{"CALL",	MAYDAY,		0},
-#define QUIT	33
-	{"QUIT",	QUIT,		0},
-#define HELP	34
-	{"HELP",	HELP,		0},
-};
-
-#define NUMCOMMANDS	sizeof(commands)/sizeof(commands[0])
-#define ACCEPT(i)	(!commands[i].option || (commands[i].option & game.options))
-
-static void listCommands(void) {
-    int i, k = 0;
-    proutn("LEGAL COMMANDS ARE:");
-    for (i = 0; i < NUMCOMMANDS; i++) {
-	if (!ACCEPT(i))
-	    continue;
-	if (k % 5 == 0)
-	    skip(1);
-	proutn("%-12s ", commands[i].name); 
-	k++;
-    }
-    skip(1);
-}
-
-static void helpme(void) 
-{
-    int i, j;
-    char cmdbuf[32], *cp;
-    char linebuf[132];
-    FILE *fp;
-    /* Give help on commands */
-    int key;
-    key = scan();
-    while (TRUE) {
-	if (key == IHEOL) {
-	    setwnd(prompt_window);
-	    proutn("Help on what command? ");
-	    key = scan();
-	}
-	setwnd(message_window);
-	if (key == IHEOL) return;
-	for (i = 0; i < NUMCOMMANDS; i++) {
-	    if (ACCEPT(i) && strcasecmp(commands[i].name, citem)==0) {
-		i = commands[i].value;
-		break;
-	    }
-	}
-	if (i != NUMCOMMANDS) break;
-	skip(1);
-	prout("Valid commands:");
-	listCommands();
-	key = IHEOL;
-	chew();
-	skip(1);
-    }
-    if (i == COMMANDS) {
-	strcpy(cmdbuf, " ABBREV");
-    }
-    else {
-	for (j = 0; commands[i].name[j]; j++)
-	    cmdbuf[j] = toupper(commands[i].name[j]);
-	cmdbuf[j] = '\0';
-    }
-    fp = fopen(SSTDOC, "r");
-    if (fp == NULL) {
-	prout("Spock-  \"Captain, that information is missing from the");
-	prout("   computer.\"");
-	/*
-	 * This used to continue: "You need to find SST.DOC and put 
-	 * it in the current directory."
-	 */
-	return;
-    }
-    for (;;) {
-	if (fgets(linebuf, sizeof(linebuf), fp) == NULL) {
-	    prout("Spock- \"Captain, there is no information on that command.\"");
-	    fclose(fp);
-	    return;
-	}
-	if (linebuf[0] == '%' && linebuf[1] == '%'&& linebuf[2] == ' ') {
-	    for (cp = linebuf+3; isspace(*cp); cp++)
-		continue;
-	    linebuf[strlen(linebuf)-1] = '\0';
-	    if (strcasecmp(cp, cmdbuf) == 0)
-		break;
-	}
-    }
-
-    skip(1);
-    prout("Spock- \"Captain, I've found the following information:\"");
-    skip(1);
-
-    while (fgets(linebuf, sizeof(linebuf),fp)) {
-	if (strstr(linebuf, "******"))
-	    break;
-	proutn(linebuf);
-    }
-    fclose(fp);
-}
-
-void enqueue(char *s) 
-{
-    strcpy(line, s);
-}
-
-static void makemoves(void) 
-{
-    int i, v = 0, hitme;
-    clrscr();
-    setwnd(message_window);
-    while (TRUE) { /* command loop */
-	drawmaps(1);
-	while (TRUE)  { /* get a command */
-	    hitme = FALSE;
-	    justin = 0;
-	    Time = 0.0;
-	    i = -1;
-	    chew();
-	    setwnd(prompt_window);
-	    clrscr();
-	    proutn("COMMAND> ");
-	    if (scan() == IHEOL) {
-		makechart();
-		continue;
-	    }
-	    ididit=0;
-	    clrscr();
-	    setwnd(message_window);
-	    clrscr();
-	    for (i=0; i < ABANDON; i++)
-		if (ACCEPT(i) && isit(commands[i].name)) {
-		    v = commands[i].value;
-		    break;
-		}
-	    if (i < ABANDON && (!commands[i].option || (commands[i].option & game.options))) 
-		break;
-	    for (; i < NUMCOMMANDS; i++)
-		if (ACCEPT(i) && strcasecmp(commands[i].name, citem) == 0) {
-		    v = commands[i].value;
-		    break;
-		}
-	    if (i < NUMCOMMANDS && (!commands[i].option || (commands[i].option & game.options))) 
-		break;
-	    listCommands();
-	}
-	commandhook(commands[i].name, TRUE);
-	switch (v) { /* command switch */
-	case SRSCAN:                 // srscan
-	    srscan(SCAN_FULL);
-	    break;
-	case STATUS:                 // status
-	    srscan(SCAN_STATUS);
-	    break;
-	case REQUEST:			// status request 
-	    srscan(SCAN_REQUEST);
-	    break;
-	case LRSCAN:			// lrscan
-	    lrscan();
-	    break;
-	case PHASERS:			// phasers
-	    phasers();
-	    if (ididit) hitme = TRUE;
-	    break;
-	case TORPEDO:			// photons
-	    photon();
-	    if (ididit) hitme = TRUE;
-	    break;
-	case MOVE:			// move
-	    warp(1);
-	    break;
-	case SHIELDS:			// shields
-	    doshield(1);
-	    if (ididit) {
-		hitme=TRUE;
-		shldchg = 0;
-	    }
-	    break;
-	case DOCK:			// dock
-	    dock(1);
-	    if (ididit) attack(0);
-	    break;
-	case DAMAGES:			// damages
-	    dreprt();
-	    break;
-	case CHART:			// chart
-	    chart(0);
-	    break;
-	case IMPULSE:			// impulse
-	    impuls();
-	    break;
-	case REST:			// rest
-	    wait();
-	    if (ididit) hitme = TRUE;
-	    break;
-	case WARP:			// warp
-	    setwrp();
-	    break;
-	case SCORE:           	 	// score
-	    score();
-	    break;
-	case SENSORS:			// sensors
-	    sensor();
-	    break;
-	case ORBIT:			// orbit
-	    orbit();
-	    if (ididit) hitme = TRUE;
-	    break;
-	case TRANSPORT:			// transport "beam"
-	    beam();
-	    break;
-	case MINE:			// mine
-	    mine();
-	    if (ididit) hitme = TRUE;
-	    break;
-	case CRYSTALS:			// crystals
-	    usecrystals();
-	    if (ididit) hitme = TRUE;
-	    break;
-	case SHUTTLE:			// shuttle
-	    shuttle();
-	    if (ididit) hitme = TRUE;
-	    break;
-	case PLANETS:			// Planet list
-	    preport();
-	    break;
-	case REPORT:			// Game Report 
-	    report();
-	    break;
-	case COMPUTER:			// use COMPUTER!
-	    eta();
-	    break;
-	case COMMANDS:
-	    listCommands();
-	    break;
-	case EMEXIT:			// Emergency exit
-	    clrscr();			// Hide screen
-	    freeze(TRUE);		// forced save
-	    exit(1);			// And quick exit
-	    break;
-	case PROBE:
-	    probe();			// Launch probe
-	    if (ididit) hitme = TRUE;
-	    break;
-	case ABANDON:			// Abandon Ship
-	    abandn();
-	    break;
-	case DESTRUCT:			// Self Destruct
-	    dstrct();
-	    break;
-	case SAVE:			// Save Game
-	    freeze(FALSE);
-	    clrscr();
-	    if (skill > SKILL_GOOD)
-		prout("WARNING--Saved games produce no plaques!");
-	    break;
-	case DEATHRAY:			// Try a desparation measure
-	    deathray();
-	    if (ididit) hitme = TRUE;
-	    break;
-	case DEBUGCMD:			// What do we want for debug???
-#ifdef DEBUG
-	    debugme();
-#endif
-	    break;
-	case MAYDAY:			// Call for help
-	    help();
-	    if (ididit) hitme = TRUE;
-	    break;
-	case QUIT:
-	    alldone = 1;		// quit the game
-#ifdef DEBUG
-	    if (idebug) score();
-#endif
-	    break;
-	case HELP:
-	    helpme();	// get help
-	    break;
-	}
-	commandhook(commands[i].name, FALSE);
-	for (;;) {
-	    if (alldone) break;		// Game has ended
-#ifdef DEBUG
-	    if (idebug) prout("2500");
-#endif
-	    if (Time != 0.0) {
-		events();
-		if (alldone) break;	// Events did us in
-	    }
-	    if (game.state.galaxy[quadx][quady].supernova) { // Galaxy went Nova!
-		atover(0);
-		continue;
-	    }
-	    if (hitme && justin==0) {
-		attack(2);
-		if (alldone) break;
-		if (game.state.galaxy[quadx][quady].supernova) {	// went NOVA! 
-		    atover(0);
-		    hitme = TRUE;
-		    continue;
-		}
-	    }
-	    break;
-	}
-	if (alldone) break;
-    }
-}
-
-
-int main(int argc, char **argv) 
-{
-    int i, option;
-
-    game.options = OPTION_ALL &~ (OPTION_IOMODES | OPTION_SHOWME | OPTION_PLAIN | OPTION_ALMY);
-    if (getenv("TERM"))
-	game.options |= OPTION_CURSES | OPTION_SHOWME;
-    else
-	game.options |= OPTION_TTY;
-
-    while ((option = getopt(argc, argv, "t")) != -1) {
-	switch (option) {
-	case 't':
-	    game.options |= OPTION_TTY;
-	    game.options &=~ OPTION_CURSES;
-	    break;
-	default:
-	    fprintf(stderr, "usage: sst [-t] [startcommand...].\n");
-	    exit(0);
-	}
-    }
-
-    randomize();
-    iostart();
-
-    line[0] = '\0';
-    for (i = optind; i < argc;  i++) {
-	strcat(line, argv[i]);
-	strcat(line, " ");
-    }
-    while (TRUE) { /* Play a game */
-	setwnd(fullscreen_window);
-#ifdef DEBUG
-	prout("INITIAL OPTIONS: %0lx", game.options);
-#endif /* DEBUG */
-	clrscr();
-	prelim();
-	setup(line[0] == '\0');
-	if (alldone) {
-	    score();
-	    alldone = 0;
-	}
-	else makemoves();
-	skip(1);
-	stars();
-	skip(1);
-
-	if (tourn && alldone) {
-	    proutn("Do you want your score recorded?");
-	    if (ja()) {
-		chew2();
-		freeze(FALSE);
-	    }
-	}
-	proutn("Do you want to play again? ");
-	if (!ja()) break;
-    }
-    skip(1);
-    prout("May the Great Bird of the Galaxy roost upon your home planet.");
-    return 0;
-}
-
-
-void cramen(int i) 
-{
-    /* return an enemy */
-    char *s;
-	
-    switch (i) {
-    case IHR: s = "Romulan"; break;
-    case IHK: s = "Klingon"; break;
-    case IHC: s = "Commander"; break;
-    case IHS: s = "Super-commander"; break;
-    case IHSTAR: s = "Star"; break;
-    case IHP: s = "Planet"; break;
-    case IHB: s = "Starbase"; break;
-    case IHBLANK: s = "Black hole"; break;
-    case IHT: s = "Tholian"; break;
-    case IHWEB: s = "Tholian web"; break;
-    case IHQUEST: s = "Stranger"; break;
-    default: s = "Unknown??"; break;
-    }
-    proutn(s);
-}
-
-char *cramlc(enum loctype key, int x, int y)
-{
-    static char buf[32];
-    buf[0] = '\0';
-    if (key == quadrant) strcpy(buf, "Quadrant ");
-    else if (key == sector) strcpy(buf, "Sector ");
-    sprintf(buf+strlen(buf), "%d - %d", x, y);
-    return buf;
-}
-
-void crmena(int i, int enemy, int key, int x, int y) 
-{
-    if (i == 1) proutn("***");
-    cramen(enemy);
-    proutn(" at ");
-    proutn(cramlc(key, x, y));
-}
-
-void crmshp(void) 
-{
-    char *s;
-    switch (ship) {
-    case IHE: s = "Enterprise"; break;
-    case IHF: s = "Faerie Queene"; break;
-    default:  s = "Ship???"; break;
-    }
-    proutn(s);
-}
-
-void stars(void) 
-{
-    prouts("******************************************************");
-    skip(1);
-}
-
-double expran(double avrage) 
-{
-    return -avrage*log(1e-7 + Rand());
-}
-
-double Rand(void) {
-	return rand()/(1.0 + (double)RAND_MAX);
-}
-
-void iran(int size, int *i, int *j) 
-{
-    *i = Rand()*(size*1.0) + 1.0;
-    *j = Rand()*(size*1.0) + 1.0;
-}
-
-void chew(void)
-{
-    linep = line;
-    *linep = 0;
-}
-
-void chew2(void) 
-{
-    /* return IHEOL next time */
-    linep = line+1;
-    *linep = 0;
-}
-
-int scan(void) 
-{
-    int i;
-    char *cp;
-
-    // Init result
-    aaitem = 0.0;
-    *citem = 0;
-
-    // Read a line if nothing here
-    if (*linep == 0) {
-	if (linep != line) {
-	    chew();
-	    return IHEOL;
-	}
-	cgetline(line, sizeof(line));
-	fflush(stdin);
-	if (curwnd==prompt_window){
-	    clrscr();
-	    setwnd(message_window);
-	    clrscr();
-	}
-	linep = line;
-    }
-    // Skip leading white space
-    while (*linep == ' ') linep++;
-    // Nothing left
-    if (*linep == 0) {
-	chew();
-	return IHEOL;
-    }
-    if (isdigit(*linep) || *linep=='+' || *linep=='-' || *linep=='.') {
-	// treat as a number
-	i = 0;
-	if (sscanf(linep, "%lf%n", &aaitem, &i) < 1) {
-	    linep = line; // Invalid numbers are ignored
-	    *linep = 0;
-	    return IHEOL;
-	}
-	else {
-	    // skip to end
-	    linep += i;
-	    return IHREAL;
-	}
-    }
-    // Treat as alpha
-    cp = citem;
-    while (*linep && *linep!=' ') {
-	if ((cp - citem) < 9) *cp++ = tolower(*linep);
-	linep++;
-    }
-    *cp = 0;
-    return IHALPHA;
-}
-
-int ja(void) 
-{
-    chew();
-    while (TRUE) {
-	scan();
-	chew();
-	if (*citem == 'y') return TRUE;
-	if (*citem == 'n') return FALSE;
-	proutn("Please answer with \"Y\" or \"N\": ");
-    }
-}
-
-void huh(void) 
-{
-    chew();
-    skip(1);
-    prout("Beg your pardon, Captain?");
-}
-
-int isit(char *s) 
-{
-    /* New function -- compares s to scanned citem and returns true if it
-       matches to the length of s */
-
-    return strncasecmp(s, citem, max(1, strlen(citem))) == 0;
-
-}
-
-#ifdef DEBUG
-void debugme(void) 
-{
-    proutn("Reset levels? ");
-    if (ja() != 0) {
-	if (energy < inenrg) energy = inenrg;
-	shield = inshld;
-	torps = intorps;
-	lsupres = inlsr;
-    }
-    proutn("Reset damage? ");
-    if (ja() != 0) {
-	int i;
-	for (i=0; i < NDEVICES; i++) 
-	    if (game.damage[i] > 0.0) 
-		game.damage[i] = 0.0;
-    }
-    proutn("Toggle idebug? ");
-    if (ja() != 0) {
-	idebug = !idebug;
-	if (idebug) prout("Debug output ON");
-	else prout("Debug output OFF");
-    }
-    proutn("Cause selective damage? ");
-    if (ja() != 0) {
-	int i, key;
-	for (i=0; i < NDEVICES; i++) {
-	    proutn("Kill ");
-	    proutn(device[i]);
-	    proutn("? ");
-	    chew();
-	    key = scan();
-	    if (key == IHALPHA &&  isit("y")) {
-		game.damage[i] = 10.0;
-	    }
-	}
-    }
-    proutn("Examine/change events? ");
-    if (ja() != 0) {
-	int i;
-	for (i = 1; i < NEVENTS; i++) {
-	    int key;
-	    if (game.future[i] == FOREVER) continue;
-	    switch (i) {
-	    case FSNOVA:  proutn("Supernova       "); break;
-	    case FTBEAM:  proutn("T Beam          "); break;
-	    case FSNAP:   proutn("Snapshot        "); break;
-	    case FBATTAK: proutn("Base Attack     "); break;
-	    case FCDBAS:  proutn("Base Destroy    "); break;
-	    case FSCMOVE: proutn("SC Move         "); break;
-	    case FSCDBAS: proutn("SC Base Destroy "); break;
-	    }
-	    proutn("%.2f", game.future[i]-game.state.date);
-	    chew();
-	    proutn("  ?");
-	    key = scan();
-	    if (key == IHREAL) {
-		game.future[i] = game.state.date + aaitem;
-	    }
-	}
-	chew();
-    }
-    proutn("Induce supernova here? ");
-    if (ja() != 0) {
-	game.state.galaxy[quadx][quady].supernova = TRUE;
-	atover(1);
-    }
-}
-#endif

Deleted: trunk/sst.h
===================================================================
--- trunk/sst.h	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/sst.h	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,528 +0,0 @@
-#include <stdio.h>
-#include <math.h>
-#include <stdlib.h>
-#include <string.h>
-#include <curses.h>
-#ifndef INCLUDED
-#define EXTERN extern
-#else
-#define EXTERN
-#endif
-
-#define min(x, y)	((x)<(y)?(x):(y))
-#define max(x, y)	((x)>(y)?(x):(y))
-
-// #define DEBUG
-
-#define PHASEFAC (2.0)
-#define PLNETMAX (10)
-#define GALSIZE	(8)
-#define QUADSIZE (10)
-#define BASEMAX	(5)
-
-/*
- * These macros hide the difference between 0-origin and 1-origin addressing.
- * They're a step towards de-FORTRANizing the code.
- */
-#define VALID_QUADRANT(x, y)	((x)>=1 && (x)<=GALSIZE && (y)>=1 && (y)<=GALSIZE)
-#define VALID_SECTOR(x, y)	((x)>=1 && (x)<=QUADSIZE && (y)>=1 && (y)<=QUADSIZE)
-#define for_quadrants(i)	for (i = 1; i <= GALSIZE; i++)
-#define for_sectors(i)		for (i = 1; i <= QUADSIZE; i++)
-#define for_commanders(i)	for (i = 1; i <= game.state.remcom; i++)
-#define for_local_enemies(i)	for (i = 1; i <= nenhere; i++)
-#define for_starbases(i)	for (i = 1; i <= game.state.rembase; i++)
-
-typedef struct {
-    int x;	/* Quadrant location of planet */
-    int y;
-    enum {M=0, N=1, O=2} pclass;
-    int crystals; /* has crystals */
-    enum {unknown, known, shuttle_down} known;
-} planet;
-
-#define DESTROY(pl)	memset(pl, '\0', sizeof(planet))
-
-typedef struct {
-    int snap,		// snapshot taken
-	remkl,			// remaining klingons
-	remcom,			// remaining commanders
-	nscrem,			// remaining super commanders
-	rembase,		// remaining bases
-	starkl,			// destroyed stars
-	basekl,			// destroyed bases
-	cx[QUADSIZE+1],cy[QUADSIZE+1],	// Commander quadrant coordinates
-	baseqx[BASEMAX+1],		// Base quadrant X
-	baseqy[BASEMAX+1],		// Base quadrant Y
-	isx, isy,		// Coordinate of Super Commander
-	nromrem,		// Romulans remaining
-	nplankl;		// destroyed planets
-	planet plnets[PLNETMAX];  // Planet information
-	double date,		// stardate
-	    remres,		// remaining resources
-	    remtime;		// remaining time
-    struct {
-	int stars;
-	int planets;
-	int starbase;
-	int klingons;
-	int romulans;
-	int supernova;
-	int charted;
-    } galaxy[GALSIZE+1][GALSIZE+1]; 	// The Galaxy (subscript 0 not used)
-    struct {
-	int stars;
-	int starbase;
-	int klingons;
-    } chart[GALSIZE+1][GALSIZE+1]; 	// the starchart (subscript 0 not used)
-} snapshot;				// Data that is snapshot
-
-#define NKILLK (inkling - game.state.remkl)
-#define NKILLC (incom - game.state.remcom)
-#define NKILLSC (inscom - game.state.nscrem)
-#define NKILLROM (inrom - game.state.nromrem)
-#define KLINGREM (game.state.remkl + game.state.remcom + game.state.nscrem)
-#define INKLINGTOT (inkling + incom + inscom)
-#define KLINGKILLED (INKLINGTOT - KLINGREM)
-
-#define SKILL_NONE	0
-#define SKILL_NOVICE	1
-#define SKILL_FAIR	2
-#define SKILL_GOOD	3
-#define SKILL_EXPERT	4
-#define SKILL_EMERITUS	5
-
-/* game options */
-#define OPTION_ALL	0xffffffff
-#define OPTION_TTY	0x00000001	/* old interface */
-#define OPTION_CURSES	0x00000002	/* new interface */
-#define OPTION_IOMODES	0x00000003	/* cover both interfaces */
-#define OPTION_PLANETS	0x00000004	/* planets and mining */
-#define OPTION_THOLIAN	0x00000008	/* Tholians and their webs */
-#define OPTION_THINGY	0x00000010	/* Space Thingy can shoot back */
-#define OPTION_PROBE	0x00000020	/* deep-space probes */
-#define OPTION_SHOWME	0x00000040	/* bracket Enterprise in chart */
-#define OPTION_RAMMING	0x00000080	/* enemies may ram Enterprise */
-#define OPTION_MVBADDY	0x00000100	/* more enemies can move */
-#define OPTION_BLKHOLE	0x00000200	/* black hole may timewarp you */
-#define OPTION_BASE	0x00000400	/* bases have good shields */
-#define OPTION_PLAIN	0x01000000	/* user chose plain game */
-#define OPTION_ALMY	0x02000000	/* user chose Almy variant */
-
-/* Define devices */
-#define DSRSENS 0
-#define DLRSENS 1
-#define DPHASER 2
-#define DPHOTON 3
-#define DLIFSUP 4
-#define DWARPEN 5
-#define DIMPULS 6
-#define DSHIELD 7
-#define DRADIO  8
-#define DSHUTTL 9
-#define DCOMPTR 10
-#define DTRANSP 11
-#define DSHCTRL 12
-#define DDRAY   13  // Added deathray
-#define DDSP    14  // Added deep space probe
-#define NDEVICES (15)	// Number of devices
-
-#define FOREVER	1e30
-
-/* Define future events */
-#define FSPY	0	// Spy event happens always (no future[] entry)
-					// can cause SC to tractor beam Enterprise
-#define FSNOVA  1   // Supernova
-#define FTBEAM  2   // Commander tractor beams Enterprise
-#define FSNAP   3   // Snapshot for time warp
-#define FBATTAK 4   // Commander attacks base
-#define FCDBAS  5   // Commander destroys base
-#define FSCMOVE 6   // Supercommander moves (might attack base)
-#define FSCDBAS 7   // Supercommander destroys base
-#define FDSPROB 8   // Move deep space probe
-#define NEVENTS (9)
-
-// Scalar variables that are needed for freezing the game
-// are placed in a structure. #defines are used to access by their
-// original names. Gee, I could have done this with the d structure,
-// but I just didn't think of it back when I started.
-
-#define SSTMAGIC	"SST2.0\n"
-
-EXTERN WINDOW *curwnd;
-
-EXTERN struct {
-    char magic[sizeof(SSTMAGIC)];
-    unsigned long options;
-    snapshot state;
-    snapshot snapsht;
-    char quad[QUADSIZE+1][QUADSIZE+1];		// contents of our quadrant
-    double kpower[(QUADSIZE+1)*(QUADSIZE+1)];		// enemy energy levels
-    double kdist[(QUADSIZE+1)*(QUADSIZE+1)];		// enemy distances
-    double kavgd[(QUADSIZE+1)*(QUADSIZE+1)];		// average distances
-    double damage[NDEVICES];	// damage encountered
-    double future[NEVENTS];	// future events
-    char passwd[10];		// Self Destruct password
-    int kx[(QUADSIZE+1)*(QUADSIZE+1)];			// enemy sector locations
-    int ky[(QUADSIZE+1)*(QUADSIZE+1)];
-    /* members with macro definitions start here */
-    int inkling,
-	inbase,
-	incom,
-	inscom,
-	inrom,
-	instar,
-	intorps,
-	condit,
-	torps,
-	ship,
-	quadx,
-	quady,
-	sectx,
-	secty,
-	length,
-	skill,
-	basex,
-	basey,
-	klhere,
-	comhere,
-	casual,
-	nhelp,
-	nkinks,
-	ididit,
-	gamewon,
-	alive,
-	justin,
-	alldone,
-	shldchg,
-	plnetx,
-	plnety,
-	inorbit,
-	landed,
-	iplnet,
-	imine,
-	inplan,
-	nenhere,
-	ishere,
-	neutz,
-	irhere,
-	icraft,
-	ientesc,
-	iscraft,
-	isatb,
-	iscate,
-#ifdef DEBUG
-	idebug,
-#endif
-	iattak,
-	icrystl,
-	tourn,
-	thawed,
-	batx,
-	baty,
-	ithere,
-	ithx,
-	ithy,
-	iseenit,
-	probecx,
-	probecy,
-	proben,
-	isarmed,
-	nprobes;
-    double inresor,
-	intime,
-	inenrg,
-	inshld,
-	inlsr,
-	indate,
-	energy,
-	shield,
-	shldup,
-	warpfac,
-	wfacsq,
-	lsupres,
-	dist,
-	direc,
-	Time,
-	docfac,
-	resting,
-	damfac,
-	lastchart,
-	cryprob,
-	probex,
-	probey,
-	probeinx,
-	probeiny,
-	height;
-} game;
-
-#define inkling game.inkling		// Initial number of klingons
-#define inbase game.inbase		// Initial number of bases
-#define incom game.incom		// Initian number of commanders
-#define inscom game.inscom		// Initian number of commanders
-#define inrom game.inrom		// Initian number of commanders
-#define instar game.instar		// Initial stars
-#define intorps game.intorps		// Initial/Max torpedoes
-#define condit game.condit		// Condition (red/yellow/green/docked)
-#define torps game.torps		// number of torpedoes
-#define ship game.ship			// Ship type -- 'E' is Enterprise
-#define quadx game.quadx		// where we are
-#define quady game.quady		//
-#define sectx game.sectx		// where we are
-#define secty game.secty		//
-#define length game.length		// length of game
-#define skill game.skill		// skill level
-#define basex game.basex		// position of base in current quad
-#define basey game.basey		//
-#define klhere game.klhere		// klingons here
-#define comhere game.comhere		// commanders here
-#define casual game.casual		// causalties
-#define nhelp game.nhelp		// calls for help
-#define nkinks game.nkinks		//
-#define ididit game.ididit		// Action taken -- allows enemy to attack
-#define gamewon game.gamewon		// Finished!
-#define alive game.alive		// We are alive (not killed)
-#define justin game.justin		// just entered quadrant
-#define alldone game.alldone		// game is now finished
-#define shldchg game.shldchg		// shield is changing (affects efficiency)
-#define plnetx game.plnetx		// location of planet in quadrant
-#define plnety game.plnety		//
-#define inorbit game.inorbit		// orbiting
-#define landed game.landed		// party on planet (1), on ship (-1)
-#define iplnet game.iplnet		// planet # in quadrant
-#define imine game.imine		// mining
-#define inplan game.inplan		// initial planets
-#define nenhere game.nenhere		// Number of enemies in quadrant
-#define ishere game.ishere		// Super-commander in quandrant
-#define neutz game.neutz		// Romulan Neutral Zone
-#define irhere game.irhere		// Romulans in quadrant
-#define icraft game.icraft		// Kirk in Galileo
-#define ientesc game.ientesc		// Attempted escape from supercommander
-#define iscraft game.iscraft		// =1 if craft on ship, -1 if removed from game
-#define isatb game.isatb		// =1 if SuperCommander is attacking base
-#define iscate game.iscate		// Super Commander is here
-#ifdef DEBUG
-#define idebug game.idebug		// Debug mode
-#endif
-#define iattak game.iattak		// attack recursion elimination (was cracks[4])
-#define icrystl game.icrystl		// dilithium crystals aboard
-#define tourn game.tourn		// Tournament number
-#define thawed game.thawed		// Thawed game
-#define batx game.batx			// Base coordinates being attacked
-#define baty game.baty			//
-#define ithere game.ithere		// Tholean is here 
-#define ithx game.ithx			// coordinates of tholean
-#define ithy game.ithy
-#define iseenit game.iseenit		// Seen base attack report
-#define inresor game.inresor		// initial resources
-#define intime game.intime		// initial time
-#define inenrg game.inenrg		// Initial/Max Energy
-#define inshld game.inshld		// Initial/Max Shield
-#define inlsr game.inlsr		// initial life support resources
-#define indate game.indate		// Initial date
-#define energy game.energy		// Energy level
-#define shield game.shield		// Shield level
-#define shldup game.shldup		// Shields are up
-#define warpfac game.warpfac		// Warp speed
-#define wfacsq game.wfacsq		// squared warp factor
-#define lsupres game.lsupres		// life support reserves
-#define dist game.dist			// movement distance
-#define direc game.direc		// movement direction
-#define Time game.Time			// time taken by current operation
-#define docfac game.docfac		// repair factor when docking (constant?)
-#define resting game.resting		// rest time
-#define damfac game.damfac		// damage factor
-#define lastchart game.lastchart	// time star chart was last updated
-#define cryprob game.cryprob		// probability that crystal will work
-#define probex game.probex		// location of probe
-#define probey game.probey
-#define probecx game.probecx		// current probe quadrant
-#define probecy game.probecy	
-#define probeinx game.probeinx		// Probe x,y increment
-#define probeiny game.probeiny		
-#define proben game.proben		// number of moves for probe
-#define isarmed game.isarmed		// Probe is armed
-#define nprobes game.nprobes		// number of probes available
-
-/* the following global state doesn't need to be saved */
-EXTERN char	*device[NDEVICES];
-EXTERN int iscore, iskill; // Common PLAQ
-EXTERN double perdate;
-EXTERN double aaitem;
-EXTERN char citem[10];
-
-/* the Space Thingy's global state should *not* be saved! */
-EXTERN int thingx, thingy, iqhere, iqengry;
-
-typedef enum {FWON, FDEPLETE, FLIFESUP, FNRG, FBATTLE,
-              FNEG3, FNOVA, FSNOVAED, FABANDN, FDILITHIUM,
-			  FMATERIALIZE, FPHASER, FLOST, FMINING, FDPLANET,
-			  FPNOVA, FSSC, FSTRACTOR, FDRAY, FTRIBBLE,
-			  FHOLE} FINTYPE ;
-enum loctype {neither, quadrant, sector};
-
-#ifdef INCLUDED
-char *device[NDEVICES] = {
-	"S. R. Sensors",
-	"L. R. Sensors",
-	"Phasers",
-	"Photon Tubes",
-	"Life Support",
-	"Warp Engines",
-	"Impulse Engines",
-	"Shields",
-	"Subspace Radio",
-	"Shuttle Craft",
-	"Computer",
-	"Transporter",
-	"Shield Control",
-	"Death Ray",
-	"D. S. Probe"};									
-#endif
-
-#ifndef TRUE
-#define TRUE (1)
-#define FALSE (0)
-#endif
-
-#define IHR 'R'
-#define IHK 'K'
-#define IHC 'C'
-#define IHS 'S'
-#define IHSTAR '*'
-#define IHP 'P'
-#define IHB 'B'
-#define IHBLANK ' '
-#define IHDOT '.'
-#define IHQUEST '?'
-#define IHE 'E'
-#define IHF 'F'
-#define IHT 'T'
-#define IHWEB '#'
-#define IHGREEN 'G'
-#define IHYELLOW 'Y'
-#define IHRED 'R'
-#define IHDOCKED 'D'
-#define IHDEAD 'Z'
-#define IHMATER0 '-'
-#define IHMATER1 'o'
-#define IHMATER2 '0'
-
-
-/* Function prototypes */
-void prelim(void);
-void attack(int);
-int choose(int);
-void setup(int);
-void score(void);
-void atover(int);
-int srscan(int);
-void lrscan(void);
-void phasers(void);
-void photon(void);
-void warp(int);
-void doshield(int);
-void dock(int);
-void dreprt(void);
-void chart(int);
-void rechart(void);
-void impuls(void);
-void wait(void);
-void setwrp(void);
-void events(void);
-void report(void);
-void eta(void);
-void help(void);
-void abandn(void);
-void finish(FINTYPE);
-void dstrct(void);
-void kaboom(void);
-void freeze(int);
-int thaw(void);
-void plaque(void);
-int scan(void);
-#define IHEOL (0)
-#define IHALPHA (1)
-#define IHREAL (2)
-void chew(void);
-void chew2(void);
-void skip(int);
-void prout(char *, ...);
-void proutn(char *, ...);
-void stars(void);
-void newqad(int);
-int ja(void);
-void cramen(int);
-void crmshp(void);
-char *cramlc(enum loctype, int, int);
-double expran(double);
-double Rand(void);
-void iran(int, int *, int *);
-#define square(i) ((i)*(i))
-void dropin(int, int*, int*);
-void newcnd(void);
-void sortkl(void);
-void imove(void);
-void ram(int, int, int, int);
-void crmena(int, int, int, int, int);
-void deadkl(int, int, int, int, int);
-void timwrp(void);
-void movcom(void);
-void torpedo(double, double, int, int, double *, int, int);
-void huh(void);
-void pause_game(int);
-void nova(int, int);
-void snova(int, int);
-void scom(int *);
-void hittem(double *);
-void prouts(char *, ...);
-int isit(char *);
-void preport(void);
-void orbit(void);
-void sensor(void);
-void drawmaps(short);
-void beam(void);
-void mine(void);
-void usecrystals(void);
-void shuttle(void);
-void deathray(void);
-void debugme(void);
-void attakreport(int);
-void movetho(void);
-void probe(void);
-void iostart(void);
-void setwnd(WINDOW *);
-void warble(void);
-void boom(int ii, int jj);
-void tracktorpedo(int ix, int iy, int l, int i, int n, int iquad);
-void cgetline(char *, int);
-void waitfor(void);
-void setpassword(void);
-void commandhook(char *, int);
-void makechart(void);
-void enqueue(char *);
-
-/* mode arguments for srscan() */
-#define SCAN_FULL		1
-#define SCAN_REQUEST		2
-#define SCAN_STATUS		3
-#define SCAN_NO_LEFTSIDE	4
-
-WINDOW *fullscreen_window;
-WINDOW *srscan_window;
-WINDOW *report_window;
-WINDOW *lrscan_window;
-WINDOW *message_window;
-WINDOW *prompt_window;
-
-extern void clreol(void);
-extern void clrscr(void);
-extern void textcolor(int color);
-extern void highvideo(void);
-
-enum COLORS {
-   DEFAULT,
-   BLACK, BLUE, GREEN, CYAN, RED, MAGENTA, BROWN, LIGHTGRAY,
-   DARKGRAY, LIGHTBLUE, LIGHTGREEN, LIGHTCYAN, LIGHTRED, LIGHTMAGENTA, YELLOW, WHITE
-};
-
-#define DAMAGED	128	/* marker for damaged ship in starmap */

Deleted: trunk/sst.xml
===================================================================
--- trunk/sst.xml	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/sst.xml	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,67 +0,0 @@
-<!DOCTYPE refentry PUBLIC 
-   "-//OASIS//DTD DocBook XML V4.1.2//EN"
-   "docbook/docbookx.dtd">
-<refentry id='sst.6'>
-<refmeta>
-<refentrytitle>sst</refentrytitle>
-<manvolnum>6</manvolnum>
-<refmiscinfo class='date'>Nov 1 2004</refmiscinfo>
-</refmeta>
-<refnamediv id='name'>
-<refname>sst</refname>
-<refpurpose>the classic Super Star Trek game</refpurpose>
-</refnamediv>
-<refsynopsisdiv id='synopsis'>
-
-<cmdsynopsis>
-<command>sst</command>
-<arg choice='opt'>-t </arg> 
-<arg rep='repeat' ><replaceable>command</replaceable></arg>  
-</cmdsynopsis>
-
-</refsynopsisdiv>
-
-<refsect1 id='description'><title>DESCRIPTION</title>
-
-<para>The Organian Peace Treaty has collapsed, and the Federation is
-at war with the Klingon Empire. Joining the Klingons against the
-Federation are the members of the Romulan Star Empire. As commander
-of the Starship U.S.S. Enterprise, your job is to wipe out the Klingon
-invasion fleet and make the galaxy safe for democracy.</para>
-
-<para>This is one of the great early classic computer games from the
-1970s and still has a remarkable amount of play value. Run
-<command>sst</command> in a terminal window to start it.  Typing
-'comands' at the prompt will list all commands; help is available for
-each one individually as well.  Full documentation is <ulink
-url='http://sst.berlios.de/sst-doc.html'>browseable</ulink>.  On
-systems where <filename>/usr/share/doc/sst/</filename> is a legal
-filename, it will probably be installed there as well.</para>
-
-<para>There is one option -t, which forces the original pure-tty mode.
-Normally sst tries to come up in full-screen mode that assumes it is
-running on a cursor-addressable terminal or terminal emulator.</para>
-
-<para>Input tokens for the setup prompts will be read from the
-remainder of the command line before standard input.  Thus, for
-example, you can invoke the program as</para>
-
-<programlisting>
-sst regular medium good fancy
-</programlisting>
-
-<para>to start a regular medium game as a good player in 'fancy'
-mode (all features enabled).</para>
-</refsect1>
-
-<refsect1 id='authors'><title>AUTHORS</title> 
-<para>Super Star Trek was designed and written by David Matuszek, Paul
-Reynolds, and Don Smith in the 1970s.  It was resurrected by Tom Almy.
-The screen-oriented interface is by Stas Sergeev. This version has
-been cleaned up and documented by Eric S. Raymond
-<email>esr at snark.thyrsus.com</email>.  There is a <ulink
-url='https://developer.berlios.de/projects/sst/'>project
-page</ulink>.</para>
-</refsect1>
-</refentry>
-

Deleted: trunk/sstlinux.c
===================================================================
--- trunk/sstlinux.c	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/sstlinux.c	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,18 +0,0 @@
-#include <sys/types.h>
-#include <fcntl.h>
-#include <sys/ioctl.h>
-#include <linux/kd.h>
-#include "sstlinux.h"
-
-static int fd = 0;
-
-void sound(unsigned int freq)
-{
-    if(fd==0) fd=open("/dev/console", O_RDONLY);
-    if(fd>0) ioctl(fd, KDMKTONE, 1193180/freq + (0xFFFF<<16));
-}
-
-void nosound(void)
-{
-    if(fd>0) ioctl(fd, KDMKTONE, 0);
-}

Deleted: trunk/sstlinux.h
===================================================================
--- trunk/sstlinux.h	2006-09-13 17:20:21 UTC (rev 540)
+++ trunk/sstlinux.h	2006-09-13 17:20:32 UTC (rev 541)
@@ -1,10 +0,0 @@
-#ifndef __SSTLINUX_H
-#define __SSTLINUX_H
-
-void sound(unsigned int);
-void nosound(void);
-
-#define delay(x) usleep(x*1000)
-#define randomize() srand((unsigned)time(NULL))
-
-#endif



From stsp at mail.berlios.de  Wed Sep 13 19:32:01 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Wed, 13 Sep 2006 19:32:01 +0200
Subject: [Sst-commit-watch] r543 - in trunk: . src
Message-ID: <200609131732.k8DHW19Q023617@sheep.berlios.de>

Author: stsp
Date: 2006-09-13 19:32:01 +0200 (Wed, 13 Sep 2006)
New Revision: 543

Added:
   trunk/src/xio.c
Removed:
   trunk/xio.c
Log:
move xio.c to src

Copied: trunk/src/xio.c (from rev 542, trunk/xio.c)

Deleted: trunk/xio.c
===================================================================
--- trunk/xio.c	2006-09-13 17:29:04 UTC (rev 542)
+++ trunk/xio.c	2006-09-13 17:32:01 UTC (rev 543)
@@ -1,40 +0,0 @@
-#include <stdlib.h>
-#include <X11/Intrinsic.h>
-#include <X11/StringDefs.h>
-#include <X11/Shell.h>
-#include <X11/Xaw/Form.h>
-#include <X11/Xaw/Command.h>
-#include <X11/Xaw/AsciiText.h>
-
-XtAppContext app_context;
-Widget toplevel, form, quit, text;
-
-void quit_proc (Widget w, XtPointer client_data, XtPointer call_data)
-{ 
-    XtDestroyApplicationContext (app_context);
-    exit (0);
-}
-
-int main (int argc, char **argv)
-{ 
-    toplevel = XtVaOpenApplication (&app_context, "XThird", NULL, 0, &argc,
-				    argv, NULL, applicationShellWidgetClass,
-				    XtNallowShellResize, True, NULL);
-    form = XtVaCreateManagedWidget ("form", formWidgetClass, toplevel, NULL); 
-    quit = XtVaCreateManagedWidget ("quit", commandWidgetClass, form, XtNlabel,
-				    "Quit", NULL);
-    text = XtVaCreateManagedWidget ("text", asciiTextWidgetClass, form, 
-				    XtNfromVert, quit, XtNresize,
-				    XawtextResizeBoth, XtNresizable, True, NULL);
-    XtAddCallback (quit, XtNcallback, quit_proc, NULL);
-    if (argc <= 1)
-	XtVaSetValues (text, XtNtype, XawAsciiString, 
-		       XtNstring, "Fool! You should"
-		       " supply a file name!", NULL); 
-    else
-	XtVaSetValues (text, XtNtype, XawAsciiFile, XtNstring, argv [1], NULL);
-    XtVaSetValues (text, XtNeditType, XawtextRead, XtNdisplayCaret, False, NULL);
-    XtRealizeWidget (toplevel);
-    XtAppMainLoop (app_context);
-    exit(0);
-}



From esr at mail.berlios.de  Wed Sep 13 19:44:38 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 13 Sep 2006 19:44:38 +0200
Subject: [Sst-commit-watch] r544 - trunk
Message-ID: <200609131744.k8DHicRi024766@sheep.berlios.de>

Author: esr
Date: 2006-09-13 19:44:37 +0200 (Wed, 13 Sep 2006)
New Revision: 544

Modified:
   trunk/AUTHORS
   trunk/COPYING
Log:
Fix some decor files.


Modified: trunk/AUTHORS
===================================================================
--- trunk/AUTHORS	2006-09-13 17:32:01 UTC (rev 543)
+++ trunk/AUTHORS	2006-09-13 17:44:37 UTC (rev 544)
@@ -1,19 +1,6 @@
-                     Produced For Your Enjoyment
-
-                                 By
-
-                            David Matuszek
-                                 and
-                            Paul Reynolds
-
-                        With Modifications By
-                              Don Smith
-
-                            Resurrected By
-                               Tom Almy
-
-                          Curses Interface By
-                              Stas Sergeev
-
-                          SST 2K polishing by
-                             Eric S. Raymond
+David Matuszek <matuszek at cis.upenn.edu>
+Paul Reynolds
+Don Smith
+Tom Almy <tom at almy.us>
+Stas Sergeev <stsp at aknet.ru>
+Eric S. Raymond <esr at thyrsus.com>

Modified: trunk/COPYING
===================================================================
--- trunk/COPYING	2006-09-13 17:32:01 UTC (rev 543)
+++ trunk/COPYING	2006-09-13 17:44:37 UTC (rev 544)
@@ -1 +1,30 @@
-BSD license
\ No newline at end of file
+			BSD LICENSE
+
+The SST2K code is Copyright (c) 2006 by Eric Raymond. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+
+Redistributions of source code must retain the above copyright
+notice, this list of conditions and the following disclaimer.
+
+Redistributions in binary form must reproduce the above copyright
+notice, this list of conditions and the following disclaimer in the
+documentation and/or other materials provided with the distribution.
+
+Neither the name of the SST2K project nor the names of its contributors
+may be used to endorse or promote products derived from this software
+without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR
+CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



From esr at mail.berlios.de  Wed Sep 13 19:57:13 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 13 Sep 2006 19:57:13 +0200
Subject: [Sst-commit-watch] r545 - trunk/src
Message-ID: <200609131757.k8DHvDvA026322@sheep.berlios.de>

Author: esr
Date: 2006-09-13 19:57:12 +0200 (Wed, 13 Sep 2006)
New Revision: 545

Modified:
   trunk/src/xio.c
Log:
Beginnings of a button panel.


Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-13 17:44:37 UTC (rev 544)
+++ trunk/src/xio.c	2006-09-13 17:57:12 UTC (rev 545)
@@ -7,7 +7,7 @@
 #include <X11/Xaw/AsciiText.h>
 
 XtAppContext app_context;
-Widget toplevel, form, quit, text;
+Widget toplevel, form, buttons, quit, destruct, text;
 
 void quit_proc (Widget w, XtPointer client_data, XtPointer call_data)
 { 
@@ -21,18 +21,22 @@
 				    argv, NULL, applicationShellWidgetClass,
 				    XtNallowShellResize, True, NULL);
     form = XtVaCreateManagedWidget ("form", formWidgetClass, toplevel, NULL); 
-    quit = XtVaCreateManagedWidget ("quit", commandWidgetClass, form, XtNlabel,
-				    "Quit", NULL);
+    buttons = XtVaCreateManagedWidget ("form", formWidgetClass, form, NULL); 
+    quit     = XtVaCreateManagedWidget("quit", 
+				       commandWidgetClass, buttons, 
+				       XtNlabel, "Quit", NULL);
+    destruct = XtVaCreateManagedWidget("destruct", 
+				       commandWidgetClass, buttons, 
+				       XtNfromHoriz, quit,
+				       XtNlabel, "Destruct", NULL);
     text = XtVaCreateManagedWidget ("text", asciiTextWidgetClass, form, 
-				    XtNfromVert, quit, XtNresize,
+				    XtNfromVert, buttons, XtNresize,
 				    XawtextResizeBoth, XtNresizable, True, NULL);
     XtAddCallback (quit, XtNcallback, quit_proc, NULL);
-    if (argc <= 1)
-	XtVaSetValues (text, XtNtype, XawAsciiString, 
-		       XtNstring, "Fool! You should"
-		       " supply a file name!", NULL); 
-    else
-	XtVaSetValues (text, XtNtype, XawAsciiFile, XtNstring, argv [1], NULL);
+
+    /* sample text so the widget will be identifiable */
+    XtVaSetValues (text, XtNtype, XawAsciiString, 
+		       XtNstring, "Command window", NULL); 
     XtVaSetValues (text, XtNeditType, XawtextRead, XtNdisplayCaret, False, NULL);
     XtRealizeWidget (toplevel);
     XtAppMainLoop (app_context);



From esr at mail.berlios.de  Wed Sep 13 20:05:53 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 13 Sep 2006 20:05:53 +0200
Subject: [Sst-commit-watch] r546 - trunk/src
Message-ID: <200609131805.k8DI5rtn027258@sheep.berlios.de>

Author: esr
Date: 2006-09-13 20:05:53 +0200 (Wed, 13 Sep 2006)
New Revision: 546

Modified:
   trunk/src/xio.c
Log:
Begin moving resource declarations into the fallback.


Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-13 17:57:12 UTC (rev 545)
+++ trunk/src/xio.c	2006-09-13 18:05:53 UTC (rev 546)
@@ -9,7 +9,12 @@
 XtAppContext app_context;
 Widget toplevel, form, buttons, quit, destruct, text;
 
-void quit_proc (Widget w, XtPointer client_data, XtPointer call_data)
+String fallback[] = {
+    "*destruct.fromHoriz: quit",
+    NULL,
+};
+
+static void quit_proc (Widget w, XtPointer client_data, XtPointer call_data)
 { 
     XtDestroyApplicationContext (app_context);
     exit (0);
@@ -18,21 +23,24 @@
 int main (int argc, char **argv)
 { 
     toplevel = XtVaOpenApplication (&app_context, "XThird", NULL, 0, &argc,
-				    argv, NULL, applicationShellWidgetClass,
+				    argv, fallback, 
+				    applicationShellWidgetClass,
 				    XtNallowShellResize, True, NULL);
-    form = XtVaCreateManagedWidget ("form", formWidgetClass, toplevel, NULL); 
-    buttons = XtVaCreateManagedWidget ("form", formWidgetClass, form, NULL); 
+    form = XtVaCreateManagedWidget ("form", formWidgetClass, toplevel, NULL);
+    /* The button panel */
+    buttons  = XtVaCreateManagedWidget ("form", formWidgetClass, form, NULL); 
     quit     = XtVaCreateManagedWidget("quit", 
 				       commandWidgetClass, buttons, 
 				       XtNlabel, "Quit", NULL);
+    XtAddCallback (quit, XtNcallback, quit_proc, NULL);
     destruct = XtVaCreateManagedWidget("destruct", 
 				       commandWidgetClass, buttons, 
-				       XtNfromHoriz, quit,
 				       XtNlabel, "Destruct", NULL);
+    /* the command window */
     text = XtVaCreateManagedWidget ("text", asciiTextWidgetClass, form, 
-				    XtNfromVert, buttons, XtNresize,
-				    XawtextResizeBoth, XtNresizable, True, NULL);
-    XtAddCallback (quit, XtNcallback, quit_proc, NULL);
+				    XtNfromVert, buttons, 
+				    XtNresize, XawtextResizeBoth, 
+				    XtNresizable, True, NULL);
 
     /* sample text so the widget will be identifiable */
     XtVaSetValues (text, XtNtype, XawAsciiString, 
@@ -40,5 +48,7 @@
     XtVaSetValues (text, XtNeditType, XawtextRead, XtNdisplayCaret, False, NULL);
     XtRealizeWidget (toplevel);
     XtAppMainLoop (app_context);
+    /* loop may be interrupted */
+    XtDestroyApplicationContext (app_context);
     exit(0);
 }



From esr at mail.berlios.de  Wed Sep 13 20:22:46 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 13 Sep 2006 20:22:46 +0200
Subject: [Sst-commit-watch] r547 - trunk/src
Message-ID: <200609131822.k8DIMkUo028866@sheep.berlios.de>

Author: esr
Date: 2006-09-13 20:22:46 +0200 (Wed, 13 Sep 2006)
New Revision: 547

Modified:
   trunk/src/xio.c
Log:
More buttons, and systematic use of fallback.


Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-13 18:05:53 UTC (rev 546)
+++ trunk/src/xio.c	2006-09-13 18:22:46 UTC (rev 547)
@@ -7,10 +7,19 @@
 #include <X11/Xaw/AsciiText.h>
 
 XtAppContext app_context;
-Widget toplevel, form, buttons, quit, destruct, text;
+Widget toplevel, form, text; 
+Widget buttons, phasers, photons, destruct, quit;
 
 String fallback[] = {
-    "*destruct.fromHoriz: quit",
+    /* button labels */
+    "*phasers.label: Phasers",
+    "*photons.label: Torps",
+    "*destruct.label: Destruct",
+    "*quit.label: Quit",
+    /* layout constraints */
+    "*photons.fromHoriz: phasers",
+    "*destruct.fromHoriz: photons",
+    "*quit.fromHoriz: destruct",
     NULL,
 };
 
@@ -22,20 +31,26 @@
 
 int main (int argc, char **argv)
 { 
-    toplevel = XtVaOpenApplication (&app_context, "XThird", NULL, 0, &argc,
+    toplevel = XtVaOpenApplication (&app_context, "sst2k", NULL, 0, &argc,
 				    argv, fallback, 
 				    applicationShellWidgetClass,
 				    XtNallowShellResize, True, NULL);
     form = XtVaCreateManagedWidget ("form", formWidgetClass, toplevel, NULL);
     /* The button panel */
     buttons  = XtVaCreateManagedWidget ("form", formWidgetClass, form, NULL); 
+    phasers  = XtVaCreateManagedWidget("phasers", 
+				       commandWidgetClass, buttons, 
+				       NULL);
+    photons  = XtVaCreateManagedWidget("photons", 
+				       commandWidgetClass, buttons, 
+				       NULL);
+    destruct = XtVaCreateManagedWidget("destruct", 
+				       commandWidgetClass, buttons, 
+				       NULL);
     quit     = XtVaCreateManagedWidget("quit", 
 				       commandWidgetClass, buttons, 
-				       XtNlabel, "Quit", NULL);
+				       NULL);
     XtAddCallback (quit, XtNcallback, quit_proc, NULL);
-    destruct = XtVaCreateManagedWidget("destruct", 
-				       commandWidgetClass, buttons, 
-				       XtNlabel, "Destruct", NULL);
     /* the command window */
     text = XtVaCreateManagedWidget ("text", asciiTextWidgetClass, form, 
 				    XtNfromVert, buttons, 



From esr at mail.berlios.de  Wed Sep 13 20:28:02 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 13 Sep 2006 20:28:02 +0200
Subject: [Sst-commit-watch] r548 - trunk/src
Message-ID: <200609131828.k8DIS2KH029275@sheep.berlios.de>

Author: esr
Date: 2006-09-13 20:28:02 +0200 (Wed, 13 Sep 2006)
New Revision: 548

Modified:
   trunk/src/xio.c
Log:
More resources into fallback.


Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-13 18:22:46 UTC (rev 547)
+++ trunk/src/xio.c	2006-09-13 18:28:02 UTC (rev 548)
@@ -16,6 +16,9 @@
     "*photons.label: Torps",
     "*destruct.label: Destruct",
     "*quit.label: Quit",
+    /* text window resources */
+    "*text.resizable: true",
+    "*text.resize: ResizeBoth",
     /* layout constraints */
     "*photons.fromHoriz: phasers",
     "*destruct.fromHoriz: photons",
@@ -54,8 +57,7 @@
     /* the command window */
     text = XtVaCreateManagedWidget ("text", asciiTextWidgetClass, form, 
 				    XtNfromVert, buttons, 
-				    XtNresize, XawtextResizeBoth, 
-				    XtNresizable, True, NULL);
+				    NULL);
 
     /* sample text so the widget will be identifiable */
     XtVaSetValues (text, XtNtype, XawAsciiString, 



From esr at mail.berlios.de  Wed Sep 13 21:45:49 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 13 Sep 2006 21:45:49 +0200
Subject: [Sst-commit-watch] r549 - trunk/src
Message-ID: <200609131945.k8DJjnnP006242@sheep.berlios.de>

Author: esr
Date: 2006-09-13 21:45:48 +0200 (Wed, 13 Sep 2006)
New Revision: 549

Modified:
   trunk/src/xio.c
Log:
Multiple-button layout, but with some "Cannot convert string" messages.


Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-13 18:28:02 UTC (rev 548)
+++ trunk/src/xio.c	2006-09-13 19:45:48 UTC (rev 549)
@@ -5,67 +5,131 @@
 #include <X11/Xaw/Form.h>
 #include <X11/Xaw/Command.h>
 #include <X11/Xaw/AsciiText.h>
+#include "sst.h"
 
-XtAppContext app_context;
-Widget toplevel, form, text; 
-Widget buttons, phasers, photons, destruct, quit;
+static XtAppContext app_context;
+static Widget toplevel, form, text, buttons; 
 
 String fallback[] = {
-    /* button labels */
-    "*phasers.label: Phasers",
-    "*photons.label: Torps",
-    "*destruct.label: Destruct",
-    "*quit.label: Quit",
     /* text window resources */
     "*text.resizable: true",
     "*text.resize: ResizeBoth",
     /* layout constraints */
-    "*photons.fromHoriz: phasers",
-    "*destruct.fromHoriz: photons",
-    "*quit.fromHoriz: destruct",
+    /* navigation row */
+    //"*Move.fromHoriz:",
+    "*Impulse.fromHoriz: Move",
+    "*Rest.fromHoriz: Impulse",
+    "*Warp.fromHoriz: Rest",
+    "*Dock.fromHoriz: Warp",
+    "*Chart.fromHoriz: Dock",
+    // Weapons row
+    "*Phasers.fromVert: Move",
+    "*Torpedo.fromHoriz: Phasers",
+    "*Shields.fromHoriz: Torpedo",
+    "*Damages.fromHoriz: Shields",
+    "*Crystals.fromHoriz: Damages",
+    "*Deathray.fromHoriz: Damages",
+    "*Mayday.fromHoriz: Deathray",
+    "*Abandon.fromHoriz: Mayday",
+    // Planet row
+    "*Sensors.fromVert: Phasers",
+    "*Orbit.fromHoriz: Sensors",
+    "*Transport.fromHoriz: Orbit",
+    "*Mine.fromHoriz: Transport",
+    "*Shuttle.fromHoriz: Transport",
+    "*Planets.fromHoriz: Shuttle",
+    // Miscellany row
+    "*Report.fromVert: Sensors",
+    "*Computer.fromHoriz: Report",
+    "*Probe.fromHoriz: Computer",
+    "*Help.fromHoriz: Computer",
+    // Ending it all
+    "*Score.fromVert: Report",
+    "*Destruct.fromHoriz: Score",
+    "*Quit.fromHoriz: Destruct",
+    "*Emexit.fromHoriz: Quit",
+    "*Save.fromHoriz: Emexit",
     NULL,
 };
 
-static void quit_proc (Widget w, XtPointer client_data, XtPointer call_data)
+struct cmd_t {
+    char *name;
+    void (*callback)(Widget, XtPointer, XtPointer);
+    int enable;
+    Widget widget;
+};
+
+static void quit_proc(Widget w, XtPointer client_data, XtPointer call_data)
 { 
     XtDestroyApplicationContext (app_context);
     exit (0);
 }
 
-int main (int argc, char **argv)
+static struct cmd_t commands[] = {
+    {"Phasers",		NULL,		0},
+    {"Torpedo",		NULL,		0},
+    {"Move",		NULL,		0},
+    {"Shields",		NULL,		0},
+    {"Dock",		NULL,		0},
+    {"Damages",		NULL,		0},
+    {"Chart",		NULL,		0},
+    {"Impulse",		NULL,		0},
+    {"Rest",		NULL,		0},
+    {"Warp",		NULL,		0},
+    {"Score",		NULL,		0},
+    {"Sensors",		NULL,		OPTION_PLANETS},
+    {"Orbit",		NULL,		OPTION_PLANETS},
+    {"Transport",	NULL,		OPTION_PLANETS},
+    {"Mine",		NULL,		OPTION_PLANETS},
+    {"Crystals",	NULL,		OPTION_PLANETS},
+    {"Shuttle",		NULL,		OPTION_PLANETS},
+    {"Planets",		NULL,		OPTION_PLANETS},
+    {"Report",		NULL,		0},
+    {"Computer",	NULL,      	0},
+    {"Emexit",		NULL,		0},
+    {"Probe",		NULL,		OPTION_PROBE},
+    {"Save",		NULL,		0},
+    {"Abandon",		NULL,		0},
+    {"Destruct",	NULL,		0},
+    {"Deathray",	NULL,		0},
+    {"Mayday",		NULL,		0},
+    {"Quit",		quit_proc,	0},
+    {"Help",		NULL,		0},
+};
+
+int main(int argc, char **argv)
 { 
-    toplevel = XtVaOpenApplication (&app_context, "sst2k", NULL, 0, &argc,
+    struct cmd_t *cp;
+
+    toplevel = XtVaOpenApplication(&app_context, "sst2k", NULL, 0, &argc,
 				    argv, fallback, 
 				    applicationShellWidgetClass,
 				    XtNallowShellResize, True, NULL);
-    form = XtVaCreateManagedWidget ("form", formWidgetClass, toplevel, NULL);
-    /* The button panel */
-    buttons  = XtVaCreateManagedWidget ("form", formWidgetClass, form, NULL); 
-    phasers  = XtVaCreateManagedWidget("phasers", 
-				       commandWidgetClass, buttons, 
-				       NULL);
-    photons  = XtVaCreateManagedWidget("photons", 
-				       commandWidgetClass, buttons, 
-				       NULL);
-    destruct = XtVaCreateManagedWidget("destruct", 
-				       commandWidgetClass, buttons, 
-				       NULL);
-    quit     = XtVaCreateManagedWidget("quit", 
-				       commandWidgetClass, buttons, 
-				       NULL);
-    XtAddCallback (quit, XtNcallback, quit_proc, NULL);
+    form = XtVaCreateManagedWidget("form", formWidgetClass, toplevel, NULL);
     /* the command window */
-    text = XtVaCreateManagedWidget ("text", asciiTextWidgetClass, form, 
-				    XtNfromVert, buttons, 
+    text = XtVaCreateManagedWidget("text", asciiTextWidgetClass, form, 
 				    NULL);
 
+    /* The button panel */
+    buttons  = XtVaCreateManagedWidget("form", 
+					formWidgetClass, form, 
+					XtNfromVert, text, 
+					NULL); 
+    for (cp = commands; cp < commands + sizeof(commands)/sizeof(commands[0]); cp++) {
+	cp->widget = XtVaCreateManagedWidget(cp->name, 
+					     commandWidgetClass, buttons, 
+					     XtNlabel, cp->name,
+					     NULL);
+	if (cp->callback)
+	    XtAddCallback (cp->widget, XtNcallback, cp->callback, NULL);
+    }
     /* sample text so the widget will be identifiable */
-    XtVaSetValues (text, XtNtype, XawAsciiString, 
+    XtVaSetValues(text, XtNtype, XawAsciiString, 
 		       XtNstring, "Command window", NULL); 
-    XtVaSetValues (text, XtNeditType, XawtextRead, XtNdisplayCaret, False, NULL);
-    XtRealizeWidget (toplevel);
-    XtAppMainLoop (app_context);
+    XtVaSetValues(text, XtNeditType, XawtextRead, XtNdisplayCaret, False, NULL);
+    XtRealizeWidget(toplevel);
+    XtAppMainLoop(app_context);
     /* loop may be interrupted */
-    XtDestroyApplicationContext (app_context);
+    XtDestroyApplicationContext(app_context);
     exit(0);
 }



From esr at mail.berlios.de  Wed Sep 13 22:24:26 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 13 Sep 2006 22:24:26 +0200
Subject: [Sst-commit-watch] r550 - trunk/src
Message-ID: <200609132024.k8DKOQ2j011907@sheep.berlios.de>

Author: esr
Date: 2006-09-13 22:24:26 +0200 (Wed, 13 Sep 2006)
New Revision: 550

Modified:
   trunk/src/xio.c
Log:
Remove some dead code.


Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-13 19:45:48 UTC (rev 549)
+++ trunk/src/xio.c	2006-09-13 20:24:26 UTC (rev 550)
@@ -28,7 +28,7 @@
     "*Shields.fromHoriz: Torpedo",
     "*Damages.fromHoriz: Shields",
     "*Crystals.fromHoriz: Damages",
-    "*Deathray.fromHoriz: Damages",
+    "*Deathray.fromHoriz: Crystals",
     "*Mayday.fromHoriz: Deathray",
     "*Abandon.fromHoriz: Mayday",
     // Planet row
@@ -109,7 +109,7 @@
     /* the command window */
     text = XtVaCreateManagedWidget("text", asciiTextWidgetClass, form, 
 				    NULL);
-
+    XtVaSetValues(text, XtNeditType,XawtextRead, XtNdisplayCaret,False, NULL);
     /* The button panel */
     buttons  = XtVaCreateManagedWidget("form", 
 					formWidgetClass, form, 
@@ -123,10 +123,6 @@
 	if (cp->callback)
 	    XtAddCallback (cp->widget, XtNcallback, cp->callback, NULL);
     }
-    /* sample text so the widget will be identifiable */
-    XtVaSetValues(text, XtNtype, XawAsciiString, 
-		       XtNstring, "Command window", NULL); 
-    XtVaSetValues(text, XtNeditType, XawtextRead, XtNdisplayCaret, False, NULL);
     XtRealizeWidget(toplevel);
     XtAppMainLoop(app_context);
     /* loop may be interrupted */



From esr at mail.berlios.de  Thu Sep 14 00:40:42 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 14 Sep 2006 00:40:42 +0200
Subject: [Sst-commit-watch] r551 - trunk/src
Message-ID: <200609132240.k8DMegbe021910@sheep.berlios.de>

Author: esr
Date: 2006-09-14 00:40:39 +0200 (Thu, 14 Sep 2006)
New Revision: 551

Modified:
   trunk/src/xio.c
Log:
Use box class to get rid of bad reference.


Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-13 20:24:26 UTC (rev 550)
+++ trunk/src/xio.c	2006-09-13 22:40:39 UTC (rev 551)
@@ -2,6 +2,7 @@
 #include <X11/Intrinsic.h>
 #include <X11/StringDefs.h>
 #include <X11/Shell.h>
+#include <X11/Xaw/Box.h>
 #include <X11/Xaw/Form.h>
 #include <X11/Xaw/Command.h>
 #include <X11/Xaw/AsciiText.h>
@@ -10,45 +11,10 @@
 static XtAppContext app_context;
 static Widget toplevel, form, text, buttons; 
 
-String fallback[] = {
+static String fallback[] = {
     /* text window resources */
     "*text.resizable: true",
     "*text.resize: ResizeBoth",
-    /* layout constraints */
-    /* navigation row */
-    //"*Move.fromHoriz:",
-    "*Impulse.fromHoriz: Move",
-    "*Rest.fromHoriz: Impulse",
-    "*Warp.fromHoriz: Rest",
-    "*Dock.fromHoriz: Warp",
-    "*Chart.fromHoriz: Dock",
-    // Weapons row
-    "*Phasers.fromVert: Move",
-    "*Torpedo.fromHoriz: Phasers",
-    "*Shields.fromHoriz: Torpedo",
-    "*Damages.fromHoriz: Shields",
-    "*Crystals.fromHoriz: Damages",
-    "*Deathray.fromHoriz: Crystals",
-    "*Mayday.fromHoriz: Deathray",
-    "*Abandon.fromHoriz: Mayday",
-    // Planet row
-    "*Sensors.fromVert: Phasers",
-    "*Orbit.fromHoriz: Sensors",
-    "*Transport.fromHoriz: Orbit",
-    "*Mine.fromHoriz: Transport",
-    "*Shuttle.fromHoriz: Transport",
-    "*Planets.fromHoriz: Shuttle",
-    // Miscellany row
-    "*Report.fromVert: Sensors",
-    "*Computer.fromHoriz: Report",
-    "*Probe.fromHoriz: Computer",
-    "*Help.fromHoriz: Computer",
-    // Ending it all
-    "*Score.fromVert: Report",
-    "*Destruct.fromHoriz: Score",
-    "*Quit.fromHoriz: Destruct",
-    "*Emexit.fromHoriz: Quit",
-    "*Save.fromHoriz: Emexit",
     NULL,
 };
 
@@ -65,36 +31,42 @@
     exit (0);
 }
 
+static void noargs_proc(Widget w, XtPointer client_data, XtPointer call_data)
+/* use this for commands that take no arguments */
+{
+    /* currently a stub */
+}
+
 static struct cmd_t commands[] = {
     {"Phasers",		NULL,		0},
     {"Torpedo",		NULL,		0},
     {"Move",		NULL,		0},
     {"Shields",		NULL,		0},
-    {"Dock",		NULL,		0},
-    {"Damages",		NULL,		0},
-    {"Chart",		NULL,		0},
+    {"Dock",		noargs_proc,	0},
+    {"Damages",		noargs_proc,	0},
+    {"Chart",		noargs_proc,	0},
     {"Impulse",		NULL,		0},
     {"Rest",		NULL,		0},
     {"Warp",		NULL,		0},
-    {"Score",		NULL,		0},
-    {"Sensors",		NULL,		OPTION_PLANETS},
-    {"Orbit",		NULL,		OPTION_PLANETS},
-    {"Transport",	NULL,		OPTION_PLANETS},
-    {"Mine",		NULL,		OPTION_PLANETS},
-    {"Crystals",	NULL,		OPTION_PLANETS},
-    {"Shuttle",		NULL,		OPTION_PLANETS},
-    {"Planets",		NULL,		OPTION_PLANETS},
-    {"Report",		NULL,		0},
-    {"Computer",	NULL,      	0},
-    {"Emexit",		NULL,		0},
+    {"Score",		noargs_proc,	0},
+    {"Sensors",		noargs_proc,	OPTION_PLANETS},
+    {"Orbit",		noargs_proc,	OPTION_PLANETS},
+    {"Transport",	noargs_proc,	OPTION_PLANETS},
+    {"Mine",		noargs_proc,	OPTION_PLANETS},
+    {"Crystals",	noargs_proc,	OPTION_PLANETS},
+    {"Shuttle",		noargs_proc,	OPTION_PLANETS},
+    {"Planets",		noargs_proc,	OPTION_PLANETS},
+    {"Report",		noargs_proc,	0},
+    {"Computer",	noargs_proc,   	0},
+    {"Emexit",		noargs_proc,	0},
     {"Probe",		NULL,		OPTION_PROBE},
     {"Save",		NULL,		0},
-    {"Abandon",		NULL,		0},
-    {"Destruct",	NULL,		0},
-    {"Deathray",	NULL,		0},
-    {"Mayday",		NULL,		0},
+    {"Abandon",		noargs_proc,	0},
+    {"Destruct",	noargs_proc,	0},
+    {"Deathray",	noargs_proc,	0},
+    {"Mayday",		noargs_proc,	0},
     {"Quit",		quit_proc,	0},
-    {"Help",		NULL,		0},
+    {"Help",		noargs_proc,	0},
 };
 
 int main(int argc, char **argv)
@@ -108,13 +80,15 @@
     form = XtVaCreateManagedWidget("form", formWidgetClass, toplevel, NULL);
     /* the command window */
     text = XtVaCreateManagedWidget("text", asciiTextWidgetClass, form, 
-				    NULL);
+				   XtNwidth, 400, XtNheight, 200,
+				   NULL);
     XtVaSetValues(text, XtNeditType,XawtextRead, XtNdisplayCaret,False, NULL);
     /* The button panel */
     buttons  = XtVaCreateManagedWidget("form", 
-					formWidgetClass, form, 
-					XtNfromVert, text, 
-					NULL); 
+				       boxWidgetClass, form,
+				       XtNfromVert, text, 
+				       XtNorientation, XtorientHorizontal,
+				       NULL); 
     for (cp = commands; cp < commands + sizeof(commands)/sizeof(commands[0]); cp++) {
 	cp->widget = XtVaCreateManagedWidget(cp->name, 
 					     commandWidgetClass, buttons, 



From esr at mail.berlios.de  Thu Sep 14 00:58:44 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 14 Sep 2006 00:58:44 +0200
Subject: [Sst-commit-watch] r552 - trunk/src
Message-ID: <200609132258.k8DMwi5A009460@sheep.berlios.de>

Author: esr
Date: 2006-09-14 00:58:43 +0200 (Thu, 14 Sep 2006)
New Revision: 552

Modified:
   trunk/src/xio.c
Log:
Separate widgets for each button group,


Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-13 22:40:39 UTC (rev 551)
+++ trunk/src/xio.c	2006-09-13 22:58:43 UTC (rev 552)
@@ -9,7 +9,8 @@
 #include "sst.h"
 
 static XtAppContext app_context;
-static Widget toplevel, form, text, buttons; 
+static Widget toplevel, text, form; 
+static Widget navigation, weapons, status, planets, misc; 
 
 static String fallback[] = {
     /* text window resources */
@@ -21,8 +22,10 @@
 struct cmd_t {
     char *name;
     void (*callback)(Widget, XtPointer, XtPointer);
+    Widget *parent;
     int enable;
     Widget widget;
+
 };
 
 static void quit_proc(Widget w, XtPointer client_data, XtPointer call_data)
@@ -38,35 +41,39 @@
 }
 
 static struct cmd_t commands[] = {
-    {"Phasers",		NULL,		0},
-    {"Torpedo",		NULL,		0},
-    {"Move",		NULL,		0},
-    {"Shields",		NULL,		0},
-    {"Dock",		noargs_proc,	0},
-    {"Damages",		noargs_proc,	0},
-    {"Chart",		noargs_proc,	0},
-    {"Impulse",		NULL,		0},
-    {"Rest",		NULL,		0},
-    {"Warp",		NULL,		0},
-    {"Score",		noargs_proc,	0},
-    {"Sensors",		noargs_proc,	OPTION_PLANETS},
-    {"Orbit",		noargs_proc,	OPTION_PLANETS},
-    {"Transport",	noargs_proc,	OPTION_PLANETS},
-    {"Mine",		noargs_proc,	OPTION_PLANETS},
-    {"Crystals",	noargs_proc,	OPTION_PLANETS},
-    {"Shuttle",		noargs_proc,	OPTION_PLANETS},
-    {"Planets",		noargs_proc,	OPTION_PLANETS},
-    {"Report",		noargs_proc,	0},
-    {"Computer",	noargs_proc,   	0},
-    {"Emexit",		noargs_proc,	0},
-    {"Probe",		NULL,		OPTION_PROBE},
-    {"Save",		NULL,		0},
-    {"Abandon",		noargs_proc,	0},
-    {"Destruct",	noargs_proc,	0},
-    {"Deathray",	noargs_proc,	0},
-    {"Mayday",		noargs_proc,	0},
-    {"Quit",		quit_proc,	0},
-    {"Help",		noargs_proc,	0},
+    {"Move",		NULL,		&navigation,	0},
+    {"Dock",		noargs_proc,	&navigation,	0},
+    {"Chart",		noargs_proc,	&navigation,	0},
+    {"Impulse",		NULL,		&navigation,	0},
+    {"Rest",		NULL,		&navigation,	0},
+    {"Warp",		NULL,		&navigation,	0},
+    {"Probe",		NULL,		&navigation,	OPTION_PROBE},
+
+    {"Phasers",		NULL,		&weapons,	0},
+    {"Torpedo",		NULL,		&weapons,	0},
+    {"Shields",		NULL,		&weapons,	0},
+    {"Damages",		noargs_proc,	&weapons,	0},
+    {"Abandon",		noargs_proc,	&weapons,	0},
+    {"Destruct",	noargs_proc,	&weapons,	0},
+    {"Deathray",	noargs_proc,	&weapons,	0},
+    {"Mayday",		noargs_proc,	&weapons,	0},
+
+    {"Score",		noargs_proc,	&status,	0},
+    {"Report",		noargs_proc,	&status,	0},
+    {"Computer",	noargs_proc,   	&status,	0},
+
+    {"Sensors",		noargs_proc,	&planets,	OPTION_PLANETS},
+    {"Orbit",		noargs_proc,	&planets,	OPTION_PLANETS},
+    {"Transport",	noargs_proc,	&planets,	OPTION_PLANETS},
+    {"Mine",		noargs_proc,	&planets,	OPTION_PLANETS},
+    {"Crystals",	noargs_proc,	&planets,	OPTION_PLANETS},
+    {"Shuttle",		noargs_proc,	&planets,	OPTION_PLANETS},
+    {"Planets",		noargs_proc,	&planets,	OPTION_PLANETS},
+
+    {"Emexit",		noargs_proc,	&misc,		0},
+    {"Save",		NULL,		&misc,		0},
+    {"Quit",		quit_proc,	&misc,		0},
+    {"Help",		noargs_proc,	&misc,		0},
 };
 
 int main(int argc, char **argv)
@@ -83,15 +90,36 @@
 				   XtNwidth, 400, XtNheight, 200,
 				   NULL);
     XtVaSetValues(text, XtNeditType,XawtextRead, XtNdisplayCaret,False, NULL);
-    /* The button panel */
-    buttons  = XtVaCreateManagedWidget("form", 
+    /* The button panels */
+    navigation  = XtVaCreateManagedWidget("navigation", 
 				       boxWidgetClass, form,
 				       XtNfromVert, text, 
 				       XtNorientation, XtorientHorizontal,
 				       NULL); 
+    weapons  = XtVaCreateManagedWidget("weapons", 
+				       boxWidgetClass, form,
+				       XtNfromVert, navigation, 
+				       XtNorientation, XtorientHorizontal,
+				       NULL); 
+    status   = XtVaCreateManagedWidget("status", 
+				       boxWidgetClass, form,
+				       XtNfromVert, weapons, 
+				       XtNorientation, XtorientHorizontal,
+				       NULL); 
+    planets  = XtVaCreateManagedWidget("planets", 
+				       boxWidgetClass, form,
+				       XtNfromVert, status, 
+				       XtNorientation, XtorientHorizontal,
+				       NULL); 
+    misc  = XtVaCreateManagedWidget("misc", 
+				       boxWidgetClass, form,
+				       XtNfromVert, planets, 
+				       XtNorientation, XtorientHorizontal,
+				       NULL); 
     for (cp = commands; cp < commands + sizeof(commands)/sizeof(commands[0]); cp++) {
 	cp->widget = XtVaCreateManagedWidget(cp->name, 
-					     commandWidgetClass, buttons, 
+					     commandWidgetClass, 
+					     *cp->parent, 
 					     XtNlabel, cp->name,
 					     NULL);
 	if (cp->callback)



From esr at mail.berlios.de  Thu Sep 14 01:52:16 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 14 Sep 2006 01:52:16 +0200
Subject: [Sst-commit-watch] r553 - trunk/src
Message-ID: <200609132352.k8DNqGic008224@sheep.berlios.de>

Author: esr
Date: 2006-09-14 01:52:07 +0200 (Thu, 14 Sep 2006)
New Revision: 553

Modified:
   trunk/src/xio.c
Log:
Get rid of some ugly borders.


Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-13 22:58:43 UTC (rev 552)
+++ trunk/src/xio.c	2006-09-13 23:52:07 UTC (rev 553)
@@ -11,6 +11,7 @@
 static XtAppContext app_context;
 static Widget toplevel, text, form; 
 static Widget navigation, weapons, status, planets, misc; 
+static Widget navlabel, weaplabel, statlabel, planlabel, misclabel;
 
 static String fallback[] = {
     /* text window resources */
@@ -96,26 +97,46 @@
 				       XtNfromVert, text, 
 				       XtNorientation, XtorientHorizontal,
 				       NULL); 
+    navlabel  = XtVaCreateManagedWidget("Navigation:   ", 
+					labelWidgetClass, navigation,
+					XtNborderWidth, 0,
+					NULL); 
     weapons  = XtVaCreateManagedWidget("weapons", 
 				       boxWidgetClass, form,
 				       XtNfromVert, navigation, 
 				       XtNorientation, XtorientHorizontal,
 				       NULL); 
+    weaplabel  = XtVaCreateManagedWidget("Weapons:      ", 
+					 labelWidgetClass, weapons,
+					 XtNborderWidth, 0,
+					 NULL); 
     status   = XtVaCreateManagedWidget("status", 
 				       boxWidgetClass, form,
 				       XtNfromVert, weapons, 
 				       XtNorientation, XtorientHorizontal,
 				       NULL); 
+    statlabel  = XtVaCreateManagedWidget("Status:       ", 
+					 labelWidgetClass, status,
+					 XtNborderWidth, 0,
+					 NULL); 
     planets  = XtVaCreateManagedWidget("planets", 
 				       boxWidgetClass, form,
 				       XtNfromVert, status, 
 				       XtNorientation, XtorientHorizontal,
 				       NULL); 
+    planlabel  = XtVaCreateManagedWidget("Planets:      ", 
+					 labelWidgetClass, planets,
+					 XtNborderWidth, 0,
+					 NULL); 
     misc  = XtVaCreateManagedWidget("misc", 
 				       boxWidgetClass, form,
 				       XtNfromVert, planets, 
 				       XtNorientation, XtorientHorizontal,
 				       NULL); 
+    misclabel  = XtVaCreateManagedWidget("Miscellaneous:", 
+					 labelWidgetClass, misc,
+					 XtNborderWidth, 0,
+					 NULL); 
     for (cp = commands; cp < commands + sizeof(commands)/sizeof(commands[0]); cp++) {
 	cp->widget = XtVaCreateManagedWidget(cp->name, 
 					     commandWidgetClass, 



From esr at mail.berlios.de  Thu Sep 14 04:39:29 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 14 Sep 2006 04:39:29 +0200
Subject: [Sst-commit-watch] r554 - trunk/src
Message-ID: <200609140239.k8E2dTcR026270@sheep.berlios.de>

Author: esr
Date: 2006-09-14 04:39:28 +0200 (Thu, 14 Sep 2006)
New Revision: 554

Modified:
   trunk/src/xio.c
Log:
More reasonably-sized windows.


Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-13 23:52:07 UTC (rev 553)
+++ trunk/src/xio.c	2006-09-14 02:39:28 UTC (rev 554)
@@ -77,6 +77,9 @@
     {"Help",		noargs_proc,	&misc,		0},
 };
 
+#define MAXWIDTH	640
+#define TEXTHEIGHT	200
+
 int main(int argc, char **argv)
 { 
     struct cmd_t *cp;
@@ -88,21 +91,23 @@
     form = XtVaCreateManagedWidget("form", formWidgetClass, toplevel, NULL);
     /* the command window */
     text = XtVaCreateManagedWidget("text", asciiTextWidgetClass, form, 
-				   XtNwidth, 400, XtNheight, 200,
+				   XtNwidth, MAXWIDTH, XtNheight, TEXTHEIGHT,
 				   NULL);
     XtVaSetValues(text, XtNeditType,XawtextRead, XtNdisplayCaret,False, NULL);
     /* The button panels */
     navigation  = XtVaCreateManagedWidget("navigation", 
-				       boxWidgetClass, form,
-				       XtNfromVert, text, 
-				       XtNorientation, XtorientHorizontal,
-				       NULL); 
+					  boxWidgetClass, form,
+					  XtNborderWidth, 0,
+					  XtNfromVert, text,
+					  XtNorientation, XtorientHorizontal,
+					  NULL); 
     navlabel  = XtVaCreateManagedWidget("Navigation:   ", 
 					labelWidgetClass, navigation,
 					XtNborderWidth, 0,
 					NULL); 
     weapons  = XtVaCreateManagedWidget("weapons", 
 				       boxWidgetClass, form,
+				       XtNborderWidth, 0,
 				       XtNfromVert, navigation, 
 				       XtNorientation, XtorientHorizontal,
 				       NULL); 
@@ -112,6 +117,7 @@
 					 NULL); 
     status   = XtVaCreateManagedWidget("status", 
 				       boxWidgetClass, form,
+				       XtNborderWidth, 0,
 				       XtNfromVert, weapons, 
 				       XtNorientation, XtorientHorizontal,
 				       NULL); 
@@ -121,6 +127,7 @@
 					 NULL); 
     planets  = XtVaCreateManagedWidget("planets", 
 				       boxWidgetClass, form,
+				       XtNborderWidth, 0,
 				       XtNfromVert, status, 
 				       XtNorientation, XtorientHorizontal,
 				       NULL); 
@@ -130,6 +137,7 @@
 					 NULL); 
     misc  = XtVaCreateManagedWidget("misc", 
 				       boxWidgetClass, form,
+				       XtNborderWidth, 0,
 				       XtNfromVert, planets, 
 				       XtNorientation, XtorientHorizontal,
 				       NULL); 



From esr at mail.berlios.de  Thu Sep 14 04:58:41 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 14 Sep 2006 04:58:41 +0200
Subject: [Sst-commit-watch] r555 - trunk/src
Message-ID: <200609140258.k8E2wf7c028012@sheep.berlios.de>

Author: esr
Date: 2006-09-14 04:58:40 +0200 (Thu, 14 Sep 2006)
New Revision: 555

Modified:
   trunk/src/xio.c
Log:
We know how to extract the button name within the callback.


Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-14 02:39:28 UTC (rev 554)
+++ trunk/src/xio.c	2006-09-14 02:58:40 UTC (rev 555)
@@ -39,6 +39,7 @@
 /* use this for commands that take no arguments */
 {
     /* currently a stub */
+    printf("Button %s pressed\n", XtName(w));
 }
 
 static struct cmd_t commands[] = {
@@ -80,7 +81,7 @@
 #define MAXWIDTH	640
 #define TEXTHEIGHT	200
 
-int main(int argc, char **argv)
+static void instantiate_main(int argc, char **argv)
 { 
     struct cmd_t *cp;
 
@@ -158,5 +159,10 @@
     XtAppMainLoop(app_context);
     /* loop may be interrupted */
     XtDestroyApplicationContext(app_context);
+}
+
+int main(int argc, char **argv)
+{
+    instantiate_main(argc, argv);
     exit(0);
 }



From esr at mail.berlios.de  Thu Sep 14 05:57:32 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 14 Sep 2006 05:57:32 +0200
Subject: [Sst-commit-watch] r556 - trunk/src
Message-ID: <200609140357.k8E3vW4Y000743@sheep.berlios.de>

Author: esr
Date: 2006-09-14 05:57:32 +0200 (Thu, 14 Sep 2006)
New Revision: 556

Modified:
   trunk/src/xio.c
Log:
Mergeed "Status" section into "Misc".


Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-14 02:58:40 UTC (rev 555)
+++ trunk/src/xio.c	2006-09-14 03:57:32 UTC (rev 556)
@@ -10,8 +10,8 @@
 
 static XtAppContext app_context;
 static Widget toplevel, text, form; 
-static Widget navigation, weapons, status, planets, misc; 
-static Widget navlabel, weaplabel, statlabel, planlabel, misclabel;
+static Widget navigation, weapons, planets, misc; 
+static Widget navlabel, weaplabel, planlabel, misclabel;
 
 static String fallback[] = {
     /* text window resources */
@@ -60,10 +60,6 @@
     {"Deathray",	noargs_proc,	&weapons,	0},
     {"Mayday",		noargs_proc,	&weapons,	0},
 
-    {"Score",		noargs_proc,	&status,	0},
-    {"Report",		noargs_proc,	&status,	0},
-    {"Computer",	noargs_proc,   	&status,	0},
-
     {"Sensors",		noargs_proc,	&planets,	OPTION_PLANETS},
     {"Orbit",		noargs_proc,	&planets,	OPTION_PLANETS},
     {"Transport",	noargs_proc,	&planets,	OPTION_PLANETS},
@@ -72,7 +68,9 @@
     {"Shuttle",		noargs_proc,	&planets,	OPTION_PLANETS},
     {"Planets",		noargs_proc,	&planets,	OPTION_PLANETS},
 
-    {"Emexit",		noargs_proc,	&misc,		0},
+    {"Score",		noargs_proc,	&misc,		0},
+    {"Report",		noargs_proc,	&misc,		0},
+    {"Computer",	noargs_proc,   	&misc,		0},
     {"Save",		NULL,		&misc,		0},
     {"Quit",		quit_proc,	&misc,		0},
     {"Help",		noargs_proc,	&misc,		0},
@@ -116,22 +114,12 @@
 					 labelWidgetClass, weapons,
 					 XtNborderWidth, 0,
 					 NULL); 
-    status   = XtVaCreateManagedWidget("status", 
+    planets  = XtVaCreateManagedWidget("planets", 
 				       boxWidgetClass, form,
 				       XtNborderWidth, 0,
 				       XtNfromVert, weapons, 
 				       XtNorientation, XtorientHorizontal,
 				       NULL); 
-    statlabel  = XtVaCreateManagedWidget("Status:       ", 
-					 labelWidgetClass, status,
-					 XtNborderWidth, 0,
-					 NULL); 
-    planets  = XtVaCreateManagedWidget("planets", 
-				       boxWidgetClass, form,
-				       XtNborderWidth, 0,
-				       XtNfromVert, status, 
-				       XtNorientation, XtorientHorizontal,
-				       NULL); 
     planlabel  = XtVaCreateManagedWidget("Planets:      ", 
 					 labelWidgetClass, planets,
 					 XtNborderWidth, 0,



From esr at mail.berlios.de  Thu Sep 14 06:27:44 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 14 Sep 2006 06:27:44 +0200
Subject: [Sst-commit-watch] r557 - trunk/src
Message-ID: <200609140427.k8E4RiH3003812@sheep.berlios.de>

Author: esr
Date: 2006-09-14 06:27:44 +0200 (Thu, 14 Sep 2006)
New Revision: 557

Modified:
   trunk/src/xio.c
Log:
Move as much as possible into fallback resources.


Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-14 03:57:32 UTC (rev 556)
+++ trunk/src/xio.c	2006-09-14 04:27:44 UTC (rev 557)
@@ -17,6 +17,24 @@
     /* text window resources */
     "*text.resizable: true",
     "*text.resize: ResizeBoth",
+    "*text.width: 640",
+    "*text.height: 200",
+    "*navigation.fromVert: text",
+    "*navigation.borderWidth: 0",
+    "*navlabel.label: Navigation:   ",
+    "*navlabel.borderWidth: 0",
+    "*weapons.fromVert: navigation",
+    "*weapons.borderWidth: 0",
+    "*weaplabel.label: Weapons:      ",
+    "*weaplabel.borderWidth: 0",
+    "*planets.fromVert: weapons",
+    "*planets.borderWidth: 0",
+    "*planlabel.label: Planets:      ",
+    "*planlabel.borderWidth: 0",
+    "*misc.fromVert: planets",
+    "*misc.borderWidth: 0",
+    "*misclabel.label: Miscellaneos: ",
+    "*misclabel.borderWidth: 0",
     NULL,
 };
 
@@ -76,9 +94,6 @@
     {"Help",		noargs_proc,	&misc,		0},
 };
 
-#define MAXWIDTH	640
-#define TEXTHEIGHT	200
-
 static void instantiate_main(int argc, char **argv)
 { 
     struct cmd_t *cp;
@@ -89,50 +104,37 @@
 				    XtNallowShellResize, True, NULL);
     form = XtVaCreateManagedWidget("form", formWidgetClass, toplevel, NULL);
     /* the command window */
-    text = XtVaCreateManagedWidget("text", asciiTextWidgetClass, form, 
-				   XtNwidth, MAXWIDTH, XtNheight, TEXTHEIGHT,
-				   NULL);
+    text = XtVaCreateManagedWidget("text", asciiTextWidgetClass, form, NULL);
     XtVaSetValues(text, XtNeditType,XawtextRead, XtNdisplayCaret,False, NULL);
     /* The button panels */
     navigation  = XtVaCreateManagedWidget("navigation", 
 					  boxWidgetClass, form,
-					  XtNborderWidth, 0,
-					  XtNfromVert, text,
 					  XtNorientation, XtorientHorizontal,
 					  NULL); 
-    navlabel  = XtVaCreateManagedWidget("Navigation:   ", 
+    navlabel  = XtVaCreateManagedWidget("navlabel", 
 					labelWidgetClass, navigation,
-					XtNborderWidth, 0,
 					NULL); 
     weapons  = XtVaCreateManagedWidget("weapons", 
 				       boxWidgetClass, form,
-				       XtNborderWidth, 0,
-				       XtNfromVert, navigation, 
 				       XtNorientation, XtorientHorizontal,
 				       NULL); 
-    weaplabel  = XtVaCreateManagedWidget("Weapons:      ", 
+    weaplabel  = XtVaCreateManagedWidget("weaplabel", 
 					 labelWidgetClass, weapons,
-					 XtNborderWidth, 0,
 					 NULL); 
     planets  = XtVaCreateManagedWidget("planets", 
 				       boxWidgetClass, form,
-				       XtNborderWidth, 0,
-				       XtNfromVert, weapons, 
 				       XtNorientation, XtorientHorizontal,
 				       NULL); 
-    planlabel  = XtVaCreateManagedWidget("Planets:      ", 
+    planlabel  = XtVaCreateManagedWidget("planlabel", 
 					 labelWidgetClass, planets,
 					 XtNborderWidth, 0,
 					 NULL); 
     misc  = XtVaCreateManagedWidget("misc", 
 				       boxWidgetClass, form,
-				       XtNborderWidth, 0,
-				       XtNfromVert, planets, 
 				       XtNorientation, XtorientHorizontal,
 				       NULL); 
-    misclabel  = XtVaCreateManagedWidget("Miscellaneous:", 
+    misclabel  = XtVaCreateManagedWidget("misclabel", 
 					 labelWidgetClass, misc,
-					 XtNborderWidth, 0,
 					 NULL); 
     for (cp = commands; cp < commands + sizeof(commands)/sizeof(commands[0]); cp++) {
 	cp->widget = XtVaCreateManagedWidget(cp->name, 



From esr at mail.berlios.de  Thu Sep 14 10:55:38 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 14 Sep 2006 10:55:38 +0200
Subject: [Sst-commit-watch] r558 - trunk/src
Message-ID: <200609140855.k8E8tcSj032746@sheep.berlios.de>

Author: esr
Date: 2006-09-14 10:55:38 +0200 (Thu, 14 Sep 2006)
New Revision: 558

Modified:
   trunk/src/xio.c
Log:
Make the text window editable.


Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-14 04:27:44 UTC (rev 557)
+++ trunk/src/xio.c	2006-09-14 08:55:38 UTC (rev 558)
@@ -14,7 +14,6 @@
 static Widget navlabel, weaplabel, planlabel, misclabel;
 
 static String fallback[] = {
-    /* text window resources */
     "*text.resizable: true",
     "*text.resize: ResizeBoth",
     "*text.width: 640",
@@ -33,7 +32,7 @@
     "*planlabel.borderWidth: 0",
     "*misc.fromVert: planets",
     "*misc.borderWidth: 0",
-    "*misclabel.label: Miscellaneos: ",
+    "*misclabel.label: Miscellaneous:",
     "*misclabel.borderWidth: 0",
     NULL,
 };
@@ -104,8 +103,11 @@
 				    XtNallowShellResize, True, NULL);
     form = XtVaCreateManagedWidget("form", formWidgetClass, toplevel, NULL);
     /* the command window */
-    text = XtVaCreateManagedWidget("text", asciiTextWidgetClass, form, NULL);
-    XtVaSetValues(text, XtNeditType,XawtextRead, XtNdisplayCaret,False, NULL);
+    text = XtVaCreateManagedWidget("text", 
+				   asciiTextWidgetClass, form,
+				   XtNeditType, XawtextEdit,
+				   XtNdisplayCaret,False,
+				   NULL);
     /* The button panels */
     navigation  = XtVaCreateManagedWidget("navigation", 
 					  boxWidgetClass, form,



From esr at mail.berlios.de  Thu Sep 14 20:01:41 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 14 Sep 2006 20:01:41 +0200
Subject: [Sst-commit-watch] r559 - trunk/src
Message-ID: <200609141801.k8EI1foA003351@sheep.berlios.de>

Author: esr
Date: 2006-09-14 20:01:40 +0200 (Thu, 14 Sep 2006)
New Revision: 559

Modified:
   trunk/src/xio.c
Log:
More settings into fallback.


Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-14 08:55:38 UTC (rev 558)
+++ trunk/src/xio.c	2006-09-14 18:01:40 UTC (rev 559)
@@ -18,6 +18,10 @@
     "*text.resize: ResizeBoth",
     "*text.width: 640",
     "*text.height: 200",
+    "*text.autoFill: True",
+    "*text.scrollVertical: Always",
+    "*text.scrollHorizontal: WhenNeeded",
+    "*text.displayCaret: True",
     "*navigation.fromVert: text",
     "*navigation.borderWidth: 0",
     "*navlabel.label: Navigation:   ",
@@ -106,7 +110,6 @@
     text = XtVaCreateManagedWidget("text", 
 				   asciiTextWidgetClass, form,
 				   XtNeditType, XawtextEdit,
-				   XtNdisplayCaret,False,
 				   NULL);
     /* The button panels */
     navigation  = XtVaCreateManagedWidget("navigation", 



From esr at mail.berlios.de  Thu Sep 14 20:25:07 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 14 Sep 2006 20:25:07 +0200
Subject: [Sst-commit-watch] r560 - trunk/src
Message-ID: <200609141825.k8EIP7oH006774@sheep.berlios.de>

Author: esr
Date: 2006-09-14 20:25:06 +0200 (Thu, 14 Sep 2006)
New Revision: 560

Modified:
   trunk/src/xio.c
Log:
Text append looks like it should work, but it core-dumps.


Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-14 18:01:40 UTC (rev 559)
+++ trunk/src/xio.c	2006-09-14 18:25:06 UTC (rev 560)
@@ -8,6 +8,8 @@
 #include <X11/Xaw/AsciiText.h>
 #include "sst.h"
 
+#undef length	/* ugh -- must get rid of ugly #defines */
+
 static XtAppContext app_context;
 static Widget toplevel, text, form; 
 static Widget navigation, weapons, planets, misc; 
@@ -56,10 +58,25 @@
     exit (0);
 }
 
+static void text_append_to(Widget w, String str)
+/* append text to a specified text widget */
+{
+    XawTextBlock txtblk;
+    XawTextPosition textend = XawTextGetInsertionPoint(w);
+
+    txtblk.ptr = str;
+    txtblk.length = strlen(str);
+    txtblk.firstPos = 0;
+    txtblk.format = FMT8BIT;
+
+    XawTextReplace(w, textend, textend, &txtblk);
+}
+
 static void noargs_proc(Widget w, XtPointer client_data, XtPointer call_data)
 /* use this for commands that take no arguments */
 {
     /* currently a stub */
+    text_append_to(w, XtName(w));
     printf("Button %s pressed\n", XtName(w));
 }
 



From esr at mail.berlios.de  Thu Sep 14 22:58:49 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 14 Sep 2006 22:58:49 +0200
Subject: [Sst-commit-watch] r562 - trunk/src
Message-ID: <200609142058.k8EKwnKo027201@sheep.berlios.de>

Author: esr
Date: 2006-09-14 22:58:49 +0200 (Thu, 14 Sep 2006)
New Revision: 562

Modified:
   trunk/src/io.c
   trunk/src/sst.h
Log:
Various declaration cleanups.


Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-09-14 20:42:27 UTC (rev 561)
+++ trunk/src/io.c	2006-09-14 20:58:49 UTC (rev 562)
@@ -11,6 +11,12 @@
 static int rows, linecount;	/* for paging */
 
 WINDOW *curwnd;
+WINDOW *fullscreen_window;
+WINDOW *srscan_window;
+WINDOW *report_window;
+WINDOW *lrscan_window;
+WINDOW *message_window;
+WINDOW *prompt_window;
 
 static void outro(void)
 /* wrap up, either normally or due to signal */

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-14 20:42:27 UTC (rev 561)
+++ trunk/src/sst.h	2006-09-14 20:58:49 UTC (rev 562)
@@ -144,15 +144,8 @@
 #define FDSPROB 8   // Move deep space probe
 #define NEVENTS (9)
 
-// Scalar variables that are needed for freezing the game
-// are placed in a structure. #defines are used to access by their
-// original names. Gee, I could have done this with the d structure,
-// but I just didn't think of it back when I started.
-
 #define SSTMAGIC	"SST2.0\n"
 
-extern WINDOW *curwnd;
-
 struct game {
     char magic[sizeof(SSTMAGIC)];
     unsigned long options;
@@ -403,12 +396,13 @@
 #define SCAN_STATUS		3
 #define SCAN_NO_LEFTSIDE	4
 
-WINDOW *fullscreen_window;
-WINDOW *srscan_window;
-WINDOW *report_window;
-WINDOW *lrscan_window;
-WINDOW *message_window;
-WINDOW *prompt_window;
+extern WINDOW *curwnd;
+extern WINDOW *fullscreen_window;
+extern WINDOW *srscan_window;
+extern WINDOW *report_window;
+extern WINDOW *lrscan_window;
+extern WINDOW *message_window;
+extern WINDOW *prompt_window;
 
 extern void clreol(void);
 extern void clrscr(void);
@@ -421,6 +415,4 @@
    DARKGRAY, LIGHTBLUE, LIGHTGREEN, LIGHTCYAN, LIGHTRED, LIGHTMAGENTA, YELLOW, WHITE
 };
 
-#define DAMAGED	128	/* marker for damaged ship in starmap */
-
 #endif



From esr at mail.berlios.de  Thu Sep 14 22:42:28 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 14 Sep 2006 22:42:28 +0200
Subject: [Sst-commit-watch] r561 - trunk/src
Message-ID: <200609142042.k8EKgSNv025348@sheep.berlios.de>

Author: esr
Date: 2006-09-14 22:42:27 +0200 (Thu, 14 Sep 2006)
New Revision: 561

Modified:
   trunk/src/Makefile.am
   trunk/src/Makefile.in
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/finish.c
   trunk/src/io.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
   trunk/src/xio.c
Log:
Eliminate nasty macro holdovers.  All game structure members are now referred
to by full name,

Also, one more minor step in making xio work.


Modified: trunk/src/Makefile.am
===================================================================
--- trunk/src/Makefile.am	2006-09-14 18:25:06 UTC (rev 560)
+++ trunk/src/Makefile.am	2006-09-14 20:42:27 UTC (rev 561)
@@ -19,3 +19,7 @@
 EXTRA_DIST = \
 	sst.h \
 	sstlinux.h
+
+# Experimental XaW code, not yet integrated with the game
+xio: xio.o
+	gcc xio.c -lXaw3d -o xio

Modified: trunk/src/Makefile.in
===================================================================
--- trunk/src/Makefile.in	2006-09-14 18:25:06 UTC (rev 560)
+++ trunk/src/Makefile.in	2006-09-14 20:42:27 UTC (rev 561)
@@ -467,6 +467,10 @@
 	tags uninstall uninstall-am uninstall-binPROGRAMS \
 	uninstall-info-am
 
+
+# Experimental XaW code, not yet integrated with the game
+xio: xio.o
+	gcc xio.c -lXaw3d -o xio
 # Tell versions [3.59,3.63) of GNU make to not export all variables.
 # Otherwise a system limit (for SysV at least) may be exceeded.
 .NOEXPORT:

Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-14 18:25:06 UTC (rev 560)
+++ trunk/src/ai.c	2006-09-14 20:42:27 UTC (rev 561)
@@ -4,8 +4,8 @@
 {
     int iqx, iqy, l;
 
-    iqx = quadx+(lookx+(QUADSIZE-1))/QUADSIZE - 1;
-    iqy = quady+(looky+(QUADSIZE-1))/QUADSIZE - 1;
+    iqx = game.quadx+(lookx+(QUADSIZE-1))/QUADSIZE - 1;
+    iqy = game.quady+(looky+(QUADSIZE-1))/QUADSIZE - 1;
     if (!VALID_QUADRANT(iqx,iqy) ||
 	game.state.galaxy[iqx][iqy].supernova ||
 	game.state.galaxy[iqx][iqy].klingons > 8)
@@ -17,7 +17,7 @@
 	    for_commanders(l)
 		if (game.state.cx[l]==iqx && game.state.cy[l]==iqy) return 0;
 	    /* refuse to leave if currently attacking starbase */
-	    if (batx==quadx && baty==quady) return 0;
+	    if (game.batx==game.quadx && game.baty==game.quady) return 0;
 	}
 	/* don't leave if over 1000 units of energy */
 	if (game.kpower[loccom] > 1000.) return 0;
@@ -25,29 +25,29 @@
     /* print escape message and move out of quadrant.
        We know this if either short or long range sensors are working */
     if (game.damage[DSRSENS] == 0.0 || game.damage[DLRSENS] == 0.0 ||
-	condit == IHDOCKED) {
+	game.condit == IHDOCKED) {
 	crmena(1, ienm, 2, game.kx[loccom], game.ky[loccom]);
 	prout(" escapes to %s (and regains strength).",
 	      cramlc(quadrant, iqx, iqy));
     }
     /* handle local matters related to escape */
     game.quad[game.kx[loccom]][game.ky[loccom]] = IHDOT;
-    game.kx[loccom] = game.kx[nenhere];
-    game.ky[loccom] = game.ky[nenhere];
-    game.kavgd[loccom] = game.kavgd[nenhere];
-    game.kpower[loccom] = game.kpower[nenhere];
-    game.kdist[loccom] = game.kdist[nenhere];
-    klhere--;
-    nenhere--;
-    if (condit != IHDOCKED) newcnd();
+    game.kx[loccom] = game.kx[game.nenhere];
+    game.ky[loccom] = game.ky[game.nenhere];
+    game.kavgd[loccom] = game.kavgd[game.nenhere];
+    game.kpower[loccom] = game.kpower[game.nenhere];
+    game.kdist[loccom] = game.kdist[game.nenhere];
+    game.klhere--;
+    game.nenhere--;
+    if (game.condit != IHDOCKED) newcnd();
     /* Handle global matters related to escape */
-    game.state.galaxy[quadx][quady].klingons--;
+    game.state.galaxy[game.quadx][game.quady].klingons--;
     game.state.galaxy[iqx][iqy].klingons++;
     if (ienm==IHS) {
-	ishere=0;
-	iscate=0;
-	ientesc=0;
-	isatb=0;
+	game.ishere=0;
+	game.iscate=0;
+	game.ientesc=0;
+	game.isatb=0;
 	game.future[FSCMOVE]=0.2777+game.state.date;
 	game.future[FSCDBAS]=FOREVER;
 	game.state.isx=iqx;
@@ -55,13 +55,13 @@
     }
     else {
 	for_commanders(l) {
-	    if (game.state.cx[l]==quadx && game.state.cy[l]==quady) {
+	    if (game.state.cx[l]==game.quadx && game.state.cy[l]==game.quady) {
 		game.state.cx[l]=iqx;
 		game.state.cy[l]=iqy;
 		break;
 	    }
 	}
-	comhere = 0;
+	game.comhere = 0;
     }
     return 1; /* success */
 }
@@ -74,10 +74,10 @@
     int krawlx, krawly;
     int success;
     int attempts;
-    /* This should probably be just comhere + ishere */
-    int nbaddys = skill >= SKILL_EXPERT ?
-	(int)((comhere*2 + ishere*2+klhere*1.23+irhere*1.5)/2.0):
-	(comhere + ishere);
+    /* This should probably be just game.comhere + game.ishere */
+    int nbaddys = game.skill >= SKILL_EXPERT ?
+	(int)((game.comhere*2 + game.ishere*2+game.klhere*1.23+game.irhere*1.5)/2.0):
+	(game.comhere + game.ishere);
     double dist1, forces;
 
     dist1 = game.kdist[loccom];
@@ -85,7 +85,7 @@
 
     /* If SC, check with spy to see if should hi-tail it */
     if (ienm==IHS &&
-	(game.kpower[loccom] <= 500.0 || (condit==IHDOCKED && game.damage[DPHOTON]==0))) {
+	(game.kpower[loccom] <= 500.0 || (game.condit==IHDOCKED && game.damage[DPHOTON]==0))) {
 	irun = 1;
 	motion = -QUADSIZE;
     }
@@ -123,39 +123,39 @@
  advantage with a 650 advantage being to hold ground, 800 to move forward
  1, 950 for two, 150 for back 4, etc. Variance of 100.
 
- If docked, is reduced by roughly 1.75*skill, generally forcing a
+ If docked, is reduced by roughly 1.75*game.skill, generally forcing a
  retreat, especially at high skill levels.
 
  *  Motion is limited to skill level, except for SC hi-tailing it out.
  */
 
-	forces = game.kpower[loccom]+100.0*nenhere+400*(nbaddys-1);
-	if (shldup==0) forces += 1000; /* Good for enemy if shield is down! */
+	forces = game.kpower[loccom]+100.0*game.nenhere+400*(nbaddys-1);
+	if (game.shldup==0) forces += 1000; /* Good for enemy if shield is down! */
 	if (game.damage[DPHASER] == 0.0 || game.damage[DPHOTON] == 0.0) {
 	    if (game.damage[DPHASER] != 0) /* phasers damaged */
 		forces += 300.0;
 	    else
-		forces -= 0.2*(energy - 2500.0);
+		forces -= 0.2*(game.energy - 2500.0);
 	    if (game.damage[DPHOTON] != 0) /* photon torpedoes damaged */
 		forces += 300.0;
 	    else
-		forces -= 50.0*torps;
+		forces -= 50.0*game.torps;
 	}
 	else {
 	    /* phasers and photon tubes both out! */
 	    forces += 1000.0;
 	}
 	motion = 0;
-	if (forces <= 1000.0 && condit != IHDOCKED) /* Typical situation */
+	if (forces <= 1000.0 && game.condit != IHDOCKED) /* Typical situation */
 	    motion = ((forces+200.0*Rand())/150.0) - 5.0;
 	else {
 	    if (forces > 1000.0) /* Very strong -- move in for kill */
 		motion = (1.0-square(Rand()))*dist1 + 1.0;
-	    if (condit==IHDOCKED && (game.options & OPTION_BASE)) /* protected by base -- back off ! */
-		motion -= skill*(2.0-square(Rand()));
+	    if (game.condit==IHDOCKED && (game.options & OPTION_BASE)) /* protected by base -- back off ! */
+		motion -= game.skill*(2.0-square(Rand()));
 	}
 #ifdef DEBUG
-	if (idebug) {
+	if (game.idebug) {
 	    proutn("MOTION = %1.2f", motion);
 	    proutn("  FORCES = %1,2f", forces);
 	}
@@ -163,7 +163,7 @@
 	/* don't move if no motion */
 	if (motion==0) return;
 	/* Limit motion according to skill */
-	if (abs(motion) > skill) motion = (motion < 0) ? -skill : skill;
+	if (abs(motion) > game.skill) motion = (motion < 0) ? -game.skill : game.skill;
     }
     /* calculate preferred number of steps */
     nsteps = motion < 0 ? -motion : motion;
@@ -171,15 +171,15 @@
     if (nsteps > QUADSIZE) nsteps = QUADSIZE; /* This shouldn't be necessary */
     if (nsteps < 1) nsteps = 1; /* This shouldn't be necessary */
 #ifdef DEBUG
-    if (idebug) {
+    if (game.idebug) {
 	prout("NSTEPS = %d", nsteps);
     }
 #endif
     /* Compute preferred values of delta X and Y */
-    mx = sectx - comx;
-    my = secty - comy;
+    mx = game.sectx - comx;
+    my = game.secty - comy;
     if (2.0 * abs(mx) < abs(my)) mx = 0;
-    if (2.0 * abs(my) < abs(sectx-comx)) my = 0;
+    if (2.0 * abs(my) < abs(game.sectx-comx)) my = 0;
     if (mx != 0) mx = mx*motion < 0 ? -1 : 1;
     if (my != 0) my = my*motion < 0 ? -1 : 1;
     nextx = comx;
@@ -187,7 +187,7 @@
     /* main move loop */
     for (ll = 0; ll < nsteps; ll++) {
 #ifdef DEBUG
-	if (idebug) {
+	if (game.idebug) {
 	    prout("%d", ll+1);
 	}
 #endif
@@ -215,7 +215,7 @@
 	    }
 	    else if ((game.options & OPTION_RAMMING) && game.quad[lookx][looky] != IHDOT) {
 		/* See if we should ram ship */
-		if (game.quad[lookx][looky] == ship &&
+		if (game.quad[lookx][looky] == game.ship &&
 		    (ienm == IHC || ienm == IHS)) {
 		    ram(1, ienm, comx, comy);
 		    return;
@@ -236,7 +236,7 @@
 	    nextx = lookx;
 	    nexty = looky;
 #ifdef DEBUG
-	    if (idebug) {
+	    if (game.idebug) {
 		prout(cramlc(neither, nextx, nexty));
 	    }
 #endif
@@ -251,8 +251,8 @@
 	game.kx[loccom] = nextx;
 	game.ky[loccom] = nexty;
 	game.kdist[loccom] = game.kavgd[loccom] =
-	    sqrt(square(sectx-nextx)+square(secty-nexty));
-	if (game.damage[DSRSENS] == 0 || condit == IHDOCKED) {
+	    sqrt(square(game.sectx-nextx)+square(game.secty-nexty));
+	if (game.damage[DSRSENS] == 0 || game.condit == IHDOCKED) {
 	    proutn("***");
 	    cramen(ienm);
 	    proutn(" from %s", cramlc(2, comx, comy));
@@ -268,12 +268,12 @@
     int ix, iy, i;
 
 #ifdef DEBUG
-    if (idebug) prout("MOVCOM");
+    if (game.idebug) prout("MOVCOM");
 #endif
 
     /* Figure out which Klingon is the commander (or Supercommander)
        and do move */
-    if (comhere) 
+    if (game.comhere) 
 	for_local_enemies(i) {
 	    ix = game.kx[i];
 	    iy = game.ky[i];
@@ -282,7 +282,7 @@
 		break;
 	    }
 	}
-    if (ishere) 
+    if (game.ishere) 
 	for_local_enemies(i) {
 	    ix = game.kx[i];
 	    iy = game.ky[i];
@@ -294,7 +294,7 @@
     /* if skill level is high, move other Klingons and Romulans too!
        Move these last so they can base their actions on what the
        commander(s) do. */
-    if (skill >= SKILL_EXPERT && (game.options & OPTION_MVBADDY)) 
+    if (game.skill >= SKILL_EXPERT && (game.options & OPTION_MVBADDY)) 
 	for_local_enemies(i) {
 	    ix = game.kx[i];
 	    iy = game.ky[i];
@@ -309,7 +309,7 @@
 {
     int i;
 
-    if ((iqx==quadx && iqy==quady) ||
+    if ((iqx==game.quadx && iqy==game.quady) ||
 	!VALID_QUADRANT(iqx, iqy) ||
 	game.state.galaxy[iqx][iqy].supernova ||
 	game.state.galaxy[iqx][iqy].klingons > 8) 
@@ -319,40 +319,40 @@
 	for_starbases(i)
 	    if (game.state.baseqx[i]==iqx && game.state.baseqy[i]==iqy) return 1;
     }
-    if (justin && !iscate) return 1;
+    if (game.justin && !game.iscate) return 1;
     /* do the move */
     game.state.galaxy[game.state.isx][game.state.isy].klingons--;
     game.state.isx = iqx;
     game.state.isy = iqy;
     game.state.galaxy[game.state.isx][game.state.isy].klingons++;
-    if (ishere) {
+    if (game.ishere) {
 	/* SC has scooted, Remove him from current quadrant */
-	iscate=0;
-	isatb=0;
-	ishere=0;
-	ientesc=0;
+	game.iscate=0;
+	game.isatb=0;
+	game.ishere=0;
+	game.ientesc=0;
 	game.future[FSCDBAS]=FOREVER;
 	for_local_enemies(i) 
 	    if (game.quad[game.kx[i]][game.ky[i]] == IHS) break;
 	game.quad[game.kx[i]][game.ky[i]] = IHDOT;
-	game.kx[i] = game.kx[nenhere];
-	game.ky[i] = game.ky[nenhere];
-	game.kdist[i] = game.kdist[nenhere];
-	game.kavgd[i] = game.kavgd[nenhere];
-	game.kpower[i] = game.kpower[nenhere];
-	klhere--;
-	nenhere--;
-	if (condit!=IHDOCKED) newcnd();
+	game.kx[i] = game.kx[game.nenhere];
+	game.ky[i] = game.ky[game.nenhere];
+	game.kdist[i] = game.kdist[game.nenhere];
+	game.kavgd[i] = game.kavgd[game.nenhere];
+	game.kpower[i] = game.kpower[game.nenhere];
+	game.klhere--;
+	game.nenhere--;
+	if (game.condit!=IHDOCKED) newcnd();
 	sortkl();
     }
     /* check for a helpful planet */
-    for (i = 0; i < inplan; i++) {
+    for (i = 0; i < game.inplan; i++) {
 	if (game.state.plnets[i].x==game.state.isx && game.state.plnets[i].y==game.state.isy &&
 	    game.state.plnets[i].crystals == 1) {
 	    /* destroy the planet */
 	    DESTROY(&game.state.plnets[i]);
 	    game.state.galaxy[game.state.isx][game.state.isy].planets -= 1;
-	    if (game.damage[DRADIO] == 0.0 || condit == IHDOCKED) {
+	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED) {
 		if (*ipage==0) pause_game(1);
 		*ipage = 1;
 		prout("Lt. Uhura-  \"Captain, Starfleet Intelligence reports");
@@ -375,20 +375,20 @@
     double bdist[BASEMAX+1];
     int flag;
 #ifdef DEBUG
-    if (idebug) prout("SCOM");
+    if (game.idebug) prout("SCOM");
 #endif
 
     /* Decide on being active or passive */
-    flag = ((NKILLC+NKILLK)/(game.state.date+0.01-indate) < 0.1*skill*(skill+1.0) ||
-	    (game.state.date-indate) < 3.0);
-    if (iscate==0 && flag) {
+    flag = ((NKILLC+NKILLK)/(game.state.date+0.01-game.indate) < 0.1*game.skill*(game.skill+1.0) ||
+	    (game.state.date-game.indate) < 3.0);
+    if (game.iscate==0 && flag) {
 	/* compute move away from Enterprise */
-	ideltax = game.state.isx-quadx;
-	ideltay = game.state.isy-quady;
+	ideltax = game.state.isx-game.quadx;
+	ideltay = game.state.isy-game.quady;
 	if (sqrt(ideltax*(double)ideltax+ideltay*(double)ideltay) > 2.0) {
 	    /* circulate in space */
-	    ideltax = game.state.isy-quady;
-	    ideltay = quadx-game.state.isx;
+	    ideltax = game.state.isy-game.quady;
+	    ideltay = game.quadx-game.state.isx;
 	}
     }
     else {
@@ -432,8 +432,8 @@
 	    i = basetbl[i2];	/* bug in original had it not finding nearest*/
 	    ibqx = game.state.baseqx[i];
 	    ibqy = game.state.baseqy[i];
-	    if ((ibqx == quadx && ibqy == quady) ||
-		(ibqx == batx && ibqy == baty) ||
+	    if ((ibqx == game.quadx && ibqy == game.quady) ||
+		(ibqx == game.batx && ibqy == game.baty) ||
 		game.state.galaxy[ibqx][ibqy].supernova ||
 		game.state.galaxy[ibqx][ibqy].klingons > 8) 
 		continue;
@@ -504,17 +504,17 @@
     else for_starbases(i) {
 	ibqx = game.state.baseqx[i];
 	ibqy = game.state.baseqy[i];
-	if (ibqx==game.state.isx && ibqy == game.state.isy && game.state.isx != batx && game.state.isy != baty) {
+	if (ibqx==game.state.isx && ibqy == game.state.isy && game.state.isx != game.batx && game.state.isy != game.baty) {
 	    /* attack the base */
 	    if (flag) return; /* no, don't attack base! */
-	    iseenit = 0;
-	    isatb=1;
+	    game.iseenit = 0;
+	    game.isatb=1;
 	    game.future[FSCDBAS] = game.state.date + 1.0 +2.0*Rand();
 	    if (game.future[FCDBAS] < FOREVER) game.future[FSCDBAS] +=
 		game.future[FCDBAS]-game.state.date;
-	    if (game.damage[DRADIO] > 0 && condit != IHDOCKED)
+	    if (game.damage[DRADIO] > 0 && game.condit != IHDOCKED)
 		return; /* no warning */
-	    iseenit = 1;
+	    game.iseenit = 1;
 	    if (*ipage == 0)  pause_game(1);
 	    *ipage=1;
 	    proutn("Lt. Uhura-  \"Captain, the starbase in ");
@@ -523,21 +523,21 @@
 	    prout("   reports that it is under attack from the Klingon Super-commander.");
 	    proutn("   It can survive until stardate %d.\"",
 		   (int)game.future[FSCDBAS]);
-	    if (resting==0) return;
+	    if (game.resting==0) return;
 	    prout("Mr. Spock-  \"Captain, shall we cancel the rest period?\"");
 	    if (ja()==0) return;
-	    resting = 0;
-	    Time = 0.0; /* actually finished */
+	    game.resting = 0;
+	    game.optime = 0.0; /* actually finished */
 	    return;
 	}
     }
     /* Check for intelligence report */
     if (
 #ifdef DEBUG
-	idebug==0 &&
+	game.idebug==0 &&
 #endif
 	(Rand() > 0.2 ||
-	 (game.damage[DRADIO] > 0.0 && condit != IHDOCKED) ||
+	 (game.damage[DRADIO] > 0.0 && game.condit != IHDOCKED) ||
 	 !game.state.galaxy[game.state.isx][game.state.isy].charted))
 	return;
     if (*ipage==0) pause_game(1);
@@ -553,49 +553,49 @@
 {
     int idx, idy, im, i, dum, my;
     /* Move the Tholian */
-    if (ithere==0 || justin == 1) return;
+    if (game.ithere==0 || game.justin == 1) return;
 
-    if (ithx == 1 && ithy == 1) {
+    if (game.ithx == 1 && game.ithy == 1) {
 	idx = 1; idy = QUADSIZE;
     }
-    else if (ithx == 1 && ithy == QUADSIZE) {
+    else if (game.ithx == 1 && game.ithy == QUADSIZE) {
 	idx = QUADSIZE; idy = QUADSIZE;
     }
-    else if (ithx == QUADSIZE && ithy == QUADSIZE) {
+    else if (game.ithx == QUADSIZE && game.ithy == QUADSIZE) {
 	idx = QUADSIZE; idy = 1;
     }
-    else if (ithx == QUADSIZE && ithy == 1) {
+    else if (game.ithx == QUADSIZE && game.ithy == 1) {
 	idx = 1; idy = 1;
     }
     else {
 	/* something is wrong! */
-	ithere = 0;
+	game.ithere = 0;
 	return;
     }
 
     /* Do nothing if we are blocked */
     if (game.quad[idx][idy]!= IHDOT && game.quad[idx][idy]!= IHWEB) return;
-    game.quad[ithx][ithy] = IHWEB;
+    game.quad[game.ithx][game.ithy] = IHWEB;
 
-    if (ithx != idx) {
+    if (game.ithx != idx) {
 	/* move in x axis */
-	im = fabs((double)idx - ithx)/((double)idx - ithx);
-	while (ithx != idx) {
-	    ithx += im;
-	    if (game.quad[ithx][ithy]==IHDOT) game.quad[ithx][ithy] = IHWEB;
+	im = fabs((double)idx - game.ithx)/((double)idx - game.ithx);
+	while (game.ithx != idx) {
+	    game.ithx += im;
+	    if (game.quad[game.ithx][game.ithy]==IHDOT) game.quad[game.ithx][game.ithy] = IHWEB;
 	}
     }
-    else if (ithy != idy) {
+    else if (game.ithy != idy) {
 	/* move in y axis */
-	im = fabs((double)idy - ithy)/((double)idy - ithy);
-	while (ithy != idy) {
-	    ithy += im;
-	    if (game.quad[ithx][ithy]==IHDOT) game.quad[ithx][ithy] = IHWEB;
+	im = fabs((double)idy - game.ithy)/((double)idy - game.ithy);
+	while (game.ithy != idy) {
+	    game.ithy += im;
+	    if (game.quad[game.ithx][game.ithy]==IHDOT) game.quad[game.ithx][game.ithy] = IHWEB;
 	}
     }
-    game.quad[ithx][ithy] = IHT;
-    game.kx[nenhere]=ithx;
-    game.ky[nenhere]=ithy;
+    game.quad[game.ithx][game.ithy] = IHT;
+    game.kx[game.nenhere]=game.ithx;
+    game.ky[game.nenhere]=game.ithy;
 
     /* check to see if all holes plugged */
     for_sectors(i) {
@@ -605,11 +605,11 @@
 	if (game.quad[i][QUADSIZE]!=IHWEB && game.quad[i][QUADSIZE]!=IHT) return;
     }
     /* All plugged up -- Tholian splits */
-    game.quad[ithx][ithy]=IHWEB;
+    game.quad[game.ithx][game.ithy]=IHWEB;
     dropin(IHBLANK, &dum, &my);
-    crmena(1,IHT, 2, ithx, ithy);
+    crmena(1,IHT, 2, game.ithx, game.ithy);
     prout(" completes web.");
-    ithere = ithx = ithy = 0;
-    nenhere--;
+    game.ithere = game.ithx = game.ithy = 0;
+    game.nenhere--;
     return;
 }

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-14 18:25:06 UTC (rev 560)
+++ trunk/src/battle.c	2006-09-14 20:42:27 UTC (rev 561)
@@ -5,7 +5,7 @@
     int key;
     enum {NONE, SHUP, SHDN, NRG} action = NONE;
 
-    ididit = 0;
+    game.ididit = 0;
 
     if (i == 2) action = SHUP;
     else {
@@ -35,7 +35,7 @@
 		prout("Shields damaged and down.");
 		return;
 	    }
-	    else if (shldup) {
+	    else if (game.shldup) {
 		proutn("Shields are up. Do you want them down? ");
 		if (ja()) action = SHDN;
 		else {
@@ -55,31 +55,31 @@
     }
     switch (action) {
     case SHUP: /* raise shields */
-	if (shldup) {
+	if (game.shldup) {
 	    prout("Shields already up.");
 	    return;
 	}
-	shldup = 1;
-	shldchg = 1;
-	if (condit != IHDOCKED) energy -= 50.0;
+	game.shldup = 1;
+	game.shldchg = 1;
+	if (game.condit != IHDOCKED) game.energy -= 50.0;
 	prout("Shields raised.");
-	if (energy <= 0) {
+	if (game.energy <= 0) {
 	    skip(1);
 	    prout("Shields raising uses up last of energy.");
 	    finish(FNRG);
 	    return;
 	}
-	ididit=1;
+	game.ididit=1;
 	return;
     case SHDN:
-	if (shldup==0) {
+	if (game.shldup==0) {
 	    prout("Shields already down.");
 	    return;
 	}
-	shldup=0;
-	shldchg=1;
+	game.shldup=0;
+	game.shldchg=1;
 	prout("Shields lowered.");
-	ididit=1;
+	game.ididit=1;
 	return;
     case NRG:
 	while (scan() != IHREAL) {
@@ -88,33 +88,33 @@
 	}
 	chew();
 	if (aaitem==0) return;
-	if (aaitem > energy) {
+	if (aaitem > game.energy) {
 	    prout("Insufficient ship energy.");
 	    return;
 	}
-	ididit = 1;
-	if (shield+aaitem >= inshld) {
+	game.ididit = 1;
+	if (game.shield+aaitem >= game.inshld) {
 	    prout("Shield energy maximized.");
-	    if (shield+aaitem > inshld) {
+	    if (game.shield+aaitem > game.inshld) {
 		prout("Excess energy requested returned to ship energy");
 	    }
-	    energy -= inshld-shield;
-	    shield = inshld;
+	    game.energy -= game.inshld-game.shield;
+	    game.shield = game.inshld;
 	    return;
 	}
-	if (aaitem < 0.0 && energy-aaitem > inenrg) {
+	if (aaitem < 0.0 && game.energy-aaitem > game.inenrg) {
 	    /* Prevent shield drain loophole */
 	    skip(1);
 	    prout("Engineering to bridge--");
 	    prout("  Scott here. Power circuit problem, Captain.");
 	    prout("  I can't drain the shields.");
-	    ididit = 0;
+	    game.ididit = 0;
 	    return;
 	}
-	if (shield+aaitem < 0) {
+	if (game.shield+aaitem < 0) {
 	    prout("All shield energy transferred to ship.");
-	    energy += shield;
-	    shield = 0.0;
+	    game.energy += game.shield;
+	    game.shield = 0.0;
 	    return;
 	}
 	proutn("Scotty- \"");
@@ -122,8 +122,8 @@
 	    prout("Transferring energy to shields.\"");
 	else
 	    prout("Draining energy from shields.\"");
-	shield += aaitem;
-	energy -= aaitem;
+	game.shield += aaitem;
+	game.energy -= aaitem;
 	return;
     case NONE:;	/* avoid gcc warning */
     }
@@ -151,22 +151,22 @@
     crmena(0, ienm, 2, ix, iy);
     if (ibumpd) proutn(" (original position)");
     skip(1);
-    deadkl(ix, iy, ienm, sectx, secty);
+    deadkl(ix, iy, ienm, game.sectx, game.secty);
     proutn("***");
     crmshp();
     prout(" heavily damaged.");
     icas = 10.0+20.0*Rand();
     prout("***Sickbay reports %d casualties", icas);
-    casual += icas;
+    game.casual += icas;
     for (l=0; l < NDEVICES; l++) {
 	if (l == DDRAY) 
 	    continue; // Don't damage deathray 
 	if (game.damage[l] < 0) 
 	    continue;
-	extradm = (10.0*type*Rand()+1.0)*damfac;
-	game.damage[l] += Time + extradm; /* Damage for at least time of travel! */
+	extradm = (10.0*type*Rand()+1.0)*game.damfac;
+	game.damage[l] += game.optime + extradm; /* Damage for at least time of travel! */
     }
-    shldup = 0;
+    game.shldup = 0;
     if (KLINGREM) {
 	pause_game(2);
 	dreprt();
@@ -189,7 +189,7 @@
     if (fabs(deltay) > bigger) bigger = fabs(deltay);
     deltax /= bigger;
     deltay /= bigger;
-    if (game.damage[DSRSENS]==0 || condit==IHDOCKED) 
+    if (game.damage[DSRSENS]==0 || game.condit==IHDOCKED) 
 	setwnd(srscan_window);
     else 
 	setwnd(message_window);
@@ -219,7 +219,7 @@
 	    *hit = fabs(*hit);
 	    newcnd(); /* we're blown out of dock */
 	    /* We may be displaced. */
-	    if (landed==1 || condit==IHDOCKED) return; /* Cheat if on a planet */
+	    if (game.landed==1 || game.condit==IHDOCKED) return; /* Cheat if on a planet */
 	    ang = angle + 2.5*(Rand()-0.5);
 	    temp = fabs(sin(ang));
 	    if (fabs(cos(ang)) > temp) temp = fabs(cos(ang));
@@ -236,8 +236,8 @@
 		/* can't move into object */
 		return;
 	    }
-	    sectx = jx;
-	    secty = jy;
+	    game.sectx = jx;
+	    game.secty = jy;
 	    crmshp();
 	    shoved = 1;
 	    break;
@@ -298,7 +298,7 @@
 	    skip(1);
 	    prout("***STARBASE DESTROYED..");
 	    for_starbases(ll) {
-		if (game.state.baseqx[ll]==quadx && game.state.baseqy[ll]==quady) {
+		if (game.state.baseqx[ll]==game.quadx && game.state.baseqy[ll]==game.quady) {
 		    game.state.baseqx[ll]=game.state.baseqx[game.state.rembase];
 		    game.state.baseqy[ll]=game.state.baseqy[game.state.rembase];
 		    break;
@@ -306,9 +306,9 @@
 	    }
 	    game.quad[ix][iy]=IHDOT;
 	    game.state.rembase--;
-	    basex=basey=0;
-	    game.state.galaxy[quadx][quady].starbase--;
-	    game.state.chart[quadx][quady].starbase--;
+	    game.basex=game.basey=0;
+	    game.state.galaxy[game.quadx][game.quady].starbase--;
+	    game.state.chart[game.quadx][game.quady].starbase--;
 	    game.state.basekl++;
 	    newcnd();
 	    return;
@@ -316,12 +316,12 @@
 	    crmena(1, iquad, 2, ix, iy);
 	    prout(" destroyed.");
 	    game.state.nplankl++;
-	    game.state.galaxy[quadx][quady].planets--;
-	    DESTROY(&game.state.plnets[iplnet]);
-	    iplnet = 0;
-	    plnetx = plnety = 0;
+	    game.state.galaxy[game.quadx][game.quady].planets--;
+	    DESTROY(&game.state.plnets[game.iplnet]);
+	    game.iplnet = 0;
+	    game.plnetx = game.plnety = 0;
 	    game.quad[ix][iy] = IHDOT;
-	    if (landed==1) {
+	    if (game.landed==1) {
 		/* captain perishes on planet */
 		finish(FDPLANET);
 	    }
@@ -371,8 +371,8 @@
 	    h1 = fabs(h1);
 	    if (h1 >= 600) {
 		game.quad[ix][iy] = IHDOT;
-		ithere = 0;
-		ithx = ithy = 0;
+		game.ithere = 0;
+		game.ithx = game.ithy = 0;
 		deadkl(ix, iy, iquad, ix, iy);
 		return;
 	    }
@@ -384,8 +384,8 @@
 	    }
 	    prout(" disappears.");
 	    game.quad[ix][iy] = IHWEB;
-	    ithere = ithx = ithy = 0;
-	    nenhere--;
+	    game.ithere = game.ithx = game.ithy = 0;
+	    game.nenhere--;
 	    {
 		int dum, my;
 		dropin(IHBLANK, &dum, &my);
@@ -409,7 +409,7 @@
 	game.quad[ix][iy]=IHDOT;
 	prout(" displaced by blast to %s ", cramlc(sector, jx, jy));
 	for_local_enemies(ll)
-	    game.kdist[ll] = game.kavgd[ll] = sqrt(square(sectx-game.kx[ll])+square(secty-game.ky[ll]));
+	    game.kdist[ll] = game.kavgd[ll] = sqrt(square(game.sectx-game.kx[ll])+square(game.secty-game.ky[ll]));
 	sortkl();
 	return;
     }
@@ -424,7 +424,7 @@
     int ktr=1, l, ll, j, cdam[NDEVICES];
 
     /* a critical hit occured */
-    if (hit < (275.0-25.0*skill)*(1.0+0.5*Rand())) return;
+    if (hit < (275.0-25.0*game.skill)*(1.0+0.5*Rand())) return;
 
     ncrit = 1.0 + hit/(500.0+100.0*Rand());
     proutn("***CRITICAL HIT--");
@@ -434,9 +434,9 @@
 	    j = NDEVICES*Rand();
 	    /* Cheat to prevent shuttle damage unless on ship */
 	} while 
-	      (game.damage[j]<0.0 || (j==DSHUTTL && iscraft!=1) || j==DDRAY);
+	      (game.damage[j]<0.0 || (j==DSHUTTL && game.iscraft!=1) || j==DDRAY);
 	cdam[l] = j;
-	extradm = (hit*damfac)/(ncrit*(75.0+25.0*Rand()));
+	extradm = (hit*game.damfac)/(ncrit*(75.0+25.0*Rand()));
 	game.damage[j] += extradm;
 	if (l > 0) {
 	    for (ll=2; ll<=l && j != cdam[ll-1]; ll++) ;
@@ -448,9 +448,9 @@
 	proutn(device[j]);
     }
     prout(" damaged.");
-    if (game.damage[DSHIELD] && shldup) {
+    if (game.damage[DSHIELD] && game.shldup) {
 	prout("***Shields knocked down.");
-	shldup=0;
+	game.shldup=0;
     }
 }
 
@@ -462,30 +462,30 @@
     double hit;
     double pfac, dustfac, hitmax=0.0, hittot=0.0, chgfac=1.0, r;
 
-    iattak = 1;
-    if (alldone) return;
+    game.iattak = 1;
+    if (game.alldone) return;
 #ifdef DEBUG
-    if (idebug) prout("ATTACK!");
+    if (game.idebug) prout("ATTACK!");
 #endif
 
-    if (ithere) movetho();
+    if (game.ithere) movetho();
 
-    if (neutz) { /* The one chance not to be attacked */
-	neutz = 0;
+    if (game.neutz) { /* The one chance not to be attacked */
+	game.neutz = 0;
 	return;
     }
-    if ((((comhere || ishere) && (justin == 0)) || skill == SKILL_EMERITUS)&&(torps_ok!=0)) movcom();
-    if (nenhere==0 || (nenhere==1 && iqhere && iqengry==0)) return;
-    pfac = 1.0/inshld;
-    if (shldchg == 1) chgfac = 0.25+0.5*Rand();
+    if ((((game.comhere || game.ishere) && (game.justin == 0)) || game.skill == SKILL_EMERITUS)&&(torps_ok!=0)) movcom();
+    if (game.nenhere==0 || (game.nenhere==1 && iqhere && iqengry==0)) return;
+    pfac = 1.0/game.inshld;
+    if (game.shldchg == 1) chgfac = 0.25+0.5*Rand();
     skip(1);
-    if (skill <= SKILL_FAIR) i = 2;
+    if (game.skill <= SKILL_FAIR) i = 2;
     for_local_enemies(l) {
 	if (game.kpower[l] < 0) continue;	/* too weak to attack */
 	/* compute hit strength and diminsh shield power */
 	r = Rand();
 	/* Increase chance of photon torpedos if docked or enemy energy low */
-	if (condit == IHDOCKED) r *= 0.25;
+	if (game.condit == IHDOCKED) r *= 0.25;
 	if (game.kpower[l] < 500) r *= 0.25; 
 	jx = game.kx[l];
 	jy = game.ky[l];
@@ -498,14 +498,14 @@
 	    (iquad==IHQUEST && r > 0.05);
 	if (itflag) {
 	    /* Enemy uses phasers */
-	    if (condit == IHDOCKED) continue; /* Don't waste the effort! */
+	    if (game.condit == IHDOCKED) continue; /* Don't waste the effort! */
 	    attempt = 1; /* Attempt to attack */
 	    dustfac = 0.8+0.05*Rand();
 	    hit = game.kpower[l]*pow(dustfac,game.kavgd[l]);
 	    game.kpower[l] *= 0.75;
 	}
 	else { /* Enemy used photon torpedo */
-	    double course = 1.90985*atan2((double)secty-jy, (double)jx-sectx);
+	    double course = 1.90985*atan2((double)game.secty-jy, (double)jx-game.sectx);
 	    hit = 0;
 	    proutn("***TORPEDO INCOMING");
 	    if (game.damage[DSRSENS] <= 0.0) {
@@ -519,22 +519,22 @@
 	    torpedo(course, r, jx, jy, &hit, 1, 1);
 	    if (KLINGREM==0) 
 		finish(FWON); /* Klingons did themselves in! */
-	    if (game.state.galaxy[quadx][quady].supernova || alldone) 
+	    if (game.state.galaxy[game.quadx][game.quady].supernova || game.alldone) 
 		return; /* Supernova or finished */
 	    if (hit == 0) continue;
 	}
-	if (shldup != 0 || shldchg != 0 || condit==IHDOCKED) {
+	if (game.shldup != 0 || game.shldchg != 0 || game.condit==IHDOCKED) {
 	    /* shields will take hits */
-	    double absorb, hitsh, propor = pfac*shield*(condit==IHDOCKED ? 2.1 : 1.0);
+	    double absorb, hitsh, propor = pfac*game.shield*(game.condit==IHDOCKED ? 2.1 : 1.0);
 	    if(propor < 0.1) propor = 0.1;
 	    hitsh = propor*chgfac*hit+1.0;
 	    atackd=1;
 	    absorb = 0.8*hitsh;
-	    if (absorb > shield) absorb = shield;
-	    shield -= absorb;
+	    if (absorb > game.shield) absorb = game.shield;
+	    game.shield -= absorb;
 	    hit -= hitsh;
-	    if (condit==IHDOCKED) dock(0);
-	    if (propor > 0.1 && hit < 0.005*energy) continue;
+	    if (game.condit==IHDOCKED) dock(0);
+	    if (propor > 0.1 && hit < 0.005*game.energy) continue;
 	}
 	/* It's a hit -- print out hit size */
 	atackd = 1; /* We weren't going to check casualties, etc. if
@@ -542,7 +542,7 @@
 		       doesn't make any sense, so I've fixed it */
 	ihurt = 1;
 	proutn("%d unit hit", (int)hit);
-	if ((game.damage[DSRSENS] > 0 && itflag) || skill<=SKILL_FAIR) {
+	if ((game.damage[DSRSENS] > 0 && itflag) || game.skill<=SKILL_FAIR) {
 	    proutn(" on the ");
 	    crmshp();
 	}
@@ -555,20 +555,20 @@
 	if (hit > hitmax) hitmax = hit;
 	hittot += hit;
 	fry(hit);
-	prout("Hit %g energy %g", hit, energy);
-	energy -= hit;
-	if (condit==IHDOCKED) 
+	prout("Hit %g energy %g", hit, game.energy);
+	game.energy -= hit;
+	if (game.condit==IHDOCKED) 
 	    dock(0);
     }
-    if (energy <= 0) {
+    if (game.energy <= 0) {
 	/* Returning home upon your shield, not with it... */
 	finish(FBATTLE);
 	return;
     }
-    if (attempt == 0 && condit == IHDOCKED)
+    if (attempt == 0 && game.condit == IHDOCKED)
 	prout("***Enemies decide against attacking your ship.");
     if (atackd == 0) return;
-    percent = 100.0*pfac*shield+0.5;
+    percent = 100.0*pfac*game.shield+0.5;
     if (ihurt==0) {
 	/* Shields fully protect ship */
 	proutn("Enemy attack reduces shield strength to ");
@@ -576,12 +576,12 @@
     else {
 	/* Print message if starship suffered hit(s) */
 	skip(1);
-	proutn("Energy left %2d    shields ", (int)energy);
-	if (shldup) proutn("up ");
+	proutn("Energy left %2d    shields ", (int)game.energy);
+	if (game.shldup) proutn("up ");
 	else if (game.damage[DSHIELD] == 0) proutn("down ");
 	else proutn("damaged, ");
     }
-    prout("%d%%,   torpedoes left %d", percent, torps);
+    prout("%d%%,   torpedoes left %d", percent, game.torps);
     /* Check if anyone was hurt */
     if (hitmax >= 200 || hittot >= 500) {
 	int icas= hittot*Rand()*0.015;
@@ -589,7 +589,7 @@
 	    skip(1);
 	    prout("Mc Coy-  \"Sickbay to bridge.  We suffered %d casualties", icas);
 	    prout("   in that last attack.\"");
-	    casual += icas;
+	    game.casual += icas;
 	}
     }
     /* After attack, reset average distance to enemies */
@@ -610,13 +610,13 @@
     /* Decide what kind of enemy it is and update approriately */
     if (type == IHR) {
 	/* chalk up a Romulan */
-	game.state.galaxy[quadx][quady].romulans--;
-	irhere--;
+	game.state.galaxy[game.quadx][game.quady].romulans--;
+	game.irhere--;
 	game.state.nromrem--;
     }
     else if (type == IHT) {
 	/* Killed a Tholian */
-	ithere = 0;
+	game.ithere = 0;
     }
     else if (type == IHQUEST) {
 	/* Killed a Thingy */
@@ -624,13 +624,13 @@
     }
     else {
 	/* Some type of a Klingon */
-	game.state.galaxy[quadx][quady].klingons--;
-	klhere--;
+	game.state.galaxy[game.quadx][game.quady].klingons--;
+	game.klhere--;
 	switch (type) {
 	case IHC:
-	    comhere = 0;
+	    game.comhere = 0;
 	    for_commanders (i)
-		if (game.state.cx[i]==quadx && game.state.cy[i]==quady) break;
+		if (game.state.cx[i]==game.quadx && game.state.cy[i]==game.quady) break;
 	    game.state.cx[i] = game.state.cx[game.state.remcom];
 	    game.state.cy[i] = game.state.cy[game.state.remcom];
 	    game.state.cx[game.state.remcom] = 0;
@@ -638,14 +638,14 @@
 	    game.state.remcom--;
 	    game.future[FTBEAM] = FOREVER;
 	    if (game.state.remcom != 0)
-		game.future[FTBEAM] = game.state.date + expran(1.0*incom/game.state.remcom);
+		game.future[FTBEAM] = game.state.date + expran(1.0*game.incom/game.state.remcom);
 	    break;
 	case IHK:
 	    game.state.remkl--;
 	    break;
 	case IHS:
 	    game.state.nscrem--;
-	    ishere = game.state.isx = game.state.isy = isatb = iscate = 0;
+	    game.ishere = game.state.isx = game.state.isy = game.isatb = game.iscate = 0;
 	    game.future[FSCMOVE] = game.future[FSCDBAS] = FOREVER;
 	    break;
 	}
@@ -658,25 +658,25 @@
 
     game.state.remtime = game.state.remres/(game.state.remkl + 4*game.state.remcom);
 
-    /* Remove enemy ship from arrays describing local conditions */
-    if (game.future[FCDBAS] < FOREVER && batx==quadx && baty==quady && type==IHC)
+    /* Remove enemy ship from arrays describing local game.conditions */
+    if (game.future[FCDBAS] < FOREVER && game.batx==game.quadx && game.baty==game.quady && type==IHC)
 	game.future[FCDBAS] = FOREVER;
     for_local_enemies(i)
 	if (game.kx[i]==ix && game.ky[i]==iy) break;
-    nenhere--;
-    if (i <= nenhere)  {
-	for (j=i; j<=nenhere; j++) {
+    game.nenhere--;
+    if (i <= game.nenhere)  {
+	for (j=i; j<=game.nenhere; j++) {
 	    game.kx[j] = game.kx[j+1];
 	    game.ky[j] = game.ky[j+1];
 	    game.kpower[j] = game.kpower[j+1];
 	    game.kavgd[j] = game.kdist[j] = game.kdist[j+1];
 	}
     }
-    game.kx[nenhere+1] = 0;
-    game.ky[nenhere+1] = 0;
-    game.kdist[nenhere+1] = 0;
-    game.kavgd[nenhere+1] = 0;
-    game.kpower[nenhere+1] = 0;
+    game.kx[game.nenhere+1] = 0;
+    game.ky[game.nenhere+1] = 0;
+    game.kdist[game.nenhere+1] = 0;
+    game.kavgd[game.nenhere+1] = 0;
+    game.kpower[game.nenhere+1] = 0;
     return;
 }
 
@@ -688,8 +688,8 @@
 	huh();
 	return 1;
     }
-    deltx = 0.1*(y - secty);
-    delty = 0.1*(sectx - x);
+    deltx = 0.1*(y - game.secty);
+    delty = 0.1*(game.sectx - x);
     if (deltx==0 && delty== 0) {
 	skip(1);
 	prout("Spock-  \"Bridge to sickbay.  Dr. McCoy,");
@@ -708,14 +708,14 @@
     double r, dummy;
     int key, n, i, osuabor;
 
-    ididit = 0;
+    game.ididit = 0;
 
     if (game.damage[DPHOTON]) {
 	prout("Photon tubes damaged.");
 	chew();
 	return;
     }
-    if (torps == 0) {
+    if (game.torps == 0) {
 	prout("No torpedoes left.");
 	chew();
 	return;
@@ -727,7 +727,7 @@
 	    return;
 	}
 	else if (key == IHEOL) {
-	    prout("%d torpedoes left.", torps);
+	    prout("%d torpedoes left.", game.torps);
 	    proutn("Number of torpedoes to fire- ");
 	    key = scan();
 	}
@@ -743,7 +743,7 @@
 		key = IHEOL;
 		return;
 	    }
-	    if (n <= torps) break;
+	    if (n <= game.torps) break;
 	    chew();
 	    key = IHEOL;
 	}
@@ -797,11 +797,11 @@
 	    if (targetcheck(targ[i][1], targ[i][2], &course[i])) return;
 	}
     }
-    ididit = 1;
+    game.ididit = 1;
     /* Loop for moving <n> torpedoes */
     osuabor = 0;
     for (i = 1; i <= n && !osuabor; i++) {
-	if (condit != IHDOCKED) torps--;
+	if (game.condit != IHDOCKED) game.torps--;
 	r = (Rand()+Rand())*0.5 -0.5;
 	if (fabs(r) >= 0.47) {
 	    /* misfire! */
@@ -816,14 +816,14 @@
 	    osuabor=1;
 	    if (Rand() <= 0.2) {
 		prout("***Photon tubes damaged by misfire.");
-		game.damage[DPHOTON] = damfac*(1.0+2.0*Rand());
+		game.damage[DPHOTON] = game.damfac*(1.0+2.0*Rand());
 		break;
 	    }
 	}
-	if (shldup || condit == IHDOCKED) 
-	    r *= 1.0 + 0.0001*shield;
-	torpedo(course[i], r, sectx, secty, &dummy, i, n);
-	if (alldone || game.state.galaxy[quadx][quady].supernova)
+	if (game.shldup || game.condit == IHDOCKED) 
+	    r *= 1.0 + 0.0001*game.shield;
+	torpedo(course[i], r, game.sectx, game.secty, &dummy, i, n);
+	if (game.alldone || game.state.galaxy[game.quadx][game.quady].supernova)
 	    return;
     }
     if (KLINGREM==0) finish(FWON);
@@ -837,7 +837,7 @@
 	double chekbrn = (rpow-1500.)*0.00038;
 	if (Rand() <= chekbrn) {
 	    prout("Weapons officer Sulu-  \"Phasers overheated, sir.\"");
-	    game.damage[DPHASER] = damfac*(1.0 + Rand()) * (1.0+chekbrn);
+	    game.damage[DPHASER] = game.damfac*(1.0 + Rand()) * (1.0+chekbrn);
 	}
     }
 }
@@ -855,10 +855,10 @@
     /* Something bad has happened */
     prouts("***RED ALERT!  RED ALERT!");
     skip(2);
-    hit = rpow*shield/inshld;
-    energy -= rpow+hit*0.8;
-    shield -= hit*0.2;
-    if (energy <= 0.0) {
+    hit = rpow*game.shield/game.inshld;
+    game.energy -= rpow+hit*0.8;
+    game.shield -= hit*0.2;
+    if (game.energy <= 0.0) {
 	prouts("Sulu-  \"Captain! Shield malf***********************\"");
 	skip(1);
 	stars();
@@ -875,7 +875,7 @@
 	skip(1);
 	prout("McCoy to bridge- \"Severe radiation burns, Jim.");
 	prout("  %d casualties so far.\"", icas);
-	casual -= icas;
+	game.casual -= icas;
     }
     skip(1);
     prout("Phaser energy dispersed by shields.");
@@ -896,7 +896,7 @@
     skip(1);
     /* SR sensors and Computer */
     if (game.damage[DSRSENS]+game.damage[DCOMPTR] > 0) ipoop = 0;
-    if (condit == IHDOCKED) {
+    if (game.condit == IHDOCKED) {
 	prout("Phasers can't be fired through base shields.");
 	chew();
 	return;
@@ -906,13 +906,13 @@
 	chew();
 	return;
     }
-    if (shldup) {
+    if (game.shldup) {
 	if (game.damage[DSHCTRL]) {
 	    prout("High speed shield control damaged.");
 	    chew();
 	    return;
 	}
-	if (energy <= 200.0) {
+	if (game.energy <= 200.0) {
 	    prout("Insufficient energy to activate high-speed shield control.");
 	    chew();
 	    return;
@@ -926,7 +926,7 @@
 	key=scan();
 	if (key == IHALPHA) {
 	    if (isit("manual")) {
-		if (nenhere==0) {
+		if (game.nenhere==0) {
 		    prout("There is no enemy present to select.");
 		    chew();
 		    key = IHEOL;
@@ -938,11 +938,11 @@
 		}
 	    }
 	    else if (isit("automatic")) {
-		if ((!ipoop) && nenhere != 0) {
+		if ((!ipoop) && game.nenhere != 0) {
 		    automode = FORCEMAN;
 		}
 		else {
-		    if (nenhere==0)
+		    if (game.nenhere==0)
 			prout("Energy will be expended into space.");
 		    automode = AUTOMATIC;
 		    key = scan();
@@ -957,7 +957,7 @@
 	    }
 	}
 	else if (key == IHREAL) {
-	    if (nenhere==0) {
+	    if (game.nenhere==0) {
 		prout("Energy will be expended into space.");
 		automode = AUTOMATIC;
 	    }
@@ -968,7 +968,7 @@
 	}
 	else {
 	    /* IHEOL */
-	    if (nenhere==0) {
+	    if (game.nenhere==0) {
 		prout("Energy will be expended into space.");
 		automode = AUTOMATIC;
 	    }
@@ -985,9 +985,9 @@
 	    no = 1;
 	    key = scan();
 	}
-	if (key != IHREAL && nenhere != 0) {
+	if (key != IHREAL && game.nenhere != 0) {
 	    prout("Phasers locked on target. Energy available: %.2f",
-		  ifast?energy-200.0:energy,1,2);
+		  ifast?game.energy-200.0:game.energy,1,2);
 	}
 	irec=0;
 	do {
@@ -1002,13 +1002,13 @@
 	    key = scan();
 	    if (key!=IHREAL) return;
 	    rpow = aaitem;
-	    if (rpow > (ifast?energy-200:energy)) {
+	    if (rpow > (ifast?game.energy-200:game.energy)) {
 		proutn("Energy available= %.2f",
-		       ifast?energy-200:energy);
+		       ifast?game.energy-200:game.energy);
 		skip(1);
 		key = IHEOL;
 	    }
-	} while (rpow > (ifast?energy-200:energy));
+	} while (rpow > (ifast?game.energy-200:game.energy));
 	if (rpow<=0) {
 	    /* chicken out */
 	    chew();
@@ -1018,13 +1018,13 @@
 	    no = 1;
 	}
 	if (ifast) {
-	    energy -= 200; /* Go and do it! */
+	    game.energy -= 200; /* Go and do it! */
 	    if (checkshctrl(rpow)) return;
 	}
 	chew();
-	energy -= rpow;
+	game.energy -= rpow;
 	extra = rpow;
-	if (nenhere) {
+	if (game.nenhere) {
 	    extra = 0.0;
 	    powrem = rpow;
 	    for_local_enemies(i) {
@@ -1040,12 +1040,12 @@
 	    }
 	    if (powrem > 0.0) extra += powrem;
 	    hittem(hits);
-	    ididit=1;
+	    game.ididit=1;
 	}
-	if (extra > 0 && alldone == 0) {
-	    if (ithere) {
+	if (extra > 0 && game.alldone == 0) {
+	    if (game.ithere) {
 		proutn("*** Tholian web absorbs ");
-		if (nenhere>0) proutn("excess ");
+		if (game.nenhere>0) proutn("excess ");
 		prout("phaser energy.");
 	    }
 	    else {
@@ -1070,17 +1070,17 @@
 	}
     case MANUAL:
 	rpow = 0.0;
-	for (k = 1; k <= nenhere;) {
+	for (k = 1; k <= game.nenhere;) {
 	    int ii = game.kx[k], jj = game.ky[k];
 	    int ienm = game.quad[ii][jj];
 	    if (msgflag) {
 		proutn("Energy available= %.2f",
-		       energy-.006-(ifast?200:0));
+		       game.energy-.006-(ifast?200:0));
 		skip(1);
 		msgflag = 0;
 		rpow = 0.0;
 	    }
-	    if (game.damage[DSRSENS] && !(abs(sectx-ii) < 2 && abs(secty-jj) < 2) &&
+	    if (game.damage[DSRSENS] && !(abs(game.sectx-ii) < 2 && abs(game.secty-jj) < 2) &&
 		(ienm == IHC || ienm == IHS)) {
 		cramen(ienm);
 		prout(" can't be located without short range scan.");
@@ -1129,7 +1129,7 @@
 	    rpow += aaitem;
 	    /* If total requested is too much, inform and start over */
 				
-	    if (rpow > (ifast?energy-200:energy)) {
+	    if (rpow > (ifast?game.energy-200:game.energy)) {
 		prout("Available energy exceeded -- try again.");
 		chew();
 		return;
@@ -1145,18 +1145,18 @@
 	if (key == IHALPHA && isit("no")) {
 	    no = 1;
 	}
-	energy -= rpow;
+	game.energy -= rpow;
 	chew();
 	if (ifast) {
-	    energy -= 200.0;
+	    game.energy -= 200.0;
 	    if (checkshctrl(rpow)) return;
 	}
 	hittem(hits);
-	ididit=1;
+	game.ididit=1;
     case NOTSET:;	/* avoid gcc warning */
     }
     /* Say shield raised or malfunction, if necessary */
-    if (alldone) 
+    if (game.alldone) 
 	return;
     if (ifast) {
 	skip(1);
@@ -1165,13 +1165,13 @@
 		prout("Sulu-  \"Sir, the high-speed shield control has malfunctioned . . .");
 		prouts("         CLICK   CLICK   POP  . . .");
 		prout(" No  response, sir!");
-		shldup = 0;
+		game.shldup = 0;
 	    }
 	    else
 		prout("Shields raised.");
 	}
 	else
-	    shldup = 0;
+	    game.shldup = 0;
     }
     overheat(rpow);
 }
@@ -1179,7 +1179,7 @@
 void hittem(double *hits) 
 {
     double kp, kpow, wham, hit, dustfac, kpini;
-    int nenhr2=nenhere, k=1, kk=1, ii, jj, ienm;
+    int nenhr2=game.nenhere, k=1, kk=1, ii, jj, ienm;
 
     skip(1);
 
@@ -1208,7 +1208,7 @@
 	if (kpow == 0) {
 	    deadkl(ii, jj, ienm, ii, jj);
 	    if (KLINGREM==0) finish(FWON);
-	    if (alldone) return;
+	    if (game.alldone) return;
 	    kk--; /* don't do the increment */
 	}
 	else /* decide whether or not to emasculate klingon */

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-14 18:25:06 UTC (rev 560)
+++ trunk/src/events.c	2006-09-14 20:42:27 UTC (rev 561)
@@ -4,11 +4,11 @@
 void events(void) 
 {
     int ictbeam=0, ipage=0, istract=0, line, i=0, j, k, l, ixhold=0, iyhold=0;
-    double fintim = game.state.date + Time, datemin, xtime, repair, yank=0;
+    double fintim = game.state.date + game.optime, datemin, xtime, repair, yank=0;
     int radio_was_broken;
 
 #ifdef DEBUG
-    if (idebug) prout("EVENTS");
+    if (game.idebug) prout("EVENTS");
 #endif
 
     radio_was_broken = (game.damage[DRADIO] != 0.0);
@@ -16,7 +16,7 @@
     for (;;) {
 	/* Select earliest extraneous event, line==0 if no events */
 	line = FSPY;
-	if (alldone) return;
+	if (game.alldone) return;
 	datemin = fintim;
 	for (l = 1; l < NEVENTS; l++)
 	    if (game.future[l] < datemin) {
@@ -33,17 +33,17 @@
 	    return;
 	}
 	/* Is life support adequate? */
-	if (game.damage[DLIFSUP] && condit != IHDOCKED) {
-	    if (lsupres < xtime && game.damage[DLIFSUP] > lsupres) {
+	if (game.damage[DLIFSUP] && game.condit != IHDOCKED) {
+	    if (game.lsupres < xtime && game.damage[DLIFSUP] > game.lsupres) {
 		finish(FLIFESUP);
 		return;
 	    }
-	    lsupres -= xtime;
-	    if (game.damage[DLIFSUP] <= xtime) lsupres = inlsr;
+	    game.lsupres -= xtime;
+	    if (game.damage[DLIFSUP] <= xtime) game.lsupres = game.inlsr;
 	}
 	/* Fix devices */
 	repair = xtime;
-	if (condit == IHDOCKED) repair /= docfac;
+	if (game.condit == IHDOCKED) repair /= game.docfac;
 	/* Don't fix Deathray here */
 	for (l=0; l<NDEVICES; l++)
 	    if (game.damage[l] > 0.0 && l != DDRAY)
@@ -53,37 +53,37 @@
 	    prout("Lt. Uhura- \"Captain, the sub-space radio is working and");
 	    prout("   surveillance reports are coming in.");
 	    skip(1);
-	    if (iseenit==0) {
+	    if (game.iseenit==0) {
 		attakreport(0);
-		iseenit = 1;
+		game.iseenit = 1;
 	    }
 	    rechart();
 	    prout("   The star chart is now up to date.\"");
 	    skip(1);
 	}
 	/* Cause extraneous event LINE to occur */
-	Time -= xtime;
+	game.optime -= xtime;
 	switch (line) {
 	case FSNOVA: /* Supernova */
 	    if (ipage==0) pause_game(1);
 	    ipage=1;
 	    snova(0,0);
-	    game.future[FSNOVA] = game.state.date + expran(0.5*intime);
-	    if (game.state.galaxy[quadx][quady].supernova) return;
+	    game.future[FSNOVA] = game.state.date + expran(0.5*game.intime);
+	    if (game.state.galaxy[game.quadx][game.quady].supernova) return;
 	    break;
 	case FSPY: /* Check with spy to see if S.C. should tractor beam */
 	    if (game.state.nscrem == 0 ||
 		ictbeam+istract > 0 ||
-		condit==IHDOCKED || isatb==1 || iscate==1) return;
-	    if (ientesc ||
-		(energy < 2000 && torps < 4 && shield < 1250) ||
-		(game.damage[DPHASER]>0 && (game.damage[DPHOTON]>0 || torps < 4)) ||
+		game.condit==IHDOCKED || game.isatb==1 || game.iscate==1) return;
+	    if (game.ientesc ||
+		(game.energy < 2000 && game.torps < 4 && game.shield < 1250) ||
+		(game.damage[DPHASER]>0 && (game.damage[DPHOTON]>0 || game.torps < 4)) ||
 		(game.damage[DSHIELD] > 0 &&
-		 (energy < 2500 || game.damage[DPHASER] > 0) &&
-		 (torps < 5 || game.damage[DPHOTON] > 0))) {
+		 (game.energy < 2500 || game.damage[DPHASER] > 0) &&
+		 (game.torps < 5 || game.damage[DPHOTON] > 0))) {
 		/* Tractor-beam her! */
 		istract=1;
-		yank = square(game.state.isx-quadx) + square(game.state.isy-quady);
+		yank = square(game.state.isx-game.quadx) + square(game.state.isy-game.quady);
 		/********* fall through to FTBEAM code ***********/
 	    }
 	    else return;
@@ -94,11 +94,11 @@
 		    break;
 		}
 		i = Rand()*game.state.remcom+1.0;
-		yank = square(game.state.cx[i]-quadx) + square(game.state.cy[i]-quady);
-		if (istract || condit == IHDOCKED || yank == 0) {
+		yank = square(game.state.cx[i]-game.quadx) + square(game.state.cy[i]-game.quady);
+		if (istract || game.condit == IHDOCKED || yank == 0) {
 		    /* Drats! Have to reschedule */
-		    game.future[FTBEAM] = game.state.date + Time +
-			expran(1.5*intime/game.state.remcom);
+		    game.future[FTBEAM] = game.state.date + game.optime +
+			expran(1.5*game.intime/game.state.remcom);
 		    break;
 		}
 	    }
@@ -106,7 +106,7 @@
 	    yank = sqrt(yank);
 	    if (ipage==0) pause_game(1);
 	    ipage=1;
-	    Time = (10.0/(7.5*7.5))*yank; /* 7.5 is yank rate (warp 7.5) */
+	    game.optime = (10.0/(7.5*7.5))*yank; /* 7.5 is yank rate (warp 7.5) */
 	    ictbeam = 1;
 	    skip(1);
 	    proutn("***");
@@ -114,60 +114,60 @@
 	    prout(" caught in long range tractor beam--");
 	    /* If Kirk & Co. screwing around on planet, handle */
 	    atover(1); /* atover(1) is Grab */
-	    if (alldone) return;
-	    if (icraft == 1) { /* Caught in Galileo? */
+	    if (game.alldone) return;
+	    if (game.icraft == 1) { /* Caught in Galileo? */
 		finish(FSTRACTOR);
 		return;
 	    }
 	    /* Check to see if shuttle is aboard */
-	    if (iscraft==0) {
+	    if (game.iscraft==0) {
 		skip(1);
 		if (Rand() > 0.5) {
 		    prout("Galileo, left on the planet surface, is captured");
 		    prout("by aliens and made into a flying McDonald's.");
 		    game.damage[DSHUTTL] = -10;
-		    iscraft = -1;
+		    game.iscraft = -1;
 		}
 		else {
 		    prout("Galileo, left on the planet surface, is well hidden.");
 		}
 	    }
 	    if (line==0) {
-		quadx = game.state.isx;
-		quady = game.state.isy;
+		game.quadx = game.state.isx;
+		game.quady = game.state.isy;
 	    }
 	    else {
-		quadx = game.state.cx[i];
-		quady = game.state.cy[i];
+		game.quadx = game.state.cx[i];
+		game.quady = game.state.cy[i];
 	    }
-	    iran(QUADSIZE, &sectx, &secty);
+	    iran(QUADSIZE, &game.sectx, &game.secty);
 	    crmshp();
 	    proutn(" is pulled to ");
-	    proutn(cramlc(quadrant, quadx, quady));
+	    proutn(cramlc(quadrant, game.quadx, game.quady));
 	    proutn(", ");
-	    prout(cramlc(sector, sectx, secty));
-	    if (resting) {
+	    prout(cramlc(sector, game.sectx, game.secty));
+	    if (game.resting) {
 		prout("(Remainder of rest/repair period cancelled.)");
-		resting = 0;
+		game.resting = 0;
 	    }
-	    if (shldup==0) {
-		if (game.damage[DSHIELD]==0 && shield > 0) {
+	    if (game.shldup==0) {
+		if (game.damage[DSHIELD]==0 && game.shield > 0) {
 		    doshield(2); /* Shldsup */
-		    shldchg=0;
+		    game.shldchg=0;
 		}
 		else prout("(Shields not currently useable.)");
 	    }
 	    newqad(0);
 	    /* Adjust finish time to time of tractor beaming */
-	    fintim = game.state.date+Time;
+	    fintim = game.state.date+game.optime;
 	    attack(0);
 	    if (game.state.remcom <= 0) game.future[FTBEAM] = FOREVER;
-	    else game.future[FTBEAM] = game.state.date+Time+expran(1.5*intime/game.state.remcom);
+	    else game.future[FTBEAM] = game.state.date+game.optime+expran(1.5*game.intime/game.state.remcom);
 	    break;
 	case FSNAP: /* Snapshot of the universe (for time warp) */
 	    game.snapsht = game.state;
 	    game.state.snap = 1;
-	    game.future[FSNAP] = game.state.date + expran(0.5 * intime);
+	    game.future[FSNAP] = game.state.date + expran(0.5 * game.intime);
 	    break;
 	case FBATTAK: /* Commander attacks starbase */
 	    if (game.state.remcom==0 || game.state.rembase==0) {
@@ -179,7 +179,7 @@
 	    for_starbases(j) {
 		for_commanders(k)
 		    if (game.state.baseqx[j]==game.state.cx[k] && game.state.baseqy[j]==game.state.cy[k] &&
-			(game.state.baseqx[j]!=quadx || game.state.baseqy[j]!=quady) &&
+			(game.state.baseqx[j]!=game.quadx || game.state.baseqy[j]!=game.quady) &&
 			(game.state.baseqx[j]!=game.state.isx || game.state.baseqy[j]!=game.state.isy)) {
 			i = 1;
 			break;
@@ -188,125 +188,125 @@
 	    }
 	    if (j>game.state.rembase) {
 		/* no match found -- try later */
-		game.future[FBATTAK] = game.state.date + expran(0.3*intime);
+		game.future[FBATTAK] = game.state.date + expran(0.3*game.intime);
 		game.future[FCDBAS] = FOREVER;
 		break;
 	    }
 	    /* commander + starbase combination found -- launch attack */
-	    batx = game.state.baseqx[j];
-	    baty = game.state.baseqy[j];
+	    game.batx = game.state.baseqx[j];
+	    game.baty = game.state.baseqy[j];
 	    game.future[FCDBAS] = game.state.date+1.0+3.0*Rand();
-	    if (isatb) /* extra time if SC already attacking */
+	    if (game.isatb) /* extra time if SC already attacking */
 		game.future[FCDBAS] += game.future[FSCDBAS]-game.state.date;
-	    game.future[FBATTAK] = game.future[FCDBAS] +expran(0.3*intime);
-	    iseenit = 0;
+	    game.future[FBATTAK] = game.future[FCDBAS] +expran(0.3*game.intime);
+	    game.iseenit = 0;
 	    if (game.damage[DRADIO] != 0.0 &&
-		condit != IHDOCKED) break; /* No warning :-( */
-	    iseenit = 1;
+		game.condit != IHDOCKED) break; /* No warning :-( */
+	    game.iseenit = 1;
 	    if (ipage==0) pause_game(1);
 	    ipage = 1;
 	    skip(1);
 	    proutn("Lt. Uhura-  \"Captain, the starbase in ");
-	    prout(cramlc(quadrant, batx, baty));
+	    prout(cramlc(quadrant, game.batx, game.baty));
 	    prout("   reports that it is under attack and that it can");
 	    proutn("   hold out only until stardate %d",
 		   (int)game.future[FCDBAS]);
 	    prout(".\"");
-	    if (resting) {
+	    if (game.resting) {
 		skip(1);
 		proutn("Mr. Spock-  \"Captain, shall we cancel the rest period?\" ");
 		if (ja()) {
-		    resting = 0;
-		    Time = 0.0;
+		    game.resting = 0;
+		    game.optime = 0.0;
 		    return;
 		}
 	    }
 	    break;
 	case FSCDBAS: /* Supercommander destroys base */
 	    game.future[FSCDBAS] = FOREVER;
-	    isatb = 2;
+	    game.isatb = 2;
 	    if (!game.state.galaxy[game.state.isx][game.state.isy].starbase) 
 		break; /* WAS RETURN! */
-	    ixhold = batx;
-	    iyhold = baty;
-	    batx = game.state.isx;
-	    baty = game.state.isy;
+	    ixhold = game.batx;
+	    iyhold = game.baty;
+	    game.batx = game.state.isx;
+	    game.baty = game.state.isy;
 	case FCDBAS: /* Commander succeeds in destroying base */
 	    if (line==FCDBAS) {
 		game.future[FCDBAS] = FOREVER;
 		/* find the lucky pair */
 		for_commanders(i)
-		    if (game.state.cx[i]==batx && game.state.cy[i]==baty) 
+		    if (game.state.cx[i]==game.batx && game.state.cy[i]==game.baty) 
 			break;
 		if (i > game.state.remcom || game.state.rembase == 0 ||
-		    !game.state.galaxy[batx][baty].starbase) {
+		    !game.state.galaxy[game.batx][game.baty].starbase) {
 		    /* No action to take after all */
-		    batx = baty = 0;
+		    game.batx = game.baty = 0;
 		    break;
 		}
 	    }
 	    /* Code merges here for any commander destroying base */
 	    /* Not perfect, but will have to do */
 	    /* Handle case where base is in same quadrant as starship */
-	    if (batx==quadx && baty==quady) {
-		game.state.chart[batx][baty].starbase = FALSE;
-		game.quad[basex][basey]= IHDOT;
-		basex=basey=0;
+	    if (game.batx==game.quadx && game.baty==game.quady) {
+		game.state.chart[game.batx][game.baty].starbase = FALSE;
+		game.quad[game.basex][game.basey]= IHDOT;
+		game.basex=game.basey=0;
 		newcnd();
 		skip(1);
 		prout("Spock-  \"Captain, I believe the starbase has been destroyegame.state.\"");
 	    }
 	    else if (game.state.rembase != 1 &&
-		     (game.damage[DRADIO] <= 0.0 || condit == IHDOCKED)) {
+		     (game.damage[DRADIO] <= 0.0 || game.condit == IHDOCKED)) {
 		/* Get word via subspace radio */
 		if (ipage==0) pause_game(1);
 		ipage = 1;
 		skip(1);
 		prout("Lt. Uhura-  \"Captain, Starfleet Command reports that");
 		proutn("   the starbase in ");
-		proutn(cramlc(quadrant, batx, baty));
+		proutn(cramlc(quadrant, game.batx, game.baty));
 		prout(" has been destroyed by");
-		if (isatb==2) prout("the Klingon Super-Commander");
+		if (game.isatb==2) prout("the Klingon Super-Commander");
 		else prout("a Klingon Commander");
-		game.state.chart[batx][baty].starbase = FALSE;
+		game.state.chart[game.batx][game.baty].starbase = FALSE;
 	    }
 	    /* Remove Starbase from galaxy */
-	    game.state.galaxy[batx][baty].starbase = FALSE;
+	    game.state.galaxy[game.batx][game.baty].starbase = FALSE;
 	    for_starbases(i)
-		if (game.state.baseqx[i]==batx && game.state.baseqy[i]==baty) {
+		if (game.state.baseqx[i]==game.batx && game.state.baseqy[i]==game.baty) {
 		    game.state.baseqx[i]=game.state.baseqx[game.state.rembase];
 		    game.state.baseqy[i]=game.state.baseqy[game.state.rembase];
 		}
 	    game.state.rembase--;
-	    if (isatb == 2) {
+	    if (game.isatb == 2) {
 		/* reinstate a commander's base attack */
-		batx = ixhold;
-		baty = iyhold;
-		isatb = 0;
+		game.batx = ixhold;
+		game.baty = iyhold;
+		game.isatb = 0;
 	    }
 	    else {
-		batx = baty = 0;
+		game.batx = game.baty = 0;
 	    }
 	    break;
 	case FSCMOVE: /* Supercommander moves */
 	    game.future[FSCMOVE] = game.state.date+0.2777;
-	    if (ientesc+istract==0 &&
-		isatb!=1 &&
-		(iscate!=1 || justin==1)) scom(&ipage);
+	    if (game.ientesc+istract==0 &&
+		game.isatb!=1 &&
+		(game.iscate!=1 || game.justin==1)) scom(&ipage);
 	    break;
 	case FDSPROB: /* Move deep space probe */
 	    game.future[FDSPROB] = game.state.date + 0.01;
-	    probex += probeinx;
-	    probey += probeiny;
-	    i = (int)(probex/QUADSIZE +0.05);
-	    j = (int)(probey/QUADSIZE + 0.05);
-	    if (probecx != i || probecy != j) {
-		probecx = i;
-		probecy = j;
+	    game.probex += game.probeinx;
+	    game.probey += game.probeiny;
+	    i = (int)(game.probex/QUADSIZE +0.05);
+	    j = (int)(game.probey/QUADSIZE + 0.05);
+	    if (game.probecx != i || game.probecy != j) {
+		game.probecx = i;
+		game.probecy = j;
 		if (!VALID_QUADRANT(i, j) ||
-		    game.state.galaxy[probecx][probecy].supernova) {
+		    game.state.galaxy[game.probecx][game.probecy].supernova) {
 		    // Left galaxy or ran into supernova
-		    if (game.damage[DRADIO]==0.0 || condit == IHDOCKED) {
+		    if (game.damage[DRADIO]==0.0 || game.condit == IHDOCKED) {
 			if (ipage==0) pause_game(1);
 			ipage = 1;
 			skip(1);
@@ -320,30 +320,30 @@
 		    game.future[FDSPROB] = FOREVER;
 		    break;
 		}
-		if (game.damage[DRADIO]==0.0   || condit == IHDOCKED) {
+		if (game.damage[DRADIO]==0.0   || game.condit == IHDOCKED) {
 		    if (ipage==0) pause_game(1);
 		    ipage = 1;
 		    skip(1);
 		    proutn("Lt. Uhura-  \"The deep space probe is now in ");
-		    proutn(cramlc(quadrant, probecx, probecy));
+		    proutn(cramlc(quadrant, game.probecx, game.probecy));
 		    prout(".\"");
 		}
 	    }
 	    /* Update star chart if Radio is working or have access to
 	       radio. */
-	    if (game.damage[DRADIO] == 0.0 || condit == IHDOCKED) {
-		game.state.chart[probecx][probecy].klingons = game.state.galaxy[probecx][probecy].klingons;
-		game.state.chart[probecx][probecy].starbase = game.state.galaxy[probecx][probecy].starbase;
-		game.state.chart[probecx][probecy].stars = game.state.galaxy[probecx][probecy].stars;
-		game.state.galaxy[probecx][probecy].charted = TRUE;
+	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED) {
+		game.state.chart[game.probecx][game.probecy].klingons = game.state.galaxy[game.probecx][game.probecy].klingons;
+		game.state.chart[game.probecx][game.probecy].starbase = game.state.galaxy[game.probecx][game.probecy].starbase;
+		game.state.chart[game.probecx][game.probecy].stars = game.state.galaxy[game.probecx][game.probecy].stars;
+		game.state.galaxy[game.probecx][game.probecy].charted = TRUE;
 	    }
-	    proben--; // One less to travel
-	    if (proben == 0 && isarmed &&
-		game.state.galaxy[probecx][probecy].stars) {
+	    game.proben--; // One less to travel
+	    if (game.proben == 0 && game.isarmed &&
+		game.state.galaxy[game.probecx][game.probecy].stars) {
 		/* lets blow the sucker! */
 		snova(1,0);
 		game.future[FDSPROB] = FOREVER;
-		if (game.state.galaxy[quadx][quady].supernova) 
+		if (game.state.galaxy[game.quadx][game.quady].supernova) 
 		    return;
 	    }
 	    break;
@@ -357,7 +357,7 @@
     int key;
     double temp, delay, origTime;
 
-    ididit = 0;
+    game.ididit = 0;
     for (;;) {
 	key = scan();
 	if (key  != IHEOL) break;
@@ -370,42 +370,42 @@
     }
     origTime = delay = aaitem;
     if (delay <= 0.0) return;
-    if (delay >= game.state.remtime || nenhere != 0) {
+    if (delay >= game.state.remtime || game.nenhere != 0) {
 	proutn("Are you sure? ");
 	if (ja() == 0) return;
     }
 
     /* Alternate resting periods (events) with attacks */
 
-    resting = 1;
+    game.resting = 1;
     do {
-	if (delay <= 0) resting = 0;
-	if (resting == 0) {
+	if (delay <= 0) game.resting = 0;
+	if (game.resting == 0) {
 	    prout("%d stardates left.", (int)game.state.remtime);
 	    return;
 	}
-	temp = Time = delay;
+	temp = game.optime = delay;
 
-	if (nenhere) {
+	if (game.nenhere) {
 	    double rtime = 1.0 + Rand();
 	    if (rtime < temp) temp = rtime;
-	    Time = temp;
+	    game.optime = temp;
 	}
-	if (Time < delay) attack(0);
-	if (alldone) return;
+	if (game.optime < delay) attack(0);
+	if (game.alldone) return;
 	events();
-	ididit = 1;
-	if (alldone) return;
+	game.ididit = 1;
+	if (game.alldone) return;
 	delay -= temp;
 	/* Repair Deathray if long rest at starbase */
-	if (origTime-delay >= 9.99 && condit == IHDOCKED)
+	if (origTime-delay >= 9.99 && game.condit == IHDOCKED)
 	    game.damage[DDRAY] = 0.0;
     } while 
 	// leave if quadrant supernovas
-	(!game.state.galaxy[quadx][quady].supernova);
+	(!game.state.galaxy[game.quadx][game.quady].supernova);
 
-    resting = 0;
-    Time = 0;
+    game.resting = 0;
+    game.optime = 0;
 }
 
 void nova(int ix, int iy) 
@@ -424,7 +424,7 @@
     game.quad[ix][iy] = IHDOT;
     crmena(1, IHSTAR, 2, ix, iy);
     prout(" novas.");
-    game.state.galaxy[quadx][quady].stars--;
+    game.state.galaxy[game.quadx][game.quady].stars--;
     game.state.starkl++;
 	
     /* Set up stack to recursively trigger adjacent stars */
@@ -459,34 +459,34 @@
 			top2++;
 			hits[top2][1]=ii;
 			hits[top2][2]=jj;
-			game.state.galaxy[quadx][quady].stars -= 1;
+			game.state.galaxy[game.quadx][game.quady].stars -= 1;
 			game.state.starkl++;
 			crmena(1, IHSTAR, 2, ii, jj);
 			prout(" novas.");
 			game.quad[ii][jj] = IHDOT;
 			break;
 		    case IHP: /* Destroy planet */
-			game.state.galaxy[quadx][quady].planets -= 1;
+			game.state.galaxy[game.quadx][game.quady].planets -= 1;
 			game.state.nplankl++;
 			crmena(1, IHP, 2, ii, jj);
 			prout(" destroyed.");
-			DESTROY(&game.state.plnets[iplnet]);
-			iplnet = plnetx = plnety = 0;
-			if (landed == 1) {
+			DESTROY(&game.state.plnets[game.iplnet]);
+			game.iplnet = game.plnetx = game.plnety = 0;
+			if (game.landed == 1) {
 			    finish(FPNOVA);
 			    return;
 			}
 			game.quad[ii][jj] = IHDOT;
 			break;
 		    case IHB: /* Destroy base */
-			game.state.galaxy[quadx][quady].starbase = FALSE;
+			game.state.galaxy[game.quadx][game.quady].starbase = FALSE;
 			for_starbases(i)
-			    if (game.state.baseqx[i]==quadx && game.state.baseqy[i]==quady) 
+			    if (game.state.baseqx[i]==game.quadx && game.state.baseqy[i]==game.quady) 
 				break;
 			game.state.baseqx[i] = game.state.baseqx[game.state.rembase];
 			game.state.baseqy[i] = game.state.baseqy[game.state.rembase];
 			game.state.rembase--;
-			basex = basey = 0;
+			game.basex = game.basey = 0;
 			game.state.basekl++;
 			newcnd();
 			crmena(1, IHB, 2, ii, jj);
@@ -496,25 +496,25 @@
 		    case IHE: /* Buffet ship */
 		    case IHF:
 			prout("***Starship buffeted by nova.");
-			if (shldup) {
-			    if (shield >= 2000.0) shield -= 2000.0;
+			if (game.shldup) {
+			    if (game.shield >= 2000.0) game.shield -= 2000.0;
 			    else {
-				double diff = 2000.0 - shield;
-				energy -= diff;
-				shield = 0.0;
-				shldup = 0;
+				double diff = 2000.0 - game.shield;
+				game.energy -= diff;
+				game.shield = 0.0;
+				game.shldup = 0;
 				prout("***Shields knocked out.");
-				game.damage[DSHIELD] += 0.005*damfac*Rand()*diff;
+				game.damage[DSHIELD] += 0.005*game.damfac*Rand()*diff;
 			    }
 			}
-			else energy -= 2000.0;
-			if (energy <= 0) {
+			else game.energy -= 2000.0;
+			if (game.energy <= 0) {
 			    finish(FNOVA);
 			    return;
 			}
 			/* add in course nova contributes to kicking starship*/
-			icx += sectx-hits[mm][1];
-			icy += secty-hits[mm][2];
+			icx += game.sectx-hits[mm][1];
+			icy += game.secty-hits[mm][2];
 			kount++;
 			break;
 		    case IHK: /* kill klingon */
@@ -558,7 +558,7 @@
 			game.quad[newcx][newcy] = iquad;
 			game.kx[ll] = newcx;
 			game.ky[ll] = newcy;
-			game.kavgd[ll] = sqrt(square(sectx-newcx)+square(secty-newcy));
+			game.kavgd[ll] = sqrt(square(game.sectx-newcx)+square(game.secty-newcy));
 			game.kdist[ll] = game.kavgd[ll];
 			skip(1);
 			break;
@@ -573,18 +573,18 @@
 	return;
 
     /* Starship affected by nova -- kick it away. */
-    dist = kount*0.1;
+    game.dist = kount*0.1;
     if (icx) icx = (icx < 0 ? -1 : 1);
     if (icy) icy = (icy < 0 ? -1 : 1);
-    direc = course[3*(icx+1)+icy+2];
-    if (direc == 0.0) dist = 0.0;
-    if (dist == 0.0) return;
-    Time = 10.0*dist/16.0;
+    game.direc = course[3*(icx+1)+icy+2];
+    if (game.direc == 0.0) game.dist = 0.0;
+    if (game.dist == 0.0) return;
+    game.optime = 10.0*game.dist/16.0;
     skip(1);
     prout("Force of nova displaces starship.");
-    iattak=2;	/* Eliminates recursion problem */
+    game.iattak=2;	/* Eliminates recursion problem */
     imove();
-    Time = 10.0*dist/16.0;
+    game.optime = 10.0*game.dist/16.0;
     return;
 }
 	
@@ -601,8 +601,8 @@
     if (insy== 0) {
 	if (insx == 1) {
 	    /* NOVAMAX being used */
-	    nqx = probecx;
-	    nqy = probecy;
+	    nqx = game.probecx;
+	    nqy = game.probecy;
 	}
 	else {
 	    int stars = 0;
@@ -624,19 +624,19 @@
 		if (num <=0) break;
 	    }
 #ifdef DEBUG
-	    if (idebug) {
+	    if (game.idebug) {
 		proutn("Super nova here?");
 		if (ja()==1) {
-		    nqx = quadx;
-		    nqy = quady;
+		    nqx = game.quadx;
+		    nqy = game.quady;
 		}
 	    }
 #endif
 	}
 
-	if (nqx != quady || nqy != quady || justin != 0) {
+	if (nqx != game.quady || nqy != game.quady || game.justin != 0) {
 	    /* it isn't here, or we just entered (treat as inroute) */
-	    if (game.damage[DRADIO] == 0.0 || condit == IHDOCKED) {
+	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED) {
 		skip(1);
 		prout("Message from Starfleet Command       Stardate %.2f", game.state.date);
 		prout("     Supernova in %s; caution advised.",
@@ -667,14 +667,14 @@
 	prouts("***RED ALERT!  RED ALERT!");
 	skip(1);
 	prout("***Incipient supernova detected at ", cramlc(sector, nsx, nsy));
-	nqx = quadx;
-	nqy = quady;
-	if (square(nsx-sectx) + square(nsy-secty) <= 2.1) {
+	nqx = game.quadx;
+	nqy = game.quady;
+	if (square(nsx-game.sectx) + square(nsy-game.secty) <= 2.1) {
 	    proutn("Emergency override attempts t");
 	    prouts("***************");
 	    skip(1);
 	    stars();
-	    alldone=1;
+	    game.alldone=1;
 	}
     }
     /* destroy any Klingons in supernovaed quadrant */
@@ -683,7 +683,7 @@
     comdead = iscdead = 0;
     if (nqx==game.state.isx && nqy == game.state.isy) {
 	/* did in the Supercommander! */
-	game.state.nscrem = game.state.isx = game.state.isy = isatb = iscate = 0;
+	game.state.nscrem = game.state.isx = game.state.isy = game.isatb = game.iscate = 0;
 	iscdead = 1;
 	game.future[FSCMOVE] = game.future[FSCDBAS] = FOREVER;
     }
@@ -710,7 +710,7 @@
     npdead = num - nrmdead*10;
     if (npdead) {
 	int l;
-	for (l = 0; l < inplan; l++)
+	for (l = 0; l < game.inplan; l++)
 	    if (game.state.plnets[l].x == nqx && game.state.plnets[l].y == nqy) {
 		DESTROY(&game.state.plnets[l]);
 	    }
@@ -734,12 +734,12 @@
 	game.state.nplankl += npdead;
     }
     /* mark supernova in galaxy and in star chart */
-    if ((quadx == nqx && quady == nqy) ||
+    if ((game.quadx == nqx && game.quady == nqy) ||
 	game.damage[DRADIO] == 0 ||
-	condit == IHDOCKED)
+	game.condit == IHDOCKED)
 	game.state.galaxy[nqx][nqy].supernova = TRUE;
     /* If supernova destroys last klingons give special message */
-    if (KLINGREM==0 && (nqx != quadx || nqy != quady)) {
+    if (KLINGREM==0 && (nqx != game.quadx || nqy != game.quady)) {
 	skip(2);
 	if (insx == 0) prout("Lucky you!");
 	proutn("A supernova in %s has just destroyed the last Klingons.",
@@ -748,7 +748,7 @@
 	return;
     }
     /* if some Klingons remain, continue or die in supernova */
-    if (alldone) finish(FSNOVAED);
+    if (game.alldone) finish(FSNOVAED);
     return;
 }
 		

Modified: trunk/src/finish.c
===================================================================
--- trunk/src/finish.c	2006-09-14 18:25:06 UTC (rev 560)
+++ trunk/src/finish.c	2006-09-14 20:42:27 UTC (rev 561)
@@ -48,17 +48,17 @@
 void kaboom(void) 
 {
     stars();
-    if (ship==IHE) prouts("***");
+    if (game.ship==IHE) prouts("***");
     prouts("********* Entropy of ");
     crmshp();
     prouts(" maximized *********");
     skip(1);
     stars();
     skip(1);
-    if (nenhere != 0) {
-	double whammo = 25.0 * energy;
+    if (game.nenhere != 0) {
+	double whammo = 25.0 * game.energy;
 	int l=1;
-	while (l <= nenhere) {
+	while (l <= game.nenhere) {
 	    if (game.kpower[l]*game.kdist[l] <= whammo) 
 		deadkl(game.kx[l],game.ky[l], game.quad[game.kx[l]][game.ky[l]], game.kx[l], game.ky[l]);
 	    l++;
@@ -71,7 +71,7 @@
 void finish(FINTYPE ifin) 
 {
     int igotit = 0;
-    alldone = 1;
+    game.alldone = 1;
     skip(3);
     prout("It is stardate %.1f.", game.state.date);
     skip(1);
@@ -83,21 +83,21 @@
 
 	prout("You have smashed the Klingon invasion fleet and saved");
 	prout("the Federation.");
-	gamewon=1;
-	if (alive) {
+	game.gamewon=1;
+	if (game.alive) {
 	    double badpt;
-	    badpt = 5.0*game.state.starkl + casual + 10.0*game.state.nplankl +
-		45.*nhelp+100.*game.state.basekl;
-	    if (ship == IHF) badpt += 100.0;
-	    else if (ship == 0) badpt += 200.0;
+	    badpt = 5.0*game.state.starkl + game.casual + 10.0*game.state.nplankl +
+		45.*game.nhelp+100.*game.state.basekl;
+	    if (game.ship == IHF) badpt += 100.0;
+	    else if (game.ship == 0) badpt += 200.0;
 	    if (badpt < 100.0) badpt = 0.0;	// Close enough!
-	    if (game.state.date-indate < 5.0 ||
+	    if (game.state.date-game.indate < 5.0 ||
 		// killsPerDate >= RateMax
-		KLINGKILLED/(game.state.date-indate) >=
-		0.1*skill*(skill+1.0) + 0.1 + 0.008*badpt) {
+		KLINGKILLED/(game.state.date-game.indate) >=
+		0.1*game.skill*(game.skill+1.0) + 0.1 + 0.008*badpt) {
 		skip(1);
 		prout("In fact, you have done so well that Starfleet Command");
-		switch (skill) {
+		switch (game.skill) {
 		case SKILL_NOVICE:
 		    prout("promotes you one step in rank from \"Novice\" to \"Fair\".");
 		    break;
@@ -132,10 +132,10 @@
 		    skip(1);
 		    break;
 		}
-		if (skill >= SKILL_EXPERT) {
-		    if (thawed
+		if (game.skill >= SKILL_EXPERT) {
+		    if (game.thawed
 #ifdef DEBUG
-			&& !idebug
+			&& !game.idebug
 #endif
 			)
 			prout("You cannot get a citation, so...");
@@ -168,7 +168,7 @@
 	else {
 	    prout("found guilty and");
 	    prout("sentenced to death by slow torture.");
-	    alive = 0;
+	    game.alive = 0;
 	}
 	score();
 	return;
@@ -282,12 +282,12 @@
 	prout("You are crushed into extremely dense matter.");
 	break;
     }
-    if (ship==IHF) ship= 0;
-    else if (ship == IHE) ship = IHF;
-    alive = 0;
+    if (game.ship==IHF) game.ship= 0;
+    else if (game.ship == IHE) game.ship = IHF;
+    game.alive = 0;
     if (KLINGREM != 0) {
-	double goodies = game.state.remres/inresor;
-	double baddies = (game.state.remkl + 2.0*game.state.remcom)/(inkling+2.0*incom);
+	double goodies = game.state.remres/game.inresor;
+	double baddies = (game.state.remkl + 2.0*game.state.remcom)/(game.inkling+2.0*game.incom);
 	if (goodies/baddies >= 1.0+0.5*Rand()) {
 	    prout("As a result of your actions, a treaty with the Klingon");
 	    prout("Empire has been signed. The terms of the treaty are");
@@ -307,30 +307,30 @@
 	prout("martyr and a hero. Someday maybe they'll erect a");
 	prout("statue in your memory. Rest in peace, and try not");
 	prout("to think about pigeons.");
-	gamewon = 1;
+	game.gamewon = 1;
     }
     score();
 }
 
 void score(void) 
 {
-    double timused = game.state.date - indate;
+    double timused = game.state.date - game.indate;
     int ithperd, iwon, klship;
 
-    iskill = skill;
+    iskill = game.skill;
     if ((timused == 0 || KLINGREM != 0) && timused < 5.0) timused = 5.0;
     perdate = KLINGKILLED/timused;
     ithperd = 500*perdate + 0.5;
     iwon = 0;
-    if (gamewon) iwon = 100*skill;
-    if (ship == IHE) klship = 0;
-    else if (ship == IHF) klship = 1;
+    if (game.gamewon) iwon = 100*game.skill;
+    if (game.ship == IHE) klship = 0;
+    else if (game.ship == IHF) klship = 1;
     else klship = 2;
-    if (gamewon == 0) game.state.nromrem = 0; // None captured if no win
+    if (game.gamewon == 0) game.state.nromrem = 0; // None captured if no win
     iscore = 10*NKILLK + 50*NKILLC + ithperd + iwon
-	- 100*game.state.basekl - 100*klship - 45*nhelp -5*game.state.starkl - casual
+	- 100*game.state.basekl - 100*klship - 45*game.nhelp -5*game.state.starkl - game.casual
 	+ 20*NKILLROM + 200*NKILLSC - 10*game.state.nplankl + game.state.nromrem;
-    if (alive == 0) iscore -= 200;
+    if (game.alive == 0) iscore -= 200;
     skip(2);
     prout("Your score --");
     if (NKILLROM)
@@ -360,20 +360,20 @@
     if (game.state.basekl)
 	prout("%6d bases destroyed by your action     %5d",
 	      game.state.basekl, -100*game.state.basekl);
-    if (nhelp)
+    if (game.nhelp)
 	prout("%6d calls for help from starbase       %5d",
-	      nhelp, -45*nhelp);
-    if (casual)
+	      game.nhelp, -45*game.nhelp);
+    if (game.casual)
 	prout("%6d casualties incurred                %5d",
-	      casual, -casual);
+	      game.casual, -game.casual);
     if (klship)
 	prout("%6d ship(s) lost or destroyed          %5d",
 	      klship, -100*klship);
-    if (alive==0)
+    if (game.alive==0)
 	prout("Penalty for getting yourself killed        -200");
-    if (gamewon) {
+    if (game.gamewon) {
 	proutn("Bonus for winning ");
-	switch (skill) {
+	switch (game.skill) {
 	case SKILL_NOVICE:   proutn("Novice game  "); break;
 	case SKILL_FAIR:     proutn("Fair game    "); break;
 	case SKILL_GOOD:     proutn("Good game    "); break;

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-09-14 18:25:06 UTC (rev 560)
+++ trunk/src/io.c	2006-09-14 20:42:27 UTC (rev 561)
@@ -81,13 +81,13 @@
     char *prompt;
     char buf[BUFSIZ];
     if (i==1) {
-	if (skill > SKILL_FAIR)
+	if (game.skill > SKILL_FAIR)
 	    prompt = "[ANOUNCEMENT ARRIVING...]";
 	else
 	    prompt = "[IMPORTANT ANNOUNCEMENT ARRIVING -- PRESS ENTER TO CONTINUE]";
     }
     else {
-	if (skill > SKILL_FAIR)
+	if (game.skill > SKILL_FAIR)
 	    prompt = "[CONTINUE?]";
 	else
 	    prompt = "[PRESS ENTER TO CONTINUE]";
@@ -383,7 +383,7 @@
 	    skip(1);
 	proutn("%d - %d   ", ix, iy);
     } else {
-	if (game.damage[DSRSENS]==0 || condit==IHDOCKED) {
+	if (game.damage[DSRSENS]==0 || game.condit==IHDOCKED) {
 	    if (i != 1 && l == 1) {
 		drawmaps(2);
 		delay(400);

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-14 18:25:06 UTC (rev 560)
+++ trunk/src/moving.c	2006-09-14 20:42:27 UTC (rev 561)
@@ -10,12 +10,12 @@
         finald, finalx, finaly, stopegy, probf;
     int trbeam = 0, n, l, ix=0, iy=0, kink, kinks, iquad;
 
-    if (inorbit) {
+    if (game.inorbit) {
 	prout("Helmsman Sulu- \"Leaving standard orbit.\"");
-	inorbit = FALSE;
+	game.inorbit = FALSE;
     }
 
-    angle = ((15.0 - direc) * 0.5235988);
+    angle = ((15.0 - game.direc) * 0.5235988);
     deltax = -sin(angle);
     deltay = cos(angle);
     if (fabs(deltax) > fabs(deltay))
@@ -27,17 +27,17 @@
     deltax /= bigger;
 
     /* If tractor beam is to occur, don't move full distance */
-    if (game.state.date+Time >= game.future[FTBEAM]) {
+    if (game.state.date+game.optime >= game.future[FTBEAM]) {
 	trbeam = 1;
-	condit = IHRED;
-	dist = dist*(game.future[FTBEAM]-game.state.date)/Time + 0.1;
-	Time = game.future[FTBEAM] - game.state.date + 1e-5;
+	game.condit = IHRED;
+	game.dist = game.dist*(game.future[FTBEAM]-game.state.date)/game.optime + 0.1;
+	game.optime = game.future[FTBEAM] - game.state.date + 1e-5;
     }
     /* Move within the quadrant */
-    game.quad[sectx][secty] = IHDOT;
-    x = sectx;
-    y = secty;
-    n = 10.0*dist*bigger+0.5;
+    game.quad[game.sectx][game.secty] = IHDOT;
+    x = game.sectx;
+    y = game.secty;
+    n = 10.0*game.dist*bigger+0.5;
 
     if (n > 0) {
 	for (l = 1; l <= n; l++) {
@@ -46,7 +46,7 @@
 	    if (!VALID_SECTOR(ix, iy)) {
 		/* Leaving quadrant -- allow final enemy attack */
 		/* Don't do it if being pushed by Nova */
-		if (nenhere != 0 && iattak != 2) {
+		if (game.nenhere != 0 && game.iattak != 2) {
 		    newcnd();
 		    for_local_enemies(l) {
 			finald = sqrt((ix-game.kx[l])*(double)(ix-game.kx[l]) +
@@ -54,19 +54,19 @@
 			game.kavgd[l] = 0.5 * (finald+game.kdist[l]);
 		    }
 		    /*
-		     * Stas Sergeev added the condition
+		     * Stas Sergeev added the game.condition
 		     * that attacks only happen if Klingons
 		     * are present and your skill is good.
 		     */
-		    if (skill > SKILL_GOOD && klhere > 0 && !game.state.galaxy[quadx][quady].supernova)
+		    if (game.skill > SKILL_GOOD && game.klhere > 0 && !game.state.galaxy[game.quadx][game.quady].supernova)
 			attack(0);
-		    if (alldone) return;
+		    if (game.alldone) return;
 		}
 		/* compute final position -- new quadrant and sector */
-		x = QUADSIZE*(quadx-1)+sectx;
-		y = QUADSIZE*(quady-1)+secty;
-		ix = x+10.0*dist*bigger*deltax+0.5;
-		iy = y+10.0*dist*bigger*deltay+0.5;
+		x = QUADSIZE*(game.quadx-1)+game.sectx;
+		y = QUADSIZE*(game.quady-1)+game.secty;
+		ix = x+10.0*game.dist*bigger*deltax+0.5;
+		iy = y+10.0*game.dist*bigger*deltay+0.5;
 		/* check for edge of galaxy */
 		kinks = 0;
 		do {
@@ -91,8 +91,8 @@
 		} while (kink);
 
 		if (kinks) {
-		    nkinks += 1;
-		    if (nkinks == 3) {
+		    game.nkinks += 1;
+		    if (game.nkinks == 3) {
 			/* Three strikes -- you're out! */
 			finish(FNEG3);
 			return;
@@ -104,24 +104,24 @@
 		}
 		/* Compute final position in new quadrant */
 		if (trbeam) return; /* Don't bother if we are to be beamed */
-		quadx = (ix+(QUADSIZE-1))/QUADSIZE;
-		quady = (iy+(QUADSIZE-1))/QUADSIZE;
-		sectx = ix - QUADSIZE*(quadx-1);
-		secty = iy - QUADSIZE*(quady-1);
+		game.quadx = (ix+(QUADSIZE-1))/QUADSIZE;
+		game.quady = (iy+(QUADSIZE-1))/QUADSIZE;
+		game.sectx = ix - QUADSIZE*(game.quadx-1);
+		game.secty = iy - QUADSIZE*(game.quady-1);
 		skip(1);
 		prout("Entering %s.",
-		      cramlc(quadrant, quadx, quady));
-		game.quad[sectx][secty] = ship;
+		      cramlc(quadrant, game.quadx, game.quady));
+		game.quad[game.sectx][game.secty] = game.ship;
 		newqad(0);
-		if (skill>SKILL_NOVICE) attack(0);
+		if (game.skill>SKILL_NOVICE) attack(0);
 		return;
 	    }
 	    iquad = game.quad[ix][iy];
 	    if (iquad != IHDOT) {
 		/* object encountered in flight path */
-		stopegy = 50.0*dist/Time;
-		dist=0.1*sqrt((sectx-ix)*(double)(sectx-ix) +
-			      (secty-iy)*(double)(secty-iy));
+		stopegy = 50.0*game.dist/game.optime;
+		game.dist=0.1*sqrt((game.sectx-ix)*(double)(game.sectx-ix) +
+			      (game.secty-iy)*(double)(game.secty-iy));
 		switch (iquad) {
 		case IHT: /* Ram a Tholian */
 		case IHK: /* Ram enemy ship */
@@ -129,11 +129,11 @@
 		case IHS:
 		case IHR:
 		case IHQUEST:
-		    sectx = ix;
-		    secty = iy;
-		    ram(0, iquad, sectx, secty);
-		    finalx = sectx;
-		    finaly = secty;
+		    game.sectx = ix;
+		    game.secty = iy;
+		    ram(0, iquad, game.sectx, game.secty);
+		    finalx = game.sectx;
+		    finaly = game.secty;
 		    break;
 		case IHBLANK:
 		    skip(1);
@@ -152,7 +152,7 @@
 		    for (l=0;l<NDEVICES;l++)
 			if (game.damage[l]>0) 
 			    n++;
-		    probf=pow(1.4,(energy+shield)/5000.0-1.0)*pow(1.3,1.0/(n+1)-1.0);
+		    probf=pow(1.4,(game.energy+game.shield)/5000.0-1.0)*pow(1.3,1.0/(n+1)-1.0);
 		    if ((game.options & OPTION_BLKHOLE) && Rand()>probf) 
 			timwrp();
 		    else 
@@ -170,12 +170,12 @@
 		    prout(";");
 		    proutn("Emergency stop required ");
 		    prout("%2d units of energy.", (int)stopegy);
-		    energy -= stopegy;
+		    game.energy -= stopegy;
 		    finalx = x-deltax+0.5;
-		    sectx = finalx;
+		    game.sectx = finalx;
 		    finaly = y-deltay+0.5;
-		    secty = finaly;
-		    if (energy <= 0) {
+		    game.secty = finaly;
+		    if (game.energy <= 0) {
 			finish(FNRG);
 			return;
 		    }
@@ -184,17 +184,17 @@
 		goto no_quad_change;	/* sorry! */
 	    }
 	}
-	dist = 0.1*sqrt((sectx-ix)*(double)(sectx-ix) +
-			(secty-iy)*(double)(secty-iy));
-	sectx = ix;
-	secty = iy;
+	game.dist = 0.1*sqrt((game.sectx-ix)*(double)(game.sectx-ix) +
+			(game.secty-iy)*(double)(game.secty-iy));
+	game.sectx = ix;
+	game.secty = iy;
     }
-    finalx = sectx;
-    finaly = secty;
+    finalx = game.sectx;
+    finaly = game.secty;
 no_quad_change:
     /* No quadrant change -- compute new avg enemy distances */
-    game.quad[sectx][secty] = ship;
-    if (nenhere) {
+    game.quad[game.sectx][game.secty] = game.ship;
+    if (game.nenhere) {
 	for_local_enemies(l) {
 	    finald = sqrt((ix-game.kx[l])*(double)(ix-game.kx[l]) +
 			  (iy-game.ky[l])*(double)(iy-game.ky[l]));
@@ -202,12 +202,12 @@
 	    game.kdist[l] = finald;
 	}
 	sortkl();
-	if (!game.state.galaxy[quadx][quady].supernova && iattak == 0)
+	if (!game.state.galaxy[game.quadx][game.quady].supernova && game.iattak == 0)
 	    attack(0);
 	for_local_enemies(l) game.kavgd[l] = game.kdist[l];
     }
     newcnd();
-    iattak = 0;
+    game.iattak = 0;
     drawmaps(0);
     setwnd(message_window);
     return;
@@ -216,32 +216,32 @@
 void dock(int l) 
 {
     chew();
-    if (condit == IHDOCKED && l) {
+    if (game.condit == IHDOCKED && l) {
 	prout("Already docked.");
 	return;
     }
-    if (inorbit) {
+    if (game.inorbit) {
 	prout("You must first leave standard orbit.");
 	return;
     }
-    if (basex==0 || abs(sectx-basex) > 1 || abs(secty-basey) > 1) {
+    if (game.basex==0 || abs(game.sectx-game.basex) > 1 || abs(game.secty-game.basey) > 1) {
 	crmshp();
 	prout(" not adjacent to base.");
 	return;
     }
-    condit = IHDOCKED;
+    game.condit = IHDOCKED;
     if (l) prout("Docked.");
-    ididit=1;
-    if (energy < inenrg) energy = inenrg;
-    shield = inshld;
-    torps = intorps;
-    lsupres = inlsr;
+    game.ididit=1;
+    if (game.energy < game.inenrg) game.energy = game.inenrg;
+    game.shield = game.inshld;
+    game.torps = game.intorps;
+    game.lsupres = game.inlsr;
     if (game.damage[DRADIO] == 0.0 &&
-	(game.future[FCDBAS] < FOREVER || isatb == 1) && iseenit == 0) {
+	(game.future[FCDBAS] < FOREVER || game.isatb == 1) && game.iseenit == 0) {
 	/* get attack report from base */
 	prout("Lt. Uhura- \"Captain, an important message from the starbase:\"");
 	attakreport(0);
-	iseenit = 1;
+	game.iseenit = 1;
     }
 }
 
@@ -255,7 +255,7 @@
 	   are always displayed y - x, where +y is downward! */
 
 	
-        int irowq=quadx, icolq=quady, irows, icols, itemp=0, iprompt=0, key=0;
+        int irowq=game.quadx, icolq=game.quady, irows, icols, itemp=0, iprompt=0, key=0;
 	double xi, xj, xk, xl;
 	double deltax, deltay;
 	int automatic = -1;
@@ -263,9 +263,9 @@
 	/* Get course direction and distance. If user types bad values, return
 	   with DIREC = -1.0. */
 
-	direc = -1.0;
+	game.direc = -1.0;
 	
-	if (landed == 1 && !isprobe) {
+	if (game.landed == 1 && !isprobe) {
 		prout("Dummy! You can't leave standard orbit until you");
 		proutn("are back aboard the ");
 		crmshp();
@@ -389,8 +389,8 @@
 			}
 			else prout("Ensign Chekov- \"Course laid in, Captain.\"");
 		}
-		deltax = icolq - quady + 0.1*(icols-secty);
-		deltay = quadx - irowq + 0.1*(sectx-irows);
+		deltax = icolq - game.quady + 0.1*(icols-game.secty);
+		deltay = game.quadx - irowq + 0.1*(game.sectx-irows);
 	}
 	else { /* manual */
 		while (key == IHEOL) {
@@ -421,9 +421,9 @@
 		skip(1);
 		prout("Helmsman Sulu- \"Aye, Sir.\"");
 	}
-	dist = sqrt(deltax*deltax + deltay*deltay);
-	direc = atan2(deltax, deltay)*1.90985932;
-	if (direc < 0.0) direc += 12.0;
+	game.dist = sqrt(deltax*deltax + deltay*deltay);
+	game.direc = atan2(deltax, deltay)*1.90985932;
+	if (game.direc < 0.0) game.direc += 12.0;
 	chew();
 	return;
 
@@ -435,7 +435,7 @@
 {
     double power;
 
-    ididit = 0;
+    game.ididit = 0;
     if (game.damage[DIMPULS]) {
 	chew();
 	skip(1);
@@ -443,22 +443,22 @@
 	return;
     }
 
-    if (energy > 30.0) {
+    if (game.energy > 30.0) {
 	getcd(FALSE, 0);
-	if (direc == -1.0) return;
-	power = 20.0 + 100.0*dist;
+	if (game.direc == -1.0) return;
+	power = 20.0 + 100.0*game.dist;
     }
     else
 	power = 30.0;
 
-    if (power >= energy) {
+    if (power >= game.energy) {
 	/* Insufficient power for trip */
 	skip(1);
 	prout("First Officer Spock- \"Captain, the impulse engines");
 	prout("require 20.0 units to engage, plus 100.0 units per");
-	if (energy > 30) {
+	if (game.energy > 30) {
 	    proutn("quadrant.  We can go, therefore, a maximum of %d", 
-		   (int)(0.01 * (energy-20.0)-0.05));
+		   (int)(0.01 * (game.energy-20.0)-0.05));
 	    prout(" quadrants.\"");
 	}
 	else {
@@ -468,8 +468,8 @@
 	return;
     }
     /* Make sure enough time is left for the trip */
-    Time = dist/0.095;
-    if (Time >= game.state.remtime) {
+    game.optime = game.dist/0.095;
+    if (game.optime >= game.state.remtime) {
 	prout("First Officer Spock- \"Captain, our speed under impulse");
 	prout("power is only 0.95 sectors per stardate. Are you sure");
 	proutn("we dare spend the time?\" ");
@@ -477,12 +477,12 @@
     }
     /* Activate impulse engines and pay the cost */
     imove();
-    ididit = 1;
-    if (alldone) return;
-    power = 20.0 + 100.0*dist;
-    energy -= power;
-    Time = dist/0.095;
-    if (energy <= 0) finish(FNRG);
+    game.ididit = 1;
+    if (game.alldone) return;
+    power = 20.0 + 100.0*game.dist;
+    game.energy -= power;
+    game.optime = game.dist/0.095;
+    if (game.energy <= 0) finish(FNRG);
     return;
 }
 
@@ -493,14 +493,14 @@
     double power;
 
     if (i!=2) { /* Not WARPX entry */
-	ididit = 0;
+	game.ididit = 0;
 	if (game.damage[DWARPEN] > 10.0) {
 	    chew();
 	    skip(1);
 	    prout("Engineer Scott- \"The impulse engines are damaged, Sir.\"");
 	    return;
 	}
-	if (game.damage[DWARPEN] > 0.0 && warpfac > 4.0) {
+	if (game.damage[DWARPEN] > 0.0 && game.warpfac > 4.0) {
 	    chew();
 	    skip(1);
 	    prout("Engineer Scott- \"Sorry, Captain. Until this damage");
@@ -510,25 +510,25 @@
 			
 	/* Read in course and distance */
 	getcd(FALSE, 0);
-	if (direc == -1.0) return;
+	if (game.direc == -1.0) return;
 
 	/* Make sure starship has enough energy for the trip */
-	power = (dist+0.05)*warpfac*warpfac*warpfac*(shldup+1);
+	power = (game.dist+0.05)*game.warpfac*game.warpfac*game.warpfac*(game.shldup+1);
 
 
-	if (power >= energy) {
+	if (power >= game.energy) {
 	    /* Insufficient power for trip */
-	    ididit = 0;
+	    game.ididit = 0;
 	    skip(1);
 	    prout("Engineering to bridge--");
-	    if (shldup==0 || 0.5*power > energy) {
-		iwarp = pow((energy/(dist+0.05)), 0.333333333);
+	    if (game.shldup==0 || 0.5*power > game.energy) {
+		iwarp = pow((game.energy/(game.dist+0.05)), 0.333333333);
 		if (iwarp <= 0) {
 		    prout("We can't do it, Captain. We haven't the energy.");
 		}
 		else {
 		    proutn("We haven't the energy, but we could do it at warp %d", iwarp);
-		    if (shldup) {
+		    if (game.shldup) {
 			prout(",");
 			prout("if you'll lower the shields.");
 		    }
@@ -542,29 +542,29 @@
 	}
 						
 	/* Make sure enough time is left for the trip */
-	Time = 10.0*dist/wfacsq;
-	if (Time >= 0.8*game.state.remtime) {
+	game.optime = 10.0*game.dist/game.wfacsq;
+	if (game.optime >= 0.8*game.state.remtime) {
 	    skip(1);
 	    prout("First Officer Spock- \"Captain, I compute that such");
 	    proutn("  a trip would require approximately %2.0f",
-		   100.0*Time/game.state.remtime);
+		   100.0*game.optime/game.state.remtime);
 	    prout(" percent of our");
 	    proutn("  remaining time.  Are you sure this is wise?\" ");
-	    if (ja() == 0) { ididit = 0; Time=0; return;}
+	    if (ja() == 0) { game.ididit = 0; game.optime=0; return;}
 	}
     }
     /* Entry WARPX */
-    if (warpfac > 6.0) {
+    if (game.warpfac > 6.0) {
 	/* Decide if engine damage will occur */
-	double prob = dist*(6.0-warpfac)*(6.0-warpfac)/66.666666666;
+	double prob = game.dist*(6.0-game.warpfac)*(6.0-game.warpfac)/66.666666666;
 	if (prob > Rand()) {
 	    blooey = 1;
-	    dist = Rand()*dist;
+	    game.dist = Rand()*game.dist;
 	}
 	/* Decide if time warp will occur */
-	if (0.5*dist*pow(7.0,warpfac-10.0) > Rand()) twarp=1;
+	if (0.5*game.dist*pow(7.0,game.warpfac-10.0) > Rand()) twarp=1;
 #ifdef DEBUG
-	if (idebug &&warpfac==10 && twarp==0) {
+	if (game.idebug &&game.warpfac==10 && twarp==0) {
 	    blooey=0;
 	    proutn("Force time warp? ");
 	    if (ja()==1) twarp=1;
@@ -573,7 +573,7 @@
 	if (blooey || twarp) {
 	    /* If time warp or engine damage, check path */
 	    /* If it is obstructed, don't do warp or damage */
-	    double angle = ((15.0-direc)*0.5235998);
+	    double angle = ((15.0-game.direc)*0.5235998);
 	    double deltax = -sin(angle);
 	    double deltay = cos(angle);
 	    double bigger, x, y;
@@ -585,9 +585,9 @@
 			
 	    deltax /= bigger;
 	    deltay /= bigger;
-	    n = 10.0 * dist * bigger +0.5;
-	    x = sectx;
-	    y = secty;
+	    n = 10.0 * game.dist * bigger +0.5;
+	    x = game.sectx;
+	    y = game.secty;
 	    for (l = 1; l <= n; l++) {
 		x += deltax;
 		ix = x + 0.5;
@@ -605,19 +605,19 @@
 
     /* Activate Warp Engines and pay the cost */
     imove();
-    if (alldone) return;
-    energy -= dist*warpfac*warpfac*warpfac*(shldup+1);
-    if (energy <= 0) finish(FNRG);
-    Time = 10.0*dist/wfacsq;
+    if (game.alldone) return;
+    game.energy -= game.dist*game.warpfac*game.warpfac*game.warpfac*(game.shldup+1);
+    if (game.energy <= 0) finish(FNRG);
+    game.optime = 10.0*game.dist/game.wfacsq;
     if (twarp) timwrp();
     if (blooey) {
-	game.damage[DWARPEN] = damfac*(3.0*Rand()+1.0);
+	game.damage[DWARPEN] = game.damfac*(3.0*Rand()+1.0);
 	skip(1);
 	prout("Engineering to bridge--");
 	prout("  Scott here.  The warp engines are damaged.");
 	prout("  We'll have to reduce speed to warp 4.");
     }
-    ididit = 1;
+    game.ididit = 1;
     return;
 }
 
@@ -654,19 +654,19 @@
 	prout("Helmsman Sulu- \"We can't go below warp 1, Captain.\"");
 	return;
     }
-    oldfac = warpfac;
-    warpfac = aaitem;
-    wfacsq=warpfac*warpfac;
-    if (warpfac <= oldfac || warpfac <= 6.0) {
+    oldfac = game.warpfac;
+    game.warpfac = aaitem;
+    game.wfacsq=game.warpfac*game.warpfac;
+    if (game.warpfac <= oldfac || game.warpfac <= 6.0) {
 	proutn("Helmsman Sulu- \"Warp factor %d, Captain.\"", 
-	       (int)warpfac);
+	       (int)game.warpfac);
 	return;
     }
-    if (warpfac < 8.00) {
+    if (game.warpfac < 8.00) {
 	prout("Engineer Scott- \"Aye, but our maximum safe speed is warp 6.\"");
 	return;
     }
-    if (warpfac == 10.0) {
+    if (game.warpfac == 10.0) {
 	prout("Engineer Scott- \"Aye, Captain, we'll try it.\"");
 	return;
     }
@@ -680,13 +680,13 @@
 
     chew();
     /* is captain on planet? */
-    if (landed==1) {
+    if (game.landed==1) {
 	if (game.damage[DTRANSP]) {
 	    finish(FPNOVA);
 	    return;
 	}
 	prout("Scotty rushes to the transporter controls.");
-	if (shldup) {
+	if (game.shldup) {
 	    prout("But with the shields up it's hopeless.");
 	    finish(FPNOVA);
 	}
@@ -697,28 +697,28 @@
 	    return;
 	}
 	prout("SUCCEEDS!");
-	if (imine) {
-	    imine = 0;
+	if (game.imine) {
+	    game.imine = 0;
 	    proutn("The crystals mined were ");
 	    if (Rand() <= 0.25) {
 		prout("lost.");
 	    }
 	    else {
 		prout("saved.");
-		icrystl = 1;
+		game.icrystl = 1;
 	    }
 	}
     }
     if (igrab) return;
 
     /* Check to see if captain in shuttle craft */
-    if (icraft) finish(FSTRACTOR);
-    if (alldone) return;
+    if (game.icraft) finish(FSTRACTOR);
+    if (game.alldone) return;
 
     /* Inform captain of attempt to reach safety */
     skip(1);
     do {
-	if (justin) {
+	if (game.justin) {
 	    prouts("***RED ALERT!  READ ALERT!");
 	    skip(1);
 	    proutn("The ");
@@ -732,7 +732,7 @@
 	skip(1);
 	prout("safely out of quadrant.");
 	if (game.damage[DRADIO] == 0.0)
-	    game.state.galaxy[quadx][quady].charted = TRUE;
+	    game.state.galaxy[game.quadx][game.quady].charted = TRUE;
 	/* Try to use warp engines */
 	if (game.damage[DWARPEN]) {
 	    skip(1);
@@ -740,21 +740,21 @@
 	    finish(FSNOVAED);
 	    return;
 	}
-	warpfac = 6.0+2.0*Rand();
-	wfacsq = warpfac * warpfac;
-	prout("Warp factor set to %d", (int)warpfac);
-	power = 0.75*energy;
-	dist = power/(warpfac*warpfac*warpfac*(shldup+1));
+	game.warpfac = 6.0+2.0*Rand();
+	game.wfacsq = game.warpfac * game.warpfac;
+	prout("Warp factor set to %d", (int)game.warpfac);
+	power = 0.75*game.energy;
+	game.dist = power/(game.warpfac*game.warpfac*game.warpfac*(game.shldup+1));
 	distreq = 1.4142+Rand();
-	if (distreq < dist) dist = distreq;
-	Time = 10.0*dist/wfacsq;
-	direc = 12.0*Rand();	/* How dumb! */
-	justin = 0;
-	inorbit = 0;
+	if (distreq < game.dist) game.dist = distreq;
+	game.optime = 10.0*game.dist/game.wfacsq;
+	game.direc = 12.0*Rand();	/* How dumb! */
+	game.justin = 0;
+	game.inorbit = 0;
 	warp(2);
-	if (justin == 0) {
+	if (game.justin == 0) {
 	    /* This is bad news, we didn't leave quadrant. */
-	    if (alldone) return;
+	    if (game.alldone) return;
 	    skip(1);
 	    prout("Insufficient energy to leave quadrant.");
 	    finish(FSNOVAED);
@@ -762,7 +762,7 @@
 	}
     } while 
 	/* Repeat if another snova */
-	(game.state.galaxy[quadx][quady].supernova);
+	(game.state.galaxy[game.quadx][game.quady].supernova);
     if (KLINGREM==0) 
 	finish(FWON); /* Snova killed remaining enemy. */
 }
@@ -778,34 +778,34 @@
 	game.state = game.snapsht;
 	game.state.snap = 0;
 	if (game.state.remcom) {
-	    game.future[FTBEAM] = game.state.date + expran(intime/game.state.remcom);
-	    game.future[FBATTAK] = game.state.date + expran(0.3*intime);
+	    game.future[FTBEAM] = game.state.date + expran(game.intime/game.state.remcom);
+	    game.future[FBATTAK] = game.state.date + expran(0.3*game.intime);
 	}
-	game.future[FSNOVA] = game.state.date + expran(0.5*intime);
+	game.future[FSNOVA] = game.state.date + expran(0.5*game.intime);
 	game.future[FSNAP] = game.state.date +expran(0.25*game.state.remtime); /* next snapshot will
 										  be sooner */
 	if (game.state.nscrem) game.future[FSCMOVE] = 0.2777;
-	isatb = 0;
+	game.isatb = 0;
 	game.future[FCDBAS] = game.future[FSCDBAS] = FOREVER;
-	batx = baty = 0;
+	game.batx = game.baty = 0;
 
 	/* Make sure Galileo is consistant -- Snapshot may have been taken
 	   when on planet, which would give us two Galileos! */
 	gotit = 0;
-	for (l = 0; l < inplan; l++) {
+	for (l = 0; l < game.inplan; l++) {
 	    if (game.state.plnets[l].known == shuttle_down) {
 		gotit = 1;
-		if (iscraft==1 && ship==IHE) {
+		if (game.iscraft==1 && game.ship==IHE) {
 		    prout("Checkov-  \"Security reports the Galileo has disappeared, Sir!");
-		    iscraft = 0;
+		    game.iscraft = 0;
 		}
 	    }
 	}
 	/* Likewise, if in the original time the Galileo was abandoned, but
 	   was on ship earlier, it would have vanished -- lets restore it */
-	if (iscraft==0 && gotit==0 && game.damage[DSHUTTL] >= 0.0) {
+	if (game.iscraft==0 && gotit==0 && game.damage[DSHUTTL] >= 0.0) {
 	    prout("Checkov-  \"Security reports the Galileo has reappeared in the dock!\"");
-	    iscraft = 1;
+	    game.iscraft = 1;
 	}
 	/* 
 	 * There used to be code to do the actual reconstrction here,
@@ -815,11 +815,11 @@
     }
     else {
 	/* Go forward in time */
-	Time = -0.5*intime*log(Rand());
-	prout("You are traveling forward in time %d stardates.", (int)Time);
+	game.optime = -0.5*game.intime*log(Rand());
+	prout("You are traveling forward in time %d stardates.", (int)game.optime);
 	/* cheat to make sure no tractor beams occur during time warp */
-	game.future[FTBEAM] += Time;
-	game.damage[DRADIO] += Time;
+	game.future[FTBEAM] += game.optime;
+	game.damage[DRADIO] += game.optime;
     }
     newqad(0);
     events();	/* Stas Sergeev added this -- do pending events */
@@ -830,10 +830,10 @@
     double angle, bigger;
     int key;
     /* New code to launch a deep space probe */
-    if (nprobes == 0) {
+    if (game.nprobes == 0) {
 	chew();
 	skip(1);
-	if (ship == IHE) 
+	if (game.ship == IHE) 
 	    prout("Engineer Scott- \"We have no more deep space probes, Sir.\"");
 	else
 	    prout("Ye Faerie Queene has no deep space probes.");
@@ -848,7 +848,7 @@
     if (game.future[FDSPROB] != FOREVER) {
 	chew();
 	skip(1);
-	if (game.damage[DRADIO] != 0 && condit != IHDOCKED) {
+	if (game.damage[DRADIO] != 0 && game.condit != IHDOCKED) {
 	    prout("Spock-  \"Records show the previous probe has not yet");
 	    prout("   reached its destination.\"");
 	}
@@ -860,41 +860,41 @@
 
     if (key == IHEOL) {
 	/* slow mode, so let Kirk know how many probes there are left */
-	prout(nprobes==1 ? "%d probe left." : "%d probes left.", nprobes);
+	prout(game.nprobes==1 ? "%d probe left." : "%d probes left.", game.nprobes);
 	proutn("Are you sure you want to fire a probe? ");
 	if (ja()==0) return;
     }
 
-    isarmed = FALSE;
+    game.isarmed = FALSE;
     if (key == IHALPHA && strcmp(citem,"armed") == 0) {
-	isarmed = TRUE;
+	game.isarmed = TRUE;
 	key = scan();
     }
     else if (key == IHEOL) {
 	proutn("Arm NOVAMAX warhead? ");
-	isarmed = ja();
+	game.isarmed = ja();
     }
     getcd(TRUE, key);
-    if (direc == -1.0) return;
-    nprobes--;
-    angle = ((15.0 - direc) * 0.5235988);
-    probeinx = -sin(angle);
-    probeiny = cos(angle);
-    if (fabs(probeinx) > fabs(probeiny))
-	bigger = fabs(probeinx);
+    if (game.direc == -1.0) return;
+    game.nprobes--;
+    angle = ((15.0 - game.direc) * 0.5235988);
+    game.probeinx = -sin(angle);
+    game.probeiny = cos(angle);
+    if (fabs(game.probeinx) > fabs(game.probeiny))
+	bigger = fabs(game.probeinx);
     else
-	bigger = fabs(probeiny);
+	bigger = fabs(game.probeiny);
 		
-    probeiny /= bigger;
-    probeinx /= bigger;
-    proben = 10.0*dist*bigger +0.5;
-    probex = quadx*QUADSIZE + sectx - 1;	// We will use better packing than original
-    probey = quady*QUADSIZE + secty - 1;
-    probecx = quadx;
-    probecy = quady;
+    game.probeiny /= bigger;
+    game.probeinx /= bigger;
+    game.proben = 10.0*game.dist*bigger +0.5;
+    game.probex = game.quadx*QUADSIZE + game.sectx - 1;	// We will use better packing than original
+    game.probey = game.quady*QUADSIZE + game.secty - 1;
+    game.probecx = game.quadx;
+    game.probecy = game.quady;
     game.future[FDSPROB] = game.state.date + 0.01; // Time to move one sector
     prout("Ensign Chekov-  \"The deep space probe is launched, Captain.\"");
-    ididit = 1;
+    game.ididit = 1;
     return;
 }
 
@@ -905,8 +905,8 @@
     int line = 0, l, ix, iy;
 
     chew();
-    /* Test for conditions which prevent calling for help */
-    if (condit == IHDOCKED) {
+    /* Test for game.conditions which prevent calling for help */
+    if (game.condit == IHDOCKED) {
 	prout("Lt. Uhura-  \"But Captain, we're already docked.\"");
 	return;
     }
@@ -918,50 +918,50 @@
 	prout("Lt. Uhura-  \"Captain, I'm not getting any response from Starbase.\"");
 	return;
     }
-    if (landed == 1) {
+    if (game.landed == 1) {
 	proutn("You must be aboard the ");
 	crmshp();
 	prout(".");
 	return;
     }
     /* OK -- call for help from nearest starbase */
-    nhelp++;
-    if (basex!=0) {
+    game.nhelp++;
+    if (game.basex!=0) {
 	/* There's one in this quadrant */
-	ddist = sqrt(square(basex-sectx)+square(basey-secty));
+	ddist = sqrt(square(game.basex-game.sectx)+square(game.basey-game.secty));
     }
     else {
 	ddist = FOREVER;
 	for_starbases(l) {
-	    xdist=10.0*sqrt(square(game.state.baseqx[l]-quadx)+square(game.state.baseqy[l]-quady));
+	    xdist=10.0*sqrt(square(game.state.baseqx[l]-game.quadx)+square(game.state.baseqy[l]-game.quady));
 	    if (xdist < ddist) {
 		ddist = xdist;
 		line = l;
 	    }
 	}
 	/* Since starbase not in quadrant, set up new quadrant */
-	quadx = game.state.baseqx[line];
-	quady = game.state.baseqy[line];
+	game.quadx = game.state.baseqx[line];
+	game.quady = game.state.baseqy[line];
 	newqad(1);
     }
     /* dematerialize starship */
-    game.quad[sectx][secty]=IHDOT;
-    proutn("Starbase in %s responds--", cramlc(quadrant, quadx, quady));
+    game.quad[game.sectx][game.secty]=IHDOT;
+    proutn("Starbase in %s responds--", cramlc(quadrant, game.quadx, game.quady));
     proutn("");
     crmshp();
     prout(" dematerializes.");
-    sectx=0;
+    game.sectx=0;
     for (l = 1; l <= 5; l++) {
-	ix = basex+3.0*Rand()-1;
-	iy = basey+3.0*Rand()-1;
+	ix = game.basex+3.0*Rand()-1;
+	iy = game.basey+3.0*Rand()-1;
 	if (VALID_SECTOR(ix,iy) && game.quad[ix][iy]==IHDOT) {
 	    /* found one -- finish up */
-	    sectx=ix;
-	    secty=iy;
+	    game.sectx=ix;
+	    game.secty=iy;
 	    break;
 	}
     }
-    if (sectx==0){
+    if (game.sectx==0){
 	prout("You have been lost in space...");
 	finish(FMATERIALIZE);
 	return;
@@ -993,13 +993,13 @@
     }
     if (l > 3) {
 	game.quad[ix][iy]=IHQUEST;
-	alive = 0;
+	game.alive = 0;
 	drawmaps(1);
 	setwnd(message_window);
 	finish(FMATERIALIZE);
 	return;
     }
-    game.quad[ix][iy]=ship;
+    game.quad[ix][iy]=game.ship;
     textcolor(GREEN);
     prout("succeeds.");
     textcolor(DEFAULT);

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-14 18:25:06 UTC (rev 560)
+++ trunk/src/planets.c	2006-09-14 20:42:27 UTC (rev 561)
@@ -8,10 +8,10 @@
    Let's see what happens if all events can occur here */
 
 //  double asave;
-    ididit = 1;
+    game.ididit = 1;
 #if 0
     /* Don't worry about this */
-    if (future[FTBEAM] <= game.state.date+Time && game.state.remcom != 0 && condit != IHDOCKED) {
+    if (future[FTBEAM] <= game.state.date+game.optime && game.state.remcom != 0 && game.condit != IHDOCKED) {
 	/* We are about to be tractor beamed -- operation fails */
 	return 1;
     }
@@ -21,7 +21,7 @@
     events();	/* Used to avoid if future[FSCMOVE] within time */
 //	future[FSNOVA] = asave;
     /*fails if game over, quadrant super-novas or we've moved to new quadrant*/
-    if (alldone || game.state.galaxy[quadx][quady].supernova || justin != 0) return 1;
+    if (game.alldone || game.state.galaxy[game.quadx][game.quady].supernova || game.justin != 0) return 1;
     return 0;
 }
 
@@ -32,15 +32,15 @@
     chew();
     prout("Spock-  \"Planet report follows, Captain.\"");
     skip(1);
-    for (i = 0; i < inplan; i++) {
+    for (i = 0; i < game.inplan; i++) {
 	if (game.state.plnets[i].known != unknown
 #ifdef DEBUG
-	    || ( idebug && game.state.plnets[i].x !=0)
+	    || ( game.idebug && game.state.plnets[i].x !=0)
 #endif
 	    ) {
 	    iknow = 1;
 #ifdef DEBUG
-	    if (idebug && game.state.plnets[i].known==unknown) proutn("(Unknown) ");
+	    if (game.idebug && game.state.plnets[i].known==unknown) proutn("(Unknown) ");
 #endif
 	    proutn(cramlc(quadrant, game.state.plnets[i].x, game.state.plnets[i].y));
 	    proutn("   class ");
@@ -59,7 +59,7 @@
 {
     skip(1);
     chew();
-    if (inorbit!=0) {
+    if (game.inorbit!=0) {
 	prout("Already in standard orbit.");
 	return;
     }
@@ -67,20 +67,20 @@
 	prout("Both warp and impulse engines damaged.");
 	return;
     }
-    if (plnetx == 0 || abs(sectx-plnetx) > 1 || abs(secty-plnety) > 1) {
+    if (game.plnetx == 0 || abs(game.sectx-game.plnetx) > 1 || abs(game.secty-game.plnety) > 1) {
 	crmshp();
 	prout(" not adjacent to planet.");
 	skip(1);
 	return;
     }
-    Time = 0.02+0.03*Rand();
+    game.optime = 0.02+0.03*Rand();
     prout("Helmsman Sulu-  \"Entering standard orbit, Sir.\"");
     newcnd();
     if (consumeTime()) return;
     game.height = (1400.0+7200.0*Rand());
     prout("Sulu-  \"Entered orbit at altitude %.2f kilometers.\"", game.height);
-    inorbit = 1;
-    ididit=1;
+    game.inorbit = 1;
+    game.ididit=1;
 }
 
 void sensor(void) 
@@ -91,22 +91,22 @@
 	prout("Short range sensors damaged.");
 	return;
     }
-    if (!plnetx && (game.options & OPTION_TTY)) {
+    if (!game.plnetx && (game.options & OPTION_TTY)) {
 	prout("Spock- \"No planet in this quadrant, Captain.\"");
 	return;
     }
-    if ((plnetx != 0)&& (game.state.plnets[iplnet].known == unknown)) {
-	prout("Spock-  \"Sensor scan for %s-", cramlc(quadrant, quadx, quady));
+    if ((game.plnetx != 0)&& (game.state.plnets[game.iplnet].known == unknown)) {
+	prout("Spock-  \"Sensor scan for %s-", cramlc(quadrant, game.quadx, game.quady));
 	skip(1);
 	prout("         Planet at %s is of class %s.", 
-	      cramlc(sector, plnetx, plnety),
-	      classes[game.state.plnets[iplnet].pclass]);
-	if (game.state.plnets[iplnet].known==shuttle_down) 
+	      cramlc(sector, game.plnetx, game.plnety),
+	      classes[game.state.plnets[game.iplnet].pclass]);
+	if (game.state.plnets[game.iplnet].known==shuttle_down) 
 	    prout("         Sensors show Galileo still on surface.");
 	proutn("         Readings indicate");
-	if (game.state.plnets[iplnet].crystals == 0) proutn(" no");
+	if (game.state.plnets[game.iplnet].crystals == 0) proutn(" no");
 	prout(" dilithium crystals present.\"");
-	if (game.state.plnets[iplnet].known == unknown) game.state.plnets[iplnet].known = known;
+	if (game.state.plnets[game.iplnet].known == unknown) game.state.plnets[game.iplnet].known = known;
     }
 }
 
@@ -116,31 +116,31 @@
     skip(1);
     if (game.damage[DTRANSP] != 0) {
 	prout("Transporter damaged.");
-	if (game.damage[DSHUTTL]==0 && (game.state.plnets[iplnet].known==shuttle_down || iscraft == 1)) {
+	if (game.damage[DSHUTTL]==0 && (game.state.plnets[game.iplnet].known==shuttle_down || game.iscraft == 1)) {
 	    skip(1);
 	    proutn("Spock-  \"May I suggest the shuttle craft, Sir?\" ");
 	    if (ja() != 0) shuttle();
 	}
 	return;
     }
-    if (inorbit==0) {
+    if (game.inorbit==0) {
 	crmshp();
 	prout(" not in standard orbit.");
 	return;
     }
-    if (shldup!=0) {
+    if (game.shldup!=0) {
 	prout("Impossible to transport through shields.");
 	return;
     }
-    if (game.state.plnets[iplnet].known==unknown) {
+    if (game.state.plnets[game.iplnet].known==unknown) {
 	prout("Spock-  \"Captain, we have no information on this planet");
 	prout("  and Starfleet Regulations clearly state that in this situation");
 	prout("  you may not go down.\"");
 	return;
     }
-    if (landed==1) {
+    if (game.landed==1) {
 	/* Coming from planet */
-	if (game.state.plnets[iplnet].known==shuttle_down) {
+	if (game.state.plnets[game.iplnet].known==shuttle_down) {
 	    proutn("Spock-  \"Wouldn't you rather take the Galileo?\" ");
 	    if (ja() != 0) {
 		chew();
@@ -157,7 +157,7 @@
     }
     else {
 	/* Going to planet */
-	if (game.state.plnets[iplnet].crystals==0) {
+	if (game.state.plnets[game.iplnet].crystals==0) {
 	    prout("Spock-  \"Captain, I fail to see the logic in");
 	    prout("  exploring a planet with no dilithium crystals.");
 	    proutn("  Are you sure this is wise?\" ");
@@ -172,7 +172,7 @@
 	skip(1);
 	prout("Kirk-  \"Energize.\"");
     }
-    ididit=1;
+    game.ididit=1;
     skip(1);
     prouts("WWHOOOIIIIIRRRRREEEE.E.E.  .  .  .  .   .    .");
     skip(2);
@@ -186,15 +186,15 @@
     prouts(".    .   .  .  .  .  .E.E.EEEERRRRRIIIIIOOOHWW");
     skip(2);
     prout("Transport complete.");
-    landed = -landed;
-    if (landed==1 && game.state.plnets[iplnet].known==shuttle_down) {
+    game.landed = -game.landed;
+    if (game.landed==1 && game.state.plnets[game.iplnet].known==shuttle_down) {
 	prout("The shuttle craft Galileo is here!");
     }
-    if (landed!=1 && imine==1) {
-	icrystl = 1;
-	cryprob = 0.05;
+    if (game.landed!=1 && game.imine==1) {
+	game.icrystl = 1;
+	game.cryprob = 0.05;
     }
-    imine = 0;
+    game.imine = 0;
     return;
 }
 
@@ -202,44 +202,44 @@
 {
     skip(1);
     chew();
-    if (landed!= 1) {
+    if (game.landed!= 1) {
 	prout("Mining party not on planet.");
 	return;
     }
-    if (game.state.plnets[iplnet].crystals == 0) {
+    if (game.state.plnets[game.iplnet].crystals == 0) {
 	prout("No dilithium crystals on this planet.");
 	return;
     }
-    if (imine == 1) {
+    if (game.imine == 1) {
 	prout("You've already mined enough crystals for this trip.");
 	return;
     }
-    if (icrystl == 1 && cryprob == 0.05) {
+    if (game.icrystl == 1 && game.cryprob == 0.05) {
 	proutn("With all those fresh crystals aboard the ");
 	crmshp();
 	skip(1);
 	prout("there's no reason to mine more at this time.");
 	return;
     }
-    Time = (0.1+0.2*Rand())*game.state.plnets[iplnet].pclass;
+    game.optime = (0.1+0.2*Rand())*game.state.plnets[game.iplnet].pclass;
     if (consumeTime()) return;
     prout("Mining operation complete.");
-    imine = 1;
-    ididit=1;
+    game.imine = 1;
+    game.ididit=1;
 }
 
 void usecrystals(void) 
 {
-    ididit=0;
+    game.ididit=0;
     skip(1);
     chew();
-    if (icrystl!=1) {
+    if (game.icrystl!=1) {
 	prout("No dilithium crystals available.");
 	return;
     }
-    if (energy >= 1000) {
+    if (game.energy >= 1000) {
 	prout("Spock-  \"Captain, Starfleet Regulations prohibit such an operation");
-	prout("  except when condition Yellow exists.");
+	prout("  except when game.condition Yellow exists.");
 	return;
     }
     prout("Spock- \"Captain, I must warn you that loading");
@@ -259,7 +259,7 @@
     skip(1);
     prouts("Scotty-  \"Keep your fingers crossed, Sir!\"");
     skip(1);
-    if (Rand() <= cryprob) {
+    if (Rand() <= game.cryprob) {
 	prouts("  \"Activating now! - - No good!  It's***");
 	skip(2);
 	prouts("***RED ALERT!  RED A*L********************************");
@@ -270,13 +270,13 @@
 	kaboom();
 	return;
     }
-    energy += 5000.0*(1.0 + 0.9*Rand());
+    game.energy += 5000.0*(1.0 + 0.9*Rand());
     prouts("  \"Activating now! - - ");
     prout("The instruments");
     prout("   are going crazy, but I think it's");
     prout("   going to work!!  Congratulations, Sir!\"");
-    cryprob *= 2.0;
-    ididit=1;
+    game.cryprob *= 2.0;
+    game.ididit=1;
 }
 
 void shuttle(void) 
@@ -285,7 +285,7 @@
     skip(1);
     if(game.damage[DSHUTTL] != 0.0) {
 	if (game.damage[DSHUTTL] == -1.0) {
-	    if (inorbit && game.state.plnets[iplnet].known == shuttle_down)
+	    if (game.inorbit && game.state.plnets[game.iplnet].known == shuttle_down)
 		prout("Ye Faerie Queene has no shuttle craft bay to dock it at.");
 	    else
 		prout("Ye Faerie Queene had no shuttle craft.");
@@ -295,44 +295,44 @@
 	else prout("Shuttle craft is now serving Big Macs.");
 	return;
     }
-    if (inorbit==0) {
+    if (game.inorbit==0) {
 	crmshp();
 	prout(" not in standard orbit.");
 	return;
     }
-    if ((game.state.plnets[iplnet].known != shuttle_down) && iscraft != 1) {
+    if ((game.state.plnets[game.iplnet].known != shuttle_down) && game.iscraft != 1) {
 	prout("Shuttle craft not currently available.");
 	return;
     }
-    if (landed==-1 && game.state.plnets[iplnet].known==shuttle_down) {
+    if (game.landed==-1 && game.state.plnets[game.iplnet].known==shuttle_down) {
 	prout("You will have to beam down to retrieve the shuttle craft.");
 	return;
     }
-    if (shldup!=0 || condit == IHDOCKED) {
+    if (game.shldup!=0 || game.condit == IHDOCKED) {
 	prout("Shuttle craft cannot pass through shields.");
 	return;
     }
-    if (game.state.plnets[iplnet].known==unknown) {
+    if (game.state.plnets[game.iplnet].known==unknown) {
 	prout("Spock-  \"Captain, we have no information on this planet");
 	prout("  and Starfleet Regulations clearly state that in this situation");
 	prout("  you may not fly down.\"");
 	return;
     }
-    Time = 3.0e-5*game.height;
-    if (Time >= 0.8*game.state.remtime) {
+    game.optime = 3.0e-5*game.height;
+    if (game.optime >= 0.8*game.state.remtime) {
 	prout("First Officer Spock-  \"Captain, I compute that such");
 	proutn("  a maneuver would require approximately 2d%% of our",
-	       (int)(100*Time/game.state.remtime));
+	       (int)(100*game.optime/game.state.remtime));
 	prout("remaining time.");
 	proutn("Are you sure this is wise?\" ");
 	if (ja()==0) {
-	    Time = 0.0;
+	    game.optime = 0.0;
 	    return;
 	}
     }
-    if (landed == 1) {
+    if (game.landed == 1) {
 	/* Kirk on planet */
-	if (iscraft==1) {
+	if (game.iscraft==1) {
 	    /* Galileo on ship! */
 	    if (game.damage[DTRANSP]==0) {
 		proutn("Spock-  \"Would you rather use the transporter?\" ");
@@ -345,10 +345,10 @@
 	    else
 		proutn("Rescue party");
 	    prout(" boards Galileo and swoops toward planet surface.");
-	    iscraft = 0;
+	    game.iscraft = 0;
 	    skip(1);
 	    if (consumeTime()) return;
-	    game.state.plnets[iplnet].known=shuttle_down;
+	    game.state.plnets[game.iplnet].known=shuttle_down;
 	    prout("Trip complete.");
 	    return;
 	}
@@ -358,18 +358,18 @@
 	    prout("shuttle craft for the trip back to the Enterprise.");
 	    skip(1);
 	    prout("The short hop begins . . .");
-	    game.state.plnets[iplnet].known=known;
-	    icraft = 1;
+	    game.state.plnets[game.iplnet].known=known;
+	    game.icraft = 1;
 	    skip(1);
-	    landed = -1;
+	    game.landed = -1;
 	    if (consumeTime()) return;
-	    iscraft = 1;
-	    icraft = 0;
-	    if (imine!=0) {
-		icrystl = 1;
-		cryprob = 0.05;
+	    game.iscraft = 1;
+	    game.icraft = 0;
+	    if (game.imine!=0) {
+		game.icrystl = 1;
+		game.cryprob = 0.05;
 	    }
-	    imine = 0;
+	    game.imine = 0;
 	    prout("Trip complete.");
 	    return;
 	}
@@ -382,12 +382,12 @@
 	skip(1);
 	prouts("The hangar doors open; the trip begins.");
 	skip(1);
-	icraft = 1;
-	iscraft = 0;
+	game.icraft = 1;
+	game.iscraft = 0;
 	if (consumeTime()) return;
-	game.state.plnets[iplnet].known = shuttle_down;
-	landed = 1;
-	icraft = 0;
+	game.state.plnets[game.iplnet].known = shuttle_down;
+	game.landed = 1;
+	game.icraft = 0;
 	prout("Trip complete");
 	return;
     }
@@ -397,14 +397,14 @@
 {
     double dprob, r = Rand();
 	
-    ididit = 0;
+    game.ididit = 0;
     skip(1);
     chew();
-    if (ship != IHE) {
+    if (game.ship != IHE) {
 	prout("Ye Faerie Queene has no death ray.");
 	return;
     }
-    if (nenhere==0) {
+    if (game.nenhere==0) {
 	prout("Sulu-  \"But Sir, there are no enemies in this quadrant.\"");
 	return;
     }
@@ -418,7 +418,7 @@
     if (ja()==0) return;
     prout("Spock-  \"Acknowledged.\"");
     skip(1);
-    ididit=1;
+    game.ididit=1;
     prouts("WHOOEE ... WHOOEE ... WHOOEE ... WHOOEE");
     skip(1);
     prout("Crew scrambles in emergency preparation.");
@@ -436,7 +436,7 @@
     if (r > dprob) {
 	prouts("Sulu- \"Captain!  It's working!\"");
 	skip(2);
-	while (nenhere > 0)
+	while (game.nenhere > 0)
 	    deadkl(game.kx[1],game.ky[1],game.quad[game.kx[1]][game.ky[1]],game.kx[1],game.ky[1]);
 	prout("Ensign Chekov-  \"Congratulations, Captain!\"");
 	if (KLINGREM == 0) finish(FWON);

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-14 18:25:06 UTC (rev 560)
+++ trunk/src/reports.c	2006-09-14 20:42:27 UTC (rev 561)
@@ -8,11 +8,11 @@
     if (!curt) {
 	if (game.future[FCDBAS] < FOREVER) {
 	    prout("Starbase in %s is currently under Commander attack.",
-		  cramlc(quadrant, batx, baty));
+		  cramlc(quadrant, game.batx, game.baty));
 	    prout("It can hold out until Stardate %d.", 
 		  (int)game.future[FCDBAS]);
 	}
-	if (isatb == 1) {
+	if (game.isatb == 1) {
 	    prout("Starbase in %s is under Super-commander attack.",
 		  cramlc(quadrant, game.state.isx, game.state.isy));
 	    prout("It can hold out until Stardate %d.", 
@@ -20,8 +20,8 @@
 	}
     } else {
         if (game.future[FCDBAS] < FOREVER)
-	    proutn("Base in %i - %i attacked by C. Alive until %.1f", batx, baty, game.future[FCDBAS]);
-        if (isatb == 1)
+	    proutn("Base in %i - %i attacked by C. Alive until %.1f", game.batx, game.baty, game.future[FCDBAS]);
+        if (game.isatb == 1)
 	    proutn("Base in %i - %i attacked by S. Alive until %.1f", game.state.isx, game.state.isy, game.future[FSCDBAS]);
     }
     clreol();
@@ -33,14 +33,14 @@
     char *s1,*s2,*s3;
 
     chew();
-    s1 = (thawed?"thawed ":"");
-    switch (length) {
+    s1 = (game.thawed?"game.thawed ":"");
+    switch (game.length) {
     case 1: s2="short"; break;
     case 2: s2="medium"; break;
     case 4: s2="long"; break;
     default: s2="unknown length"; break;
     }
-    switch (skill) {
+    switch (game.skill) {
     case SKILL_NOVICE: s3="novice"; break;
     case SKILL_FAIR: s3="fair"; break;
     case SKILL_GOOD: s3="good"; break;
@@ -50,59 +50,59 @@
     }
     prout("");
     prout("You %s playing a %s%s %s game.",
-	  alldone? "were": "are now", s1, s2, s3);
-    if (skill>SKILL_GOOD && thawed && !alldone) prout("No plaque is allowed.");
-    if (tourn) prout("This is tournament game %d.", tourn);
+	  game.alldone? "were": "are now", s1, s2, s3);
+    if (game.skill>SKILL_GOOD && game.thawed && !game.alldone) prout("No plaque is allowed.");
+    if (game.tourn) prout("This is tournament game %d.", game.tourn);
     prout("Your secret password is \"%s\"",game.passwd);
     proutn("%d of %d Klingons have been killed", KLINGKILLED, INKLINGTOT);
     if (NKILLC) prout(", including %d Commander%s.", NKILLC, NKILLC==1?"":"s");
     else if (NKILLK + NKILLSC > 0) prout(", but no Commanders.");
     else prout(".");
-    if (skill > SKILL_FAIR) prout("The Super Commander has %sbeen destroyed.",
+    if (game.skill > SKILL_FAIR) prout("The Super Commander has %sbeen destroyed.",
 				  game.state.nscrem?"not ":"");
-    if (game.state.rembase != inbase) {
+    if (game.state.rembase != game.inbase) {
 	proutn("There ");
-	if (inbase-game.state.rembase==1) proutn("has been 1 base");
+	if (game.inbase-game.state.rembase==1) proutn("has been 1 base");
 	else {
-	    proutn("have been %d bases", inbase-game.state.rembase);
+	    proutn("have been %d bases", game.inbase-game.state.rembase);
 	}
 	prout(" destroyed, %d remaining.", game.state.rembase);
     }
-    else prout("There are %d bases.", inbase);
-    if (game.damage[DRADIO] == 0.0 || condit == IHDOCKED || iseenit) {
+    else prout("There are %d bases.", game.inbase);
+    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED || game.iseenit) {
 	/* Don't report this if not seen and
 	   either the radio is dead or not at base! */
 	attakreport(0);
-	iseenit = 1;
+	game.iseenit = 1;
     }
-    if (casual) prout("%d casualt%s suffered so far.",
-		      casual, casual==1? "y" : "ies");
-    if (nhelp) prout("There were %d call%s for help.",
-		     nhelp, nhelp==1 ? "" : "s");
-    if (ship == IHE) {
+    if (game.casual) prout("%d casualt%s suffered so far.",
+		      game.casual, game.casual==1? "y" : "ies");
+    if (game.nhelp) prout("There were %d call%s for help.",
+		     game.nhelp, game.nhelp==1 ? "" : "s");
+    if (game.ship == IHE) {
 	proutn("You have ");
-	if (nprobes) proutn("%d", nprobes);
+	if (game.nprobes) proutn("%d", game.nprobes);
 	else proutn("no");
 	proutn(" deep space probe");
-	if (nprobes!=1) proutn("s");
+	if (game.nprobes!=1) proutn("s");
 	prout(".");
     }
-    if ((game.damage[DRADIO] == 0.0 || condit == IHDOCKED)&&
+    if ((game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED)&&
 	game.future[FDSPROB] != FOREVER) {
-	if (isarmed) 
+	if (game.isarmed) 
 	    proutn("An armed deep space probe is in");
 	else
 	    proutn("A deep space probe is in");
-	proutn(cramlc(quadrant, probecx, probecy));
+	proutn(cramlc(quadrant, game.probecx, game.probecy));
 	prout(".");
     }
-    if (icrystl) {
-	if (cryprob <= .05)
+    if (game.icrystl) {
+	if (game.cryprob <= .05)
 	    prout("Dilithium crystals aboard ship... not yet used.");
 	else {
 	    int i=0;
 	    double ai = 0.05;
-	    while (cryprob > ai) {
+	    while (game.cryprob > ai) {
 		ai *= 2.0;
 		i++;
 	    }
@@ -119,7 +119,7 @@
     chew();
     if (game.damage[DLRSENS] != 0.0) {
 	/* Now allow base's sensors if docked */
-	if (condit != IHDOCKED) {
+	if (game.condit != IHDOCKED) {
 	    prout("LONG-RANGE SENSORS DAMAGED.");
 	    return;
 	}
@@ -128,9 +128,9 @@
     else {
 	prout("Long-range scan");
     }
-    for (x = quadx-1; x <= quadx+1; x++) {
+    for (x = game.quadx-1; x <= game.quadx+1; x++) {
 	proutn(" ");
-	for (y = quady-1; y <= quady+1; y++) {
+	for (y = game.quady-1; y <= game.quady+1; y++) {
 	    if (!VALID_QUADRANT(x, y))
 		proutn("  -1");
 	    else {
@@ -164,7 +164,7 @@
 	    prout("  %16s %8.2f  %8.2f", 
 		  device[i],
 		  game.damage[i]+0.05,
-		  docfac*game.damage[i]+0.005);
+		  game.docfac*game.damage[i]+0.005);
 	}
     }
     if (!jdam) prout("All devices functional.");
@@ -174,7 +174,7 @@
 /* update the chart in the Enterprise's computer from galaxy data */
 {
     int i, j;
-    lastchart = game.state.date;
+    game.lastchart = game.state.date;
     for_quadrants(i)
 	for_quadrants(j) 
 	    if (game.state.galaxy[i][j].charted) {
@@ -192,21 +192,21 @@
     if (game.damage[DRADIO] == 0.0)
 	rechart();
 
-    if (lastchart < game.state.date && condit == IHDOCKED) {
+    if (game.lastchart < game.state.date && game.condit == IHDOCKED) {
 	prout("Spock-  \"I revised the Star Chart from the starbase's records.\"");
 	rechart();
     }
 
     if (nn == 0) prout("       STAR CHART FOR THE KNOWN GALAXY");
-    if (game.state.date > lastchart)
+    if (game.state.date > game.lastchart)
 	prout("(Last surveillance update %d stardates ago).",
-	      (int)(game.state.date-lastchart));
+	      (int)(game.state.date-game.lastchart));
     prout("      1    2    3    4    5    6    7    8");
     for_quadrants(i) {
 	proutn("%d |", i);
 	for_quadrants(j) {
 	    char buf[4];
-	    if ((game.options & OPTION_SHOWME) && i == quadx && j == quady)
+	    if ((game.options & OPTION_SHOWME) && i == game.quadx && j == game.quady)
 		proutn("<");
 	    else
 		proutn(" ");
@@ -219,7 +219,7 @@
 	    else
 		strcpy(buf, "...");
 	    proutn(buf);
-	    if ((game.options & OPTION_SHOWME) && i == quadx && j == quady)
+	    if ((game.options & OPTION_SHOWME) && i == game.quadx && j == game.quady)
 		proutn(">");
 	    else
 		proutn(" ");
@@ -231,16 +231,16 @@
 
 static void sectscan(int goodScan, int i, int j) 
 {
-    if (goodScan || (abs(i-sectx)<= 1 && abs(j-secty) <= 1)){
+    if (goodScan || (abs(i-game.sectx)<= 1 && abs(j-game.secty) <= 1)){
 	if ((game.quad[i][j]==IHMATER0)||(game.quad[i][j]==IHMATER1)||(game.quad[i][j]==IHMATER2)||(game.quad[i][j]==IHE)||(game.quad[i][j]==IHF)){
-	    switch (condit) {
+	    switch (game.condit) {
 	    case IHRED: textcolor(RED); break;
 	    case IHGREEN: textcolor(GREEN); break;
 	    case IHYELLOW: textcolor(YELLOW); break;
 	    case IHDOCKED: textcolor(CYAN); break;
 	    case IHDEAD: textcolor(BROWN);
 	    }
-	    if (game.quad[i][j] != ship) 
+	    if (game.quad[i][j] != game.ship) 
 		highvideo();
 	}
 	proutn("%c ",game.quad[i][j]);
@@ -259,8 +259,8 @@
 	proutn("Stardate      %.1f, Time Left %.2f", game.state.date, game.state.remtime);
 	break;
     case 2:
-	if (condit != IHDOCKED) newcnd();
-	switch (condit) {
+	if (game.condit != IHDOCKED) newcnd();
+	switch (game.condit) {
 	case IHRED: cp = "RED"; break;
 	case IHGREEN: cp = "GREEN"; break;
 	case IHYELLOW: cp = "YELLOW"; break;
@@ -274,40 +274,40 @@
 	break;
     case 3:
 	proutn("Position      %d - %d , %d - %d",
-	       quadx, quady, sectx, secty);
+	       game.quadx, game.quady, game.sectx, game.secty);
 	break;
     case 4:
 	proutn("Life Support  ");
 	if (game.damage[DLIFSUP] != 0.0) {
-	    if (condit == IHDOCKED)
+	    if (game.condit == IHDOCKED)
 		proutn("DAMAGED, Base provides");
 	    else
-		proutn("DAMAGED, reserves=%4.2f", lsupres);
+		proutn("DAMAGED, reserves=%4.2f", game.lsupres);
 	}
 	else
 	    proutn("ACTIVE");
 	break;
     case 5:
-	proutn("Warp Factor   %.1f", warpfac);
+	proutn("Warp Factor   %.1f", game.warpfac);
 	break;
     case 6:
-	proutn("Energy        %.2f", energy);
-	if (icrystl && (game.options & OPTION_SHOWME))	/* ESR */
+	proutn("Energy        %.2f", game.energy);
+	if (game.icrystl && (game.options & OPTION_SHOWME))	/* ESR */
 	    proutn(" (have crystals)");
 	break;
     case 7:
-	proutn("Torpedoes     %d", torps);
+	proutn("Torpedoes     %d", game.torps);
 	break;
     case 8:
 	proutn("Shields       ");
 	if (game.damage[DSHIELD] != 0)
 	    proutn("DAMAGED,");
-	else if (shldup)
+	else if (game.shldup)
 	    proutn("UP,");
 	else
 	    proutn("DOWN,");
 	proutn(" %d%% %.1f units",
-	       (int)((100.0*shield)/inshld + 0.5), shield);
+	       (int)((100.0*game.shield)/game.inshld + 0.5), game.shield);
 	break;
     case 9:
 	proutn("Klingons Left %d", KLINGREM);
@@ -328,7 +328,7 @@
     case SCAN_FULL: // SRSCAN
 	if (game.damage[DSRSENS] != 0) {
 	    /* Allow base's sensors if docked */
-	    if (condit != IHDOCKED) {
+	    if (game.condit != IHDOCKED) {
 		prout("   S.R. SENSORS DAMAGED!");
 		goodScan=FALSE;
 	    }
@@ -337,10 +337,10 @@
 	}
 	else prout("     Short-range scan");
 	if (goodScan && !game.damage[DRADIO]) { 
-	    game.state.chart[quadx][quady].klingons = game.state.galaxy[quadx][quady].klingons;
-	    game.state.chart[quadx][quady].starbase = game.state.galaxy[quadx][quady].starbase;
-	    game.state.chart[quadx][quady].stars = game.state.galaxy[quadx][quady].stars;
-	    game.state.galaxy[quadx][quady].charted = TRUE;
+	    game.state.chart[game.quadx][game.quady].klingons = game.state.galaxy[game.quadx][game.quady].klingons;
+	    game.state.chart[game.quadx][game.quady].starbase = game.state.galaxy[game.quadx][game.quady].starbase;
+	    game.state.chart[game.quadx][game.quady].stars = game.state.galaxy[game.quadx][game.quady].stars;
+	    game.state.galaxy[game.quadx][game.quady].charted = TRUE;
 	}
 	scan();
 	if (isit("chart")) nn = TRUE;
@@ -357,7 +357,7 @@
 		break;
 	if (req > sizeof(requests)/sizeof(requests[0])) {
 	    prout("UNRECOGNIZED REQUEST. Legal requests are:");
-	    prout("  date, condition, position, lsupport, warpfactor,");
+	    prout("  date, game.condition, position, lsupport, game.warpfactor,");
 	    prout("  energy, torpedoes, shields, klingons, time, bases.");
 	    return FALSE;
 	}
@@ -371,7 +371,7 @@
 	leftside=FALSE;
 	break;
     }
-    if (condit != IHDOCKED) newcnd();
+    if (game.condit != IHDOCKED) newcnd();
     for (i = 1; i <= max(QUADSIZE, sizeof(requests)/sizeof(requests[0])); i++) {
 	jj = (req!=0 ? req : i);
 	if (leftside && i <= QUADSIZE) {
@@ -425,9 +425,9 @@
 	ix2 = aaitem + 0.5;
     }
     else {
-	if (quady>ix1) ix2 = 1;
+	if (game.quady>ix1) ix2 = 1;
 	else ix2=QUADSIZE;
-	if (quadx>iy1) iy2 = 1;
+	if (game.quadx>iy1) iy2 = 1;
 	else iy2=QUADSIZE;
     }
 
@@ -435,8 +435,8 @@
 	huh();
 	return;
     }
-    dist = sqrt(square(iy1-quadx+0.1*(iy2-sectx))+
-		square(ix1-quady+0.1*(ix2-secty)));
+    game.dist = sqrt(square(iy1-game.quadx+0.1*(iy2-game.sectx))+
+		square(ix1-game.quady+0.1*(ix2-game.secty)));
     wfl = FALSE;
 
     if (prompt) prout("Answer \"no\" if you don't know the value:");
@@ -447,7 +447,7 @@
 	    ttime = aaitem;
 	    if (ttime > game.state.date) ttime -= game.state.date; // Actually a star date
 	    if (ttime <= 1e-10 ||
-		(twarp=(floor(sqrt((10.0*dist)/ttime)*10.0)+1.0)/10.0) > 10) {
+		(twarp=(floor(sqrt((10.0*game.dist)/ttime)*10.0)+1.0)/10.0) > 10) {
 		prout("We'll never make it, sir.");
 		chew();
 		return;
@@ -470,11 +470,11 @@
     }
     while (TRUE) {
 	chew();
-	ttime = (10.0*dist)/square(twarp);
-	tpower = dist*twarp*twarp*twarp*(shldup+1);
-	if (tpower >= energy) {
+	ttime = (10.0*game.dist)/square(twarp);
+	tpower = game.dist*twarp*twarp*twarp*(game.shldup+1);
+	if (tpower >= game.energy) {
 	    prout("Insufficient energy, sir.");
-	    if (shldup==0 || tpower > energy*2.0) {
+	    if (game.shldup==0 || tpower > game.energy*2.0) {
 		if (!wfl) return;
 		proutn("New warp factor to try? ");
 		if (scan() == IHREAL) {
@@ -498,7 +498,7 @@
 	}
 	else
 	    proutn("Remaining");
-	prout(" energy will be %.2f.", energy-tpower);
+	prout(" game.energy will be %.2f.", game.energy-tpower);
 	if (wfl) {
 	    prout("And we will arrive at stardate %.2f.",
 		  game.state.date+ttime);
@@ -514,9 +514,9 @@
 	    prout("Unfortunately, the Federation will be destroyed by then.");
 	if (twarp > 6.0)
 	    prout("You'll be taking risks at that speed, Captain");
-	if ((isatb==1 && game.state.isy == ix1 && game.state.isx == iy1 &&
+	if ((game.isatb==1 && game.state.isy == ix1 && game.state.isx == iy1 &&
 	     game.future[FSCDBAS]< ttime+game.state.date)||
-	    (game.future[FCDBAS]<ttime+game.state.date && baty==ix1 && batx == iy1))
+	    (game.future[FCDBAS]<ttime+game.state.date && game.baty==ix1 && game.batx == iy1))
 	    prout("The starbase there will be destroyed by then.");
 	proutn("New warp factor to try? ");
 	if (scan() == IHREAL) {

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-14 18:25:06 UTC (rev 560)
+++ trunk/src/setup.c	2006-09-14 20:42:27 UTC (rev 561)
@@ -97,8 +97,8 @@
     int nb, l;
 
     chew();
-    if (condit==IHDOCKED) {
-	if (ship!=IHE) {
+    if (game.condit==IHDOCKED) {
+	if (game.ship!=IHE) {
 	    prout("You cannot abandon Ye Faerie Queene.");
 	    return;
 	}
@@ -117,11 +117,11 @@
 	    prout("Shuttle craft damaged.");
 	    return;
 	}
-	if (landed==1) {
+	if (game.landed==1) {
 	    prout("You must be aboard the Enterprise.");
 	    return;
 	}
-	if (iscraft!=1) {
+	if (game.iscraft!=1) {
 	    prout("Shuttle craft not currently available.");
 	    return;
 	}
@@ -141,53 +141,53 @@
 	}
 	/* If at least one base left, give 'em the Faerie Queene */
 	skip(1);
-	icrystl = 0; /* crystals are lost */
-	nprobes = 0; /* No probes */
+	game.icrystl = 0; /* crystals are lost */
+	game.nprobes = 0; /* No probes */
 	prout("You are captured by Klingons and released to");
 	prout("the Federation in a prisoner-of-war exchange.");
 	nb = Rand()*game.state.rembase+1;
 	/* Set up quadrant and position FQ adjacient to base */
-	if (quadx!=game.state.baseqx[nb] || quady!=game.state.baseqy[nb]) {
-	    quadx = game.state.baseqx[nb];
-	    quady = game.state.baseqy[nb];
-	    sectx = secty = 5;
+	if (game.quadx!=game.state.baseqx[nb] || game.quady!=game.state.baseqy[nb]) {
+	    game.quadx = game.state.baseqx[nb];
+	    game.quady = game.state.baseqy[nb];
+	    game.sectx = game.secty = 5;
 	    newqad(1);
 	}
 	for (;;) {
 	    /* position next to base by trial and error */
-	    game.quad[sectx][secty] = IHDOT;
+	    game.quad[game.sectx][game.secty] = IHDOT;
 	    for_sectors(l) {
-		sectx = 3.0*Rand() - 1.0 + basex;
-		secty = 3.0*Rand() - 1.0 + basey;
-		if (VALID_SECTOR(sectx, secty) &&
-		    game.quad[sectx][secty] == IHDOT) break;
+		game.sectx = 3.0*Rand() - 1.0 + game.basex;
+		game.secty = 3.0*Rand() - 1.0 + game.basey;
+		if (VALID_SECTOR(game.sectx, game.secty) &&
+		    game.quad[game.sectx][game.secty] == IHDOT) break;
 	    }
 	    if (l < QUADSIZE+1) break; /* found a spot */
-	    sectx=QUADSIZE/2;
-	    secty=QUADSIZE/2;
+	    game.sectx=QUADSIZE/2;
+	    game.secty=QUADSIZE/2;
 	    newqad(1);
 	}
     }
     /* Get new commission */
-    game.quad[sectx][secty] = ship = IHF;
+    game.quad[game.sectx][game.secty] = game.ship = IHF;
     prout("Starfleet puts you in command of another ship,");
     prout("the Faerie Queene, which is antiquated but,");
     prout("still useable.");
-    if (icrystl!=0) prout("The dilithium crystals have been moved.");
-    imine=0;
-    iscraft=0; /* Gallileo disappears */
+    if (game.icrystl!=0) prout("The dilithium crystals have been moved.");
+    game.imine=0;
+    game.iscraft=0; /* Gallileo disappears */
     /* Resupply ship */
-    condit=IHDOCKED;
+    game.condit=IHDOCKED;
     for (l = 0; l < NDEVICES; l++) 
 	game.damage[l] = 0.0;
     game.damage[DSHUTTL] = -1;
-    energy = inenrg = 3000.0;
-    shield = inshld = 1250.0;
-    torps = intorps = 6;
-    lsupres=inlsr=3.0;
-    shldup=0;
-    warpfac=5.0;
-    wfacsq=25.0;
+    game.energy = game.inenrg = 3000.0;
+    game.shield = game.inshld = 1250.0;
+    game.torps = game.intorps = 6;
+    game.lsupres=game.inlsr=3.0;
+    game.shldup=0;
+    game.warpfac=5.0;
+    game.wfacsq=25.0;
     return;
 }
 	
@@ -196,36 +196,36 @@
     int i,j, krem, klumper;
     int ix, iy;
 #ifdef DEBUG
-    idebug = 0;
+    game.idebug = 0;
 #endif
     //  Decide how many of everything
     if (choose(needprompt)) return; // frozen game
     // Prepare the Enterprise
-    alldone = gamewon = 0;
-    ship = IHE;
-    energy = inenrg = 5000.0;
-    shield = inshld = 2500.0;
-    shldchg = shldup = 0;
-    inlsr = 4.0;
-    lsupres = 4.0;
-    iran(GALSIZE, &quadx, &quady);
-    iran(QUADSIZE, &sectx, &secty);
-    torps = intorps = 10;
-    nprobes = (int)(3.0*Rand() + 2.0);	/* Give them 2-4 of these wonders */
-    warpfac = 5.0;
-    wfacsq = warpfac * warpfac;
+    game.alldone = game.gamewon = 0;
+    game.ship = IHE;
+    game.energy = game.inenrg = 5000.0;
+    game.shield = game.inshld = 2500.0;
+    game.shldchg = game.shldup = 0;
+    game.inlsr = 4.0;
+    game.lsupres = 4.0;
+    iran(GALSIZE, &game.quadx, &game.quady);
+    iran(QUADSIZE, &game.sectx, &game.secty);
+    game.torps = game.intorps = 10;
+    game.nprobes = (int)(3.0*Rand() + 2.0);	/* Give them 2-4 of these wonders */
+    game.warpfac = 5.0;
+    game.wfacsq = game.warpfac * game.warpfac;
     for (i=0; i < NDEVICES; i++) 
 	game.damage[i] = 0.0;
     // Set up assorted game parameters
-    batx = baty = 0;
-    game.state.date = indate = 100.0*(int)(31.0*Rand()+20.0);
-    nkinks = nhelp = resting = casual = 0;
-    isatb = iscate = imine = icrystl = icraft = game.state.nplankl = 0;
+    game.batx = game.baty = 0;
+    game.state.date = game.indate = 100.0*(int)(31.0*Rand()+20.0);
+    game.nkinks = game.nhelp = game.resting = game.casual = 0;
+    game.isatb = game.iscate = game.imine = game.icrystl = game.icraft = game.state.nplankl = 0;
     game.state.starkl = game.state.basekl = 0;
-    iscraft = 1;
-    landed = -1;
-    alive = 1;
-    docfac = 0.25;
+    game.iscraft = 1;
+    game.landed = -1;
+    game.alive = 1;
+    game.docfac = 0.25;
     for_quadrants(i)
 	for_quadrants(j) {
 	    game.state.galaxy[i][j].charted = 0;
@@ -236,26 +236,26 @@
 	    game.state.galaxy[i][j].supernova = 0;
 	}
     // Initialize times for extraneous events
-    game.future[FSNOVA] = game.state.date + expran(0.5 * intime);
-    game.future[FTBEAM] = game.state.date + expran(1.5 * (intime / game.state.remcom));
+    game.future[FSNOVA] = game.state.date + expran(0.5 * game.intime);
+    game.future[FTBEAM] = game.state.date + expran(1.5 * (game.intime / game.state.remcom));
     game.future[FSNAP] = game.state.date + 1.0 + Rand(); // Force an early snapshot
-    game.future[FBATTAK] = game.state.date + expran(0.3*intime);
+    game.future[FBATTAK] = game.state.date + expran(0.3*game.intime);
     game.future[FCDBAS] = FOREVER;
     game.future[FSCMOVE] = game.state.nscrem ? game.state.date+0.2777 : FOREVER;
     game.future[FSCDBAS] = FOREVER;
     game.future[FDSPROB] = FOREVER;
     // Starchart is functional but we've never seen it
-    lastchart = FOREVER;
+    game.lastchart = FOREVER;
     // Put stars in the galaxy
-    instar = 0;
+    game.instar = 0;
     for_quadrants(i)
 	for_quadrants(j) {
 	    int k = Rand()*9.0 + 1.0;
-	    instar += k;
+	    game.instar += k;
 	    game.state.galaxy[i][j].stars = k;
 	}
     // Locate star bases in galaxy
-    for (i = 1; i <= inbase; i++) {
+    for (i = 1; i <= game.inbase; i++) {
 	int contflag;
 	do {
 	    do iran(GALSIZE, &ix, &iy);
@@ -264,7 +264,7 @@
 	    for (j = i-1; j > 0; j--) {
 		/* Improved placement algorithm to spread out bases */
 		double distq = square(ix-game.state.baseqx[j]) + square(iy-game.state.baseqy[j]);
-		if (distq < 6.0*(BASEMAX+1-inbase) && Rand() < 0.75) {
+		if (distq < 6.0*(BASEMAX+1-game.inbase) && Rand() < 0.75) {
 		    contflag = TRUE;
 #ifdef DEBUG
 		    prout("DEBUG: Abandoning base #%d at %d-%d", i, ix, iy);
@@ -272,7 +272,7 @@
 		    break;
 		}
 #ifdef DEBUG
-		else if (distq < 6.0 * (BASEMAX+1-inbase)) {
+		else if (distq < 6.0 * (BASEMAX+1-game.inbase)) {
 		    prout("DEBUG: saving base #%d, close to #%d", i, j);
 		}
 #endif
@@ -285,8 +285,8 @@
 	game.state.chart[ix][iy].starbase = 1;
     }
     // Position ordinary Klingon Battle Cruisers
-    krem = inkling;
-    klumper = 0.25*skill*(9.0-length)+1.0;
+    krem = game.inkling;
+    klumper = 0.25*game.skill*(9.0-game.length)+1.0;
     if (klumper > 9) klumper = 9; // Can't have more than 9 in quadrant
     do {
 	double r = Rand();
@@ -302,11 +302,11 @@
 #ifdef DEBUG
     klumper = 1;
 #endif
-    for (i = 1; i <= incom; i++) {
+    for (i = 1; i <= game.incom; i++) {
 	do {
 	    do { /* IF debugging, put commanders by bases, always! */
 #ifdef DEBUG
-		if (idebug && klumper <= inbase) {
+		if (game.idebug && klumper <= game.inbase) {
 		    ix = game.state.baseqx[klumper];
 		    iy = game.state.baseqy[klumper];
 		    klumper++;
@@ -327,7 +327,7 @@
 	game.state.cy[i] = iy;
     }
     // Locate planets in galaxy
-    for (i = 0; i < inplan; i++) {
+    for (i = 0; i < game.inplan; i++) {
 	do iran(GALSIZE, &ix, &iy); while (game.state.galaxy[ix][iy].planets);
 	game.state.galaxy[ix][iy].planets = 1;
 	game.state.plnets[i].x = ix;
@@ -361,17 +361,17 @@
     skip(2);
     game.state.snap = 0;
 		
-    if (skill == SKILL_NOVICE) {
+    if (game.skill == SKILL_NOVICE) {
 	prout("It is stardate %d. The Federation is being attacked by",
 	      (int)game.state.date);
 	prout("a deadly Klingon invasion force. As captain of the United");
 	prout("Starship U.S.S. Enterprise, it is your mission to seek out");
 	prout("and destroy this invasion force of %d battle cruisers.",
 	      INKLINGTOT);
-	prout("You have an initial allotment of %d stardates to complete", (int)intime);
+	prout("You have an initial allotment of %d stardates to complete", (int)game.intime);
 	prout("your mission.  As you proceed you may be given more time.");
 	prout("");
-	prout("You will have %d supporting starbases.", inbase);
+	prout("You will have %d supporting starbases.", game.inbase);
 	proutn("Starbase locations-  ");
     }
     else {
@@ -380,34 +380,34 @@
 	prout("%d Klingons.", INKLINGTOT);
 	prout("An unknown number of Romulans.");
 	if (game.state.nscrem) prout("and one (GULP) Super-Commander.");
-	prout("%d stardates.",(int)intime);
-	proutn("%d starbases in ", inbase);
+	prout("%d stardates.",(int)game.intime);
+	proutn("%d starbases in ", game.inbase);
     }
-    for (i = 1; i <= inbase; i++) {
+    for (i = 1; i <= game.inbase; i++) {
 	proutn(cramlc(0, game.state.baseqx[i], game.state.baseqy[i]));
 	proutn("  ");
     }
     skip(2);
     proutn("The Enterprise is currently in ");
-    proutn(cramlc(quadrant, quadx, quady));
+    proutn(cramlc(quadrant, game.quadx, game.quady));
     proutn(" ");
-    proutn(cramlc(sector, sectx, secty));
+    proutn(cramlc(sector, game.sectx, game.secty));
     skip(2);
     prout("Good Luck!");
     if (game.state.nscrem) prout("  YOU'LL NEED IT.");
     waitfor();
     newqad(0);
-    if (nenhere-iqhere-ithere) shldup=1.0;
-    if (neutz) attack(0);	// bad luck to start in a Romulan Neutral Zone
+    if (game.nenhere-iqhere-game.ithere) game.shldup=1.0;
+    if (game.neutz) attack(0);	// bad luck to start in a Romulan Neutral Zone
 }
 
 int choose(int needprompt) 
 {
     while (TRUE) {
-	tourn = 0;
-	thawed = 0;
-	skill = SKILL_NONE;
-	length = 0;
+	game.tourn = 0;
+	game.thawed = 0;
+	game.skill = SKILL_NONE;
+	game.length = 0;
 	if (needprompt) /* Can start with command line options */
 	    proutn("Would you like a regular, tournament, or saved game? ");
 	scan();
@@ -420,7 +420,7 @@
 		chew();
 		continue; // We don't want a blank entry
 	    }
-	    tourn = (int)aaitem;
+	    game.tourn = (int)aaitem;
 	    thingx = -1;
 	    srand((unsigned int)(int)aaitem);
 	    break;
@@ -429,7 +429,7 @@
 	    if (thaw()) continue;
 	    chew();
 	    if (*game.passwd==0) continue;
-	    if (!alldone) thawed = 1; // No plaque if not finished
+	    if (!game.alldone) game.thawed = 1; // No plaque if not finished
 	    report();
 	    waitfor();
 	    return TRUE;
@@ -440,16 +440,16 @@
 	prout("\"?");
 	chew();
     }
-    while (length==0 || skill==SKILL_NONE) {
+    while (game.length==0 || game.skill==SKILL_NONE) {
 	if (scan() == IHALPHA) {
-	    if (isit("short")) length = 1;
-	    else if (isit("medium")) length = 2;
-	    else if (isit("long")) length = 4;
-	    else if (isit("novice")) skill = SKILL_NOVICE;
-	    else if (isit("fair")) skill = SKILL_FAIR;
-	    else if (isit("good")) skill = SKILL_GOOD;
-	    else if (isit("expert")) skill = SKILL_EXPERT;
-	    else if (isit("emeritus")) skill = SKILL_EMERITUS;
+	    if (isit("short")) game.length = 1;
+	    else if (isit("medium")) game.length = 2;
+	    else if (isit("long")) game.length = 4;
+	    else if (isit("novice")) game.skill = SKILL_NOVICE;
+	    else if (isit("fair")) game.skill = SKILL_FAIR;
+	    else if (isit("good")) game.skill = SKILL_GOOD;
+	    else if (isit("expert")) game.skill = SKILL_EXPERT;
+	    else if (isit("emeritus")) game.skill = SKILL_EMERITUS;
 	    else {
 		proutn("What is \"");
 		proutn(citem);
@@ -458,8 +458,8 @@
 	}
 	else {
 	    chew();
-	    if (length==0) proutn("Would you like a Short, Medium, or Long game? ");
-	    else if (skill == SKILL_NONE) proutn("Are you a Novice, Fair, Good, Expert, or Emeritus player? ");
+	    if (game.length==0) proutn("Would you like a Short, Medium, or Long game? ");
+	    else if (game.skill == SKILL_NONE) proutn("Are you a Novice, Fair, Good, Expert, or Emeritus player? ");
 	}
     }
     // Choose game options -- added by ESR for SST2K
@@ -487,27 +487,27 @@
     }
     setpassword();
 #ifdef DEBUG
-    if (strcmp(game.passwd, "debug")==0) idebug = 1;
+    if (strcmp(game.passwd, "debug")==0) game.idebug = 1;
 #endif
 
     // Use parameters to generate initial values of things
-    damfac = 0.5 * skill;
+    game.damfac = 0.5 * game.skill;
     game.state.rembase = 2.0 + Rand()*(BASEMAX-2.0);
-    inbase = game.state.rembase;
+    game.inbase = game.state.rembase;
     if (game.options & OPTION_PLANETS)
-	inplan = (PLNETMAX/2) + (PLNETMAX/2+1)*Rand();
-    game.state.nromrem = inrom = (2.0+Rand())*skill;
-    game.state.nscrem = inscom = (skill > SKILL_FAIR ? 1 : 0);
-    game.state.remtime = 7.0 * length;
-    intime = game.state.remtime;
-    game.state.remkl = inkling = 2.0*intime*((skill+1 - 2*Rand())*skill*0.1+.15);
-    incom = skill + 0.0625*inkling*Rand();
-    game.state.remcom = min(10, incom);
-    incom = game.state.remcom;
-    game.state.remres = (inkling+4*incom)*intime;
-    inresor = game.state.remres;
-    if (inkling > 50) {
-	inbase = (game.state.rembase += 1);
+	game.inplan = (PLNETMAX/2) + (PLNETMAX/2+1)*Rand();
+    game.state.nromrem = game.inrom = (2.0+Rand())*game.skill;
+    game.state.nscrem = game.inscom = (game.skill > SKILL_FAIR ? 1 : 0);
+    game.state.remtime = 7.0 * game.length;
+    game.intime = game.state.remtime;
+    game.state.remkl = game.inkling = 2.0*game.intime*((game.skill+1 - 2*Rand())*game.skill*0.1+.15);
+    game.incom = game.skill + 0.0625*game.inkling*Rand();
+    game.state.remcom = min(10, game.incom);
+    game.incom = game.state.remcom;
+    game.state.remres = (game.inkling+4*game.incom)*game.intime;
+    game.inresor = game.state.remres;
+    if (game.inkling > 50) {
+	game.inbase = (game.state.rembase += 1);
     }
     return FALSE;
 }
@@ -521,11 +521,11 @@
 
 void newcnd(void) 
 {
-    condit = IHGREEN;
-    if (energy < 1000.0) condit = IHYELLOW;
-    if (game.state.galaxy[quadx][quady].klingons || game.state.galaxy[quadx][quady].romulans)
-	condit = IHRED;
-    if (!alive) condit=IHDEAD;
+    game.condit = IHGREEN;
+    if (game.energy < 1000.0) game.condit = IHYELLOW;
+    if (game.state.galaxy[game.quadx][game.quady].klingons || game.state.galaxy[game.quadx][game.quady].romulans)
+	game.condit = IHRED;
+    if (!game.alive) game.condit=IHDEAD;
 }
 
 
@@ -533,101 +533,101 @@
 {
     int i, j, ix, iy, nplan;
 
-    iattak = 1;
-    justin = 1;
-    basex = basey = 0;
-    klhere = 0;
-    comhere = 0;
-    plnetx = plnety = 0;
-    ishere = 0;
-    irhere = 0;
-    iplnet = 0;
-    nenhere = 0;
-    neutz = 0;
-    inorbit = 0;
-    landed = -1;
-    ientesc = 0;
-    ithere = 0;
+    game.iattak = 1;
+    game.justin = 1;
+    game.basex = game.basey = 0;
+    game.klhere = 0;
+    game.comhere = 0;
+    game.plnetx = game.plnety = 0;
+    game.ishere = 0;
+    game.irhere = 0;
+    game.iplnet = 0;
+    game.nenhere = 0;
+    game.neutz = 0;
+    game.inorbit = 0;
+    game.landed = -1;
+    game.ientesc = 0;
+    game.ithere = 0;
     iqhere=0;
     iqengry=0;
-    iseenit = 0;
-    if (iscate) {
+    game.iseenit = 0;
+    if (game.iscate) {
 	// Attempt to escape Super-commander, so tbeam back!
-	iscate = 0;
-	ientesc = 1;
+	game.iscate = 0;
+	game.ientesc = 1;
     }
     // Clear quadrant
     for_sectors(i)
 	for_sectors(j) 
 	    game.quad[i][j] = IHDOT;
     // cope with supernova
-    if (game.state.galaxy[quadx][quady].supernova)
+    if (game.state.galaxy[game.quadx][game.quady].supernova)
 	return;
-    klhere = game.state.galaxy[quadx][quady].klingons;
-    irhere = game.state.galaxy[quadx][quady].romulans;
-    nplan  = game.state.galaxy[quadx][quady].planets;
-    nenhere = klhere + irhere;
+    game.klhere = game.state.galaxy[game.quadx][game.quady].klingons;
+    game.irhere = game.state.galaxy[game.quadx][game.quady].romulans;
+    nplan  = game.state.galaxy[game.quadx][game.quady].planets;
+    game.nenhere = game.klhere + game.irhere;
 
     // Position Starship
-    game.quad[sectx][secty] = ship;
+    game.quad[game.sectx][game.secty] = game.ship;
 
-    if (game.state.galaxy[quadx][quady].klingons) {
+    if (game.state.galaxy[game.quadx][game.quady].klingons) {
 	// Position ordinary Klingons
-	for (i = 1; i <= klhere; i++) {
+	for (i = 1; i <= game.klhere; i++) {
 	    dropin(IHK, &ix, &iy);
 	    game.kx[i] = ix;
 	    game.ky[i] = iy;
-	    game.kdist[i] = game.kavgd[i] = sqrt(square(sectx-ix) + square(secty-iy));
-	    game.kpower[i] = Rand()*150.0 +300.0 +25.0*skill;
+	    game.kdist[i] = game.kavgd[i] = sqrt(square(game.sectx-ix) + square(game.secty-iy));
+	    game.kpower[i] = Rand()*150.0 +300.0 +25.0*game.skill;
 	}
 	// If we need a commander, promote a Klingon
 	for_commanders(i)
-	    if (game.state.cx[i]==quadx && game.state.cy[i]==quady) break;
+	    if (game.state.cx[i]==game.quadx && game.state.cy[i]==game.quady) break;
 			
 	if (i <= game.state.remcom) {
 	    game.quad[ix][iy] = IHC;
-	    game.kpower[klhere] = 950.0+400.0*Rand()+50.0*skill;
-	    comhere = 1;
+	    game.kpower[game.klhere] = 950.0+400.0*Rand()+50.0*game.skill;
+	    game.comhere = 1;
 	}
 
 	// If we need a super-commander, promote a Klingon
-	if (quadx == game.state.isx && quady == game.state.isy) {
+	if (game.quadx == game.state.isx && game.quady == game.state.isy) {
 	    game.quad[game.kx[1]][game.ky[1]] = IHS;
-	    game.kpower[1] = 1175.0 + 400.0*Rand() + 125.0*skill;
-	    iscate = game.state.remkl>1;
-	    ishere = 1;
+	    game.kpower[1] = 1175.0 + 400.0*Rand() + 125.0*game.skill;
+	    game.iscate = game.state.remkl>1;
+	    game.ishere = 1;
 	}
     }
     // Put in Romulans if needed
-    for (i = klhere+1; i <= nenhere; i++) {
+    for (i = game.klhere+1; i <= game.nenhere; i++) {
 	dropin(IHR, &ix, &iy);
 	game.kx[i] = ix;
 	game.ky[i] = iy;
-	game.kdist[i] = game.kavgd[i] = sqrt(square(sectx-ix) + square(secty-iy));
-	game.kpower[i] = Rand()*400.0 + 450.0 + 50.0*skill;
+	game.kdist[i] = game.kavgd[i] = sqrt(square(game.sectx-ix) + square(game.secty-iy));
+	game.kpower[i] = Rand()*400.0 + 450.0 + 50.0*game.skill;
     }
     // If quadrant needs a starbase, put it in
-    if (game.state.galaxy[quadx][quady].starbase)
-	dropin(IHB, &basex, &basey);
+    if (game.state.galaxy[game.quadx][game.quady].starbase)
+	dropin(IHB, &game.basex, &game.basey);
 	
     if (nplan) {
 	// If quadrant needs a planet, put it in
-	for (i=0; i < inplan; i++)
-	    if (game.state.plnets[i].x == quadx && game.state.plnets[i].y == quady) break;
-	if (i < inplan) {
-	    iplnet = i;
-	    dropin(IHP, &plnetx, &plnety);
+	for (i=0; i < game.inplan; i++)
+	    if (game.state.plnets[i].x == game.quadx && game.state.plnets[i].y == game.quady) break;
+	if (i < game.inplan) {
+	    game.iplnet = i;
+	    dropin(IHP, &game.plnetx, &game.plnety);
 	}
     }
-    // Check for condition
+    // Check for game.condition
     newcnd();
     // And finally the stars
-    for (i = 1; i <= game.state.galaxy[quadx][quady].stars; i++) 
+    for (i = 1; i <= game.state.galaxy[game.quadx][game.quady].stars; i++) 
 	dropin(IHSTAR, &ix, &iy);
 
     // Check for RNZ
-    if (irhere > 0 && klhere == 0) {
-	neutz = 1;
+    if (game.irhere > 0 && game.klhere == 0) {
+	game.neutz = 1;
 	if (game.damage[DRADIO] <= 0.0) {
 	    skip(1);
 	    prout("LT. Uhura- \"Captain, an urgent message.");
@@ -640,16 +640,16 @@
 
     if (shutup==0) {
 	// Put in THING if needed
-	if (thingx == quadx && thingy == quady) {
+	if (thingx == game.quadx && thingy == game.quady) {
 	    dropin(IHQUEST, &ix, &iy);
 	    iran(GALSIZE, &thingx, &thingy);
-	    nenhere++;
+	    game.nenhere++;
 	    iqhere=1;
-	    game.kx[nenhere] = ix;
-	    game.ky[nenhere] = iy;
-	    game.kdist[nenhere] = game.kavgd[nenhere] =
-		sqrt(square(sectx-ix) + square(secty-iy));
-	    game.kpower[nenhere] = Rand()*6000.0 +500.0 +250.0*skill;
+	    game.kx[game.nenhere] = ix;
+	    game.ky[game.nenhere] = iy;
+	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] =
+		sqrt(square(game.sectx-ix) + square(game.secty-iy));
+	    game.kpower[game.nenhere] = Rand()*6000.0 +500.0 +250.0*game.skill;
 	    if (game.damage[DSRSENS] == 0.0) {
 		skip(1);
 		prout("MR. SPOCK- \"Captain, this is most unusual.");
@@ -660,25 +660,25 @@
 
     // Decide if quadrant needs a Tholian
     if (game.options & OPTION_THOLIAN) {
-	if ((skill < SKILL_GOOD && Rand() <= 0.02) ||   /* Lighten up if skill is low */
-	    (skill == SKILL_GOOD && Rand() <= 0.05) ||
-	    (skill > SKILL_GOOD && Rand() <= 0.08)
+	if ((game.skill < SKILL_GOOD && Rand() <= 0.02) ||   /* Lighten up if skill is low */
+	    (game.skill == SKILL_GOOD && Rand() <= 0.05) ||
+	    (game.skill > SKILL_GOOD && Rand() <= 0.08)
     #ifdef DEBUG
 	    || strcmp(game.passwd, "tholianx")==0
     #endif
 	    ) {
 	    do {
-		ithx = Rand() > 0.5 ? QUADSIZE : 1;
-		ithy = Rand() > 0.5 ? QUADSIZE : 1;
-	    } while (game.quad[ithx][ithy] != IHDOT);
-	    game.quad[ithx][ithy] = IHT;
-	    ithere = 1;
-	    nenhere++;
-	    game.kx[nenhere] = ithx;
-	    game.ky[nenhere] = ithy;
-	    game.kdist[nenhere] = game.kavgd[nenhere] =
-		sqrt(square(sectx-ithx) + square(secty-ithy));
-	    game.kpower[nenhere] = Rand()*400.0 +100.0 +25.0*skill;
+		game.ithx = Rand() > 0.5 ? QUADSIZE : 1;
+		game.ithy = Rand() > 0.5 ? QUADSIZE : 1;
+	    } while (game.quad[game.ithx][game.ithy] != IHDOT);
+	    game.quad[game.ithx][game.ithy] = IHT;
+	    game.ithere = 1;
+	    game.nenhere++;
+	    game.kx[game.nenhere] = game.ithx;
+	    game.ky[game.nenhere] = game.ithy;
+	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] =
+		sqrt(square(game.sectx-game.ithx) + square(game.secty-game.ithy));
+	    game.kpower[game.nenhere] = Rand()*400.0 +100.0 +25.0*game.skill;
 	    /* Reserve unocupied corners */
 	    if (game.quad[1][1]==IHDOT) game.quad[1][1] = 'X';
 	    if (game.quad[1][QUADSIZE]==IHDOT) game.quad[1][QUADSIZE] = 'X';
@@ -695,7 +695,7 @@
 	    dropin(IHBLANK, &ix, &iy);
 
     // Take out X's in corners if Tholian present
-    if (ithere) {
+    if (game.ithere) {
 	if (game.quad[1][1]=='X') game.quad[1][1] = IHDOT;
 	if (game.quad[1][QUADSIZE]=='X') game.quad[1][QUADSIZE] = IHDOT;
 	if (game.quad[QUADSIZE][1]=='X') game.quad[QUADSIZE][1] = IHDOT;
@@ -710,11 +710,11 @@
 
     // The author liked bubble sort. So we will use it. :-(
 
-    if (nenhere-iqhere-ithere < 2) return;
+    if (game.nenhere-iqhere-game.ithere < 2) return;
 
     do {
 	sw = FALSE;
-	for (j = 1; j < nenhere; j++)
+	for (j = 1; j < game.nenhere; j++)
 	    if (game.kdist[j] > game.kdist[j+1]) {
 		sw = TRUE;
 		t = game.kdist[j];

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-14 18:25:06 UTC (rev 560)
+++ trunk/src/sst.c	2006-09-14 20:42:27 UTC (rev 561)
@@ -375,8 +375,8 @@
 	drawmaps(1);
 	while (TRUE)  { /* get a command */
 	    hitme = FALSE;
-	    justin = 0;
-	    Time = 0.0;
+	    game.justin = 0;
+	    game.optime = 0.0;
 	    i = -1;
 	    chew();
 	    setwnd(prompt_window);
@@ -386,7 +386,7 @@
 		makechart();
 		continue;
 	    }
-	    ididit=0;
+	    game.ididit=0;
 	    clrscr();
 	    setwnd(message_window);
 	    clrscr();
@@ -422,25 +422,25 @@
 	    break;
 	case PHASERS:			// phasers
 	    phasers();
-	    if (ididit) hitme = TRUE;
+	    if (game.ididit) hitme = TRUE;
 	    break;
 	case TORPEDO:			// photons
 	    photon();
-	    if (ididit) hitme = TRUE;
+	    if (game.ididit) hitme = TRUE;
 	    break;
 	case MOVE:			// move
 	    warp(1);
 	    break;
 	case SHIELDS:			// shields
 	    doshield(1);
-	    if (ididit) {
+	    if (game.ididit) {
 		hitme=TRUE;
-		shldchg = 0;
+		game.shldchg = 0;
 	    }
 	    break;
 	case DOCK:			// dock
 	    dock(1);
-	    if (ididit) attack(0);
+	    if (game.ididit) attack(0);
 	    break;
 	case DAMAGES:			// damages
 	    dreprt();
@@ -453,7 +453,7 @@
 	    break;
 	case REST:			// rest
 	    wait();
-	    if (ididit) hitme = TRUE;
+	    if (game.ididit) hitme = TRUE;
 	    break;
 	case WARP:			// warp
 	    setwrp();
@@ -466,22 +466,22 @@
 	    break;
 	case ORBIT:			// orbit
 	    orbit();
-	    if (ididit) hitme = TRUE;
+	    if (game.ididit) hitme = TRUE;
 	    break;
 	case TRANSPORT:			// transport "beam"
 	    beam();
 	    break;
 	case MINE:			// mine
 	    mine();
-	    if (ididit) hitme = TRUE;
+	    if (game.ididit) hitme = TRUE;
 	    break;
 	case CRYSTALS:			// crystals
 	    usecrystals();
-	    if (ididit) hitme = TRUE;
+	    if (game.ididit) hitme = TRUE;
 	    break;
 	case SHUTTLE:			// shuttle
 	    shuttle();
-	    if (ididit) hitme = TRUE;
+	    if (game.ididit) hitme = TRUE;
 	    break;
 	case PLANETS:			// Planet list
 	    preport();
@@ -502,7 +502,7 @@
 	    break;
 	case PROBE:
 	    probe();			// Launch probe
-	    if (ididit) hitme = TRUE;
+	    if (game.ididit) hitme = TRUE;
 	    break;
 	case ABANDON:			// Abandon Ship
 	    abandn();
@@ -513,12 +513,12 @@
 	case SAVE:			// Save Game
 	    freeze(FALSE);
 	    clrscr();
-	    if (skill > SKILL_GOOD)
+	    if (game.skill > SKILL_GOOD)
 		prout("WARNING--Saved games produce no plaques!");
 	    break;
 	case DEATHRAY:			// Try a desparation measure
 	    deathray();
-	    if (ididit) hitme = TRUE;
+	    if (game.ididit) hitme = TRUE;
 	    break;
 	case DEBUGCMD:			// What do we want for debug???
 #ifdef DEBUG
@@ -527,12 +527,12 @@
 	    break;
 	case MAYDAY:			// Call for help
 	    help();
-	    if (ididit) hitme = TRUE;
+	    if (game.ididit) hitme = TRUE;
 	    break;
 	case QUIT:
-	    alldone = 1;		// quit the game
+	    game.alldone = 1;		// quit the game
 #ifdef DEBUG
-	    if (idebug) score();
+	    if (game.idebug) score();
 #endif
 	    break;
 	case HELP:
@@ -541,22 +541,22 @@
 	}
 	commandhook(commands[i].name, FALSE);
 	for (;;) {
-	    if (alldone) break;		// Game has ended
+	    if (game.alldone) break;		// Game has ended
 #ifdef DEBUG
-	    if (idebug) prout("2500");
+	    if (game.idebug) prout("2500");
 #endif
-	    if (Time != 0.0) {
+	    if (game.optime != 0.0) {
 		events();
-		if (alldone) break;	// Events did us in
+		if (game.alldone) break;	// Events did us in
 	    }
-	    if (game.state.galaxy[quadx][quady].supernova) { // Galaxy went Nova!
+	    if (game.state.galaxy[game.quadx][game.quady].supernova) { // Galaxy went Nova!
 		atover(0);
 		continue;
 	    }
-	    if (hitme && justin==0) {
+	    if (hitme && game.justin==0) {
 		attack(2);
-		if (alldone) break;
-		if (game.state.galaxy[quadx][quady].supernova) {	// went NOVA! 
+		if (game.alldone) break;
+		if (game.state.galaxy[game.quadx][game.quady].supernova) {	// went NOVA! 
 		    atover(0);
 		    hitme = TRUE;
 		    continue;
@@ -564,7 +564,7 @@
 	    }
 	    break;
 	}
-	if (alldone) break;
+	if (game.alldone) break;
     }
 }
 
@@ -607,16 +607,16 @@
 	clrscr();
 	prelim();
 	setup(line[0] == '\0');
-	if (alldone) {
+	if (game.alldone) {
 	    score();
-	    alldone = 0;
+	    game.alldone = 0;
 	}
 	else makemoves();
 	skip(1);
 	stars();
 	skip(1);
 
-	if (tourn && alldone) {
+	if (game.tourn && game.alldone) {
 	    proutn("Do you want your score recorded?");
 	    if (ja()) {
 		chew2();
@@ -675,7 +675,7 @@
 void crmshp(void) 
 {
     char *s;
-    switch (ship) {
+    switch (game.ship) {
     case IHE: s = "Enterprise"; break;
     case IHF: s = "Faerie Queene"; break;
     default:  s = "Ship???"; break;
@@ -805,10 +805,10 @@
 {
     proutn("Reset levels? ");
     if (ja() != 0) {
-	if (energy < inenrg) energy = inenrg;
-	shield = inshld;
-	torps = intorps;
-	lsupres = inlsr;
+	if (energy < game.inenrg) energy = game.inenrg;
+	shield = game.inshld;
+	torps = game.intorps;
+	game.lsupres = game.inlsr;
     }
     proutn("Reset damage? ");
     if (ja() != 0) {
@@ -817,10 +817,10 @@
 	    if (game.damage[i] > 0.0) 
 		game.damage[i] = 0.0;
     }
-    proutn("Toggle idebug? ");
+    proutn("Toggle game.idebug? ");
     if (ja() != 0) {
-	idebug = !idebug;
-	if (idebug) prout("Debug output ON");
+	game.idebug = !game.idebug;
+	if (game.idebug) prout("Debug output ON");
 	else prout("Debug output OFF");
     }
     proutn("Cause selective damage? ");
@@ -864,7 +864,7 @@
     }
     proutn("Induce supernova here? ");
     if (ja() != 0) {
-	game.state.galaxy[quadx][quady].supernova = TRUE;
+	game.state.galaxy[game.quadx][game.quady].supernova = TRUE;
 	atover(1);
     }
 }

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-14 18:25:06 UTC (rev 560)
+++ trunk/src/sst.h	2006-09-14 20:42:27 UTC (rev 561)
@@ -32,7 +32,7 @@
 #define for_quadrants(i)	for (i = 1; i <= GALSIZE; i++)
 #define for_sectors(i)		for (i = 1; i <= QUADSIZE; i++)
 #define for_commanders(i)	for (i = 1; i <= game.state.remcom; i++)
-#define for_local_enemies(i)	for (i = 1; i <= nenhere; i++)
+#define for_local_enemies(i)	for (i = 1; i <= game.nenhere; i++)
 #define for_starbases(i)	for (i = 1; i <= game.state.rembase; i++)
 
 typedef struct {
@@ -79,12 +79,12 @@
     } chart[GALSIZE+1][GALSIZE+1]; 	// the starchart (subscript 0 not used)
 } snapshot;				// Data that is snapshot
 
-#define NKILLK (inkling - game.state.remkl)
-#define NKILLC (incom - game.state.remcom)
-#define NKILLSC (inscom - game.state.nscrem)
-#define NKILLROM (inrom - game.state.nromrem)
+#define NKILLK (game.inkling - game.state.remkl)
+#define NKILLC (game.incom - game.state.remcom)
+#define NKILLSC (game.inscom - game.state.nscrem)
+#define NKILLROM (game.inrom - game.state.nromrem)
 #define KLINGREM (game.state.remkl + game.state.remcom + game.state.nscrem)
-#define INKLINGTOT (inkling + incom + inscom)
+#define INKLINGTOT (game.inkling + game.incom + game.inscom)
 #define KLINGKILLED (INKLINGTOT - KLINGREM)
 
 #define SKILL_NONE	0
@@ -167,186 +167,97 @@
     char passwd[10];		// Self Destruct password
     int kx[(QUADSIZE+1)*(QUADSIZE+1)];			// enemy sector locations
     int ky[(QUADSIZE+1)*(QUADSIZE+1)];
-    /* members with macro definitions start here */
-    int inkling,
-	inbase,
-	incom,
-	inscom,
-	inrom,
-	instar,
-	intorps,
-	condit,
-	torps,
-	ship,
-	quadx,
-	quady,
-	sectx,
-	secty,
-	length,
-	skill,
-	basex,
-	basey,
-	klhere,
-	comhere,
-	casual,
-	nhelp,
-	nkinks,
-	ididit,
-	gamewon,
-	alive,
-	justin,
-	alldone,
-	shldchg,
-	plnetx,
-	plnety,
-	inorbit,
-	landed,
-	iplnet,
-	imine,
-	inplan,
-	nenhere,
-	ishere,
-	neutz,
-	irhere,
-	icraft,
-	ientesc,
-	iscraft,
-	isatb,
-	iscate,
+    int inkling,	// Initial number of klingons
+	inbase,		// Initial number of bases
+	incom,		// Initial number of commanders
+	inscom,		// Initial number of commanders
+	inrom,		// Initial number of commanders
+	instar,		// Initial stars
+	intorps,	// Initial/Max torpedoes
+	condit,		// Condition (red/yellow/green/docked)
+	torps,		// number of torpedoes
+	ship,		// Ship type -- 'E' is Enterprise
+	quadx,		// where we are
+	quady,		//
+	sectx,		// where we are
+	secty,		//
+	length,		// length of game
+	skill,		// skill level
+	basex,		// position of base in current quadrant
+	basey,		//
+	klhere,		// klingons here
+	comhere,	// commanders here
+	casual,		// causalties
+	nhelp,		// calls for help
+	nkinks,		// count of energy-barrier crossings
+	ididit,		// Action taken -- allows enemy to attack
+	gamewon,	// Finished!
+	alive,		// We are alive (not killed)
+	justin,		// just entered quadrant
+	alldone,	// game is now finished
+	shldchg,	// shield is changing (affects efficiency)
+	plnetx,		// location of planet in quadrant
+	plnety,		//
+	inorbit,	// orbiting
+	landed,		// party on planet (1), on ship (-1)
+	iplnet,		// planet # in quadrant
+	imine,		// mining
+	inplan,		// initial planets
+	nenhere,	// number of enemies in quadrant
+	ishere,		// super-commander in quandrant
+	neutz,		// Romulan Neutral Zone
+	irhere,		// Romulans in quadrant
+	icraft,		// Kirk in Galileo
+	ientesc,	// attempted escape from supercommander
+	iscraft,	// =1 if craft on ship, -1 if removed from game
+	isatb,		// =1 if super commander is attacking base
+	iscate,		// super commander is here
 #ifdef DEBUG
-	idebug,
+	idebug,		// debug mode
 #endif
-	iattak,
-	icrystl,
-	tourn,
-	thawed,
-	batx,
-	baty,
-	ithere,
-	ithx,
-	ithy,
-	iseenit,
-	probecx,
-	probecy,
-	proben,
-	isarmed,
-	nprobes;
-    double inresor,
-	intime,
-	inenrg,
-	inshld,
-	inlsr,
-	indate,
-	energy,
-	shield,
-	shldup,
-	warpfac,
-	wfacsq,
-	lsupres,
-	dist,
-	direc,
-	Time,
-	docfac,
-	resting,
-	damfac,
-	lastchart,
-	cryprob,
-	probex,
-	probey,
-	probeinx,
-	probeiny,
-	height;
+	iattak,		// attack recursion elimination (was cracks[4])
+	icrystl,	// dilithium crystals aboard
+	tourn,		// tournament number
+	thawed,		// thawed game
+	batx,		// base coordinates being attacked
+	baty,		//
+	ithere,		// Tholian is here 
+	ithx,		// coordinates of Tholian
+	ithy,		//
+	iseenit,	// seen base attack report
+	probecx,	// current probe quadrant
+	probecy,	//
+	proben,		// number of moves for probe
+	isarmed,	// probe is armed
+	nprobes;	// number of probes available
+    double inresor,	// initial resources
+	intime,		// initial time
+	inenrg,		// initial/max energy
+	inshld,		// initial/max shield
+	inlsr,		// initial life support resources
+	indate,		// initial date
+	energy,		// energy level
+	shield,		// shield level
+	shldup,		// shields are up
+	warpfac,	// warp speed
+	wfacsq,		// squared warp factor
+	lsupres,	// life support reserves
+	dist,		// movement distance
+	direc,		// movement direction
+	optime,		// time taken by current operation
+	docfac,		// repair factor when docking (constant?)
+	resting,	// rest time
+	damfac,		// damage factor
+	lastchart,	// time star chart was last updated
+	cryprob,	// probability that crystal will work
+	probex,		// location of probe
+	probey,		//
+	probeinx,	// probe x,y increment
+	probeiny,	//
+	height;		// height of orbit around planet
 };
 extern struct game game;
 
-#define inkling game.inkling		// Initial number of klingons
-#define inbase game.inbase		// Initial number of bases
-#define incom game.incom		// Initian number of commanders
-#define inscom game.inscom		// Initian number of commanders
-#define inrom game.inrom		// Initian number of commanders
-#define instar game.instar		// Initial stars
-#define intorps game.intorps		// Initial/Max torpedoes
-#define condit game.condit		// Condition (red/yellow/green/docked)
-#define torps game.torps		// number of torpedoes
-#define ship game.ship			// Ship type -- 'E' is Enterprise
-#define quadx game.quadx		// where we are
-#define quady game.quady		//
-#define sectx game.sectx		// where we are
-#define secty game.secty		//
-#define length game.length		// length of game
-#define skill game.skill		// skill level
-#define basex game.basex		// position of base in current quad
-#define basey game.basey		//
-#define klhere game.klhere		// klingons here
-#define comhere game.comhere		// commanders here
-#define casual game.casual		// causalties
-#define nhelp game.nhelp		// calls for help
-#define nkinks game.nkinks		//
-#define ididit game.ididit		// Action taken -- allows enemy to attack
-#define gamewon game.gamewon		// Finished!
-#define alive game.alive		// We are alive (not killed)
-#define justin game.justin		// just entered quadrant
-#define alldone game.alldone		// game is now finished
-#define shldchg game.shldchg		// shield is changing (affects efficiency)
-#define plnetx game.plnetx		// location of planet in quadrant
-#define plnety game.plnety		//
-#define inorbit game.inorbit		// orbiting
-#define landed game.landed		// party on planet (1), on ship (-1)
-#define iplnet game.iplnet		// planet # in quadrant
-#define imine game.imine		// mining
-#define inplan game.inplan		// initial planets
-#define nenhere game.nenhere		// Number of enemies in quadrant
-#define ishere game.ishere		// Super-commander in quandrant
-#define neutz game.neutz		// Romulan Neutral Zone
-#define irhere game.irhere		// Romulans in quadrant
-#define icraft game.icraft		// Kirk in Galileo
-#define ientesc game.ientesc		// Attempted escape from supercommander
-#define iscraft game.iscraft		// =1 if craft on ship, -1 if removed from game
-#define isatb game.isatb		// =1 if SuperCommander is attacking base
-#define iscate game.iscate		// Super Commander is here
-#ifdef DEBUG
-#define idebug game.idebug		// Debug mode
-#endif
-#define iattak game.iattak		// attack recursion elimination (was cracks[4])
-#define icrystl game.icrystl		// dilithium crystals aboard
-#define tourn game.tourn		// Tournament number
-#define thawed game.thawed		// Thawed game
-#define batx game.batx			// Base coordinates being attacked
-#define baty game.baty			//
-#define ithere game.ithere		// Tholean is here 
-#define ithx game.ithx			// coordinates of tholean
-#define ithy game.ithy
-#define iseenit game.iseenit		// Seen base attack report
-#define inresor game.inresor		// initial resources
-#define intime game.intime		// initial time
-#define inenrg game.inenrg		// Initial/Max Energy
-#define inshld game.inshld		// Initial/Max Shield
-#define inlsr game.inlsr		// initial life support resources
-#define indate game.indate		// Initial date
-#define energy game.energy		// Energy level
-#define shield game.shield		// Shield level
-#define shldup game.shldup		// Shields are up
-#define warpfac game.warpfac		// Warp speed
-#define wfacsq game.wfacsq		// squared warp factor
-#define lsupres game.lsupres		// life support reserves
-#define dist game.dist			// movement distance
-#define direc game.direc		// movement direction
-#define Time game.Time			// time taken by current operation
-#define docfac game.docfac		// repair factor when docking (constant?)
-#define resting game.resting		// rest time
-#define damfac game.damfac		// damage factor
-#define lastchart game.lastchart	// time star chart was last updated
-#define cryprob game.cryprob		// probability that crystal will work
-#define probex game.probex		// location of probe
-#define probey game.probey
-#define probecx game.probecx		// current probe quadrant
-#define probecy game.probecy	
-#define probeinx game.probeinx		// Probe x,y increment
-#define probeiny game.probeiny		
-#define proben game.proben		// number of moves for probe
-#define isarmed game.isarmed		// Probe is armed
-#define nprobes game.nprobes		// number of probes available
-
 /* the following global state doesn't need to be saved */
 extern char *device[NDEVICES];
 extern int iscore, iskill; // Common PLAQ

Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-14 18:25:06 UTC (rev 560)
+++ trunk/src/xio.c	2006-09-14 20:42:27 UTC (rev 561)
@@ -8,8 +8,6 @@
 #include <X11/Xaw/AsciiText.h>
 #include "sst.h"
 
-#undef length	/* ugh -- must get rid of ugly #defines */
-
 static XtAppContext app_context;
 static Widget toplevel, text, form; 
 static Widget navigation, weapons, planets, misc; 



From esr at mail.berlios.de  Thu Sep 14 23:46:38 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 14 Sep 2006 23:46:38 +0200
Subject: [Sst-commit-watch] r563 - trunk/doc
Message-ID: <200609142146.k8ELkcpZ031575@sheep.berlios.de>

Author: esr
Date: 2006-09-14 23:46:37 +0200 (Thu, 14 Sep 2006)
New Revision: 563

Modified:
   trunk/doc/sst-doc.xml
Log:
Typo fixes.


Modified: trunk/doc/sst-doc.xml
===================================================================
--- trunk/doc/sst-doc.xml	2006-09-14 20:58:49 UTC (rev 562)
+++ trunk/doc/sst-doc.xml	2006-09-14 21:46:37 UTC (rev 563)
@@ -231,6 +231,7 @@
 
 </chapter>
 <chapter><title>Starting the Game</title>
+<!-- This chapter is new in SST 2K --> 
 
 <para>The program will ask you some setup questions.  You can give it 
 command-line arguments that will be treated as answers.  Any token
@@ -328,7 +329,7 @@
 or more commands begin with the same letter, and in this case that
 letter refers to a particular one of the commands; to get the other,
 your abbreviation must be two or more characters long.  This sounds
-complicated, but you will learn the abbreviations qGuickly enough.</para>
+complicated, but you will learn the abbreviations quickly enough.</para>
 
 <para>What this all boils down to is:</para>
 
@@ -460,12 +461,12 @@
 </listitem>
 </varlistentry>
 <varlistentry>
-<term>LIFE SUPPOR</term>
+<term>LIFE SUPPORT</term>
 <listitem>
 <para>If <quote>ACTIVE</quote> then life support systems are functioning
 normally. If on <quote>RESERVES</quote> the number is how many stardates your
 reserve food, air, etc. will last&mdash;you must get repairs made or get to
-starbase before your reserves run out.</para>
+a starbase before your reserves run out.</para>
 </listitem>
 </varlistentry>
 <varlistentry>
@@ -1029,7 +1030,7 @@
 <literallayout>
 Mnemonic:  REST
 Shortest abbreviation:  R
-Full command:  REST &lt;NUMBER OF STARDATES&gt;
+Full command:  REST &lt;NUMBER-OF-STARDATES&gt;
 </literallayout>
 
 <para>This command simply allows the specified number of stardates to go
@@ -1037,7 +1038,7 @@
 until repairs are made before you go back into battle.</para>
 
 <para>It is not generally advisable to rest while you are under attack by
-Klingons.</para>
+Klingons or Romulans.</para>
 
 </sect1>
 <sect1><title>Call Starbase for Help</title>
@@ -1048,7 +1049,7 @@
 </literallayout>
 
 <para>[Originally, this command was called <quote>HELP</quote>, but
-these days that might be misconstrued as an attempt to browae built-in
+these days that might be misconstrued as an attempt to browse built-in
 documentation! In some later versions it was CALL.]</para>
 
 <para>When you get into serious trouble, you may call a starbase for



From esr at mail.berlios.de  Fri Sep 15 01:02:56 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 15 Sep 2006 01:02:56 +0200
Subject: [Sst-commit-watch] r564 - trunk/src
Message-ID: <200609142302.k8EN2uIM024321@sheep.berlios.de>

Author: esr
Date: 2006-09-15 01:02:52 +0200 (Fri, 15 Sep 2006)
New Revision: 564

Modified:
   trunk/src/xio.c
Log:
Document the problems with xio.c.


Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-14 21:46:37 UTC (rev 563)
+++ trunk/src/xio.c	2006-09-14 23:02:52 UTC (rev 564)
@@ -1,3 +1,20 @@
+/*
+ * Problems with this code:
+ *   1. The text window behaves like it's only a few lines high, 
+ *      scrolling in response to Return when the insertion point 
+ *      is nowhere near the last line.
+ *   2. The attempt to insert text with XawTextReplace() core dumps.
+ *   3. I haven't found a way to write a callback that triggers on Return 
+ *      and yields the line before the return.  The explanation at
+ *      http://www.linuxjunkies.org/programming/GUI/xwindow/x11/text.html
+ *      hints that this may be difficult.
+ *
+ * The functional goal is this:
+ *    1. Button pushes should be able to insert commands at the buffer's
+ *       current insertion point.
+ *    2. When a user finishes a command with Return, a callback should
+ *       receive the line of input types.
+ */
 #include <stdlib.h>
 #include <X11/Intrinsic.h>
 #include <X11/StringDefs.h>



From esr at mail.berlios.de  Fri Sep 15 03:55:25 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 15 Sep 2006 03:55:25 +0200
Subject: [Sst-commit-watch] r565 - trunk/src
Message-ID: <200609150155.k8F1tPbh028152@sheep.berlios.de>

Author: esr
Date: 2006-09-15 03:55:24 +0200 (Fri, 15 Sep 2006)
New Revision: 565

Modified:
   trunk/src/xio.c
Log:
Temporarily make this standalone.


Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-14 23:02:52 UTC (rev 564)
+++ trunk/src/xio.c	2006-09-15 01:55:24 UTC (rev 565)
@@ -13,9 +13,14 @@
  *    1. Button pushes should be able to insert commands at the buffer's
  *       current insertion point.
  *    2. When a user finishes a command with Return, a callback should
- *       receive the line of input types.
+ *       receive the line of input typed.
+ * 
+ * All the input passed to the game in back of this will be lines full
+ * of commands generated either by typing into the text buffer directly 
+ * or by button presses that generate text unto the buffer.
  */
 #include <stdlib.h>
+#include <stdio.h>
 #include <X11/Intrinsic.h>
 #include <X11/StringDefs.h>
 #include <X11/Shell.h>
@@ -23,7 +28,9 @@
 #include <X11/Xaw/Form.h>
 #include <X11/Xaw/Command.h>
 #include <X11/Xaw/AsciiText.h>
-#include "sst.h"
+//#include "sst.h"
+#define OPTION_PLANETS	1
+#define OPTION_PROBE	2
 
 static XtAppContext app_context;
 static Widget toplevel, text, form; 



From esr at mail.berlios.de  Fri Sep 15 09:43:44 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 15 Sep 2006 09:43:44 +0200
Subject: [Sst-commit-watch] r566 - in trunk: doc src
Message-ID: <200609150743.k8F7hiWI027354@sheep.berlios.de>

Author: esr
Date: 2006-09-15 09:43:44 +0200 (Fri, 15 Sep 2006)
New Revision: 566

Modified:
   trunk/doc/sst-doc.xml
   trunk/src/setup.c
Log:
More typo fixes.


Modified: trunk/doc/sst-doc.xml
===================================================================
--- trunk/doc/sst-doc.xml	2006-09-15 01:55:24 UTC (rev 565)
+++ trunk/doc/sst-doc.xml	2006-09-15 07:43:44 UTC (rev 566)
@@ -95,7 +95,7 @@
 			  Curses Interface By
                               Stas Sergeev 
 
-		SST 2K polishing and historical research by
+		SST2K polishing and historical research by
 			     Eric S. Raymond
 </literallayout>
 </dedication>
@@ -221,7 +221,7 @@
 a lot more meaningful to you.</para>
 
 <para>You have weapons: phasers and photon torpedoes. You have a defense:
-deflector shields.  You can look at things: long-range scaners,
+deflector shields.  You can look at things: long-range scanners,
 short-range scanners, and a star chart.  You can move about, under
 warp drive or impulse power.  You can also dock at a starbase, rest
 while repairs are being made, abandon ship, self destruct, or give up
@@ -605,7 +605,7 @@
 </literallayout>
 
 <para>As you proceed in the game, you learn more and more about what things
-are where in the galaxy. When ever you first do a scan in a quadrant,
+are where in the galaxy. Whenever you first do a scan in a quadrant,
 telemetry sensors are ejected which will report any changes in the
 quadrant(s) back to your ship, providing the sub-space radio is
 working. Spock will enter this information in the chart. If the radio
@@ -1523,11 +1523,11 @@
 promotion available if you go beyond the <quote>Expert</quote> range.
 You can also have a certificate of merit printed with your name, date,
 and Klingon kill rate, provided you are promoted from either the
-<quote>Expert</quote> or <quote>Emeritus</quote> levels. This
-<quote>plaque</quote> requires a 132 column printer. You may need
+<quote>Expert</quote> or <quote>Emeritus</quote> levels. You may need
 print the certificate to a file, import it into your word processor,
 selecting Courier 8pt font, and then print in <quote>landscape
 orientation</quote>.</para>
+<!-- The plaque used to require an 132 column printer. Stas changed that. -->
 
 </chapter>
 <chapter><title>Handy Reference Page</title>

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-15 01:55:24 UTC (rev 565)
+++ trunk/src/setup.c	2006-09-15 07:43:44 UTC (rev 566)
@@ -110,7 +110,7 @@
 	    return;
 	}
 	if (game.damage[DSHUTTL]<0) {
-	    prout("Shuttle craft now serving Big Mac's.");
+	    prout("Shuttle craft now serving Big Macs.");
 	    return;
 	}
 	if (game.damage[DSHUTTL]>0) {
@@ -135,7 +135,7 @@
 	prout("Remainder of ship's complement beam down");
 	prout("to nearest habitable planet.");
 	if (game.state.rembase==0) {
-	    /* Ops! no place to go... */
+	    /* Oops! no place to go... */
 	    finish(FABANDN);
 	    return;
 	}



From esr at mail.berlios.de  Fri Sep 15 11:35:11 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 15 Sep 2006 11:35:11 +0200
Subject: [Sst-commit-watch] r567 - trunk/src
Message-ID: <200609150935.k8F9ZBSx006053@sheep.berlios.de>

Author: esr
Date: 2006-09-15 11:35:11 +0200 (Fri, 15 Sep 2006)
New Revision: 567

Modified:
   trunk/src/reports.c
Log:
Clean up after macro elimination.


Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-15 07:43:44 UTC (rev 566)
+++ trunk/src/reports.c	2006-09-15 09:35:11 UTC (rev 567)
@@ -357,7 +357,7 @@
 		break;
 	if (req > sizeof(requests)/sizeof(requests[0])) {
 	    prout("UNRECOGNIZED REQUEST. Legal requests are:");
-	    prout("  date, game.condition, position, lsupport, game.warpfactor,");
+	    prout("  date, condition, position, lsupport, warpfactor,");
 	    prout("  energy, torpedoes, shields, klingons, time, bases.");
 	    return FALSE;
 	}



From esr at mail.berlios.de  Fri Sep 15 20:41:16 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 15 Sep 2006 20:41:16 +0200
Subject: [Sst-commit-watch] r568 - in trunk: doc src
Message-ID: <200609151841.k8FIfGPC001608@sheep.berlios.de>

Author: esr
Date: 2006-09-15 20:41:16 +0200 (Fri, 15 Sep 2006)
New Revision: 568

Modified:
   trunk/doc/sst-doc.xml
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
Add inhabited planets. Presently this is just color, as they have no dilithium.
In the future, this will become the basis for BSD-Trek like code that allows 
Klingons to attack and enslave inhabited worlds in order to expand their fleet.
(This feature is controlled by OPTION_WORLDS).


Modified: trunk/doc/sst-doc.xml
===================================================================
--- trunk/doc/sst-doc.xml	2006-09-15 09:35:11 UTC (rev 567)
+++ trunk/doc/sst-doc.xml	2006-09-15 18:41:16 UTC (rev 568)
@@ -1247,9 +1247,10 @@
 Shortest abbreviation:  PL
 </literallayout>
 
-<para>Mr. Spock presents you a list of the available information on planets
-in the galaxy.  Since planets do not show up on long-range scans, the
-only way to obtain this information is with the <quote>SENSORS</quote> command.</para>
+<para>Mr. Spock presents you a list of the available information on
+planets in the galaxy which are potential dilithium sources.  Since
+planets do not show up on long-range scans, the only way to obtain
+this information is with the <quote>SENSORS</quote> command.</para>
 
 </sect1>
 <sect1 id="freeze"><title>Freeze</title>

Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-15 09:35:11 UTC (rev 567)
+++ trunk/src/ai.c	2006-09-15 18:41:16 UTC (rev 568)
@@ -351,7 +351,7 @@
 	    game.state.plnets[i].crystals == 1) {
 	    /* destroy the planet */
 	    DESTROY(&game.state.plnets[i]);
-	    game.state.galaxy[game.state.isx][game.state.isy].planets -= 1;
+	    game.state.galaxy[game.state.isx][game.state.isy].planet = NULL;
 	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED) {
 		if (*ipage==0) pause_game(1);
 		*ipage = 1;

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-15 09:35:11 UTC (rev 567)
+++ trunk/src/battle.c	2006-09-15 18:41:16 UTC (rev 568)
@@ -316,7 +316,7 @@
 	    crmena(1, iquad, 2, ix, iy);
 	    prout(" destroyed.");
 	    game.state.nplankl++;
-	    game.state.galaxy[game.quadx][game.quady].planets--;
+	    game.state.galaxy[game.quadx][game.quady].planet = NULL;
 	    DESTROY(&game.state.plnets[game.iplnet]);
 	    game.iplnet = 0;
 	    game.plnetx = game.plnety = 0;

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-15 09:35:11 UTC (rev 567)
+++ trunk/src/events.c	2006-09-15 18:41:16 UTC (rev 568)
@@ -466,7 +466,7 @@
 			game.quad[ii][jj] = IHDOT;
 			break;
 		    case IHP: /* Destroy planet */
-			game.state.galaxy[game.quadx][game.quady].planets -= 1;
+			game.state.galaxy[game.quadx][game.quady].planet = NULL;
 			game.state.nplankl++;
 			crmena(1, IHP, 2, ii, jj);
 			prout(" destroyed.");

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-15 09:35:11 UTC (rev 567)
+++ trunk/src/planets.c	2006-09-15 18:41:16 UTC (rev 568)
@@ -33,7 +33,8 @@
     prout("Spock-  \"Planet report follows, Captain.\"");
     skip(1);
     for (i = 0; i < game.inplan; i++) {
-	if (game.state.plnets[i].known != unknown
+	if ((game.state.plnets[i].known != unknown
+	    && game.state.plnets[i].crystals != 0)
 #ifdef DEBUG
 	    || ( game.idebug && game.state.plnets[i].x !=0)
 #endif
@@ -46,7 +47,7 @@
 	    proutn("   class ");
 	    proutn(classes[game.state.plnets[i].pclass]);
 	    proutn("   ");
-	    if (game.state.plnets[i].crystals == 0) proutn("no ");
+	    if (game.state.plnets[i].crystals <= 0) proutn("no ");
 	    prout("dilithium crystals present.");
 	    if (game.state.plnets[i].known==shuttle_down) 
 		prout("    Shuttle Craft Galileo on surface.");
@@ -206,7 +207,11 @@
 	prout("Mining party not on planet.");
 	return;
     }
-    if (game.state.plnets[game.iplnet].crystals == 0) {
+    if (game.state.plnets[game.iplnet].crystals == MINED) {
+	prout("This planet has already been strip-mined for dilithium.");
+	return;
+    }
+    else if (game.state.plnets[game.iplnet].crystals == 0) {
 	prout("No dilithium crystals on this planet.");
 	return;
     }
@@ -224,6 +229,7 @@
     game.optime = (0.1+0.2*Rand())*game.state.plnets[game.iplnet].pclass;
     if (consumeTime()) return;
     prout("Mining operation complete.");
+    game.state.plnets[game.iplnet].crystals = MINED;
     game.imine = 1;
     game.ididit=1;
 }
@@ -504,3 +510,79 @@
     finish(FTRIBBLE);
     return;
 }
+
+char *systemname(planet *planet)
+{
+    static char	*names[NINHAB] =
+    {
+	/*
+	 * This started out life as the BSD Trek inhabited-planets list,
+	 * but I used <http://www.memory-alpha.org> to weed out planets
+	 * with no references in ST:TOS and to fill it out again to the
+	 * required length from "The Worlds of The Federation" list,
+	 * <http://memory-alpha.org/en/wiki/The_Worlds_of_the_Federation>.
+	 * Some misspellings have been silently corrected.  (To be
+	 * fair, there was no Web when Eric Allman did his list.)
+	 *
+	 * Some planets marked Class G and P here will be displayed as class M
+	 * because of the way planets are generated. This is a known bug.
+	 */
+	"ERROR",
+	// Added Federation Worlds
+	"Deneva",		/* TOS: "Operation -- Annihilate!" */
+	"Eminiar VII",		/* TOS: "A Taste of Armageddon" */
+	"Hansen's Planet",	/* TOS: "The Galileo Seven" */
+	"Taurus IV",		/* TOS: "The Galileo Seven" (class G) */
+	"Aldebaran III",	/* TOS: "The Deadly Years" */
+	"Vulcan (T'Khasi)",	/* many episodes */
+	"Tellar Prime (Miracht)",	/* TOS: "Journey to Babel" */
+	"Andoria (Fesoan)",	/* several episodes */
+	"Antos IV (Doraphane)",	/* TOS: "Whom Gods Destroy", "Who Mourns for Adonais?" */
+	"Catulla (Cendo-Prae)",	/* TOS: "The Way to Eden" */
+	"Izar",			/* TOS: "Whom Gods Destroy" */
+	"Tiburon",		/* TOS: "The Way to Eden" */
+	"Merak II",		/* TOS: "The Cloud Minders" */
+	"Argelius II (Nelphia)",	/* TOS: "Wolf in the Fold" ("IV" in BSD) */
+	"Daran V",		/* TOS: "For the World is Hollow and I Have Touched the Sky" */
+	"Medusa",		/* TOS: "Is There in Truth No Beauty?" */
+	"Coridan (Desotriana)",	/* TOS: "Journey to Babel" */
+	"Berengaria IV",	/* TOS: "This Side of Paradise" */
+	"Capella IV (Kohath)",	/* TOS: "Friday's Child" (Class G) */
+	"Gideon",		/* TOS: "The Mark of Gideon" */
+	"Iotia",		/* TOS: "A Piece of the Action" */
+	/* Worlds from BSD Trek */
+	//"Talos IV",		/* TOS: "The Cage" (interdicted world) */
+	"Rigel II",		/* TOS: "Shore Leave" ("III" in BSD) */
+	"Deneb II",		/* TOS: "Wolf in the Fold" ("IV" in BSD) */
+	//"Canopus V",		/* noncanonical */
+	//"Icarus I",		/* noncanonical */
+	//"Prometheus II",	/* noncanonical */
+	//"Omega VII",		/* noncanonical */
+	//"Elysium I",		/* noncanonical */
+	"Scalos IV",		/* TOS: "Wink of an Eye" */
+	//"Procyon IV",		/* noncanonical */
+	//"Arachnid I",		/* noncanonical */
+	//"Argo VIII",		/* noncanonical */
+	//"Triad III",		/* noncanonical */
+	//"Echo IV",		/* noncanonical */
+	//"Nimrod III",		/* noncanonical */
+	//"Nemisis IV",		/* noncanonical */
+	//"Centarurus I",	/* noncanonical */
+	//"Kronos III",		/* noncanonical */
+	//"Spectros V",		/* noncanonical */
+	"Beta III",		/* TOS: "The Return of the Archons" */
+	"Gamma Tranguli VI (Vaalel)",	/* TOS: "The Apple" */
+	"Pyris VII",		/* TOS: "Catspaw" ("III" in BSD) */
+	"Triacus",		/* TOS: "And the Children Shall Lead", */
+	"Marcos XII",		/* TOS: "And the Children Shall Lead", */
+	//"Kaland",		/* noncanonical */
+	"Ardana",		/* TOS: "The Cloud Minders" */
+	//"Stratos",		/* noncanonical */
+	//"Eden",		/* TOS: "The Way to Eden" (in Romulan space) */
+	//"Arrikis",		/* noncanonical */
+	//"Epsilon Eridani IV",	/* noncanonical */
+	"Exo III",		/* TOS: "What Are Little Girls Made Of?" (Class P) */
+    };
+
+    return names[planet->inhabited];
+}

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-15 09:35:11 UTC (rev 567)
+++ trunk/src/reports.c	2006-09-15 18:41:16 UTC (rev 568)
@@ -313,6 +313,16 @@
 	proutn("Klingons Left %d", KLINGREM);
 	break;
     case 10:
+	if (game.options & OPTION_WORLDS) {
+	    planet *here = game.state.galaxy[game.quadx][game.quady].planet;
+	    if (here && here->inhabited != UNINHABITED)
+		proutn("Major system  %s", systemname(here));
+	    else
+		proutn("Sector is uninhabited");
+	}
+
+	break;
+    case 11:
 	attakreport(1);
 	break;
     }
@@ -320,8 +330,9 @@
 		
 int srscan(int l) 
 {
+    /* the "sy" request is undocumented */
     static char requests[][3] =
-	{"","da","co","po","ls","wa","en","to","sh","kl","ti"};
+	{"","da","co","po","ls","wa","en","to","sh","kl","sy", "ti"};
     int leftside=TRUE, rightside=TRUE, i, j, jj, req=0, nn=FALSE;
     int goodScan=TRUE;
     switch (l) {
@@ -358,7 +369,7 @@
 	if (req > sizeof(requests)/sizeof(requests[0])) {
 	    prout("UNRECOGNIZED REQUEST. Legal requests are:");
 	    prout("  date, condition, position, lsupport, warpfactor,");
-	    prout("  energy, torpedoes, shields, klingons, time, bases.");
+	    prout("  energy, torpedoes, shields, klingons, time, system, bases.");
 	    return FALSE;
 	}
 	// no break

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-15 09:35:11 UTC (rev 567)
+++ trunk/src/setup.c	2006-09-15 18:41:16 UTC (rev 568)
@@ -229,7 +229,7 @@
     for_quadrants(i)
 	for_quadrants(j) {
 	    game.state.galaxy[i][j].charted = 0;
-	    game.state.galaxy[i][j].planets = 0;
+	    game.state.galaxy[i][j].planet = NULL;
 	    game.state.galaxy[i][j].romulans = 0;
 	    game.state.galaxy[i][j].klingons = 0;
 	    game.state.galaxy[i][j].starbase = 0;
@@ -328,13 +328,22 @@
     }
     // Locate planets in galaxy
     for (i = 0; i < game.inplan; i++) {
-	do iran(GALSIZE, &ix, &iy); while (game.state.galaxy[ix][iy].planets);
-	game.state.galaxy[ix][iy].planets = 1;
+	do iran(GALSIZE, &ix, &iy); while (game.state.galaxy[ix][iy].planet);
 	game.state.plnets[i].x = ix;
 	game.state.plnets[i].y = iy;
-	game.state.plnets[i].pclass = Rand()*3.0; // Planet class M N or O
-	game.state.plnets[i].crystals = 1.5*Rand();		// 1 in 3 chance of crystals
-	game.state.plnets[i].known = unknown;
+	if (i < NINHAB) {
+	    game.state.plnets[i].pclass = M;	// All inhabited planets are class M
+	    game.state.plnets[i].crystals = 0;
+	    game.state.plnets[i].known = known;
+	    game.state.plnets[i].inhabited = i;
+	} else {
+	    game.state.plnets[i].pclass = Rand()*3.0; // Planet class M N or O
+	    game.state.plnets[i].crystals = 1.5*Rand();		// 1 in 3 chance of crystals
+	    game.state.plnets[i].known = unknown;
+	    game.state.plnets[i].inhabited = UNINHABITED;
+	}
+	if ((game.options & OPTION_WORLDS) || i >= NINHAB)
+	    game.state.galaxy[ix][iy].planet = game.state.plnets + i;
     }
     // Locate Romulans
     for (i = 1; i <= game.state.nromrem; i++) {
@@ -495,7 +504,7 @@
     game.state.rembase = 2.0 + Rand()*(BASEMAX-2.0);
     game.inbase = game.state.rembase;
     if (game.options & OPTION_PLANETS)
-	game.inplan = (PLNETMAX/2) + (PLNETMAX/2+1)*Rand();
+	game.inplan = NINHAB + (MAXUNINHAB/2) + (MAXUNINHAB/2+1)*Rand();
     game.state.nromrem = game.inrom = (2.0+Rand())*game.skill;
     game.state.nscrem = game.inscom = (game.skill > SKILL_FAIR ? 1 : 0);
     game.state.remtime = 7.0 * game.length;
@@ -531,7 +540,8 @@
 
 void newqad(int shutup) 
 {
-    int i, j, ix, iy, nplan;
+    int i, j, ix, iy;
+    planet *planhere;
 
     game.iattak = 1;
     game.justin = 1;
@@ -565,7 +575,6 @@
 	return;
     game.klhere = game.state.galaxy[game.quadx][game.quady].klingons;
     game.irhere = game.state.galaxy[game.quadx][game.quady].romulans;
-    nplan  = game.state.galaxy[game.quadx][game.quady].planets;
     game.nenhere = game.klhere + game.irhere;
 
     // Position Starship
@@ -610,14 +619,11 @@
     if (game.state.galaxy[game.quadx][game.quady].starbase)
 	dropin(IHB, &game.basex, &game.basey);
 	
-    if (nplan) {
-	// If quadrant needs a planet, put it in
-	for (i=0; i < game.inplan; i++)
-	    if (game.state.plnets[i].x == game.quadx && game.state.plnets[i].y == game.quady) break;
-	if (i < game.inplan) {
-	    game.iplnet = i;
-	    dropin(IHP, &game.plnetx, &game.plnety);
-	}
+    // If quadrant needs a planet, put it in
+    planhere = game.state.galaxy[game.quadx][game.quady].planet;
+    if (planhere) {
+	game.iplnet = planhere - game.state.plnets;
+	dropin(IHP, &game.plnetx, &game.plnety);
     }
     // Check for game.condition
     newcnd();
@@ -626,7 +632,7 @@
 	dropin(IHSTAR, &ix, &iy);
 
     // Check for RNZ
-    if (game.irhere > 0 && game.klhere == 0) {
+    if (game.irhere > 0 && game.klhere == 0 && (!planhere || planhere->inhabited == UNINHABITED)) {
 	game.neutz = 1;
 	if (game.damage[DRADIO] <= 0.0) {
 	    skip(1);

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-15 09:35:11 UTC (rev 567)
+++ trunk/src/sst.c	2006-09-15 18:41:16 UTC (rev 568)
@@ -152,6 +152,12 @@
 
    4. Added game option selection so you can play a close (but not bug-for-
       bug identical) approximation of older versions.
+
+   5. Half the quadrants now have inhabited planets, from which one 
+      cannot mine dilithium (there will still be the same additional number
+      of dilithium-bearing planets).  Right now this is just color, but
+      eventually we'll fold in BSD-Trek-like logic for Klingons to attack
+      and enslave inhabited worlds.
 */
 
 /* the input queue */

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-15 09:35:11 UTC (rev 567)
+++ trunk/src/sst.h	2006-09-15 18:41:16 UTC (rev 568)
@@ -18,8 +18,10 @@
 // #define DEBUG
 
 #define PHASEFAC (2.0)
-#define PLNETMAX (10)
 #define GALSIZE	(8)
+#define NINHAB (GALSIZE * GALSIZE / 2)
+#define MAXUNINHAB (10)
+#define PLNETMAX (NINHAB + MAXUNINHAB)
 #define QUADSIZE (10)
 #define BASEMAX	(5)
 
@@ -39,7 +41,10 @@
     int x;	/* Quadrant location of planet */
     int y;
     enum {M=0, N=1, O=2} pclass;
+    int inhabited;	/* if NZ, an index into a name array */
+#define UNINHABITED	-1
     int crystals; /* has crystals */
+#define MINED	-1	/* used to have crystals, but they were mined out */
     enum {unknown, known, shuttle_down} known;
 } planet;
 
@@ -65,7 +70,7 @@
 	    remtime;		// remaining time
     struct {
 	int stars;
-	int planets;
+	planet *planet;
 	int starbase;
 	int klingons;
 	int romulans;
@@ -108,6 +113,7 @@
 #define OPTION_MVBADDY	0x00000100	/* more enemies can move */
 #define OPTION_BLKHOLE	0x00000200	/* black hole may timewarp you */
 #define OPTION_BASE	0x00000400	/* bases have good shields */
+#define OPTION_WORLDS	0x00000800	/* logic for inhabited worlds */
 #define OPTION_PLAIN	0x01000000	/* user chose plain game */
 #define OPTION_ALMY	0x02000000	/* user chose Almy variant */
 
@@ -389,6 +395,7 @@
 void commandhook(char *, int);
 void makechart(void);
 void enqueue(char *);
+char *systemname(planet *);
 
 /* mode arguments for srscan() */
 #define SCAN_FULL		1



From esr at mail.berlios.de  Fri Sep 15 20:51:41 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 15 Sep 2006 20:51:41 +0200
Subject: [Sst-commit-watch] r569 - trunk/doc
Message-ID: <200609151851.k8FIpffh002342@sheep.berlios.de>

Author: esr
Date: 2006-09-15 20:51:40 +0200 (Fri, 15 Sep 2006)
New Revision: 569

Modified:
   trunk/doc/makehelp.py
Log:
% has to be mapped to %% when producing sst.doc, otherwise printf does
unhelpful things.


Modified: trunk/doc/makehelp.py
===================================================================
--- trunk/doc/makehelp.py	2006-09-15 18:41:16 UTC (rev 568)
+++ trunk/doc/makehelp.py	2006-09-15 18:51:40 UTC (rev 569)
@@ -34,7 +34,7 @@
         if line.find(endmarker2) > -1:
             state = 0
     if state:
-        savetext += line
+        savetext += line.replace("%", "%%")
 
 # Remove the section titles
 savetext = re.sub("\n+.*\n*Mnemonic:\\s*", "\n********\n%% ", savetext)



From esr at mail.berlios.de  Fri Sep 15 22:12:00 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 15 Sep 2006 22:12:00 +0200
Subject: [Sst-commit-watch] r570 - trunk/doc
Message-ID: <200609152012.k8FKC0dn008545@sheep.berlios.de>

Author: esr
Date: 2006-09-15 22:12:00 +0200 (Fri, 15 Sep 2006)
New Revision: 570

Modified:
   trunk/doc/makehelp.py
Log:
Fix an extremely obscure bug in the help generation triggered by
non-breaking space in xmlto output.


Modified: trunk/doc/makehelp.py
===================================================================
--- trunk/doc/makehelp.py	2006-09-15 18:51:40 UTC (rev 569)
+++ trunk/doc/makehelp.py	2006-09-15 20:12:00 UTC (rev 570)
@@ -15,17 +15,17 @@
 endmarker2 = "Game History and Modifications"
 
 fp = open("sst-doc.txt", "r")
-savetext = ""
+savetext = []
 state = 0
 while True:
     line = fp.readline()
     if not line:
         break
     if state == 0 and line.startswith(beginmarker1):
-        line = "%% " + line[12:].lstrip()
+        line = "% " + line[12:].lstrip()
         state = 1
     if state == 0 and line.startswith(beginmarker2):
-        savetext += enddelim + "%% ABBREV\n"
+        savetext.append(enddelim + "%% ABBREV\n")
         state = 2
     if state == 1:
         if line.find(endmarker1) > -1:
@@ -34,12 +34,16 @@
         if line.find(endmarker2) > -1:
             state = 0
     if state:
-        savetext += line.replace("%", "%%")
+        line = line.replace("%", "%%")
+        # Hack Unicode non-breaking spaces into ordinary spaces
+        line = line.replace("\xc2\xa0", " ").replace("\240", "")
+        if line.startswith("Mnemonic:"):
+            while not savetext[-1].strip():
+                savetext.pop()
+        savetext.append(line)
+savetext = "".join(savetext)
 
 # Remove the section titles
 savetext = re.sub("\n+.*\n*Mnemonic:\\s*", "\n********\n%% ", savetext)
 
-# Hack Unicode non-breaking spaces into ordinary spaces
-savetext = savetext.replace("\xc2\xa0", " ").replace("\240", "")
-
 sys.stdout.write(savetext + enddelim)



From esr at mail.berlios.de  Fri Sep 15 22:58:05 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 15 Sep 2006 22:58:05 +0200
Subject: [Sst-commit-watch] r571 - in trunk: doc src
Message-ID: <200609152058.k8FKw5vu011957@sheep.berlios.de>

Author: esr
Date: 2006-09-15 22:58:05 +0200 (Fri, 15 Sep 2006)
New Revision: 571

Modified:
   trunk/doc/makehelp.py
   trunk/doc/sst-doc.xml
   trunk/src/moving.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
Fixes the bug that was directing help lookups incorrectly.
Renames the old "help()" function to "mayday()" to match the new command.
Fixes display bugs in curses due to generation of wacky quotes, nonbreak
spaces, and dashes.  Does not fix problems with forms-drawing characters.


Modified: trunk/doc/makehelp.py
===================================================================
--- trunk/doc/makehelp.py	2006-09-15 20:12:00 UTC (rev 570)
+++ trunk/doc/makehelp.py	2006-09-15 20:58:05 UTC (rev 571)
@@ -37,6 +37,10 @@
         line = line.replace("%", "%%")
         # Hack Unicode non-breaking spaces into ordinary spaces
         line = line.replace("\xc2\xa0", " ").replace("\240", "")
+        # Hack right and left quotes into regular ASCII quotes
+        line = line.replace("\xe2\x80\x9c", '"').replace("\xe2\x80\x9d", '"')
+        # Hack dashes and bullets (Hmmm...might want to handle this in curses)
+        line = line.replace("\xe2\x80\x94", "-").replace("\xe2\x97\x8f", "*");
         if line.startswith("Mnemonic:"):
             while not savetext[-1].strip():
                 savetext.pop()

Modified: trunk/doc/sst-doc.xml
===================================================================
--- trunk/doc/sst-doc.xml	2006-09-15 20:12:00 UTC (rev 570)
+++ trunk/doc/sst-doc.xml	2006-09-15 20:58:05 UTC (rev 571)
@@ -407,6 +407,7 @@
 
 <para>If your short-range sensors are damaged, this command will only show
 the contents of adjacent sectors.</para>
+
 </sect1>
 <sect1><title>Status Report</title>
 
@@ -596,6 +597,7 @@
 
 <para>Long-range scans are free.  They use up no energy or time, and can be
 done safely regardless of battle conditions.</para>
+
 </sect1>
 <sect1><title>Star Chart</title>
 

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-15 20:12:00 UTC (rev 570)
+++ trunk/src/moving.c	2006-09-15 20:58:05 UTC (rev 571)
@@ -898,7 +898,7 @@
     return;
 }
 
-void help(void) 
+void mayday(void) 
 {
     /* There's more than one way to move in this game! */
     double ddist, xdist, probf;

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-15 20:12:00 UTC (rev 570)
+++ trunk/src/sst.c	2006-09-15 20:58:05 UTC (rev 571)
@@ -208,66 +208,66 @@
 #define TORPEDO	5
         {"TORPEDO",	TORPEDO,	0},
 	{"PHOTONS",	TORPEDO,	0},
-#define MOVE	6
+#define MOVE	7
 	{"MOVE",	MOVE,		0},
-#define SHIELDS	7
+#define SHIELDS	8
 	{"SHIELDS",	SHIELDS,	0},
-#define DOCK	8
+#define DOCK	9
 	{"DOCK",	DOCK,		0},
-#define DAMAGES	9
+#define DAMAGES	10
 	{"DAMAGES",	DAMAGES,	0},
-#define CHART	10
+#define CHART	11
 	{"CHART",	CHART,		0},
-#define IMPULSE	11
+#define IMPULSE	12
 	{"IMPULSE",	IMPULSE,	0},
-#define REST	12
+#define REST	13
 	{"REST",	REST,		0},
-#define WARP	13
+#define WARP	14
 	{"WARP",	WARP,		0},
-#define SCORE	14
+#define SCORE	15
 	{"SCORE",	SCORE,		0},
-#define SENSORS	15
+#define SENSORS	16
 	{"SENSORS",	SENSORS,	OPTION_PLANETS},
-#define ORBIT	16
+#define ORBIT	17
 	{"ORBIT",	ORBIT,		OPTION_PLANETS},
-#define TRANSPORT	17
+#define TRANSPORT	18
 	{"TRANSPORT",	TRANSPORT,	OPTION_PLANETS},
-#define MINE	18
+#define MINE	19
 	{"MINE",	MINE,		OPTION_PLANETS},
-#define CRYSTALS	19
+#define CRYSTALS	20
 	{"CRYSTALS",	CRYSTALS,	OPTION_PLANETS},
-#define SHUTTLE	20
+#define SHUTTLE	21
 	{"SHUTTLE",	SHUTTLE,	OPTION_PLANETS},
-#define PLANETS	21
+#define PLANETS	22
 	{"PLANETS",	PLANETS,	OPTION_PLANETS},
-#define REPORT	22
+#define REPORT	23
 	{"REPORT",	REPORT,		0},
-#define COMPUTER	23
+#define COMPUTER	24
 	{"COMPUTER",	COMPUTER,      	0},
-#define COMMANDS	24
+#define COMMANDS	25
 	{"COMMANDS",	COMMANDS,      	0},
-#define EMEXIT	25
+#define EMEXIT	26
 	{"EMEXIT",	EMEXIT,		0},
-#define PROBE	26
+#define PROBE	27
 	{"PROBE",	PROBE,		OPTION_PROBE},
-#define SAVE	27
+#define SAVE	28
 	{"SAVE",	SAVE,		0},
 	{"FREEZE",	SAVE,		0},
-#define ABANDON	28
+#define ABANDON	30
 	{"ABANDON",	ABANDON,	0},
-#define DESTRUCT	29
+#define DESTRUCT	31
 	{"DESTRUCT",	DESTRUCT,	0},
-#define DEATHRAY	30
+#define DEATHRAY	32
 	{"DEATHRAY",	DEATHRAY,	0},
-#define DEBUGCMD	31
+#define DEBUGCMD	33
 	{"DEBUG",	DEBUGCMD,	0},
-#define MAYDAY	32
+#define MAYDAY	34
 	{"MAYDAY",	MAYDAY,		0},
 	//{"SOS",		MAYDAY,		0},
 	//{"CALL",	MAYDAY,		0},
-#define QUIT	33
+#define QUIT	35
 	{"QUIT",	QUIT,		0},
-#define HELP	34
+#define HELP	36
 	{"HELP",	HELP,		0},
 };
 
@@ -532,7 +532,7 @@
 #endif
 	    break;
 	case MAYDAY:			// Call for help
-	    help();
+	    mayday();
 	    if (game.ididit) hitme = TRUE;
 	    break;
 	case QUIT:

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-15 20:12:00 UTC (rev 570)
+++ trunk/src/sst.h	2006-09-15 20:58:05 UTC (rev 571)
@@ -326,7 +326,7 @@
 void events(void);
 void report(void);
 void eta(void);
-void help(void);
+void mayday(void);
 void abandn(void);
 void finish(FINTYPE);
 void dstrct(void);



From esr at mail.berlios.de  Fri Sep 15 23:14:45 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 15 Sep 2006 23:14:45 +0200
Subject: [Sst-commit-watch] r572 - trunk
Message-ID: <200609152114.k8FLEjmN013085@sheep.berlios.de>

Author: esr
Date: 2006-09-15 23:14:45 +0200 (Fri, 15 Sep 2006)
New Revision: 572

Modified:
   trunk/TODO
Log:
Fixed these bug items from the TO-DO list:

* Bring the online help in sync with our commands changes

* Find out why the online help contains the escape sequences like ~@~T (Eric?)

The first was due to bugs in some macro definitions in sst.c, now fixed.
The second was from escape sequences generated into sst.doc by xmlto
for left-and right-quotes, dashes, and no-break spaces; that is fixed
by an additional translation step in makehelp.py.

xmlto still generates line-drawing characters for the tables in the 
LRSCAN and REPORT help items, but those look OK on an xterm in text
mode and their help items are suppressed (along with their commands) in
curses mode.

This is not a completely satisfactory solution, but it will do until a
design change makes those help items visible again.


Modified: trunk/TODO
===================================================================
--- trunk/TODO	2006-09-15 20:58:05 UTC (rev 571)
+++ trunk/TODO	2006-09-15 21:14:45 UTC (rev 572)
@@ -3,10 +3,6 @@
 
 Short-term items:
 
-* Bring the online help in sync with our commands changes
-
-* Find out why the online help contains the escape sequences like ~@~T (Eric?)
-
 * Adjust the sst.spec wrt the build system changes
 
 * Maybe make a release



From esr at mail.berlios.de  Sat Sep 16 00:47:18 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sat, 16 Sep 2006 00:47:18 +0200
Subject: [Sst-commit-watch] r573 - in trunk: . doc src
Message-ID: <200609152247.k8FMlIUh023106@sheep.berlios.de>

Author: esr
Date: 2006-09-16 00:47:09 +0200 (Sat, 16 Sep 2006)
New Revision: 573

Modified:
   trunk/ChangeLog
   trunk/doc/sst-doc.xml
   trunk/src/setup.c
   trunk/src/sst.h
Log:
Make inhabited worlds display as '@'.  Document this.
Turn off generation of inhabited worlds in plain and almy versions.


Modified: trunk/ChangeLog
===================================================================
--- trunk/ChangeLog	2006-09-15 21:14:45 UTC (rev 572)
+++ trunk/ChangeLog	2006-09-15 22:47:09 UTC (rev 573)
@@ -1,3 +1,26 @@
+2006-09-15  Eric S. Raymond  <esr at snark.thyrsus.com>
+
+	* TODO: Fixed these bug items from the TO-DO list:
+	
+	* Bring the online help in sync with our commands changes
+	
+	* Find out why the online help contains the escape sequences like
+	~@~T (Eric?)
+	
+	The first was due to bugs in some macro definitions in sst.c, now
+	fixed.  The second was from escape sequences generated into
+	sst.doc by xmlto for left-and right-quotes, dashes, and no-break
+	spaces; that is fixed by an additional translation step in
+	makehelp.py.
+	
+	xmlto still generates line-drawing characters for the tables in
+	the LRSCAN and REPORT help items, but those look OK on an xterm in
+	text mode and their help items are suppressed (along with their
+	commands) in curses mode.
+	
+	This is not a completely satisfactory solution, but it will do
+	until a design change makes those help items visible again.
+
 2006-09-12  gettextize  <bug-gnu-gettext at gnu.org>
 
 	* Makefile.am (SUBDIRS): Add po.

Modified: trunk/doc/sst-doc.xml
===================================================================
--- trunk/doc/sst-doc.xml	2006-09-15 21:14:45 UTC (rev 572)
+++ trunk/doc/sst-doc.xml	2006-09-15 22:47:09 UTC (rev 573)
@@ -253,13 +253,14 @@
 
 <para>The fourth question, new in SST2K, sets your game options.  A
 blank answer or 'fancy' enables all SST2K features.  The option
-'plain' disables a number of features (Tholians, planets &amp;
-dilithium, Thingies shooting back, deep-space-probes, Klingon ramming
-and movement, time-warping through black holes, death-ray upgrade),
-approximating the original CDC 6600 FORTRAN game from UT Austin.  The
-option 'almy' approximates Tom Almy's C translation from 1979,
-disabling Thingies shooting back, base shields, and time-warping
-through black holes.</para>
+'plain' approximated the original CDC 6600 FORTRAN game from UT Austin
+and disables a number of features: Tholians, planets &amp; dilithium,
+Thingies shooting back, deep-space-probes, Klingon ramming and
+movement, time-warping through black holes, death-ray
+upgrade. inhabited worlds.  The option 'almy' approximates Tom Almy's
+C translation from 1979, disabling Thingies shooting back, base
+shields, time-warping through black holes, and inhabited
+worlds.</para>
 
 </chapter>
 <chapter><title>How To Issue Commands</title>
@@ -387,7 +388,8 @@
 There are ordinary Klingons (K) at sectors 5 - 8 and 6 - 2, and a
 Klingon Commander (C) at 9 - 9.  The (GULP)
 <quote>Super-commander</quote> (S) is occupies sector 4 - 4, and a
-Romulan (R) is at 1 - 6.  A planet (P) is at sector 7 - 6.  There are
+Romulan (R) is at 1 - 6.  An uninhabited planet (P) is at sector 7 - 6
+(if it were inhabited, it would display as a '@').  There are
 also a large number of stars (*). The periods (.) are just empty
 space&mdash;they are printed to help you get your bearings.  Sector 6
 - 4 contains a black hole ( ).</para>

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-15 21:14:45 UTC (rev 572)
+++ trunk/src/setup.c	2006-09-15 22:47:09 UTC (rev 573)
@@ -479,12 +479,12 @@
     }
     if (isit("plain")) {
 	// Approximates the UT FORTRAN version.
-	game.options &=~ (OPTION_THOLIAN | OPTION_PLANETS | OPTION_THINGY | OPTION_PROBE | OPTION_RAMMING | OPTION_MVBADDY | OPTION_BLKHOLE | OPTION_BASE);
+	game.options &=~ (OPTION_THOLIAN | OPTION_PLANETS | OPTION_THINGY | OPTION_PROBE | OPTION_RAMMING | OPTION_MVBADDY | OPTION_BLKHOLE | OPTION_BASE | OPTION_WORLDS);
 	game.options |= OPTION_PLAIN;
     } 
     else if (isit("almy")) {
 	// Approximates Tom Almy's version.
-	game.options &=~ (OPTION_THINGY | OPTION_BLKHOLE | OPTION_BASE);
+	game.options &=~ (OPTION_THINGY | OPTION_BLKHOLE | OPTION_BASE | OPTION_WORLDS);
 	game.options |= OPTION_ALMY;
     }
     else if (isit("fancy"))
@@ -623,7 +623,10 @@
     planhere = game.state.galaxy[game.quadx][game.quady].planet;
     if (planhere) {
 	game.iplnet = planhere - game.state.plnets;
-	dropin(IHP, &game.plnetx, &game.plnety);
+	if (planhere->inhabited == UNINHABITED)
+	    dropin(IHP, &game.plnetx, &game.plnety);
+	else
+	    dropin(IHW, &game.plnetx, &game.plnety);
     }
     // Check for game.condition
     newcnd();

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-15 21:14:45 UTC (rev 572)
+++ trunk/src/sst.h	2006-09-15 22:47:09 UTC (rev 573)
@@ -285,6 +285,7 @@
 #define IHS 'S'
 #define IHSTAR '*'
 #define IHP 'P'
+#define IHW '@'
 #define IHB 'B'
 #define IHBLANK ' '
 #define IHDOT '.'



From stsp at mail.berlios.de  Sat Sep 16 20:50:30 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Sat, 16 Sep 2006 20:50:30 +0200
Subject: [Sst-commit-watch] r575 - branches
Message-ID: <200609161850.k8GIoUMk017715@sheep.berlios.de>

Author: stsp
Date: 2006-09-16 20:50:30 +0200 (Sat, 16 Sep 2006)
New Revision: 575

Removed:
   branches/at-work/
Log:
remove at-work



From esr at mail.berlios.de  Sun Sep 17 02:48:27 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sun, 17 Sep 2006 02:48:27 +0200
Subject: [Sst-commit-watch] r576 - trunk/doc
Message-ID: <200609170048.k8H0mRP9021542@sheep.berlios.de>

Author: esr
Date: 2006-09-17 02:48:26 +0200 (Sun, 17 Sep 2006)
New Revision: 576

Modified:
   trunk/doc/sst-doc.xml
Log:
Added more history.


Modified: trunk/doc/sst-doc.xml
===================================================================
--- trunk/doc/sst-doc.xml	2006-09-16 18:50:30 UTC (rev 575)
+++ trunk/doc/sst-doc.xml	2006-09-17 00:48:26 UTC (rev 576)
@@ -718,8 +718,9 @@
 <para>and it will be done.  In automatic mode, either two or four numbers
 must be supplied.</para>
 
-<para>Automatic mode utilizes the ship's <quote>battle computer.</quote>  If the
-computer is damaged, manual movement must be used.</para>
+<para>Automatic mode utilizes the ship's <quote>battle
+computer.</quote> If the computer is damaged, manual movement must be
+used.</para>
 
 <para>If warp engines are damaged less than 10 stardates (undocked) you can
 still go warp 4.</para>
@@ -1646,28 +1647,35 @@
 <para>Dave Matuszek, Paul Reynolds et. al. at UT Austin played the
 Hicks version on a CDC6600, but disliked the long load time and
 extreme slowness of the BASIC program. (David Matuszek notes that the
-Hicks version he played had a habit of throwing long
-quotes from Marcus Aurelius at the users, a feature he found
-intolerable on a TTY at 110 baud.  It must, therefore, have been
-rather longer than  the one we have.)  The Austin crew proceeded to
-write their own Trek game, loosely based on the Hicks version, in
-CDC6600 FORTRAN.  At that time, it was just called "Star Trek"; the
-"Super" was added by later developers. In the rest of this history
-we'll call it the "UT FORTRAN" version.</para>
+Hicks version he played had a habit of throwing long quotes from
+Marcus Aurelius at the users, a feature he found intolerable on a TTY
+at 110 baud.  It must, therefore, have been rather longer than the one
+we have.)</para>
 
+<para>The Austin crew proceeded to write their own Trek game, loosely
+based on the Hicks version, in CDC6600 FORTRAN.  Most of the code was
+written in 1973-1974. At that time, the game was just called "Star
+Trek"; the "Super" was added by later developers. In the rest of this
+history we'll call it the "UT FORTRAN" version.</para>
+
+<para>Dave Matuszek reports that the UT FORTRAN codebase he worked on
+in 1973-1974 was like Mayfield's original and most later versions in
+BASIC, in that it used used polar coordinates (a clockface angle
+and a distance) for manual navigation.</para>
+
 <para>At the time the UT FORTRAN source was last translated to C it emitted
 the message "Latest update-21 Sept 78".  Thus, it actually predated
 (and may have influenced) the best-known BASIC version, the "Super
 Star Trek" published by David Ahl in his November 1978 sequel
 <citetitle>BASIC Computer Games</citetitle>.</para>
 
-<para>This 1978 "Super Star Trek" had been reworked by Robert Leedom and
-friends from (according to Leedom) Mayfield's HP port. There is
+<para>This 1978 "Super Star Trek" had been reworked by Robert Leedom
+and friends from (according to Leedom) Mayfield's HP port. There is
 internal evidence to suggest that at least some features of Leedom's
 SST may have derived from the UT FORTRAN version.  In particular, Dave
 Matuszek recalls implementing command words to replace the original
-numeric command codes, a feature Leedom's SST also had but the
-1973 and 1975 SPACWRs did not.</para>
+numeric command codes during 1973-1974, a feature Leedom's SST also
+had but the 1973 and 1975 SPACWRs did not.</para>
 
 <para>One signature trait of the UT FORTRAN game and its descendants
 is that the sectors are 10x10 (rather than the 8x8 in Mike Mayfield's
@@ -1676,9 +1684,6 @@
 astronomically-named quadrants introduced in Ahl's SST and its
 descendants.</para>
 
-<!-- Dave thinks his Fortran Star Trek used the clockface for quadrant -->
-<!-- navigation. -->
-
 <para>Eric Allman's BSD Trek game is one of these, also descended from
 the UT FORTRAN version via translation to C.  However, the mainline version
 (now SST2K) has had a lot more stuff folded into it over the years
@@ -1853,7 +1858,7 @@
 command descriptions, and changed some logic in sst.c to match.
 </para></listitem>
 <listitem><para>
-I've cleaned up a lot of grubby FORTRANisms in the code internals --
+I've cleaned up a lot of grubby FORTRANisms in the code internals &mdash;
 used sizeof(), replaced magic numeric constants with #defines,
 that sort of thing.
 </para></listitem>



From esr at mail.berlios.de  Sun Sep 17 02:52:18 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sun, 17 Sep 2006 02:52:18 +0200
Subject: [Sst-commit-watch] r577 - trunk/src
Message-ID: <200609170052.k8H0qIvC022112@sheep.berlios.de>

Author: esr
Date: 2006-09-17 02:52:17 +0200 (Sun, 17 Sep 2006)
New Revision: 577

Modified:
   trunk/src/reports.c
Log:
Fix a minor bug in -t mode display of the starchart.


Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-17 00:48:26 UTC (rev 576)
+++ trunk/src/reports.c	2006-09-17 00:52:17 UTC (rev 577)
@@ -227,6 +227,7 @@
 	proutn("  |");
 	if (i<GALSIZE) skip(1);
     }
+    prout("");
 }
 
 static void sectscan(int goodScan, int i, int j) 



From esr at mail.berlios.de  Sun Sep 17 07:14:53 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sun, 17 Sep 2006 07:14:53 +0200
Subject: [Sst-commit-watch] r578 - in trunk: . src
Message-ID: <200609170514.k8H5ErJ2013205@sheep.berlios.de>

Author: esr
Date: 2006-09-17 07:14:52 +0200 (Sun, 17 Sep 2006)
New Revision: 578

Modified:
   trunk/TODO
   trunk/src/events.c
   trunk/src/setup.c
   trunk/src/sst.h
Log:
First checkin of experimental event code for the BSDTrek-style Klingon
attack on inhabited systems.  Currently #ifdefed out; the only operative
change is the newkling() function and a bit of data-structure cleanup.


Modified: trunk/TODO
===================================================================
--- trunk/TODO	2006-09-17 00:52:17 UTC (rev 577)
+++ trunk/TODO	2006-09-17 05:14:52 UTC (rev 578)
@@ -15,3 +15,7 @@
 * Russian translation
 
 * Wrap a GUI around it.
+
+* Wandering planet-killer as in "The Doomsday Machine";
+  see <http://www.ericweisstein.com/fun/startrek/TheDoomsdayMachine.html>.
+ 

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-17 00:52:17 UTC (rev 577)
+++ trunk/src/events.c	2006-09-17 05:14:52 UTC (rev 578)
@@ -347,6 +347,122 @@
 		    return;
 	    }
 	    break;
+#ifdef EXPERIMENTAL
+	case FDISTR: /* inhabited system issues distress call */
+	    /* in BSD Trek this is a straight 1 stardate ahead */ 
+	    game.future[FDISTR] =  game.state.date + 1.0 + Rand();
+	    /* if we already have too many, throw this one away */
+	    if (game.ndistr >= MAXDISTR)
+		break;
+	    /* try a whole bunch of times to find something suitable */
+	    for (i = 0; i < 100; i++) {
+		struct quadrant *q;
+		iran(GALSIZE, &ix, &iy);
+		q = &game.state.galaxy[game.quadx][game.quady];
+		/* need a quadrant which is not the current one,
+		   which has some stars which are inhabited and
+		   not already under attack, which is not
+		   supernova'ed, and which has some Klingons in it */
+		if (!((ix == game.quadx && iy == game.quady) || q->stars<=0 ||
+		      (q->qsystemname & Q_DISTRESSED) ||
+		      (q->qsystemname & Q_SYSTEM) == 0 || q->klings <= 0))
+		    break;
+	    }
+	    if (i >= 100)
+		/* can't seem to find one; ignore this call */
+		break;
+
+	    /* got one!!  Schedule its enslavement */
+	    game.ndistr++;
+	    e = xsched(E_ENSLV, 1, ix, iy, q->qsystemname);
+	    q->qsystemname = (e - Event) | Q_DISTRESSED;
+
+	    /* tell the captain about it if we can */
+	    if (game.damage[DRADIO] == 0.0)
+	    {
+		printf("\nUhura: Captain, starsystem %s in quadrant %d,%d is under attack\n",
+		       Systemname[e->systemname], ix, iy);
+		restcancel++;
+	    }
+	    else
+		/* if we can't tell him, make it invisible */
+		e->evcode |= E_HIDDEN;
+	    break;
+      case FENSLV:		/* starsystem is enslaved */
+	    unschedule(e);
+	    /* see if current distress call still active */
+	    q = &Quad[e->x][e->y];
+	    if (q->klings <= 0)
+	    {
+		/* no Klingons, clean up */
+		/* restore the system name */
+		q->qsystemname = e->systemname;
+		break;
+	    }
+
+	    /* play stork and schedule the first baby */
+	    e = schedule(E_REPRO, Param.eventdly[E_REPRO] * franf(), e->x, e->y, e->systemname);
+
+	    /* report the disaster if we can */
+	    if (game.damage[DRADIO] == 0.0)
+	    {
+		printf("\nUhura:  We've lost contact with starsystem %s\n",
+		       Systemname[e->systemname]);
+		printf("  in quadrant %d,%d.\n", e->x, e->y);
+	    }
+	    else
+		e->evcode |= E_HIDDEN;
+	    break;
+      case FREPRO:		/* Klingon reproduces */
+	    /* see if distress call is still active */
+	    q = &Quad[e->x][e->y];
+	    if (q->klings <= 0)
+	    {
+		unschedule(e);
+		q->qsystemname = e->systemname;
+		break;
+	    }
+	    xresched(e, E_REPRO, 1);
+	    /* reproduce one Klingon */
+	    ix = e->x;
+	    iy = e->y;
+	    if (Now.klings == 127)
+		break;		/* full right now */
+	    if (q->klings >= MAXKLQUAD)
+	    {
+		/* this quadrant not ok, pick an adjacent one */
+		for (i = ix - 1; i <= ix + 1; i++)
+		{
+		    if (!VALID_QUADRANT(i))
+			continue;
+		    for (j = iy - 1; j <= iy + 1; j++)
+		    {
+			if (!VALID_QUADRANT(j))
+			    continue;
+			q = &Quad[i][j];
+			/* check for this quad ok (not full & no snova) */
+			if (q->klings >= MAXKLQUAD || q->stars < 0)
+			    continue;
+			break;
+		    }
+		    if (j <= iy + 1)
+			break;
+		}
+		if (j > iy + 1)
+		    /* cannot create another yet */
+		    break;
+		ix = i;
+		iy = j;
+	    }
+	    /* deliver the child */
+	    game.remkl++;
+	    if (ix == game.quadx && iy == game.quady)
+		newkling(++game.klhere, &ixhold, &iyhold);
+
+	    /* recompute time left */
+	    game.state.remtime = game.state.remres/(game.state.remkl+4*game.state.remcom);
+	    break;
+#endif /* EXPERIMENTAL */
 	}
     }
 }

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-17 00:52:17 UTC (rev 577)
+++ trunk/src/setup.c	2006-09-17 05:14:52 UTC (rev 578)
@@ -228,12 +228,16 @@
     game.docfac = 0.25;
     for_quadrants(i)
 	for_quadrants(j) {
-	    game.state.galaxy[i][j].charted = 0;
-	    game.state.galaxy[i][j].planet = NULL;
-	    game.state.galaxy[i][j].romulans = 0;
-	    game.state.galaxy[i][j].klingons = 0;
-	    game.state.galaxy[i][j].starbase = 0;
-	    game.state.galaxy[i][j].supernova = 0;
+	struct quadrant *quad = &game.state.galaxy[i][j];
+	    quad->charted = 0;
+	    quad->planet = NULL;
+	    quad->romulans = 0;
+	    quad->klingons = 0;
+	    quad->starbase = 0;
+	    quad->supernova = 0;
+#ifdef EXPERIMENTAL
+	    quad->status = secure;
+#endif /* EXPERIMENTAL */
 	}
     // Initialize times for extraneous events
     game.future[FSNOVA] = game.state.date + expran(0.5 * game.intime);
@@ -244,6 +248,13 @@
     game.future[FSCMOVE] = game.state.nscrem ? game.state.date+0.2777 : FOREVER;
     game.future[FSCDBAS] = FOREVER;
     game.future[FDSPROB] = FOREVER;
+#ifdef EXPERIMENTAL
+    if (game.options & OPTION_WORLDS)
+	/* in BSD-Trek, this is a fixed one stardate in the future */
+	game.future[FDISTR] = game.state.date + 1.0 + Rand();
+    game.future[FENSLV] = FOREVER;
+    game.future[FREPRO] = FOREVER;
+#endif /* EXPERIMENTAL */
     // Starchart is functional but we've never seen it
     game.lastchart = FOREVER;
     // Put stars in the galaxy
@@ -537,11 +548,20 @@
     if (!game.alive) game.condit=IHDEAD;
 }
 
+void newkling(int i, int *pix, int *piy)
+/* drop new Klingon into current quadrant */
+{
+    dropin(IHK, pix, piy);
+    game.kx[i] = *pix;
+    game.ky[i] = *piy;
+    game.kdist[i] = game.kavgd[i] = sqrt(square(game.sectx-*pix) + square(game.secty-*piy));
+    game.kpower[i] = Rand()*150.0 +300.0 +25.0*game.skill;
+}
 
 void newqad(int shutup) 
 {
     int i, j, ix, iy;
-    planet *planhere;
+    struct quadrant *here;
 
     game.iattak = 1;
     game.justin = 1;
@@ -570,25 +590,21 @@
     for_sectors(i)
 	for_sectors(j) 
 	    game.quad[i][j] = IHDOT;
+    here = &game.state.galaxy[game.quadx][game.quady];
     // cope with supernova
-    if (game.state.galaxy[game.quadx][game.quady].supernova)
+    if (here->supernova)
 	return;
-    game.klhere = game.state.galaxy[game.quadx][game.quady].klingons;
-    game.irhere = game.state.galaxy[game.quadx][game.quady].romulans;
+    game.klhere = here->klingons;
+    game.irhere = here->romulans;
     game.nenhere = game.klhere + game.irhere;
 
     // Position Starship
     game.quad[game.sectx][game.secty] = game.ship;
 
-    if (game.state.galaxy[game.quadx][game.quady].klingons) {
+    if (here->klingons) {
 	// Position ordinary Klingons
-	for (i = 1; i <= game.klhere; i++) {
-	    dropin(IHK, &ix, &iy);
-	    game.kx[i] = ix;
-	    game.ky[i] = iy;
-	    game.kdist[i] = game.kavgd[i] = sqrt(square(game.sectx-ix) + square(game.secty-iy));
-	    game.kpower[i] = Rand()*150.0 +300.0 +25.0*game.skill;
-	}
+	for (i = 1; i <= game.klhere; i++)
+	    newkling(i, &ix, &iy);
 	// If we need a commander, promote a Klingon
 	for_commanders(i)
 	    if (game.state.cx[i]==game.quadx && game.state.cy[i]==game.quady) break;
@@ -616,14 +632,13 @@
 	game.kpower[i] = Rand()*400.0 + 450.0 + 50.0*game.skill;
     }
     // If quadrant needs a starbase, put it in
-    if (game.state.galaxy[game.quadx][game.quady].starbase)
+    if (here->starbase)
 	dropin(IHB, &game.basex, &game.basey);
 	
     // If quadrant needs a planet, put it in
-    planhere = game.state.galaxy[game.quadx][game.quady].planet;
-    if (planhere) {
-	game.iplnet = planhere - game.state.plnets;
-	if (planhere->inhabited == UNINHABITED)
+    if (here->planet) {
+	game.iplnet = here->planet - game.state.plnets;
+	if (here->planet->inhabited == UNINHABITED)
 	    dropin(IHP, &game.plnetx, &game.plnety);
 	else
 	    dropin(IHW, &game.plnetx, &game.plnety);
@@ -631,11 +646,11 @@
     // Check for game.condition
     newcnd();
     // And finally the stars
-    for (i = 1; i <= game.state.galaxy[game.quadx][game.quady].stars; i++) 
+    for (i = 1; i <= here->stars; i++) 
 	dropin(IHSTAR, &ix, &iy);
 
     // Check for RNZ
-    if (game.irhere > 0 && game.klhere == 0 && (!planhere || planhere->inhabited == UNINHABITED)) {
+    if (game.irhere > 0 && game.klhere == 0 && (!here->planet || here->planet->inhabited == UNINHABITED)) {
 	game.neutz = 1;
 	if (game.damage[DRADIO] <= 0.0) {
 	    skip(1);

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-17 00:52:17 UTC (rev 577)
+++ trunk/src/sst.h	2006-09-17 05:14:52 UTC (rev 578)
@@ -72,7 +72,7 @@
 	double date,		// stardate
 	    remres,		// remaining resources
 	    remtime;		// remaining time
-    struct {
+    struct quadrant {
 	int stars;
 	planet *planet;
 	int starbase;
@@ -80,6 +80,9 @@
 	int romulans;
 	int supernova;
 	int charted;
+#ifdef EXPERIMENTAL
+	enum {secure, distressed, enslaved} status;
+#endif /* EXPERIMENTAL */
     } galaxy[GALSIZE+1][GALSIZE+1]; 	// The Galaxy (subscript 0 not used)
     struct {
 	int stars;
@@ -152,8 +155,19 @@
 #define FSCMOVE 6   // Supercommander moves (might attack base)
 #define FSCDBAS 7   // Supercommander destroys base
 #define FDSPROB 8   // Move deep space probe
+#ifndef EXPERIMENTAL
 #define NEVENTS (9)
+#else /* EXPERIMENTAL */
+#define FDISTR	9   // Emit distress call from an inhabited world 
+#define FENSLV	10  // Inhabited word is enslaved */
+#define FREPRO	11  // Klingons build a ship in an enslaved system
+#define NEVENTS (12)
+#endif /* EXPERIMENTAL */
 
+#ifdef EXPERIMENTAL
+#define	MAXDISTR	5	/* maximum concurrent distress calls */
+#endif /* EXPERIMENTAL */
+
 #define SSTMAGIC	"SST2.0\n"
 
 struct game {
@@ -228,6 +242,9 @@
 	ithx,		// coordinates of Tholian
 	ithy,		//
 	iseenit,	// seen base attack report
+#ifdef EXPERIMENTAL
+	ndistr,		//* count of distress calls */ 
+#endif /* EXPERIMENTAL */
 	probecx,	// current probe quadrant
 	probecy,	//
 	proben,		// number of moves for probe
@@ -401,6 +418,7 @@
 void makechart(void);
 void enqueue(char *);
 char *systemname(planet *);
+void newkling(int, int *, int *);
 
 /* mode arguments for srscan() */
 #define SCAN_FULL		1



From esr at mail.berlios.de  Sun Sep 17 07:31:52 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sun, 17 Sep 2006 07:31:52 +0200
Subject: [Sst-commit-watch] r579 - in trunk: . doc
Message-ID: <200609170531.k8H5Vq85014605@sheep.berlios.de>

Author: esr
Date: 2006-09-17 07:31:52 +0200 (Sun, 17 Sep 2006)
New Revision: 579

Modified:
   trunk/COPYING
   trunk/doc/sst-doc.xml
Log:
Complete the change to BSD license.


Modified: trunk/COPYING
===================================================================
--- trunk/COPYING	2006-09-17 05:14:52 UTC (rev 578)
+++ trunk/COPYING	2006-09-17 05:31:52 UTC (rev 579)
@@ -28,3 +28,13 @@
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+--------------------------------------------------------------------------
+
+Note: Nothing in this license grants or purports to grant any rights
+with respect to the trademarks, copyrights or other property of the
+originators of Star Trek or their successors in interest.  We
+recognize and support their right under the Berne Convention to
+recover damages for any uses of this program which compromise their
+legitimate interest in protecting their copyrights and trademarks or
+unjustly enrich others.

Modified: trunk/doc/sst-doc.xml
===================================================================
--- trunk/doc/sst-doc.xml	2006-09-17 05:14:52 UTC (rev 578)
+++ trunk/doc/sst-doc.xml	2006-09-17 05:31:52 UTC (rev 579)
@@ -34,14 +34,14 @@
 </authorgroup>
 
 <legalnotice>
-<para>Permission is hereby granted for the copying, distribution,
-modification and use of this program and associated documentation
-for recreational purposes, provided that all references to the
-authors are retained.  However, permission is not and will not be
-granted for the sale or promotional use of this program or program
-documentation, or for use in any situation in which profit may be
-considered an objective, since it is the desire of the authors to
-respect the copyrights of the originators of Star Trek.</para>
+<para>Super Star Trek 2K is issued under the BSD license.  Nothing in
+this license grants or purports to grant any rights with respect to
+the trademarks, copyrights or other property of the originators of
+Star Trek or their successors in interest.  We recognize and support
+their right under the Berne Convention to recover damages for any uses
+of this program which compromise their legitimate interest in
+protecting their copyrights and trademarks or unjustly enrich
+others.</para>
 </legalnotice>
 </bookinfo>
 



From stsp at mail.berlios.de  Sun Sep 17 11:01:35 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Sun, 17 Sep 2006 11:01:35 +0200
Subject: [Sst-commit-watch] r580 - trunk/po
Message-ID: <200609170901.k8H91ZwX027521@sheep.berlios.de>

Author: stsp
Date: 2006-09-17 11:01:35 +0200 (Sun, 17 Sep 2006)
New Revision: 580

Removed:
   trunk/po/Makefile
   trunk/po/Makefile.in
   trunk/po/POTFILES
   trunk/po/remove-potcdate.sed
Log:
remove autogenerated files

Deleted: trunk/po/Makefile
===================================================================
--- trunk/po/Makefile	2006-09-17 05:31:52 UTC (rev 579)
+++ trunk/po/Makefile	2006-09-17 09:01:35 UTC (rev 580)
@@ -1,472 +0,0 @@
-# Makefile for PO directory in any package using GNU gettext.
-# Copyright (C) 1995-1997, 2000-2005 by Ulrich Drepper <drepper at gnu.ai.mit.edu>
-#
-# This file can be copied and used freely without restrictions.  It can
-# be used in projects which are not available under the GNU General Public
-# License but which still want to provide support for the GNU gettext
-# functionality.
-# Please note that the actual code of GNU gettext is covered by the GNU
-# General Public License and is *not* in the public domain.
-#
-# Origin: gettext-0.14.4
-
-PACKAGE = sst
-VERSION = 2.0
-PACKAGE_BUGREPORT = stsp
-
-SHELL = /bin/sh
-
-
-srcdir = .
-top_srcdir = ..
-
-
-prefix = /usr/local
-exec_prefix = ${prefix}
-datadir = ${prefix}/share
-localedir = $(datadir)/locale
-gettextsrcdir = $(datadir)/gettext/po
-
-INSTALL = /usr/bin/install -c
-INSTALL_DATA = ${INSTALL} -m 644
-MKINSTALLDIRS = $(top_builddir)/./mkinstalldirs
-mkinstalldirs = $(SHELL) $(MKINSTALLDIRS)
-
-GMSGFMT = /usr/bin/msgfmt
-MSGFMT = /usr/bin/msgfmt
-XGETTEXT = /usr/bin/xgettext
-MSGMERGE = msgmerge
-MSGMERGE_UPDATE = /usr/bin/msgmerge --update
-MSGINIT = msginit
-MSGCONV = msgconv
-MSGFILTER = msgfilter
-
-POFILES = 
-GMOFILES = 
-UPDATEPOFILES = 
-DUMMYPOFILES = 
-DISTFILES.common = Makefile.in.in remove-potcdate.sin \
-$(DISTFILES.common.extra1) $(DISTFILES.common.extra2) $(DISTFILES.common.extra3)
-DISTFILES = $(DISTFILES.common) Makevars POTFILES.in \
-$(POFILES) $(GMOFILES) \
-$(DISTFILES.extra1) $(DISTFILES.extra2) $(DISTFILES.extra3)
-
-POTFILES = \
-
-CATALOGS = 
-
-# Makevars gets inserted here. (Don't remove this line!)
-# Makefile variables for PO directory in any package using GNU gettext.
-
-# Usually the message domain is the same as the package name.
-DOMAIN = $(PACKAGE)
-
-# These two variables depend on the location of this directory.
-subdir = po
-top_builddir = ..
-
-# These options get passed to xgettext.
-XGETTEXT_OPTIONS = --keyword=_ --keyword=N_
-
-# This is the copyright holder that gets inserted into the header of the
-# $(DOMAIN).pot file.  Set this to the copyright holder of the surrounding
-# package.  (Note that the msgstr strings, extracted from the package's
-# sources, belong to the copyright holder of the package.)  Translators are
-# expected to transfer the copyright for their translations to this person
-# or entity, or to disclaim their copyright.  The empty string stands for
-# the public domain; in this case the translators are expected to disclaim
-# their copyright.
-COPYRIGHT_HOLDER = Free Software Foundation, Inc.
-
-# This is the email address or URL to which the translators shall report
-# bugs in the untranslated strings:
-# - Strings which are not entire sentences, see the maintainer guidelines
-#   in the GNU gettext documentation, section 'Preparing Strings'.
-# - Strings which use unclear terms or require additional context to be
-#   understood.
-# - Strings which make invalid assumptions about notation of date, time or
-#   money.
-# - Pluralisation problems.
-# - Incorrect English spelling.
-# - Incorrect formatting.
-# It can be your email address, or a mailing list address where translators
-# can write to without being subscribed, or the URL of a web page through
-# which the translators can contact you.
-MSGID_BUGS_ADDRESS =
-
-# This is the list of locale categories, beyond LC_MESSAGES, for which the
-# message catalogs shall be used.  It is usually empty.
-EXTRA_LOCALE_CATEGORIES =
-
-.SUFFIXES:
-.SUFFIXES: .po .gmo .mo .sed .sin .nop .po-create .po-update
-
-.po.mo:
-	@echo "$(MSGFMT) -c -o $@ $<"; \
-	$(MSGFMT) -c -o t-$@ $< && mv t-$@ $@
-
-.po.gmo:
-	@lang=`echo $* | sed -e 's,.*/,,'`; \
-	test "$(srcdir)" = . && cdcmd="" || cdcmd="cd $(srcdir) && "; \
-	echo "$${cdcmd}rm -f $${lang}.gmo && $(GMSGFMT) -c --statistics -o $${lang}.gmo $${lang}.po"; \
-	cd $(srcdir) && rm -f $${lang}.gmo && $(GMSGFMT) -c --statistics -o t-$${lang}.gmo $${lang}.po && mv t-$${lang}.gmo $${lang}.gmo
-
-.sin.sed:
-	sed -e '/^#/d' $< > t-$@
-	mv t-$@ $@
-
-
-all: all-yes
-
-all-yes: stamp-po
-all-no:
-
-# $(srcdir)/$(DOMAIN).pot is only created when needed. When xgettext finds no
-# internationalized messages, no $(srcdir)/$(DOMAIN).pot is created (because
-# we don't want to bother translators with empty POT files). We assume that
-# LINGUAS is empty in this case, i.e. $(POFILES) and $(GMOFILES) are empty.
-# In this case, stamp-po is a nop (i.e. a phony target).
-
-# stamp-po is a timestamp denoting the last time at which the CATALOGS have
-# been loosely updated. Its purpose is that when a developer or translator
-# checks out the package via CVS, and the $(DOMAIN).pot file is not in CVS,
-# "make" will update the $(DOMAIN).pot and the $(CATALOGS), but subsequent
-# invocations of "make" will do nothing. This timestamp would not be necessary
-# if updating the $(CATALOGS) would always touch them; however, the rule for
-# $(POFILES) has been designed to not touch files that don't need to be
-# changed.
-stamp-po: $(srcdir)/$(DOMAIN).pot
-	test ! -f $(srcdir)/$(DOMAIN).pot || \
-	  test -z "$(GMOFILES)" || $(MAKE) $(GMOFILES)
-	@test ! -f $(srcdir)/$(DOMAIN).pot || { \
-	  echo "touch stamp-po" && \
-	  echo timestamp > stamp-poT && \
-	  mv stamp-poT stamp-po; \
-	}
-
-# Note: Target 'all' must not depend on target '$(DOMAIN).pot-update',
-# otherwise packages like GCC can not be built if only parts of the source
-# have been downloaded.
-
-# This target rebuilds $(DOMAIN).pot; it is an expensive operation.
-# Note that $(DOMAIN).pot is not touched if it doesn't need to be changed.
-$(DOMAIN).pot-update: $(POTFILES) $(srcdir)/POTFILES.in remove-potcdate.sed
-	if test -n '$(MSGID_BUGS_ADDRESS)' || test '$(PACKAGE_BUGREPORT)' = '@'PACKAGE_BUGREPORT'@'; then \
-	  msgid_bugs_address='$(MSGID_BUGS_ADDRESS)'; \
-	else \
-	  msgid_bugs_address='$(PACKAGE_BUGREPORT)'; \
-	fi; \
-	$(XGETTEXT) --default-domain=$(DOMAIN) --directory=$(top_srcdir) \
-	  --add-comments=TRANSLATORS: $(XGETTEXT_OPTIONS) \
-	  --files-from=$(srcdir)/POTFILES.in \
-	  --copyright-holder='$(COPYRIGHT_HOLDER)' \
-	  --msgid-bugs-address="$$msgid_bugs_address"
-	test ! -f $(DOMAIN).po || { \
-	  if test -f $(srcdir)/$(DOMAIN).pot; then \
-	    sed -f remove-potcdate.sed < $(srcdir)/$(DOMAIN).pot > $(DOMAIN).1po && \
-	    sed -f remove-potcdate.sed < $(DOMAIN).po > $(DOMAIN).2po && \
-	    if cmp $(DOMAIN).1po $(DOMAIN).2po >/dev/null 2>&1; then \
-	      rm -f $(DOMAIN).1po $(DOMAIN).2po $(DOMAIN).po; \
-	    else \
-	      rm -f $(DOMAIN).1po $(DOMAIN).2po $(srcdir)/$(DOMAIN).pot && \
-	      mv $(DOMAIN).po $(srcdir)/$(DOMAIN).pot; \
-	    fi; \
-	  else \
-	    mv $(DOMAIN).po $(srcdir)/$(DOMAIN).pot; \
-	  fi; \
-	}
-
-# This rule has no dependencies: we don't need to update $(DOMAIN).pot at
-# every "make" invocation, only create it when it is missing.
-# Only "make $(DOMAIN).pot-update" or "make dist" will force an update.
-$(srcdir)/$(DOMAIN).pot:
-	$(MAKE) $(DOMAIN).pot-update
-
-# This target rebuilds a PO file if $(DOMAIN).pot has changed.
-# Note that a PO file is not touched if it doesn't need to be changed.
-$(POFILES): $(srcdir)/$(DOMAIN).pot
-	@lang=`echo $@ | sed -e 's,.*/,,' -e 's/\.po$$//'`; \
-	if test -f "$(srcdir)/$${lang}.po"; then \
-	  test "$(srcdir)" = . && cdcmd="" || cdcmd="cd $(srcdir) && "; \
-	  echo "$${cdcmd}$(MSGMERGE_UPDATE) $${lang}.po $(DOMAIN).pot"; \
-	  cd $(srcdir) && $(MSGMERGE_UPDATE) $${lang}.po $(DOMAIN).pot; \
-	else \
-	  $(MAKE) $${lang}.po-create; \
-	fi
-
-
-install: install-exec install-data
-install-exec:
-install-data: install-data-yes
-	if test "$(PACKAGE)" = "gettext-tools"; then \
-	  $(mkinstalldirs) $(DESTDIR)$(gettextsrcdir); \
-	  for file in $(DISTFILES.common) Makevars.template; do \
-	    $(INSTALL_DATA) $(srcdir)/$$file \
-			    $(DESTDIR)$(gettextsrcdir)/$$file; \
-	  done; \
-	  for file in Makevars; do \
-	    rm -f $(DESTDIR)$(gettextsrcdir)/$$file; \
-	  done; \
-	else \
-	  : ; \
-	fi
-install-data-no: all
-install-data-yes: all
-	$(mkinstalldirs) $(DESTDIR)$(datadir)
-	@catalogs='$(CATALOGS)'; \
-	for cat in $$catalogs; do \
-	  cat=`basename $$cat`; \
-	  lang=`echo $$cat | sed -e 's/\.gmo$$//'`; \
-	  dir=$(localedir)/$$lang/LC_MESSAGES; \
-	  $(mkinstalldirs) $(DESTDIR)$$dir; \
-	  if test -r $$cat; then realcat=$$cat; else realcat=$(srcdir)/$$cat; fi; \
-	  $(INSTALL_DATA) $$realcat $(DESTDIR)$$dir/$(DOMAIN).mo; \
-	  echo "installing $$realcat as $(DESTDIR)$$dir/$(DOMAIN).mo"; \
-	  for lc in '' $(EXTRA_LOCALE_CATEGORIES); do \
-	    if test -n "$$lc"; then \
-	      if (cd $(DESTDIR)$(localedir)/$$lang && LC_ALL=C ls -l -d $$lc 2>/dev/null) | grep ' -> ' >/dev/null; then \
-	        link=`cd $(DESTDIR)$(localedir)/$$lang && LC_ALL=C ls -l -d $$lc | sed -e 's/^.* -> //'`; \
-	        mv $(DESTDIR)$(localedir)/$$lang/$$lc $(DESTDIR)$(localedir)/$$lang/$$lc.old; \
-	        mkdir $(DESTDIR)$(localedir)/$$lang/$$lc; \
-	        (cd $(DESTDIR)$(localedir)/$$lang/$$lc.old && \
-	         for file in *; do \
-	           if test -f $$file; then \
-	             ln -s ../$$link/$$file $(DESTDIR)$(localedir)/$$lang/$$lc/$$file; \
-	           fi; \
-	         done); \
-	        rm -f $(DESTDIR)$(localedir)/$$lang/$$lc.old; \
-	      else \
-	        if test -d $(DESTDIR)$(localedir)/$$lang/$$lc; then \
-	          :; \
-	        else \
-	          rm -f $(DESTDIR)$(localedir)/$$lang/$$lc; \
-	          mkdir $(DESTDIR)$(localedir)/$$lang/$$lc; \
-	        fi; \
-	      fi; \
-	      rm -f $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo; \
-	      ln -s ../LC_MESSAGES/$(DOMAIN).mo $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo 2>/dev/null || \
-	      ln $(DESTDIR)$(localedir)/$$lang/LC_MESSAGES/$(DOMAIN).mo $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo 2>/dev/null || \
-	      cp -p $(DESTDIR)$(localedir)/$$lang/LC_MESSAGES/$(DOMAIN).mo $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo; \
-	      echo "installing $$realcat link as $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo"; \
-	    fi; \
-	  done; \
-	done
-
-install-strip: install
-
-installdirs: installdirs-exec installdirs-data
-installdirs-exec:
-installdirs-data: installdirs-data-yes
-	if test "$(PACKAGE)" = "gettext-tools"; then \
-	  $(mkinstalldirs) $(DESTDIR)$(gettextsrcdir); \
-	else \
-	  : ; \
-	fi
-installdirs-data-no:
-installdirs-data-yes:
-	$(mkinstalldirs) $(DESTDIR)$(datadir)
-	@catalogs='$(CATALOGS)'; \
-	for cat in $$catalogs; do \
-	  cat=`basename $$cat`; \
-	  lang=`echo $$cat | sed -e 's/\.gmo$$//'`; \
-	  dir=$(localedir)/$$lang/LC_MESSAGES; \
-	  $(mkinstalldirs) $(DESTDIR)$$dir; \
-	  for lc in '' $(EXTRA_LOCALE_CATEGORIES); do \
-	    if test -n "$$lc"; then \
-	      if (cd $(DESTDIR)$(localedir)/$$lang && LC_ALL=C ls -l -d $$lc 2>/dev/null) | grep ' -> ' >/dev/null; then \
-	        link=`cd $(DESTDIR)$(localedir)/$$lang && LC_ALL=C ls -l -d $$lc | sed -e 's/^.* -> //'`; \
-	        mv $(DESTDIR)$(localedir)/$$lang/$$lc $(DESTDIR)$(localedir)/$$lang/$$lc.old; \
-	        mkdir $(DESTDIR)$(localedir)/$$lang/$$lc; \
-	        (cd $(DESTDIR)$(localedir)/$$lang/$$lc.old && \
-	         for file in *; do \
-	           if test -f $$file; then \
-	             ln -s ../$$link/$$file $(DESTDIR)$(localedir)/$$lang/$$lc/$$file; \
-	           fi; \
-	         done); \
-	        rm -f $(DESTDIR)$(localedir)/$$lang/$$lc.old; \
-	      else \
-	        if test -d $(DESTDIR)$(localedir)/$$lang/$$lc; then \
-	          :; \
-	        else \
-	          rm -f $(DESTDIR)$(localedir)/$$lang/$$lc; \
-	          mkdir $(DESTDIR)$(localedir)/$$lang/$$lc; \
-	        fi; \
-	      fi; \
-	    fi; \
-	  done; \
-	done
-
-# Define this as empty until I found a useful application.
-installcheck:
-
-uninstall: uninstall-exec uninstall-data
-uninstall-exec:
-uninstall-data: uninstall-data-yes
-	if test "$(PACKAGE)" = "gettext-tools"; then \
-	  for file in $(DISTFILES.common) Makevars.template; do \
-	    rm -f $(DESTDIR)$(gettextsrcdir)/$$file; \
-	  done; \
-	else \
-	  : ; \
-	fi
-uninstall-data-no:
-uninstall-data-yes:
-	catalogs='$(CATALOGS)'; \
-	for cat in $$catalogs; do \
-	  cat=`basename $$cat`; \
-	  lang=`echo $$cat | sed -e 's/\.gmo$$//'`; \
-	  for lc in LC_MESSAGES $(EXTRA_LOCALE_CATEGORIES); do \
-	    rm -f $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo; \
-	  done; \
-	done
-
-check: all
-
-info dvi ps pdf html tags TAGS ctags CTAGS ID:
-
-mostlyclean:
-	rm -f remove-potcdate.sed
-	rm -f stamp-poT
-	rm -f core core.* $(DOMAIN).po $(DOMAIN).1po $(DOMAIN).2po *.new.po
-	rm -fr *.o
-
-clean: mostlyclean
-
-distclean: clean
-	rm -f Makefile Makefile.in POTFILES *.mo
-
-maintainer-clean: distclean
-	@echo "This command is intended for maintainers to use;"
-	@echo "it deletes files that may require special tools to rebuild."
-	rm -f stamp-po $(GMOFILES)
-
-distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)
-dist distdir:
-	$(MAKE) update-po
-	@$(MAKE) dist2
-# This is a separate target because 'update-po' must be executed before.
-dist2: stamp-po $(DISTFILES)
-	dists="$(DISTFILES)"; \
-	if test "$(PACKAGE)" = "gettext-tools"; then \
-	  dists="$$dists Makevars.template"; \
-	fi; \
-	if test -f $(srcdir)/$(DOMAIN).pot; then \
-	  dists="$$dists $(DOMAIN).pot stamp-po"; \
-	fi; \
-	if test -f $(srcdir)/ChangeLog; then \
-	  dists="$$dists ChangeLog"; \
-	fi; \
-	for i in 0 1 2 3 4 5 6 7 8 9; do \
-	  if test -f $(srcdir)/ChangeLog.$$i; then \
-	    dists="$$dists ChangeLog.$$i"; \
-	  fi; \
-	done; \
-	if test -f $(srcdir)/LINGUAS; then dists="$$dists LINGUAS"; fi; \
-	for file in $$dists; do \
-	  if test -f $$file; then \
-	    cp -p $$file $(distdir) || exit 1; \
-	  else \
-	    cp -p $(srcdir)/$$file $(distdir) || exit 1; \
-	  fi; \
-	done
-
-update-po: Makefile
-	$(MAKE) $(DOMAIN).pot-update
-	test -z "$(UPDATEPOFILES)" || $(MAKE) $(UPDATEPOFILES)
-	$(MAKE) update-gmo
-
-# General rule for creating PO files.
-
-.nop.po-create:
-	@lang=`echo $@ | sed -e 's/\.po-create$$//'`; \
-	echo "File $$lang.po does not exist. If you are a translator, you can create it through 'msginit'." 1>&2; \
-	exit 1
-
-# General rule for updating PO files.
-
-.nop.po-update:
-	@lang=`echo $@ | sed -e 's/\.po-update$$//'`; \
-	if test "$(PACKAGE)" = "gettext-tools"; then PATH=`pwd`/../src:$$PATH; fi; \
-	tmpdir=`pwd`; \
-	echo "$$lang:"; \
-	test "$(srcdir)" = . && cdcmd="" || cdcmd="cd $(srcdir) && "; \
-	echo "$${cdcmd}$(MSGMERGE) $$lang.po $(DOMAIN).pot -o $$lang.new.po"; \
-	cd $(srcdir); \
-	if $(MSGMERGE) $$lang.po $(DOMAIN).pot -o $$tmpdir/$$lang.new.po; then \
-	  if cmp $$lang.po $$tmpdir/$$lang.new.po >/dev/null 2>&1; then \
-	    rm -f $$tmpdir/$$lang.new.po; \
-	  else \
-	    if mv -f $$tmpdir/$$lang.new.po $$lang.po; then \
-	      :; \
-	    else \
-	      echo "msgmerge for $$lang.po failed: cannot move $$tmpdir/$$lang.new.po to $$lang.po" 1>&2; \
-	      exit 1; \
-	    fi; \
-	  fi; \
-	else \
-	  echo "msgmerge for $$lang.po failed!" 1>&2; \
-	  rm -f $$tmpdir/$$lang.new.po; \
-	fi
-
-$(DUMMYPOFILES):
-
-update-gmo: Makefile $(GMOFILES)
-	@:
-
-Makefile: Makefile.in.in Makevars $(top_builddir)/config.status POTFILES.in
-	cd $(top_builddir) \
-	  && CONFIG_FILES=$(subdir)/$@.in CONFIG_HEADERS= \
-	       $(SHELL) ./config.status
-
-force:
-
-# Tell versions [3.59,3.63) of GNU make not to export all variables.
-# Otherwise a system limit (for SysV at least) may be exceeded.
-.NOEXPORT:
-# Special Makefile rules for English message catalogs with quotation marks.
-
-DISTFILES.common.extra1 = quot.sed boldquot.sed en at quot.header en at boldquot.header insert-header.sin Rules-quot
-
-.SUFFIXES: .insert-header .po-update-en
-
-en at quot.po-create:
-	$(MAKE) en at quot.po-update
-en at boldquot.po-create:
-	$(MAKE) en at boldquot.po-update
-
-en at quot.po-update: en at quot.po-update-en
-en at boldquot.po-update: en at boldquot.po-update-en
-
-.insert-header.po-update-en:
-	@lang=`echo $@ | sed -e 's/\.po-update-en$$//'`; \
-	if test "$(PACKAGE)" = "gettext"; then PATH=`pwd`/../src:$$PATH; GETTEXTLIBDIR=`cd $(top_srcdir)/src && pwd`; export GETTEXTLIBDIR; fi; \
-	tmpdir=`pwd`; \
-	echo "$$lang:"; \
-	ll=`echo $$lang | sed -e 's/@.*//'`; \
-	LC_ALL=C; export LC_ALL; \
-	cd $(srcdir); \
-	if $(MSGINIT) -i $(DOMAIN).pot --no-translator -l $$ll -o - 2>/dev/null | sed -f $$tmpdir/$$lang.insert-header | $(MSGCONV) -t UTF-8 | $(MSGFILTER) sed -f `echo $$lang | sed -e 's/.*@//'`.sed 2>/dev/null > $$tmpdir/$$lang.new.po; then \
-	  if cmp $$lang.po $$tmpdir/$$lang.new.po >/dev/null 2>&1; then \
-	    rm -f $$tmpdir/$$lang.new.po; \
-	  else \
-	    if mv -f $$tmpdir/$$lang.new.po $$lang.po; then \
-	      :; \
-	    else \
-	      echo "creation of $$lang.po failed: cannot move $$tmpdir/$$lang.new.po to $$lang.po" 1>&2; \
-	      exit 1; \
-	    fi; \
-	  fi; \
-	else \
-	  echo "creation of $$lang.po failed!" 1>&2; \
-	  rm -f $$tmpdir/$$lang.new.po; \
-	fi
-
-en at quot.insert-header: insert-header.sin
-	sed -e '/^#/d' -e 's/HEADER/en at quot.header/g' $(srcdir)/insert-header.sin > en at quot.insert-header
-
-en at boldquot.insert-header: insert-header.sin
-	sed -e '/^#/d' -e 's/HEADER/en at boldquot.header/g' $(srcdir)/insert-header.sin > en at boldquot.insert-header
-
-mostlyclean: mostlyclean-quot
-mostlyclean-quot:
-	rm -f *.insert-header

Deleted: trunk/po/Makefile.in
===================================================================
--- trunk/po/Makefile.in	2006-09-17 05:31:52 UTC (rev 579)
+++ trunk/po/Makefile.in	2006-09-17 09:01:35 UTC (rev 580)
@@ -1,384 +0,0 @@
-# Makefile for PO directory in any package using GNU gettext.
-# Copyright (C) 1995-1997, 2000-2005 by Ulrich Drepper <drepper at gnu.ai.mit.edu>
-#
-# This file can be copied and used freely without restrictions.  It can
-# be used in projects which are not available under the GNU General Public
-# License but which still want to provide support for the GNU gettext
-# functionality.
-# Please note that the actual code of GNU gettext is covered by the GNU
-# General Public License and is *not* in the public domain.
-#
-# Origin: gettext-0.14.4
-
-PACKAGE = sst
-VERSION = 2.0
-PACKAGE_BUGREPORT = stsp
-
-SHELL = /bin/sh
-
-
-srcdir = .
-top_srcdir = ..
-
-
-prefix = /usr/local
-exec_prefix = ${prefix}
-datadir = ${prefix}/share
-localedir = $(datadir)/locale
-gettextsrcdir = $(datadir)/gettext/po
-
-INSTALL = /usr/bin/install -c
-INSTALL_DATA = ${INSTALL} -m 644
-MKINSTALLDIRS = $(top_builddir)/./mkinstalldirs
-mkinstalldirs = $(SHELL) $(MKINSTALLDIRS)
-
-GMSGFMT = /usr/bin/msgfmt
-MSGFMT = /usr/bin/msgfmt
-XGETTEXT = /usr/bin/xgettext
-MSGMERGE = msgmerge
-MSGMERGE_UPDATE = /usr/bin/msgmerge --update
-MSGINIT = msginit
-MSGCONV = msgconv
-MSGFILTER = msgfilter
-
-POFILES = @POFILES@
-GMOFILES = @GMOFILES@
-UPDATEPOFILES = @UPDATEPOFILES@
-DUMMYPOFILES = @DUMMYPOFILES@
-DISTFILES.common = Makefile.in.in remove-potcdate.sin \
-$(DISTFILES.common.extra1) $(DISTFILES.common.extra2) $(DISTFILES.common.extra3)
-DISTFILES = $(DISTFILES.common) Makevars POTFILES.in \
-$(POFILES) $(GMOFILES) \
-$(DISTFILES.extra1) $(DISTFILES.extra2) $(DISTFILES.extra3)
-
-POTFILES = \
-
-CATALOGS = @CATALOGS@
-
-# Makevars gets inserted here. (Don't remove this line!)
-
-.SUFFIXES:
-.SUFFIXES: .po .gmo .mo .sed .sin .nop .po-create .po-update
-
-.po.mo:
-	@echo "$(MSGFMT) -c -o $@ $<"; \
-	$(MSGFMT) -c -o t-$@ $< && mv t-$@ $@
-
-.po.gmo:
-	@lang=`echo $* | sed -e 's,.*/,,'`; \
-	test "$(srcdir)" = . && cdcmd="" || cdcmd="cd $(srcdir) && "; \
-	echo "$${cdcmd}rm -f $${lang}.gmo && $(GMSGFMT) -c --statistics -o $${lang}.gmo $${lang}.po"; \
-	cd $(srcdir) && rm -f $${lang}.gmo && $(GMSGFMT) -c --statistics -o t-$${lang}.gmo $${lang}.po && mv t-$${lang}.gmo $${lang}.gmo
-
-.sin.sed:
-	sed -e '/^#/d' $< > t-$@
-	mv t-$@ $@
-
-
-all: all-yes
-
-all-yes: stamp-po
-all-no:
-
-# $(srcdir)/$(DOMAIN).pot is only created when needed. When xgettext finds no
-# internationalized messages, no $(srcdir)/$(DOMAIN).pot is created (because
-# we don't want to bother translators with empty POT files). We assume that
-# LINGUAS is empty in this case, i.e. $(POFILES) and $(GMOFILES) are empty.
-# In this case, stamp-po is a nop (i.e. a phony target).
-
-# stamp-po is a timestamp denoting the last time at which the CATALOGS have
-# been loosely updated. Its purpose is that when a developer or translator
-# checks out the package via CVS, and the $(DOMAIN).pot file is not in CVS,
-# "make" will update the $(DOMAIN).pot and the $(CATALOGS), but subsequent
-# invocations of "make" will do nothing. This timestamp would not be necessary
-# if updating the $(CATALOGS) would always touch them; however, the rule for
-# $(POFILES) has been designed to not touch files that don't need to be
-# changed.
-stamp-po: $(srcdir)/$(DOMAIN).pot
-	test ! -f $(srcdir)/$(DOMAIN).pot || \
-	  test -z "$(GMOFILES)" || $(MAKE) $(GMOFILES)
-	@test ! -f $(srcdir)/$(DOMAIN).pot || { \
-	  echo "touch stamp-po" && \
-	  echo timestamp > stamp-poT && \
-	  mv stamp-poT stamp-po; \
-	}
-
-# Note: Target 'all' must not depend on target '$(DOMAIN).pot-update',
-# otherwise packages like GCC can not be built if only parts of the source
-# have been downloaded.
-
-# This target rebuilds $(DOMAIN).pot; it is an expensive operation.
-# Note that $(DOMAIN).pot is not touched if it doesn't need to be changed.
-$(DOMAIN).pot-update: $(POTFILES) $(srcdir)/POTFILES.in remove-potcdate.sed
-	if test -n '$(MSGID_BUGS_ADDRESS)' || test '$(PACKAGE_BUGREPORT)' = '@'PACKAGE_BUGREPORT'@'; then \
-	  msgid_bugs_address='$(MSGID_BUGS_ADDRESS)'; \
-	else \
-	  msgid_bugs_address='$(PACKAGE_BUGREPORT)'; \
-	fi; \
-	$(XGETTEXT) --default-domain=$(DOMAIN) --directory=$(top_srcdir) \
-	  --add-comments=TRANSLATORS: $(XGETTEXT_OPTIONS) \
-	  --files-from=$(srcdir)/POTFILES.in \
-	  --copyright-holder='$(COPYRIGHT_HOLDER)' \
-	  --msgid-bugs-address="$$msgid_bugs_address"
-	test ! -f $(DOMAIN).po || { \
-	  if test -f $(srcdir)/$(DOMAIN).pot; then \
-	    sed -f remove-potcdate.sed < $(srcdir)/$(DOMAIN).pot > $(DOMAIN).1po && \
-	    sed -f remove-potcdate.sed < $(DOMAIN).po > $(DOMAIN).2po && \
-	    if cmp $(DOMAIN).1po $(DOMAIN).2po >/dev/null 2>&1; then \
-	      rm -f $(DOMAIN).1po $(DOMAIN).2po $(DOMAIN).po; \
-	    else \
-	      rm -f $(DOMAIN).1po $(DOMAIN).2po $(srcdir)/$(DOMAIN).pot && \
-	      mv $(DOMAIN).po $(srcdir)/$(DOMAIN).pot; \
-	    fi; \
-	  else \
-	    mv $(DOMAIN).po $(srcdir)/$(DOMAIN).pot; \
-	  fi; \
-	}
-
-# This rule has no dependencies: we don't need to update $(DOMAIN).pot at
-# every "make" invocation, only create it when it is missing.
-# Only "make $(DOMAIN).pot-update" or "make dist" will force an update.
-$(srcdir)/$(DOMAIN).pot:
-	$(MAKE) $(DOMAIN).pot-update
-
-# This target rebuilds a PO file if $(DOMAIN).pot has changed.
-# Note that a PO file is not touched if it doesn't need to be changed.
-$(POFILES): $(srcdir)/$(DOMAIN).pot
-	@lang=`echo $@ | sed -e 's,.*/,,' -e 's/\.po$$//'`; \
-	if test -f "$(srcdir)/$${lang}.po"; then \
-	  test "$(srcdir)" = . && cdcmd="" || cdcmd="cd $(srcdir) && "; \
-	  echo "$${cdcmd}$(MSGMERGE_UPDATE) $${lang}.po $(DOMAIN).pot"; \
-	  cd $(srcdir) && $(MSGMERGE_UPDATE) $${lang}.po $(DOMAIN).pot; \
-	else \
-	  $(MAKE) $${lang}.po-create; \
-	fi
-
-
-install: install-exec install-data
-install-exec:
-install-data: install-data-yes
-	if test "$(PACKAGE)" = "gettext-tools"; then \
-	  $(mkinstalldirs) $(DESTDIR)$(gettextsrcdir); \
-	  for file in $(DISTFILES.common) Makevars.template; do \
-	    $(INSTALL_DATA) $(srcdir)/$$file \
-			    $(DESTDIR)$(gettextsrcdir)/$$file; \
-	  done; \
-	  for file in Makevars; do \
-	    rm -f $(DESTDIR)$(gettextsrcdir)/$$file; \
-	  done; \
-	else \
-	  : ; \
-	fi
-install-data-no: all
-install-data-yes: all
-	$(mkinstalldirs) $(DESTDIR)$(datadir)
-	@catalogs='$(CATALOGS)'; \
-	for cat in $$catalogs; do \
-	  cat=`basename $$cat`; \
-	  lang=`echo $$cat | sed -e 's/\.gmo$$//'`; \
-	  dir=$(localedir)/$$lang/LC_MESSAGES; \
-	  $(mkinstalldirs) $(DESTDIR)$$dir; \
-	  if test -r $$cat; then realcat=$$cat; else realcat=$(srcdir)/$$cat; fi; \
-	  $(INSTALL_DATA) $$realcat $(DESTDIR)$$dir/$(DOMAIN).mo; \
-	  echo "installing $$realcat as $(DESTDIR)$$dir/$(DOMAIN).mo"; \
-	  for lc in '' $(EXTRA_LOCALE_CATEGORIES); do \
-	    if test -n "$$lc"; then \
-	      if (cd $(DESTDIR)$(localedir)/$$lang && LC_ALL=C ls -l -d $$lc 2>/dev/null) | grep ' -> ' >/dev/null; then \
-	        link=`cd $(DESTDIR)$(localedir)/$$lang && LC_ALL=C ls -l -d $$lc | sed -e 's/^.* -> //'`; \
-	        mv $(DESTDIR)$(localedir)/$$lang/$$lc $(DESTDIR)$(localedir)/$$lang/$$lc.old; \
-	        mkdir $(DESTDIR)$(localedir)/$$lang/$$lc; \
-	        (cd $(DESTDIR)$(localedir)/$$lang/$$lc.old && \
-	         for file in *; do \
-	           if test -f $$file; then \
-	             ln -s ../$$link/$$file $(DESTDIR)$(localedir)/$$lang/$$lc/$$file; \
-	           fi; \
-	         done); \
-	        rm -f $(DESTDIR)$(localedir)/$$lang/$$lc.old; \
-	      else \
-	        if test -d $(DESTDIR)$(localedir)/$$lang/$$lc; then \
-	          :; \
-	        else \
-	          rm -f $(DESTDIR)$(localedir)/$$lang/$$lc; \
-	          mkdir $(DESTDIR)$(localedir)/$$lang/$$lc; \
-	        fi; \
-	      fi; \
-	      rm -f $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo; \
-	      ln -s ../LC_MESSAGES/$(DOMAIN).mo $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo 2>/dev/null || \
-	      ln $(DESTDIR)$(localedir)/$$lang/LC_MESSAGES/$(DOMAIN).mo $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo 2>/dev/null || \
-	      cp -p $(DESTDIR)$(localedir)/$$lang/LC_MESSAGES/$(DOMAIN).mo $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo; \
-	      echo "installing $$realcat link as $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo"; \
-	    fi; \
-	  done; \
-	done
-
-install-strip: install
-
-installdirs: installdirs-exec installdirs-data
-installdirs-exec:
-installdirs-data: installdirs-data-yes
-	if test "$(PACKAGE)" = "gettext-tools"; then \
-	  $(mkinstalldirs) $(DESTDIR)$(gettextsrcdir); \
-	else \
-	  : ; \
-	fi
-installdirs-data-no:
-installdirs-data-yes:
-	$(mkinstalldirs) $(DESTDIR)$(datadir)
-	@catalogs='$(CATALOGS)'; \
-	for cat in $$catalogs; do \
-	  cat=`basename $$cat`; \
-	  lang=`echo $$cat | sed -e 's/\.gmo$$//'`; \
-	  dir=$(localedir)/$$lang/LC_MESSAGES; \
-	  $(mkinstalldirs) $(DESTDIR)$$dir; \
-	  for lc in '' $(EXTRA_LOCALE_CATEGORIES); do \
-	    if test -n "$$lc"; then \
-	      if (cd $(DESTDIR)$(localedir)/$$lang && LC_ALL=C ls -l -d $$lc 2>/dev/null) | grep ' -> ' >/dev/null; then \
-	        link=`cd $(DESTDIR)$(localedir)/$$lang && LC_ALL=C ls -l -d $$lc | sed -e 's/^.* -> //'`; \
-	        mv $(DESTDIR)$(localedir)/$$lang/$$lc $(DESTDIR)$(localedir)/$$lang/$$lc.old; \
-	        mkdir $(DESTDIR)$(localedir)/$$lang/$$lc; \
-	        (cd $(DESTDIR)$(localedir)/$$lang/$$lc.old && \
-	         for file in *; do \
-	           if test -f $$file; then \
-	             ln -s ../$$link/$$file $(DESTDIR)$(localedir)/$$lang/$$lc/$$file; \
-	           fi; \
-	         done); \
-	        rm -f $(DESTDIR)$(localedir)/$$lang/$$lc.old; \
-	      else \
-	        if test -d $(DESTDIR)$(localedir)/$$lang/$$lc; then \
-	          :; \
-	        else \
-	          rm -f $(DESTDIR)$(localedir)/$$lang/$$lc; \
-	          mkdir $(DESTDIR)$(localedir)/$$lang/$$lc; \
-	        fi; \
-	      fi; \
-	    fi; \
-	  done; \
-	done
-
-# Define this as empty until I found a useful application.
-installcheck:
-
-uninstall: uninstall-exec uninstall-data
-uninstall-exec:
-uninstall-data: uninstall-data-yes
-	if test "$(PACKAGE)" = "gettext-tools"; then \
-	  for file in $(DISTFILES.common) Makevars.template; do \
-	    rm -f $(DESTDIR)$(gettextsrcdir)/$$file; \
-	  done; \
-	else \
-	  : ; \
-	fi
-uninstall-data-no:
-uninstall-data-yes:
-	catalogs='$(CATALOGS)'; \
-	for cat in $$catalogs; do \
-	  cat=`basename $$cat`; \
-	  lang=`echo $$cat | sed -e 's/\.gmo$$//'`; \
-	  for lc in LC_MESSAGES $(EXTRA_LOCALE_CATEGORIES); do \
-	    rm -f $(DESTDIR)$(localedir)/$$lang/$$lc/$(DOMAIN).mo; \
-	  done; \
-	done
-
-check: all
-
-info dvi ps pdf html tags TAGS ctags CTAGS ID:
-
-mostlyclean:
-	rm -f remove-potcdate.sed
-	rm -f stamp-poT
-	rm -f core core.* $(DOMAIN).po $(DOMAIN).1po $(DOMAIN).2po *.new.po
-	rm -fr *.o
-
-clean: mostlyclean
-
-distclean: clean
-	rm -f Makefile Makefile.in POTFILES *.mo
-
-maintainer-clean: distclean
-	@echo "This command is intended for maintainers to use;"
-	@echo "it deletes files that may require special tools to rebuild."
-	rm -f stamp-po $(GMOFILES)
-
-distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)
-dist distdir:
-	$(MAKE) update-po
-	@$(MAKE) dist2
-# This is a separate target because 'update-po' must be executed before.
-dist2: stamp-po $(DISTFILES)
-	dists="$(DISTFILES)"; \
-	if test "$(PACKAGE)" = "gettext-tools"; then \
-	  dists="$$dists Makevars.template"; \
-	fi; \
-	if test -f $(srcdir)/$(DOMAIN).pot; then \
-	  dists="$$dists $(DOMAIN).pot stamp-po"; \
-	fi; \
-	if test -f $(srcdir)/ChangeLog; then \
-	  dists="$$dists ChangeLog"; \
-	fi; \
-	for i in 0 1 2 3 4 5 6 7 8 9; do \
-	  if test -f $(srcdir)/ChangeLog.$$i; then \
-	    dists="$$dists ChangeLog.$$i"; \
-	  fi; \
-	done; \
-	if test -f $(srcdir)/LINGUAS; then dists="$$dists LINGUAS"; fi; \
-	for file in $$dists; do \
-	  if test -f $$file; then \
-	    cp -p $$file $(distdir) || exit 1; \
-	  else \
-	    cp -p $(srcdir)/$$file $(distdir) || exit 1; \
-	  fi; \
-	done
-
-update-po: Makefile
-	$(MAKE) $(DOMAIN).pot-update
-	test -z "$(UPDATEPOFILES)" || $(MAKE) $(UPDATEPOFILES)
-	$(MAKE) update-gmo
-
-# General rule for creating PO files.
-
-.nop.po-create:
-	@lang=`echo $@ | sed -e 's/\.po-create$$//'`; \
-	echo "File $$lang.po does not exist. If you are a translator, you can create it through 'msginit'." 1>&2; \
-	exit 1
-
-# General rule for updating PO files.
-
-.nop.po-update:
-	@lang=`echo $@ | sed -e 's/\.po-update$$//'`; \
-	if test "$(PACKAGE)" = "gettext-tools"; then PATH=`pwd`/../src:$$PATH; fi; \
-	tmpdir=`pwd`; \
-	echo "$$lang:"; \
-	test "$(srcdir)" = . && cdcmd="" || cdcmd="cd $(srcdir) && "; \
-	echo "$${cdcmd}$(MSGMERGE) $$lang.po $(DOMAIN).pot -o $$lang.new.po"; \
-	cd $(srcdir); \
-	if $(MSGMERGE) $$lang.po $(DOMAIN).pot -o $$tmpdir/$$lang.new.po; then \
-	  if cmp $$lang.po $$tmpdir/$$lang.new.po >/dev/null 2>&1; then \
-	    rm -f $$tmpdir/$$lang.new.po; \
-	  else \
-	    if mv -f $$tmpdir/$$lang.new.po $$lang.po; then \
-	      :; \
-	    else \
-	      echo "msgmerge for $$lang.po failed: cannot move $$tmpdir/$$lang.new.po to $$lang.po" 1>&2; \
-	      exit 1; \
-	    fi; \
-	  fi; \
-	else \
-	  echo "msgmerge for $$lang.po failed!" 1>&2; \
-	  rm -f $$tmpdir/$$lang.new.po; \
-	fi
-
-$(DUMMYPOFILES):
-
-update-gmo: Makefile $(GMOFILES)
-	@:
-
-Makefile: Makefile.in.in Makevars $(top_builddir)/config.status @POMAKEFILEDEPS@
-	cd $(top_builddir) \
-	  && CONFIG_FILES=$(subdir)/$@.in CONFIG_HEADERS= \
-	       $(SHELL) ./config.status
-
-force:
-
-# Tell versions [3.59,3.63) of GNU make not to export all variables.
-# Otherwise a system limit (for SysV at least) may be exceeded.
-.NOEXPORT:

Deleted: trunk/po/POTFILES
===================================================================

Deleted: trunk/po/remove-potcdate.sed
===================================================================
--- trunk/po/remove-potcdate.sed	2006-09-17 05:31:52 UTC (rev 579)
+++ trunk/po/remove-potcdate.sed	2006-09-17 09:01:35 UTC (rev 580)
@@ -1,11 +0,0 @@
-/^"POT-Creation-Date: .*"$/{
-x
-s/P/P/
-ta
-g
-d
-bb
-:a
-x
-:b
-}



From esr at mail.berlios.de  Sun Sep 17 23:51:31 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sun, 17 Sep 2006 23:51:31 +0200
Subject: [Sst-commit-watch] r581 - trunk/src
Message-ID: <200609172151.k8HLpVY2016281@sheep.berlios.de>

Author: esr
Date: 2006-09-17 23:51:30 +0200 (Sun, 17 Sep 2006)
New Revision: 581

Modified:
   trunk/src/reports.c
Log:
Fix what look like a longstanding bug in ETA computation.


Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-17 09:01:35 UTC (rev 580)
+++ trunk/src/reports.c	2006-09-17 21:51:30 UTC (rev 581)
@@ -526,7 +526,7 @@
 	    prout("Unfortunately, the Federation will be destroyed by then.");
 	if (twarp > 6.0)
 	    prout("You'll be taking risks at that speed, Captain");
-	if ((game.isatb==1 && game.state.isy == ix1 && game.state.isx == iy1 &&
+	if ((game.isatb==1 && game.state.isy == iy1 && game.state.isx == ix1 &&
 	     game.future[FSCDBAS]< ttime+game.state.date)||
 	    (game.future[FCDBAS]<ttime+game.state.date && game.baty==ix1 && game.batx == iy1))
 	    prout("The starbase there will be destroyed by then.");



From esr at mail.berlios.de  Mon Sep 18 00:43:52 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 18 Sep 2006 00:43:52 +0200
Subject: [Sst-commit-watch] r582 - trunk/src
Message-ID: <200609172243.k8HMhqp9020547@sheep.berlios.de>

Author: esr
Date: 2006-09-18 00:43:51 +0200 (Mon, 18 Sep 2006)
New Revision: 582

Modified:
   trunk/src/reports.c
Log:
Other half of eta-check fix.


Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-17 21:51:30 UTC (rev 581)
+++ trunk/src/reports.c	2006-09-17 22:43:51 UTC (rev 582)
@@ -528,7 +528,7 @@
 	    prout("You'll be taking risks at that speed, Captain");
 	if ((game.isatb==1 && game.state.isy == iy1 && game.state.isx == ix1 &&
 	     game.future[FSCDBAS]< ttime+game.state.date)||
-	    (game.future[FCDBAS]<ttime+game.state.date && game.baty==ix1 && game.batx == iy1))
+	    (game.future[FCDBAS]<ttime+game.state.date && game.baty==iy1 && game.baty == iy1))
 	    prout("The starbase there will be destroyed by then.");
 	proutn("New warp factor to try? ");
 	if (scan() == IHREAL) {



From esr at mail.berlios.de  Mon Sep 18 01:55:47 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 18 Sep 2006 01:55:47 +0200
Subject: [Sst-commit-watch] r583 - trunk/src
Message-ID: <200609172355.k8HNtlmV000852@sheep.berlios.de>

Author: esr
Date: 2006-09-18 01:55:46 +0200 (Mon, 18 Sep 2006)
New Revision: 583

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
Abstract all references to the future array (outside of events.c) away.
This has two benefits:

1. New code is easier to read.
2. It prepares us for implementing stateful events with a different 
underlying data structure.  We'll need this for some BSD-Trek features.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-17 22:43:51 UTC (rev 582)
+++ trunk/src/ai.c	2006-09-17 23:55:46 UTC (rev 583)
@@ -48,8 +48,8 @@
 	game.iscate=0;
 	game.ientesc=0;
 	game.isatb=0;
-	game.future[FSCMOVE]=0.2777+game.state.date;
-	game.future[FSCDBAS]=FOREVER;
+	schedule(FSCMOVE, 0.2777);
+	unschedule(FSCDBAS);
 	game.state.isx=iqx;
 	game.state.isy=iqy;
     }
@@ -331,7 +331,7 @@
 	game.isatb=0;
 	game.ishere=0;
 	game.ientesc=0;
-	game.future[FSCDBAS]=FOREVER;
+	unschedule(FSCDBAS);
 	for_local_enemies(i) 
 	    if (game.quad[game.kx[i]][game.ky[i]] == IHS) break;
 	game.quad[game.kx[i]][game.ky[i]] = IHDOT;
@@ -395,7 +395,7 @@
 	/* compute distances to starbases */
 	if (game.state.rembase <= 0) {
 	    /* nothing left to do */
-	    game.future[FSCMOVE] = FOREVER;
+	    unschedule(FSCMOVE);
 	    return;
 	}
 	sx = game.state.isx;
@@ -499,7 +499,7 @@
     }
     /* check for a base */
     if (game.state.rembase == 0) {
-	game.future[FSCMOVE] = FOREVER;
+	unschedule(FSCMOVE);
     }
     else for_starbases(i) {
 	ibqx = game.state.baseqx[i];
@@ -509,9 +509,9 @@
 	    if (flag) return; /* no, don't attack base! */
 	    game.iseenit = 0;
 	    game.isatb=1;
-	    game.future[FSCDBAS] = game.state.date + 1.0 +2.0*Rand();
-	    if (game.future[FCDBAS] < FOREVER) game.future[FSCDBAS] +=
-		game.future[FCDBAS]-game.state.date;
+	    schedule(FSCDBAS, 1.0 +2.0*Rand());
+	    if (is_scheduled(FCDBAS)) 
+		postpone(FSCDBAS, scheduled(FCDBAS)-game.state.date);
 	    if (game.damage[DRADIO] > 0 && game.condit != IHDOCKED)
 		return; /* no warning */
 	    game.iseenit = 1;
@@ -522,7 +522,7 @@
 	    skip(1);
 	    prout(_("   reports that it is under attack from the Klingon Super-commander."));
 	    proutn(_("   It can survive until stardate %d.\""),
-		   (int)game.future[FSCDBAS]);
+		   (int)scheduled(FSCDBAS));
 	    if (game.resting==0) return;
 	    prout(_("Mr. Spock-  \"Captain, shall we cancel the rest period?\""));
 	    if (ja()==0) return;

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-17 22:43:51 UTC (rev 582)
+++ trunk/src/battle.c	2006-09-17 23:55:46 UTC (rev 583)
@@ -635,9 +635,9 @@
 	    game.state.cx[game.state.remcom] = 0;
 	    game.state.cy[game.state.remcom] = 0;
 	    game.state.remcom--;
-	    game.future[FTBEAM] = FOREVER;
+	    unschedule(FTBEAM);
 	    if (game.state.remcom != 0)
-		game.future[FTBEAM] = game.state.date + expran(1.0*game.incom/game.state.remcom);
+		schedule(FTBEAM, expran(1.0*game.incom/game.state.remcom));
 	    break;
 	case IHK:
 	    game.state.remkl--;
@@ -645,7 +645,8 @@
 	case IHS:
 	    game.state.nscrem--;
 	    game.ishere = game.state.isx = game.state.isy = game.isatb = game.iscate = 0;
-	    game.future[FSCMOVE] = game.future[FSCDBAS] = FOREVER;
+	    unschedule(FSCMOVE);
+	    unschedule(FSCDBAS);
 	    break;
 	}
     }
@@ -658,8 +659,8 @@
     game.state.remtime = game.state.remres/(game.state.remkl + 4*game.state.remcom);
 
     /* Remove enemy ship from arrays describing local game.conditions */
-    if (game.future[FCDBAS] < FOREVER && game.batx==game.quadx && game.baty==game.quady && type==IHC)
-	game.future[FCDBAS] = FOREVER;
+    if (is_scheduled(FCDBAS) && game.batx==game.quadx && game.baty==game.quady && type==IHC)
+	unschedule(FCDBAS);
     for_local_enemies(i)
 	if (game.kx[i]==ix && game.ky[i]==iy) break;
     game.nenhere--;

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-17 22:43:51 UTC (rev 582)
+++ trunk/src/events.c	2006-09-17 23:55:46 UTC (rev 583)
@@ -1,6 +1,36 @@
 #include "sst.h"
 #include <math.h>
 
+void unschedule(int evtype)
+/* remove an event from the schedule */
+{
+    game.future[evtype] = FOREVER;
+}
+
+int is_scheduled(int evtype)
+/* is an event of specified type scheduled */
+{
+    return game.future[evtype] != FOREVER;
+}
+
+extern double scheduled(int evtype)
+/* when will this event happen? */
+{
+    return game.future[evtype];
+}
+
+void schedule(int evtype, double offset)
+/* schedule an event of specified type */
+{
+    game.future[evtype] = game.state.date + offset;
+}
+
+void postpone(int evtype, double offset)
+/* poistpone a scheduled event */
+{
+    game.future[evtype] += offset;
+}
+
 void events(void) 
 {
     int ictbeam=0, ipage=0, istract=0, line, i=0, j, k, l, ixhold=0, iyhold=0;
@@ -68,7 +98,7 @@
 	    if (ipage==0) pause_game(1);
 	    ipage=1;
 	    snova(0,0);
-	    game.future[FSNOVA] = game.state.date + expran(0.5*game.intime);
+	    schedule(FSNOVA, expran(0.5*game.intime));
 	    if (game.state.galaxy[game.quadx][game.quady].supernova) return;
 	    break;
 	case FSPY: /* Check with spy to see if S.C. should tractor beam */
@@ -90,15 +120,15 @@
 	case FTBEAM: /* Tractor beam */
 	    if (line==FTBEAM) {
 		if (game.state.remcom == 0) {
-		    game.future[FTBEAM] = FOREVER;
+		    unschedule(FTBEAM);
 		    break;
 		}
 		i = Rand()*game.state.remcom+1.0;
 		yank = square(game.state.cx[i]-game.quadx) + square(game.state.cy[i]-game.quady);
 		if (istract || game.condit == IHDOCKED || yank == 0) {
 		    /* Drats! Have to reschedule */
-		    game.future[FTBEAM] = game.state.date + game.optime +
-			expran(1.5*game.intime/game.state.remcom);
+		    schedule(FTBEAM, 
+			     game.optime + expran(1.5*game.intime/game.state.remcom));
 		    break;
 		}
 	    }
@@ -161,18 +191,19 @@
 	    /* Adjust finish time to time of tractor beaming */
 	    fintim = game.state.date+game.optime;
 	    attack(0);
-	    if (game.state.remcom <= 0) game.future[FTBEAM] = FOREVER;
-	    else game.future[FTBEAM] = game.state.date+game.optime+expran(1.5*game.intime/game.state.remcom);
+	    if (game.state.remcom <= 0) unschedule(FTBEAM);
+	    else schedule(FTBEAM, game.optime+expran(1.5*game.intime/game.state.remcom));
 	    break;
 	case FSNAP: /* Snapshot of the universe (for time warp) */
 	    game.snapsht = game.state;
 	    game.state.snap = 1;
-	    game.future[FSNAP] = game.state.date + expran(0.5 * game.intime);
+	    schedule(FSNAP, expran(0.5 * game.intime));
 	    break;
 	case FBATTAK: /* Commander attacks starbase */
 	    if (game.state.remcom==0 || game.state.rembase==0) {
 		/* no can do */
-		game.future[FBATTAK] = game.future[FCDBAS] = FOREVER;
+		unschedule(FBATTAK);
+		unschedule(FCDBAS);
 		break;
 	    }
 	    i = 0;
@@ -188,16 +219,16 @@
 	    }
 	    if (j>game.state.rembase) {
 		/* no match found -- try later */
-		game.future[FBATTAK] = game.state.date + expran(0.3*game.intime);
-		game.future[FCDBAS] = FOREVER;
+		schedule(FBATTAK, expran(0.3*game.intime));
+		unschedule(FCDBAS);
 		break;
 	    }
 	    /* commander + starbase combination found -- launch attack */
 	    game.batx = game.state.baseqx[j];
 	    game.baty = game.state.baseqy[j];
-	    game.future[FCDBAS] = game.state.date+1.0+3.0*Rand();
+	    schedule(FCDBAS, 1.0+3.0*Rand());
 	    if (game.isatb) /* extra time if SC already attacking */
-		game.future[FCDBAS] += game.future[FSCDBAS]-game.state.date;
+		postpone(FCDBAS, scheduled(FSCDBAS)-game.state.date);
 	    game.future[FBATTAK] = game.future[FCDBAS] +expran(0.3*game.intime);
 	    game.iseenit = 0;
 	    if (game.damage[DRADIO] != 0.0 &&
@@ -210,7 +241,7 @@
 	    prout(cramlc(quadrant, game.batx, game.baty));
 	    prout(_("   reports that it is under attack and that it can"));
 	    proutn(_("   hold out only until stardate %d"),
-		   (int)game.future[FCDBAS]);
+		   (int)scheduled(FCDBAS));
 	    prout(".\"");
 	    if (game.resting) {
 		skip(1);
@@ -223,7 +254,7 @@
 	    }
 	    break;
 	case FSCDBAS: /* Supercommander destroys base */
-	    game.future[FSCDBAS] = FOREVER;
+	    unschedule(FSCDBAS);
 	    game.isatb = 2;
 	    if (!game.state.galaxy[game.state.isx][game.state.isy].starbase) 
 		break; /* WAS RETURN! */
@@ -233,7 +264,7 @@
 	    game.baty = game.state.isy;
 	case FCDBAS: /* Commander succeeds in destroying base */
 	    if (line==FCDBAS) {
-		game.future[FCDBAS] = FOREVER;
+		unschedule(FCDBAS);
 		/* find the lucky pair */
 		for_commanders(i)
 		    if (game.state.cx[i]==game.batx && game.state.cy[i]==game.baty) 
@@ -289,13 +320,13 @@
 	    }
 	    break;
 	case FSCMOVE: /* Supercommander moves */
-	    game.future[FSCMOVE] = game.state.date+0.2777;
+	    schedule(FSCMOVE, 0.2777);
 	    if (game.ientesc+istract==0 &&
 		game.isatb!=1 &&
 		(game.iscate!=1 || game.justin==1)) scom(&ipage);
 	    break;
 	case FDSPROB: /* Move deep space probe */
-	    game.future[FDSPROB] = game.state.date + 0.01;
+	    schedule(FDSPROB, 0.01);
 	    game.probex += game.probeinx;
 	    game.probey += game.probeiny;
 	    i = (int)(game.probex/QUADSIZE +0.05);
@@ -317,7 +348,7 @@
 			    proutn(_("is no longer transmitting"));
 			prout(".\"");
 		    }
-		    game.future[FDSPROB] = FOREVER;
+		    unschedule(FDSPROB);
 		    break;
 		}
 		if (game.damage[DRADIO]==0.0   || game.condit == IHDOCKED) {
@@ -342,7 +373,7 @@
 		game.state.galaxy[game.probecx][game.probecy].stars) {
 		/* lets blow the sucker! */
 		snova(1,0);
-		game.future[FDSPROB] = FOREVER;
+		unschedule(FDSPROB);
 		if (game.state.galaxy[game.quadx][game.quady].supernova) 
 		    return;
 	    }
@@ -350,7 +381,7 @@
 #ifdef EXPERIMENTAL
 	case FDISTR: /* inhabited system issues distress call */
 	    /* in BSD Trek this is a straight 1 stardate ahead */ 
-	    game.future[FDISTR] =  game.state.date + 1.0 + Rand();
+	    schedule(FDISTR, 1.0 + Rand());
 	    /* if we already have too many, throw this one away */
 	    if (game.ndistr >= MAXDISTR)
 		break;
@@ -801,7 +832,8 @@
 	/* did in the Supercommander! */
 	game.state.nscrem = game.state.isx = game.state.isy = game.isatb = game.iscate = 0;
 	iscdead = 1;
-	game.future[FSCMOVE] = game.future[FSCDBAS] = FOREVER;
+	unschedule(FSCMOVE);
+	unschedule(FSCDBAS);
     }
     if (game.state.remcom) {
 	int maxloop = game.state.remcom, l;
@@ -813,7 +845,7 @@
 		game.state.remcom--;
 		kldead--;
 		comdead++;
-		if (game.state.remcom==0) game.future[FTBEAM] = FOREVER;
+		if (game.state.remcom==0) unschedule(FTBEAM);
 		break;
 	    }
 	}

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-17 22:43:51 UTC (rev 582)
+++ trunk/src/moving.c	2006-09-17 23:55:46 UTC (rev 583)
@@ -27,11 +27,11 @@
     deltax /= bigger;
 
     /* If tractor beam is to occur, don't move full distance */
-    if (game.state.date+game.optime >= game.future[FTBEAM]) {
+    if (game.state.date+game.optime >= scheduled(FTBEAM)) {
 	trbeam = 1;
 	game.condit = IHRED;
-	game.dist = game.dist*(game.future[FTBEAM]-game.state.date)/game.optime + 0.1;
-	game.optime = game.future[FTBEAM] - game.state.date + 1e-5;
+	game.dist = game.dist*(scheduled(FTBEAM)-game.state.date)/game.optime + 0.1;
+	game.optime = scheduled(FTBEAM) - game.state.date + 1e-5;
     }
     /* Move within the quadrant */
     game.quad[game.sectx][game.secty] = IHDOT;
@@ -237,7 +237,7 @@
     game.torps = game.intorps;
     game.lsupres = game.inlsr;
     if (game.damage[DRADIO] == 0.0 &&
-	(game.future[FCDBAS] < FOREVER || game.isatb == 1) && game.iseenit == 0) {
+	(is_scheduled(FCDBAS) || game.isatb == 1) && game.iseenit == 0) {
 	/* get attack report from base */
 	prout("Lt. Uhura- \"Captain, an important message from the starbase:\"");
 	attakreport(0);
@@ -778,15 +778,17 @@
 	game.state = game.snapsht;
 	game.state.snap = 0;
 	if (game.state.remcom) {
-	    game.future[FTBEAM] = game.state.date + expran(game.intime/game.state.remcom);
-	    game.future[FBATTAK] = game.state.date + expran(0.3*game.intime);
+	    schedule(FTBEAM, expran(game.intime/game.state.remcom));
+	    schedule(FBATTAK, expran(0.3*game.intime));
 	}
-	game.future[FSNOVA] = game.state.date + expran(0.5*game.intime);
-	game.future[FSNAP] = game.state.date +expran(0.25*game.state.remtime); /* next snapshot will
-										  be sooner */
-	if (game.state.nscrem) game.future[FSCMOVE] = 0.2777;
+	schedule(FSNOVA, expran(0.5*game.intime));
+	/* next snapshot will be sooner */
+	schedule(FSNAP, expran(0.25*game.state.remtime));
+				
+	if (game.state.nscrem) schedule(FSCMOVE, 0.2777);
 	game.isatb = 0;
-	game.future[FCDBAS] = game.future[FSCDBAS] = FOREVER;
+	unschedule(FCDBAS);
+	unschedule(FSCDBAS);
 	game.batx = game.baty = 0;
 
 	/* Make sure Galileo is consistant -- Snapshot may have been taken
@@ -818,7 +820,7 @@
 	game.optime = -0.5*game.intime*log(Rand());
 	prout("You are traveling forward in time %d stardates.", (int)game.optime);
 	/* cheat to make sure no tractor beams occur during time warp */
-	game.future[FTBEAM] += game.optime;
+	postpone(FTBEAM, game.optime);
 	game.damage[DRADIO] += game.optime;
     }
     newqad(0);
@@ -845,7 +847,7 @@
 	prout("Engineer Scott- \"The probe launcher is damaged, Sir.\"");
 	return;
     }
-    if (game.future[FDSPROB] != FOREVER) {
+    if (is_scheduled(FDSPROB)) {
 	chew();
 	skip(1);
 	if (game.damage[DRADIO] != 0 && game.condit != IHDOCKED) {
@@ -892,7 +894,7 @@
     game.probey = game.quady*QUADSIZE + game.secty - 1;
     game.probecx = game.quadx;
     game.probecy = game.quady;
-    game.future[FDSPROB] = game.state.date + 0.01; // Time to move one sector
+    schedule(FDSPROB, 0.01); // Time to move one sector
     prout("Ensign Chekov-  \"The deep space probe is launched, Captain.\"");
     game.ididit = 1;
     return;

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-17 22:43:51 UTC (rev 582)
+++ trunk/src/planets.c	2006-09-17 23:55:46 UTC (rev 583)
@@ -11,15 +11,15 @@
     game.ididit = 1;
 #if 0
     /* Don't worry about this */
-    if (future[FTBEAM] <= game.state.date+game.optime && game.state.remcom != 0 && game.condit != IHDOCKED) {
+    if (scheduled(FTBEAM) <= game.state.date+game.optime && game.state.remcom != 0 && game.condit != IHDOCKED) {
 	/* We are about to be tractor beamed -- operation fails */
 	return 1;
     }
 #endif
-//	asave = future[FSNOVA];
-//	future[FSNOVA] = FOREVER; /* defer supernovas */
-    events();	/* Used to avoid if future[FSCMOVE] within time */
-//	future[FSNOVA] = asave;
+//	asave = scheduled(FSNOVA);
+//	unschedule(FSNOVA); /* defer supernovas */
+    events();	/* Used to avoid if FSCMOVE is scheduled within time */
+//	schedule(FSNOVA, asave-game.state.time);
     /*fails if game over, quadrant super-novas or we've moved to new quadrant*/
     if (game.alldone || game.state.galaxy[game.quadx][game.quady].supernova || game.justin != 0) return 1;
     return 0;

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-17 22:43:51 UTC (rev 582)
+++ trunk/src/reports.c	2006-09-17 23:55:46 UTC (rev 583)
@@ -6,23 +6,23 @@
 void attakreport(int curt) 
 {
     if (!curt) {
-	if (game.future[FCDBAS] < FOREVER) {
+	if (is_scheduled(FCDBAS)) {
 	    prout("Starbase in %s is currently under Commander attack.",
 		  cramlc(quadrant, game.batx, game.baty));
 	    prout("It can hold out until Stardate %d.", 
-		  (int)game.future[FCDBAS]);
+		  (int)scheduled(FCDBAS));
 	}
 	if (game.isatb == 1) {
 	    prout("Starbase in %s is under Super-commander attack.",
 		  cramlc(quadrant, game.state.isx, game.state.isy));
 	    prout("It can hold out until Stardate %d.", 
-		  (int)game.future[FSCDBAS]);
+		  (int)scheduled(FSCDBAS));
 	}
     } else {
-        if (game.future[FCDBAS] < FOREVER)
-	    proutn("Base in %i - %i attacked by C. Alive until %.1f", game.batx, game.baty, game.future[FCDBAS]);
+        if (is_scheduled(FCDBAS))
+	    proutn("Base in %i - %i attacked by C. Alive until %.1f", game.batx, game.baty, scheduled(FCDBAS));
         if (game.isatb == 1)
-	    proutn("Base in %i - %i attacked by S. Alive until %.1f", game.state.isx, game.state.isy, game.future[FSCDBAS]);
+	    proutn("Base in %i - %i attacked by S. Alive until %.1f", game.state.isx, game.state.isy, scheduled(FSCDBAS));
     }
     clreol();
 }
@@ -87,8 +87,8 @@
 	if (game.nprobes!=1) proutn("s");
 	prout(".");
     }
-    if ((game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED)&&
-	game.future[FDSPROB] != FOREVER) {
+    if ((game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED)
+		&& is_scheduled(FDSPROB)) {
 	if (game.isarmed) 
 	    proutn("An armed deep space probe is in");
 	else
@@ -527,8 +527,8 @@
 	if (twarp > 6.0)
 	    prout("You'll be taking risks at that speed, Captain");
 	if ((game.isatb==1 && game.state.isy == iy1 && game.state.isx == ix1 &&
-	     game.future[FSCDBAS]< ttime+game.state.date)||
-	    (game.future[FCDBAS]<ttime+game.state.date && game.baty==iy1 && game.baty == iy1))
+	     scheduled(FSCDBAS)< ttime+game.state.date)||
+	    (scheduled(FCDBAS)<ttime+game.state.date && game.baty==iy1 && game.batx == ix1))
 	    prout("The starbase there will be destroyed by then.");
 	proutn("New warp factor to try? ");
 	if (scan() == IHREAL) {

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-17 22:43:51 UTC (rev 582)
+++ trunk/src/setup.c	2006-09-17 23:55:46 UTC (rev 583)
@@ -240,20 +240,22 @@
 #endif /* EXPERIMENTAL */
 	}
     // Initialize times for extraneous events
-    game.future[FSNOVA] = game.state.date + expran(0.5 * game.intime);
-    game.future[FTBEAM] = game.state.date + expran(1.5 * (game.intime / game.state.remcom));
-    game.future[FSNAP] = game.state.date + 1.0 + Rand(); // Force an early snapshot
-    game.future[FBATTAK] = game.state.date + expran(0.3*game.intime);
-    game.future[FCDBAS] = FOREVER;
-    game.future[FSCMOVE] = game.state.nscrem ? game.state.date+0.2777 : FOREVER;
-    game.future[FSCDBAS] = FOREVER;
-    game.future[FDSPROB] = FOREVER;
+    schedule(FSNOVA, expran(0.5 * game.intime));
+    schedule(FTBEAM, expran(1.5 * (game.intime / game.state.remcom)));
+    schedule(FSNAP, 1.0 + Rand()); // Force an early snapshot
+    schedule(FBATTAK, expran(0.3*game.intime));
+    unschedule(FCDBAS);
+    if (game.state.nscrem)
+	schedule(FSCMOVE, 0.2777);
+    else
+	unschedule(FSCMOVE);
+    unschedule(FSCDBAS);
+    unschedule(FDSPROB);
 #ifdef EXPERIMENTAL
     if (game.options & OPTION_WORLDS)
-	/* in BSD-Trek, this is a fixed one stardate in the future */
-	game.future[FDISTR] = game.state.date + 1.0 + Rand();
-    game.future[FENSLV] = FOREVER;
-    game.future[FREPRO] = FOREVER;
+	schedule(FDISTR, expran(1.0 + game.intime));
+    unschedule(FENSLV);
+    unschedule(FREPRO);
 #endif /* EXPERIMENTAL */
     // Starchart is functional but we've never seen it
     game.lastchart = FOREVER;

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-17 22:43:51 UTC (rev 582)
+++ trunk/src/sst.c	2006-09-17 23:55:46 UTC (rev 583)
@@ -848,7 +848,7 @@
 	int i;
 	for (i = 1; i < NEVENTS; i++) {
 	    int key;
-	    if (game.future[i] == FOREVER) continue;
+	    if (!is_scheduled(i)) continue;
 	    switch (i) {
 	    case FSNOVA:  proutn("Supernova       "); break;
 	    case FTBEAM:  proutn("T Beam          "); break;
@@ -858,12 +858,12 @@
 	    case FSCMOVE: proutn("SC Move         "); break;
 	    case FSCDBAS: proutn("SC Base Destroy "); break;
 	    }
-	    proutn("%.2f", game.future[i]-game.state.date);
+	    proutn("%.2f", scheduled(i)-game.state.date);
 	    chew();
 	    proutn("  ?");
 	    key = scan();
 	    if (key == IHREAL) {
-		game.future[i] = game.state.date + aaitem;
+		schedule(i, aaitem);
 	    }
 	}
 	chew();

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-17 22:43:51 UTC (rev 582)
+++ trunk/src/sst.h	2006-09-17 23:55:46 UTC (rev 583)
@@ -164,6 +164,16 @@
 #define NEVENTS (12)
 #endif /* EXPERIMENTAL */
 
+/*
+ * abstract out the event handling -- underlying data structures will change
+ * when we implement stateful events
+ */
+extern void unschedule(int);
+extern int is_scheduled(int);
+extern void schedule(int, double);
+extern void postpone(int, double);
+extern double scheduled(int);
+
 #ifdef EXPERIMENTAL
 #define	MAXDISTR	5	/* maximum concurrent distress calls */
 #endif /* EXPERIMENTAL */



From stsp at mail.berlios.de  Sat Sep 16 20:47:57 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Sat, 16 Sep 2006 20:47:57 +0200
Subject: [Sst-commit-watch] r574 - in trunk: po src
Message-ID: <200609161847.k8GIlvhJ017587@sheep.berlios.de>

Author: stsp
Date: 2006-09-16 20:47:55 +0200 (Sat, 16 Sep 2006)
New Revision: 574

Added:
   trunk/po/LINGUAS
   trunk/po/ru.po
Modified:
   trunk/po/POTFILES.in
   trunk/src/Makefile.am
   trunk/src/Makefile.in
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/finish.c
   trunk/src/io.c
   trunk/src/setup.c
   trunk/src/sst.h
Log:
gettextize and some rough translations

Added: trunk/po/LINGUAS
===================================================================
--- trunk/po/LINGUAS	2006-09-15 22:47:09 UTC (rev 573)
+++ trunk/po/LINGUAS	2006-09-16 18:47:55 UTC (rev 574)
@@ -0,0 +1 @@
+ru
\ No newline at end of file

Modified: trunk/po/POTFILES.in
===================================================================
--- trunk/po/POTFILES.in	2006-09-15 22:47:09 UTC (rev 573)
+++ trunk/po/POTFILES.in	2006-09-16 18:47:55 UTC (rev 574)
@@ -1 +1,5 @@
 # List of source files which contain translatable strings.
+src/ai.c
+src/battle.c
+src/events.c
+src/finish.c

Added: trunk/po/ru.po
===================================================================
--- trunk/po/ru.po	2006-09-15 22:47:09 UTC (rev 573)
+++ trunk/po/ru.po	2006-09-16 18:47:55 UTC (rev 574)
@@ -0,0 +1,1301 @@
+# Russian translations for sst package
+# ?????????? ???????? ??? ?????? sst.
+# Copyright (C) 2006 Free Software Foundation, Inc.
+# This file is distributed under the same license as the sst package.
+# Stas Sergeev <stsp at aknet.ru>, 2006.
+#
+# ???????? ???? ??? ?? ???. ? ???? ???????????, ? ?? ??????????. :)
+#
+msgid ""
+msgstr ""
+"Project-Id-Version: sst 2.0\n"
+"Report-Msgid-Bugs-To: stsp\n"
+"POT-Creation-Date: 2006-09-15 18:55+0400\n"
+"PO-Revision-Date: 2006-09-15 11:01+0400\n"
+"Last-Translator: Stas Sergeev <stsp at aknet.ru>\n"
+"Language-Team: Russian <ru at li.org>\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%"
+"10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
+
+#: src/ai.c:30
+#, c-format
+msgid " escapes to %s (and regains strength)."
+msgstr " ??????? ? %s (? ??????????????? ???????)"
+
+#: src/ai.c:258
+#, c-format
+msgid " from %s"
+msgstr " ?? %s"
+
+#: src/ai.c:259
+msgid " advances to "
+msgstr " ????????? ? "
+
+#: src/ai.c:260
+msgid " retreats to "
+msgstr " ????????? ? "
+
+#: src/ai.c:358 src/ai.c:545
+msgid "Lt. Uhura-  \"Captain, Starfleet Intelligence reports"
+msgstr "??. ?????- \"???????, ???????? ????????? ????? ???????????"
+
+#: src/ai.c:359
+msgid "   a planet in "
+msgstr "   ??????? ? "
+
+#: src/ai.c:361
+msgid " has been destroyed"
+msgstr " ??????????"
+
+#: src/ai.c:362
+msgid "   by the Super-commander.\""
+msgstr "   ????-?????."
+
+#: src/ai.c:520 src/events.c:209
+msgid "Lt. Uhura-  \"Captain, the starbase in "
+msgstr "??. ?????- \"???????, ???? ? "
+
+#: src/ai.c:523
+msgid "   reports that it is under attack from the Klingon Super-commander."
+msgstr "   ????????, ??? ??? ????????? ????-????? ?????????."
+
+#: src/ai.c:524
+#, c-format
+msgid "   It can survive until stardate %d.\""
+msgstr "   ??? ?????? ???????????? ?? ???? %d.\""
+
+#: src/ai.c:527 src/events.c:217
+msgid "Mr. Spock-  \"Captain, shall we cancel the rest period?\""
+msgstr "?????? ????- \"???????, ??? ???????? ??????\""
+
+#: src/ai.c:546
+msgid "   the Super-commander is in "
+msgstr "   ????-??? ????????? ? "
+
+#: src/ai.c:611
+msgid " completes web."
+msgstr " ??????? ????."
+
+#: src/battle.c:19 src/battle.c:35
+msgid "Shields damaged and down."
+msgstr "?????? ??????? ? ?????????."
+
+#: src/battle.c:29
+msgid "Do you wish to change shield energy? "
+msgstr "?? ?????? ???????? ??????? ??????? "
+
+#: src/battle.c:31 src/battle.c:87
+msgid "Energy to transfer to shields- "
+msgstr "??????? ??? ????????? ????- "
+
+#: src/battle.c:39
+msgid "Shields are up. Do you want them down? "
+msgstr "?????? ????????. ?? ?????? ?? ?????????? "
+
+#: src/battle.c:47
+msgid "Shields are down. Do you want them up? "
+msgstr "?????? ?????????. ?? ?????? ?? ????????? "
+
+#: src/battle.c:59
+msgid "Shields already up."
+msgstr "?????? ? ??? ??? ????????."
+
+#: src/battle.c:65 src/battle.c:1170
+msgid "Shields raised."
+msgstr "?????? ???????."
+
+#: src/battle.c:68
+msgid "Shields raising uses up last of energy."
+msgstr "???????? ?????? ????????? ???? ??????? ???????."
+
+#: src/battle.c:76
+msgid "Shields already down."
+msgstr "?????? ? ??? ??? ?????????."
+
+#: src/battle.c:81 src/battle.c:851
+msgid "Shields lowered."
+msgstr "?????? ???????."
+
+#: src/battle.c:92
+msgid "Insufficient ship energy."
+msgstr "??????? ??????? ????????????."
+
+#: src/battle.c:97
+msgid "Shield energy maximized."
+msgstr "??????? ?????? ???????? ?????????."
+
+#: src/battle.c:99
+msgid "Excess energy requested returned to ship energy"
+msgstr "?????? ??????? ????????? ???????"
+
+#: src/battle.c:108
+msgid "Engineering to bridge--"
+msgstr "?????????? ????? ???????--"
+
+#: src/battle.c:109
+msgid "  Scott here. Power circuit problem, Captain."
+msgstr "  ??? ?????. ??? ???????? ? ?????????????? ????????, ???????."
+
+#: src/battle.c:110
+msgid "  I can't drain the shields."
+msgstr "  ? ?? ???? ???????? ??????? ?? ???????? ?????."
+
+#: src/battle.c:115
+msgid "All shield energy transferred to ship."
+msgstr "??? ??????? ?????? ???????????? ?? ???????."
+
+#: src/battle.c:120
+msgid "Scotty- \""
+msgstr "??????- \""
+
+#: src/battle.c:122
+msgid "Transferring energy to shields.\""
+msgstr "???????? ??????? ?? ??????.\""
+
+#: src/battle.c:124
+msgid "Draining energy from shields.\""
+msgstr "???????? ??????? ?? ??????.\""
+
+#: src/battle.c:137 src/battle.c:855 src/events.c:667
+msgid "***RED ALERT!  RED ALERT!"
+msgstr "***???????!  ???????!"
+
+#: src/battle.c:139
+msgid "***COLLISION IMMINENT."
+msgstr "***????????? ????????????."
+
+#: src/battle.c:150
+msgid " rammed by "
+msgstr " ?????????? "
+
+#: src/battle.c:150
+msgid " rams "
+msgstr " ?????????? "
+
+#: src/battle.c:152
+msgid " (original position)"
+msgstr " (?????????????? ?????????)"
+
+#: src/battle.c:157
+msgid " heavily damaged."
+msgstr " ???????? ?????????."
+
+#: src/battle.c:159
+#, c-format
+msgid "***Sickbay reports %d casualties"
+msgstr "***?? ???????? ??????????? ? %d ????????????"
+
+#: src/battle.c:213
+msgid "Torpedo hits "
+msgstr "??????? ?????? ? ????: "
+
+#: src/battle.c:249
+msgid " uses anti-photon device;"
+msgstr " ?????????? ??????????????? ?????????;"
+
+#: src/battle.c:250
+msgid "   torpedo neutralized."
+msgstr "   ??????? ??????????????."
+
+#: src/battle.c:279 src/battle.c:289
+msgid " damaged but not destroyed."
+msgstr " ?????????, ?? ?? ?????????."
+
+#: src/battle.c:283
+msgid " buffeted into black hole."
+msgstr " ??????? ? ?????? ????."
+
+#: src/battle.c:292
+msgid " damaged--"
+msgstr " ?????????--"
+
+#: src/battle.c:299
+msgid "***STARBASE DESTROYED.."
+msgstr "***???? ??????????.."
+
+#: src/battle.c:317 src/battle.c:654 src/events.c:472 src/events.c:493
+msgid " destroyed."
+msgstr " ?????????."
+
+#: src/battle.c:335
+msgid " unaffected by photon blast."
+msgstr " ?? ????????? ???????? ???????."
+
+#: src/battle.c:340
+msgid "AAAAIIIIEEEEEEEEAAAAAAAAUUUUUGGGGGHHHHHHHHHHHH!!!"
+msgstr "?????????????????????????????????????????????????????!!!"
+
+#: src/battle.c:342
+msgid "    HACK!     HACK!    HACK!        *CHOKE!*  "
+msgstr ""
+
+#: src/battle.c:344
+msgid "Mr. Spock-"
+msgstr "?????? ????-"
+
+#: src/battle.c:345
+msgid "  \"Fascinating!\""
+msgstr "  \"??????????!\""
+
+#: src/battle.c:361
+msgid " swallows torpedo."
+msgstr " ????????? ???????."
+
+#: src/battle.c:365
+msgid "***Torpedo absorbed by Tholian web."
+msgstr "***?????????? ???? ????????? ???????."
+
+#: src/battle.c:382
+msgid " survives photon blast."
+msgstr " ???????? ???????? ?????."
+
+#: src/battle.c:385
+msgid " disappears."
+msgstr " ?????."
+
+#: src/battle.c:410
+#, c-format
+msgid " displaced by blast to %s "
+msgstr " ????????? ??????? ?? %s "
+
+#: src/battle.c:417
+msgid "Torpedo missed."
+msgstr "??????? ?????????."
+
+#: src/battle.c:430
+msgid "***CRITICAL HIT--"
+msgstr "***??????????? ????--"
+
+#: src/battle.c:446
+msgid " and "
+msgstr " ? "
+
+#: src/battle.c:450
+msgid " damaged."
+msgstr " ?????????."
+
+#: src/battle.c:452
+msgid "***Shields knocked down."
+msgstr "***?????? ?????."
+
+#: src/battle.c:510
+msgid "***TORPEDO INCOMING"
+msgstr "***??????? ????????????"
+
+#: src/battle.c:512
+msgid " From "
+msgstr " ?? "
+
+#: src/battle.c:544
+#, c-format
+msgid "%d unit hit"
+msgstr "???? ?? %d ??????"
+
+#: src/battle.c:546
+msgid " on the "
+msgstr " ?? "
+
+#: src/battle.c:550
+msgid " from "
+msgstr " ?? "
+
+#: src/battle.c:568
+msgid "***Enemies decide against attacking your ship."
+msgstr "***????? ?????? ?? ????????? ??? ???????."
+
+#: src/battle.c:573
+msgid "Enemy attack reduces shield strength to "
+msgstr "????????? ????? ????????? ???? ?????? ?? "
+
+#: src/battle.c:578
+#, c-format
+msgid "Energy left %2d    shields "
+msgstr "??????? ???????: %2d    ?????? "
+
+#: src/battle.c:579
+msgid "up "
+msgstr "???????? "
+
+#: src/battle.c:580
+msgid "down "
+msgstr "????????? "
+
+#: src/battle.c:581
+msgid "damaged, "
+msgstr "???????, "
+
+#: src/battle.c:583
+#, c-format
+msgid "%d%%,   torpedoes left %d"
+msgstr "%d%%,   ???????? %d ??????"
+
+#: src/battle.c:589
+#, c-format
+msgid "Mc Coy-  \"Sickbay to bridge.  We suffered %d casualties"
+msgstr "??????- \"??????? ???????.  ? ??? ????????? %d ????????????"
+
+#: src/battle.c:590
+msgid "   in that last attack.\""
+msgstr "   ?? ????????? ?????.\""
+
+#: src/battle.c:694
+msgid "Spock-  \"Bridge to sickbay.  Dr. McCoy,"
+msgstr "????- \"?????? ????????.  ?????? ??????,"
+
+#: src/battle.c:695
+msgid "  I recommend an immediate review of"
+msgstr "  ?????????? ?????????? ?????????"
+
+#: src/battle.c:696
+msgid "  the Captain's psychological profile.\""
+msgstr "  ??????????????? ????????? ????????.\""
+
+#: src/battle.c:713
+msgid "Photon tubes damaged."
+msgstr "???????? ????? ???????."
+
+#: src/battle.c:718
+msgid "No torpedoes left."
+msgstr "?????? ?????? ?? ????????."
+
+#: src/battle.c:729
+#, c-format
+msgid "%d torpedoes left."
+msgstr "???????? %d ??????."
+
+#: src/battle.c:730
+msgid "Number of torpedoes to fire- "
+msgstr "????? ?????? ?? ???????- "
+
+#: src/battle.c:741
+msgid "Maximum of 3 torpedoes per burst."
+msgstr "???????? 3 ??????? ?? ????."
+
+#: src/battle.c:782
+#, c-format
+msgid "Target sector for torpedo number %d- "
+msgstr "?????? ?????????? ??? ??????? ????? %d- "
+
+#: src/battle.c:809
+#, c-format
+msgid "***TORPEDO NUMBER %d MISFIRES"
+msgstr "***??????? ????? %d ?? ?????"
+
+#: src/battle.c:811
+msgid "***TORPEDO MISFIRES."
+msgstr "***??????? ?? ?????."
+
+#: src/battle.c:814
+msgid "  Remainder of burst aborted."
+msgstr "  ??????? ????? ???????."
+
+#: src/battle.c:817
+msgid "***Photon tubes damaged by misfire."
+msgstr "***???????? ????? ????????? ??? ??????."
+
+#: src/battle.c:838
+msgid "Weapons officer Sulu-  \"Phasers overheated, sir.\""
+msgstr "???????? ????- \"?????? ??????????, ???.\""
+
+#: src/battle.c:861
+msgid "Sulu-  \"Captain! Shield malf***********************\""
+msgstr "????- \"???????! ?????? ?? ????*********************\""
+
+#: src/battle.c:867
+msgid "Sulu-  \"Captain! Shield malfunction! Phaser fire contained!\""
+msgstr ""
+"????- \"???????! ?????? ?? ?????????! ??????? ??????? ????????? ??????!\""
+
+#: src/battle.c:869
+msgid "Lt. Uhura-  \"Sir, all decks reporting damage.\""
+msgstr "??. ?????- \"???, ??? ?????? ???????? ? ???????????.\""
+
+#: src/battle.c:875
+msgid "McCoy to bridge- \"Severe radiation burns, Jim."
+msgstr "?????? ???????- \"?????????? ???????????? ?????, ????."
+
+#: src/battle.c:876
+#, c-format
+msgid "  %d casualties so far.\""
+msgstr "  ????-??? %d ????????????.\""
+
+#: src/battle.c:880
+msgid "Phaser energy dispersed by shields."
+msgstr "??????? ??????? ???????? ???????? ?????."
+
+#: src/battle.c:881
+msgid "Enemy unaffected."
+msgstr "???? ?? ?????????."
+
+#: src/battle.c:899
+msgid "Phasers can't be fired through base shields."
+msgstr "?????? ?? ????? ???????? ????? ?????? ????."
+
+#: src/battle.c:904
+msgid "Phaser control damaged."
+msgstr "?????????? ???????? ?? ????????."
+
+#: src/battle.c:910
+msgid "High speed shield control damaged."
+msgstr "???????????????? ?????????? ??????? ?? ????????."
+
+#: src/battle.c:915
+msgid "Insufficient energy to activate high-speed shield control."
+msgstr "???????????? ??????? ??? ????????????????? ?????????? ???????."
+
+#: src/battle.c:919
+msgid "Weapons Officer Sulu-  \"High-speed shield control enabled, sir.\""
+msgstr "???????? ????- \"???????????????? ?????????? ??????? ????????, ???.\""
+
+#: src/battle.c:929
+msgid "There is no enemy present to select."
+msgstr "????? ??? ??????."
+
+#: src/battle.c:945 src/battle.c:960 src/battle.c:971
+msgid "Energy will be expended into space."
+msgstr "??????? ????? ? ???????."
+
+#: src/battle.c:977
+msgid "Manual or automatic? "
+msgstr "?????? ??? ???????????????"
+
+#: src/battle.c:988
+#, c-format
+msgid "Phasers locked on target. Energy available: %.2f"
+msgstr "?????? ???????? ?? ????. ????????? ???????: %.2f"
+
+#: src/battle.c:998
+#, c-format
+msgid "(%d) units required. "
+msgstr ""
+
+#: src/battle.c:1000
+msgid "Units to fire= "
+msgstr "??????? ?? ???????= "
+
+#: src/battle.c:1005 src/battle.c:1076
+#, c-format
+msgid "Energy available= %.2f"
+msgstr "????????? ???????= %.2f"
+
+#: src/battle.c:1046
+msgid "*** Tholian web absorbs "
+msgstr "*** ?????????? ???? ????????? "
+
+#: src/battle.c:1047
+msgid "excess "
+msgstr "?????????? "
+
+#: src/battle.c:1048
+msgid "phaser energy."
+msgstr "??????? ???????."
+
+#: src/battle.c:1051
+#, c-format
+msgid "%d expended on empty space."
+msgstr "%d ???? ? ???????."
+
+#: src/battle.c:1060
+msgid "Battle comuter damaged, manual file only."
+msgstr "???????? ????????? ??????, ??????????? ?????? ??????????."
+
+#: src/battle.c:1063 src/finish.c:13
+msgid "---WORKING---"
+msgstr "---??????---"
+
+#: src/battle.c:1065
+msgid "Short-range-sensors-damaged"
+msgstr "???????-????????-??????-???????"
+
+#: src/battle.c:1066
+msgid "Insufficient-data-for-automatic-phaser-fire"
+msgstr "????????????-??????-???-???????????????-?????????-???????"
+
+#: src/battle.c:1067
+msgid "Manual-fire-must-be-used"
+msgstr "???????????-??????-?????????"
+
+#: src/battle.c:1085
+msgid " can't be located without short range scan."
+msgstr " ?? ????? ???? ????????? ??? ???????? ????????????."
+
+#: src/battle.c:1102
+msgid "units to fire at "
+msgstr "??????? ?? ??????? ?? "
+
+#: src/battle.c:1132
+msgid "Available energy exceeded -- try again."
+msgstr "????????? ??????? ?? ??????? -- ?????????? ?????."
+
+#: src/battle.c:1164
+msgid "Sulu-  \"Sir, the high-speed shield control has malfunctioned . . ."
+msgstr "????- \"???, ???????????????? ?????????? ??????? ?? ????????? . . ."
+
+#: src/battle.c:1165
+msgid "         CLICK   CLICK   POP  . . ."
+msgstr "         ????   ????   ????  . . ."
+
+#: src/battle.c:1166
+msgid " No response, sir!"
+msgstr " ??? ??????, ???!"
+
+#: src/battle.c:1199
+#, c-format
+msgid "%d unit hit on "
+msgstr "%d ?????? ??????? ??????? ?? "
+
+#: src/battle.c:1202
+msgid "Very small hit on "
+msgstr "????? ?????? ???? ?? "
+
+#: src/battle.c:1216
+msgid "***Mr. Spock-  \"Captain, the vessel at "
+msgstr "***?????? ????- \"???????, ??????? ?? "
+
+#: src/battle.c:1218
+msgid "   has just lost its firepower.\""
+msgstr "   ??????? ??????????????.\""
+
+#: src/events.c:53
+msgid "Lt. Uhura- \"Captain, the sub-space radio is working and"
+msgstr "??. ?????- \"???????, ??????????? ????? ???????? ?"
+
+#: src/events.c:54
+msgid "   surveillance reports are coming in."
+msgstr "   ????????? ?????????? ?? ?????? ??????????."
+
+#: src/events.c:61
+msgid "   The star chart is now up to date.\""
+msgstr "   ???????? ????? ?????????."
+
+#: src/events.c:114
+msgid " caught in long range tractor beam--"
+msgstr " ?????? ???????????? ????????? ?????--"
+
+#: src/events.c:126
+msgid "Galileo, left on the planet surface, is captured"
+msgstr "???????, ?????????? ?? ???????, ???????"
+
+#: src/events.c:127
+msgid "by aliens and made into a flying McDonald's."
+msgstr "?????????????? ? ????????? ? ??????????? ???????????."
+
+#: src/events.c:132
+msgid "Galileo, left on the planet surface, is well hidden."
+msgstr "???????, ?????????? ?? ???????, ?????? ???????."
+
+#: src/events.c:145
+msgid " is pulled to "
+msgstr " ??????? ? "
+
+#: src/events.c:150
+msgid "(Remainder of rest/repair period cancelled.)"
+msgstr "(??????? ??????? ??????/??????? ???????.)"
+
+#: src/events.c:158
+msgid "(Shields not currently useable.)"
+msgstr "(?????? ? ????????? ?????????.)"
+
+#: src/events.c:211
+msgid "   reports that it is under attack and that it can"
+msgstr "   ????????, ??? ??? ????????? ? ??????"
+
+#: src/events.c:212
+#, c-format
+msgid "   hold out only until stardate %d"
+msgstr "   ???????????? ?? ???? %d.\""
+
+#: src/events.c:257
+msgid "Spock-  \"Captain, I believe the starbase has been destroyed.\""
+msgstr "????- \"???????, ? ????????, ??? ???? ??????????.\""
+
+#: src/events.c:265
+msgid "Lt. Uhura-  \"Captain, Starfleet Command reports that"
+msgstr "??. ?????- \"???????, ???? ????????? ????? ????????"
+
+#: src/events.c:266
+msgid "   the starbase in "
+msgstr "   ???? ? "
+
+#: src/events.c:268
+msgid " has been destroyed by"
+msgstr " ??????????"
+
+#: src/events.c:269
+msgid "the Klingon Super-Commander"
+msgstr "????-????? ?????????"
+
+#: src/events.c:270
+msgid "a Klingon Commander"
+msgstr "?????????? ?????????"
+
+#: src/events.c:313
+msgid "Lt. Uhura-  \"The deep space probe "
+msgstr "??. ?????- \"???????????? ??????????? ?????? "
+
+#: src/events.c:315
+msgid "has left the galaxy"
+msgstr "???????? ?????????"
+
+#: src/events.c:317
+msgid "is no longer transmitting"
+msgstr "?????? ?? ????????"
+
+#: src/events.c:327
+msgid "Lt. Uhura-  \"The deep space probe is now in "
+msgstr "??. ?????- \"???????????? ??????????? ?????? ?????? ? "
+
+#: src/events.c:364
+msgid "How long? "
+msgstr "????? ????? "
+
+#: src/events.c:374
+msgid "Are you sure? "
+msgstr "?? ???????? "
+
+#: src/events.c:384
+#, c-format
+msgid "%d stardates left."
+msgstr "???????? %d ????."
+
+#: src/events.c:426 src/events.c:465
+msgid " novas."
+msgstr " ??????????."
+
+#: src/events.c:498
+msgid "***Starship buffeted by nova."
+msgstr "***????????? ????????? ??????? ??????."
+
+#: src/events.c:506
+msgid "***Shields knocked out."
+msgstr "***?????? ???????."
+
+#: src/events.c:536
+msgid " damaged"
+msgstr " ?????????"
+
+#: src/events.c:544
+msgid ", blasted into "
+msgstr ", ?????????? ? "
+
+#: src/events.c:555
+msgid ", buffeted to "
+msgstr " ??????? ? ?????? ????."
+
+#: src/events.c:584
+msgid "Force of nova displaces starship."
+msgstr "????? ?????? ??????? ?????????."
+
+#: src/events.c:641
+#, c-format
+msgid "Message from Starfleet Command       Stardate %.2f"
+msgstr "????????? ?? ????? ????????? ?????       ???? %.2f"
+
+#: src/events.c:642
+#, c-format
+msgid "     Supernova in %s; caution advised."
+msgstr "     ????? ?????????? ? %s; ?????????? ????????????."
+
+#: src/events.c:669
+msgid "***Incipient supernova detected at "
+msgstr "***???????????????? ????????? ?????????? ? "
+
+#: src/events.c:673
+msgid "Emergency override attempts t"
+msgstr "????????? ???????? ?"
+
+#: src/events.c:744
+msgid "Lucky you!"
+msgstr "???????!"
+
+#: src/events.c:745
+#, c-format
+msgid "A supernova in %s has just destroyed the last Klingons."
+msgstr "?????????? ? %s ??? ??? ?????????? ????????? ?????????."
+
+#: src/finish.c:10
+msgid "Computer damaged; cannot execute destruct sequence."
+msgstr "????????? ??????; ?????????? ????????? ????????? ???????????????."
+
+#: src/finish.c:14
+msgid "SELF-DESTRUCT-SEQUENCE-ACTIVATED"
+msgstr "?????????-???????????????-????????"
+
+#: src/finish.c:21
+msgid "ENTER-CORRECT-PASSWORD-TO-CONTINUE-"
+msgstr "???????-??????-???-???????????-"
+
+#: src/finish.c:23
+msgid "SELF-DESTRUCT-SEQUENCE-OTHERWISE-"
+msgstr "???????????????-?-?????-"
+
+#: src/finish.c:25
+msgid "SELF-DESTRUCT-SEQUENCE-WILL-BE-ABORTED"
+msgstr "???????????????-?????-????????"
+
+#: src/finish.c:30
+msgid "PASSWORD-REJECTED;"
+msgstr "??????-??-??????"
+
+#: src/finish.c:32
+msgid "CONTINUITY-EFFECTED"
+msgstr "??????????-????"
+
+#: src/finish.c:36
+msgid "PASSWORD-ACCEPTED"
+msgstr "??????-??????"
+
+#: src/finish.c:43
+msgid "GOODBYE-CRUEL-WORLD"
+msgstr "??????-????????-???"
+
+#: src/finish.c:53
+msgid "********* Entropy of "
+msgstr "********* ???????? ??????? "
+
+#: src/finish.c:55
+msgid " maximized *********"
+msgstr " ???????? *********"
+
+#: src/finish.c:77
+#, c-format
+msgid "It is stardate %.1f."
+msgstr "??????? %.1f ?????."
+
+#: src/finish.c:82
+#, c-format
+msgid "The remaining %d Romulans surrender to Starfleet Command."
+msgstr "?????????? %d ??????? ??????? ????????? ?????."
+
+#: src/finish.c:85
+msgid "You have smashed the Klingon invasion fleet and saved"
+msgstr "?? ????????? ???? ????????????? ??????????? ? ??????"
+
+#: src/finish.c:86
+msgid "the Federation."
+msgstr "?????????."
+
+#: src/finish.c:100
+msgid "In fact, you have done so well that Starfleet Command"
+msgstr "?? ?????? ??????, ?? ??????????? ??? ?????, ??? ???? ????????? ?????"
+
+#: src/finish.c:103
+msgid "promotes you one step in rank from \"Novice\" to \"Fair\"."
+msgstr "???????? ??? ???? ?? ??????? ?? ??????????."
+
+#: src/finish.c:106
+msgid "promotes you one step in rank from \"Fair\" to \"Good\"."
+msgstr "???????? ??? ???? ?? ?????????? ?? ???????."
+
+#: src/finish.c:109
+msgid "promotes you one step in rank from \"Good\" to \"Expert\"."
+msgstr "???????? ??? ???? ?? ??????? ?? ???????????."
+
+#: src/finish.c:112
+msgid "promotes you to Commodore Emeritus."
+msgstr "???????? ??? ?? ????????? ?????????? ????????."
+
+#: src/finish.c:114
+msgid "Now that you think you're really good, try playing"
+msgstr "??????, ????? ?? ???????? ???? ??????? ???????, ??????????? ???????"
+
+#: src/finish.c:115
+msgid "the \"Emeritus\" game. It will splatter your ego."
+msgstr "?? \"Emeritus\". ??? ??????? ??? ???."
+
+#: src/finish.c:119
+msgid "Computer-  "
+msgstr "?????????-  "
+
+#: src/finish.c:120
+msgid "ERROR-ERROR-ERROR-ERROR"
+msgstr "????-????-????-??????"
+
+#: src/finish.c:122
+msgid "  YOUR-SKILL-HAS-EXCEEDED-THE-CAPACITY-OF-THIS-PROGRAM"
+msgstr "  ????-??????????-????????????-????-?????????"
+
+#: src/finish.c:124 src/finish.c:126 src/finish.c:128
+msgid "  THIS-PROGRAM-MUST-SURVIVE"
+msgstr ""
+
+#: src/finish.c:130
+msgid "  THIS-PROGRAM-MUST?- MUST ? - SUR? ? -?  VI"
+msgstr ""
+
+#: src/finish.c:132
+msgid "Now you can retire and write your own Star Trek game!"
+msgstr "?????? ?? ?????? ???? ?? ?????? ? ???????? ???? ???? Star Trek!"
+
+#: src/finish.c:142
+msgid "You cannot get a citation, so..."
+msgstr "??? ?? ???????? ???????, ??? ???..."
+
+#: src/finish.c:144
+msgid "Do you want your Commodore Emeritus Citation printed? "
+msgstr "?????? ??????????? ???? ??????? ?????????? ????????? "
+
+#: src/finish.c:154 src/finish.c:167
+msgid "LIVE LONG AND PROSPER."
+msgstr "?????? ????? ? ?????????."
+
+#: src/finish.c:160
+msgid "Your time has run out and the Federation has been"
+msgstr "???? ????? ??????? ? ????????? ????"
+
+#: src/finish.c:161
+msgid "conquered.  Your starship is now Klingon property,"
+msgstr "?????????.  ??? ????????? ???? ?????????????? ?????????,"
+
+#: src/finish.c:162
+msgid "and you are put on trial as a war criminal.  On the"
+msgstr "? ?? ?????? ?? ?????? ?????????? ??? ??????? ??????????.  ??????????"
+
+#: src/finish.c:163
+msgid "basis of your record, you are "
+msgstr "????????? ????, ??? "
+
+#: src/finish.c:165
+msgid "acquitted."
+msgstr "??????????."
+
+#: src/finish.c:170
+msgid "found guilty and"
+msgstr "???????? ???????? ?"
+
+#: src/finish.c:171
+msgid "sentenced to death by slow torture."
+msgstr "??????????? ? ?????? ?? ????????? ????."
+
+#: src/finish.c:177
+msgid "Your life support reserves have run out, and"
+msgstr "??????? ???????????????? ??????? ?"
+
+#: src/finish.c:178
+msgid "you die of thirst, starvation, and asphyxiation."
+msgstr "?? ??????? ?? ?????, ?????? ? ??????."
+
+#: src/finish.c:179 src/finish.c:184 src/finish.c:279
+msgid "Your starship is a derelict in space."
+msgstr "??? ????????? ???? ??????????? ???????."
+
+#: src/finish.c:182
+msgid "Your energy supply is exhausted."
+msgstr "????????? ??????? ???????."
+
+#: src/finish.c:187 src/finish.c:206 src/finish.c:225
+msgid "The "
+msgstr " "
+
+#: src/finish.c:189
+msgid "has been destroyed in battle."
+msgstr " ??? ????????? ? ???."
+
+#: src/finish.c:191
+msgid "Dulce et decorum est pro patria mori."
+msgstr ""
+
+#: src/finish.c:194
+msgid "You have made three attempts to cross the negative energy"
+msgstr "?? ??? ???? ???????? ???????? ?????????? ??????????????"
+
+#: src/finish.c:195
+msgid "barrier which surrounds the galaxy."
+msgstr "??????, ?????????? ?????????."
+
+#: src/finish.c:197
+msgid "Your navigation is abominable."
+msgstr "?? ?? ?????? ????????? ????????."
+
+#: src/finish.c:201
+msgid "Your starship has been destroyed by a nova."
+msgstr "??? ????????? ????????? ??????? ??????."
+
+#: src/finish.c:202 src/finish.c:246
+msgid "That was a great shot."
+msgstr "??? ??? ???????? ???????."
+
+#: src/finish.c:208
+msgid " has been fried by a supernova."
+msgstr " ??? ???????? ??????? ??????????."
+
+#: src/finish.c:209
+msgid "...Not even cinders remain..."
+msgstr "...? ??????? ????? ?? ????????..."
+
+#: src/finish.c:212
+msgid "You have been captured by the Klingons. If you still"
+msgstr "??? ????????? ????????. ???? ? ???"
+
+#: src/finish.c:213
+msgid "had a starbase to be returned to, you would have been"
+msgstr "???? ?? ????, ??? ?? ?????"
+
+#: src/finish.c:214
+msgid "repatriated and given another chance. Since you have"
+msgstr "?????? ? ???? ??? ????. ? ??? -"
+
+#: src/finish.c:215
+msgid "no starbases, you will be mercilessly tortured to death."
+msgstr "??? ??????????? ???????? ? ??????."
+
+#: src/finish.c:218
+msgid "Your starship is now an expanding cloud of subatomic particles"
+msgstr "??? ????????? ???? ??????? ?????????? ??????"
+
+#: src/finish.c:221
+msgid "Starbase was unable to re-materialize your starship."
+msgstr "???? ?? ?????? ??????????????? ??? ?????????."
+
+#: src/finish.c:222
+msgid "Sic transit gloria muntdi"
+msgstr ""
+
+#: src/finish.c:227
+msgid " has been cremated by its own phasers."
+msgstr " ?????? ???????????? ????????."
+
+#: src/finish.c:230
+msgid "You and your landing party have been"
+msgstr "?? ? ??? ?????"
+
+#: src/finish.c:231
+msgid "converted to energy, disipating through space."
+msgstr "???????????? ? ???????, ???????????? ? ????????????."
+
+#: src/finish.c:234
+msgid "You are left with your landing party on"
+msgstr "?? ? ??????? ???????? ??"
+
+#: src/finish.c:235
+msgid "a wild jungle planet inhabited by primitive cannibals."
+msgstr "??????? ????? ????????, ?????????? ?????? ???????????."
+
+#: src/finish.c:237
+msgid "They are very fond of \"Captain Kirk\" soup."
+msgstr "??? ????? ????? \"???????????\" ???."
+
+#: src/finish.c:239 src/finish.c:265
+msgid "Without your leadership, the "
+msgstr "??? ?????? ???????????, "
+
+#: src/finish.c:241 src/finish.c:267
+msgid " is destroyed."
+msgstr " ?????????."
+
+#: src/finish.c:244
+msgid "You and your mining party perish."
+msgstr "?? ? ??? ????? ??????."
+
+#: src/finish.c:250
+msgid "The Galileo is instantly annihilated by the supernova."
+msgstr "??????? ????????? ????????? ?? ?????? ??????????."
+
+#: src/finish.c:253
+msgid "You and your mining party are atomized."
+msgstr "?? ? ????? ??????? ????????? ?? ?????."
+
+#: src/finish.c:255
+msgid "Mr. Spock takes command of the "
+msgstr "?????? ???? ????????? ???????????? "
+
+#: src/finish.c:257
+msgid " and"
+msgstr " ? "
+
+#: src/finish.c:258
+msgid "joins the Romulans, reigning terror on the Federation."
+msgstr "?????????????? ? ????????? ? ?????????? ?????? ?????????."
+
+#: src/finish.c:261
+msgid "The shuttle craft Galileo is also caught,"
+msgstr "?????? ??????? ???? ???????"
+
+#: src/finish.c:262
+msgid "and breaks up under the strain."
+msgstr "? ?????????? ?? ????????."
+
+#: src/finish.c:264
+msgid "Your debris is scattered for millions of miles."
+msgstr "???? ????? ??????????? ?? ???????? ????."
+
+#: src/finish.c:270
+msgid "The mutants attack and kill Spock."
+msgstr "??????? ?????? ??????? ? ????? ?????."
+
+#: src/finish.c:271
+msgid "Your ship is captured by Klingons, and"
+msgstr "??? ????????? ?????? ?????????? ?"
+
+#: src/finish.c:272
+msgid "your crew is put on display in a Klingon zoo."
+msgstr "??? ?????? ????????? ?? ????? ? ????????."
+
+#: src/finish.c:275
+msgid "Tribbles consume all remaining water,"
+msgstr "??????? ?????? ??? ?????????? ????,"
+
+#: src/finish.c:276
+msgid "food, and oxygen on your ship."
+msgstr "???? ? ???????? ?? ???????."
+
+#: src/finish.c:278
+msgid "You die of thirst, starvation, and asphyxiation."
+msgstr "?? ?????? ?? ?????, ?????? ? ??????."
+
+#: src/finish.c:282
+msgid "Your ship is drawn to the center of the black hole."
+msgstr "??? ??????? ??????? ????? ? ????? ?????? ????."
+
+#: src/finish.c:283
+msgid "You are crushed into extremely dense matter."
+msgstr "??? ?????????? ?? ????????? ????????????? ????????."
+
+#: src/finish.c:293
+msgid "As a result of your actions, a treaty with the Klingon"
+msgstr "? ?????????? ????? ????????, ? ???????? ?????????"
+
+#: src/finish.c:294
+msgid "Empire has been signed. The terms of the treaty are"
+msgstr "??????? ????????? ???????. ??????? ????? ????????"
+
+#: src/finish.c:296
+msgid "favorable to the Federation."
+msgstr "??????? ??? ?????????."
+
+#: src/finish.c:298
+msgid "Congratulations!"
+msgstr "???????????!"
+
+#: src/finish.c:301
+msgid "highly unfavorable to the Federation."
+msgstr "?????? ?? ??????? ??? ?????????."
+
+#: src/finish.c:304
+msgid "The Federation will be destroyed."
+msgstr "????????? ????????."
+
+#: src/finish.c:307
+msgid "Since you took the last Klingon with you, you are a"
+msgstr "????????? ?? ??????? ?? ??? ???? ?????????? ????????, ?? ??????"
+
+#: src/finish.c:308
+msgid "martyr and a hero. Someday maybe they'll erect a"
+msgstr "??????? ? ?????. ???????? ??????? ???? ????????"
+
+#: src/finish.c:309
+msgid "statue in your memory. Rest in peace, and try not"
+msgstr "?????? ? ???? ?????. ????????? ? ????? ? ???????????? ??"
+
+#: src/finish.c:310
+msgid "to think about pigeons."
+msgstr "?????? ? ???????."
+
+#: src/finish.c:336
+msgid "Your score --"
+msgstr "???? ???? --"
+
+#: src/finish.c:338
+#, c-format
+msgid "%6d Romulans destroyed                 %5d"
+msgstr "%6d ??????? ??????????                 %5d"
+
+#: src/finish.c:341
+#, c-format
+msgid "%6d Romulans captured                  %5d"
+msgstr "%6d ??????? ?????????                  %5d"
+
+#: src/finish.c:344
+#, c-format
+msgid "%6d ordinary Klingons destroyed        %5d"
+msgstr "%6d ??????? ????????? ??????????        %5d"
+
+#: src/finish.c:347
+#, c-format
+msgid "%6d Klingon commanders destroyed       %5d"
+msgstr "%6d ????????????? ?????????? ??????????       %5d"
+
+#: src/finish.c:350
+#, c-format
+msgid "%6d Super-Commander destroyed          %5d"
+msgstr "%6d ????-????? ??????????          %5d"
+
+#: src/finish.c:353
+#, c-format
+msgid "%6.2f Klingons per stardate              %5d"
+msgstr "%6.2f ????????? ? ????              %5d"
+
+#: src/finish.c:356
+#, c-format
+msgid "%6d stars destroyed by your action     %5d"
+msgstr "%6d ????? ??????????     %5d"
+
+#: src/finish.c:359
+#, c-format
+msgid "%6d planets destroyed by your action   %5d"
+msgstr "%6d ?????? ??????????   %5d"
+
+#: src/finish.c:362
+#, c-format
+msgid "%6d bases destroyed by your action     %5d"
+msgstr "%6d ??? ??????????     %5d"
+
+#: src/finish.c:365
+#, c-format
+msgid "%6d calls for help from starbase       %5d"
+msgstr "%6d ????????? ?? ??????? ? ????       %5d"
+
+#: src/finish.c:368
+#, c-format
+msgid "%6d casualties incurred                %5d"
+msgstr "%6d ??????? ??????????                %5d"
+
+#: src/finish.c:371
+#, c-format
+msgid "%6d ship(s) lost or destroyed          %5d"
+msgstr "%6d ???????(??) ????????          %5d"
+
+#: src/finish.c:374
+msgid "Penalty for getting yourself killed        -200"
+msgstr "???????? ?? ??????????? ??????        -200"
+
+#: src/finish.c:376
+msgid "Bonus for winning "
+msgstr "??????? ?? ?????? ? "
+
+#: src/finish.c:378
+msgid "Novice game  "
+msgstr "???? ???????  "
+
+#: src/finish.c:379
+msgid "Fair game    "
+msgstr "???? ??????????    "
+
+#: src/finish.c:380
+msgid "Good game    "
+msgstr "???? ???????    "
+
+#: src/finish.c:381
+msgid "Expert game  "
+msgstr "???? ???????????  "
+
+#: src/finish.c:382
+msgid "Emeritus game"
+msgstr "???? ?????????? ????????"
+
+#: src/finish.c:387
+#, c-format
+msgid "TOTAL SCORE                               %5d"
+msgstr "????? ????                               %5d"
+
+#: src/finish.c:400
+msgid "File or device name for your plaque: "
+msgstr "??? ????? ??? ?????????? ??? ???????: "
+
+#: src/finish.c:404
+msgid "Invalid name."
+msgstr "???????????? ???."
+
+#: src/finish.c:408
+msgid "Enter name to go on plaque (up to 30 characters): "
+msgstr "??????? ???? ??? ??? ??????? (?? 30 ??????): "
+
+#: src/finish.c:432
+#, c-format
+msgid ""
+"                                                       U. S. S. ENTERPRISE\n"
+msgstr "                                                       ??????????\n"
+
+#: src/finish.c:434
+#, c-format
+msgid ""
+"                                  For demonstrating outstanding ability as a "
+"starship captain\n"
+msgstr "                                  ?? ??????????? ???????\n"
+
+#: src/finish.c:436
+#, c-format
+msgid ""
+"                                                Starfleet Command bestows to "
+"you\n"
+msgstr ""
+"                                                ???? ????????? ????? "
+"??????????? ???\n"
+
+#: src/finish.c:439
+#, c-format
+msgid ""
+"                                                           the rank of\n"
+"\n"
+msgstr ""
+"                                                           ??????\n"
+"\n"
+
+#: src/finish.c:440
+#, c-format
+msgid ""
+"                                                       \"Commodore Emeritus"
+"\"\n"
+"\n"
+msgstr ""
+"                                                       \"?????????? ????????"
+"\"\n"
+"\n"
+
+#: src/finish.c:443
+#, c-format
+msgid ""
+" Expert level\n"
+"\n"
+msgstr ""
+" ??????? ???????????\n"
+"\n"
+
+#: src/finish.c:444
+#, c-format
+msgid ""
+"Emeritus level\n"
+"\n"
+msgstr ""
+"??????? ??????????\n"
+"\n"
+
+#: src/finish.c:445
+#, c-format
+msgid ""
+" Cheat level\n"
+"\n"
+msgstr ""
+" ??????? ?????????\n"
+"\n"
+
+#: src/finish.c:449
+#, c-format
+msgid ""
+"                                                 This day of %.6s %.4s, "
+"%.8s\n"
+"\n"
+msgstr ""
+"                                                 ??????? ? ??? %.6s %.4s, "
+"%.8s\n"
+"\n"
+
+#: src/finish.c:451
+#, c-format
+msgid ""
+"                                                        Your score:  %d\n"
+"\n"
+msgstr ""
+"                                                        ??? ????:  %d\n"
+"\n"
+
+#: src/finish.c:452
+#, c-format
+msgid ""
+"                                                    Klingons per stardate:  "
+"%.2f\n"
+msgstr ""
+"                                                    ????????? ? ????:  %.2f\n"

Modified: trunk/src/Makefile.am
===================================================================
--- trunk/src/Makefile.am	2006-09-15 22:47:09 UTC (rev 573)
+++ trunk/src/Makefile.am	2006-09-16 18:47:55 UTC (rev 574)
@@ -1,5 +1,7 @@
 AM_CFLAGS = -Wall -Wimplicit -Wunused -Wmissing-prototypes \
-    -Wuninitialized -fno-inline -O1 -DDATA_DIR=\"$(pkgdatadir)\" @CFLAGS@
+    -Wuninitialized -fno-inline -O1 -DDATA_DIR=\"$(pkgdatadir)\" \
+    -DLOCALEDIR=\"$(datadir)/locale\" \
+    @CFLAGS@
 
 bin_PROGRAMS = sst
 

Modified: trunk/src/Makefile.in
===================================================================
--- trunk/src/Makefile.in	2006-09-15 22:47:09 UTC (rev 573)
+++ trunk/src/Makefile.in	2006-09-16 18:47:55 UTC (rev 574)
@@ -170,7 +170,9 @@
 sysconfdir = @sysconfdir@
 target_alias = @target_alias@
 AM_CFLAGS = -Wall -Wimplicit -Wunused -Wmissing-prototypes \
-    -Wuninitialized -fno-inline -O1 -DDATA_DIR=\"$(pkgdatadir)\" @CFLAGS@
+    -Wuninitialized -fno-inline -O1 -DDATA_DIR=\"$(pkgdatadir)\" \
+    -DLOCALEDIR=\"$(datadir)/locale\" \
+    @CFLAGS@
 
 sst_SOURCES = \
 	ai.c \

Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-15 22:47:09 UTC (rev 573)
+++ trunk/src/ai.c	2006-09-16 18:47:55 UTC (rev 574)
@@ -27,7 +27,7 @@
     if (game.damage[DSRSENS] == 0.0 || game.damage[DLRSENS] == 0.0 ||
 	game.condit == IHDOCKED) {
 	crmena(1, ienm, 2, game.kx[loccom], game.ky[loccom]);
-	prout(" escapes to %s (and regains strength).",
+	prout(_(" escapes to %s (and regains strength)."),
 	      cramlc(quadrant, iqx, iqy));
     }
     /* handle local matters related to escape */
@@ -157,7 +157,7 @@
 #ifdef DEBUG
 	if (game.idebug) {
 	    proutn("MOTION = %1.2f", motion);
-	    proutn("  FORCES = %1,2f", forces);
+	    proutn("  FORCES = %1.2f", forces);
 	}
 #endif
 	/* don't move if no motion */
@@ -255,9 +255,9 @@
 	if (game.damage[DSRSENS] == 0 || game.condit == IHDOCKED) {
 	    proutn("***");
 	    cramen(ienm);
-	    proutn(" from %s", cramlc(2, comx, comy));
-	    if (game.kdist[loccom] < dist1) proutn(" advances to ");
-	    else proutn(" retreats to ");
+	    proutn(_(" from %s"), cramlc(2, comx, comy));
+	    if (game.kdist[loccom] < dist1) proutn(_(" advances to "));
+	    else proutn(_(" retreats to "));
 	    prout(cramlc(sector, nextx, nexty));
 	}
     }
@@ -355,11 +355,11 @@
 	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED) {
 		if (*ipage==0) pause_game(1);
 		*ipage = 1;
-		prout("Lt. Uhura-  \"Captain, Starfleet Intelligence reports");
-		proutn("   a planet in ");
+		prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"));
+		proutn(_("   a planet in "));
 		proutn(cramlc(quadrant, game.state.isx, game.state.isy));
-		prout(" has been destroyed");
-		prout("   by the Super-commander.\"");
+		prout(_(" has been destroyed"));
+		prout(_("   by the Super-commander.\""));
 	    }
 	    break;
 	}
@@ -517,14 +517,14 @@
 	    game.iseenit = 1;
 	    if (*ipage == 0)  pause_game(1);
 	    *ipage=1;
-	    proutn("Lt. Uhura-  \"Captain, the starbase in ");
+	    proutn(_("Lt. Uhura-  \"Captain, the starbase in "));
 	    proutn(cramlc(quadrant, game.state.isx, game.state.isy));
 	    skip(1);
-	    prout("   reports that it is under attack from the Klingon Super-commander.");
-	    proutn("   It can survive until stardate %d.\"",
+	    prout(_("   reports that it is under attack from the Klingon Super-commander."));
+	    proutn(_("   It can survive until stardate %d.\""),
 		   (int)game.future[FSCDBAS]);
 	    if (game.resting==0) return;
-	    prout("Mr. Spock-  \"Captain, shall we cancel the rest period?\"");
+	    prout(_("Mr. Spock-  \"Captain, shall we cancel the rest period?\""));
 	    if (ja()==0) return;
 	    game.resting = 0;
 	    game.optime = 0.0; /* actually finished */
@@ -542,8 +542,8 @@
 	return;
     if (*ipage==0) pause_game(1);
     *ipage = 1;
-    prout("Lt. Uhura-  \"Captain, Starfleet Intelligence reports");
-    proutn("   the Super-commander is in ");
+    prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"));
+    proutn(_("   the Super-commander is in "));
     proutn(cramlc(quadrant, game.state.isx, game.state. isy));
     prout(".\"");
     return;
@@ -608,7 +608,7 @@
     game.quad[game.ithx][game.ithy]=IHWEB;
     dropin(IHBLANK, &dum, &my);
     crmena(1,IHT, 2, game.ithx, game.ithy);
-    prout(" completes web.");
+    prout(_(" completes web."));
     game.ithere = game.ithx = game.ithy = 0;
     game.nenhere--;
     return;

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-15 22:47:09 UTC (rev 573)
+++ trunk/src/battle.c	2006-09-16 18:47:55 UTC (rev 574)
@@ -16,7 +16,7 @@
 	    else {
 		chew();
 		if (game.damage[DSHIELD]) {
-		    prout("Shields damaged and down.");
+		    prout(_("Shields damaged and down."));
 		    return;
 		}
 		if (isit("up"))
@@ -26,17 +26,17 @@
 	    }
 	}
 	if (action==NONE) {
-	    proutn("Do you wish to change shield energy? ");
+	    proutn(_("Do you wish to change shield energy? "));
 	    if (ja()) {
-		proutn("Energy to transfer to shields- ");
+		proutn(_("Energy to transfer to shields- "));
 		action = NRG;
 	    }
 	    else if (game.damage[DSHIELD]) {
-		prout("Shields damaged and down.");
+		prout(_("Shields damaged and down."));
 		return;
 	    }
 	    else if (game.shldup) {
-		proutn("Shields are up. Do you want them down? ");
+		proutn(_("Shields are up. Do you want them down? "));
 		if (ja()) action = SHDN;
 		else {
 		    chew();
@@ -44,7 +44,7 @@
 		}
 	    }
 	    else {
-		proutn("Shields are down. Do you want them up? ");
+		proutn(_("Shields are down. Do you want them up? "));
 		if (ja()) action = SHUP;
 		else {
 		    chew();
@@ -56,16 +56,16 @@
     switch (action) {
     case SHUP: /* raise shields */
 	if (game.shldup) {
-	    prout("Shields already up.");
+	    prout(_("Shields already up."));
 	    return;
 	}
 	game.shldup = 1;
 	game.shldchg = 1;
 	if (game.condit != IHDOCKED) game.energy -= 50.0;
-	prout("Shields raised.");
+	prout(_("Shields raised."));
 	if (game.energy <= 0) {
 	    skip(1);
-	    prout("Shields raising uses up last of energy.");
+	    prout(_("Shields raising uses up last of energy."));
 	    finish(FNRG);
 	    return;
 	}
@@ -73,30 +73,30 @@
 	return;
     case SHDN:
 	if (game.shldup==0) {
-	    prout("Shields already down.");
+	    prout(_("Shields already down."));
 	    return;
 	}
 	game.shldup=0;
 	game.shldchg=1;
-	prout("Shields lowered.");
+	prout(_("Shields lowered."));
 	game.ididit=1;
 	return;
     case NRG:
 	while (scan() != IHREAL) {
 	    chew();
-	    proutn("Energy to transfer to shields- ");
+	    proutn(_("Energy to transfer to shields- "));
 	}
 	chew();
 	if (aaitem==0) return;
 	if (aaitem > game.energy) {
-	    prout("Insufficient ship energy.");
+	    prout(_("Insufficient ship energy."));
 	    return;
 	}
 	game.ididit = 1;
 	if (game.shield+aaitem >= game.inshld) {
-	    prout("Shield energy maximized.");
+	    prout(_("Shield energy maximized."));
 	    if (game.shield+aaitem > game.inshld) {
-		prout("Excess energy requested returned to ship energy");
+		prout(_("Excess energy requested returned to ship energy"));
 	    }
 	    game.energy -= game.inshld-game.shield;
 	    game.shield = game.inshld;
@@ -105,23 +105,23 @@
 	if (aaitem < 0.0 && game.energy-aaitem > game.inenrg) {
 	    /* Prevent shield drain loophole */
 	    skip(1);
-	    prout("Engineering to bridge--");
-	    prout("  Scott here. Power circuit problem, Captain.");
-	    prout("  I can't drain the shields.");
+	    prout(_("Engineering to bridge--"));
+	    prout(_("  Scott here. Power circuit problem, Captain."));
+	    prout(_("  I can't drain the shields."));
 	    game.ididit = 0;
 	    return;
 	}
 	if (game.shield+aaitem < 0) {
-	    prout("All shield energy transferred to ship.");
+	    prout(_("All shield energy transferred to ship."));
 	    game.energy += game.shield;
 	    game.shield = 0.0;
 	    return;
 	}
-	proutn("Scotty- \"");
+	proutn(_("Scotty- \""));
 	if (aaitem > 0)
-	    prout("Transferring energy to shields.\"");
+	    prout(_("Transferring energy to shields.\""));
 	else
-	    prout("Draining energy from shields.\"");
+	    prout(_("Draining energy from shields.\""));
 	game.shield += aaitem;
 	game.energy -= aaitem;
 	return;
@@ -134,9 +134,9 @@
     double type = 1.0, extradm;
     int icas, l;
 	
-    prouts("***RED ALERT!  RED ALERT!");
+    prouts(_("***RED ALERT!  RED ALERT!"));
     skip(1);
-    prout("***COLLISION IMMINENT.");
+    prout(_("***COLLISION IMMINENT."));
     skip(2);
     proutn("***");
     crmshp();
@@ -147,16 +147,16 @@
     case IHT: type = 0.5; break;
     case IHQUEST: type = 4.0; break;
     }
-    proutn(ibumpd ? " rammed by " : " rams ");
+    proutn(ibumpd ? _(" rammed by ") : _(" rams "));
     crmena(0, ienm, 2, ix, iy);
-    if (ibumpd) proutn(" (original position)");
+    if (ibumpd) proutn(_(" (original position)"));
     skip(1);
     deadkl(ix, iy, ienm, game.sectx, game.secty);
     proutn("***");
     crmshp();
-    prout(" heavily damaged.");
+    prout(_(" heavily damaged."));
     icas = 10.0+20.0*Rand();
-    prout("***Sickbay reports %d casualties", icas);
+    prout(_("***Sickbay reports %d casualties"), icas);
     game.casual += icas;
     for (l=0; l < NDEVICES; l++) {
 	if (l == DDRAY) 
@@ -210,7 +210,7 @@
 	case IHE: /* Hit our ship */
 	case IHF:
 	    skip(1);
-	    proutn("Torpedo hits ");
+	    proutn(_("Torpedo hits "));
 	    crmshp();
 	    prout(".");
 	    *hit = 700.0 + 100.0*Rand() -
@@ -246,8 +246,8 @@
 	case IHS:
 	    if (Rand() <= 0.05) {
 		crmena(1, iquad, 2, ix, iy);
-		prout(" uses anti-photon device;");
-		prout("   torpedo neutralized.");
+		prout(_(" uses anti-photon device;"));
+		prout(_("   torpedo neutralized."));
 		return;
 	    }
 	case IHR: /* Hit a regular enemy */
@@ -276,27 +276,27 @@
 	    jx=ix+xx+0.5;
 	    jy=iy+yy+0.5;
 	    if (!VALID_SECTOR(jx, jy)) {
-		prout(" damaged but not destroyed.");
+		prout(_(" damaged but not destroyed."));
 		return;
 	    }
 	    if (game.quad[jx][jy]==IHBLANK) {
-		prout(" buffeted into black hole.");
+		prout(_(" buffeted into black hole."));
 		deadkl(ix, iy, iquad, jx, jy);
 		return;
 	    }
 	    if (game.quad[jx][jy]!=IHDOT) {
 		/* can't move into object */
-		prout(" damaged but not destroyed.");
+		prout(_(" damaged but not destroyed."));
 		return;
 	    }
-	    proutn(" damaged--");
+	    proutn(_(" damaged--"));
 	    game.kx[ll] = jx;
 	    game.ky[ll] = jy;
 	    shoved = 1;
 	    break;
 	case IHB: /* Hit a base */
 	    skip(1);
-	    prout("***STARBASE DESTROYED..");
+	    prout(_("***STARBASE DESTROYED.."));
 	    for_starbases(ll) {
 		if (game.state.baseqx[ll]==game.quadx && game.state.baseqy[ll]==game.quady) {
 		    game.state.baseqx[ll]=game.state.baseqx[game.state.rembase];
@@ -314,7 +314,7 @@
 	    return;
 	case IHP: /* Hit a planet */
 	    crmena(1, iquad, 2, ix, iy);
-	    prout(" destroyed.");
+	    prout(_(" destroyed."));
 	    game.state.nplankl++;
 	    game.state.galaxy[game.quadx][game.quady].planet = NULL;
 	    DESTROY(&game.state.plnets[game.iplnet]);
@@ -332,17 +332,17 @@
 		return;
 	    }
 	    crmena(1, IHSTAR, 2, ix, iy);
-	    prout(" unaffected by photon blast.");
+	    prout(_(" unaffected by photon blast."));
 	    return;
 	case IHQUEST: /* Hit a thingy */
 	    if (!(game.options & OPTION_THINGY) || Rand()>0.7) {
 		skip(1);
-		prouts("AAAAIIIIEEEEEEEEAAAAAAAAUUUUUGGGGGHHHHHHHHHHHH!!!");
+		prouts(_("AAAAIIIIEEEEEEEEAAAAAAAAUUUUUGGGGGHHHHHHHHHHHH!!!"));
 		skip(1);
-		prouts("    HACK!     HACK!    HACK!        *CHOKE!*  ");
+		prouts(_("    HACK!     HACK!    HACK!        *CHOKE!*  "));
 		skip(1);
-		proutn("Mr. Spock-");
-		prouts("  \"Fascinating!\"");
+		proutn(_("Mr. Spock-"));
+		prouts(_("  \"Fascinating!\""));
 		skip(1);
 		deadkl(ix, iy, iquad, ix, iy);
 	    } else {
@@ -358,11 +358,11 @@
 	case IHBLANK: /* Black hole */
 	    skip(1);
 	    crmena(1, IHBLANK, 2, ix, iy);
-	    prout(" swallows torpedo.");
+	    prout(_(" swallows torpedo."));
 	    return;
 	case IHWEB: /* hit the web */
 	    skip(1);
-	    prout("***Torpedo absorbed by Tholian web.");
+	    prout(_("***Torpedo absorbed by Tholian web."));
 	    return;
 	case IHT:  /* Hit a Tholian */
 	    h1 = 700.0 + 100.0*Rand() -
@@ -379,10 +379,10 @@
 	    skip(1);
 	    crmena(1, IHT, 2, ix, iy);
 	    if (Rand() > 0.05) {
-		prout(" survives photon blast.");
+		prout(_(" survives photon blast."));
 		return;
 	    }
-	    prout(" disappears.");
+	    prout(_(" disappears."));
 	    game.quad[ix][iy] = IHWEB;
 	    game.ithere = game.ithx = game.ithy = 0;
 	    game.nenhere--;
@@ -407,14 +407,14 @@
     if (shoved) {
 	game.quad[jx][jy]=iquad;
 	game.quad[ix][iy]=IHDOT;
-	prout(" displaced by blast to %s ", cramlc(sector, jx, jy));
+	prout(_(" displaced by blast to %s "), cramlc(sector, jx, jy));
 	for_local_enemies(ll)
 	    game.kdist[ll] = game.kavgd[ll] = sqrt(square(game.sectx-game.kx[ll])+square(game.secty-game.ky[ll]));
 	sortkl();
 	return;
     }
     skip(1);
-    prout("Torpedo missed.");
+    prout(_("Torpedo missed."));
     return;
 }
 
@@ -427,7 +427,7 @@
     if (hit < (275.0-25.0*game.skill)*(1.0+0.5*Rand())) return;
 
     ncrit = 1.0 + hit/(500.0+100.0*Rand());
-    proutn("***CRITICAL HIT--");
+    proutn(_("***CRITICAL HIT--"));
     /* Select devices and cause damage */
     for (l = 0; l < ncrit && 0 < NDEVICES; l++) {
 	do {
@@ -443,13 +443,13 @@
 	    if (ll<=l) continue;
 	    ktr += 1;
 	    if (ktr==3) skip(1);
-	    proutn(" and ");
+	    proutn(_(" and "));
 	}
 	proutn(device[j]);
     }
-    prout(" damaged.");
+    prout(_(" damaged."));
     if (game.damage[DSHIELD] && game.shldup) {
-	prout("***Shields knocked down.");
+	prout(_("***Shields knocked down."));
 	game.shldup=0;
     }
 }
@@ -507,9 +507,9 @@
 	else { /* Enemy used photon torpedo */
 	    double course = 1.90985*atan2((double)game.secty-jy, (double)jx-game.sectx);
 	    hit = 0;
-	    proutn("***TORPEDO INCOMING");
+	    proutn(_("***TORPEDO INCOMING"));
 	    if (game.damage[DSRSENS] <= 0.0) {
-		proutn(" From ");
+		proutn(_(" From "));
 		crmena(0, iquad, i, jx, jy);
 	    }
 	    attempt = 1;
@@ -541,13 +541,13 @@
 		       shields were down for some strange reason. This
 		       doesn't make any sense, so I've fixed it */
 	ihurt = 1;
-	proutn("%d unit hit", (int)hit);
+	proutn(_("%d unit hit"), (int)hit);
 	if ((game.damage[DSRSENS] > 0 && itflag) || game.skill<=SKILL_FAIR) {
-	    proutn(" on the ");
+	    proutn(_(" on the "));
 	    crmshp();
 	}
 	if (game.damage[DSRSENS] <= 0.0 && itflag) {
-	    proutn(" from ");
+	    proutn(_(" from "));
 	    crmena(0, iquad, i, jx, jy);
 	}
 	skip(1);
@@ -555,7 +555,6 @@
 	if (hit > hitmax) hitmax = hit;
 	hittot += hit;
 	fry(hit);
-	prout("Hit %g energy %g", hit, game.energy);
 	game.energy -= hit;
 	if (game.condit==IHDOCKED) 
 	    dock(0);
@@ -566,29 +565,29 @@
 	return;
     }
     if (attempt == 0 && game.condit == IHDOCKED)
-	prout("***Enemies decide against attacking your ship.");
+	prout(_("***Enemies decide against attacking your ship."));
     if (atackd == 0) return;
     percent = 100.0*pfac*game.shield+0.5;
     if (ihurt==0) {
 	/* Shields fully protect ship */
-	proutn("Enemy attack reduces shield strength to ");
+	proutn(_("Enemy attack reduces shield strength to "));
     }
     else {
 	/* Print message if starship suffered hit(s) */
 	skip(1);
-	proutn("Energy left %2d    shields ", (int)game.energy);
-	if (game.shldup) proutn("up ");
-	else if (game.damage[DSHIELD] == 0) proutn("down ");
-	else proutn("damaged, ");
+	proutn(_("Energy left %2d    shields "), (int)game.energy);
+	if (game.shldup) proutn(_("up "));
+	else if (game.damage[DSHIELD] == 0) proutn(_("down "));
+	else proutn(_("damaged, "));
     }
-    prout("%d%%,   torpedoes left %d", percent, game.torps);
+    prout(_("%d%%,   torpedoes left %d"), percent, game.torps);
     /* Check if anyone was hurt */
     if (hitmax >= 200 || hittot >= 500) {
 	int icas= hittot*Rand()*0.015;
 	if (icas >= 2) {
 	    skip(1);
-	    prout("Mc Coy-  \"Sickbay to bridge.  We suffered %d casualties", icas);
-	    prout("   in that last attack.\"");
+	    prout(_("Mc Coy-  \"Sickbay to bridge.  We suffered %d casualties"), icas);
+	    prout(_("   in that last attack.\""));
 	    game.casual += icas;
 	}
     }
@@ -652,7 +651,7 @@
     }
 
     /* For each kind of enemy, finish message to player */
-    prout(" destroyed.");
+    prout(_(" destroyed."));
     game.quad[ix][iy] = IHDOT;
     if (KLINGREM==0) return;
 
@@ -692,9 +691,9 @@
     delty = 0.1*(game.sectx - x);
     if (deltx==0 && delty== 0) {
 	skip(1);
-	prout("Spock-  \"Bridge to sickbay.  Dr. McCoy,");
-	prout("  I recommend an immediate review of");
-	prout("  the Captain's psychological profile.\"");
+	prout(_("Spock-  \"Bridge to sickbay.  Dr. McCoy,"));
+	prout(_("  I recommend an immediate review of"));
+	prout(_("  the Captain's psychological profile.\""));
 	chew();
 	return 1;
     }
@@ -711,12 +710,12 @@
     game.ididit = 0;
 
     if (game.damage[DPHOTON]) {
-	prout("Photon tubes damaged.");
+	prout(_("Photon tubes damaged."));
 	chew();
 	return;
     }
     if (game.torps == 0) {
-	prout("No torpedoes left.");
+	prout(_("No torpedoes left."));
 	chew();
 	return;
     }
@@ -727,8 +726,8 @@
 	    return;
 	}
 	else if (key == IHEOL) {
-	    prout("%d torpedoes left.", game.torps);
-	    proutn("Number of torpedoes to fire- ");
+	    prout(_("%d torpedoes left."), game.torps);
+	    proutn(_("Number of torpedoes to fire- "));
 	    key = scan();
 	}
 	else /* key == IHREAL */ {
@@ -739,7 +738,7 @@
 	    }
 	    if (n > 3) {
 		chew();
-		prout("Maximum of 3 torpedoes per burst.");
+		prout(_("Maximum of 3 torpedoes per burst."));
 		key = IHEOL;
 		return;
 	    }
@@ -780,7 +779,7 @@
     if (i == 1 && key == IHEOL) {
 	/* prompt for each one */
 	for (i = 1; i <= n; i++) {
-	    proutn("Target sector for torpedo number %d- ", i);
+	    proutn(_("Target sector for torpedo number %d- "), i);
 	    key = scan();
 	    if (key != IHREAL) {
 		huh();
@@ -807,15 +806,15 @@
 	    /* misfire! */
 	    r = (Rand()+1.2) * r;
 	    if (n>1) {
-		prouts("***TORPEDO NUMBER %d MISFIRES", i);
+		prouts(_("***TORPEDO NUMBER %d MISFIRES"), i);
 	    }
-	    else prouts("***TORPEDO MISFIRES.");
+	    else prouts(_("***TORPEDO MISFIRES."));
 	    skip(1);
 	    if (i < n)
-		prout("  Remainder of burst aborted.");
+		prout(_("  Remainder of burst aborted."));
 	    osuabor=1;
 	    if (Rand() <= 0.2) {
-		prout("***Photon tubes damaged by misfire.");
+		prout(_("***Photon tubes damaged by misfire."));
 		game.damage[DPHOTON] = game.damfac*(1.0+2.0*Rand());
 		break;
 	    }
@@ -836,7 +835,7 @@
     if (rpow > 1500) {
 	double chekbrn = (rpow-1500.)*0.00038;
 	if (Rand() <= chekbrn) {
-	    prout("Weapons officer Sulu-  \"Phasers overheated, sir.\"");
+	    prout(_("Weapons officer Sulu-  \"Phasers overheated, sir.\""));
 	    game.damage[DPHASER] = game.damfac*(1.0 + Rand()) * (1.0+chekbrn);
 	}
     }
@@ -849,37 +848,37 @@
 	
     skip(1);
     if (Rand() < .998) {
-	prout("Shields lowered.");
+	prout(_("Shields lowered."));
 	return 0;
     }
     /* Something bad has happened */
-    prouts("***RED ALERT!  RED ALERT!");
+    prouts(_("***RED ALERT!  RED ALERT!"));
     skip(2);
     hit = rpow*game.shield/game.inshld;
     game.energy -= rpow+hit*0.8;
     game.shield -= hit*0.2;
     if (game.energy <= 0.0) {
-	prouts("Sulu-  \"Captain! Shield malf***********************\"");
+	prouts(_("Sulu-  \"Captain! Shield malf***********************\""));
 	skip(1);
 	stars();
 	finish(FPHASER);
 	return 1;
     }
-    prouts("Sulu-  \"Captain! Shield malfunction! Phaser fire contained!\"");
+    prouts(_("Sulu-  \"Captain! Shield malfunction! Phaser fire contained!\""));
     skip(2);
-    prout("Lt. Uhura-  \"Sir, all decks reporting damage.\"");
+    prout(_("Lt. Uhura-  \"Sir, all decks reporting damage.\""));
     icas = hit*Rand()*0.012;
     skip(1);
     fry(0.8*hit);
     if (icas) {
 	skip(1);
-	prout("McCoy to bridge- \"Severe radiation burns, Jim.");
-	prout("  %d casualties so far.\"", icas);
+	prout(_("McCoy to bridge- \"Severe radiation burns, Jim."));
+	prout(_("  %d casualties so far.\""), icas);
 	game.casual -= icas;
     }
     skip(1);
-    prout("Phaser energy dispersed by shields.");
-    prout("Enemy unaffected.");
+    prout(_("Phaser energy dispersed by shields."));
+    prout(_("Enemy unaffected."));
     overheat(rpow);
     return 1;
 }
@@ -897,27 +896,27 @@
     /* SR sensors and Computer */
     if (game.damage[DSRSENS]+game.damage[DCOMPTR] > 0) ipoop = 0;
     if (game.condit == IHDOCKED) {
-	prout("Phasers can't be fired through base shields.");
+	prout(_("Phasers can't be fired through base shields."));
 	chew();
 	return;
     }
     if (game.damage[DPHASER] != 0) {
-	prout("Phaser control damaged.");
+	prout(_("Phaser control damaged."));
 	chew();
 	return;
     }
     if (game.shldup) {
 	if (game.damage[DSHCTRL]) {
-	    prout("High speed shield control damaged.");
+	    prout(_("High speed shield control damaged."));
 	    chew();
 	    return;
 	}
 	if (game.energy <= 200.0) {
-	    prout("Insufficient energy to activate high-speed shield control.");
+	    prout(_("Insufficient energy to activate high-speed shield control."));
 	    chew();
 	    return;
 	}
-	prout("Weapons Officer Sulu-  \"High-speed shield control enabled, sir.\"");
+	prout(_("Weapons Officer Sulu-  \"High-speed shield control enabled, sir.\""));
 	ifast = 1;
 		
     }
@@ -927,7 +926,7 @@
 	if (key == IHALPHA) {
 	    if (isit("manual")) {
 		if (game.nenhere==0) {
-		    prout("There is no enemy present to select.");
+		    prout(_("There is no enemy present to select."));
 		    chew();
 		    key = IHEOL;
 		    automode=AUTOMATIC;
@@ -943,7 +942,7 @@
 		}
 		else {
 		    if (game.nenhere==0)
-			prout("Energy will be expended into space.");
+			prout(_("Energy will be expended into space."));
 		    automode = AUTOMATIC;
 		    key = scan();
 		}
@@ -958,7 +957,7 @@
 	}
 	else if (key == IHREAL) {
 	    if (game.nenhere==0) {
-		prout("Energy will be expended into space.");
+		prout(_("Energy will be expended into space."));
 		automode = AUTOMATIC;
 	    }
 	    else if (!ipoop)
@@ -969,13 +968,13 @@
 	else {
 	    /* IHEOL */
 	    if (game.nenhere==0) {
-		prout("Energy will be expended into space.");
+		prout(_("Energy will be expended into space."));
 		automode = AUTOMATIC;
 	    }
 	    else if (!ipoop)
 		automode = FORCEMAN;
 	    else 
-		proutn("Manual or automatic? ");
+		proutn(_("Manual or automatic? "));
 	}
     }
 				
@@ -986,7 +985,7 @@
 	    key = scan();
 	}
 	if (key != IHREAL && game.nenhere != 0) {
-	    prout("Phasers locked on target. Energy available: %.2f",
+	    prout(_("Phasers locked on target. Energy available: %.2f"),
 		  ifast?game.energy-200.0:game.energy,1,2);
 	}
 	irec=0;
@@ -996,14 +995,14 @@
 		irec+=fabs(game.kpower[i])/(PHASEFAC*pow(0.90,game.kdist[i]))*
 		    (1.01+0.05*Rand()) + 1.0;
 	    kz=1;
-	    proutn("(%d) units required. ", irec);
+	    proutn(_("(%d) units required. "), irec);
 	    chew();
-	    proutn("Units to fire= ");
+	    proutn(_("Units to fire= "));
 	    key = scan();
 	    if (key!=IHREAL) return;
 	    rpow = aaitem;
 	    if (rpow > (ifast?game.energy-200:game.energy)) {
-		proutn("Energy available= %.2f",
+		proutn(_("Energy available= %.2f"),
 		       ifast?game.energy-200:game.energy);
 		skip(1);
 		key = IHEOL;
@@ -1044,12 +1043,12 @@
 	}
 	if (extra > 0 && game.alldone == 0) {
 	    if (game.ithere) {
-		proutn("*** Tholian web absorbs ");
-		if (game.nenhere>0) proutn("excess ");
-		prout("phaser energy.");
+		proutn(_("*** Tholian web absorbs "));
+		if (game.nenhere>0) proutn(_("excess "));
+		prout(_("phaser energy."));
 	    }
 	    else {
-		prout("%d expended on empty space.", (int)extra);
+		prout(_("%d expended on empty space."), (int)extra);
 	    }
 	}
 	break;
@@ -1058,14 +1057,14 @@
 	chew();
 	key = IHEOL;
 	if (game.damage[DCOMPTR]!=0)
-	    prout("Battle comuter damaged, manual file only.");
+	    prout(_("Battle comuter damaged, manual file only."));
 	else {
 	    skip(1);
-	    prouts("---WORKING---");
+	    prouts(_("---WORKING---"));
 	    skip(1);
-	    prout("Short-range-sensors-damaged");
-	    prout("Insufficient-data-for-automatic-phaser-fire");
-	    prout("Manual-fire-must-be-used");
+	    prout(_("Short-range-sensors-damaged"));
+	    prout(_("Insufficient-data-for-automatic-phaser-fire"));
+	    prout(_("Manual-fire-must-be-used"));
 	    skip(1);
 	}
     case MANUAL:
@@ -1074,7 +1073,7 @@
 	    int ii = game.kx[k], jj = game.ky[k];
 	    int ienm = game.quad[ii][jj];
 	    if (msgflag) {
-		proutn("Energy available= %.2f",
+		proutn(_("Energy available= %.2f"),
 		       game.energy-.006-(ifast?200:0));
 		skip(1);
 		msgflag = 0;
@@ -1083,7 +1082,7 @@
 	    if (game.damage[DSRSENS] && !(abs(game.sectx-ii) < 2 && abs(game.secty-jj) < 2) &&
 		(ienm == IHC || ienm == IHS)) {
 		cramen(ienm);
-		prout(" can't be located without short range scan.");
+		prout(_(" can't be located without short range scan."));
 		chew();
 		key = IHEOL;
 		hits[k] = 0; /* prevent overflow -- thanks to Alexei Voitenko */
@@ -1100,7 +1099,7 @@
 		if (game.damage[DCOMPTR]==0) proutn("%d", irec);
 		else proutn("??");
 		proutn(")  ");
-		proutn("units to fire at ");
+		proutn(_("units to fire at "));
 		crmena(0, ienm, 2, ii, jj);
 		proutn("-  ");
 		key = scan();
@@ -1130,7 +1129,7 @@
 	    /* If total requested is too much, inform and start over */
 				
 	    if (rpow > (ifast?game.energy-200:game.energy)) {
-		prout("Available energy exceeded -- try again.");
+		prout(_("Available energy exceeded -- try again."));
 		chew();
 		return;
 	    }
@@ -1162,13 +1161,13 @@
 	skip(1);
 	if (no == 0) {
 	    if (Rand() >= 0.99) {
-		prout("Sulu-  \"Sir, the high-speed shield control has malfunctioned . . .");
-		prouts("         CLICK   CLICK   POP  . . .");
-		prout(" No  response, sir!");
+		prout(_("Sulu-  \"Sir, the high-speed shield control has malfunctioned . . ."));
+		prouts(_("         CLICK   CLICK   POP  . . ."));
+		prout(_(" No response, sir!"));
 		game.shldup = 0;
 	    }
 	    else
-		prout("Shields raised.");
+		prout(_("Shields raised."));
 	}
 	else
 	    game.shldup = 0;
@@ -1197,10 +1196,10 @@
 	if (hit > 0.005) {
 	    if (game.damage[DSRSENS]==0)
 		boom(ii, jj);
-	    proutn("%d unit hit on ", (int)hit);
+	    proutn(_("%d unit hit on "), (int)hit);
 	}
 	else
-	    proutn("Very small hit on ");
+	    proutn(_("Very small hit on "));
 	ienm = game.quad[ii][jj];
 	if (ienm==IHQUEST) iqengry=1;
 	crmena(0,ienm,2,ii,jj);
@@ -1214,9 +1213,9 @@
 	else /* decide whether or not to emasculate klingon */
 	    if (kpow > 0 && Rand() >= 0.9 &&
 		kpow <= ((0.4 + 0.4*Rand())*kpini)) {
-		prout("***Mr. Spock-  \"Captain, the vessel at ",
+		prout(_("***Mr. Spock-  \"Captain, the vessel at "),
 		      cramlc(sector,ii,jj));
-		prout("   has just lost its firepower.\"");
+		prout(_("   has just lost its firepower.\""));
 		game.kpower[kk] = -kpow;
 	    }
     }

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-15 22:47:09 UTC (rev 573)
+++ trunk/src/events.c	2006-09-16 18:47:55 UTC (rev 574)
@@ -50,15 +50,15 @@
 		game.damage[l] -= (game.damage[l]-repair > 0.0 ? repair : game.damage[l]);
 	/* If radio repaired, update star chart and attack reports */
 	if (radio_was_broken && game.damage[DRADIO] == 0.0) {
-	    prout("Lt. Uhura- \"Captain, the sub-space radio is working and");
-	    prout("   surveillance reports are coming in.");
+	    prout(_("Lt. Uhura- \"Captain, the sub-space radio is working and"));
+	    prout(_("   surveillance reports are coming in."));
 	    skip(1);
 	    if (game.iseenit==0) {
 		attakreport(0);
 		game.iseenit = 1;
 	    }
 	    rechart();
-	    prout("   The star chart is now up to date.\"");
+	    prout(_("   The star chart is now up to date.\""));
 	    skip(1);
 	}
 	/* Cause extraneous event LINE to occur */
@@ -111,7 +111,7 @@
 	    skip(1);
 	    proutn("***");
 	    crmshp();
-	    prout(" caught in long range tractor beam--");
+	    prout(_(" caught in long range tractor beam--"));
 	    /* If Kirk & Co. screwing around on planet, handle */
 	    atover(1); /* atover(1) is Grab */
 	    if (game.alldone) return;
@@ -123,13 +123,13 @@
 	    if (game.iscraft==0) {
 		skip(1);
 		if (Rand() > 0.5) {
-		    prout("Galileo, left on the planet surface, is captured");
-		    prout("by aliens and made into a flying McDonald's.");
+		    prout(_("Galileo, left on the planet surface, is captured"));
+		    prout(_("by aliens and made into a flying McDonald's."));
 		    game.damage[DSHUTTL] = -10;
 		    game.iscraft = -1;
 		}
 		else {
-		    prout("Galileo, left on the planet surface, is well hidden.");
+		    prout(_("Galileo, left on the planet surface, is well hidden."));
 		}
 	    }
 	    if (line==0) {
@@ -142,12 +142,12 @@
 	    }
 	    iran(QUADSIZE, &game.sectx, &game.secty);
 	    crmshp();
-	    proutn(" is pulled to ");
+	    proutn(_(" is pulled to "));
 	    proutn(cramlc(quadrant, game.quadx, game.quady));
 	    proutn(", ");
 	    prout(cramlc(sector, game.sectx, game.secty));
 	    if (game.resting) {
-		prout("(Remainder of rest/repair period cancelled.)");
+		prout(_("(Remainder of rest/repair period cancelled.)"));
 		game.resting = 0;
 	    }
 	    if (game.shldup==0) {
@@ -155,7 +155,7 @@
 		    doshield(2); /* Shldsup */
 		    game.shldchg=0;
 		}
-		else prout("(Shields not currently useable.)");
+		else prout(_("(Shields not currently useable.)"));
 	    }
 	    newqad(0);
 	    /* Adjust finish time to time of tractor beaming */
@@ -206,15 +206,15 @@
 	    if (ipage==0) pause_game(1);
 	    ipage = 1;
 	    skip(1);
-	    proutn("Lt. Uhura-  \"Captain, the starbase in ");
+	    proutn(_("Lt. Uhura-  \"Captain, the starbase in "));
 	    prout(cramlc(quadrant, game.batx, game.baty));
-	    prout("   reports that it is under attack and that it can");
-	    proutn("   hold out only until stardate %d",
+	    prout(_("   reports that it is under attack and that it can"));
+	    proutn(_("   hold out only until stardate %d"),
 		   (int)game.future[FCDBAS]);
 	    prout(".\"");
 	    if (game.resting) {
 		skip(1);
-		proutn("Mr. Spock-  \"Captain, shall we cancel the rest period?\" ");
+		proutn(_("Mr. Spock-  \"Captain, shall we cancel the rest period?\""));
 		if (ja()) {
 		    game.resting = 0;
 		    game.optime = 0.0;
@@ -254,7 +254,7 @@
 		game.basex=game.basey=0;
 		newcnd();
 		skip(1);
-		prout("Spock-  \"Captain, I believe the starbase has been destroyegame.state.\"");
+		prout(_("Spock-  \"Captain, I believe the starbase has been destroyed.\""));
 	    }
 	    else if (game.state.rembase != 1 &&
 		     (game.damage[DRADIO] <= 0.0 || game.condit == IHDOCKED)) {
@@ -262,12 +262,12 @@
 		if (ipage==0) pause_game(1);
 		ipage = 1;
 		skip(1);
-		prout("Lt. Uhura-  \"Captain, Starfleet Command reports that");
-		proutn("   the starbase in ");
+		prout(_("Lt. Uhura-  \"Captain, Starfleet Command reports that"));
+		proutn(_("   the starbase in "));
 		proutn(cramlc(quadrant, game.batx, game.baty));
-		prout(" has been destroyed by");
-		if (game.isatb==2) prout("the Klingon Super-Commander");
-		else prout("a Klingon Commander");
+		prout(_(" has been destroyed by"));
+		if (game.isatb==2) prout(_("the Klingon Super-Commander"));
+		else prout(_("a Klingon Commander"));
 		game.state.chart[game.batx][game.baty].starbase = FALSE;
 	    }
 	    /* Remove Starbase from galaxy */
@@ -310,11 +310,11 @@
 			if (ipage==0) pause_game(1);
 			ipage = 1;
 			skip(1);
-			proutn("Lt. Uhura-  \"The deep space probe ");
+			proutn(_("Lt. Uhura-  \"The deep space probe "));
 			if (!VALID_QUADRANT(j, i))
-			    proutn("has left the galaxy");
+			    proutn(_("has left the galaxy"));
 			else
-			    proutn("is no longer transmitting");
+			    proutn(_("is no longer transmitting"));
 			prout(".\"");
 		    }
 		    game.future[FDSPROB] = FOREVER;
@@ -324,7 +324,7 @@
 		    if (ipage==0) pause_game(1);
 		    ipage = 1;
 		    skip(1);
-		    proutn("Lt. Uhura-  \"The deep space probe is now in ");
+		    proutn(_("Lt. Uhura-  \"The deep space probe is now in "));
 		    proutn(cramlc(quadrant, game.probecx, game.probecy));
 		    prout(".\"");
 		}
@@ -361,7 +361,7 @@
     for (;;) {
 	key = scan();
 	if (key  != IHEOL) break;
-	proutn("How long? ");
+	proutn(_("How long? "));
     }
     chew();
     if (key != IHREAL) {
@@ -371,7 +371,7 @@
     origTime = delay = aaitem;
     if (delay <= 0.0) return;
     if (delay >= game.state.remtime || game.nenhere != 0) {
-	proutn("Are you sure? ");
+	proutn(_("Are you sure? "));
 	if (ja() == 0) return;
     }
 
@@ -381,7 +381,7 @@
     do {
 	if (delay <= 0) game.resting = 0;
 	if (game.resting == 0) {
-	    prout("%d stardates left.", (int)game.state.remtime);
+	    prout(_("%d stardates left."), (int)game.state.remtime);
 	    return;
 	}
 	temp = game.optime = delay;
@@ -423,7 +423,7 @@
     /* handle initial nova */
     game.quad[ix][iy] = IHDOT;
     crmena(1, IHSTAR, 2, ix, iy);
-    prout(" novas.");
+    prout(_(" novas."));
     game.state.galaxy[game.quadx][game.quady].stars--;
     game.state.starkl++;
 	
@@ -462,14 +462,14 @@
 			game.state.galaxy[game.quadx][game.quady].stars -= 1;
 			game.state.starkl++;
 			crmena(1, IHSTAR, 2, ii, jj);
-			prout(" novas.");
+			prout(_(" novas."));
 			game.quad[ii][jj] = IHDOT;
 			break;
 		    case IHP: /* Destroy planet */
 			game.state.galaxy[game.quadx][game.quady].planet = NULL;
 			game.state.nplankl++;
 			crmena(1, IHP, 2, ii, jj);
-			prout(" destroyed.");
+			prout(_(" destroyed."));
 			DESTROY(&game.state.plnets[game.iplnet]);
 			game.iplnet = game.plnetx = game.plnety = 0;
 			if (game.landed == 1) {
@@ -490,12 +490,12 @@
 			game.state.basekl++;
 			newcnd();
 			crmena(1, IHB, 2, ii, jj);
-			prout(" destroyed.");
+			prout(_(" destroyed."));
 			game.quad[ii][jj] = IHDOT;
 			break;
 		    case IHE: /* Buffet ship */
 		    case IHF:
-			prout("***Starship buffeted by nova.");
+			prout(_("***Starship buffeted by nova."));
 			if (game.shldup) {
 			    if (game.shield >= 2000.0) game.shield -= 2000.0;
 			    else {
@@ -503,7 +503,7 @@
 				game.energy -= diff;
 				game.shield = 0.0;
 				game.shldup = 0;
-				prout("***Shields knocked out.");
+				prout(_("***Shields knocked out."));
 				game.damage[DSHIELD] += 0.005*game.damfac*Rand()*diff;
 			    }
 			}
@@ -533,7 +533,7 @@
 			newcx = ii + ii - hits[mm][1];
 			newcy = jj + jj - hits[mm][2];
 			crmena(1, iquad, 2, ii, jj);
-			proutn(" damaged");
+			proutn(_(" damaged"));
 			if (!VALID_SECTOR(newcx, newcy)) {
 			    /* can't leave quadrant */
 			    skip(1);
@@ -541,7 +541,7 @@
 			}
 			iquad1 = game.quad[newcx][newcy];
 			if (iquad1 == IHBLANK) {
-			    proutn(", blasted into ");
+			    proutn(_(", blasted into "));
 			    crmena(0, IHBLANK, 2, newcx, newcy);
 			    skip(1);
 			    deadkl(ii, jj, iquad, newcx, newcy);
@@ -552,7 +552,7 @@
 			    skip(1);
 			    break;
 			}
-			proutn(", buffeted to ");
+			proutn(_(", buffeted to "));
 			proutn(cramlc(sector, newcx, newcy));
 			game.quad[ii][jj] = IHDOT;
 			game.quad[newcx][newcy] = iquad;
@@ -581,7 +581,7 @@
     if (game.dist == 0.0) return;
     game.optime = 10.0*game.dist/16.0;
     skip(1);
-    prout("Force of nova displaces starship.");
+    prout(_("Force of nova displaces starship."));
     game.iattak=2;	/* Eliminates recursion problem */
     imove();
     game.optime = 10.0*game.dist/16.0;
@@ -638,8 +638,8 @@
 	    /* it isn't here, or we just entered (treat as inroute) */
 	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED) {
 		skip(1);
-		prout("Message from Starfleet Command       Stardate %.2f", game.state.date);
-		prout("     Supernova in %s; caution advised.",
+		prout(_("Message from Starfleet Command       Stardate %.2f"), game.state.date);
+		prout(_("     Supernova in %s; caution advised."),
 		      cramlc(quadrant, nqx, nqy));
 	    }
 	}
@@ -664,13 +664,13 @@
 
     if (incipient) {
 	skip(1);
-	prouts("***RED ALERT!  RED ALERT!");
+	prouts(_("***RED ALERT!  RED ALERT!"));
 	skip(1);
-	prout("***Incipient supernova detected at ", cramlc(sector, nsx, nsy));
+	prout(_("***Incipient supernova detected at "), cramlc(sector, nsx, nsy));
 	nqx = game.quadx;
 	nqy = game.quady;
 	if (square(nsx-game.sectx) + square(nsy-game.secty) <= 2.1) {
-	    proutn("Emergency override attempts t");
+	    proutn(_("Emergency override attempts t"));
 	    prouts("***************");
 	    skip(1);
 	    stars();
@@ -741,8 +741,8 @@
     /* If supernova destroys last klingons give special message */
     if (KLINGREM==0 && (nqx != game.quadx || nqy != game.quady)) {
 	skip(2);
-	if (insx == 0) prout("Lucky you!");
-	proutn("A supernova in %s has just destroyed the last Klingons.",
+	if (insx == 0) prout(_("Lucky you!"));
+	proutn(_("A supernova in %s has just destroyed the last Klingons."),
 	       cramlc(quadrant, nqx, nqy));
 	finish(FWON);
 	return;

Modified: trunk/src/finish.c
===================================================================
--- trunk/src/finish.c	2006-09-15 22:47:09 UTC (rev 573)
+++ trunk/src/finish.c	2006-09-16 18:47:55 UTC (rev 574)
@@ -7,39 +7,40 @@
     /* Finish with a BANG! */
     chew();
     if (game.damage[DCOMPTR] != 0.0) {
-	prout("Computer damaged; cannot execute destruct sequence.");
+	prout(_("Computer damaged; cannot execute destruct sequence."));
 	return;
     }
-    prouts("---WORKING---"); skip(1);
-    prouts("SELF-DESTRUCT-SEQUENCE-ACTIVATED"); skip(1);
+    prouts(_("---WORKING---")); skip(1);
+    prouts(_("SELF-DESTRUCT-SEQUENCE-ACTIVATED")); skip(1);
     prouts("   10"); skip(1);
     prouts("       9"); skip(1);
     prouts("          8"); skip(1);
     prouts("             7"); skip(1);
     prouts("                6"); skip(1);
     skip(1);
-    prout("ENTER-CORRECT-PASSWORD-TO-CONTINUE-");
+    prout(_("ENTER-CORRECT-PASSWORD-TO-CONTINUE-"));
     skip(1);
-    prout("SELF-DESTRUCT-SEQUENCE-OTHERWISE-");
+    prout(_("SELF-DESTRUCT-SEQUENCE-OTHERWISE-"));
     skip(1);
-    prout("SELF-DESTRUCT-SEQUENCE-WILL-BE-ABORTED");
+    prout(_("SELF-DESTRUCT-SEQUENCE-WILL-BE-ABORTED"));
     skip(1);
     scan();
     chew();
     if (strcmp(game.passwd, citem) != 0) {
-	prouts("PASSWORD-REJECTED;"); skip(1);
-	prouts("CONTINUITY-EFFECTED");
+	prouts(_("PASSWORD-REJECTED;"));
+	skip(1);
+	prouts(_("CONTINUITY-EFFECTED"));
 	skip(2);
 	return;
     }
-    prouts("PASSWORD-ACCEPTED"); skip(1);
+    prouts(_("PASSWORD-ACCEPTED")); skip(1);
     prouts("                   5"); skip(1);
     prouts("                      4"); skip(1);
     prouts("                         3"); skip(1);
     prouts("                            2"); skip(1);
     prouts("                              1"); skip(1);
     if (Rand() < 0.15) {
-	prouts("GOODBYE-CRUEL-WORLD");
+	prouts(_("GOODBYE-CRUEL-WORLD"));
 	skip(1);
     }
     kaboom();
@@ -49,9 +50,9 @@
 {
     stars();
     if (game.ship==IHE) prouts("***");
-    prouts("********* Entropy of ");
+    prouts(_("********* Entropy of "));
     crmshp();
-    prouts(" maximized *********");
+    prouts(_(" maximized *********"));
     skip(1);
     stars();
     skip(1);
@@ -73,16 +74,16 @@
     int igotit = 0;
     game.alldone = 1;
     skip(3);
-    prout("It is stardate %.1f.", game.state.date);
+    prout(_("It is stardate %.1f."), game.state.date);
     skip(1);
     switch (ifin) {
     case FWON: // Game has been won
 	if (game.state.nromrem != 0)
-	    prout("The remaining %d Romulans surrender to Starfleet Command.",
+	    prout(_("The remaining %d Romulans surrender to Starfleet Command."),
 		  game.state.nromrem);
 
-	prout("You have smashed the Klingon invasion fleet and saved");
-	prout("the Federation.");
+	prout(_("You have smashed the Klingon invasion fleet and saved"));
+	prout(_("the Federation."));
 	game.gamewon=1;
 	if (game.alive) {
 	    double badpt;
@@ -96,39 +97,39 @@
 		KLINGKILLED/(game.state.date-game.indate) >=
 		0.1*game.skill*(game.skill+1.0) + 0.1 + 0.008*badpt) {
 		skip(1);
-		prout("In fact, you have done so well that Starfleet Command");
+		prout(_("In fact, you have done so well that Starfleet Command"));
 		switch (game.skill) {
 		case SKILL_NOVICE:
-		    prout("promotes you one step in rank from \"Novice\" to \"Fair\".");
+		    prout(_("promotes you one step in rank from \"Novice\" to \"Fair\"."));
 		    break;
 		case SKILL_FAIR:
-		    prout("promotes you one step in rank from \"Fair\" to \"Good\".");
+		    prout(_("promotes you one step in rank from \"Fair\" to \"Good\"."));
 		    break;
 		case SKILL_GOOD:
-		    prout("promotes you one step in rank from \"Good\" to \"Expert\".");
+		    prout(_("promotes you one step in rank from \"Good\" to \"Expert\"."));
 		    break;
 		case SKILL_EXPERT:
-		    prout("promotes you to Commodore Emeritus.");
+		    prout(_("promotes you to Commodore Emeritus."));
 		    skip(1);
-		    prout("Now that you think you're really good, try playing");
-		    prout("the \"Emeritus\" game. It will splatter your ego.");
+		    prout(_("Now that you think you're really good, try playing"));
+		    prout(_("the \"Emeritus\" game. It will splatter your ego."));
 		    break;
 		case SKILL_EMERITUS:
 		    skip(1);
-		    proutn("Computer-  ");
-		    prouts("ERROR-ERROR-ERROR-ERROR");
+		    proutn(_("Computer-  "));
+		    prouts(_("ERROR-ERROR-ERROR-ERROR"));
 		    skip(2);
-		    prouts("  YOUR-SKILL-HAS-EXCEEDED-THE-CAPACITY-OF-THIS-PROGRAM");
+		    prouts(_("  YOUR-SKILL-HAS-EXCEEDED-THE-CAPACITY-OF-THIS-PROGRAM"));
 		    skip(1);
-		    prouts("  THIS-PROGRAM-MUST-SURVIVE");
+		    prouts(_("  THIS-PROGRAM-MUST-SURVIVE"));
 		    skip(1);
-		    prouts("  THIS-PROGRAM-MUST-SURVIVE");
+		    prouts(_("  THIS-PROGRAM-MUST-SURVIVE"));
 		    skip(1);
-		    prouts("  THIS-PROGRAM-MUST-SURVIVE");
+		    prouts(_("  THIS-PROGRAM-MUST-SURVIVE"));
 		    skip(1);
-		    prouts("  THIS-PROGRAM-MUST?- MUST ? - SUR? ? -?  VI");
+		    prouts(_("  THIS-PROGRAM-MUST?- MUST ? - SUR? ? -?  VI"));
 		    skip(2);
-		    prout("Now you can retire and write your own Star Trek game!");
+		    prout(_("Now you can retire and write your own Star Trek game!"));
 		    skip(1);
 		    break;
 		}
@@ -138,9 +139,9 @@
 			&& !game.idebug
 #endif
 			)
-			prout("You cannot get a citation, so...");
+			prout(_("You cannot get a citation, so..."));
 		    else {
-			proutn("Do you want your Commodore Emeritus Citation printed? ");
+			proutn(_("Do you want your Commodore Emeritus Citation printed? "));
 			chew();
 			if (ja()) {
 			    igotit = 1;
@@ -150,136 +151,136 @@
 	    }
 	    // Only grant long life if alive (original didn't!)
 	    skip(1);
-	    prout("LIVE LONG AND PROSPER.");
+	    prout(_("LIVE LONG AND PROSPER."));
 	}
 	score();
 	if (igotit != 0) plaque();
 	return;
     case FDEPLETE: // Federation Resources Depleted
-	prout("Your time has run out and the Federation has been");
-	prout("conquered.  Your starship is now Klingon property,");
-	prout("and you are put on trial as a war criminal.  On the");
-	proutn("basis of your record, you are ");
+	prout(_("Your time has run out and the Federation has been"));
+	prout(_("conquered.  Your starship is now Klingon property,"));
+	prout(_("and you are put on trial as a war criminal.  On the"));
+	proutn(_("basis of your record, you are "));
 	if (KLINGREM*3.0 > INKLINGTOT) {
-	    prout("aquitted.");
+	    prout(_("acquitted."));
 	    skip(1);
-	    prout("LIVE LONG AND PROSPER.");
+	    prout(_("LIVE LONG AND PROSPER."));
 	}
 	else {
-	    prout("found guilty and");
-	    prout("sentenced to death by slow torture.");
+	    prout(_("found guilty and"));
+	    prout(_("sentenced to death by slow torture."));
 	    game.alive = 0;
 	}
 	score();
 	return;
     case FLIFESUP:
-	prout("Your life support reserves have run out, and");
-	prout("you die of thirst, starvation, and asphyxiation.");
-	prout("Your starship is a derelict in space.");
+	prout(_("Your life support reserves have run out, and"));
+	prout(_("you die of thirst, starvation, and asphyxiation."));
+	prout(_("Your starship is a derelict in space."));
 	break;
     case FNRG:
-	prout("Your energy supply is exhausted.");
+	prout(_("Your energy supply is exhausted."));
 	skip(1);
-	prout("Your starship is a derelict in space.");
+	prout(_("Your starship is a derelict in space."));
 	break;
     case FBATTLE:
-	proutn("The ");
+	proutn(_("The "));
 	crmshp();
-	prout("has been destroyed in battle.");
+	prout(_("has been destroyed in battle."));
 	skip(1);
-	prout("Dulce et decorum est pro patria mori.");
+	prout(_("Dulce et decorum est pro patria mori."));
 	break;
     case FNEG3:
-	prout("You have made three attempts to cross the negative energy");
-	prout("barrier which surrounds the galaxy.");
+	prout(_("You have made three attempts to cross the negative energy"));
+	prout(_("barrier which surrounds the galaxy."));
 	skip(1);
-	prout("Your navigation is abominable.");
+	prout(_("Your navigation is abominable."));
 	score();
 	return;
     case FNOVA:
-	prout("Your starship has been destroyed by a nova.");
-	prout("That was a great shot.");
+	prout(_("Your starship has been destroyed by a nova."));
+	prout(_("That was a great shot."));
 	skip(1);
 	break;
     case FSNOVAED:
-	proutn("The ");
+	proutn(_("The "));
 	crmshp();
-	prout(" has been fried by a supernova.");
-	prout("...Not even cinders remain...");
+	prout(_(" has been fried by a supernova."));
+	prout(_("...Not even cinders remain..."));
 	break;
     case FABANDN:
-	prout("You have been captured by the Klingons. If you still");
-	prout("had a starbase to be returned to, you would have been");
-	prout("repatriated and given another chance. Since you have");
-	prout("no starbases, you will be mercilessly tortured to death.");
+	prout(_("You have been captured by the Klingons. If you still"));
+	prout(_("had a starbase to be returned to, you would have been"));
+	prout(_("repatriated and given another chance. Since you have"));
+	prout(_("no starbases, you will be mercilessly tortured to death."));
 	break;
     case FDILITHIUM:
-	prout("Your starship is now an expanding cloud of subatomic particles");
+	prout(_("Your starship is now an expanding cloud of subatomic particles"));
 	break;
     case FMATERIALIZE:
-	prout("Starbase was unable to re-materialize your starship.");
-	prout("Sic transit gloria muntdi");
+	prout(_("Starbase was unable to re-materialize your starship."));
+	prout(_("Sic transit gloria muntdi"));
 	break;
     case FPHASER:
-	proutn("The ");
+	proutn(_("The "));
 	crmshp();
-	prout(" has been cremated by its own phasers.");
+	prout(_(" has been cremated by its own phasers."));
 	break;
     case FLOST:
-	prout("You and your landing party have been");
-	prout("converted to energy, disipating through space.");
+	prout(_("You and your landing party have been"));
+	prout(_("converted to energy, disipating through space."));
 	break;
     case FMINING:
-	prout("You are left with your landing party on");
-	prout("a wild jungle planet inhabited by primitive cannibals.");
+	prout(_("You are left with your landing party on"));
+	prout(_("a wild jungle planet inhabited by primitive cannibals."));
 	skip(1);
-	prout("They are very fond of \"Captain Kirk\" soup.");
+	prout(_("They are very fond of \"Captain Kirk\" soup."));
 	skip(1);
-	proutn("Without your leadership, the ");
+	proutn(_("Without your leadership, the "));
 	crmshp();
-	prout(" is destroyed.");
+	prout(_(" is destroyed."));
 	break;
     case FDPLANET:
-	prout("You and your mining party perish.");
+	prout(_("You and your mining party perish."));
 	skip(1);
-	prout("That was a great shot.");
+	prout(_("That was a great shot."));
 	skip(1);
 	break;
     case FSSC:
-	prout("The Galileo is instantly annihilated by the supernova.");
+	prout(_("The Galileo is instantly annihilated by the supernova."));
 	// no break;
     case FPNOVA:
-	prout("You and your mining party are atomized.");
+	prout(_("You and your mining party are atomized."));
 	skip(1);
-	proutn("Mr. Spock takes command of the ");
+	proutn(_("Mr. Spock takes command of the "));
 	crmshp();
-	prout(" and");
-	prout("joins the Romulans, reigning terror on the Federation.");
+	prout(_(" and"));
+	prout(_("joins the Romulans, reigning terror on the Federation."));
 	break;
     case FSTRACTOR:
-	prout("The shuttle craft Galileo is also caught,");
-	prout("and breaks up under the strain.");
+	prout(_("The shuttle craft Galileo is also caught,"));
+	prout(_("and breaks up under the strain."));
 	skip(1);
-	prout("Your debris is scattered for millions of miles.");
-	proutn("Without your leadership, the ");
+	prout(_("Your debris is scattered for millions of miles."));
+	proutn(_("Without your leadership, the "));
 	crmshp();
-	prout(" is destroyed.");
+	prout(_(" is destroyed."));
 	break;
     case FDRAY:
-	prout("The mutants attack and kill Spock.");
-	prout("Your ship is captured by Klingons, and");
-	prout("your crew is put on display in a Klingon zoo.");
+	prout(_("The mutants attack and kill Spock."));
+	prout(_("Your ship is captured by Klingons, and"));
+	prout(_("your crew is put on display in a Klingon zoo."));
 	break;
     case FTRIBBLE:
-	prout("Tribbles consume all remaining water,");
-	prout("food, and oxygen on your ship.");
+	prout(_("Tribbles consume all remaining water,"));
+	prout(_("food, and oxygen on your ship."));
 	skip(1);
-	prout("You die of thirst, starvation, and asphyxiation.");
-	prout("Your starship is a derelict in space.");
+	prout(_("You die of thirst, starvation, and asphyxiation."));
+	prout(_("Your starship is a derelict in space."));
 	break;
     case FHOLE:
-	prout("Your ship is drawn to the center of the black hole.");
-	prout("You are crushed into extremely dense matter.");
+	prout(_("Your ship is drawn to the center of the black hole."));
+	prout(_("You are crushed into extremely dense matter."));
 	break;
     }
     if (game.ship==IHF) game.ship= 0;
@@ -289,24 +290,24 @@
 	double goodies = game.state.remres/game.inresor;
 	double baddies = (game.state.remkl + 2.0*game.state.remcom)/(game.inkling+2.0*game.incom);
 	if (goodies/baddies >= 1.0+0.5*Rand()) {
-	    prout("As a result of your actions, a treaty with the Klingon");
-	    prout("Empire has been signed. The terms of the treaty are");
+	    prout(_("As a result of your actions, a treaty with the Klingon"));
+	    prout(_("Empire has been signed. The terms of the treaty are"));
 	    if (goodies/baddies >= 3.0+Rand()) {
-		prout("favorable to the Federation.");
+		prout(_("favorable to the Federation."));
 		skip(1);
-		prout("Congratulations!");
+		prout(_("Congratulations!"));
 	    }
 	    else
-		prout("highly unfavorable to the Federation.");
+		prout(_("highly unfavorable to the Federation."));
 	}
 	else
-	    prout("The Federation will be destroyed.");
+	    prout(_("The Federation will be destroyed."));
     }
     else {
-	prout("Since you took the last Klingon with you, you are a");
-	prout("martyr and a hero. Someday maybe they'll erect a");
-	prout("statue in your memory. Rest in peace, and try not");
-	prout("to think about pigeons.");
+	prout(_("Since you took the last Klingon with you, you are a"));
+	prout(_("martyr and a hero. Someday maybe they'll erect a"));
+	prout(_("statue in your memory. Rest in peace, and try not"));
+	prout(_("to think about pigeons."));
 	game.gamewon = 1;
     }
     score();
@@ -332,58 +333,58 @@
 	+ 20*NKILLROM + 200*NKILLSC - 10*game.state.nplankl + game.state.nromrem;
     if (game.alive == 0) iscore -= 200;
     skip(2);
-    prout("Your score --");
+    prout(_("Your score --"));
     if (NKILLROM)
-	prout("%6d Romulans destroyed                 %5d",
+	prout(_("%6d Romulans destroyed                 %5d"),
 	      NKILLROM,20*NKILLROM);
     if (game.state.nromrem)
-	prout("%6d Romulans captured                  %5d",
+	prout(_("%6d Romulans captured                  %5d"),
 	      game.state.nromrem, game.state.nromrem);
     if (NKILLK)
-	prout("%6d ordinary Klingons destroyed        %5d",
+	prout(_("%6d ordinary Klingons destroyed        %5d"),
 	      NKILLK, 10*NKILLK);
     if (NKILLC)
-	prout("%6d Klingon commanders destroyed       %5d",
+	prout(_("%6d Klingon commanders destroyed       %5d"),
 	      NKILLC, 50*NKILLC);
     if (NKILLSC)
-	prout("%6d Super-Commander destroyed          %5d",
+	prout(_("%6d Super-Commander destroyed          %5d"),
 	      NKILLSC, 200*NKILLSC);
     if (ithperd)
-	prout("%6.2f Klingons per stardate              %5d",
+	prout(_("%6.2f Klingons per stardate              %5d"),
 	      perdate, ithperd);
     if (game.state.starkl)
-	prout("%6d stars destroyed by your action     %5d",
+	prout(_("%6d stars destroyed by your action     %5d"),
 	      game.state.starkl, -5*game.state.starkl);
     if (game.state.nplankl)
-	prout("%6d planets destroyed by your action   %5d",
+	prout(_("%6d planets destroyed by your action   %5d"),
 	      game.state.nplankl, -10*game.state.nplankl);
     if (game.state.basekl)
-	prout("%6d bases destroyed by your action     %5d",
+	prout(_("%6d bases destroyed by your action     %5d"),
 	      game.state.basekl, -100*game.state.basekl);
     if (game.nhelp)
-	prout("%6d calls for help from starbase       %5d",
+	prout(_("%6d calls for help from starbase       %5d"),
 	      game.nhelp, -45*game.nhelp);
     if (game.casual)
-	prout("%6d casualties incurred                %5d",
+	prout(_("%6d casualties incurred                %5d"),
 	      game.casual, -game.casual);
     if (klship)
-	prout("%6d ship(s) lost or destroyed          %5d",
+	prout(_("%6d ship(s) lost or destroyed          %5d"),
 	      klship, -100*klship);
     if (game.alive==0)
-	prout("Penalty for getting yourself killed        -200");
+	prout(_("Penalty for getting yourself killed        -200"));
     if (game.gamewon) {
-	proutn("Bonus for winning ");
+	proutn(_("Bonus for winning "));
 	switch (game.skill) {
-	case SKILL_NOVICE:   proutn("Novice game  "); break;
-	case SKILL_FAIR:     proutn("Fair game    "); break;
-	case SKILL_GOOD:     proutn("Good game    "); break;
-	case SKILL_EXPERT:   proutn("Expert game  "); break;
-	case SKILL_EMERITUS: proutn("Emeritus game"); break;
+	case SKILL_NOVICE:   proutn(_("Novice game  ")); break;
+	case SKILL_FAIR:     proutn(_("Fair game    ")); break;
+	case SKILL_GOOD:     proutn(_("Good game    ")); break;
+	case SKILL_EXPERT:   proutn(_("Expert game  ")); break;
+	case SKILL_EMERITUS: proutn(_("Emeritus game")); break;
 	}
 	prout("           %5d", iwon);
     }
     skip(1);
-    prout("TOTAL SCORE                               %5d", iscore);
+    prout(_("TOTAL SCORE                               %5d"), iscore);
 }
 
 void plaque(void) {
@@ -396,15 +397,15 @@
 	skip(2);
 	
 	while (fp == NULL) {
-                proutn("File or device name for your plaque: ");
+                proutn(_("File or device name for your plaque: "));
                 cgetline(winner, sizeof(winner));
 		fp = fopen(winner, "w");
 		if (fp==NULL) {
-                        prout("Invalid name.");
+                        prout(_("Invalid name."));
 		}
 	}
 
-        proutn("Enter name to go on plaque (up to 30 characters): ");
+        proutn(_("Enter name to go on plaque (up to 30 characters): "));
         cgetline(winner, sizeof(winner));
 	/* The 38 below must be 64 for 132-column paper */
 	nskip = 38 - strlen(winner)/2;
@@ -428,26 +429,26 @@
 	fprintf(fp, "                                                      EE  :                    EEEEEEEE\n");
 	fprintf(fp, "                                                       EEEEEEEEEEEEEEEEEEEEEEE\n");
 	fprintf(fp, "\n\n\n");
-	fprintf(fp, "                                                       U. S. S. ENTERPRISE\n");
+	fprintf(fp, _("                                                       U. S. S. ENTERPRISE\n"));
 	fprintf(fp, "\n\n\n\n");
-	fprintf(fp, "                                  For demonstrating outstanding ability as a starship captain\n");
+	fprintf(fp, _("                                  For demonstrating outstanding ability as a starship captain\n"));
 	fprintf(fp, "\n");
-	fprintf(fp, "                                                Starfleet Command bestows to you\n");
+	fprintf(fp, _("                                                Starfleet Command bestows to you\n"));
 	fprintf(fp, "\n");
 	fprintf(fp,"%*s%s\n\n", nskip, "", winner);
-	fprintf(fp, "                                                           the rank of\n\n");
-	fprintf(fp, "                                                       \"Commodore Emeritus\"\n\n");
+	fprintf(fp, _("                                                           the rank of\n\n"));
+	fprintf(fp, _("                                                       \"Commodore Emeritus\"\n\n"));
 	fprintf(fp, "                                                          ");
 	switch (iskill) {
-		case SKILL_EXPERT: fprintf(fp," Expert level\n\n"); break;
-		case SKILL_EMERITUS: fprintf(fp,"Emeritus level\n\n"); break;
-		default: fprintf(fp," Cheat level\n\n"); break;
+		case SKILL_EXPERT: fprintf(fp,_(" Expert level\n\n")); break;
+		case SKILL_EMERITUS: fprintf(fp,_("Emeritus level\n\n")); break;
+		default: fprintf(fp,_(" Cheat level\n\n")); break;
 	}
 	t = time(NULL);
 	timestring = ctime(&t);
-	fprintf(fp, "                                                 This day of %.6s %.4s, %.8s\n\n",
+	fprintf(fp, _("                                                 This day of %.6s %.4s, %.8s\n\n"),
 			timestring+4, timestring+20, timestring+11);
-	fprintf(fp,"                                                        Your score:  %d\n\n", iscore);
-	fprintf(fp,"                                                    Klingons per stardate:  %.2f\n", perdate);
+	fprintf(fp,_("                                                        Your score:  %d\n\n"), iscore);
+	fprintf(fp,_("                                                    Klingons per stardate:  %.2f\n"), perdate);
 	fclose(fp);
 }

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-09-15 22:47:09 UTC (rev 573)
+++ trunk/src/io.c	2006-09-16 18:47:55 UTC (rev 574)
@@ -1,10 +1,7 @@
 #include <stdio.h>
 #include <unistd.h>
-#include <curses.h>
-#include <signal.h>
-#include <ctype.h>
-#include <stdarg.h>
 
+#include "config.h"
 #include "sst.h"
 #include "sstlinux.h"
 
@@ -34,6 +31,11 @@
 
 void iostart(void) 
 {
+    setlocale(LC_ALL, "");
+    bindtextdomain(PACKAGE, LOCALEDIR);
+    textdomain(PACKAGE);
+    gettext("");
+
     if (!(game.options & OPTION_CURSES)) {
 	rows = atoi(getenv("LINES"));
     } else {

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-15 22:47:09 UTC (rev 573)
+++ trunk/src/setup.c	2006-09-16 18:47:55 UTC (rev 574)
@@ -474,7 +474,7 @@
     // Choose game options -- added by ESR for SST2K
     if (scan() != IHALPHA) {
 	chew();
-	proutn("Choose your game options: ");
+	proutn("Choose your game style (or just press enter): ");
 	scan();
     }
     if (isit("plain")) {

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-15 22:47:09 UTC (rev 573)
+++ trunk/src/sst.h	2006-09-16 18:47:55 UTC (rev 574)
@@ -4,6 +4,8 @@
 #include <math.h>
 #include <stdlib.h>
 #include <string.h>
+#include <locale.h>
+#include <libintl.h>
 #include <curses.h>
 
 #ifdef DATA_DIR
@@ -12,6 +14,8 @@
 #define SSTDOC DOC_NAME
 #endif
 
+#define _(str) gettext(str)
+
 #define min(x, y)	((x)<(y)?(x):(y))
 #define max(x, y)	((x)>(y)?(x):(y))
 



From esr at mail.berlios.de  Mon Sep 18 05:49:34 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 18 Sep 2006 05:49:34 +0200
Subject: [Sst-commit-watch] r584 - trunk/src
Message-ID: <200609180349.k8I3nYaL020548@sheep.berlios.de>

Author: esr
Date: 2006-09-18 05:49:33 +0200 (Mon, 18 Sep 2006)
New Revision: 584

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/finish.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
Introduce 'coord' data structure, an (x,y) tuple.  Use it consistently in both
data structures and arguments of functions that handle coordinates.

The main benefit of this is that lots of conditional expressions become
significantly less gnarly.  We get a bit of reduction in the line count
by cutting down on pairs of coordinate assignments.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-17 23:55:46 UTC (rev 583)
+++ trunk/src/ai.c	2006-09-18 03:49:33 UTC (rev 584)
@@ -2,22 +2,23 @@
 
 static int tryexit(int lookx, int looky, int ienm, int loccom, int irun) 
 {
-    int iqx, iqy, l;
+    int l;
+    coord iq;
 
-    iqx = game.quadx+(lookx+(QUADSIZE-1))/QUADSIZE - 1;
-    iqy = game.quady+(looky+(QUADSIZE-1))/QUADSIZE - 1;
-    if (!VALID_QUADRANT(iqx,iqy) ||
-	game.state.galaxy[iqx][iqy].supernova ||
-	game.state.galaxy[iqx][iqy].klingons > 8)
+    iq.x = game.quadrant.x+(lookx+(QUADSIZE-1))/QUADSIZE - 1;
+    iq.y = game.quadrant.y+(looky+(QUADSIZE-1))/QUADSIZE - 1;
+    if (!VALID_QUADRANT(iq.x,iq.y) ||
+	game.state.galaxy[iq.x][iq.y].supernova ||
+	game.state.galaxy[iq.x][iq.y].klingons > 8)
 	return 0; /* no can do -- neg energy, supernovae, or >8 Klingons */
     if (ienm == IHR) return 0; /* Romulans cannot escape! */
     if (irun == 0) {
 	/* avoid intruding on another commander's territory */
 	if (ienm == IHC) {
 	    for_commanders(l)
-		if (game.state.cx[l]==iqx && game.state.cy[l]==iqy) return 0;
+		if (same(game.state.kcmdr[l],iq)) return 0;
 	    /* refuse to leave if currently attacking starbase */
-	    if (game.batx==game.quadx && game.baty==game.quady) return 0;
+	    if (same(game.battle, game.quadrant)) return 0;
 	}
 	/* don't leave if over 1000 units of energy */
 	if (game.kpower[loccom] > 1000.) return 0;
@@ -26,14 +27,13 @@
        We know this if either short or long range sensors are working */
     if (game.damage[DSRSENS] == 0.0 || game.damage[DLRSENS] == 0.0 ||
 	game.condit == IHDOCKED) {
-	crmena(1, ienm, 2, game.kx[loccom], game.ky[loccom]);
+	crmena(1, ienm, 2, game.ks[loccom]);
 	prout(_(" escapes to %s (and regains strength)."),
-	      cramlc(quadrant, iqx, iqy));
+	      cramlc(quadrant, iq));
     }
     /* handle local matters related to escape */
-    game.quad[game.kx[loccom]][game.ky[loccom]] = IHDOT;
-    game.kx[loccom] = game.kx[game.nenhere];
-    game.ky[loccom] = game.ky[game.nenhere];
+    game.quad[game.ks[loccom].x][game.ks[loccom].y] = IHDOT;
+    game.ks[loccom] = game.ks[game.nenhere];
     game.kavgd[loccom] = game.kavgd[game.nenhere];
     game.kpower[loccom] = game.kpower[game.nenhere];
     game.kdist[loccom] = game.kdist[game.nenhere];
@@ -41,8 +41,8 @@
     game.nenhere--;
     if (game.condit != IHDOCKED) newcnd();
     /* Handle global matters related to escape */
-    game.state.galaxy[game.quadx][game.quady].klingons--;
-    game.state.galaxy[iqx][iqy].klingons++;
+    game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons--;
+    game.state.galaxy[iq.x][iq.y].klingons++;
     if (ienm==IHS) {
 	game.ishere=0;
 	game.iscate=0;
@@ -50,14 +50,13 @@
 	game.isatb=0;
 	schedule(FSCMOVE, 0.2777);
 	unschedule(FSCDBAS);
-	game.state.isx=iqx;
-	game.state.isy=iqy;
+	game.state.kscmdr.x=iq.x;
+	game.state.kscmdr.y=iq.y;
     }
     else {
 	for_commanders(l) {
-	    if (game.state.cx[l]==game.quadx && game.state.cy[l]==game.quady) {
-		game.state.cx[l]=iqx;
-		game.state.cy[l]=iqy;
+	    if (same(game.state.kcmdr[l], game.quadrant)) {
+		game.state.kcmdr[l]=iq;
 		break;
 	    }
 	}
@@ -67,9 +66,10 @@
 }
 
 
-static void movebaddy(int comx, int comy, int loccom, int ienm) 
+static void movebaddy(coord com, int loccom, int ienm) 
 {
-    int motion, mdist, nsteps, mx, my, nextx, nexty, lookx, looky, ll;
+    int motion, mdist, nsteps, mx, my, lookx, looky, ll;
+    coord next;
     int irun = 0;
     int krawlx, krawly;
     int success;
@@ -176,14 +176,13 @@
     }
 #endif
     /* Compute preferred values of delta X and Y */
-    mx = game.sectx - comx;
-    my = game.secty - comy;
+    mx = game.sector.x - com.x;
+    my = game.sector.y - com.y;
     if (2.0 * abs(mx) < abs(my)) mx = 0;
-    if (2.0 * abs(my) < abs(game.sectx-comx)) my = 0;
+    if (2.0 * abs(my) < abs(game.sector.x-com.x)) my = 0;
     if (mx != 0) mx = mx*motion < 0 ? -1 : 1;
     if (my != 0) my = my*motion < 0 ? -1 : 1;
-    nextx = comx;
-    nexty = comy;
+    next = com;
     /* main move loop */
     for (ll = 0; ll < nsteps; ll++) {
 #ifdef DEBUG
@@ -192,8 +191,8 @@
 	}
 #endif
 	/* Check if preferred position available */
-	lookx = nextx + mx;
-	looky = nexty + my;
+	lookx = next.x + mx;
+	looky = next.y + my;
 	krawlx = mx < 0 ? 1 : -1;
 	krawly = my < 0 ? 1 : -1;
 	success = 0;
@@ -203,29 +202,29 @@
 		if (motion < 0 && tryexit(lookx, looky, ienm, loccom, irun))
 		    return;
 		if (krawlx == mx || my == 0) break;
-		lookx = nextx + krawlx;
+		lookx = next.x + krawlx;
 		krawlx = -krawlx;
 	    }
 	    else if (looky < 1 || looky > QUADSIZE) {
 		if (motion < 0 && tryexit(lookx, looky, ienm, loccom, irun))
 		    return;
 		if (krawly == my || mx == 0) break;
-		looky = nexty + krawly;
+		looky = next.y + krawly;
 		krawly = -krawly;
 	    }
 	    else if ((game.options & OPTION_RAMMING) && game.quad[lookx][looky] != IHDOT) {
 		/* See if we should ram ship */
 		if (game.quad[lookx][looky] == game.ship &&
 		    (ienm == IHC || ienm == IHS)) {
-		    ram(1, ienm, comx, comy);
+		    ram(1, ienm, com);
 		    return;
 		}
 		if (krawlx != mx && my != 0) {
-		    lookx = nextx + krawlx;
+		    lookx = next.x + krawlx;
 		    krawlx = -krawlx;
 		}
 		else if (krawly != my && mx != 0) {
-		    looky = nexty + krawly;
+		    looky = next.y + krawly;
 		    krawly = -krawly;
 		}
 		else break; /* we have failed */
@@ -233,39 +232,40 @@
 	    else success = 1;
 	}
 	if (success) {
-	    nextx = lookx;
-	    nexty = looky;
+	    next.x = lookx;
+	    next.y = looky;
 #ifdef DEBUG
 	    if (game.idebug) {
-		prout(cramlc(neither, nextx, nexty));
+		prout(cramlc(neither, next));
 	    }
 #endif
 	}
 	else break; /* done early */
     }
     /* Put commander in place within same quadrant */
-    game.quad[comx][comy] = IHDOT;
-    game.quad[nextx][nexty] = ienm;
-    if (nextx != comx || nexty != comy) {
+    game.quad[com.x][com.y] = IHDOT;
+    game.quad[next.x][next.y] = ienm;
+    if (next.x != com.x || next.y != com.y) {
 	/* it moved */
-	game.kx[loccom] = nextx;
-	game.ky[loccom] = nexty;
+	game.ks[loccom].x = next.x;
+	game.ks[loccom].y = next.y;
 	game.kdist[loccom] = game.kavgd[loccom] =
-	    sqrt(square(game.sectx-nextx)+square(game.secty-nexty));
+	    sqrt(square(game.sector.x-next.x)+square(game.sector.y-next.y));
 	if (game.damage[DSRSENS] == 0 || game.condit == IHDOCKED) {
 	    proutn("***");
 	    cramen(ienm);
-	    proutn(_(" from %s"), cramlc(2, comx, comy));
+	    proutn(_(" from %s"), cramlc(2, com));
 	    if (game.kdist[loccom] < dist1) proutn(_(" advances to "));
 	    else proutn(_(" retreats to "));
-	    prout(cramlc(sector, nextx, nexty));
+	    prout(cramlc(sector, next));
 	}
     }
 }
 
 void movcom(void) 
 {
-    int ix, iy, i;
+    coord w; 
+    int i;
 
 #ifdef DEBUG
     if (game.idebug) prout("MOVCOM");
@@ -275,19 +275,17 @@
        and do move */
     if (game.comhere) 
 	for_local_enemies(i) {
-	    ix = game.kx[i];
-	    iy = game.ky[i];
-	    if (game.quad[ix][iy] == IHC) {
-		movebaddy(ix, iy, i, IHC);
+	    w = game.ks[i];
+	    if (game.quad[w.x][w.y] == IHC) {
+		movebaddy(w, i, IHC);
 		break;
 	    }
 	}
     if (game.ishere) 
 	for_local_enemies(i) {
-	    ix = game.kx[i];
-	    iy = game.ky[i];
-	    if (game.quad[ix][iy] == IHS) {
-		movebaddy(ix, iy, i, IHS);
+	    w = game.ks[i];
+	    if (game.quad[w.x][w.y] == IHS) {
+		movebaddy(w, i, IHS);
 		break;
 	    }
 	}
@@ -296,35 +294,32 @@
        commander(s) do. */
     if (game.skill >= SKILL_EXPERT && (game.options & OPTION_MVBADDY)) 
 	for_local_enemies(i) {
-	    ix = game.kx[i];
-	    iy = game.ky[i];
-	    if (game.quad[ix][iy] == IHK || game.quad[ix][iy] == IHR)
-		movebaddy(ix, iy, i, game.quad[ix][iy]);
+	    w = game.ks[i];
+	    if (game.quad[w.x][w.y] == IHK || game.quad[w.x][w.y] == IHR)
+		movebaddy(w, i, game.quad[w.x][w.y]);
 	}
 
     sortkl();
 }
 
-static int movescom(int iqx, int iqy, int flag, int *ipage) 
+static int movescom(coord iq, int flag, int *ipage) 
 {
     int i;
 
-    if ((iqx==game.quadx && iqy==game.quady) ||
-	!VALID_QUADRANT(iqx, iqy) ||
-	game.state.galaxy[iqx][iqy].supernova ||
-	game.state.galaxy[iqx][iqy].klingons > 8) 
+    if (same(iq, game.quadrant) || !VALID_QUADRANT(iq.x, iq.y) ||
+	game.state.galaxy[iq.x][iq.y].supernova ||
+	game.state.galaxy[iq.x][iq.y].klingons > 8) 
 	return 1;
     if (flag) {
 	/* Avoid quadrants with bases if we want to avoid Enterprise */
 	for_starbases(i)
-	    if (game.state.baseqx[i]==iqx && game.state.baseqy[i]==iqy) return 1;
+	    if (game.state.baseq[i].x==iq.x && game.state.baseq[i].y==iq.y) return 1;
     }
     if (game.justin && !game.iscate) return 1;
     /* do the move */
-    game.state.galaxy[game.state.isx][game.state.isy].klingons--;
-    game.state.isx = iqx;
-    game.state.isy = iqy;
-    game.state.galaxy[game.state.isx][game.state.isy].klingons++;
+    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].klingons--;
+    game.state.kscmdr = iq;
+    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].klingons++;
     if (game.ishere) {
 	/* SC has scooted, Remove him from current quadrant */
 	game.iscate=0;
@@ -333,10 +328,9 @@
 	game.ientesc=0;
 	unschedule(FSCDBAS);
 	for_local_enemies(i) 
-	    if (game.quad[game.kx[i]][game.ky[i]] == IHS) break;
-	game.quad[game.kx[i]][game.ky[i]] = IHDOT;
-	game.kx[i] = game.kx[game.nenhere];
-	game.ky[i] = game.ky[game.nenhere];
+	    if (game.quad[game.ks[i].x][game.ks[i].y] == IHS) break;
+	game.quad[game.ks[i].x][game.ks[i].y] = IHDOT;
+	game.ks[i] = game.ks[game.nenhere];
 	game.kdist[i] = game.kdist[game.nenhere];
 	game.kavgd[i] = game.kavgd[game.nenhere];
 	game.kpower[i] = game.kpower[game.nenhere];
@@ -347,17 +341,17 @@
     }
     /* check for a helpful planet */
     for (i = 0; i < game.inplan; i++) {
-	if (game.state.plnets[i].x==game.state.isx && game.state.plnets[i].y==game.state.isy &&
+	if (game.state.plnets[i].w.x==game.state.kscmdr.x && game.state.plnets[i].w.y==game.state.kscmdr.y &&
 	    game.state.plnets[i].crystals == 1) {
 	    /* destroy the planet */
 	    DESTROY(&game.state.plnets[i]);
-	    game.state.galaxy[game.state.isx][game.state.isy].planet = NULL;
+	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = NULL;
 	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED) {
 		if (*ipage==0) pause_game(1);
 		*ipage = 1;
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"));
 		proutn(_("   a planet in "));
-		proutn(cramlc(quadrant, game.state.isx, game.state.isy));
+		proutn(cramlc(quadrant, game.state.kscmdr));
 		prout(_(" has been destroyed"));
 		prout(_("   by the Super-commander.\""));
 	    }
@@ -369,8 +363,8 @@
 			
 void scom(int *ipage)
 {
-    int i, i2, j, ideltax, ideltay, ibqx, ibqy, sx, sy, ifindit, iwhichb;
-    int iqx, iqy;
+    int i, i2, j, ideltax, ideltay, ifindit, iwhichb;
+    coord iq, sc, ibq;
     int basetbl[BASEMAX+1];
     double bdist[BASEMAX+1];
     int flag;
@@ -383,12 +377,12 @@
 	    (game.state.date-game.indate) < 3.0);
     if (game.iscate==0 && flag) {
 	/* compute move away from Enterprise */
-	ideltax = game.state.isx-game.quadx;
-	ideltay = game.state.isy-game.quady;
+	ideltax = game.state.kscmdr.x-game.quadrant.x;
+	ideltay = game.state.kscmdr.y-game.quadrant.y;
 	if (sqrt(ideltax*(double)ideltax+ideltay*(double)ideltay) > 2.0) {
 	    /* circulate in space */
-	    ideltax = game.state.isy-game.quady;
-	    ideltay = game.quadx-game.state.isx;
+	    ideltax = game.state.kscmdr.y-game.quadrant.y;
+	    ideltay = game.quadrant.x-game.state.kscmdr.x;
 	}
     }
     else {
@@ -398,13 +392,12 @@
 	    unschedule(FSCMOVE);
 	    return;
 	}
-	sx = game.state.isx;
-	sy = game.state.isy;
+	sc = game.state.kscmdr;
 	for_starbases(i) {
 	    basetbl[i] = i;
-	    ibqx = game.state.baseqx[i];
-	    ibqy = game.state.baseqy[i];
-	    bdist[i] = sqrt(square(ibqx-sx) + square(ibqy-sy));
+	    ibq.x = game.state.baseq[i].x;
+	    ibq.y = game.state.baseq[i].y;
+	    bdist[i] = sqrt(square(ibq.x-sc.x) + square(ibq.y-sc.y));
 	}
 	if (game.state.rembase > 1) {
 	    /* sort into nearest first order */
@@ -430,17 +423,17 @@
 
 	for_starbases(i2) {
 	    i = basetbl[i2];	/* bug in original had it not finding nearest*/
-	    ibqx = game.state.baseqx[i];
-	    ibqy = game.state.baseqy[i];
-	    if ((ibqx == game.quadx && ibqy == game.quady) ||
-		(ibqx == game.batx && ibqy == game.baty) ||
-		game.state.galaxy[ibqx][ibqy].supernova ||
-		game.state.galaxy[ibqx][ibqy].klingons > 8) 
+	    ibq.x = game.state.baseq[i].x;
+	    ibq.y = game.state.baseq[i].y;
+	    if ((ibq.x == game.quadrant.x && ibq.y == game.quadrant.y) ||
+		(ibq.x == game.battle.x && ibq.y == game.battle.y) ||
+		game.state.galaxy[ibq.x][ibq.y].supernova ||
+		game.state.galaxy[ibq.x][ibq.y].klingons > 8) 
 		continue;
 	    /* if there is a commander, an no other base is appropriate,
 	       we will take the one with the commander */
 	    for_commanders (j) {
-		if (ibqx==game.state.cx[j] && ibqy==game.state.cy[j] && ifindit!= 2) {
+		if (ibq.x==game.state.kcmdr[j].x && ibq.y==game.state.kcmdr[j].y && ifindit!= 2) {
 		    ifindit = 2;
 		    iwhichb = i;
 		    break;
@@ -453,11 +446,11 @@
 	    }
 	}
 	if (ifindit==0) return; /* Nothing suitable -- wait until next time*/
-	ibqx = game.state.baseqx[iwhichb];
-	ibqy = game.state.baseqy[iwhichb];
+	ibq.x = game.state.baseq[iwhichb].x;
+	ibq.y = game.state.baseq[iwhichb].y;
 	/* decide how to move toward base */
-	ideltax = ibqx - game.state.isx;
-	ideltay = ibqy - game.state.isy;
+	ideltax = ibq.x - game.state.kscmdr.x;
+	ideltay = ibq.y - game.state.kscmdr.y;
     }
     /* Maximum movement is 1 quadrant in either or both axis */
     if (ideltax > 1) ideltax = 1;
@@ -466,34 +459,34 @@
     if (ideltay < -1) ideltay = -1;
 
     /* try moving in both x and y directions */
-    iqx = game.state.isx + ideltax;
-    iqy = game.state.isy + ideltax;
-    if (movescom(iqx, iqy, flag, ipage)) {
+    iq.x = game.state.kscmdr.x + ideltax;
+    iq.y = game.state.kscmdr.y + ideltax;
+    if (movescom(iq, flag, ipage)) {
 	/* failed -- try some other maneuvers */
 	if (ideltax==0 || ideltay==0) {
 	    /* attempt angle move */
 	    if (ideltax != 0) {
-		iqy = game.state.isy + 1;
-		if (movescom(iqx, iqy, flag, ipage)) {
-		    iqy = game.state.isy - 1;
-		    movescom(iqx, iqy, flag, ipage);
+		iq.y = game.state.kscmdr.y + 1;
+		if (movescom(iq, flag, ipage)) {
+		    iq.y = game.state.kscmdr.y - 1;
+		    movescom(iq, flag, ipage);
 		}
 	    }
 	    else {
-		iqx = game.state.isx + 1;
-		if (movescom(iqx, iqy, flag, ipage)) {
-		    iqx = game.state.isx - 1;
-		    movescom(iqx, iqy, flag, ipage);
+		iq.x = game.state.kscmdr.x + 1;
+		if (movescom(iq, flag, ipage)) {
+		    iq.x = game.state.kscmdr.x - 1;
+		    movescom(iq, flag, ipage);
 		}
 	    }
 	}
 	else {
 	    /* try moving just in x or y */
-	    iqy = game.state.isy;
-	    if (movescom(iqx, iqy, flag, ipage)) {
-		iqy = game.state.isy + ideltay;
-		iqx = game.state.isx;
-		movescom(iqx, iqy, flag, ipage);
+	    iq.y = game.state.kscmdr.y;
+	    if (movescom(iq, flag, ipage)) {
+		iq.y = game.state.kscmdr.y + ideltay;
+		iq.x = game.state.kscmdr.x;
+		movescom(iq, flag, ipage);
 	    }
 	}
     }
@@ -502,9 +495,8 @@
 	unschedule(FSCMOVE);
     }
     else for_starbases(i) {
-	ibqx = game.state.baseqx[i];
-	ibqy = game.state.baseqy[i];
-	if (ibqx==game.state.isx && ibqy == game.state.isy && game.state.isx != game.batx && game.state.isy != game.baty) {
+	ibq = game.state.baseq[i];
+	if (same(ibq, game.state.kscmdr) && same(game.state.kscmdr, game.battle)) {
 	    /* attack the base */
 	    if (flag) return; /* no, don't attack base! */
 	    game.iseenit = 0;
@@ -518,7 +510,7 @@
 	    if (*ipage == 0)  pause_game(1);
 	    *ipage=1;
 	    proutn(_("Lt. Uhura-  \"Captain, the starbase in "));
-	    proutn(cramlc(quadrant, game.state.isx, game.state.isy));
+	    proutn(cramlc(quadrant, game.state.kscmdr));
 	    skip(1);
 	    prout(_("   reports that it is under attack from the Klingon Super-commander."));
 	    proutn(_("   It can survive until stardate %d.\""),
@@ -538,33 +530,34 @@
 #endif
 	(Rand() > 0.2 ||
 	 (game.damage[DRADIO] > 0.0 && game.condit != IHDOCKED) ||
-	 !game.state.galaxy[game.state.isx][game.state.isy].charted))
+	 !game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].charted))
 	return;
     if (*ipage==0) pause_game(1);
     *ipage = 1;
     prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"));
     proutn(_("   the Super-commander is in "));
-    proutn(cramlc(quadrant, game.state.isx, game.state. isy));
+    proutn(cramlc(quadrant, game.state.kscmdr));
     prout(".\"");
     return;
 }
 
 void movetho(void)
 {
-    int idx, idy, im, i, dum, my;
+    int idx, idy, im, i;
+    coord dummy;
     /* Move the Tholian */
     if (game.ithere==0 || game.justin == 1) return;
 
-    if (game.ithx == 1 && game.ithy == 1) {
+    if (game.tholian.x == 1 && game.tholian.y == 1) {
 	idx = 1; idy = QUADSIZE;
     }
-    else if (game.ithx == 1 && game.ithy == QUADSIZE) {
+    else if (game.tholian.x == 1 && game.tholian.y == QUADSIZE) {
 	idx = QUADSIZE; idy = QUADSIZE;
     }
-    else if (game.ithx == QUADSIZE && game.ithy == QUADSIZE) {
+    else if (game.tholian.x == QUADSIZE && game.tholian.y == QUADSIZE) {
 	idx = QUADSIZE; idy = 1;
     }
-    else if (game.ithx == QUADSIZE && game.ithy == 1) {
+    else if (game.tholian.x == QUADSIZE && game.tholian.y == 1) {
 	idx = 1; idy = 1;
     }
     else {
@@ -575,27 +568,27 @@
 
     /* Do nothing if we are blocked */
     if (game.quad[idx][idy]!= IHDOT && game.quad[idx][idy]!= IHWEB) return;
-    game.quad[game.ithx][game.ithy] = IHWEB;
+    game.quad[game.tholian.x][game.tholian.y] = IHWEB;
 
-    if (game.ithx != idx) {
+    if (game.tholian.x != idx) {
 	/* move in x axis */
-	im = fabs((double)idx - game.ithx)/((double)idx - game.ithx);
-	while (game.ithx != idx) {
-	    game.ithx += im;
-	    if (game.quad[game.ithx][game.ithy]==IHDOT) game.quad[game.ithx][game.ithy] = IHWEB;
+	im = fabs((double)idx - game.tholian.x)/((double)idx - game.tholian.x);
+	while (game.tholian.x != idx) {
+	    game.tholian.x += im;
+	    if (game.quad[game.tholian.x][game.tholian.y]==IHDOT) game.quad[game.tholian.x][game.tholian.y] = IHWEB;
 	}
     }
-    else if (game.ithy != idy) {
+    else if (game.tholian.y != idy) {
 	/* move in y axis */
-	im = fabs((double)idy - game.ithy)/((double)idy - game.ithy);
-	while (game.ithy != idy) {
-	    game.ithy += im;
-	    if (game.quad[game.ithx][game.ithy]==IHDOT) game.quad[game.ithx][game.ithy] = IHWEB;
+	im = fabs((double)idy - game.tholian.y)/((double)idy - game.tholian.y);
+	while (game.tholian.y != idy) {
+	    game.tholian.y += im;
+	    if (game.quad[game.tholian.x][game.tholian.y]==IHDOT) game.quad[game.tholian.x][game.tholian.y] = IHWEB;
 	}
     }
-    game.quad[game.ithx][game.ithy] = IHT;
-    game.kx[game.nenhere]=game.ithx;
-    game.ky[game.nenhere]=game.ithy;
+    game.quad[game.tholian.x][game.tholian.y] = IHT;
+    game.ks[game.nenhere].x=game.tholian.x;
+    game.ks[game.nenhere].y=game.tholian.y;
 
     /* check to see if all holes plugged */
     for_sectors(i) {
@@ -605,11 +598,11 @@
 	if (game.quad[i][QUADSIZE]!=IHWEB && game.quad[i][QUADSIZE]!=IHT) return;
     }
     /* All plugged up -- Tholian splits */
-    game.quad[game.ithx][game.ithy]=IHWEB;
-    dropin(IHBLANK, &dum, &my);
-    crmena(1,IHT, 2, game.ithx, game.ithy);
+    game.quad[game.tholian.x][game.tholian.y]=IHWEB;
+    dropin(IHBLANK, &dummy);
+    crmena(1,IHT, 2, game.tholian);
     prout(_(" completes web."));
-    game.ithere = game.ithx = game.ithy = 0;
+    game.ithere = game.tholian.x = game.tholian.y = 0;
     game.nenhere--;
     return;
 }

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-17 23:55:46 UTC (rev 583)
+++ trunk/src/battle.c	2006-09-18 03:49:33 UTC (rev 584)
@@ -129,7 +129,7 @@
     }
 }
 
-void ram(int ibumpd, int ienm, int ix, int iy)
+void ram(int ibumpd, int ienm, coord w)
 {
     double type = 1.0, extradm;
     int icas, l;
@@ -148,10 +148,10 @@
     case IHQUEST: type = 4.0; break;
     }
     proutn(ibumpd ? _(" rammed by ") : _(" rams "));
-    crmena(0, ienm, 2, ix, iy);
+    crmena(0, ienm, 2, w);
     if (ibumpd) proutn(_(" (original position)"));
     skip(1);
-    deadkl(ix, iy, ienm, game.sectx, game.secty);
+    deadkl(w.x, w.y, ienm, game.sector.x, game.sector.y);
     proutn("***");
     crmshp();
     prout(_(" heavily damaged."));
@@ -177,14 +177,16 @@
 
 void torpedo(double course, double r, int inx, int iny, double *hit, int i, int n)
 {
-    int l, iquad=0, ix=0, iy=0, jx=0, jy=0, shoved=0, ll;
+    int l, iquad=0, jx=0, jy=0, shoved=0, ll;
 	
     double ac=course + 0.25*r;
     double angle = (15.0-ac)*0.5235988;
     double bullseye = (15.0 - course)*0.5235988;
     double deltax=-sin(angle), deltay=cos(angle), x=inx, y=iny, bigger;
     double ang, temp, xx, yy, kp, h1;
+    coord w;
 
+    w.x = w.y = 0;
     bigger = fabs(deltax);
     if (fabs(deltay) > bigger) bigger = fabs(deltay);
     deltax /= bigger;
@@ -196,12 +198,12 @@
     /* Loop to move a single torpedo */
     for (l=1; l <= 15; l++) {
 	x += deltax;
-	ix = x + 0.5;
+	w.x = x + 0.5;
 	y += deltay;
-	iy = y + 0.5;
-	if (!VALID_SECTOR(ix, iy)) break;
-	iquad=game.quad[ix][iy];
-	tracktorpedo(ix, iy, l, i, n, iquad);
+	w.y = y + 0.5;
+	if (!VALID_SECTOR(w.x, w.y)) break;
+	iquad=game.quad[w.x][w.y];
+	tracktorpedo(w.x, w.y, l, i, n, iquad);
 	if (iquad==IHDOT) continue;
 	/* hit something */
 	setwnd(message_window);
@@ -214,7 +216,7 @@
 	    crmshp();
 	    prout(".");
 	    *hit = 700.0 + 100.0*Rand() -
-		1000.0*sqrt(square(ix-inx)+square(iy-iny))*
+		1000.0*sqrt(square(w.x-inx)+square(w.y-iny))*
 		fabs(sin(bullseye-angle));
 	    *hit = fabs(*hit);
 	    newcnd(); /* we're blown out of dock */
@@ -225,8 +227,8 @@
 	    if (fabs(cos(ang)) > temp) temp = fabs(cos(ang));
 	    xx = -sin(ang)/temp;
 	    yy = cos(ang)/temp;
-	    jx=ix+xx+0.5;
-	    jy=iy+yy+0.5;
+	    jx=w.x+xx+0.5;
+	    jy=w.y+yy+0.5;
 	    if (!VALID_SECTOR(jx, jy)) return;
 	    if (game.quad[jx][jy]==IHBLANK) {
 		finish(FHOLE);
@@ -236,8 +238,8 @@
 		/* can't move into object */
 		return;
 	    }
-	    game.sectx = jx;
-	    game.secty = jy;
+	    game.sector.x = jx;
+	    game.sector.y = jy;
 	    crmshp();
 	    shoved = 1;
 	    break;
@@ -245,7 +247,7 @@
 	case IHC: /* Hit a commander */
 	case IHS:
 	    if (Rand() <= 0.05) {
-		crmena(1, iquad, 2, ix, iy);
+		crmena(1, iquad, 2, w);
 		prout(_(" uses anti-photon device;"));
 		prout(_("   torpedo neutralized."));
 		return;
@@ -254,34 +256,34 @@
 	case IHK:
 	    /* find the enemy */
 	    for_local_enemies(ll)
-		if (ix==game.kx[ll] && iy==game.ky[ll]) break;
+		if (w.x==game.ks[ll].x && w.y==game.ks[ll].y) break;
 	    kp = fabs(game.kpower[ll]);
 	    h1 = 700.0 + 100.0*Rand() -
-		1000.0*sqrt(square(ix-inx)+square(iy-iny))*
+		1000.0*sqrt(square(w.x-inx)+square(w.y-iny))*
 		fabs(sin(bullseye-angle));
 	    h1 = fabs(h1);
 	    if (kp < h1) h1 = kp;
 	    game.kpower[ll] -= (game.kpower[ll]<0 ? -h1 : h1);
 	    if (game.kpower[ll] == 0) {
-		deadkl(ix, iy, iquad, ix, iy);
+		deadkl(w.x, w.y, iquad, w.x, w.y);
 		return;
 	    }
-	    crmena(1, iquad, 2, ix, iy);
+	    crmena(1, iquad, 2, w);
 	    /* If enemy damaged but not destroyed, try to displace */
 	    ang = angle + 2.5*(Rand()-0.5);
 	    temp = fabs(sin(ang));
 	    if (fabs(cos(ang)) > temp) temp = fabs(cos(ang));
 	    xx = -sin(ang)/temp;
 	    yy = cos(ang)/temp;
-	    jx=ix+xx+0.5;
-	    jy=iy+yy+0.5;
+	    jx=w.x+xx+0.5;
+	    jy=w.y+yy+0.5;
 	    if (!VALID_SECTOR(jx, jy)) {
 		prout(_(" damaged but not destroyed."));
 		return;
 	    }
 	    if (game.quad[jx][jy]==IHBLANK) {
 		prout(_(" buffeted into black hole."));
-		deadkl(ix, iy, iquad, jx, jy);
+		deadkl(w.x, w.y, iquad, jx, jy);
 		return;
 	    }
 	    if (game.quad[jx][jy]!=IHDOT) {
@@ -290,37 +292,37 @@
 		return;
 	    }
 	    proutn(_(" damaged--"));
-	    game.kx[ll] = jx;
-	    game.ky[ll] = jy;
+	    game.ks[ll].x = jx;
+	    game.ks[ll].y = jy;
 	    shoved = 1;
 	    break;
 	case IHB: /* Hit a base */
 	    skip(1);
 	    prout(_("***STARBASE DESTROYED.."));
 	    for_starbases(ll) {
-		if (game.state.baseqx[ll]==game.quadx && game.state.baseqy[ll]==game.quady) {
-		    game.state.baseqx[ll]=game.state.baseqx[game.state.rembase];
-		    game.state.baseqy[ll]=game.state.baseqy[game.state.rembase];
+		if (game.state.baseq[ll].x==game.quadrant.x && game.state.baseq[ll].y==game.quadrant.y) {
+		    game.state.baseq[ll].x=game.state.baseq[game.state.rembase].x;
+		    game.state.baseq[ll].y=game.state.baseq[game.state.rembase].y;
 		    break;
 		}
 	    }
-	    game.quad[ix][iy]=IHDOT;
+	    game.quad[w.x][w.y]=IHDOT;
 	    game.state.rembase--;
-	    game.basex=game.basey=0;
-	    game.state.galaxy[game.quadx][game.quady].starbase--;
-	    game.state.chart[game.quadx][game.quady].starbase--;
+	    game.base.x=game.base.y=0;
+	    game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase--;
+	    game.state.chart[game.quadrant.x][game.quadrant.y].starbase--;
 	    game.state.basekl++;
 	    newcnd();
 	    return;
 	case IHP: /* Hit a planet */
-	    crmena(1, iquad, 2, ix, iy);
+	    crmena(1, iquad, 2, w);
 	    prout(_(" destroyed."));
 	    game.state.nplankl++;
-	    game.state.galaxy[game.quadx][game.quady].planet = NULL;
+	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = NULL;
 	    DESTROY(&game.state.plnets[game.iplnet]);
 	    game.iplnet = 0;
-	    game.plnetx = game.plnety = 0;
-	    game.quad[ix][iy] = IHDOT;
+	    game.plnet.x = game.plnet.y = 0;
+	    game.quad[w.x][w.y] = IHDOT;
 	    if (game.landed==1) {
 		/* captain perishes on planet */
 		finish(FDPLANET);
@@ -328,10 +330,10 @@
 	    return;
 	case IHSTAR: /* Hit a star */
 	    if (Rand() > 0.10) {
-		nova(ix, iy);
+		nova(w.x, w.y);
 		return;
 	    }
-	    crmena(1, IHSTAR, 2, ix, iy);
+	    crmena(1, IHSTAR, 2, w);
 	    prout(_(" unaffected by photon blast."));
 	    return;
 	case IHQUEST: /* Hit a thingy */
@@ -344,7 +346,7 @@
 		proutn(_("Mr. Spock-"));
 		prouts(_("  \"Fascinating!\""));
 		skip(1);
-		deadkl(ix, iy, iquad, ix, iy);
+		deadkl(w.x, w.y, iquad, w.x, w.y);
 	    } else {
 		/*
 		 * Stas Sergeev added the possibility that
@@ -357,7 +359,7 @@
 	    return;
 	case IHBLANK: /* Black hole */
 	    skip(1);
-	    crmena(1, IHBLANK, 2, ix, iy);
+	    crmena(1, IHBLANK, 2, w);
 	    prout(_(" swallows torpedo."));
 	    return;
 	case IHWEB: /* hit the web */
@@ -366,36 +368,36 @@
 	    return;
 	case IHT:  /* Hit a Tholian */
 	    h1 = 700.0 + 100.0*Rand() -
-		1000.0*sqrt(square(ix-inx)+square(iy-iny))*
+		1000.0*sqrt(square(w.x-inx)+square(w.y-iny))*
 		fabs(sin(bullseye-angle));
 	    h1 = fabs(h1);
 	    if (h1 >= 600) {
-		game.quad[ix][iy] = IHDOT;
+		game.quad[w.x][w.y] = IHDOT;
 		game.ithere = 0;
-		game.ithx = game.ithy = 0;
-		deadkl(ix, iy, iquad, ix, iy);
+		game.tholian.x = game.tholian.y = 0;
+		deadkl(w.x, w.y, iquad, w.x, w.y);
 		return;
 	    }
 	    skip(1);
-	    crmena(1, IHT, 2, ix, iy);
+	    crmena(1, IHT, 2, w);
 	    if (Rand() > 0.05) {
 		prout(_(" survives photon blast."));
 		return;
 	    }
 	    prout(_(" disappears."));
-	    game.quad[ix][iy] = IHWEB;
-	    game.ithere = game.ithx = game.ithy = 0;
+	    game.quad[w.x][w.y] = IHWEB;
+	    game.ithere = game.tholian.x = game.tholian.y = 0;
 	    game.nenhere--;
 	    {
-		int dum, my;
-		dropin(IHBLANK, &dum, &my);
+		coord dummy;
+		dropin(IHBLANK, &dummy);
 	    }
 	    return;
 					
 	default: /* Problem! */
 	    skip(1);
 	    proutn("Don't know how to handle collision with ");
-	    crmena(1, iquad, 2, ix, iy);
+	    crmena(1, iquad, 2, w);
 	    skip(1);
 	    return;
 	}
@@ -405,11 +407,13 @@
 	setwnd(message_window);
     }
     if (shoved) {
+	coord w;
+	w.x = jx; w.y = jy;
 	game.quad[jx][jy]=iquad;
-	game.quad[ix][iy]=IHDOT;
-	prout(_(" displaced by blast to %s "), cramlc(sector, jx, jy));
+	game.quad[w.x][w.y]=IHDOT;
+	prout(_(" displaced by blast to %s "), cramlc(sector, w));
 	for_local_enemies(ll)
-	    game.kdist[ll] = game.kavgd[ll] = sqrt(square(game.sectx-game.kx[ll])+square(game.secty-game.ky[ll]));
+	    game.kdist[ll] = game.kavgd[ll] = sqrt(square(game.sector.x-game.ks[ll].x)+square(game.sector.y-game.ks[ll].y));
 	sortkl();
 	return;
     }
@@ -457,10 +461,11 @@
 void attack(int torps_ok) 
 {
     /* torps_ok == 0 forces use of phasers in an attack */
-    int percent, ihurt=0, l, i=0, jx, jy, iquad, itflag;
+    int percent, ihurt=0, l, i=0, iquad, itflag;
     int atackd = 0, attempt = 0;
     double hit;
     double pfac, dustfac, hitmax=0.0, hittot=0.0, chgfac=1.0, r;
+    coord jay;
 
     game.iattak = 1;
     if (game.alldone) return;
@@ -487,9 +492,9 @@
 	/* Increase chance of photon torpedos if docked or enemy energy low */
 	if (game.condit == IHDOCKED) r *= 0.25;
 	if (game.kpower[l] < 500) r *= 0.25; 
-	jx = game.kx[l];
-	jy = game.ky[l];
-	iquad = game.quad[jx][jy];
+	jay.x = game.ks[l].x;
+	jay.y = game.ks[l].y;
+	iquad = game.quad[jay.x][jay.y];
 	if (iquad==IHT || (iquad==IHQUEST && !iqengry)) continue;
 	itflag = (iquad == IHK && r > 0.0005) || !torps_ok ||
 	    (iquad==IHC && r > 0.015) ||
@@ -505,21 +510,21 @@
 	    game.kpower[l] *= 0.75;
 	}
 	else { /* Enemy used photon torpedo */
-	    double course = 1.90985*atan2((double)game.secty-jy, (double)jx-game.sectx);
+	    double course = 1.90985*atan2((double)game.sector.y-jay.y, (double)jay.x-game.sector.x);
 	    hit = 0;
 	    proutn(_("***TORPEDO INCOMING"));
 	    if (game.damage[DSRSENS] <= 0.0) {
 		proutn(_(" From "));
-		crmena(0, iquad, i, jx, jy);
+		crmena(0, iquad, i, jay);
 	    }
 	    attempt = 1;
 	    prout("  ");
 	    r = (Rand()+Rand())*0.5 -0.5;
 	    r += 0.002*game.kpower[l]*r;
-	    torpedo(course, r, jx, jy, &hit, 1, 1);
+	    torpedo(course, r, jay.x, jay.y, &hit, 1, 1);
 	    if (KLINGREM==0) 
 		finish(FWON); /* Klingons did themselves in! */
-	    if (game.state.galaxy[game.quadx][game.quady].supernova || game.alldone) 
+	    if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova || game.alldone) 
 		return; /* Supernova or finished */
 	    if (hit == 0) continue;
 	}
@@ -539,7 +544,7 @@
 	/* It's a hit -- print out hit size */
 	atackd = 1; /* We weren't going to check casualties, etc. if
 		       shields were down for some strange reason. This
-		       doesn't make any sense, so I've fixed it */
+		       doesn't make any sense, so I've fw.xed it */
 	ihurt = 1;
 	proutn(_("%d unit hit"), (int)hit);
 	if ((game.damage[DSRSENS] > 0 && itflag) || game.skill<=SKILL_FAIR) {
@@ -548,7 +553,7 @@
 	}
 	if (game.damage[DSRSENS] <= 0.0 && itflag) {
 	    proutn(_(" from "));
-	    crmena(0, iquad, i, jx, jy);
+	    crmena(0, iquad, i, jay);
 	}
 	skip(1);
 	/* Decide if hit is critical */
@@ -601,15 +606,16 @@
 void deadkl(int ix, int iy, int type, int ixx, int iyy) 
 {
     /* Added ixx and iyy allow enemy to "move" before dying */
-
+    coord mv;
     int i,j;
 
+    mv.x = ixx; mv.y = iyy;
     skip(1);
-    crmena(1, type, 2, ixx, iyy);
+    crmena(1, type, 2, mv);
     /* Decide what kind of enemy it is and update approriately */
     if (type == IHR) {
 	/* chalk up a Romulan */
-	game.state.galaxy[game.quadx][game.quady].romulans--;
+	game.state.galaxy[game.quadrant.x][game.quadrant.y].romulans--;
 	game.irhere--;
 	game.state.nromrem--;
     }
@@ -619,21 +625,20 @@
     }
     else if (type == IHQUEST) {
 	/* Killed a Thingy */
-	iqhere=iqengry=thingx=thingy=0;
+	iqhere=iqengry=thing.x=thing.y=0;
     }
     else {
 	/* Some type of a Klingon */
-	game.state.galaxy[game.quadx][game.quady].klingons--;
+	game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons--;
 	game.klhere--;
 	switch (type) {
 	case IHC:
 	    game.comhere = 0;
 	    for_commanders (i)
-		if (game.state.cx[i]==game.quadx && game.state.cy[i]==game.quady) break;
-	    game.state.cx[i] = game.state.cx[game.state.remcom];
-	    game.state.cy[i] = game.state.cy[game.state.remcom];
-	    game.state.cx[game.state.remcom] = 0;
-	    game.state.cy[game.state.remcom] = 0;
+		if (game.state.kcmdr[i].x==game.quadrant.x && game.state.kcmdr[i].y==game.quadrant.y) break;
+	    game.state.kcmdr[i] = game.state.kcmdr[game.state.remcom];
+	    game.state.kcmdr[game.state.remcom].x = 0;
+	    game.state.kcmdr[game.state.remcom].y = 0;
 	    game.state.remcom--;
 	    unschedule(FTBEAM);
 	    if (game.state.remcom != 0)
@@ -644,7 +649,7 @@
 	    break;
 	case IHS:
 	    game.state.nscrem--;
-	    game.ishere = game.state.isx = game.state.isy = game.isatb = game.iscate = 0;
+	    game.ishere = game.state.kscmdr.x = game.state.kscmdr.y = game.isatb = game.iscate = 0;
 	    unschedule(FSCMOVE);
 	    unschedule(FSCDBAS);
 	    break;
@@ -659,21 +664,20 @@
     game.state.remtime = game.state.remres/(game.state.remkl + 4*game.state.remcom);
 
     /* Remove enemy ship from arrays describing local game.conditions */
-    if (is_scheduled(FCDBAS) && game.batx==game.quadx && game.baty==game.quady && type==IHC)
+    if (is_scheduled(FCDBAS) && game.battle.x==game.quadrant.x && game.battle.y==game.quadrant.y && type==IHC)
 	unschedule(FCDBAS);
     for_local_enemies(i)
-	if (game.kx[i]==ix && game.ky[i]==iy) break;
+	if (game.ks[i].x==ix && game.ks[i].y==iy) break;
     game.nenhere--;
     if (i <= game.nenhere)  {
 	for (j=i; j<=game.nenhere; j++) {
-	    game.kx[j] = game.kx[j+1];
-	    game.ky[j] = game.ky[j+1];
+	    game.ks[j] = game.ks[j+1];
 	    game.kpower[j] = game.kpower[j+1];
 	    game.kavgd[j] = game.kdist[j] = game.kdist[j+1];
 	}
     }
-    game.kx[game.nenhere+1] = 0;
-    game.ky[game.nenhere+1] = 0;
+    game.ks[game.nenhere+1].x = 0;
+    game.ks[game.nenhere+1].x = 0;
     game.kdist[game.nenhere+1] = 0;
     game.kavgd[game.nenhere+1] = 0;
     game.kpower[game.nenhere+1] = 0;
@@ -688,8 +692,8 @@
 	huh();
 	return 1;
     }
-    deltx = 0.1*(y - game.secty);
-    delty = 0.1*(game.sectx - x);
+    deltx = 0.1*(y - game.sector.y);
+    delty = 0.1*(game.sector.x - x);
     if (deltx==0 && delty== 0) {
 	skip(1);
 	prout(_("Spock-  \"Bridge to sickbay.  Dr. McCoy,"));
@@ -822,8 +826,8 @@
 	}
 	if (game.shldup || game.condit == IHDOCKED) 
 	    r *= 1.0 + 0.0001*game.shield;
-	torpedo(course[i], r, game.sectx, game.secty, &dummy, i, n);
-	if (game.alldone || game.state.galaxy[game.quadx][game.quady].supernova)
+	torpedo(course[i], r, game.sector.x, game.sector.y, &dummy, i, n);
+	if (game.alldone || game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova)
 	    return;
     }
     if (KLINGREM==0) finish(FWON);
@@ -1071,8 +1075,8 @@
     case MANUAL:
 	rpow = 0.0;
 	for (k = 1; k <= game.nenhere;) {
-	    int ii = game.kx[k], jj = game.ky[k];
-	    int ienm = game.quad[ii][jj];
+	    coord aim = game.ks[k];
+	    int ienm = game.quad[aim.x][aim.y];
 	    if (msgflag) {
 		proutn(_("Energy available= %.2f"),
 		       game.energy-.006-(ifast?200:0));
@@ -1080,7 +1084,7 @@
 		msgflag = 0;
 		rpow = 0.0;
 	    }
-	    if (game.damage[DSRSENS] && !(abs(game.sectx-ii) < 2 && abs(game.secty-jj) < 2) &&
+	    if (game.damage[DSRSENS] && !(abs(game.sector.x-aim.x) < 2 && abs(game.sector.y-aim.y) < 2) &&
 		(ienm == IHC || ienm == IHS)) {
 		cramen(ienm);
 		prout(_(" can't be located without short range scan."));
@@ -1101,7 +1105,7 @@
 		else proutn("??");
 		proutn(")  ");
 		proutn(_("units to fire at "));
-		crmena(0, ienm, 2, ii, jj);
+		crmena(0, ienm, 2, aim);
 		proutn("-  ");
 		key = scan();
 	    }
@@ -1179,7 +1183,8 @@
 void hittem(double *hits) 
 {
     double kp, kpow, wham, hit, dustfac, kpini;
-    int nenhr2=game.nenhere, k=1, kk=1, ii, jj, ienm;
+    int nenhr2=game.nenhere, k=1, kk=1, ienm;
+    coord w;
 
     skip(1);
 
@@ -1192,21 +1197,20 @@
 	if (PHASEFAC*hit < kp) kp = PHASEFAC*hit;
 	game.kpower[kk] -= (game.kpower[kk] < 0 ? -kp: kp);
 	kpow = game.kpower[kk];
-	ii = game.kx[kk];
-	jj = game.ky[kk];
+	w = game.ks[kk];
 	if (hit > 0.005) {
 	    if (game.damage[DSRSENS]==0)
-		boom(ii, jj);
+		boom(w.x, w.y);
 	    proutn(_("%d unit hit on "), (int)hit);
 	}
 	else
 	    proutn(_("Very small hit on "));
-	ienm = game.quad[ii][jj];
+	ienm = game.quad[w.x][w.y];
 	if (ienm==IHQUEST) iqengry=1;
-	crmena(0,ienm,2,ii,jj);
+	crmena(0,ienm,2,w);
 	skip(1);
 	if (kpow == 0) {
-	    deadkl(ii, jj, ienm, ii, jj);
+	    deadkl(w.x, w.y, ienm, w.x, w.y);
 	    if (KLINGREM==0) finish(FWON);
 	    if (game.alldone) return;
 	    kk--; /* don't do the increment */
@@ -1215,7 +1219,7 @@
 	    if (kpow > 0 && Rand() >= 0.9 &&
 		kpow <= ((0.4 + 0.4*Rand())*kpini)) {
 		prout(_("***Mr. Spock-  \"Captain, the vessel at "),
-		      cramlc(sector,ii,jj));
+		      cramlc(sector, w));
 		prout(_("   has just lost its firepower.\""));
 		game.kpower[kk] = -kpow;
 	    }

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-17 23:55:46 UTC (rev 583)
+++ trunk/src/events.c	2006-09-18 03:49:33 UTC (rev 584)
@@ -99,7 +99,7 @@
 	    ipage=1;
 	    snova(0,0);
 	    schedule(FSNOVA, expran(0.5*game.intime));
-	    if (game.state.galaxy[game.quadx][game.quady].supernova) return;
+	    if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova) return;
 	    break;
 	case FSPY: /* Check with spy to see if S.C. should tractor beam */
 	    if (game.state.nscrem == 0 ||
@@ -113,7 +113,7 @@
 		 (game.torps < 5 || game.damage[DPHOTON] > 0))) {
 		/* Tractor-beam her! */
 		istract=1;
-		yank = square(game.state.isx-game.quadx) + square(game.state.isy-game.quady);
+		yank = square(game.state.kscmdr.x-game.quadrant.x) + square(game.state.kscmdr.y-game.quadrant.y);
 		/********* fall through to FTBEAM code ***********/
 	    }
 	    else return;
@@ -124,7 +124,7 @@
 		    break;
 		}
 		i = Rand()*game.state.remcom+1.0;
-		yank = square(game.state.cx[i]-game.quadx) + square(game.state.cy[i]-game.quady);
+		yank = square(game.state.kcmdr[i].x-game.quadrant.x) + square(game.state.kcmdr[i].y-game.quadrant.y);
 		if (istract || game.condit == IHDOCKED || yank == 0) {
 		    /* Drats! Have to reschedule */
 		    schedule(FTBEAM, 
@@ -163,19 +163,19 @@
 		}
 	    }
 	    if (line==0) {
-		game.quadx = game.state.isx;
-		game.quady = game.state.isy;
+		game.quadrant.x = game.state.kscmdr.x;
+		game.quadrant.y = game.state.kscmdr.y;
 	    }
 	    else {
-		game.quadx = game.state.cx[i];
-		game.quady = game.state.cy[i];
+		game.quadrant.x = game.state.kcmdr[i].x;
+		game.quadrant.y = game.state.kcmdr[i].y;
 	    }
-	    iran(QUADSIZE, &game.sectx, &game.secty);
+	    iran(QUADSIZE, &game.sector.x, &game.sector.y);
 	    crmshp();
 	    proutn(_(" is pulled to "));
-	    proutn(cramlc(quadrant, game.quadx, game.quady));
+	    proutn(cramlc(quadrant, game.quadrant));
 	    proutn(", ");
-	    prout(cramlc(sector, game.sectx, game.secty));
+	    prout(cramlc(sector, game.sector));
 	    if (game.resting) {
 		prout(_("(Remainder of rest/repair period cancelled.)"));
 		game.resting = 0;
@@ -209,9 +209,9 @@
 	    i = 0;
 	    for_starbases(j) {
 		for_commanders(k)
-		    if (game.state.baseqx[j]==game.state.cx[k] && game.state.baseqy[j]==game.state.cy[k] &&
-			(game.state.baseqx[j]!=game.quadx || game.state.baseqy[j]!=game.quady) &&
-			(game.state.baseqx[j]!=game.state.isx || game.state.baseqy[j]!=game.state.isy)) {
+		    if (game.state.baseq[j].x==game.state.kcmdr[k].x && game.state.baseq[j].y==game.state.kcmdr[k].y &&
+			(game.state.baseq[j].x!=game.quadrant.x || game.state.baseq[j].y!=game.quadrant.y) &&
+			(game.state.baseq[j].x!=game.state.kscmdr.x || game.state.baseq[j].y!=game.state.kscmdr.y)) {
 			i = 1;
 			break;
 		    }
@@ -224,8 +224,8 @@
 		break;
 	    }
 	    /* commander + starbase combination found -- launch attack */
-	    game.batx = game.state.baseqx[j];
-	    game.baty = game.state.baseqy[j];
+	    game.battle.x = game.state.baseq[j].x;
+	    game.battle.y = game.state.baseq[j].y;
 	    schedule(FCDBAS, 1.0+3.0*Rand());
 	    if (game.isatb) /* extra time if SC already attacking */
 		postpone(FCDBAS, scheduled(FSCDBAS)-game.state.date);
@@ -238,7 +238,7 @@
 	    ipage = 1;
 	    skip(1);
 	    proutn(_("Lt. Uhura-  \"Captain, the starbase in "));
-	    prout(cramlc(quadrant, game.batx, game.baty));
+	    prout(cramlc(quadrant, game.battle));
 	    prout(_("   reports that it is under attack and that it can"));
 	    proutn(_("   hold out only until stardate %d"),
 		   (int)scheduled(FCDBAS));
@@ -256,33 +256,33 @@
 	case FSCDBAS: /* Supercommander destroys base */
 	    unschedule(FSCDBAS);
 	    game.isatb = 2;
-	    if (!game.state.galaxy[game.state.isx][game.state.isy].starbase) 
+	    if (!game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].starbase) 
 		break; /* WAS RETURN! */
-	    ixhold = game.batx;
-	    iyhold = game.baty;
-	    game.batx = game.state.isx;
-	    game.baty = game.state.isy;
+	    ixhold = game.battle.x;
+	    iyhold = game.battle.y;
+	    game.battle.x = game.state.kscmdr.x;
+	    game.battle.y = game.state.kscmdr.y;
 	case FCDBAS: /* Commander succeeds in destroying base */
 	    if (line==FCDBAS) {
 		unschedule(FCDBAS);
 		/* find the lucky pair */
 		for_commanders(i)
-		    if (game.state.cx[i]==game.batx && game.state.cy[i]==game.baty) 
+		    if (game.state.kcmdr[i].x==game.battle.x && game.state.kcmdr[i].y==game.battle.y) 
 			break;
 		if (i > game.state.remcom || game.state.rembase == 0 ||
-		    !game.state.galaxy[game.batx][game.baty].starbase) {
+		    !game.state.galaxy[game.battle.x][game.battle.y].starbase) {
 		    /* No action to take after all */
-		    game.batx = game.baty = 0;
+		    game.battle.x = game.battle.y = 0;
 		    break;
 		}
 	    }
 	    /* Code merges here for any commander destroying base */
 	    /* Not perfect, but will have to do */
 	    /* Handle case where base is in same quadrant as starship */
-	    if (game.batx==game.quadx && game.baty==game.quady) {
-		game.state.chart[game.batx][game.baty].starbase = FALSE;
-		game.quad[game.basex][game.basey]= IHDOT;
-		game.basex=game.basey=0;
+	    if (game.battle.x==game.quadrant.x && game.battle.y==game.quadrant.y) {
+		game.state.chart[game.battle.x][game.battle.y].starbase = FALSE;
+		game.quad[game.base.x][game.base.y]= IHDOT;
+		game.base.x=game.base.y=0;
 		newcnd();
 		skip(1);
 		prout(_("Spock-  \"Captain, I believe the starbase has been destroyed.\""));
@@ -295,28 +295,28 @@
 		skip(1);
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Command reports that"));
 		proutn(_("   the starbase in "));
-		proutn(cramlc(quadrant, game.batx, game.baty));
+		proutn(cramlc(quadrant, game.battle));
 		prout(_(" has been destroyed by"));
 		if (game.isatb==2) prout(_("the Klingon Super-Commander"));
 		else prout(_("a Klingon Commander"));
-		game.state.chart[game.batx][game.baty].starbase = FALSE;
+		game.state.chart[game.battle.x][game.battle.y].starbase = FALSE;
 	    }
 	    /* Remove Starbase from galaxy */
-	    game.state.galaxy[game.batx][game.baty].starbase = FALSE;
+	    game.state.galaxy[game.battle.x][game.battle.y].starbase = FALSE;
 	    for_starbases(i)
-		if (game.state.baseqx[i]==game.batx && game.state.baseqy[i]==game.baty) {
-		    game.state.baseqx[i]=game.state.baseqx[game.state.rembase];
-		    game.state.baseqy[i]=game.state.baseqy[game.state.rembase];
+		if (game.state.baseq[i].x==game.battle.x && game.state.baseq[i].y==game.battle.y) {
+		    game.state.baseq[i].x=game.state.baseq[game.state.rembase].x;
+		    game.state.baseq[i].y=game.state.baseq[game.state.rembase].y;
 		}
 	    game.state.rembase--;
 	    if (game.isatb == 2) {
 		/* reinstate a commander's base attack */
-		game.batx = ixhold;
-		game.baty = iyhold;
+		game.battle.x = ixhold;
+		game.battle.y = iyhold;
 		game.isatb = 0;
 	    }
 	    else {
-		game.batx = game.baty = 0;
+		game.battle.x = game.battle.y = 0;
 	    }
 	    break;
 	case FSCMOVE: /* Supercommander moves */
@@ -331,11 +331,11 @@
 	    game.probey += game.probeiny;
 	    i = (int)(game.probex/QUADSIZE +0.05);
 	    j = (int)(game.probey/QUADSIZE + 0.05);
-	    if (game.probecx != i || game.probecy != j) {
-		game.probecx = i;
-		game.probecy = j;
+	    if (game.probec.x != i || game.probec.y != j) {
+		game.probec.x = i;
+		game.probec.y = j;
 		if (!VALID_QUADRANT(i, j) ||
-		    game.state.galaxy[game.probecx][game.probecy].supernova) {
+		    game.state.galaxy[game.probec.x][game.probec.y].supernova) {
 		    // Left galaxy or ran into supernova
 		    if (game.damage[DRADIO]==0.0 || game.condit == IHDOCKED) {
 			if (ipage==0) pause_game(1);
@@ -356,25 +356,25 @@
 		    ipage = 1;
 		    skip(1);
 		    proutn(_("Lt. Uhura-  \"The deep space probe is now in "));
-		    proutn(cramlc(quadrant, game.probecx, game.probecy));
+		    proutn(cramlc(quadrant, game.probec));
 		    prout(".\"");
 		}
 	    }
 	    /* Update star chart if Radio is working or have access to
 	       radio. */
 	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED) {
-		game.state.chart[game.probecx][game.probecy].klingons = game.state.galaxy[game.probecx][game.probecy].klingons;
-		game.state.chart[game.probecx][game.probecy].starbase = game.state.galaxy[game.probecx][game.probecy].starbase;
-		game.state.chart[game.probecx][game.probecy].stars = game.state.galaxy[game.probecx][game.probecy].stars;
-		game.state.galaxy[game.probecx][game.probecy].charted = TRUE;
+		game.state.chart[game.probec.x][game.probec.y].klingons = game.state.galaxy[game.probec.x][game.probec.y].klingons;
+		game.state.chart[game.probec.x][game.probec.y].starbase = game.state.galaxy[game.probec.x][game.probec.y].starbase;
+		game.state.chart[game.probec.x][game.probec.y].stars = game.state.galaxy[game.probec.x][game.probec.y].stars;
+		game.state.galaxy[game.probec.x][game.probec.y].charted = TRUE;
 	    }
 	    game.proben--; // One less to travel
 	    if (game.proben == 0 && game.isarmed &&
-		game.state.galaxy[game.probecx][game.probecy].stars) {
+		game.state.galaxy[game.probec.x][game.probec.y].stars) {
 		/* lets blow the sucker! */
 		snova(1,0);
 		unschedule(FDSPROB);
-		if (game.state.galaxy[game.quadx][game.quady].supernova) 
+		if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova) 
 		    return;
 	    }
 	    break;
@@ -389,12 +389,12 @@
 	    for (i = 0; i < 100; i++) {
 		struct quadrant *q;
 		iran(GALSIZE, &ix, &iy);
-		q = &game.state.galaxy[game.quadx][game.quady];
+		q = &game.state.galaxy[game.quadrant.x][game.quadrant.y];
 		/* need a quadrant which is not the current one,
 		   which has some stars which are inhabited and
 		   not already under attack, which is not
 		   supernova'ed, and which has some Klingons in it */
-		if (!((ix == game.quadx && iy == game.quady) || q->stars<=0 ||
+		if (!((ix == game.quadrant.x && iy == game.quadrant.y) || q->stars<=0 ||
 		      (q->qsystemname & Q_DISTRESSED) ||
 		      (q->qsystemname & Q_SYSTEM) == 0 || q->klings <= 0))
 		    break;
@@ -487,7 +487,7 @@
 	    }
 	    /* deliver the child */
 	    game.remkl++;
-	    if (ix == game.quadx && iy == game.quady)
+	    if (ix == game.quadrant.x && iy == game.quadrant.y)
 		newkling(++game.klhere, &ixhold, &iyhold);
 
 	    /* recompute time left */
@@ -549,7 +549,7 @@
 	    game.damage[DDRAY] = 0.0;
     } while 
 	// leave if quadrant supernovas
-	(!game.state.galaxy[game.quadx][game.quady].supernova);
+	(!game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova);
 
     game.resting = 0;
     game.optime = 0;
@@ -560,7 +560,10 @@
     static double course[] =
 	{0.0, 10.5, 12.0, 1.5, 9.0, 0.0, 3.0, 7.5, 6.0, 4.5};
     int bot, top, top2, hits[QUADSIZE+1][3], kount, icx, icy, mm, nn, j;
-    int iquad, iquad1, i, ll, newcx, newcy, ii, jj;
+    int iquad, iquad1, i, ll;
+    coord newc, nov, scratch;
+
+    nov.x = ix; nov.y = iy;
     if (Rand() < 0.05) {
 	/* Wow! We've supernova'ed */
 	snova(ix, iy);
@@ -569,9 +572,9 @@
 
     /* handle initial nova */
     game.quad[ix][iy] = IHDOT;
-    crmena(1, IHSTAR, 2, ix, iy);
+    crmena(1, IHSTAR, 2, nov);
     prout(_(" novas."));
-    game.state.galaxy[game.quadx][game.quady].stars--;
+    game.state.galaxy[game.quadrant.x][game.quadrant.y].stars--;
     game.state.starkl++;
 	
     /* Set up stack to recursively trigger adjacent stars */
@@ -585,10 +588,10 @@
 	    for (nn = 1; nn <= 3; nn++)  /* nn,j represents coordinates around current */
 		for (j = 1; j <= 3; j++) {
 		    if (j==2 && nn== 2) continue;
-		    ii = hits[mm][1]+nn-2;
-		    jj = hits[mm][2]+j-2;
-		    if (!VALID_SECTOR(jj, ii)) continue;
-		    iquad = game.quad[ii][jj];
+		    scratch.x = hits[mm][1]+nn-2;
+		    scratch.y = hits[mm][2]+j-2;
+		    if (!VALID_SECTOR(scratch.y, scratch.x)) continue;
+		    iquad = game.quad[scratch.x][scratch.y];
 		    switch (iquad) {
 		    // case IHDOT:	/* Empty space ends reaction
 		    // case IHQUEST:
@@ -600,45 +603,44 @@
 		    case IHSTAR: /* Affect another star */
 			if (Rand() < 0.05) {
 			    /* This star supernovas */
-			    snova(ii,jj);
+			    snova(scratch.x,scratch.y);
 			    return;
 			}
 			top2++;
-			hits[top2][1]=ii;
-			hits[top2][2]=jj;
-			game.state.galaxy[game.quadx][game.quady].stars -= 1;
+			hits[top2][1]=scratch.x;
+			hits[top2][2]=scratch.y;
+			game.state.galaxy[game.quadrant.x][game.quadrant.y].stars -= 1;
 			game.state.starkl++;
-			crmena(1, IHSTAR, 2, ii, jj);
+			crmena(1, IHSTAR, 2, scratch);
 			prout(_(" novas."));
-			game.quad[ii][jj] = IHDOT;
+			game.quad[scratch.x][scratch.y] = IHDOT;
 			break;
 		    case IHP: /* Destroy planet */
-			game.state.galaxy[game.quadx][game.quady].planet = NULL;
+			game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = NULL;
 			game.state.nplankl++;
-			crmena(1, IHP, 2, ii, jj);
+			crmena(1, IHP, 2, scratch);
 			prout(_(" destroyed."));
 			DESTROY(&game.state.plnets[game.iplnet]);
-			game.iplnet = game.plnetx = game.plnety = 0;
+			game.iplnet = game.plnet.x = game.plnet.y = 0;
 			if (game.landed == 1) {
 			    finish(FPNOVA);
 			    return;
 			}
-			game.quad[ii][jj] = IHDOT;
+			game.quad[scratch.x][scratch.y] = IHDOT;
 			break;
 		    case IHB: /* Destroy base */
-			game.state.galaxy[game.quadx][game.quady].starbase = FALSE;
+			game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase = FALSE;
 			for_starbases(i)
-			    if (game.state.baseqx[i]==game.quadx && game.state.baseqy[i]==game.quady) 
+			    if (game.state.baseq[i].x==game.quadrant.x && game.state.baseq[i].y==game.quadrant.y) 
 				break;
-			game.state.baseqx[i] = game.state.baseqx[game.state.rembase];
-			game.state.baseqy[i] = game.state.baseqy[game.state.rembase];
+			game.state.baseq[i] = game.state.baseq[game.state.rembase];
 			game.state.rembase--;
-			game.basex = game.basey = 0;
+			game.base.x = game.base.y = 0;
 			game.state.basekl++;
 			newcnd();
-			crmena(1, IHB, 2, ii, jj);
+			crmena(1, IHB, 2, scratch);
 			prout(_(" destroyed."));
-			game.quad[ii][jj] = IHDOT;
+			game.quad[scratch.x][scratch.y] = IHDOT;
 			break;
 		    case IHE: /* Buffet ship */
 		    case IHF:
@@ -660,38 +662,38 @@
 			    return;
 			}
 			/* add in course nova contributes to kicking starship*/
-			icx += game.sectx-hits[mm][1];
-			icy += game.secty-hits[mm][2];
+			icx += game.sector.x-hits[mm][1];
+			icy += game.sector.y-hits[mm][2];
 			kount++;
 			break;
 		    case IHK: /* kill klingon */
-			deadkl(ii,jj,iquad, ii, jj);
+			deadkl(scratch.x,scratch.y,iquad, scratch.x, scratch.y);
 			break;
 		    case IHC: /* Damage/destroy big enemies */
 		    case IHS:
 		    case IHR:
 			for_local_enemies(ll)
-			    if (game.kx[ll]==ii && game.ky[ll]==jj) break;
+			    if (game.ks[ll].x==scratch.x && game.ks[ll].y==scratch.y) break;
 			game.kpower[ll] -= 800.0; /* If firepower is lost, die */
 			if (game.kpower[ll] <= 0.0) {
-			    deadkl(ii, jj, iquad, ii, jj);
+			    deadkl(scratch.x, scratch.y, iquad, scratch.x, scratch.y);
 			    break;
 			}
-			newcx = ii + ii - hits[mm][1];
-			newcy = jj + jj - hits[mm][2];
-			crmena(1, iquad, 2, ii, jj);
+			newc.x = scratch.x + scratch.x - hits[mm][1];
+			newc.y = scratch.y + scratch.y - hits[mm][2];
+			crmena(1, iquad, 2, scratch);
 			proutn(_(" damaged"));
-			if (!VALID_SECTOR(newcx, newcy)) {
+			if (!VALID_SECTOR(newc.x, newc.y)) {
 			    /* can't leave quadrant */
 			    skip(1);
 			    break;
 			}
-			iquad1 = game.quad[newcx][newcy];
+			iquad1 = game.quad[newc.x][newc.y];
 			if (iquad1 == IHBLANK) {
 			    proutn(_(", blasted into "));
-			    crmena(0, IHBLANK, 2, newcx, newcy);
+			    crmena(0, IHBLANK, 2, newc);
 			    skip(1);
-			    deadkl(ii, jj, iquad, newcx, newcy);
+			    deadkl(scratch.x, scratch.y, iquad, newc.x, newc.y);
 			    break;
 			}
 			if (iquad1 != IHDOT) {
@@ -700,12 +702,12 @@
 			    break;
 			}
 			proutn(_(", buffeted to "));
-			proutn(cramlc(sector, newcx, newcy));
-			game.quad[ii][jj] = IHDOT;
-			game.quad[newcx][newcy] = iquad;
-			game.kx[ll] = newcx;
-			game.ky[ll] = newcy;
-			game.kavgd[ll] = sqrt(square(game.sectx-newcx)+square(game.secty-newcy));
+			proutn(cramlc(sector, newc));
+			game.quad[scratch.x][scratch.y] = IHDOT;
+			game.quad[newc.x][newc.y] = iquad;
+			game.ks[ll].x = newc.x;
+			game.ks[ll].y = newc.y;
+			game.kavgd[ll] = sqrt(square(game.sector.x-newc.x)+square(game.sector.y-newc.y));
 			game.kdist[ll] = game.kavgd[ll];
 			skip(1);
 			break;
@@ -738,34 +740,34 @@
 	
 void snova(int insx, int insy) 
 {
-    int comdead, nqx=0, nqy=0, nsx, nsy, num=0, kldead, iscdead;
+    int comdead, nsx, nsy, num=0, kldead, iscdead;
     int nrmdead, npdead;
     int incipient=0;
+    coord nq;
 
+    nq.x = nq.y = 0;
     nsx = insy;
     nsy = insy;
 
     if (insy== 0) {
-	if (insx == 1) {
+	if (insx == 1)
 	    /* NOVAMAX being used */
-	    nqx = game.probecx;
-	    nqy = game.probecy;
-	}
+	    nq = game.probec;
 	else {
 	    int stars = 0;
 	    /* Scheduled supernova -- select star */
 	    /* logic changed here so that we won't favor quadrants in top
 	       left of universe */
-	    for_quadrants(nqx) {
-		for_quadrants(nqy) {
-		    stars += game.state.galaxy[nqx][nqy].stars;
+	    for_quadrants(nq.x) {
+		for_quadrants(nq.y) {
+		    stars += game.state.galaxy[nq.x][nq.y].stars;
 		}
 	    }
 	    if (stars == 0) return; /* nothing to supernova exists */
 	    num = Rand()*stars + 1;
-	    for_quadrants(nqx) {
-		for_quadrants(nqy) {
-		    num -= game.state.galaxy[nqx][nqy].stars;
+	    for_quadrants(nq.x) {
+		for_quadrants(nq.y) {
+		    num -= game.state.galaxy[nq.x][nq.y].stars;
 		    if (num <= 0) break;
 		}
 		if (num <=0) break;
@@ -774,26 +776,26 @@
 	    if (game.idebug) {
 		proutn("Super nova here?");
 		if (ja()==1) {
-		    nqx = game.quadx;
-		    nqy = game.quady;
+		    nq.x = game.quadrant.x;
+		    nq.y = game.quadrant.y;
 		}
 	    }
 #endif
 	}
 
-	if (nqx != game.quady || nqy != game.quady || game.justin != 0) {
+	if (nq.x != game.quadrant.y || nq.y != game.quadrant.y || game.justin != 0) {
 	    /* it isn't here, or we just entered (treat as inroute) */
 	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED) {
 		skip(1);
 		prout(_("Message from Starfleet Command       Stardate %.2f"), game.state.date);
 		prout(_("     Supernova in %s; caution advised."),
-		      cramlc(quadrant, nqx, nqy));
+		      cramlc(quadrant, nq));
 	    }
 	}
 	else {
 	    /* we are in the quadrant! */
 	    incipient = 1;
-	    num = Rand()* game.state.galaxy[nqx][nqy].stars + 1;
+	    num = Rand()* game.state.galaxy[nq.x][nq.y].stars + 1;
 	    for_sectors(nsx) {
 		for_sectors(nsy) {
 		    if (game.quad[nsx][nsy]==IHSTAR) {
@@ -810,13 +812,14 @@
     }
 
     if (incipient) {
+	coord nd;
 	skip(1);
 	prouts(_("***RED ALERT!  RED ALERT!"));
 	skip(1);
-	prout(_("***Incipient supernova detected at "), cramlc(sector, nsx, nsy));
-	nqx = game.quadx;
-	nqy = game.quady;
-	if (square(nsx-game.sectx) + square(nsy-game.secty) <= 2.1) {
+	nd.x = nsx; nd.y = nsy;
+	prout(_("***Incipient supernova detected at "), cramlc(sector, nd));
+	nq = game.quadrant;
+	if (square(nsx-game.sector.x) + square(nsy-game.sector.y) <= 2.1) {
 	    proutn(_("Emergency override attempts t"));
 	    prouts("***************");
 	    skip(1);
@@ -825,12 +828,12 @@
 	}
     }
     /* destroy any Klingons in supernovaed quadrant */
-    kldead = game.state.galaxy[nqx][nqy].klingons;
-    game.state.galaxy[nqx][nqy].klingons = 0;
+    kldead = game.state.galaxy[nq.x][nq.y].klingons;
+    game.state.galaxy[nq.x][nq.y].klingons = 0;
     comdead = iscdead = 0;
-    if (nqx==game.state.isx && nqy == game.state.isy) {
+    if (same(nq, game.state.kscmdr)) {
 	/* did in the Supercommander! */
-	game.state.nscrem = game.state.isx = game.state.isy = game.isatb = game.iscate = 0;
+	game.state.nscrem = game.state.kscmdr.x = game.state.kscmdr.y = game.isatb = game.iscate = 0;
 	iscdead = 1;
 	unschedule(FSCMOVE);
 	unschedule(FSCDBAS);
@@ -838,10 +841,9 @@
     if (game.state.remcom) {
 	int maxloop = game.state.remcom, l;
 	for (l = 1; l <= maxloop; l++) {
-	    if (game.state.cx[l] == nqx && game.state.cy[l] == nqy) {
-		game.state.cx[l] = game.state.cx[game.state.remcom];
-		game.state.cy[l] = game.state.cy[game.state.remcom];
-		game.state.cx[game.state.remcom] = game.state.cy[game.state.remcom] = 0;
+	    if (same(game.state.kcmdr[l], nq)) {
+		game.state.kcmdr[l] = game.state.kcmdr[game.state.remcom];
+		game.state.kcmdr[game.state.remcom].x = game.state.kcmdr[game.state.remcom].y = 0;
 		game.state.remcom--;
 		kldead--;
 		comdead++;
@@ -852,14 +854,14 @@
     }
     game.state.remkl -= kldead;
     /* destroy Romulans and planets in supernovaed quadrant */
-    nrmdead = game.state.galaxy[nqx][nqy].romulans;
-    game.state.galaxy[nqx][nqy].romulans = 0;
+    nrmdead = game.state.galaxy[nq.x][nq.y].romulans;
+    game.state.galaxy[nq.x][nq.y].romulans = 0;
     game.state.nromrem -= nrmdead;
     npdead = num - nrmdead*10;
     if (npdead) {
 	int l;
 	for (l = 0; l < game.inplan; l++)
-	    if (game.state.plnets[l].x == nqx && game.state.plnets[l].y == nqy) {
+	    if (same(game.state.plnets[l].w, nq)) {
 		DESTROY(&game.state.plnets[l]);
 	    }
     }
@@ -867,31 +869,30 @@
     if (game.state.rembase) {
 	int maxloop = game.state.rembase, l;
 	for (l = 1; l <= maxloop; l++)
-	    if (game.state.baseqx[l]==nqx && game.state.baseqy[l]==nqy) {
-		game.state.baseqx[l] = game.state.baseqx[game.state.rembase];
-		game.state.baseqy[l] = game.state.baseqy[game.state.rembase];
-		game.state.baseqx[game.state.rembase] = game.state.baseqy[game.state.rembase] = 0;
+	    if (same(game.state.baseq[l], nq)) {
+		game.state.baseq[l] = game.state.baseq[game.state.rembase];
+		game.state.baseq[game.state.rembase].x = game.state.baseq[game.state.rembase].y = 0;
 		game.state.rembase--;
 		break;
 	    }
     }
     /* If starship caused supernova, tally up destruction */
     if (insx) {
-	game.state.starkl += game.state.galaxy[nqx][nqy].stars;
-	game.state.basekl += game.state.galaxy[nqx][nqy].starbase;
+	game.state.starkl += game.state.galaxy[nq.x][nq.y].stars;
+	game.state.basekl += game.state.galaxy[nq.x][nq.y].starbase;
 	game.state.nplankl += npdead;
     }
     /* mark supernova in galaxy and in star chart */
-    if ((game.quadx == nqx && game.quady == nqy) ||
+    if ((game.quadrant.x == nq.x && game.quadrant.y == nq.y) ||
 	game.damage[DRADIO] == 0 ||
 	game.condit == IHDOCKED)
-	game.state.galaxy[nqx][nqy].supernova = TRUE;
+	game.state.galaxy[nq.x][nq.y].supernova = TRUE;
     /* If supernova destroys last klingons give special message */
-    if (KLINGREM==0 && (nqx != game.quadx || nqy != game.quady)) {
+    if (KLINGREM==0 && (nq.x != game.quadrant.x || nq.y != game.quadrant.y)) {
 	skip(2);
 	if (insx == 0) prout(_("Lucky you!"));
 	proutn(_("A supernova in %s has just destroyed the last Klingons."),
-	       cramlc(quadrant, nqx, nqy));
+	       cramlc(quadrant, nq));
 	finish(FWON);
 	return;
     }

Modified: trunk/src/finish.c
===================================================================
--- trunk/src/finish.c	2006-09-17 23:55:46 UTC (rev 583)
+++ trunk/src/finish.c	2006-09-18 03:49:33 UTC (rev 584)
@@ -61,7 +61,7 @@
 	int l=1;
 	while (l <= game.nenhere) {
 	    if (game.kpower[l]*game.kdist[l] <= whammo) 
-		deadkl(game.kx[l],game.ky[l], game.quad[game.kx[l]][game.ky[l]], game.kx[l], game.ky[l]);
+		deadkl(game.ks[l].x,game.ks[l].x, game.quad[game.ks[l].x][game.ks[l].y], game.ks[l].x, game.ks[l].y);
 	    l++;
 	}
     }

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-17 23:55:46 UTC (rev 583)
+++ trunk/src/moving.c	2006-09-18 03:49:33 UTC (rev 584)
@@ -8,8 +8,10 @@
 {
     double angle, deltax, deltay, bigger, x, y,
         finald, finalx, finaly, stopegy, probf;
-    int trbeam = 0, n, l, ix=0, iy=0, kink, kinks, iquad;
+    int trbeam = 0, n, l, kink, kinks, iquad;
+    coord w;
 
+    w.x = w.y = 0;
     if (game.inorbit) {
 	prout("Helmsman Sulu- \"Leaving standard orbit.\"");
 	game.inorbit = FALSE;
@@ -34,23 +36,23 @@
 	game.optime = scheduled(FTBEAM) - game.state.date + 1e-5;
     }
     /* Move within the quadrant */
-    game.quad[game.sectx][game.secty] = IHDOT;
-    x = game.sectx;
-    y = game.secty;
+    game.quad[game.sector.x][game.sector.y] = IHDOT;
+    x = game.sector.x;
+    y = game.sector.y;
     n = 10.0*game.dist*bigger+0.5;
 
     if (n > 0) {
 	for (l = 1; l <= n; l++) {
-	    ix = (x += deltax) + 0.5;
-	    iy = (y += deltay) + 0.5;
-	    if (!VALID_SECTOR(ix, iy)) {
+	    w.x = (x += deltax) + 0.5;
+	    w.y = (y += deltay) + 0.5;
+	    if (!VALID_SECTOR(w.x, w.y)) {
 		/* Leaving quadrant -- allow final enemy attack */
 		/* Don't do it if being pushed by Nova */
 		if (game.nenhere != 0 && game.iattak != 2) {
 		    newcnd();
 		    for_local_enemies(l) {
-			finald = sqrt((ix-game.kx[l])*(double)(ix-game.kx[l]) +
-				      (iy-game.ky[l])*(double)(iy-game.ky[l]));
+			finald = sqrt((w.x-game.ks[l].x)*(double)(w.x-game.ks[l].x) +
+				      (w.y-game.ks[l].y)*(double)(w.y-game.ks[l].y));
 			game.kavgd[l] = 0.5 * (finald+game.kdist[l]);
 		    }
 		    /*
@@ -58,33 +60,33 @@
 		     * that attacks only happen if Klingons
 		     * are present and your skill is good.
 		     */
-		    if (game.skill > SKILL_GOOD && game.klhere > 0 && !game.state.galaxy[game.quadx][game.quady].supernova)
+		    if (game.skill > SKILL_GOOD && game.klhere > 0 && !game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova)
 			attack(0);
 		    if (game.alldone) return;
 		}
 		/* compute final position -- new quadrant and sector */
-		x = QUADSIZE*(game.quadx-1)+game.sectx;
-		y = QUADSIZE*(game.quady-1)+game.secty;
-		ix = x+10.0*game.dist*bigger*deltax+0.5;
-		iy = y+10.0*game.dist*bigger*deltay+0.5;
+		x = QUADSIZE*(game.quadrant.x-1)+game.sector.x;
+		y = QUADSIZE*(game.quadrant.y-1)+game.sector.y;
+		w.x = x+10.0*game.dist*bigger*deltax+0.5;
+		w.y = y+10.0*game.dist*bigger*deltay+0.5;
 		/* check for edge of galaxy */
 		kinks = 0;
 		do {
 		    kink = 0;
-		    if (ix <= 0) {
-			ix = -ix + 1;
+		    if (w.x <= 0) {
+			w.x = -w.x + 1;
 			kink = 1;
 		    }
-		    if (iy <= 0) {
-			iy = -iy + 1;
+		    if (w.y <= 0) {
+			w.y = -w.y + 1;
 			kink = 1;
 		    }
-		    if (ix > GALSIZE*QUADSIZE) {
-			ix = (GALSIZE*QUADSIZE*2)+1 - ix;
+		    if (w.x > GALSIZE*QUADSIZE) {
+			w.x = (GALSIZE*QUADSIZE*2)+1 - w.x;
 			kink = 1;
 		    }
-		    if (iy > GALSIZE*QUADSIZE) {
-			iy = (GALSIZE*QUADSIZE*2)+1 - iy;
+		    if (w.y > GALSIZE*QUADSIZE) {
+			w.y = (GALSIZE*QUADSIZE*2)+1 - w.y;
 			kink = 1;
 		    }
 		    if (kink) kinks = 1;
@@ -104,24 +106,23 @@
 		}
 		/* Compute final position in new quadrant */
 		if (trbeam) return; /* Don't bother if we are to be beamed */
-		game.quadx = (ix+(QUADSIZE-1))/QUADSIZE;
-		game.quady = (iy+(QUADSIZE-1))/QUADSIZE;
-		game.sectx = ix - QUADSIZE*(game.quadx-1);
-		game.secty = iy - QUADSIZE*(game.quady-1);
+		game.quadrant.x = (w.x+(QUADSIZE-1))/QUADSIZE;
+		game.quadrant.y = (w.y+(QUADSIZE-1))/QUADSIZE;
+		game.sector.x = w.x - QUADSIZE*(game.quadrant.x-1);
+		game.sector.y = w.y - QUADSIZE*(game.quadrant.y-1);
 		skip(1);
-		prout("Entering %s.",
-		      cramlc(quadrant, game.quadx, game.quady));
-		game.quad[game.sectx][game.secty] = game.ship;
+		prout("Entering %s.", cramlc(quadrant, game.quadrant));
+		game.quad[game.sector.x][game.sector.y] = game.ship;
 		newqad(0);
 		if (game.skill>SKILL_NOVICE) attack(0);
 		return;
 	    }
-	    iquad = game.quad[ix][iy];
+	    iquad = game.quad[w.x][w.y];
 	    if (iquad != IHDOT) {
 		/* object encountered in flight path */
 		stopegy = 50.0*game.dist/game.optime;
-		game.dist=0.1*sqrt((game.sectx-ix)*(double)(game.sectx-ix) +
-			      (game.secty-iy)*(double)(game.secty-iy));
+		game.dist=0.1*sqrt((game.sector.x-w.x)*(double)(game.sector.x-w.x) +
+			      (game.sector.y-w.y)*(double)(game.sector.y-w.y));
 		switch (iquad) {
 		case IHT: /* Ram a Tholian */
 		case IHK: /* Ram enemy ship */
@@ -129,11 +130,11 @@
 		case IHS:
 		case IHR:
 		case IHQUEST:
-		    game.sectx = ix;
-		    game.secty = iy;
-		    ram(0, iquad, game.sectx, game.secty);
-		    finalx = game.sectx;
-		    finaly = game.secty;
+		    game.sector.x = w.x;
+		    game.sector.y = w.y;
+		    ram(0, iquad, game.sector);
+		    finalx = game.sector.x;
+		    finaly = game.sector.y;
 		    break;
 		case IHBLANK:
 		    skip(1);
@@ -142,7 +143,7 @@
 		    proutn("***");
 		    crmshp();
 		    proutn(" pulled into black hole at ");
-		    prout(cramlc(sector, ix, iy));
+		    prout(cramlc(sector, w));
 		    /*
 		     * Getting pulled into a black hole was certain
 		     * death in Almy's original.  Stas Sergeev added a
@@ -166,15 +167,15 @@
 			proutn(" encounters Tholian web at ");
 		    else
 			proutn(" blocked by object at ");
-		    proutn(cramlc(sector, ix,iy));
+		    proutn(cramlc(sector, w));
 		    prout(";");
 		    proutn("Emergency stop required ");
 		    prout("%2d units of energy.", (int)stopegy);
 		    game.energy -= stopegy;
 		    finalx = x-deltax+0.5;
-		    game.sectx = finalx;
+		    game.sector.x = finalx;
 		    finaly = y-deltay+0.5;
-		    game.secty = finaly;
+		    game.sector.y = finaly;
 		    if (game.energy <= 0) {
 			finish(FNRG);
 			return;
@@ -184,25 +185,25 @@
 		goto no_quad_change;	/* sorry! */
 	    }
 	}
-	game.dist = 0.1*sqrt((game.sectx-ix)*(double)(game.sectx-ix) +
-			(game.secty-iy)*(double)(game.secty-iy));
-	game.sectx = ix;
-	game.secty = iy;
+	game.dist = 0.1*sqrt((game.sector.x-w.x)*(double)(game.sector.x-w.x) +
+			(game.sector.y-w.y)*(double)(game.sector.y-w.y));
+	game.sector.x = w.x;
+	game.sector.y = w.y;
     }
-    finalx = game.sectx;
-    finaly = game.secty;
+    finalx = game.sector.x;
+    finaly = game.sector.y;
 no_quad_change:
     /* No quadrant change -- compute new avg enemy distances */
-    game.quad[game.sectx][game.secty] = game.ship;
+    game.quad[game.sector.x][game.sector.y] = game.ship;
     if (game.nenhere) {
 	for_local_enemies(l) {
-	    finald = sqrt((ix-game.kx[l])*(double)(ix-game.kx[l]) +
-			  (iy-game.ky[l])*(double)(iy-game.ky[l]));
+	    finald = sqrt((w.x-game.ks[l].x)*(double)(w.x-game.ks[l].x) +
+			  (w.y-game.ks[l].y)*(double)(w.y-game.ks[l].y));
 	    game.kavgd[l] = 0.5 * (finald+game.kdist[l]);
 	    game.kdist[l] = finald;
 	}
 	sortkl();
-	if (!game.state.galaxy[game.quadx][game.quady].supernova && game.iattak == 0)
+	if (!game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova && game.iattak == 0)
 	    attack(0);
 	for_local_enemies(l) game.kavgd[l] = game.kdist[l];
     }
@@ -224,7 +225,7 @@
 	prout("You must first leave standard orbit.");
 	return;
     }
-    if (game.basex==0 || abs(game.sectx-game.basex) > 1 || abs(game.secty-game.basey) > 1) {
+    if (game.base.x==0 || abs(game.sector.x-game.base.x) > 1 || abs(game.sector.y-game.base.y) > 1) {
 	crmshp();
 	prout(" not adjacent to base.");
 	return;
@@ -255,10 +256,11 @@
 	   are always displayed y - x, where +y is downward! */
 
 	
-        int irowq=game.quadx, icolq=game.quady, irows, icols, itemp=0, iprompt=0, key=0;
+        int irowq=game.quadrant.x, icolq=game.quadrant.y, itemp=0, iprompt=0, key=0;
 	double xi, xj, xk, xl;
 	double deltax, deltay;
 	int automatic = -1;
+	coord incr;
 
 	/* Get course direction and distance. If user types bad values, return
 	   with DIREC = -1.0. */
@@ -359,23 +361,23 @@
 
 			irowq = xi + 0.5;
 			icolq = xj + 0.5;
-			irows = xk + 0.5;
-			icols = xl + 0.5;
+			incr.y = xk + 0.5;
+			incr.x = xl + 0.5;
 		}
 		else {
 			if (isprobe) {
 				/* only quadrant specified -- go to center of dest quad */
 				irowq = xi + 0.5;
 				icolq = xj + 0.5;
-				irows = icols = 5;
+				incr.y = incr.x = 5;
 			}
 			else {
-				irows = xi + 0.5;
-				icols = xj + 0.5;
+				incr.y = xi + 0.5;
+				incr.x = xj + 0.5;
 			}
 			itemp = 1;
 		}
-		if (!VALID_QUADRANT(icolq,irowq)||!VALID_SECTOR(icols,irows)) {
+		if (!VALID_QUADRANT(icolq,irowq)||!VALID_SECTOR(incr.x,incr.y)) {
 		    huh();
 		    return;
 		}
@@ -384,13 +386,13 @@
 			if (itemp) {
 				if (iprompt) {
 					prout("Helmsman Sulu- \"Course locked in for %s.\"",
-						cramlc(sector, irows, icols));
+						cramlc(sector, incr));
 				}
 			}
 			else prout("Ensign Chekov- \"Course laid in, Captain.\"");
 		}
-		deltax = icolq - game.quady + 0.1*(icols-game.secty);
-		deltay = game.quadx - irowq + 0.1*(game.sectx-irows);
+		deltax = icolq - game.quadrant.y + 0.1*(incr.x-game.sector.y);
+		deltay = game.quadrant.x - irowq + 0.1*(game.sector.x-incr.y);
 	}
 	else { /* manual */
 		while (key == IHEOL) {
@@ -586,8 +588,8 @@
 	    deltax /= bigger;
 	    deltay /= bigger;
 	    n = 10.0 * game.dist * bigger +0.5;
-	    x = game.sectx;
-	    y = game.secty;
+	    x = game.sector.x;
+	    y = game.sector.y;
 	    for (l = 1; l <= n; l++) {
 		x += deltax;
 		ix = x + 0.5;
@@ -732,7 +734,7 @@
 	skip(1);
 	prout("safely out of quadrant.");
 	if (game.damage[DRADIO] == 0.0)
-	    game.state.galaxy[game.quadx][game.quady].charted = TRUE;
+	    game.state.galaxy[game.quadrant.x][game.quadrant.y].charted = TRUE;
 	/* Try to use warp engines */
 	if (game.damage[DWARPEN]) {
 	    skip(1);
@@ -762,7 +764,7 @@
 	}
     } while 
 	/* Repeat if another snova */
-	(game.state.galaxy[game.quadx][game.quady].supernova);
+	(game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova);
     if (KLINGREM==0) 
 	finish(FWON); /* Snova killed remaining enemy. */
 }
@@ -789,7 +791,7 @@
 	game.isatb = 0;
 	unschedule(FCDBAS);
 	unschedule(FSCDBAS);
-	game.batx = game.baty = 0;
+	game.battle.x = game.battle.y = 0;
 
 	/* Make sure Galileo is consistant -- Snapshot may have been taken
 	   when on planet, which would give us two Galileos! */
@@ -890,10 +892,9 @@
     game.probeiny /= bigger;
     game.probeinx /= bigger;
     game.proben = 10.0*game.dist*bigger +0.5;
-    game.probex = game.quadx*QUADSIZE + game.sectx - 1;	// We will use better packing than original
-    game.probey = game.quady*QUADSIZE + game.secty - 1;
-    game.probecx = game.quadx;
-    game.probecy = game.quady;
+    game.probex = game.quadrant.x*QUADSIZE + game.sector.x - 1;	// We will use better packing than original
+    game.probey = game.quadrant.y*QUADSIZE + game.sector.y - 1;
+    game.probec = game.quadrant;
     schedule(FDSPROB, 0.01); // Time to move one sector
     prout("Ensign Chekov-  \"The deep space probe is launched, Captain.\"");
     game.ididit = 1;
@@ -928,42 +929,42 @@
     }
     /* OK -- call for help from nearest starbase */
     game.nhelp++;
-    if (game.basex!=0) {
+    if (game.base.x!=0) {
 	/* There's one in this quadrant */
-	ddist = sqrt(square(game.basex-game.sectx)+square(game.basey-game.secty));
+	ddist = sqrt(square(game.base.x-game.sector.x)+square(game.base.y-game.sector.y));
     }
     else {
 	ddist = FOREVER;
 	for_starbases(l) {
-	    xdist=10.0*sqrt(square(game.state.baseqx[l]-game.quadx)+square(game.state.baseqy[l]-game.quady));
+	    xdist=10.0*sqrt(square(game.state.baseq[l].x-game.quadrant.x)+square(game.state.baseq[l].y-game.quadrant.y));
 	    if (xdist < ddist) {
 		ddist = xdist;
 		line = l;
 	    }
 	}
 	/* Since starbase not in quadrant, set up new quadrant */
-	game.quadx = game.state.baseqx[line];
-	game.quady = game.state.baseqy[line];
+	game.quadrant.x = game.state.baseq[line].x;
+	game.quadrant.y = game.state.baseq[line].y;
 	newqad(1);
     }
     /* dematerialize starship */
-    game.quad[game.sectx][game.secty]=IHDOT;
-    proutn("Starbase in %s responds--", cramlc(quadrant, game.quadx, game.quady));
+    game.quad[game.sector.x][game.sector.y]=IHDOT;
+    proutn("Starbase in %s responds--", cramlc(quadrant, game.quadrant));
     proutn("");
     crmshp();
     prout(" dematerializes.");
-    game.sectx=0;
+    game.sector.x=0;
     for (l = 1; l <= 5; l++) {
-	ix = game.basex+3.0*Rand()-1;
-	iy = game.basey+3.0*Rand()-1;
+	ix = game.base.x+3.0*Rand()-1;
+	iy = game.base.y+3.0*Rand()-1;
 	if (VALID_SECTOR(ix,iy) && game.quad[ix][iy]==IHDOT) {
 	    /* found one -- finish up */
-	    game.sectx=ix;
-	    game.secty=iy;
+	    game.sector.x=ix;
+	    game.sector.y=iy;
 	    break;
 	}
     }
-    if (game.sectx==0){
+    if (game.sector.x==0){
 	prout("You have been lost in space...");
 	finish(FMATERIALIZE);
 	return;

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-17 23:55:46 UTC (rev 583)
+++ trunk/src/planets.c	2006-09-18 03:49:33 UTC (rev 584)
@@ -21,7 +21,7 @@
     events();	/* Used to avoid if FSCMOVE is scheduled within time */
 //	schedule(FSNOVA, asave-game.state.time);
     /*fails if game over, quadrant super-novas or we've moved to new quadrant*/
-    if (game.alldone || game.state.galaxy[game.quadx][game.quady].supernova || game.justin != 0) return 1;
+    if (game.alldone || game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova || game.justin != 0) return 1;
     return 0;
 }
 
@@ -43,7 +43,7 @@
 #ifdef DEBUG
 	    if (game.idebug && game.state.plnets[i].known==unknown) proutn("(Unknown) ");
 #endif
-	    proutn(cramlc(quadrant, game.state.plnets[i].x, game.state.plnets[i].y));
+	    proutn(cramlc(quadrant, game.state.plnets[i].w));
 	    proutn("   class ");
 	    proutn(classes[game.state.plnets[i].pclass]);
 	    proutn("   ");
@@ -68,7 +68,7 @@
 	prout("Both warp and impulse engines damaged.");
 	return;
     }
-    if (game.plnetx == 0 || abs(game.sectx-game.plnetx) > 1 || abs(game.secty-game.plnety) > 1) {
+    if (game.plnet.x == 0 || abs(game.sector.x-game.plnet.x) > 1 || abs(game.sector.y-game.plnet.y) > 1) {
 	crmshp();
 	prout(" not adjacent to planet.");
 	skip(1);
@@ -92,15 +92,15 @@
 	prout("Short range sensors damaged.");
 	return;
     }
-    if (!game.plnetx && (game.options & OPTION_TTY)) {
+    if (!game.plnet.x && (game.options & OPTION_TTY)) {
 	prout("Spock- \"No planet in this quadrant, Captain.\"");
 	return;
     }
-    if ((game.plnetx != 0)&& (game.state.plnets[game.iplnet].known == unknown)) {
-	prout("Spock-  \"Sensor scan for %s-", cramlc(quadrant, game.quadx, game.quady));
+    if ((game.plnet.x != 0)&& (game.state.plnets[game.iplnet].known == unknown)) {
+	prout("Spock-  \"Sensor scan for %s-", cramlc(quadrant, game.quadrant));
 	skip(1);
-	prout("         Planet at %s is of class %s.", 
-	      cramlc(sector, game.plnetx, game.plnety),
+	prout("         Planet at %s is of class %s.",
+	      cramlc(sector,game.plnet),
 	      classes[game.state.plnets[game.iplnet].pclass]);
 	if (game.state.plnets[game.iplnet].known==shuttle_down) 
 	    prout("         Sensors show Galileo still on surface.");
@@ -443,7 +443,7 @@
 	prouts("Sulu- \"Captain!  It's working!\"");
 	skip(2);
 	while (game.nenhere > 0)
-	    deadkl(game.kx[1],game.ky[1],game.quad[game.kx[1]][game.ky[1]],game.kx[1],game.ky[1]);
+	    deadkl(game.ks[1].x,game.ks[1].y,game.quad[game.ks[1].x][game.ks[1].y],game.ks[1].x,game.ks[1].y);
 	prout("Ensign Chekov-  \"Congratulations, Captain!\"");
 	if (KLINGREM == 0) finish(FWON);
 	if ((game.options & OPTION_PLAIN) == 0) {

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-17 23:55:46 UTC (rev 583)
+++ trunk/src/reports.c	2006-09-18 03:49:33 UTC (rev 584)
@@ -8,21 +8,21 @@
     if (!curt) {
 	if (is_scheduled(FCDBAS)) {
 	    prout("Starbase in %s is currently under Commander attack.",
-		  cramlc(quadrant, game.batx, game.baty));
+		  cramlc(quadrant, game.battle));
 	    prout("It can hold out until Stardate %d.", 
 		  (int)scheduled(FCDBAS));
 	}
 	if (game.isatb == 1) {
 	    prout("Starbase in %s is under Super-commander attack.",
-		  cramlc(quadrant, game.state.isx, game.state.isy));
+		  cramlc(quadrant, game.state.kscmdr));
 	    prout("It can hold out until Stardate %d.", 
 		  (int)scheduled(FSCDBAS));
 	}
     } else {
         if (is_scheduled(FCDBAS))
-	    proutn("Base in %i - %i attacked by C. Alive until %.1f", game.batx, game.baty, scheduled(FCDBAS));
+	    proutn("Base in %i - %i attacked by C. Alive until %.1f", game.battle.x, game.battle.y, scheduled(FCDBAS));
         if (game.isatb == 1)
-	    proutn("Base in %i - %i attacked by S. Alive until %.1f", game.state.isx, game.state.isy, scheduled(FSCDBAS));
+	    proutn("Base in %i - %i attacked by S. Alive until %.1f", game.state.kscmdr.x, game.state.kscmdr.y, scheduled(FSCDBAS));
     }
     clreol();
 }
@@ -93,7 +93,7 @@
 	    proutn("An armed deep space probe is in");
 	else
 	    proutn("A deep space probe is in");
-	proutn(cramlc(quadrant, game.probecx, game.probecy));
+	proutn(cramlc(quadrant, game.probec));
 	prout(".");
     }
     if (game.icrystl) {
@@ -128,9 +128,9 @@
     else {
 	prout("Long-range scan");
     }
-    for (x = game.quadx-1; x <= game.quadx+1; x++) {
+    for (x = game.quadrant.x-1; x <= game.quadrant.x+1; x++) {
 	proutn(" ");
-	for (y = game.quady-1; y <= game.quady+1; y++) {
+	for (y = game.quadrant.y-1; y <= game.quadrant.y+1; y++) {
 	    if (!VALID_QUADRANT(x, y))
 		proutn("  -1");
 	    else {
@@ -206,7 +206,7 @@
 	proutn("%d |", i);
 	for_quadrants(j) {
 	    char buf[4];
-	    if ((game.options & OPTION_SHOWME) && i == game.quadx && j == game.quady)
+	    if ((game.options & OPTION_SHOWME) && i == game.quadrant.x && j == game.quadrant.y)
 		proutn("<");
 	    else
 		proutn(" ");
@@ -219,7 +219,7 @@
 	    else
 		strcpy(buf, "...");
 	    proutn(buf);
-	    if ((game.options & OPTION_SHOWME) && i == game.quadx && j == game.quady)
+	    if ((game.options & OPTION_SHOWME) && i == game.quadrant.x && j == game.quadrant.y)
 		proutn(">");
 	    else
 		proutn(" ");
@@ -232,7 +232,7 @@
 
 static void sectscan(int goodScan, int i, int j) 
 {
-    if (goodScan || (abs(i-game.sectx)<= 1 && abs(j-game.secty) <= 1)){
+    if (goodScan || (abs(i-game.sector.x)<= 1 && abs(j-game.sector.y) <= 1)){
 	if ((game.quad[i][j]==IHMATER0)||(game.quad[i][j]==IHMATER1)||(game.quad[i][j]==IHMATER2)||(game.quad[i][j]==IHE)||(game.quad[i][j]==IHF)){
 	    switch (game.condit) {
 	    case IHRED: textcolor(RED); break;
@@ -275,7 +275,7 @@
 	break;
     case 3:
 	proutn("Position      %d - %d , %d - %d",
-	       game.quadx, game.quady, game.sectx, game.secty);
+	       game.quadrant.x, game.quadrant.y, game.sector.x, game.sector.y);
 	break;
     case 4:
 	proutn("Life Support  ");
@@ -315,7 +315,7 @@
 	break;
     case 10:
 	if (game.options & OPTION_WORLDS) {
-	    planet *here = game.state.galaxy[game.quadx][game.quady].planet;
+	    planet *here = game.state.galaxy[game.quadrant.x][game.quadrant.y].planet;
 	    if (here && here->inhabited != UNINHABITED)
 		proutn("Major system  %s", systemname(here));
 	    else
@@ -349,10 +349,10 @@
 	}
 	else prout("     Short-range scan");
 	if (goodScan && !game.damage[DRADIO]) { 
-	    game.state.chart[game.quadx][game.quady].klingons = game.state.galaxy[game.quadx][game.quady].klingons;
-	    game.state.chart[game.quadx][game.quady].starbase = game.state.galaxy[game.quadx][game.quady].starbase;
-	    game.state.chart[game.quadx][game.quady].stars = game.state.galaxy[game.quadx][game.quady].stars;
-	    game.state.galaxy[game.quadx][game.quady].charted = TRUE;
+	    game.state.chart[game.quadrant.x][game.quadrant.y].klingons = game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons;
+	    game.state.chart[game.quadrant.x][game.quadrant.y].starbase = game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase;
+	    game.state.chart[game.quadrant.x][game.quadrant.y].stars = game.state.galaxy[game.quadrant.x][game.quadrant.y].stars;
+	    game.state.galaxy[game.quadrant.x][game.quadrant.y].charted = TRUE;
 	}
 	scan();
 	if (isit("chart")) nn = TRUE;
@@ -437,9 +437,9 @@
 	ix2 = aaitem + 0.5;
     }
     else {
-	if (game.quady>ix1) ix2 = 1;
+	if (game.quadrant.y>ix1) ix2 = 1;
 	else ix2=QUADSIZE;
-	if (game.quadx>iy1) iy2 = 1;
+	if (game.quadrant.x>iy1) iy2 = 1;
 	else iy2=QUADSIZE;
     }
 
@@ -447,8 +447,8 @@
 	huh();
 	return;
     }
-    game.dist = sqrt(square(iy1-game.quadx+0.1*(iy2-game.sectx))+
-		square(ix1-game.quady+0.1*(ix2-game.secty)));
+    game.dist = sqrt(square(iy1-game.quadrant.x+0.1*(iy2-game.sector.x))+
+		square(ix1-game.quadrant.y+0.1*(ix2-game.sector.y)));
     wfl = FALSE;
 
     if (prompt) prout("Answer \"no\" if you don't know the value:");
@@ -526,9 +526,9 @@
 	    prout("Unfortunately, the Federation will be destroyed by then.");
 	if (twarp > 6.0)
 	    prout("You'll be taking risks at that speed, Captain");
-	if ((game.isatb==1 && game.state.isy == iy1 && game.state.isx == ix1 &&
+	if ((game.isatb==1 && game.state.kscmdr.y == iy1 && game.state.kscmdr.x == ix1 &&
 	     scheduled(FSCDBAS)< ttime+game.state.date)||
-	    (scheduled(FCDBAS)<ttime+game.state.date && game.baty==iy1 && game.batx == ix1))
+	    (scheduled(FCDBAS)<ttime+game.state.date && game.battle.y==iy1 && game.battle.x == ix1))
 	    prout("The starbase there will be destroyed by then.");
 	proutn("New warp factor to try? ");
 	if (scan() == IHREAL) {

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-17 23:55:46 UTC (rev 583)
+++ trunk/src/setup.c	2006-09-18 03:49:33 UTC (rev 584)
@@ -147,29 +147,29 @@
 	prout("the Federation in a prisoner-of-war exchange.");
 	nb = Rand()*game.state.rembase+1;
 	/* Set up quadrant and position FQ adjacient to base */
-	if (game.quadx!=game.state.baseqx[nb] || game.quady!=game.state.baseqy[nb]) {
-	    game.quadx = game.state.baseqx[nb];
-	    game.quady = game.state.baseqy[nb];
-	    game.sectx = game.secty = 5;
+	if (game.quadrant.x!=game.state.baseq[nb].x || game.quadrant.y!=game.state.baseq[nb].y) {
+	    game.quadrant.x = game.state.baseq[nb].x;
+	    game.quadrant.y = game.state.baseq[nb].y;
+	    game.sector.x = game.sector.y = 5;
 	    newqad(1);
 	}
 	for (;;) {
 	    /* position next to base by trial and error */
-	    game.quad[game.sectx][game.secty] = IHDOT;
+	    game.quad[game.sector.x][game.sector.y] = IHDOT;
 	    for_sectors(l) {
-		game.sectx = 3.0*Rand() - 1.0 + game.basex;
-		game.secty = 3.0*Rand() - 1.0 + game.basey;
-		if (VALID_SECTOR(game.sectx, game.secty) &&
-		    game.quad[game.sectx][game.secty] == IHDOT) break;
+		game.sector.x = 3.0*Rand() - 1.0 + game.base.x;
+		game.sector.y = 3.0*Rand() - 1.0 + game.base.y;
+		if (VALID_SECTOR(game.sector.x, game.sector.y) &&
+		    game.quad[game.sector.x][game.sector.y] == IHDOT) break;
 	    }
 	    if (l < QUADSIZE+1) break; /* found a spot */
-	    game.sectx=QUADSIZE/2;
-	    game.secty=QUADSIZE/2;
+	    game.sector.x=QUADSIZE/2;
+	    game.sector.y=QUADSIZE/2;
 	    newqad(1);
 	}
     }
     /* Get new commission */
-    game.quad[game.sectx][game.secty] = game.ship = IHF;
+    game.quad[game.sector.x][game.sector.y] = game.ship = IHF;
     prout("Starfleet puts you in command of another ship,");
     prout("the Faerie Queene, which is antiquated but,");
     prout("still useable.");
@@ -208,8 +208,8 @@
     game.shldchg = game.shldup = 0;
     game.inlsr = 4.0;
     game.lsupres = 4.0;
-    iran(GALSIZE, &game.quadx, &game.quady);
-    iran(QUADSIZE, &game.sectx, &game.secty);
+    iran(GALSIZE, &game.quadrant.x, &game.quadrant.y);
+    iran(QUADSIZE, &game.sector.x, &game.sector.y);
     game.torps = game.intorps = 10;
     game.nprobes = (int)(3.0*Rand() + 2.0);	/* Give them 2-4 of these wonders */
     game.warpfac = 5.0;
@@ -217,7 +217,7 @@
     for (i=0; i < NDEVICES; i++) 
 	game.damage[i] = 0.0;
     // Set up assorted game parameters
-    game.batx = game.baty = 0;
+    game.battle.x = game.battle.y = 0;
     game.state.date = game.indate = 100.0*(int)(31.0*Rand()+20.0);
     game.nkinks = game.nhelp = game.resting = game.casual = 0;
     game.isatb = game.iscate = game.imine = game.icrystl = game.icraft = game.state.nplankl = 0;
@@ -276,7 +276,7 @@
 	    contflag = FALSE;
 	    for (j = i-1; j > 0; j--) {
 		/* Improved placement algorithm to spread out bases */
-		double distq = square(ix-game.state.baseqx[j]) + square(iy-game.state.baseqy[j]);
+		double distq = square(ix-game.state.baseq[j].x) + square(iy-game.state.baseq[j].y);
 		if (distq < 6.0*(BASEMAX+1-game.inbase) && Rand() < 0.75) {
 		    contflag = TRUE;
 #ifdef DEBUG
@@ -292,8 +292,8 @@
 	    }
 	} while (contflag);
 			
-	game.state.baseqx[i] = ix;
-	game.state.baseqy[i] = iy;
+	game.state.baseq[i].x = ix;
+	game.state.baseq[i].y = iy;
 	game.state.galaxy[ix][iy].starbase = 1;
 	game.state.chart[ix][iy].starbase = 1;
     }
@@ -320,8 +320,8 @@
 	    do { /* IF debugging, put commanders by bases, always! */
 #ifdef DEBUG
 		if (game.idebug && klumper <= game.inbase) {
-		    ix = game.state.baseqx[klumper];
-		    iy = game.state.baseqy[klumper];
+		    ix = game.state.baseq[klumper].x;
+		    iy = game.state.baseq[klumper].y;
 		    klumper++;
 		}
 		else
@@ -333,17 +333,17 @@
 		   game.state.galaxy[ix][iy].klingons > 8);
 	    // check for duplicate
 	    for (j = 1; j < i; j++)
-		if (game.state.cx[j]==ix && game.state.cy[j]==iy) break;
+		if (game.state.kcmdr[j].x==ix && game.state.kcmdr[j].y==iy) break;
 	} while (j < i);
 	game.state.galaxy[ix][iy].klingons++;
-	game.state.cx[i] = ix;
-	game.state.cy[i] = iy;
+	game.state.kcmdr[i].x = ix;
+	game.state.kcmdr[i].y = iy;
     }
     // Locate planets in galaxy
     for (i = 0; i < game.inplan; i++) {
 	do iran(GALSIZE, &ix, &iy); while (game.state.galaxy[ix][iy].planet);
-	game.state.plnets[i].x = ix;
-	game.state.plnets[i].y = iy;
+	game.state.plnets[i].w.x = ix;
+	game.state.plnets[i].w.y = iy;
 	if (i < NINHAB) {
 	    game.state.plnets[i].pclass = M;	// All inhabited planets are class M
 	    game.state.plnets[i].crystals = 0;
@@ -367,16 +367,16 @@
     if (game.state.nscrem > 0) {
 	do iran(GALSIZE, &ix, &iy);
 	while (game.state.galaxy[ix][iy].supernova || game.state.galaxy[ix][iy].klingons > 8);
-	game.state.isx = ix;
-	game.state.isy = iy;
+	game.state.kscmdr.x = ix;
+	game.state.kscmdr.y = iy;
 	game.state.galaxy[ix][iy].klingons++;
     }
     // Place thing (in tournament game, thingx == -1, don't want one!)
-    if (thingx != -1) {
-	iran(GALSIZE, &thingx, &thingy);
+    if (thing.x != -1) {
+	iran(GALSIZE, &thing.x, &thing.y);
     }
     else {
-	thingx = thingy = 0;
+	thing.x = thing.y = 0;
     }
 
 //	idate = date;
@@ -406,14 +406,14 @@
 	proutn("%d starbases in ", game.inbase);
     }
     for (i = 1; i <= game.inbase; i++) {
-	proutn(cramlc(0, game.state.baseqx[i], game.state.baseqy[i]));
+	proutn(cramlc(0, game.state.baseq[i]));
 	proutn("  ");
     }
     skip(2);
     proutn("The Enterprise is currently in ");
-    proutn(cramlc(quadrant, game.quadx, game.quady));
+    proutn(cramlc(quadrant, game.quadrant));
     proutn(" ");
-    proutn(cramlc(sector, game.sectx, game.secty));
+    proutn(cramlc(sector, game.sector));
     skip(2);
     prout("Good Luck!");
     if (game.state.nscrem) prout("  YOU'LL NEED IT.");
@@ -443,7 +443,7 @@
 		continue; // We don't want a blank entry
 	    }
 	    game.tourn = (int)aaitem;
-	    thingx = -1;
+	    thing.x = -1;
 	    srand((unsigned int)(int)aaitem);
 	    break;
 	}
@@ -534,43 +534,43 @@
     return FALSE;
 }
 
-void dropin(int iquad, int *ix, int *iy) 
+void dropin(int iquad, coord *w) 
 {
-    do iran(QUADSIZE, ix, iy);
-    while (game.quad[*ix][*iy] != IHDOT);
-    game.quad[*ix][*iy] = iquad;
+    do iran(QUADSIZE, &w->x, &w->y);
+    while (game.quad[w->x][w->y] != IHDOT);
+    game.quad[w->x][w->y] = iquad;
 }
 
 void newcnd(void) 
 {
     game.condit = IHGREEN;
     if (game.energy < 1000.0) game.condit = IHYELLOW;
-    if (game.state.galaxy[game.quadx][game.quady].klingons || game.state.galaxy[game.quadx][game.quady].romulans)
+    if (game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons || game.state.galaxy[game.quadrant.x][game.quadrant.y].romulans)
 	game.condit = IHRED;
     if (!game.alive) game.condit=IHDEAD;
 }
 
-void newkling(int i, int *pix, int *piy)
+void newkling(int i, coord *pi)
 /* drop new Klingon into current quadrant */
 {
-    dropin(IHK, pix, piy);
-    game.kx[i] = *pix;
-    game.ky[i] = *piy;
-    game.kdist[i] = game.kavgd[i] = sqrt(square(game.sectx-*pix) + square(game.secty-*piy));
+    dropin(IHK, pi);
+    game.ks[i] = *pi;
+    game.kdist[i] = game.kavgd[i] = sqrt(square(game.sector.x-pi->x) + square(game.sector.y-pi->y));
     game.kpower[i] = Rand()*150.0 +300.0 +25.0*game.skill;
 }
 
 void newqad(int shutup) 
 {
-    int i, j, ix, iy;
+    int i, j;
+    coord w;
     struct quadrant *here;
 
     game.iattak = 1;
     game.justin = 1;
-    game.basex = game.basey = 0;
+    game.base.x = game.base.y = 0;
     game.klhere = 0;
     game.comhere = 0;
-    game.plnetx = game.plnety = 0;
+    game.plnet.x = game.plnet.y = 0;
     game.ishere = 0;
     game.irhere = 0;
     game.iplnet = 0;
@@ -592,7 +592,7 @@
     for_sectors(i)
 	for_sectors(j) 
 	    game.quad[i][j] = IHDOT;
-    here = &game.state.galaxy[game.quadx][game.quady];
+    here = &game.state.galaxy[game.quadrant.x][game.quadrant.y];
     // cope with supernova
     if (here->supernova)
 	return;
@@ -601,25 +601,25 @@
     game.nenhere = game.klhere + game.irhere;
 
     // Position Starship
-    game.quad[game.sectx][game.secty] = game.ship;
+    game.quad[game.sector.x][game.sector.y] = game.ship;
 
     if (here->klingons) {
 	// Position ordinary Klingons
 	for (i = 1; i <= game.klhere; i++)
-	    newkling(i, &ix, &iy);
+	    newkling(i, &w);
 	// If we need a commander, promote a Klingon
 	for_commanders(i)
-	    if (game.state.cx[i]==game.quadx && game.state.cy[i]==game.quady) break;
+	    if (game.state.kcmdr[i].x==game.quadrant.x && game.state.kcmdr[i].y==game.quadrant.y) break;
 			
 	if (i <= game.state.remcom) {
-	    game.quad[ix][iy] = IHC;
+	    game.quad[w.x][w.y] = IHC;
 	    game.kpower[game.klhere] = 950.0+400.0*Rand()+50.0*game.skill;
 	    game.comhere = 1;
 	}
 
 	// If we need a super-commander, promote a Klingon
-	if (game.quadx == game.state.isx && game.quady == game.state.isy) {
-	    game.quad[game.kx[1]][game.ky[1]] = IHS;
+	if (game.quadrant.x == game.state.kscmdr.x && game.quadrant.y == game.state.kscmdr.y) {
+	    game.quad[game.ks[1].x][game.ks[1].y] = IHS;
 	    game.kpower[1] = 1175.0 + 400.0*Rand() + 125.0*game.skill;
 	    game.iscate = game.state.remkl>1;
 	    game.ishere = 1;
@@ -627,29 +627,28 @@
     }
     // Put in Romulans if needed
     for (i = game.klhere+1; i <= game.nenhere; i++) {
-	dropin(IHR, &ix, &iy);
-	game.kx[i] = ix;
-	game.ky[i] = iy;
-	game.kdist[i] = game.kavgd[i] = sqrt(square(game.sectx-ix) + square(game.secty-iy));
+	dropin(IHR, &w);
+	game.ks[i] = w;
+	game.kdist[i] = game.kavgd[i] = sqrt(square(game.sector.x-w.x) + square(game.sector.y-w.y));
 	game.kpower[i] = Rand()*400.0 + 450.0 + 50.0*game.skill;
     }
     // If quadrant needs a starbase, put it in
     if (here->starbase)
-	dropin(IHB, &game.basex, &game.basey);
+	dropin(IHB, &game.base);
 	
     // If quadrant needs a planet, put it in
     if (here->planet) {
 	game.iplnet = here->planet - game.state.plnets;
 	if (here->planet->inhabited == UNINHABITED)
-	    dropin(IHP, &game.plnetx, &game.plnety);
+	    dropin(IHP, &game.plnet);
 	else
-	    dropin(IHW, &game.plnetx, &game.plnety);
+	    dropin(IHW, &game.plnet);
     }
     // Check for game.condition
     newcnd();
     // And finally the stars
     for (i = 1; i <= here->stars; i++) 
-	dropin(IHSTAR, &ix, &iy);
+	dropin(IHSTAR, &w);
 
     // Check for RNZ
     if (game.irhere > 0 && game.klhere == 0 && (!here->planet || here->planet->inhabited == UNINHABITED)) {
@@ -666,15 +665,14 @@
 
     if (shutup==0) {
 	// Put in THING if needed
-	if (thingx == game.quadx && thingy == game.quady) {
-	    dropin(IHQUEST, &ix, &iy);
-	    iran(GALSIZE, &thingx, &thingy);
+	if (same(thing, game.quadrant)) {
+	    dropin(IHQUEST, &w);
+	    iran(GALSIZE, &thing.x, &thing.y);
 	    game.nenhere++;
 	    iqhere=1;
-	    game.kx[game.nenhere] = ix;
-	    game.ky[game.nenhere] = iy;
+	    game.ks[game.nenhere] = w;
 	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] =
-		sqrt(square(game.sectx-ix) + square(game.secty-iy));
+		sqrt(square(game.sector.x-w.x) + square(game.sector.y-w.y));
 	    game.kpower[game.nenhere] = Rand()*6000.0 +500.0 +250.0*game.skill;
 	    if (game.damage[DSRSENS] == 0.0) {
 		skip(1);
@@ -694,16 +692,16 @@
     #endif
 	    ) {
 	    do {
-		game.ithx = Rand() > 0.5 ? QUADSIZE : 1;
-		game.ithy = Rand() > 0.5 ? QUADSIZE : 1;
-	    } while (game.quad[game.ithx][game.ithy] != IHDOT);
-	    game.quad[game.ithx][game.ithy] = IHT;
+		game.tholian.x = Rand() > 0.5 ? QUADSIZE : 1;
+		game.tholian.y = Rand() > 0.5 ? QUADSIZE : 1;
+	    } while (game.quad[game.tholian.x][game.tholian.y] != IHDOT);
+	    game.quad[game.tholian.x][game.tholian.y] = IHT;
 	    game.ithere = 1;
 	    game.nenhere++;
-	    game.kx[game.nenhere] = game.ithx;
-	    game.ky[game.nenhere] = game.ithy;
+	    game.ks[game.nenhere].x = game.tholian.x;
+	    game.ks[game.nenhere].y = game.tholian.y;
 	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] =
-		sqrt(square(game.sectx-game.ithx) + square(game.secty-game.ithy));
+		sqrt(square(game.sector.x-game.tholian.x) + square(game.sector.y-game.tholian.y));
 	    game.kpower[game.nenhere] = Rand()*400.0 +100.0 +25.0*game.skill;
 	    /* Reserve unocupied corners */
 	    if (game.quad[1][1]==IHDOT) game.quad[1][1] = 'X';
@@ -718,7 +716,7 @@
     // Put in a few black holes
     for (i = 1; i <= 3; i++)
 	if (Rand() > 0.5) 
-	    dropin(IHBLANK, &ix, &iy);
+	    dropin(IHBLANK, &w);
 
     // Take out X's in corners if Tholian present
     if (game.ithere) {
@@ -749,12 +747,12 @@
 		t = game.kavgd[j];
 		game.kavgd[j] = game.kavgd[j+1];
 		game.kavgd[j+1] = t;
-		k = game.kx[j];
-		game.kx[j] = game.kx[j+1];
-		game.kx[j+1] = k;
-		k = game.ky[j];
-		game.ky[j] = game.ky[j+1];
-		game.ky[j+1] = k;
+		k = game.ks[j].x;
+		game.ks[j].x = game.ks[j+1].x;
+		game.ks[j+1].x = k;
+		k = game.ks[j].y;
+		game.ks[j].y = game.ks[j+1].y;
+		game.ks[j+1].y = k;
 		t = game.kpower[j];
 		game.kpower[j] = game.kpower[j+1];
 		game.kpower[j+1] = t;

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-17 23:55:46 UTC (rev 583)
+++ trunk/src/sst.c	2006-09-18 03:49:33 UTC (rev 584)
@@ -164,7 +164,8 @@
 static char line[128], *linep = line;
 
 struct game game;
-int thingx, thingy, iqhere, iqengry;
+coord thing;
+int iqhere, iqengry;
 int iscore, iskill; // Common PLAQ
 double aaitem;
 double perdate;
@@ -555,14 +556,14 @@
 		events();
 		if (game.alldone) break;	// Events did us in
 	    }
-	    if (game.state.galaxy[game.quadx][game.quady].supernova) { // Galaxy went Nova!
+	    if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova) { // Galaxy went Nova!
 		atover(0);
 		continue;
 	    }
 	    if (hitme && game.justin==0) {
 		attack(2);
 		if (game.alldone) break;
-		if (game.state.galaxy[game.quadx][game.quady].supernova) {	// went NOVA! 
+		if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova) {	// went NOVA! 
 		    atover(0);
 		    hitme = TRUE;
 		    continue;
@@ -660,22 +661,22 @@
     proutn(s);
 }
 
-char *cramlc(enum loctype key, int x, int y)
+char *cramlc(enum loctype key, coord w)
 {
     static char buf[32];
     buf[0] = '\0';
     if (key == quadrant) strcpy(buf, "Quadrant ");
     else if (key == sector) strcpy(buf, "Sector ");
-    sprintf(buf+strlen(buf), "%d - %d", x, y);
+    sprintf(buf+strlen(buf), "%d - %d", w.x, w.y);
     return buf;
 }
 
-void crmena(int i, int enemy, int key, int x, int y) 
+void crmena(int i, int enemy, int key, coord w) 
 {
     if (i == 1) proutn("***");
     cramen(enemy);
     proutn(" at ");
-    proutn(cramlc(key, x, y));
+    proutn(cramlc(key, w));
 }
 
 void crmshp(void) 
@@ -870,7 +871,7 @@
     }
     proutn("Induce supernova here? ");
     if (ja() != 0) {
-	game.state.galaxy[game.quadx][game.quady].supernova = TRUE;
+	game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova = TRUE;
 	atover(1);
     }
 }

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-17 23:55:46 UTC (rev 583)
+++ trunk/src/sst.h	2006-09-18 03:49:33 UTC (rev 584)
@@ -41,9 +41,12 @@
 #define for_local_enemies(i)	for (i = 1; i <= game.nenhere; i++)
 #define for_starbases(i)	for (i = 1; i <= game.state.rembase; i++)
 
+typedef struct {int x; int y;} coord;
+
+#define same(c1, c2)	(c1.x == c2.x && c1.y == c2.y)
+
 typedef struct {
-    int x;	/* Quadrant location of planet */
-    int y;
+    coord w;
     enum {M=0, N=1, O=2} pclass;
     int inhabited;	/* if NZ, an index into a name array */
 #define UNINHABITED	-1
@@ -62,16 +65,15 @@
 	rembase,		// remaining bases
 	starkl,			// destroyed stars
 	basekl,			// destroyed bases
-	cx[QUADSIZE+1],cy[QUADSIZE+1],	// Commander quadrant coordinates
-	baseqx[BASEMAX+1],		// Base quadrant X
-	baseqy[BASEMAX+1],		// Base quadrant Y
-	isx, isy,		// Coordinate of Super Commander
 	nromrem,		// Romulans remaining
 	nplankl;		// destroyed planets
 	planet plnets[PLNETMAX];  // Planet information
 	double date,		// stardate
 	    remres,		// remaining resources
 	    remtime;		// remaining time
+    coord baseq[BASEMAX+1];	// Base quadrant coordinates
+    coord kcmdr[QUADSIZE+1];	// Commander quadrant coordinates
+    coord kscmdr;		// Supercommander quadrant coordinates
     struct quadrant {
 	int stars;
 	planet *planet;
@@ -192,8 +194,13 @@
     double damage[NDEVICES];	// damage encountered
     double future[NEVENTS];	// future events
     char passwd[10];		// Self Destruct password
-    int kx[(QUADSIZE+1)*(QUADSIZE+1)];			// enemy sector locations
-    int ky[(QUADSIZE+1)*(QUADSIZE+1)];
+    coord ks[(QUADSIZE+1)*(QUADSIZE+1)];	// enemy sector locations
+    coord quadrant, sector;	// where we are
+    coord tholian;		// coordinates of Tholian
+    coord base;			// position of base in current quadrant
+    coord battle;		// base coordinates being attacked
+    coord plnet;		// location of planet in quadrant
+    coord probec;	// current probe quadrant
     int inkling,	// Initial number of klingons
 	inbase,		// Initial number of bases
 	incom,		// Initial number of commanders
@@ -204,14 +211,8 @@
 	condit,		// Condition (red/yellow/green/docked)
 	torps,		// number of torpedoes
 	ship,		// Ship type -- 'E' is Enterprise
-	quadx,		// where we are
-	quady,		//
-	sectx,		// where we are
-	secty,		//
 	length,		// length of game
 	skill,		// skill level
-	basex,		// position of base in current quadrant
-	basey,		//
 	klhere,		// klingons here
 	comhere,	// commanders here
 	casual,		// causalties
@@ -223,8 +224,6 @@
 	justin,		// just entered quadrant
 	alldone,	// game is now finished
 	shldchg,	// shield is changing (affects efficiency)
-	plnetx,		// location of planet in quadrant
-	plnety,		//
 	inorbit,	// orbiting
 	landed,		// party on planet (1), on ship (-1)
 	iplnet,		// planet # in quadrant
@@ -246,17 +245,11 @@
 	icrystl,	// dilithium crystals aboard
 	tourn,		// tournament number
 	thawed,		// thawed game
-	batx,		// base coordinates being attacked
-	baty,		//
 	ithere,		// Tholian is here 
-	ithx,		// coordinates of Tholian
-	ithy,		//
 	iseenit,	// seen base attack report
 #ifdef EXPERIMENTAL
 	ndistr,		//* count of distress calls */ 
 #endif /* EXPERIMENTAL */
-	probecx,	// current probe quadrant
-	probecy,	//
 	proben,		// number of moves for probe
 	isarmed,	// probe is armed
 	nprobes;	// number of probes available
@@ -296,7 +289,8 @@
 extern char citem[10];
 
 /* the Space Thingy's global state should *not* be saved! */
-extern int thingx, thingy, iqhere, iqengry;
+extern coord thing;
+extern int iqhere, iqengry;
 
 typedef enum {FWON, FDEPLETE, FLIFESUP, FNRG, FBATTLE,
               FNEG3, FNOVA, FSNOVAED, FABANDN, FDILITHIUM,
@@ -380,17 +374,17 @@
 int ja(void);
 void cramen(int);
 void crmshp(void);
-char *cramlc(enum loctype, int, int);
+char *cramlc(enum loctype, coord w);
 double expran(double);
 double Rand(void);
 void iran(int, int *, int *);
 #define square(i) ((i)*(i))
-void dropin(int, int*, int*);
+void dropin(int, coord*);
 void newcnd(void);
 void sortkl(void);
 void imove(void);
-void ram(int, int, int, int);
-void crmena(int, int, int, int, int);
+void ram(int, int, coord);
+void crmena(int, int, int, coord w);
 void deadkl(int, int, int, int, int);
 void timwrp(void);
 void movcom(void);
@@ -428,7 +422,7 @@
 void makechart(void);
 void enqueue(char *);
 char *systemname(planet *);
-void newkling(int, int *, int *);
+void newkling(int, coord *);
 
 /* mode arguments for srscan() */
 #define SCAN_FULL		1



From esr at mail.berlios.de  Mon Sep 18 07:16:41 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 18 Sep 2006 07:16:41 +0200
Subject: [Sst-commit-watch] r585 - trunk/src
Message-ID: <200609180516.k8I5GfJN001534@sheep.berlios.de>

Author: esr
Date: 2006-09-18 07:16:40 +0200 (Mon, 18 Sep 2006)
New Revision: 585

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/finish.c
   trunk/src/io.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
More type cleanup.  Use stdbool facility from C99 so code checkers can
do type-consistency analysis.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-18 03:49:33 UTC (rev 584)
+++ trunk/src/ai.c	2006-09-18 05:16:40 UTC (rev 585)
@@ -423,10 +423,8 @@
 
 	for_starbases(i2) {
 	    i = basetbl[i2];	/* bug in original had it not finding nearest*/
-	    ibq.x = game.state.baseq[i].x;
-	    ibq.y = game.state.baseq[i].y;
-	    if ((ibq.x == game.quadrant.x && ibq.y == game.quadrant.y) ||
-		(ibq.x == game.battle.x && ibq.y == game.battle.y) ||
+	    ibq = game.state.baseq[i];
+	    if (same(ibq, game.quadrant) || same(ibq, game.battle) ||
 		game.state.galaxy[ibq.x][ibq.y].supernova ||
 		game.state.galaxy[ibq.x][ibq.y].klingons > 8) 
 		continue;
@@ -446,8 +444,7 @@
 	    }
 	}
 	if (ifindit==0) return; /* Nothing suitable -- wait until next time*/
-	ibq.x = game.state.baseq[iwhichb].x;
-	ibq.y = game.state.baseq[iwhichb].y;
+	ibq = game.state.baseq[iwhichb];
 	/* decide how to move toward base */
 	ideltax = ibq.x - game.state.kscmdr.x;
 	ideltay = ibq.y - game.state.kscmdr.y;
@@ -587,8 +584,7 @@
 	}
     }
     game.quad[game.tholian.x][game.tholian.y] = IHT;
-    game.ks[game.nenhere].x=game.tholian.x;
-    game.ks[game.nenhere].y=game.tholian.y;
+    game.ks[game.nenhere] = game.tholian;
 
     /* check to see if all holes plugged */
     for_sectors(i) {

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-18 03:49:33 UTC (rev 584)
+++ trunk/src/battle.c	2006-09-18 05:16:40 UTC (rev 585)
@@ -151,7 +151,7 @@
     crmena(0, ienm, 2, w);
     if (ibumpd) proutn(_(" (original position)"));
     skip(1);
-    deadkl(w.x, w.y, ienm, game.sector.x, game.sector.y);
+    deadkl(w, ienm, game.sector.x, game.sector.y);
     proutn("***");
     crmshp();
     prout(_(" heavily damaged."));
@@ -265,7 +265,7 @@
 	    if (kp < h1) h1 = kp;
 	    game.kpower[ll] -= (game.kpower[ll]<0 ? -h1 : h1);
 	    if (game.kpower[ll] == 0) {
-		deadkl(w.x, w.y, iquad, w.x, w.y);
+		deadkl(w, iquad, w.x, w.y);
 		return;
 	    }
 	    crmena(1, iquad, 2, w);
@@ -283,7 +283,7 @@
 	    }
 	    if (game.quad[jx][jy]==IHBLANK) {
 		prout(_(" buffeted into black hole."));
-		deadkl(w.x, w.y, iquad, jx, jy);
+		deadkl(w, iquad, jx, jy);
 		return;
 	    }
 	    if (game.quad[jx][jy]!=IHDOT) {
@@ -346,7 +346,7 @@
 		proutn(_("Mr. Spock-"));
 		prouts(_("  \"Fascinating!\""));
 		skip(1);
-		deadkl(w.x, w.y, iquad, w.x, w.y);
+		deadkl(w, iquad, w.x, w.y);
 	    } else {
 		/*
 		 * Stas Sergeev added the possibility that
@@ -375,7 +375,7 @@
 		game.quad[w.x][w.y] = IHDOT;
 		game.ithere = 0;
 		game.tholian.x = game.tholian.y = 0;
-		deadkl(w.x, w.y, iquad, w.x, w.y);
+		deadkl(w, iquad, w.x, w.y);
 		return;
 	    }
 	    skip(1);
@@ -603,7 +603,7 @@
     return;
 }
 		
-void deadkl(int ix, int iy, int type, int ixx, int iyy) 
+void deadkl(coord w, int type, int ixx, int iyy) 
 {
     /* Added ixx and iyy allow enemy to "move" before dying */
     coord mv;
@@ -658,7 +658,7 @@
 
     /* For each kind of enemy, finish message to player */
     prout(_(" destroyed."));
-    game.quad[ix][iy] = IHDOT;
+    game.quad[w.x][w.y] = IHDOT;
     if (KLINGREM==0) return;
 
     game.state.remtime = game.state.remres/(game.state.remkl + 4*game.state.remcom);
@@ -667,7 +667,7 @@
     if (is_scheduled(FCDBAS) && game.battle.x==game.quadrant.x && game.battle.y==game.quadrant.y && type==IHC)
 	unschedule(FCDBAS);
     for_local_enemies(i)
-	if (game.ks[i].x==ix && game.ks[i].y==iy) break;
+	if (same(game.ks[i], w)) break;
     game.nenhere--;
     if (i <= game.nenhere)  {
 	for (j=i; j<=game.nenhere; j++) {
@@ -684,13 +684,13 @@
     return;
 }
 
-static int targetcheck(double x, double y, double *course) 
+static bool targetcheck(double x, double y, double *course) 
 {
     double deltx, delty;
-    /* Return TRUE if target is invalid */
+    /* Return true if target is invalid */
     if (!VALID_SECTOR(x, y)) {
 	huh();
-	return 1;
+	return true;
     }
     deltx = 0.1*(y - game.sector.y);
     delty = 0.1*(game.sector.x - x);
@@ -700,10 +700,10 @@
 	prout(_("  I recommend an immediate review of"));
 	prout(_("  the Captain's psychological profile.\""));
 	chew();
-	return 1;
+	return true;
     }
     *course = 1.90985932*atan2(deltx, delty);
-    return 0;
+    return false;
 }
 
 void photon(void) 
@@ -1210,7 +1210,7 @@
 	crmena(0,ienm,2,w);
 	skip(1);
 	if (kpow == 0) {
-	    deadkl(w.x, w.y, ienm, w.x, w.y);
+	    deadkl(w, ienm, w.x, w.y);
 	    if (KLINGREM==0) finish(FWON);
 	    if (game.alldone) return;
 	    kk--; /* don't do the increment */

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-18 03:49:33 UTC (rev 584)
+++ trunk/src/events.c	2006-09-18 05:16:40 UTC (rev 585)
@@ -36,6 +36,7 @@
     int ictbeam=0, ipage=0, istract=0, line, i=0, j, k, l, ixhold=0, iyhold=0;
     double fintim = game.state.date + game.optime, datemin, xtime, repair, yank=0;
     int radio_was_broken;
+    struct quadrant *pdest;
 
 #ifdef DEBUG
     if (game.idebug) prout("EVENTS");
@@ -280,8 +281,8 @@
 	    /* Not perfect, but will have to do */
 	    /* Handle case where base is in same quadrant as starship */
 	    if (game.battle.x==game.quadrant.x && game.battle.y==game.quadrant.y) {
-		game.state.chart[game.battle.x][game.battle.y].starbase = FALSE;
-		game.quad[game.base.x][game.base.y]= IHDOT;
+		game.state.chart[game.battle.x][game.battle.y].starbase = false;
+		game.quad[game.base.x][game.base.y] = IHDOT;
 		game.base.x=game.base.y=0;
 		newcnd();
 		skip(1);
@@ -299,10 +300,10 @@
 		prout(_(" has been destroyed by"));
 		if (game.isatb==2) prout(_("the Klingon Super-Commander"));
 		else prout(_("a Klingon Commander"));
-		game.state.chart[game.battle.x][game.battle.y].starbase = FALSE;
+		game.state.chart[game.battle.x][game.battle.y].starbase = false;
 	    }
 	    /* Remove Starbase from galaxy */
-	    game.state.galaxy[game.battle.x][game.battle.y].starbase = FALSE;
+	    game.state.galaxy[game.battle.x][game.battle.y].starbase = false;
 	    for_starbases(i)
 		if (game.state.baseq[i].x==game.battle.x && game.state.baseq[i].y==game.battle.y) {
 		    game.state.baseq[i].x=game.state.baseq[game.state.rembase].x;
@@ -360,17 +361,19 @@
 		    prout(".\"");
 		}
 	    }
+	    pdest = &game.state.galaxy[game.probec.x][game.probec.y];
 	    /* Update star chart if Radio is working or have access to
 	       radio. */
 	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED) {
-		game.state.chart[game.probec.x][game.probec.y].klingons = game.state.galaxy[game.probec.x][game.probec.y].klingons;
-		game.state.chart[game.probec.x][game.probec.y].starbase = game.state.galaxy[game.probec.x][game.probec.y].starbase;
-		game.state.chart[game.probec.x][game.probec.y].stars = game.state.galaxy[game.probec.x][game.probec.y].stars;
-		game.state.galaxy[game.probec.x][game.probec.y].charted = TRUE;
+		struct page *chp = &game.state.chart[game.probec.x][game.probec.y];
+
+		chp->klingons = pdest->klingons;
+		chp->starbase = pdest->starbase;
+		chp->stars = pdest->stars;
+		pdest->charted = true;
 	    }
 	    game.proben--; // One less to travel
-	    if (game.proben == 0 && game.isarmed &&
-		game.state.galaxy[game.probec.x][game.probec.y].stars) {
+	    if (game.proben == 0 && game.isarmed && pdest->stars) {
 		/* lets blow the sucker! */
 		snova(1,0);
 		unschedule(FDSPROB);
@@ -629,7 +632,7 @@
 			game.quad[scratch.x][scratch.y] = IHDOT;
 			break;
 		    case IHB: /* Destroy base */
-			game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase = FALSE;
+			game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase = false;
 			for_starbases(i)
 			    if (game.state.baseq[i].x==game.quadrant.x && game.state.baseq[i].y==game.quadrant.y) 
 				break;
@@ -667,7 +670,7 @@
 			kount++;
 			break;
 		    case IHK: /* kill klingon */
-			deadkl(scratch.x,scratch.y,iquad, scratch.x, scratch.y);
+			deadkl(scratch,iquad, scratch.x, scratch.y);
 			break;
 		    case IHC: /* Damage/destroy big enemies */
 		    case IHS:
@@ -676,7 +679,7 @@
 			    if (game.ks[ll].x==scratch.x && game.ks[ll].y==scratch.y) break;
 			game.kpower[ll] -= 800.0; /* If firepower is lost, die */
 			if (game.kpower[ll] <= 0.0) {
-			    deadkl(scratch.x, scratch.y, iquad, scratch.x, scratch.y);
+			    deadkl(scratch, iquad, scratch.x, scratch.y);
 			    break;
 			}
 			newc.x = scratch.x + scratch.x - hits[mm][1];
@@ -693,7 +696,7 @@
 			    proutn(_(", blasted into "));
 			    crmena(0, IHBLANK, 2, newc);
 			    skip(1);
-			    deadkl(scratch.x, scratch.y, iquad, newc.x, newc.y);
+			    deadkl(scratch, iquad, newc.x, newc.y);
 			    break;
 			}
 			if (iquad1 != IHDOT) {
@@ -886,7 +889,7 @@
     if ((game.quadrant.x == nq.x && game.quadrant.y == nq.y) ||
 	game.damage[DRADIO] == 0 ||
 	game.condit == IHDOCKED)
-	game.state.galaxy[nq.x][nq.y].supernova = TRUE;
+	game.state.galaxy[nq.x][nq.y].supernova = true;
     /* If supernova destroys last klingons give special message */
     if (KLINGREM==0 && (nq.x != game.quadrant.x || nq.y != game.quadrant.y)) {
 	skip(2);

Modified: trunk/src/finish.c
===================================================================
--- trunk/src/finish.c	2006-09-18 03:49:33 UTC (rev 584)
+++ trunk/src/finish.c	2006-09-18 05:16:40 UTC (rev 585)
@@ -61,7 +61,7 @@
 	int l=1;
 	while (l <= game.nenhere) {
 	    if (game.kpower[l]*game.kdist[l] <= whammo) 
-		deadkl(game.ks[l].x,game.ks[l].x, game.quad[game.ks[l].x][game.ks[l].y], game.ks[l].x, game.ks[l].y);
+		deadkl(game.ks[l], game.quad[game.ks[l].x][game.ks[l].y], game.ks[l].x, game.ks[l].y);
 	    l++;
 	}
     }

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-09-18 03:49:33 UTC (rev 584)
+++ trunk/src/io.c	2006-09-18 05:16:40 UTC (rev 585)
@@ -303,7 +303,7 @@
     }
 }
  
-void commandhook(char *cmd, int before) {
+void commandhook(char *cmd, bool before) {
 }
 
 /*
@@ -430,7 +430,7 @@
 void setpassword(void) 
 {
     if (!(game.options & OPTION_CURSES)) {
-	while (TRUE) {
+	for (;;) {
 	    scan();
 	    strcpy(game.passwd, citem);
 	    chew();

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-18 03:49:33 UTC (rev 584)
+++ trunk/src/moving.c	2006-09-18 05:16:40 UTC (rev 585)
@@ -2,7 +2,7 @@
 #include "sstlinux.h"
 #include "sst.h"
 
-static void getcd(int, int);
+static void getcd(bool, int);
 
 void imove(void) 
 {
@@ -14,7 +14,7 @@
     w.x = w.y = 0;
     if (game.inorbit) {
 	prout("Helmsman Sulu- \"Leaving standard orbit.\"");
-	game.inorbit = FALSE;
+	game.inorbit = false;
     }
 
     angle = ((15.0 - game.direc) * 0.5235988);
@@ -246,7 +246,7 @@
     }
 }
 
-static void getcd(int isprobe, int akey) {
+static void getcd(bool isprobe, int akey) {
 	/* This program originally required input in terms of a (clock)
 	   direction and distance. Somewhere in history, it was changed to
 	   cartesian coordinates. So we need to convert. I think
@@ -446,7 +446,7 @@
     }
 
     if (game.energy > 30.0) {
-	getcd(FALSE, 0);
+	getcd(false, 0);
 	if (game.direc == -1.0) return;
 	power = 20.0 + 100.0*game.dist;
     }
@@ -511,7 +511,7 @@
 	}
 			
 	/* Read in course and distance */
-	getcd(FALSE, 0);
+	getcd(false, 0);
 	if (game.direc == -1.0) return;
 
 	/* Make sure starship has enough energy for the trip */
@@ -734,7 +734,7 @@
 	skip(1);
 	prout("safely out of quadrant.");
 	if (game.damage[DRADIO] == 0.0)
-	    game.state.galaxy[game.quadrant.x][game.quadrant.y].charted = TRUE;
+	    game.state.galaxy[game.quadrant.x][game.quadrant.y].charted = true;
 	/* Try to use warp engines */
 	if (game.damage[DWARPEN]) {
 	    skip(1);
@@ -869,16 +869,16 @@
 	if (ja()==0) return;
     }
 
-    game.isarmed = FALSE;
+    game.isarmed = false;
     if (key == IHALPHA && strcmp(citem,"armed") == 0) {
-	game.isarmed = TRUE;
+	game.isarmed = true;
 	key = scan();
     }
     else if (key == IHEOL) {
 	proutn("Arm NOVAMAX warhead? ");
 	game.isarmed = ja();
     }
-    getcd(TRUE, key);
+    getcd(true, key);
     if (game.direc == -1.0) return;
     game.nprobes--;
     angle = ((15.0 - game.direc) * 0.5235988);
@@ -943,8 +943,7 @@
 	    }
 	}
 	/* Since starbase not in quadrant, set up new quadrant */
-	game.quadrant.x = game.state.baseq[line].x;
-	game.quadrant.y = game.state.baseq[line].y;
+	game.quadrant = game.state.baseq[line];
 	newqad(1);
     }
     /* dematerialize starship */

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-18 03:49:33 UTC (rev 584)
+++ trunk/src/planets.c	2006-09-18 05:16:40 UTC (rev 585)
@@ -443,7 +443,7 @@
 	prouts("Sulu- \"Captain!  It's working!\"");
 	skip(2);
 	while (game.nenhere > 0)
-	    deadkl(game.ks[1].x,game.ks[1].y,game.quad[game.ks[1].x][game.ks[1].y],game.ks[1].x,game.ks[1].y);
+	    deadkl(game.ks[1], game.quad[game.ks[1].x][game.ks[1].y],game.ks[1].x,game.ks[1].y);
 	prout("Ensign Chekov-  \"Congratulations, Captain!\"");
 	if (KLINGREM == 0) finish(FWON);
 	if ((game.options & OPTION_PLAIN) == 0) {

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-18 03:49:33 UTC (rev 584)
+++ trunk/src/reports.c	2006-09-18 05:16:40 UTC (rev 585)
@@ -135,7 +135,7 @@
 		proutn("  -1");
 	    else {
 		if (!game.damage[DRADIO])
-		    game.state.galaxy[x][y].charted = TRUE;
+		    game.state.galaxy[x][y].charted = true;
 		game.state.chart[x][y].klingons = game.state.galaxy[x][y].klingons;
 		game.state.chart[x][y].starbase = game.state.galaxy[x][y].starbase;
 		game.state.chart[x][y].stars = game.state.galaxy[x][y].stars;
@@ -151,7 +151,8 @@
 
 void dreprt(void) 
 {
-    int jdam = FALSE, i;
+    bool jdam = false;
+    int i;
     chew();
 
     for (i = 0; i < NDEVICES; i++) {
@@ -159,7 +160,7 @@
 	    if (!jdam) {
 		prout("DEVICE            -REPAIR TIMES-");
 		prout("                IN FLIGHT   DOCKED");
-		jdam = TRUE;
+		jdam = true;
 	    }
 	    prout("  %16s %8.2f  %8.2f", 
 		  device[i],
@@ -334,15 +335,16 @@
     /* the "sy" request is undocumented */
     static char requests[][3] =
 	{"","da","co","po","ls","wa","en","to","sh","kl","sy", "ti"};
-    int leftside=TRUE, rightside=TRUE, i, j, jj, req=0, nn=FALSE;
-    int goodScan=TRUE;
+    
+    int i, j, jj, req=0;
+    int goodScan=true, leftside=true, rightside=true, nn=false; 
     switch (l) {
     case SCAN_FULL: // SRSCAN
 	if (game.damage[DSRSENS] != 0) {
 	    /* Allow base's sensors if docked */
 	    if (game.condit != IHDOCKED) {
 		prout("   S.R. SENSORS DAMAGED!");
-		goodScan=FALSE;
+		goodScan=false;
 	    }
 	    else
 		prout("  [Using Base's sensors]");
@@ -352,11 +354,11 @@
 	    game.state.chart[game.quadrant.x][game.quadrant.y].klingons = game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons;
 	    game.state.chart[game.quadrant.x][game.quadrant.y].starbase = game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase;
 	    game.state.chart[game.quadrant.x][game.quadrant.y].stars = game.state.galaxy[game.quadrant.x][game.quadrant.y].stars;
-	    game.state.galaxy[game.quadrant.x][game.quadrant.y].charted = TRUE;
+	    game.state.galaxy[game.quadrant.x][game.quadrant.y].charted = true;
 	}
 	scan();
-	if (isit("chart")) nn = TRUE;
-	if (isit("no")) rightside = FALSE;
+	if (isit("chart")) nn = true;
+	if (isit("no")) rightside = false;
 	chew();
 	prout("    1 2 3 4 5 6 7 8 9 10");
 	break;
@@ -371,16 +373,16 @@
 	    prout("UNRECOGNIZED REQUEST. Legal requests are:");
 	    prout("  date, condition, position, lsupport, warpfactor,");
 	    prout("  energy, torpedoes, shields, klingons, time, system, bases.");
-	    return FALSE;
+	    return false;
 	}
 	// no break
     case SCAN_STATUS: // STATUS
 	chew();
-	leftside = FALSE;
+	leftside = false;
 	skip(1);
 	// no break
     case SCAN_NO_LEFTSIDE: // REQUEST
-	leftside=FALSE;
+	leftside=false;
 	break;
     }
     if (game.condit != IHDOCKED) newcnd();
@@ -405,8 +407,8 @@
 			
 void eta(void)
 {
-    int ix1, ix2, iy1, iy2, prompt=FALSE;
-    int wfl;
+    int ix1, ix2, iy1, iy2;
+    bool wfl, prompt = false;
     double ttime, twarp, tpower;
     if (game.damage[DCOMPTR] != 0.0) {
 	prout("COMPUTER DAMAGED, USE A POCKET CALCULATOR.");
@@ -414,7 +416,7 @@
 	return;
     }
     if (scan() != IHREAL) {
-	prompt = TRUE;
+	prompt = true;
 	chew();
 	proutn("Destination quadrant and/or sector? ");
 	if (scan()!=IHREAL) {
@@ -449,10 +451,10 @@
     }
     game.dist = sqrt(square(iy1-game.quadrant.x+0.1*(iy2-game.sector.x))+
 		square(ix1-game.quadrant.y+0.1*(ix2-game.sector.y)));
-    wfl = FALSE;
+    wfl = false;
 
     if (prompt) prout("Answer \"no\" if you don't know the value:");
-    while (TRUE) {
+    for (;;) {
 	chew();
 	proutn("Time or arrival date? ");
 	if (scan()==IHREAL) {
@@ -470,7 +472,7 @@
 	chew();
 	proutn("Warp factor? ");
 	if (scan()== IHREAL) {
-	    wfl = TRUE;
+	    wfl = true;
 	    twarp = aaitem;
 	    if (twarp<1.0 || twarp > 10.0) {
 		huh();
@@ -480,7 +482,7 @@
 	}
 	prout("Captain, certainly you can give me one of these.");
     }
-    while (TRUE) {
+    for (;;) {
 	chew();
 	ttime = (10.0*game.dist)/square(twarp);
 	tpower = game.dist*twarp*twarp*twarp*(game.shldup+1);
@@ -490,7 +492,7 @@
 		if (!wfl) return;
 		proutn("New warp factor to try? ");
 		if (scan() == IHREAL) {
-		    wfl = TRUE;
+		    wfl = true;
 		    twarp = aaitem;
 		    if (twarp<1.0 || twarp > 10.0) {
 			huh();
@@ -532,7 +534,7 @@
 	    prout("The starbase there will be destroyed by then.");
 	proutn("New warp factor to try? ");
 	if (scan() == IHREAL) {
-	    wfl = TRUE;
+	    wfl = true;
 	    twarp = aaitem;
 	    if (twarp<1.0 || twarp > 10.0) {
 		huh();

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-18 03:49:33 UTC (rev 584)
+++ trunk/src/setup.c	2006-09-18 05:16:40 UTC (rev 585)
@@ -19,7 +19,7 @@
 #endif /* __HISTORICAL__ */
 }
 
-void freeze(int boss) 
+void freeze(bool boss) 
 {
     FILE *fp;
     int key;
@@ -220,7 +220,8 @@
     game.battle.x = game.battle.y = 0;
     game.state.date = game.indate = 100.0*(int)(31.0*Rand()+20.0);
     game.nkinks = game.nhelp = game.resting = game.casual = 0;
-    game.isatb = game.iscate = game.imine = game.icrystl = game.icraft = game.state.nplankl = 0;
+    game.isatb = game.iscate = true;
+    game.imine = game.icrystl = game.icraft = game.state.nplankl = 0;
     game.state.starkl = game.state.basekl = 0;
     game.iscraft = 1;
     game.landed = -1;
@@ -269,16 +270,16 @@
 	}
     // Locate star bases in galaxy
     for (i = 1; i <= game.inbase; i++) {
-	int contflag;
+	bool contflag;
 	do {
 	    do iran(GALSIZE, &ix, &iy);
 	    while (game.state.galaxy[ix][iy].starbase);
-	    contflag = FALSE;
+	    contflag = false;
 	    for (j = i-1; j > 0; j--) {
 		/* Improved placement algorithm to spread out bases */
 		double distq = square(ix-game.state.baseq[j].x) + square(iy-game.state.baseq[j].y);
 		if (distq < 6.0*(BASEMAX+1-game.inbase) && Rand() < 0.75) {
-		    contflag = TRUE;
+		    contflag = true;
 #ifdef DEBUG
 		    prout("DEBUG: Abandoning base #%d at %d-%d", i, ix, iy);
 #endif
@@ -423,9 +424,9 @@
     if (game.neutz) attack(0);	// bad luck to start in a Romulan Neutral Zone
 }
 
-int choose(int needprompt) 
+bool choose(bool needprompt) 
 {
-    while (TRUE) {
+    for(;;) {
 	game.tourn = 0;
 	game.thawed = 0;
 	game.skill = SKILL_NONE;
@@ -454,7 +455,7 @@
 	    if (!game.alldone) game.thawed = 1; // No plaque if not finished
 	    report();
 	    waitfor();
-	    return TRUE;
+	    return true;
 	}
 	if (isit("regular")) break;
 	proutn("What is \"");
@@ -531,7 +532,7 @@
     if (game.inkling > 50) {
 	game.inbase = (game.state.rembase += 1);
     }
-    return FALSE;
+    return false;
 }
 
 void dropin(int iquad, coord *w) 
@@ -730,17 +731,18 @@
 void sortkl(void) 
 {
     double t;
-    int sw, j, k;
+    int j, k;
+    bool sw;
 
     // The author liked bubble sort. So we will use it. :-(
 
     if (game.nenhere-iqhere-game.ithere < 2) return;
 
     do {
-	sw = FALSE;
+	sw = false;
 	for (j = 1; j < game.nenhere; j++)
 	    if (game.kdist[j] > game.kdist[j+1]) {
-		sw = TRUE;
+		sw = true;
 		t = game.kdist[j];
 		game.kdist[j] = game.kdist[j+1];
 		game.kdist[j+1] = t;

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-18 03:49:33 UTC (rev 584)
+++ trunk/src/sst.c	2006-09-18 05:16:40 UTC (rev 585)
@@ -298,7 +298,7 @@
     /* Give help on commands */
     int key;
     key = scan();
-    while (TRUE) {
+    for(;;) {
 	if (key == IHEOL) {
 	    setwnd(prompt_window);
 	    proutn("Help on what command? ");
@@ -375,13 +375,14 @@
 
 static void makemoves(void) 
 {
-    int i, v = 0, hitme;
+    int i, v = 0;
+    bool hitme;
     clrscr();
     setwnd(message_window);
-    while (TRUE) { /* command loop */
+    for(;;) { /* command loop */
 	drawmaps(1);
-	while (TRUE)  { /* get a command */
-	    hitme = FALSE;
+	for(;;)  { /* get a command */
+	    hitme = false;
 	    game.justin = 0;
 	    game.optime = 0.0;
 	    i = -1;
@@ -413,7 +414,7 @@
 		break;
 	    listCommands();
 	}
-	commandhook(commands[i].name, TRUE);
+	commandhook(commands[i].name, true);
 	switch (v) { /* command switch */
 	case SRSCAN:                 // srscan
 	    srscan(SCAN_FULL);
@@ -429,11 +430,11 @@
 	    break;
 	case PHASERS:			// phasers
 	    phasers();
-	    if (game.ididit) hitme = TRUE;
+	    if (game.ididit) hitme = true;
 	    break;
 	case TORPEDO:			// photons
 	    photon();
-	    if (game.ididit) hitme = TRUE;
+	    if (game.ididit) hitme = true;
 	    break;
 	case MOVE:			// move
 	    warp(1);
@@ -441,7 +442,7 @@
 	case SHIELDS:			// shields
 	    doshield(1);
 	    if (game.ididit) {
-		hitme=TRUE;
+		hitme=true;
 		game.shldchg = 0;
 	    }
 	    break;
@@ -460,7 +461,7 @@
 	    break;
 	case REST:			// rest
 	    wait();
-	    if (game.ididit) hitme = TRUE;
+	    if (game.ididit) hitme = true;
 	    break;
 	case WARP:			// warp
 	    setwrp();
@@ -473,22 +474,22 @@
 	    break;
 	case ORBIT:			// orbit
 	    orbit();
-	    if (game.ididit) hitme = TRUE;
+	    if (game.ididit) hitme = true;
 	    break;
 	case TRANSPORT:			// transport "beam"
 	    beam();
 	    break;
 	case MINE:			// mine
 	    mine();
-	    if (game.ididit) hitme = TRUE;
+	    if (game.ididit) hitme = true;
 	    break;
 	case CRYSTALS:			// crystals
 	    usecrystals();
-	    if (game.ididit) hitme = TRUE;
+	    if (game.ididit) hitme = true;
 	    break;
 	case SHUTTLE:			// shuttle
 	    shuttle();
-	    if (game.ididit) hitme = TRUE;
+	    if (game.ididit) hitme = true;
 	    break;
 	case PLANETS:			// Planet list
 	    preport();
@@ -504,12 +505,12 @@
 	    break;
 	case EMEXIT:			// Emergency exit
 	    clrscr();			// Hide screen
-	    freeze(TRUE);		// forced save
+	    freeze(true);		// forced save
 	    exit(1);			// And quick exit
 	    break;
 	case PROBE:
 	    probe();			// Launch probe
-	    if (game.ididit) hitme = TRUE;
+	    if (game.ididit) hitme = true;
 	    break;
 	case ABANDON:			// Abandon Ship
 	    abandn();
@@ -518,14 +519,14 @@
 	    dstrct();
 	    break;
 	case SAVE:			// Save Game
-	    freeze(FALSE);
+	    freeze(false);
 	    clrscr();
 	    if (game.skill > SKILL_GOOD)
 		prout("WARNING--Saved games produce no plaques!");
 	    break;
 	case DEATHRAY:			// Try a desparation measure
 	    deathray();
-	    if (game.ididit) hitme = TRUE;
+	    if (game.ididit) hitme = true;
 	    break;
 	case DEBUGCMD:			// What do we want for debug???
 #ifdef DEBUG
@@ -534,7 +535,7 @@
 	    break;
 	case MAYDAY:			// Call for help
 	    mayday();
-	    if (game.ididit) hitme = TRUE;
+	    if (game.ididit) hitme = true;
 	    break;
 	case QUIT:
 	    game.alldone = 1;		// quit the game
@@ -546,7 +547,7 @@
 	    helpme();	// get help
 	    break;
 	}
-	commandhook(commands[i].name, FALSE);
+	commandhook(commands[i].name, false);
 	for (;;) {
 	    if (game.alldone) break;		// Game has ended
 #ifdef DEBUG
@@ -565,7 +566,7 @@
 		if (game.alldone) break;
 		if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova) {	// went NOVA! 
 		    atover(0);
-		    hitme = TRUE;
+		    hitme = true;
 		    continue;
 		}
 	    }
@@ -606,7 +607,7 @@
 	strcat(line, argv[i]);
 	strcat(line, " ");
     }
-    while (TRUE) { /* Play a game */
+    for(;;) { /* Play a game */
 	setwnd(fullscreen_window);
 #ifdef DEBUG
 	prout("INITIAL OPTIONS: %0lx", game.options);
@@ -627,7 +628,7 @@
 	    proutn("Do you want your score recorded?");
 	    if (ja()) {
 		chew2();
-		freeze(FALSE);
+		freeze(false);
 	    }
 	}
 	proutn("Do you want to play again? ");
@@ -779,14 +780,14 @@
     return IHALPHA;
 }
 
-int ja(void) 
+bool ja(void) 
 {
     chew();
-    while (TRUE) {
+    for(;;) {
 	scan();
 	chew();
-	if (*citem == 'y') return TRUE;
-	if (*citem == 'n') return FALSE;
+	if (*citem == 'y') return true;
+	if (*citem == 'n') return false;
 	proutn("Please answer with \"Y\" or \"N\": ");
     }
 }
@@ -871,7 +872,7 @@
     }
     proutn("Induce supernova here? ");
     if (ja() != 0) {
-	game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova = TRUE;
+	game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova = true;
 	atover(1);
     }
 }

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-18 03:49:33 UTC (rev 584)
+++ trunk/src/sst.h	2006-09-18 05:16:40 UTC (rev 585)
@@ -7,6 +7,7 @@
 #include <locale.h>
 #include <libintl.h>
 #include <curses.h>
+#include <stdbool.h>
 
 #ifdef DATA_DIR
 #define SSTDOC DATA_DIR"/"DOC_NAME
@@ -77,16 +78,16 @@
     struct quadrant {
 	int stars;
 	planet *planet;
-	int starbase;
+	bool starbase;
 	int klingons;
 	int romulans;
-	int supernova;
-	int charted;
+	bool supernova;
+	bool charted;
 #ifdef EXPERIMENTAL
 	enum {secure, distressed, enslaved} status;
 #endif /* EXPERIMENTAL */
     } galaxy[GALSIZE+1][GALSIZE+1]; 	// The Galaxy (subscript 0 not used)
-    struct {
+    struct page {
 	int stars;
 	int starbase;
 	int klingons;
@@ -201,6 +202,16 @@
     coord battle;		// base coordinates being attacked
     coord plnet;		// location of planet in quadrant
     coord probec;	// current probe quadrant
+    bool gamewon,	// Finished!
+	ididit,		// Action taken -- allows enemy to attack
+	alive,		// We are alive (not killed)
+	justin,		// just entered quadrant
+	alldone,	// game is now finished
+	neutz,		// Romulan Neutral Zone
+	isatb,		// =1 if super commander is attacking base
+	isarmed,	// probe is armed
+	thawed,		// thawed game
+	iscate;		// super commander is here
     int inkling,	// Initial number of klingons
 	inbase,		// Initial number of bases
 	incom,		// Initial number of commanders
@@ -218,11 +229,6 @@
 	casual,		// causalties
 	nhelp,		// calls for help
 	nkinks,		// count of energy-barrier crossings
-	ididit,		// Action taken -- allows enemy to attack
-	gamewon,	// Finished!
-	alive,		// We are alive (not killed)
-	justin,		// just entered quadrant
-	alldone,	// game is now finished
 	shldchg,	// shield is changing (affects efficiency)
 	inorbit,	// orbiting
 	landed,		// party on planet (1), on ship (-1)
@@ -231,27 +237,22 @@
 	inplan,		// initial planets
 	nenhere,	// number of enemies in quadrant
 	ishere,		// super-commander in quandrant
-	neutz,		// Romulan Neutral Zone
 	irhere,		// Romulans in quadrant
 	icraft,		// Kirk in Galileo
 	ientesc,	// attempted escape from supercommander
 	iscraft,	// =1 if craft on ship, -1 if removed from game
-	isatb,		// =1 if super commander is attacking base
-	iscate,		// super commander is here
 #ifdef DEBUG
 	idebug,		// debug mode
 #endif
 	iattak,		// attack recursion elimination (was cracks[4])
 	icrystl,	// dilithium crystals aboard
 	tourn,		// tournament number
-	thawed,		// thawed game
 	ithere,		// Tholian is here 
 	iseenit,	// seen base attack report
 #ifdef EXPERIMENTAL
 	ndistr,		//* count of distress calls */ 
 #endif /* EXPERIMENTAL */
 	proben,		// number of moves for probe
-	isarmed,	// probe is armed
 	nprobes;	// number of probes available
     double inresor,	// initial resources
 	intime,		// initial time
@@ -299,11 +300,6 @@
 			  FHOLE} FINTYPE ;
 enum loctype {neither, quadrant, sector};
 
-#ifndef TRUE
-#define TRUE (1)
-#define FALSE (0)
-#endif
-
 #define IHR 'R'
 #define IHK 'K'
 #define IHC 'C'
@@ -332,7 +328,7 @@
 /* Function prototypes */
 void prelim(void);
 void attack(int);
-int choose(int);
+bool choose(bool);
 void setup(int);
 void score(void);
 void atover(int);
@@ -357,7 +353,7 @@
 void finish(FINTYPE);
 void dstrct(void);
 void kaboom(void);
-void freeze(int);
+void freeze(bool);
 int thaw(void);
 void plaque(void);
 int scan(void);
@@ -371,7 +367,7 @@
 void proutn(char *, ...);
 void stars(void);
 void newqad(int);
-int ja(void);
+bool ja(void);
 void cramen(int);
 void crmshp(void);
 char *cramlc(enum loctype, coord w);
@@ -385,7 +381,7 @@
 void imove(void);
 void ram(int, int, coord);
 void crmena(int, int, int, coord w);
-void deadkl(int, int, int, int, int);
+void deadkl(coord, int, int, int);
 void timwrp(void);
 void movcom(void);
 void torpedo(double, double, int, int, double *, int, int);
@@ -418,7 +414,7 @@
 void cgetline(char *, int);
 void waitfor(void);
 void setpassword(void);
-void commandhook(char *, int);
+void commandhook(char *, bool);
 void makechart(void);
 void enqueue(char *);
 char *systemname(planet *);



From esr at mail.berlios.de  Mon Sep 18 10:05:57 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 18 Sep 2006 10:05:57 +0200
Subject: [Sst-commit-watch] r586 - trunk/src
Message-ID: <200609180805.k8I85v08019653@sheep.berlios.de>

Author: esr
Date: 2006-09-18 10:05:56 +0200 (Mon, 18 Sep 2006)
New Revision: 586

Modified:
   trunk/src/setup.c
   trunk/src/sst.h
Log:
Revert an incorrect bool type change.


Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-18 05:16:40 UTC (rev 585)
+++ trunk/src/setup.c	2006-09-18 08:05:56 UTC (rev 586)
@@ -220,8 +220,7 @@
     game.battle.x = game.battle.y = 0;
     game.state.date = game.indate = 100.0*(int)(31.0*Rand()+20.0);
     game.nkinks = game.nhelp = game.resting = game.casual = 0;
-    game.isatb = game.iscate = true;
-    game.imine = game.icrystl = game.icraft = game.state.nplankl = 0;
+    game.isatb = game.iscate = game.imine = game.icrystl = game.icraft = game.state.nplankl = 0;
     game.state.starkl = game.state.basekl = 0;
     game.iscraft = 1;
     game.landed = -1;

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-18 05:16:40 UTC (rev 585)
+++ trunk/src/sst.h	2006-09-18 08:05:56 UTC (rev 586)
@@ -208,10 +208,8 @@
 	justin,		// just entered quadrant
 	alldone,	// game is now finished
 	neutz,		// Romulan Neutral Zone
-	isatb,		// =1 if super commander is attacking base
 	isarmed,	// probe is armed
-	thawed,		// thawed game
-	iscate;		// super commander is here
+	thawed;		// thawed game
     int inkling,	// Initial number of klingons
 	inbase,		// Initial number of bases
 	incom,		// Initial number of commanders
@@ -241,6 +239,8 @@
 	icraft,		// Kirk in Galileo
 	ientesc,	// attempted escape from supercommander
 	iscraft,	// =1 if craft on ship, -1 if removed from game
+	isatb,		// =1 if super commander is attacking base
+	iscate,		// super commander is here
 #ifdef DEBUG
 	idebug,		// debug mode
 #endif



From esr at mail.berlios.de  Mon Sep 18 10:18:51 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 18 Sep 2006 10:18:51 +0200
Subject: [Sst-commit-watch] r587 - trunk/src
Message-ID: <200609180818.k8I8Ippb020839@sheep.berlios.de>

Author: esr
Date: 2006-09-18 10:18:50 +0200 (Mon, 18 Sep 2006)
New Revision: 587

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/finish.c
   trunk/src/io.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
New debug-mode support.  Get rid of DEBUG, the instrumentation is cheap and
we want to cut down on the possibilities for unanticipated logic changes due
to configuration vagaries.  Take the debugging bit out of the game structure.
Start on the logger.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-18 08:05:56 UTC (rev 586)
+++ trunk/src/ai.c	2006-09-18 08:18:50 UTC (rev 587)
@@ -154,12 +154,8 @@
 	    if (game.condit==IHDOCKED && (game.options & OPTION_BASE)) /* protected by base -- back off ! */
 		motion -= game.skill*(2.0-square(Rand()));
 	}
-#ifdef DEBUG
-	if (game.idebug) {
-	    proutn("MOTION = %1.2f", motion);
-	    proutn("  FORCES = %1.2f", forces);
-	}
-#endif
+	if (idebug)
+	    proutn("=== MOTION = %1.2f, FORCES = %1.2f, ", motion, forces);
 	/* don't move if no motion */
 	if (motion==0) return;
 	/* Limit motion according to skill */
@@ -170,11 +166,9 @@
     if (motion > 0 && nsteps > mdist) nsteps = mdist; /* don't overshoot */
     if (nsteps > QUADSIZE) nsteps = QUADSIZE; /* This shouldn't be necessary */
     if (nsteps < 1) nsteps = 1; /* This shouldn't be necessary */
-#ifdef DEBUG
-    if (game.idebug) {
-	prout("NSTEPS = %d", nsteps);
+    if (idebug) {
+	proutn("NSTEPS = %d:", nsteps);
     }
-#endif
     /* Compute preferred values of delta X and Y */
     mx = game.sector.x - com.x;
     my = game.sector.y - com.y;
@@ -185,11 +179,8 @@
     next = com;
     /* main move loop */
     for (ll = 0; ll < nsteps; ll++) {
-#ifdef DEBUG
-	if (game.idebug) {
-	    prout("%d", ll+1);
-	}
-#endif
+	if (idebug)
+	    proutn(" %d", ll+1);
 	/* Check if preferred position available */
 	lookx = next.x + mx;
 	looky = next.y + my;
@@ -234,14 +225,14 @@
 	if (success) {
 	    next.x = lookx;
 	    next.y = looky;
-#ifdef DEBUG
-	    if (game.idebug) {
-		prout(cramlc(neither, next));
-	    }
-#endif
+	    if (idebug)
+		proutn(cramlc(neither, next));
 	}
 	else break; /* done early */
+	
     }
+    if (idebug)
+	prout("");
     /* Put commander in place within same quadrant */
     game.quad[com.x][com.y] = IHDOT;
     game.quad[next.x][next.y] = ienm;
@@ -267,9 +258,7 @@
     coord w; 
     int i;
 
-#ifdef DEBUG
-    if (game.idebug) prout("MOVCOM");
-#endif
+    if (idebug) prout("== MOVCOM");
 
     /* Figure out which Klingon is the commander (or Supercommander)
        and do move */
@@ -302,7 +291,7 @@
     sortkl();
 }
 
-static int movescom(coord iq, int flag, int *ipage) 
+static bool movescom(coord iq, int flag, int *ipage) 
 {
     int i;
 
@@ -315,7 +304,7 @@
 	for_starbases(i)
 	    if (game.state.baseq[i].x==iq.x && game.state.baseq[i].y==iq.y) return 1;
     }
-    if (game.justin && !game.iscate) return 1;
+    if (game.justin && !game.iscate) return true;
     /* do the move */
     game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].klingons--;
     game.state.kscmdr = iq;
@@ -358,7 +347,7 @@
 	    break;
 	}
     }
-    return 0; /* looks good! */
+    return false; /* looks good! */
 }
 			
 void scom(int *ipage)
@@ -368,10 +357,9 @@
     int basetbl[BASEMAX+1];
     double bdist[BASEMAX+1];
     int flag;
-#ifdef DEBUG
-    if (game.idebug) prout("SCOM");
-#endif
 
+    if (idebug) prout("== SCOM");
+
     /* Decide on being active or passive */
     flag = ((NKILLC+NKILLK)/(game.state.date+0.01-game.indate) < 0.1*game.skill*(game.skill+1.0) ||
 	    (game.state.date-game.indate) < 3.0);
@@ -497,7 +485,7 @@
 	    /* attack the base */
 	    if (flag) return; /* no, don't attack base! */
 	    game.iseenit = 0;
-	    game.isatb=1;
+	    game.isatb = 1;
 	    schedule(FSCDBAS, 1.0 +2.0*Rand());
 	    if (is_scheduled(FCDBAS)) 
 		postpone(FSCDBAS, scheduled(FCDBAS)-game.state.date);
@@ -522,9 +510,7 @@
     }
     /* Check for intelligence report */
     if (
-#ifdef DEBUG
-	game.idebug==0 &&
-#endif
+	!idebug &&
 	(Rand() > 0.2 ||
 	 (game.damage[DRADIO] > 0.0 && game.condit != IHDOCKED) ||
 	 !game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].charted))

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-18 08:05:56 UTC (rev 586)
+++ trunk/src/battle.c	2006-09-18 08:18:50 UTC (rev 587)
@@ -469,9 +469,7 @@
 
     game.iattak = 1;
     if (game.alldone) return;
-#ifdef DEBUG
-    if (game.idebug) prout("ATTACK!");
-#endif
+    if (idebug) prout("=== ATTACK!");
 
     if (game.ithere) movetho();
 

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-18 08:05:56 UTC (rev 586)
+++ trunk/src/events.c	2006-09-18 08:18:50 UTC (rev 587)
@@ -38,9 +38,7 @@
     int radio_was_broken;
     struct quadrant *pdest;
 
-#ifdef DEBUG
-    if (game.idebug) prout("EVENTS");
-#endif
+    if (idebug) prout("=== EVENTS");
 
     radio_was_broken = (game.damage[DRADIO] != 0.0);
 
@@ -298,7 +296,8 @@
 		proutn(_("   the starbase in "));
 		proutn(cramlc(quadrant, game.battle));
 		prout(_(" has been destroyed by"));
-		if (game.isatb==2) prout(_("the Klingon Super-Commander"));
+		if (game.isatb == 2) 
+		    prout(_("the Klingon Super-Commander"));
 		else prout(_("a Klingon Commander"));
 		game.state.chart[game.battle.x][game.battle.y].starbase = false;
 	    }
@@ -323,8 +322,8 @@
 	case FSCMOVE: /* Supercommander moves */
 	    schedule(FSCMOVE, 0.2777);
 	    if (game.ientesc+istract==0 &&
-		game.isatb!=1 &&
-		(game.iscate!=1 || game.justin==1)) scom(&ipage);
+		game.isatb != 1 &&
+		(game.iscate != 1 || !game.justin)) scom(&ipage);
 	    break;
 	case FDSPROB: /* Move deep space probe */
 	    schedule(FDSPROB, 0.01);
@@ -775,15 +774,13 @@
 		}
 		if (num <=0) break;
 	    }
-#ifdef DEBUG
-	    if (game.idebug) {
-		proutn("Super nova here?");
+	    if (idebug) {
+		proutn("=== Super nova here?");
 		if (ja()==1) {
 		    nq.x = game.quadrant.x;
 		    nq.y = game.quadrant.y;
 		}
 	    }
-#endif
 	}
 
 	if (nq.x != game.quadrant.y || nq.y != game.quadrant.y || game.justin != 0) {

Modified: trunk/src/finish.c
===================================================================
--- trunk/src/finish.c	2006-09-18 08:05:56 UTC (rev 586)
+++ trunk/src/finish.c	2006-09-18 08:18:50 UTC (rev 587)
@@ -71,8 +71,8 @@
 
 void finish(FINTYPE ifin) 
 {
-    int igotit = 0;
-    game.alldone = 1;
+    bool igotit = false;
+    game.alldone = true;
     skip(3);
     prout(_("It is stardate %.1f."), game.state.date);
     skip(1);
@@ -84,7 +84,7 @@
 
 	prout(_("You have smashed the Klingon invasion fleet and saved"));
 	prout(_("the Federation."));
-	game.gamewon=1;
+	game.gamewon = true;
 	if (game.alive) {
 	    double badpt;
 	    badpt = 5.0*game.state.starkl + game.casual + 10.0*game.state.nplankl +
@@ -134,11 +134,7 @@
 		    break;
 		}
 		if (game.skill >= SKILL_EXPERT) {
-		    if (game.thawed
-#ifdef DEBUG
-			&& !game.idebug
-#endif
-			)
+		    if (game.thawed && !idebug)
 			prout(_("You cannot get a citation, so..."));
 		    else {
 			proutn(_("Do you want your Commodore Emeritus Citation printed? "));

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-09-18 08:05:56 UTC (rev 586)
+++ trunk/src/io.c	2006-09-18 08:18:50 UTC (rev 587)
@@ -27,6 +27,8 @@
 	(void)endwin();
 	putchar('\n');
     }
+    if (logfp)
+	fclose(logfp);
 }
 
 void iostart(void) 
@@ -203,6 +205,8 @@
     } else {
 	fgets(line, max, stdin);
     }
+    if (logfp)
+	fputs(line, logfp);
     line[strlen(line)-1] = '\0';
 }
 

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-18 08:05:56 UTC (rev 586)
+++ trunk/src/moving.c	2006-09-18 08:18:50 UTC (rev 587)
@@ -565,13 +565,11 @@
 	}
 	/* Decide if time warp will occur */
 	if (0.5*game.dist*pow(7.0,game.warpfac-10.0) > Rand()) twarp=1;
-#ifdef DEBUG
-	if (game.idebug &&game.warpfac==10 && twarp==0) {
+	if (idebug && game.warpfac==10 && twarp==0) {
 	    blooey=0;
-	    proutn("Force time warp? ");
+	    proutn("=== Force time warp? ");
 	    if (ja()==1) twarp=1;
 	}
-#endif
 	if (blooey || twarp) {
 	    /* If time warp or engine damage, check path */
 	    /* If it is obstructed, don't do warp or damage */

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-18 08:05:56 UTC (rev 586)
+++ trunk/src/planets.c	2006-09-18 08:18:50 UTC (rev 587)
@@ -27,7 +27,8 @@
 
 void preport(void) 
 {
-    int iknow = 0, i;
+    bool iknow = false;
+    int i;
     skip(1);
     chew();
     prout("Spock-  \"Planet report follows, Captain.\"");
@@ -35,14 +36,11 @@
     for (i = 0; i < game.inplan; i++) {
 	if ((game.state.plnets[i].known != unknown
 	    && game.state.plnets[i].crystals != 0)
-#ifdef DEBUG
-	    || ( game.idebug && game.state.plnets[i].x !=0)
-#endif
+	    || (idebug && game.state.plnets[i].w.x !=0)
 	    ) {
-	    iknow = 1;
-#ifdef DEBUG
-	    if (game.idebug && game.state.plnets[i].known==unknown) proutn("(Unknown) ");
-#endif
+	    iknow = true;
+	    if (idebug && game.state.plnets[i].known==unknown)
+		proutn("(Unknown) ");
 	    proutn(cramlc(quadrant, game.state.plnets[i].w));
 	    proutn("   class ");
 	    proutn(classes[game.state.plnets[i].pclass]);

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-18 08:05:56 UTC (rev 586)
+++ trunk/src/reports.c	2006-09-18 08:18:50 UTC (rev 587)
@@ -21,7 +21,7 @@
     } else {
         if (is_scheduled(FCDBAS))
 	    proutn("Base in %i - %i attacked by C. Alive until %.1f", game.battle.x, game.battle.y, scheduled(FCDBAS));
-        if (game.isatb == 1)
+        if (game.isatb)
 	    proutn("Base in %i - %i attacked by S. Alive until %.1f", game.state.kscmdr.x, game.state.kscmdr.y, scheduled(FSCDBAS));
     }
     clreol();

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-18 08:05:56 UTC (rev 586)
+++ trunk/src/setup.c	2006-09-18 08:18:50 UTC (rev 587)
@@ -195,9 +195,6 @@
 {
     int i,j, krem, klumper;
     int ix, iy;
-#ifdef DEBUG
-    game.idebug = 0;
-#endif
     //  Decide how many of everything
     if (choose(needprompt)) return; // frozen game
     // Prepare the Enterprise
@@ -279,16 +276,14 @@
 		double distq = square(ix-game.state.baseq[j].x) + square(iy-game.state.baseq[j].y);
 		if (distq < 6.0*(BASEMAX+1-game.inbase) && Rand() < 0.75) {
 		    contflag = true;
-#ifdef DEBUG
-		    prout("DEBUG: Abandoning base #%d at %d-%d", i, ix, iy);
-#endif
+		    if (idebug)
+			prout("=== Abandoning base #%d at %d-%d", i, ix, iy);
 		    break;
 		}
-#ifdef DEBUG
 		else if (distq < 6.0 * (BASEMAX+1-game.inbase)) {
-		    prout("DEBUG: saving base #%d, close to #%d", i, j);
+		    if (idebug)
+			prout("=== Saving base #%d, close to #%d", i, j);
 		}
-#endif
 	    }
 	} while (contflag);
 			
@@ -300,7 +295,8 @@
     // Position ordinary Klingon Battle Cruisers
     krem = game.inkling;
     klumper = 0.25*game.skill*(9.0-game.length)+1.0;
-    if (klumper > 9) klumper = 9; // Can't have more than 9 in quadrant
+    if (klumper > 9) 
+	klumper = 9; // Can't have more than 9 in quadrant
     do {
 	double r = Rand();
 	int klump = (1.0 - r*r)*klumper;
@@ -312,20 +308,20 @@
 	game.state.galaxy[ix][iy].klingons += klump;
     } while (krem > 0);
     // Position Klingon Commander Ships
-#ifdef DEBUG
+#ifdef ODEBUG
     klumper = 1;
-#endif
+#endif /* ODEBUG */
     for (i = 1; i <= game.incom; i++) {
 	do {
 	    do { /* IF debugging, put commanders by bases, always! */
-#ifdef DEBUG
+#ifdef ODEBUG
 		if (game.idebug && klumper <= game.inbase) {
 		    ix = game.state.baseq[klumper].x;
 		    iy = game.state.baseq[klumper].y;
 		    klumper++;
 		}
 		else
-#endif
+#endif /* ODEBUG */
 		    iran(GALSIZE, &ix, &iy);
 	    }
 	    while ((!game.state.galaxy[ix][iy].klingons && Rand() < 0.75)||
@@ -508,9 +504,11 @@
 	    prout("\"?");
     }
     setpassword();
-#ifdef DEBUG
-    if (strcmp(game.passwd, "debug")==0) game.idebug = 1;
-#endif
+    if (strcmp(game.passwd, "debug")==0) {
+	idebug = true;
+	logfp = fopen("sst-input.log", "w");
+	fputs("=== Debug mode enabled\n", stdout);
+    }
 
     // Use parameters to generate initial values of things
     game.damfac = 0.5 * game.skill;
@@ -687,9 +685,6 @@
 	if ((game.skill < SKILL_GOOD && Rand() <= 0.02) ||   /* Lighten up if skill is low */
 	    (game.skill == SKILL_GOOD && Rand() <= 0.05) ||
 	    (game.skill > SKILL_GOOD && Rand() <= 0.08)
-    #ifdef DEBUG
-	    || strcmp(game.passwd, "tholianx")==0
-    #endif
 	    ) {
 	    do {
 		game.tholian.x = Rand() > 0.5 ? QUADSIZE : 1;

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-18 08:05:56 UTC (rev 586)
+++ trunk/src/sst.c	2006-09-18 08:18:50 UTC (rev 587)
@@ -166,10 +166,14 @@
 struct game game;
 coord thing;
 int iqhere, iqengry;
-int iscore, iskill; // Common PLAQ
+int iscore, iskill;	// Common PLAQ
 double aaitem;
 double perdate;
 char citem[10];
+int seed;		// the random-number seed
+bool idebug;		// debug mode
+bool randready;		// Has the random-number generator initialized?
+FILE *logfp;
 
 char *device[NDEVICES] = {
 	"S. R. Sensors",
@@ -529,9 +533,7 @@
 	    if (game.ididit) hitme = true;
 	    break;
 	case DEBUGCMD:			// What do we want for debug???
-#ifdef DEBUG
 	    debugme();
-#endif
 	    break;
 	case MAYDAY:			// Call for help
 	    mayday();
@@ -539,9 +541,6 @@
 	    break;
 	case QUIT:
 	    game.alldone = 1;		// quit the game
-#ifdef DEBUG
-	    if (game.idebug) score();
-#endif
 	    break;
 	case HELP:
 	    helpme();	// get help
@@ -550,9 +549,6 @@
 	commandhook(commands[i].name, false);
 	for (;;) {
 	    if (game.alldone) break;		// Game has ended
-#ifdef DEBUG
-	    if (game.idebug) prout("2500");
-#endif
 	    if (game.optime != 0.0) {
 		events();
 		if (game.alldone) break;	// Events did us in
@@ -574,6 +570,7 @@
 	}
 	if (game.alldone) break;
     }
+    if (idebug) prout("=== Ending");
 }
 
 
@@ -609,9 +606,6 @@
     }
     for(;;) { /* Play a game */
 	setwnd(fullscreen_window);
-#ifdef DEBUG
-	prout("INITIAL OPTIONS: %0lx", game.options);
-#endif /* DEBUG */
 	clrscr();
 	prelim();
 	setup(line[0] == '\0');
@@ -702,8 +696,17 @@
     return -avrage*log(1e-7 + Rand());
 }
 
-double Rand(void) {
-	return rand()/(1.0 + (double)RAND_MAX);
+double Rand(void) 
+{
+    if (!randready) {
+	if (seed == 0)
+	    seed = (unsigned)time(NULL);
+	if (idebug)
+	    fprintf(logfp, "seed %d\n", seed);
+	srand(seed);
+	randready = true;
+    }
+    return rand()/(1.0 + (double)RAND_MAX);
 }
 
 void iran(int size, int *i, int *j) 
@@ -808,14 +811,13 @@
 
 }
 
-#ifdef DEBUG
 void debugme(void) 
 {
     proutn("Reset levels? ");
     if (ja() != 0) {
-	if (energy < game.inenrg) energy = game.inenrg;
-	shield = game.inshld;
-	torps = game.intorps;
+	if (game.energy < game.inenrg) game.energy = game.inenrg;
+	game.shield = game.inshld;
+	game.torps = game.intorps;
 	game.lsupres = game.inlsr;
     }
     proutn("Reset damage? ");
@@ -827,8 +829,8 @@
     }
     proutn("Toggle game.idebug? ");
     if (ja() != 0) {
-	game.idebug = !game.idebug;
-	if (game.idebug) prout("Debug output ON");
+	idebug = !idebug;
+	if (idebug) prout("Debug output ON");
 	else prout("Debug output OFF");
     }
     proutn("Cause selective damage? ");
@@ -876,4 +878,3 @@
 	atover(1);
     }
 }
-#endif

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-18 08:05:56 UTC (rev 586)
+++ trunk/src/sst.h	2006-09-18 08:18:50 UTC (rev 587)
@@ -20,8 +20,6 @@
 #define min(x, y)	((x)<(y)?(x):(y))
 #define max(x, y)	((x)>(y)?(x):(y))
 
-// #define DEBUG
-
 #define PHASEFAC (2.0)
 #define GALSIZE	(8)
 #define NINHAB (GALSIZE * GALSIZE / 2)
@@ -241,9 +239,6 @@
 	iscraft,	// =1 if craft on ship, -1 if removed from game
 	isatb,		// =1 if super commander is attacking base
 	iscate,		// super commander is here
-#ifdef DEBUG
-	idebug,		// debug mode
-#endif
 	iattak,		// attack recursion elimination (was cracks[4])
 	icrystl,	// dilithium crystals aboard
 	tourn,		// tournament number
@@ -288,6 +283,10 @@
 extern double perdate;
 extern double aaitem;
 extern char citem[10];
+extern int seed;
+extern bool randready;
+extern bool idebug;
+extern FILE *logfp;
 
 /* the Space Thingy's global state should *not* be saved! */
 extern coord thing;



From esr at mail.berlios.de  Mon Sep 18 10:34:17 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 18 Sep 2006 10:34:17 +0200
Subject: [Sst-commit-watch] r588 - trunk/src
Message-ID: <200609180834.k8I8YHFp022414@sheep.berlios.de>

Author: esr
Date: 2006-09-18 10:34:16 +0200 (Mon, 18 Sep 2006)
New Revision: 588

Modified:
   trunk/src/io.c
   trunk/src/sst.c
Log:
Input capture to a file 'sst-input.log' now happens automatically
when idebug is on.


Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-09-18 08:18:50 UTC (rev 587)
+++ trunk/src/io.c	2006-09-18 08:34:16 UTC (rev 588)
@@ -38,13 +38,13 @@
     textdomain(PACKAGE);
     gettext("");
 
+    if (atexit(outro)){
+	fprintf(stderr,"Unable to register outro(), exiting...\n");
+	exit(1);
+    }
     if (!(game.options & OPTION_CURSES)) {
 	rows = atoi(getenv("LINES"));
     } else {
-	if (atexit(outro)){
-	    fprintf(stderr,"Unable to register outro(), exiting...\n");
-	    exit(1);
-	}
 	(void)initscr();
 #ifdef KEY_MIN
 	keypad(stdscr, TRUE);

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-18 08:18:50 UTC (rev 587)
+++ trunk/src/sst.c	2006-09-18 08:34:16 UTC (rev 588)
@@ -584,14 +584,17 @@
     else
 	game.options |= OPTION_TTY;
 
-    while ((option = getopt(argc, argv, "t")) != -1) {
+    while ((option = getopt(argc, argv, "tx")) != -1) {
 	switch (option) {
 	case 't':
 	    game.options |= OPTION_TTY;
 	    game.options &=~ OPTION_CURSES;
 	    break;
+	case 'x':
+	    idebug = true;
+	    break;
 	default:
-	    fprintf(stderr, "usage: sst [-t] [startcommand...].\n");
+	    fprintf(stderr, "usage: sst [-t] [-x] [startcommand...].\n");
 	    exit(0);
 	}
     }



From esr at mail.berlios.de  Mon Sep 18 21:38:36 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 18 Sep 2006 21:38:36 +0200
Subject: [Sst-commit-watch] r589 - trunk/src
Message-ID: <200609181938.k8IJcaQL000186@sheep.berlios.de>

Author: esr
Date: 2006-09-18 21:38:35 +0200 (Mon, 18 Sep 2006)
New Revision: 589

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/finish.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
Checkpoint with several small changes, committed so Stas can play
with the debug code:

1. Change planet member of quadrant struct back to integer so it can be saved.
2. Add code for torpedoing an inhabited world.  Score drops by 400 when you
   do that, it's the only outcome worse than being killed.
3. Events are now structures and can hold quadrant coordinates.
4. EXPERIMENTAL tag is gone, code for BSD-Trek events is in good enough
   shape to test now.
5. User input is always logged.
6. SEED command is implemented.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-18 08:34:16 UTC (rev 588)
+++ trunk/src/ai.c	2006-09-18 19:38:35 UTC (rev 589)
@@ -334,7 +334,7 @@
 	    game.state.plnets[i].crystals == 1) {
 	    /* destroy the planet */
 	    DESTROY(&game.state.plnets[i]);
-	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = NULL;
+	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = NOPLANET;
 	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED) {
 		if (*ipage==0) pause_game(1);
 		*ipage = 1;

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-18 08:34:16 UTC (rev 588)
+++ trunk/src/battle.c	2006-09-18 19:38:35 UTC (rev 589)
@@ -318,7 +318,7 @@
 	    crmena(1, iquad, 2, w);
 	    prout(_(" destroyed."));
 	    game.state.nplankl++;
-	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = NULL;
+	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = NOPLANET;
 	    DESTROY(&game.state.plnets[game.iplnet]);
 	    game.iplnet = 0;
 	    game.plnet.x = game.plnet.y = 0;
@@ -328,6 +328,22 @@
 		finish(FDPLANET);
 	    }
 	    return;
+	case IHW: /* Hit an inhabited world -- very bad! */
+	    crmena(1, iquad, 2, w);
+	    prout(_(" destroyed."));
+	    game.state.nworldkl++;
+	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = NOPLANET;
+	    DESTROY(&game.state.plnets[game.iplnet]);
+	    game.iplnet = 0;
+	    game.plnet.x = game.plnet.y = 0;
+	    game.quad[w.x][w.y] = IHDOT;
+	    if (game.landed==1) {
+		/* captain perishes on planet */
+		finish(FDPLANET);
+	    }
+	    prout("You have just destroyed an inhabited planet.");
+	    prout("Celebratory rallies are being held on the Klingon homeworld.");
+	    return;
 	case IHSTAR: /* Hit a star */
 	    if (Rand() > 0.10) {
 		nova(w.x, w.y);

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-18 08:34:16 UTC (rev 588)
+++ trunk/src/events.c	2006-09-18 19:38:35 UTC (rev 589)
@@ -1,42 +1,61 @@
 #include "sst.h"
 #include <math.h>
 
-void unschedule(int evtype)
+event *unschedule(int evtype)
 /* remove an event from the schedule */
 {
-    game.future[evtype] = FOREVER;
+    game.future[evtype].date = FOREVER;
+    return &game.future[evtype];
 }
 
 int is_scheduled(int evtype)
 /* is an event of specified type scheduled */
 {
-    return game.future[evtype] != FOREVER;
+    return game.future[evtype].date != FOREVER;
 }
 
 extern double scheduled(int evtype)
 /* when will this event happen? */
 {
-    return game.future[evtype];
+    return game.future[evtype].date;
 }
 
-void schedule(int evtype, double offset)
+event *schedule(int evtype, double offset)
 /* schedule an event of specified type */
 {
-    game.future[evtype] = game.state.date + offset;
+    game.future[evtype].date = game.state.date + offset;
+    return &game.future[evtype];
 }
 
 void postpone(int evtype, double offset)
 /* poistpone a scheduled event */
 {
-    game.future[evtype] += offset;
+    game.future[evtype].date += offset;
 }
 
+static bool cancelrest(void)
+{
+    if (game.resting) {
+	skip(1);
+	proutn(_("Mr. Spock-  \"Captain, shall we cancel the rest period?\""));
+	if (ja()) {
+	    game.resting = 0;
+	    game.optime = 0.0;
+	    return true;
+	}
+    }
+
+    return false;
+}
+
 void events(void) 
 {
     int ictbeam=0, ipage=0, istract=0, line, i=0, j, k, l, ixhold=0, iyhold=0;
     double fintim = game.state.date + game.optime, datemin, xtime, repair, yank=0;
     int radio_was_broken;
-    struct quadrant *pdest;
+    struct quadrant *pdest, *q;
+    coord w, hold;
+    event *ev;
 
     if (idebug) prout("=== EVENTS");
 
@@ -48,9 +67,9 @@
 	if (game.alldone) return;
 	datemin = fintim;
 	for (l = 1; l < NEVENTS; l++)
-	    if (game.future[l] < datemin) {
+	    if (game.future[l].date < datemin) {
 		line = l;
-		datemin = game.future[l];
+		datemin = game.future[l].date;
 	    }
 	xtime = datemin-game.state.date;
 	game.state.date = datemin;
@@ -228,10 +247,10 @@
 	    schedule(FCDBAS, 1.0+3.0*Rand());
 	    if (game.isatb) /* extra time if SC already attacking */
 		postpone(FCDBAS, scheduled(FSCDBAS)-game.state.date);
-	    game.future[FBATTAK] = game.future[FCDBAS] +expran(0.3*game.intime);
+	    game.future[FBATTAK].date = game.future[FCDBAS].date + expran(0.3*game.intime);
 	    game.iseenit = 0;
-	    if (game.damage[DRADIO] != 0.0 &&
-		game.condit != IHDOCKED) break; /* No warning :-( */
+	    if (game.damage[DRADIO] != 0.0 && game.condit != IHDOCKED) 
+		break; /* No warning :-( */
 	    game.iseenit = 1;
 	    if (ipage==0) pause_game(1);
 	    ipage = 1;
@@ -242,15 +261,8 @@
 	    proutn(_("   hold out only until stardate %d"),
 		   (int)scheduled(FCDBAS));
 	    prout(".\"");
-	    if (game.resting) {
-		skip(1);
-		proutn(_("Mr. Spock-  \"Captain, shall we cancel the rest period?\""));
-		if (ja()) {
-		    game.resting = 0;
-		    game.optime = 0.0;
-		    return;
-		}
-	    }
+	    if (cancelrest())
+		return;
 	    break;
 	case FSCDBAS: /* Supercommander destroys base */
 	    unschedule(FSCDBAS);
@@ -380,25 +392,18 @@
 		    return;
 	    }
 	    break;
-#ifdef EXPERIMENTAL
 	case FDISTR: /* inhabited system issues distress call */
-	    /* in BSD Trek this is a straight 1 stardate ahead */ 
-	    schedule(FDISTR, 1.0 + Rand());
-	    /* if we already have too many, throw this one away */
-	    if (game.ndistr >= MAXDISTR)
-		break;
+	    schedule(FDISTR, expran(0.5*game.intime));
 	    /* try a whole bunch of times to find something suitable */
 	    for (i = 0; i < 100; i++) {
-		struct quadrant *q;
-		iran(GALSIZE, &ix, &iy);
+		iran(GALSIZE, &w.x, &w.y);
 		q = &game.state.galaxy[game.quadrant.x][game.quadrant.y];
 		/* need a quadrant which is not the current one,
 		   which has some stars which are inhabited and
 		   not already under attack, which is not
 		   supernova'ed, and which has some Klingons in it */
-		if (!((ix == game.quadrant.x && iy == game.quadrant.y) || q->stars<=0 ||
-		      (q->qsystemname & Q_DISTRESSED) ||
-		      (q->qsystemname & Q_SYSTEM) == 0 || q->klings <= 0))
+		if (!(same(game.quadrant, w) || q->stars<=0 ||
+		      q->supernova || q->status != secure || q->klingons <= 0))
 		    break;
 	    }
 	    if (i >= 100)
@@ -406,96 +411,78 @@
 		break;
 
 	    /* got one!!  Schedule its enslavement */
-	    game.ndistr++;
-	    e = xsched(E_ENSLV, 1, ix, iy, q->qsystemname);
-	    q->qsystemname = (e - Event) | Q_DISTRESSED;
+	    ev = schedule(FENSLV, expran(game.intime));
+	    ev->quadrant = w;
+	    q->status = distressed;
 
 	    /* tell the captain about it if we can */
-	    if (game.damage[DRADIO] == 0.0)
+	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED)
 	    {
-		printf("\nUhura: Captain, starsystem %s in quadrant %d,%d is under attack\n",
-		       Systemname[e->systemname], ix, iy);
-		restcancel++;
+		prout("Uhura: Captain, starsystem %s in quadrant %d - %d is under attack.",
+		      systemname(q->planet), w.x, w.y);
+		if (cancelrest())
+		    return;
 	    }
-	    else
-		/* if we can't tell him, make it invisible */
-		e->evcode |= E_HIDDEN;
 	    break;
       case FENSLV:		/* starsystem is enslaved */
-	    unschedule(e);
+	    ev = unschedule(FENSLV);
 	    /* see if current distress call still active */
-	    q = &Quad[e->x][e->y];
-	    if (q->klings <= 0)
-	    {
-		/* no Klingons, clean up */
-		/* restore the system name */
-		q->qsystemname = e->systemname;
+	    q = &game.state.galaxy[ev->quadrant.x][ev->quadrant.y];
+	    if (q->klingons <= 0) {
+		q->status = secure;
 		break;
 	    }
+	    q->status = enslaved;
 
 	    /* play stork and schedule the first baby */
-	    e = schedule(E_REPRO, Param.eventdly[E_REPRO] * franf(), e->x, e->y, e->systemname);
+	    ev = schedule(FREPRO, expran(2.0 * game.intime));
 
 	    /* report the disaster if we can */
-	    if (game.damage[DRADIO] == 0.0)
+	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED)
 	    {
-		printf("\nUhura:  We've lost contact with starsystem %s\n",
-		       Systemname[e->systemname]);
-		printf("  in quadrant %d,%d.\n", e->x, e->y);
+		prout("\nUhura:  We've lost contact with starsystem %s\n",
+		      systemname(q->planet));
+		prout("  in quadrant %d,%d.\n", ev->quadrant.x,ev->quadrant.y);
 	    }
-	    else
-		e->evcode |= E_HIDDEN;
-	    break;
       case FREPRO:		/* Klingon reproduces */
-	    /* see if distress call is still active */
-	    q = &Quad[e->x][e->y];
-	    if (q->klings <= 0)
-	    {
-		unschedule(e);
-		q->qsystemname = e->systemname;
+	    ev = schedule(FREPRO, expran(1.0 * game.intime));
+	    /* see if current distress call still active */
+	    q = &game.state.galaxy[ev->quadrant.x][ev->quadrant.y];
+	    if (q->klingons <= 0) {
+		q->status = secure;
 		break;
 	    }
-	    xresched(e, E_REPRO, 1);
 	    /* reproduce one Klingon */
-	    ix = e->x;
-	    iy = e->y;
-	    if (Now.klings == 127)
+	    w = ev->quadrant;
+	    if (game.state.remkl >=MAXKLGAME)
 		break;		/* full right now */
-	    if (q->klings >= MAXKLQUAD)
+	    /* this quadrant not ok, pick an adjacent one */
+	    for (i = w.x - 1; i <= w.x + 1; i++)
 	    {
-		/* this quadrant not ok, pick an adjacent one */
-		for (i = ix - 1; i <= ix + 1; i++)
+		for (j = w.y - 1; j <= w.y + 1; j++)
 		{
-		    if (!VALID_QUADRANT(i))
+		    if (!VALID_QUADRANT(i, j))
 			continue;
-		    for (j = iy - 1; j <= iy + 1; j++)
-		    {
-			if (!VALID_QUADRANT(j))
-			    continue;
-			q = &Quad[i][j];
-			/* check for this quad ok (not full & no snova) */
-			if (q->klings >= MAXKLQUAD || q->stars < 0)
-			    continue;
-			break;
-		    }
-		    if (j <= iy + 1)
-			break;
+		    q = &game.state.galaxy[w.x][w.y];
+		    /* check for this quad ok (not full & no snova) */
+		    if (q->klingons >= MAXKLQUAD || q->stars < 0)
+			continue;
+		    goto foundit;
 		}
-		if (j > iy + 1)
-		    /* cannot create another yet */
-		    break;
-		ix = i;
-		iy = j;
 	    }
+	    break;	/* search for eligible quadrant failed */
+	foundit:
+	    w.x = i;
+	    w.y = j;
+
 	    /* deliver the child */
-	    game.remkl++;
-	    if (ix == game.quadrant.x && iy == game.quadrant.y)
-		newkling(++game.klhere, &ixhold, &iyhold);
+	    game.state.remkl++;
+	    if (same(game.quadrant, w))
+		newkling(++game.klhere, &hold);
 
 	    /* recompute time left */
 	    game.state.remtime = game.state.remres/(game.state.remkl+4*game.state.remcom);
 	    break;
-#endif /* EXPERIMENTAL */
 	}
     }
 }
@@ -618,7 +605,7 @@
 			game.quad[scratch.x][scratch.y] = IHDOT;
 			break;
 		    case IHP: /* Destroy planet */
-			game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = NULL;
+			game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = NOPLANET;
 			game.state.nplankl++;
 			crmena(1, IHP, 2, scratch);
 			prout(_(" destroyed."));

Modified: trunk/src/finish.c
===================================================================
--- trunk/src/finish.c	2006-09-18 08:34:16 UTC (rev 588)
+++ trunk/src/finish.c	2006-09-18 19:38:35 UTC (rev 589)
@@ -326,7 +326,7 @@
     if (game.gamewon == 0) game.state.nromrem = 0; // None captured if no win
     iscore = 10*NKILLK + 50*NKILLC + ithperd + iwon
 	- 100*game.state.basekl - 100*klship - 45*game.nhelp -5*game.state.starkl - game.casual
-	+ 20*NKILLROM + 200*NKILLSC - 10*game.state.nplankl + game.state.nromrem;
+	+ 20*NKILLROM + 200*NKILLSC - 10*game.state.nplankl - 300*game.state.nworldkl + game.state.nromrem;
     if (game.alive == 0) iscore -= 200;
     skip(2);
     prout(_("Your score --"));
@@ -354,6 +354,9 @@
     if (game.state.nplankl)
 	prout(_("%6d planets destroyed by your action   %5d"),
 	      game.state.nplankl, -10*game.state.nplankl);
+    if ((game.options & OPTION_WORLDS) && game.state.nworldkl)
+	prout(_("%6d inhabited planets destroyed by your action   %5d"),
+	      game.state.nplankl, -300*game.state.nworldkl);
     if (game.state.basekl)
 	prout(_("%6d bases destroyed by your action     %5d"),
 	      game.state.basekl, -100*game.state.basekl);

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-18 08:34:16 UTC (rev 588)
+++ trunk/src/moving.c	2006-09-18 19:38:35 UTC (rev 589)
@@ -489,12 +489,12 @@
 }
 
 
-void warp(int i) 
+void warp(bool timewarp) 
 {
     int blooey=0, twarp=0, iwarp;
     double power;
 
-    if (i!=2) { /* Not WARPX entry */
+    if (!timewarp) { /* Not WARPX entry */
 	game.ididit = 0;
 	if (game.damage[DWARPEN] > 10.0) {
 	    chew();
@@ -749,10 +749,10 @@
 	if (distreq < game.dist) game.dist = distreq;
 	game.optime = 10.0*game.dist/game.wfacsq;
 	game.direc = 12.0*Rand();	/* How dumb! */
-	game.justin = 0;
-	game.inorbit = 0;
-	warp(2);
-	if (game.justin == 0) {
+	game.justin = false;
+	game.inorbit = false;
+	warp(true);
+	if (!game.justin) {
 	    /* This is bad news, we didn't leave quadrant. */
 	    if (game.alldone) return;
 	    skip(1);

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-18 08:34:16 UTC (rev 588)
+++ trunk/src/planets.c	2006-09-18 19:38:35 UTC (rev 589)
@@ -58,7 +58,7 @@
 {
     skip(1);
     chew();
-    if (game.inorbit!=0) {
+    if (game.inorbit) {
 	prout("Already in standard orbit.");
 	return;
     }
@@ -78,8 +78,8 @@
     if (consumeTime()) return;
     game.height = (1400.0+7200.0*Rand());
     prout("Sulu-  \"Entered orbit at altitude %.2f kilometers.\"", game.height);
-    game.inorbit = 1;
-    game.ididit=1;
+    game.inorbit = true;
+    game.ididit = true;
 }
 
 void sensor(void) 
@@ -122,7 +122,7 @@
 	}
 	return;
     }
-    if (game.inorbit==0) {
+    if (!game.inorbit) {
 	crmshp();
 	prout(" not in standard orbit.");
 	return;
@@ -299,7 +299,7 @@
 	else prout("Shuttle craft is now serving Big Macs.");
 	return;
     }
-    if (game.inorbit==0) {
+    if (!game.inorbit) {
 	crmshp();
 	prout(" not in standard orbit.");
 	return;
@@ -509,7 +509,7 @@
     return;
 }
 
-char *systemname(planet *planet)
+char *systemname(int pindx)
 {
     static char	*names[NINHAB] =
     {
@@ -582,5 +582,5 @@
 	"Exo III",		/* TOS: "What Are Little Girls Made Of?" (Class P) */
     };
 
-    return names[planet->inhabited];
+    return names[pindx];
 }

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-18 08:34:16 UTC (rev 588)
+++ trunk/src/reports.c	2006-09-18 19:38:35 UTC (rev 589)
@@ -316,8 +316,8 @@
 	break;
     case 10:
 	if (game.options & OPTION_WORLDS) {
-	    planet *here = game.state.galaxy[game.quadrant.x][game.quadrant.y].planet;
-	    if (here && here->inhabited != UNINHABITED)
+	    int here = game.state.galaxy[game.quadrant.x][game.quadrant.y].planet;
+	    if (here != NOPLANET && game.state.plnets[here].inhabited != UNINHABITED)
 		proutn("Major system  %s", systemname(here));
 	    else
 		proutn("Sector is uninhabited");

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-18 08:34:16 UTC (rev 588)
+++ trunk/src/setup.c	2006-09-18 19:38:35 UTC (rev 589)
@@ -227,14 +227,12 @@
 	for_quadrants(j) {
 	struct quadrant *quad = &game.state.galaxy[i][j];
 	    quad->charted = 0;
-	    quad->planet = NULL;
+	    quad->planet = NOPLANET;
 	    quad->romulans = 0;
 	    quad->klingons = 0;
 	    quad->starbase = 0;
 	    quad->supernova = 0;
-#ifdef EXPERIMENTAL
 	    quad->status = secure;
-#endif /* EXPERIMENTAL */
 	}
     // Initialize times for extraneous events
     schedule(FSNOVA, expran(0.5 * game.intime));
@@ -248,12 +246,10 @@
 	unschedule(FSCMOVE);
     unschedule(FSCDBAS);
     unschedule(FDSPROB);
-#ifdef EXPERIMENTAL
-    if (game.options & OPTION_WORLDS)
+    if ((game.options & OPTION_WORLDS) && game.skill >= SKILL_GOOD)
 	schedule(FDISTR, expran(1.0 + game.intime));
     unschedule(FENSLV);
     unschedule(FREPRO);
-#endif /* EXPERIMENTAL */
     // Starchart is functional but we've never seen it
     game.lastchart = FOREVER;
     // Put stars in the galaxy
@@ -295,8 +291,8 @@
     // Position ordinary Klingon Battle Cruisers
     krem = game.inkling;
     klumper = 0.25*game.skill*(9.0-game.length)+1.0;
-    if (klumper > 9) 
-	klumper = 9; // Can't have more than 9 in quadrant
+    if (klumper > MAXKLQUAD) 
+	klumper = MAXKLQUAD;
     do {
 	double r = Rand();
 	int klump = (1.0 - r*r)*klumper;
@@ -337,7 +333,7 @@
     }
     // Locate planets in galaxy
     for (i = 0; i < game.inplan; i++) {
-	do iran(GALSIZE, &ix, &iy); while (game.state.galaxy[ix][iy].planet);
+	do iran(GALSIZE, &ix, &iy); while (game.state.galaxy[ix][iy].planet != NOPLANET);
 	game.state.plnets[i].w.x = ix;
 	game.state.plnets[i].w.y = iy;
 	if (i < NINHAB) {
@@ -352,7 +348,7 @@
 	    game.state.plnets[i].inhabited = UNINHABITED;
 	}
 	if ((game.options & OPTION_WORLDS) || i >= NINHAB)
-	    game.state.galaxy[ix][iy].planet = game.state.plnets + i;
+	    game.state.galaxy[ix][iy].planet = i;
     }
     // Locate Romulans
     for (i = 1; i <= game.state.nromrem; i++) {
@@ -506,7 +502,6 @@
     setpassword();
     if (strcmp(game.passwd, "debug")==0) {
 	idebug = true;
-	logfp = fopen("sst-input.log", "w");
 	fputs("=== Debug mode enabled\n", stdout);
     }
 
@@ -564,7 +559,7 @@
     struct quadrant *here;
 
     game.iattak = 1;
-    game.justin = 1;
+    game.justin = true;
     game.base.x = game.base.y = 0;
     game.klhere = 0;
     game.comhere = 0;
@@ -573,8 +568,8 @@
     game.irhere = 0;
     game.iplnet = 0;
     game.nenhere = 0;
-    game.neutz = 0;
-    game.inorbit = 0;
+    game.neutz = false;
+    game.inorbit = false;
     game.landed = -1;
     game.ientesc = 0;
     game.ithere = 0;
@@ -635,9 +630,9 @@
 	dropin(IHB, &game.base);
 	
     // If quadrant needs a planet, put it in
-    if (here->planet) {
-	game.iplnet = here->planet - game.state.plnets;
-	if (here->planet->inhabited == UNINHABITED)
+    if (here->planet != NOPLANET) {
+	game.iplnet = here->planet;
+	if (game.state.plnets[here->planet].inhabited == UNINHABITED)
 	    dropin(IHP, &game.plnet);
 	else
 	    dropin(IHW, &game.plnet);
@@ -649,7 +644,7 @@
 	dropin(IHSTAR, &w);
 
     // Check for RNZ
-    if (game.irhere > 0 && game.klhere == 0 && (!here->planet || here->planet->inhabited == UNINHABITED)) {
+    if (game.irhere > 0 && game.klhere == 0 && (here->planet == NOPLANET || game.state.plnets[here->planet].inhabited == UNINHABITED)) {
 	game.neutz = 1;
 	if (game.damage[DRADIO] <= 0.0) {
 	    skip(1);

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-18 08:34:16 UTC (rev 588)
+++ trunk/src/sst.c	2006-09-18 19:38:35 UTC (rev 589)
@@ -155,9 +155,13 @@
 
    5. Half the quadrants now have inhabited planets, from which one 
       cannot mine dilithium (there will still be the same additional number
-      of dilithium-bearing planets).  Right now this is just color, but
-      eventually we'll fold in BSD-Trek-like logic for Klingons to attack
-      and enslave inhabited worlds.
+      of dilithium-bearing planets).  Torpedoing an inhabited world is *bad*.
+      There is BSD-Trek-like logic for Klingons to attack and enslave 
+      inhabited worlds, producing more ships (only is skill is 'good' or 
+      better). (Controlled by OPTION_WORLDS and turned off if game 
+      type is "plain" or "almy".)
+
+   6. User input is now logged so we can do regression testing.
 */
 
 /* the input queue */
@@ -274,6 +278,8 @@
 	{"QUIT",	QUIT,		0},
 #define HELP	36
 	{"HELP",	HELP,		0},
+#define SEED	37
+	{"SEED",	SEED,		0},
 };
 
 #define NUMCOMMANDS	sizeof(commands)/sizeof(commands[0])
@@ -379,7 +385,7 @@
 
 static void makemoves(void) 
 {
-    int i, v = 0;
+    int key, i, v = 0;
     bool hitme;
     clrscr();
     setwnd(message_window);
@@ -441,7 +447,7 @@
 	    if (game.ididit) hitme = true;
 	    break;
 	case MOVE:			// move
-	    warp(1);
+	    warp(false);
 	    break;
 	case SHIELDS:			// shields
 	    doshield(1);
@@ -543,8 +549,13 @@
 	    game.alldone = 1;		// quit the game
 	    break;
 	case HELP:
-	    helpme();	// get help
+	    helpme();			// get help
 	    break;
+	case SEED:			// set random-number seed
+	    key = scan();
+	    if (key == IHREAL)
+		seed = (int)aaitem;
+	    break;
 	}
 	commandhook(commands[i].name, false);
 	for (;;) {
@@ -598,6 +609,9 @@
 	    exit(0);
 	}
     }
+    /* where to save the input in case of bugs */
+    logfp = fopen("sst-input.log", "w");
+    setlinebuf(logfp);
 
     randomize();
     iostart();
@@ -704,7 +718,7 @@
     if (!randready) {
 	if (seed == 0)
 	    seed = (unsigned)time(NULL);
-	if (idebug)
+	if (logfp)
 	    fprintf(logfp, "seed %d\n", seed);
 	srand(seed);
 	randready = true;
@@ -830,7 +844,7 @@
 	    if (game.damage[i] > 0.0) 
 		game.damage[i] = 0.0;
     }
-    proutn("Toggle game.idebug? ");
+    proutn("Toggle debug flag? ");
     if (ja() != 0) {
 	idebug = !idebug;
 	if (idebug) prout("Debug output ON");
@@ -852,6 +866,8 @@
     }
     proutn("Examine/change events? ");
     if (ja() != 0) {
+	event *ev;
+	coord w;
 	int i;
 	for (i = 1; i < NEVENTS; i++) {
 	    int key;
@@ -864,13 +880,36 @@
 	    case FCDBAS:  proutn("Base Destroy    "); break;
 	    case FSCMOVE: proutn("SC Move         "); break;
 	    case FSCDBAS: proutn("SC Base Destroy "); break;
+	    //case FDSPROB:proutn("Probe Move      "); break;
+	    case FDISTR:  proutn("Distress Call   "); break;
+	    case FENSLV:  proutn("Enlavement      "); break;
+	    case FREPRO:  proutn("Klingon Build   "); break;
 	    }
 	    proutn("%.2f", scheduled(i)-game.state.date);
 	    chew();
 	    proutn("  ?");
 	    key = scan();
 	    if (key == IHREAL) {
-		schedule(i, aaitem);
+		ev = schedule(i, aaitem);
+		if (i == FENSLV || i == FREPRO) {
+		    chew();
+		    proutn("In quadrant- ");
+		    key = scan();
+		    if (key != IHREAL) {
+			prout("Event %d canceled, no y coordinate.", i);
+			unschedule(i);
+			continue;
+		    }
+		    w.y = (int)aaitem;
+		    key = scan();
+		    if (key != IHREAL) {
+			prout("Event %d canceled, no x coordinate.", i);
+			unschedule(i);
+			continue;
+		    }
+		    w.x = (int)aaitem;
+		    ev->quadrant = w;
+		}
 	    }
 	}
 	chew();

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-18 08:34:16 UTC (rev 588)
+++ trunk/src/sst.h	2006-09-18 19:38:35 UTC (rev 589)
@@ -65,25 +65,25 @@
 	starkl,			// destroyed stars
 	basekl,			// destroyed bases
 	nromrem,		// Romulans remaining
-	nplankl;		// destroyed planets
-	planet plnets[PLNETMAX];  // Planet information
-	double date,		// stardate
-	    remres,		// remaining resources
-	    remtime;		// remaining time
+	nplankl,		// destroyed uninhabited planets
+	nworldkl;		// destroyed inhabited planets
+    planet plnets[PLNETMAX];  // Planet information
+    double date,		// stardate
+	remres,		// remaining resources
+	remtime;		// remaining time
     coord baseq[BASEMAX+1];	// Base quadrant coordinates
     coord kcmdr[QUADSIZE+1];	// Commander quadrant coordinates
     coord kscmdr;		// Supercommander quadrant coordinates
     struct quadrant {
 	int stars;
-	planet *planet;
+	int planet;
+#define NOPLANET	-1
 	bool starbase;
 	int klingons;
 	int romulans;
 	bool supernova;
 	bool charted;
-#ifdef EXPERIMENTAL
 	enum {secure, distressed, enslaved} status;
-#endif /* EXPERIMENTAL */
     } galaxy[GALSIZE+1][GALSIZE+1]; 	// The Galaxy (subscript 0 not used)
     struct page {
 	int stars;
@@ -92,6 +92,9 @@
     } chart[GALSIZE+1][GALSIZE+1]; 	// the starchart (subscript 0 not used)
 } snapshot;				// Data that is snapshot
 
+#define MAXKLGAME	127
+#define MAXKLQUAD	9
+
 #define NKILLK (game.inkling - game.state.remkl)
 #define NKILLC (game.incom - game.state.remcom)
 #define NKILLSC (game.inscom - game.state.nscrem)
@@ -156,29 +159,26 @@
 #define FSCMOVE 6   // Supercommander moves (might attack base)
 #define FSCDBAS 7   // Supercommander destroys base
 #define FDSPROB 8   // Move deep space probe
-#ifndef EXPERIMENTAL
-#define NEVENTS (9)
-#else /* EXPERIMENTAL */
 #define FDISTR	9   // Emit distress call from an inhabited world 
 #define FENSLV	10  // Inhabited word is enslaved */
 #define FREPRO	11  // Klingons build a ship in an enslaved system
 #define NEVENTS (12)
-#endif /* EXPERIMENTAL */
 
+typedef struct {
+    double date;
+    coord quadrant;
+} event;
+
 /*
  * abstract out the event handling -- underlying data structures will change
  * when we implement stateful events
  */
-extern void unschedule(int);
+extern event *unschedule(int);
 extern int is_scheduled(int);
-extern void schedule(int, double);
+extern event *schedule(int, double);
 extern void postpone(int, double);
 extern double scheduled(int);
 
-#ifdef EXPERIMENTAL
-#define	MAXDISTR	5	/* maximum concurrent distress calls */
-#endif /* EXPERIMENTAL */
-
 #define SSTMAGIC	"SST2.0\n"
 
 struct game {
@@ -191,7 +191,7 @@
     double kdist[(QUADSIZE+1)*(QUADSIZE+1)];		// enemy distances
     double kavgd[(QUADSIZE+1)*(QUADSIZE+1)];		// average distances
     double damage[NDEVICES];	// damage encountered
-    double future[NEVENTS];	// future events
+    event future[NEVENTS];	// future events
     char passwd[10];		// Self Destruct password
     coord ks[(QUADSIZE+1)*(QUADSIZE+1)];	// enemy sector locations
     coord quadrant, sector;	// where we are
@@ -201,23 +201,24 @@
     coord plnet;		// location of planet in quadrant
     coord probec;	// current probe quadrant
     bool gamewon,	// Finished!
-	ididit,		// Action taken -- allows enemy to attack
-	alive,		// We are alive (not killed)
+	ididit,		// action taken -- allows enemy to attack
+	alive,		// we are alive (not killed)
 	justin,		// just entered quadrant
 	alldone,	// game is now finished
 	neutz,		// Romulan Neutral Zone
 	isarmed,	// probe is armed
+	inorbit,	// orbiting a planet
 	thawed;		// thawed game
-    int inkling,	// Initial number of klingons
-	inbase,		// Initial number of bases
-	incom,		// Initial number of commanders
-	inscom,		// Initial number of commanders
-	inrom,		// Initial number of commanders
-	instar,		// Initial stars
-	intorps,	// Initial/Max torpedoes
-	condit,		// Condition (red/yellow/green/docked)
+    int inkling,	// initial number of klingons
+	inbase,		// initial number of bases
+	incom,		// initial number of commanders
+	inscom,		// initial number of commanders
+	inrom,		// initial number of commanders
+	instar,		// initial stars
+	intorps,	// initial/Max torpedoes
+	condit,		// condition (red/yellow/green/docked)
 	torps,		// number of torpedoes
-	ship,		// Ship type -- 'E' is Enterprise
+	ship,		// ship type -- 'E' is Enterprise
 	length,		// length of game
 	skill,		// skill level
 	klhere,		// klingons here
@@ -226,7 +227,6 @@
 	nhelp,		// calls for help
 	nkinks,		// count of energy-barrier crossings
 	shldchg,	// shield is changing (affects efficiency)
-	inorbit,	// orbiting
 	landed,		// party on planet (1), on ship (-1)
 	iplnet,		// planet # in quadrant
 	imine,		// mining
@@ -244,9 +244,6 @@
 	tourn,		// tournament number
 	ithere,		// Tholian is here 
 	iseenit,	// seen base attack report
-#ifdef EXPERIMENTAL
-	ndistr,		//* count of distress calls */ 
-#endif /* EXPERIMENTAL */
 	proben,		// number of moves for probe
 	nprobes;	// number of probes available
     double inresor,	// initial resources
@@ -335,7 +332,7 @@
 void lrscan(void);
 void phasers(void);
 void photon(void);
-void warp(int);
+void warp(bool);
 void doshield(int);
 void dock(int);
 void dreprt(void);
@@ -416,7 +413,7 @@
 void commandhook(char *, bool);
 void makechart(void);
 void enqueue(char *);
-char *systemname(planet *);
+char *systemname(int);
 void newkling(int, coord *);
 
 /* mode arguments for srscan() */



From esr at mail.berlios.de  Tue Sep 19 08:27:07 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 19 Sep 2006 08:27:07 +0200
Subject: [Sst-commit-watch] r590 - trunk/src
Message-ID: <200609190627.k8J6R7CD001617@sheep.berlios.de>

Author: esr
Date: 2006-09-19 08:27:07 +0200 (Tue, 19 Sep 2006)
New Revision: 590

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
More int-to-boolean cleanup.  Make the FDISTR event work.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-18 19:38:35 UTC (rev 589)
+++ trunk/src/ai.c	2006-09-19 06:27:07 UTC (rev 590)
@@ -130,7 +130,7 @@
  */
 
 	forces = game.kpower[loccom]+100.0*game.nenhere+400*(nbaddys-1);
-	if (game.shldup==0) forces += 1000; /* Good for enemy if shield is down! */
+	if (!game.shldup) forces += 1000; /* Good for enemy if shield is down! */
 	if (game.damage[DPHASER] == 0.0 || game.damage[DPHOTON] == 0.0) {
 	    if (game.damage[DPHASER] != 0) /* phasers damaged */
 		forces += 300.0;
@@ -500,10 +500,10 @@
 	    prout(_("   reports that it is under attack from the Klingon Super-commander."));
 	    proutn(_("   It can survive until stardate %d.\""),
 		   (int)scheduled(FSCDBAS));
-	    if (game.resting==0) return;
+	    if (!game.resting) return;
 	    prout(_("Mr. Spock-  \"Captain, shall we cancel the rest period?\""));
 	    if (ja()==0) return;
-	    game.resting = 0;
+	    game.resting = false;
 	    game.optime = 0.0; /* actually finished */
 	    return;
 	}

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-18 19:38:35 UTC (rev 589)
+++ trunk/src/battle.c	2006-09-19 06:27:07 UTC (rev 590)
@@ -59,7 +59,7 @@
 	    prout(_("Shields already up."));
 	    return;
 	}
-	game.shldup = 1;
+	game.shldup = true;
 	game.shldchg = 1;
 	if (game.condit != IHDOCKED) game.energy -= 50.0;
 	prout(_("Shields raised."));
@@ -72,11 +72,11 @@
 	game.ididit=1;
 	return;
     case SHDN:
-	if (game.shldup==0) {
+	if (!game.shldup) {
 	    prout(_("Shields already down."));
 	    return;
 	}
-	game.shldup=0;
+	game.shldup=false;
 	game.shldchg=1;
 	prout(_("Shields lowered."));
 	game.ididit=1;
@@ -166,7 +166,7 @@
 	extradm = (10.0*type*Rand()+1.0)*game.damfac;
 	game.damage[l] += game.optime + extradm; /* Damage for at least time of travel! */
     }
-    game.shldup = 0;
+    game.shldup = false;
     if (KLINGREM) {
 	pause_game(2);
 	dreprt();
@@ -470,7 +470,7 @@
     prout(_(" damaged."));
     if (game.damage[DSHIELD] && game.shldup) {
 	prout(_("***Shields knocked down."));
-	game.shldup=0;
+	game.shldup=false;
     }
 }
 
@@ -542,7 +542,7 @@
 		return; /* Supernova or finished */
 	    if (hit == 0) continue;
 	}
-	if (game.shldup != 0 || game.shldchg != 0 || game.condit==IHDOCKED) {
+	if (game.shldup || game.shldchg != 0 || game.condit==IHDOCKED) {
 	    /* shields will take hits */
 	    double absorb, hitsh, propor = pfac*game.shield*(game.condit==IHDOCKED ? 2.1 : 1.0);
 	    if(propor < 0.1) propor = 0.1;
@@ -1183,13 +1183,13 @@
 		prout(_("Sulu-  \"Sir, the high-speed shield control has malfunctioned . . ."));
 		prouts(_("         CLICK   CLICK   POP  . . ."));
 		prout(_(" No response, sir!"));
-		game.shldup = 0;
+		game.shldup = false;
 	    }
 	    else
 		prout(_("Shields raised."));
 	}
 	else
-	    game.shldup = 0;
+	    game.shldup = false;
     }
     overheat(rpow);
 }

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-18 19:38:35 UTC (rev 589)
+++ trunk/src/events.c	2006-09-19 06:27:07 UTC (rev 590)
@@ -39,7 +39,7 @@
 	skip(1);
 	proutn(_("Mr. Spock-  \"Captain, shall we cancel the rest period?\""));
 	if (ja()) {
-	    game.resting = 0;
+	    game.resting = false;
 	    game.optime = 0.0;
 	    return true;
 	}
@@ -57,8 +57,30 @@
     coord w, hold;
     event *ev;
 
-    if (idebug) prout("=== EVENTS");
+    if (idebug) {
+	prout("=== EVENTS from %.2f to %.2f:", game.state.date, fintim);
+	for (i = 1; i < NEVENTS; i++) {
+	    switch (i) {
+	    case FSNOVA:  proutn("=== Supernova       "); break;
+	    case FTBEAM:  proutn("=== T Beam          "); break;
+	    case FSNAP:   proutn("=== Snapshot        "); break;
+	    case FBATTAK: proutn("=== Base Attack     "); break;
+	    case FCDBAS:  proutn("=== Base Destroy    "); break;
+	    case FSCMOVE: proutn("=== SC Move         "); break;
+	    case FSCDBAS: proutn("=== SC Base Destroy "); break;
+	    case FDSPROB: proutn("=== Probe Move      "); break;
+	    case FDISTR:  proutn("=== Distress Call   "); break;
+	    case FENSLV:  proutn("=== Enlavement      "); break;
+	    case FREPRO:  proutn("=== Klingon Build   "); break;
+	    }
+	    if (is_scheduled(i))
+		prout("%.2f", scheduled(i));
+	    else
+		prout("never");
 
+	}
+    }
+
     radio_was_broken = (game.damage[DRADIO] != 0.0);
 
     for (;;) {
@@ -69,6 +91,8 @@
 	for (l = 1; l < NEVENTS; l++)
 	    if (game.future[l].date < datemin) {
 		line = l;
+		if (idebug)
+		    prout("== Event %d fires", line);
 		datemin = game.future[l].date;
 	    }
 	xtime = datemin-game.state.date;
@@ -180,14 +204,10 @@
 		    prout(_("Galileo, left on the planet surface, is well hidden."));
 		}
 	    }
-	    if (line==0) {
-		game.quadrant.x = game.state.kscmdr.x;
-		game.quadrant.y = game.state.kscmdr.y;
-	    }
-	    else {
-		game.quadrant.x = game.state.kcmdr[i].x;
-		game.quadrant.y = game.state.kcmdr[i].y;
-	    }
+	    if (line==0)
+		game.quadrant = game.state.kscmdr;
+	    else
+		game.quadrant = game.state.kcmdr[i];
 	    iran(QUADSIZE, &game.sector.x, &game.sector.y);
 	    crmshp();
 	    proutn(_(" is pulled to "));
@@ -196,9 +216,9 @@
 	    prout(cramlc(sector, game.sector));
 	    if (game.resting) {
 		prout(_("(Remainder of rest/repair period cancelled.)"));
-		game.resting = 0;
+		game.resting = false;
 	    }
-	    if (game.shldup==0) {
+	    if (!game.shldup) {
 		if (game.damage[DSHIELD]==0 && game.shield > 0) {
 		    doshield(2); /* Shldsup */
 		    game.shldchg=0;
@@ -227,9 +247,9 @@
 	    i = 0;
 	    for_starbases(j) {
 		for_commanders(k)
-		    if (game.state.baseq[j].x==game.state.kcmdr[k].x && game.state.baseq[j].y==game.state.kcmdr[k].y &&
-			(game.state.baseq[j].x!=game.quadrant.x || game.state.baseq[j].y!=game.quadrant.y) &&
-			(game.state.baseq[j].x!=game.state.kscmdr.x || game.state.baseq[j].y!=game.state.kscmdr.y)) {
+		    if (same(game.state.baseq[j], game.state.kcmdr[k]) &&
+			!same(game.state.baseq[j], game.quadrant) &&
+			!same(game.state.baseq[j], game.state.kscmdr)) {
 			i = 1;
 			break;
 		    }
@@ -242,8 +262,7 @@
 		break;
 	    }
 	    /* commander + starbase combination found -- launch attack */
-	    game.battle.x = game.state.baseq[j].x;
-	    game.battle.y = game.state.baseq[j].y;
+	    game.battle = game.state.baseq[j];
 	    schedule(FCDBAS, 1.0+3.0*Rand());
 	    if (game.isatb) /* extra time if SC already attacking */
 		postpone(FCDBAS, scheduled(FSCDBAS)-game.state.date);
@@ -271,14 +290,14 @@
 		break; /* WAS RETURN! */
 	    ixhold = game.battle.x;
 	    iyhold = game.battle.y;
-	    game.battle.x = game.state.kscmdr.x;
-	    game.battle.y = game.state.kscmdr.y;
+	    game.battle = game.state.kscmdr;
+	    /* FALL THROUGH */
 	case FCDBAS: /* Commander succeeds in destroying base */
 	    if (line==FCDBAS) {
 		unschedule(FCDBAS);
 		/* find the lucky pair */
 		for_commanders(i)
-		    if (game.state.kcmdr[i].x==game.battle.x && game.state.kcmdr[i].y==game.battle.y) 
+		    if (same(game.state.kcmdr[i], game.battle)) 
 			break;
 		if (i > game.state.remcom || game.state.rembase == 0 ||
 		    !game.state.galaxy[game.battle.x][game.battle.y].starbase) {
@@ -290,7 +309,7 @@
 	    /* Code merges here for any commander destroying base */
 	    /* Not perfect, but will have to do */
 	    /* Handle case where base is in same quadrant as starship */
-	    if (game.battle.x==game.quadrant.x && game.battle.y==game.quadrant.y) {
+	    if (same(game.battle, game.quadrant)) {
 		game.state.chart[game.battle.x][game.battle.y].starbase = false;
 		game.quad[game.base.x][game.base.y] = IHDOT;
 		game.base.x=game.base.y=0;
@@ -316,10 +335,8 @@
 	    /* Remove Starbase from galaxy */
 	    game.state.galaxy[game.battle.x][game.battle.y].starbase = false;
 	    for_starbases(i)
-		if (game.state.baseq[i].x==game.battle.x && game.state.baseq[i].y==game.battle.y) {
-		    game.state.baseq[i].x=game.state.baseq[game.state.rembase].x;
-		    game.state.baseq[i].y=game.state.baseq[game.state.rembase].y;
-		}
+		if (same(game.state.baseq[i], game.battle))
+		    game.state.baseq[i] = game.state.baseq[game.state.rembase];
 	    game.state.rembase--;
 	    if (game.isatb == 2) {
 		/* reinstate a commander's base attack */
@@ -395,25 +412,30 @@
 	case FDISTR: /* inhabited system issues distress call */
 	    schedule(FDISTR, expran(0.5*game.intime));
 	    /* try a whole bunch of times to find something suitable */
-	    for (i = 0; i < 100; i++) {
-		iran(GALSIZE, &w.x, &w.y);
-		q = &game.state.galaxy[game.quadrant.x][game.quadrant.y];
+	    i = 100;
+	    do {
 		/* need a quadrant which is not the current one,
 		   which has some stars which are inhabited and
 		   not already under attack, which is not
 		   supernova'ed, and which has some Klingons in it */
-		if (!(same(game.quadrant, w) || q->stars<=0 ||
-		      q->supernova || q->status != secure || q->klingons <= 0))
-		    break;
-	    }
-	    if (i >= 100)
+		iran(GALSIZE, &w.x, &w.y);
+		q = &game.state.galaxy[w.x][w.y];
+	    } while (--i &&
+		     (same(game.quadrant, w) || q->planet == NOPLANET ||
+		      q->supernova || q->status!=secure || q->klingons<=0));
+	    if (i == 0) {
 		/* can't seem to find one; ignore this call */
+		if (idebug)
+		    prout("=== Couldn't find location for distress event.");
 		break;
+	    }
 
 	    /* got one!!  Schedule its enslavement */
 	    ev = schedule(FENSLV, expran(game.intime));
 	    ev->quadrant = w;
 	    q->status = distressed;
+	    if (idebug)
+		prout("=== Distress call set at %d, %d.", w.x, w.y);
 
 	    /* tell the captain about it if we can */
 	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED)
@@ -444,6 +466,7 @@
 		      systemname(q->planet));
 		prout("  in quadrant %d,%d.\n", ev->quadrant.x,ev->quadrant.y);
 	    }
+	    break;
       case FREPRO:		/* Klingon reproduces */
 	    ev = schedule(FREPRO, expran(1.0 * game.intime));
 	    /* see if current distress call still active */
@@ -465,7 +488,7 @@
 			continue;
 		    q = &game.state.galaxy[w.x][w.y];
 		    /* check for this quad ok (not full & no snova) */
-		    if (q->klingons >= MAXKLQUAD || q->stars < 0)
+		    if (q->klingons >= MAXKLQUAD || !q->supernova)
 			continue;
 		    goto foundit;
 		}
@@ -477,6 +500,7 @@
 
 	    /* deliver the child */
 	    game.state.remkl++;
+	    q->klingons++;
 	    if (same(game.quadrant, w))
 		newkling(++game.klhere, &hold);
 
@@ -513,10 +537,10 @@
 
     /* Alternate resting periods (events) with attacks */
 
-    game.resting = 1;
+    game.resting = true;
     do {
-	if (delay <= 0) game.resting = 0;
-	if (game.resting == 0) {
+	if (delay <= 0) game.resting = false;
+	if (!game.resting) {
 	    prout(_("%d stardates left."), (int)game.state.remtime);
 	    return;
 	}
@@ -540,7 +564,7 @@
 	// leave if quadrant supernovas
 	(!game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova);
 
-    game.resting = 0;
+    game.resting = false;
     game.optime = 0;
 }
 
@@ -640,7 +664,7 @@
 				double diff = 2000.0 - game.shield;
 				game.energy -= diff;
 				game.shield = 0.0;
-				game.shldup = 0;
+				game.shldup = false;
 				prout(_("***Shields knocked out."));
 				game.damage[DSHIELD] += 0.005*game.damfac*Rand()*diff;
 			    }

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-18 19:38:35 UTC (rev 589)
+++ trunk/src/moving.c	2006-09-19 06:27:07 UTC (rev 590)
@@ -523,7 +523,7 @@
 	    game.ididit = 0;
 	    skip(1);
 	    prout("Engineering to bridge--");
-	    if (game.shldup==0 || 0.5*power > game.energy) {
+	    if (!game.shldup || 0.5*power > game.energy) {
 		iwarp = pow((game.energy/(game.dist+0.05)), 0.333333333);
 		if (iwarp <= 0) {
 		    prout("We can't do it, Captain. We haven't the energy.");

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-18 19:38:35 UTC (rev 589)
+++ trunk/src/planets.c	2006-09-19 06:27:07 UTC (rev 590)
@@ -127,7 +127,7 @@
 	prout(" not in standard orbit.");
 	return;
     }
-    if (game.shldup!=0) {
+    if (game.shldup) {
 	prout("Impossible to transport through shields.");
 	return;
     }
@@ -312,7 +312,7 @@
 	prout("You will have to beam down to retrieve the shuttle craft.");
 	return;
     }
-    if (game.shldup!=0 || game.condit == IHDOCKED) {
+    if (game.shldup || game.condit == IHDOCKED) {
 	prout("Shuttle craft cannot pass through shields.");
 	return;
     }

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-18 19:38:35 UTC (rev 589)
+++ trunk/src/reports.c	2006-09-19 06:27:07 UTC (rev 590)
@@ -488,7 +488,7 @@
 	tpower = game.dist*twarp*twarp*twarp*(game.shldup+1);
 	if (tpower >= game.energy) {
 	    prout("Insufficient energy, sir.");
-	    if (game.shldup==0 || tpower > game.energy*2.0) {
+	    if (!game.shldup || tpower > game.energy*2.0) {
 		if (!wfl) return;
 		proutn("New warp factor to try? ");
 		if (scan() == IHREAL) {

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-18 19:38:35 UTC (rev 589)
+++ trunk/src/setup.c	2006-09-19 06:27:07 UTC (rev 590)
@@ -185,7 +185,7 @@
     game.shield = game.inshld = 1250.0;
     game.torps = game.intorps = 6;
     game.lsupres=game.inlsr=3.0;
-    game.shldup=0;
+    game.shldup=false;
     game.warpfac=5.0;
     game.wfacsq=25.0;
     return;
@@ -202,7 +202,8 @@
     game.ship = IHE;
     game.energy = game.inenrg = 5000.0;
     game.shield = game.inshld = 2500.0;
-    game.shldchg = game.shldup = 0;
+    game.shldchg = 0;
+    game.shldup = false;
     game.inlsr = 4.0;
     game.lsupres = 4.0;
     iran(GALSIZE, &game.quadrant.x, &game.quadrant.y);
@@ -216,7 +217,8 @@
     // Set up assorted game parameters
     game.battle.x = game.battle.y = 0;
     game.state.date = game.indate = 100.0*(int)(31.0*Rand()+20.0);
-    game.nkinks = game.nhelp = game.resting = game.casual = 0;
+    game.nkinks = game.nhelp = game.casual = 0;
+    game.resting = false;
     game.isatb = game.iscate = game.imine = game.icrystl = game.icraft = game.state.nplankl = 0;
     game.state.starkl = game.state.basekl = 0;
     game.iscraft = 1;
@@ -248,6 +250,8 @@
     unschedule(FDSPROB);
     if ((game.options & OPTION_WORLDS) && game.skill >= SKILL_GOOD)
 	schedule(FDISTR, expran(1.0 + game.intime));
+    else
+	unschedule(FDISTR);
     unschedule(FENSLV);
     unschedule(FREPRO);
     // Starchart is functional but we've never seen it
@@ -411,7 +415,7 @@
     if (game.state.nscrem) prout("  YOU'LL NEED IT.");
     waitfor();
     newqad(0);
-    if (game.nenhere-iqhere-game.ithere) game.shldup=1.0;
+    if (game.nenhere-iqhere-game.ithere) game.shldup = true;
     if (game.neutz) attack(0);	// bad luck to start in a Romulan Neutral Zone
 }
 

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-18 19:38:35 UTC (rev 589)
+++ trunk/src/sst.c	2006-09-19 06:27:07 UTC (rev 590)
@@ -871,7 +871,6 @@
 	int i;
 	for (i = 1; i < NEVENTS; i++) {
 	    int key;
-	    if (!is_scheduled(i)) continue;
 	    switch (i) {
 	    case FSNOVA:  proutn("Supernova       "); break;
 	    case FTBEAM:  proutn("T Beam          "); break;
@@ -880,16 +879,22 @@
 	    case FCDBAS:  proutn("Base Destroy    "); break;
 	    case FSCMOVE: proutn("SC Move         "); break;
 	    case FSCDBAS: proutn("SC Base Destroy "); break;
-	    //case FDSPROB:proutn("Probe Move      "); break;
+	    case FDSPROB: proutn("Probe Move      "); break;
 	    case FDISTR:  proutn("Distress Call   "); break;
 	    case FENSLV:  proutn("Enlavement      "); break;
 	    case FREPRO:  proutn("Klingon Build   "); break;
 	    }
-	    proutn("%.2f", scheduled(i)-game.state.date);
+	    if (is_scheduled(i))
+		proutn("%.2f", scheduled(i)-game.state.date);
+	    else
+		proutn("never");
 	    chew();
-	    proutn("  ?");
+	    proutn("? ");
 	    key = scan();
-	    if (key == IHREAL) {
+	    if (key == 'n') {
+		unschedule(i);
+		chew();
+	    } else if (key == IHREAL) {
 		ev = schedule(i, aaitem);
 		if (i == FENSLV || i == FREPRO) {
 		    chew();
@@ -915,7 +920,7 @@
 	chew();
     }
     proutn("Induce supernova here? ");
-    if (ja() != 0) {
+    if (ja()) {
 	game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova = true;
 	atover(1);
     }

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-18 19:38:35 UTC (rev 589)
+++ trunk/src/sst.h	2006-09-19 06:27:07 UTC (rev 590)
@@ -204,6 +204,8 @@
 	ididit,		// action taken -- allows enemy to attack
 	alive,		// we are alive (not killed)
 	justin,		// just entered quadrant
+	shldup,		// shields are up
+	resting,	// rest time
 	alldone,	// game is now finished
 	neutz,		// Romulan Neutral Zone
 	isarmed,	// probe is armed
@@ -254,7 +256,6 @@
 	indate,		// initial date
 	energy,		// energy level
 	shield,		// shield level
-	shldup,		// shields are up
 	warpfac,	// warp speed
 	wfacsq,		// squared warp factor
 	lsupres,	// life support reserves
@@ -262,7 +263,6 @@
 	direc,		// movement direction
 	optime,		// time taken by current operation
 	docfac,		// repair factor when docking (constant?)
-	resting,	// rest time
 	damfac,		// damage factor
 	lastchart,	// time star chart was last updated
 	cryprob,	// probability that crystal will work



From esr at mail.berlios.de  Tue Sep 19 10:01:27 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 19 Sep 2006 10:01:27 +0200
Subject: [Sst-commit-watch] r591 - trunk/src
Message-ID: <200609190801.k8J81RP0008864@sheep.berlios.de>

Author: esr
Date: 2006-09-19 10:01:27 +0200 (Tue, 19 Sep 2006)
New Revision: 591

Modified:
   trunk/src/planets.c
Log:
Improve the world list.


Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-19 06:27:07 UTC (rev 590)
+++ trunk/src/planets.c	2006-09-19 08:01:27 UTC (rev 591)
@@ -514,73 +514,60 @@
     static char	*names[NINHAB] =
     {
 	/*
-	 * This started out life as the BSD Trek inhabited-planets list,
-	 * but I used <http://www.memory-alpha.org> to weed out planets
-	 * with no references in ST:TOS and to fill it out again to the
-	 * required length from "The Worlds of The Federation" list,
-	 * <http://memory-alpha.org/en/wiki/The_Worlds_of_the_Federation>.
-	 * Some misspellings have been silently corrected.  (To be
-	 * fair, there was no Web when Eric Allman did his list.)
-	 *
+	 * I used <http://www.memory-alpha.org> to find planets
+	 * with references in ST:TOS.  Eath and the Alpha Centauri
+	 * Colony have been omitted.
+ 	 *
 	 * Some planets marked Class G and P here will be displayed as class M
 	 * because of the way planets are generated. This is a known bug.
 	 */
 	"ERROR",
-	// Added Federation Worlds
-	"Deneva",		/* TOS: "Operation -- Annihilate!" */
-	"Eminiar VII",		/* TOS: "A Taste of Armageddon" */
-	"Hansen's Planet",	/* TOS: "The Galileo Seven" */
-	"Taurus IV",		/* TOS: "The Galileo Seven" (class G) */
-	"Aldebaran III",	/* TOS: "The Deadly Years" */
-	"Vulcan (T'Khasi)",	/* many episodes */
-	"Tellar Prime (Miracht)",	/* TOS: "Journey to Babel" */
+	// Federation Worlds
 	"Andoria (Fesoan)",	/* several episodes */
-	"Antos IV (Doraphane)",	/* TOS: "Whom Gods Destroy", "Who Mourns for Adonais?" */
-	"Catulla (Cendo-Prae)",	/* TOS: "The Way to Eden" */
-	"Izar",			/* TOS: "Whom Gods Destroy" */
-	"Tiburon",		/* TOS: "The Way to Eden" */
-	"Merak II",		/* TOS: "The Cloud Minders" */
-	"Argelius II (Nelphia)",	/* TOS: "Wolf in the Fold" ("IV" in BSD) */
-	"Daran V",		/* TOS: "For the World is Hollow and I Have Touched the Sky" */
+	"Tellar Prime (Miracht)",	/* TOS: "Journey to Babel" */
+	"Vulcan (T'Khasi)",	/* many episodes */
 	"Medusa",		/* TOS: "Is There in Truth No Beauty?" */
-	"Coridan (Desotriana)",	/* TOS: "Journey to Babel" */
-	"Berengaria IV",	/* TOS: "This Side of Paradise" */
-	"Capella IV (Kohath)",	/* TOS: "Friday's Child" (Class G) */
+	"Argelius II (Nelphia)",/* TOS: "Wolf in the Fold" ("IV" in BSD) */
+	"Ardana",		/* TOS: "The Cloud Minders" */
+	"Catulla (Cendo-Prae)",	/* TOS: "The Way to Eden" */
 	"Gideon",		/* TOS: "The Mark of Gideon" */
-	"Iotia",		/* TOS: "A Piece of the Action" */
+	"Aldebaran III",	/* TOS: "The Deadly Years" */
+	"Alpha Majoris I",	/* TOS: "Wolf in the Fold" */
+	"Altair IV",		/* TOS: "Amok Time */
+	"Ariannus",		/* TOS: "Let That Be Your Last Battlefield" */
+	"Benecia"		/* TOS: "The Conscience of the King" */
+	"Beta Niobe I (Sarpeidon)",	/* TOS: "All Our Yesterdays" */
+	"Alpha Carinae II",	/* TOS: "The Ultimate Computer" */
+	"Capella IV (Kohath)",	/* TOS: "Friday's Child" (Class G) */
+	"Daran V",		/* TOS: "For the World is Hollow and I Have Touched the Sky" */
+	"Deneb II",		/* TOS: "Wolf in the Fold" ("IV" in BSD) */
+	"Eminiar VII",		/* TOS: "A Taste of Armageddon" */
+	"Gamma Canaris IV",	/* TOS: "Metamorphosis" */
+	"Gamma Tranguli VI (Vaalel)",	/* TOS: "The Apple" */
+	"Ingraham B",		/* TOS: "Operation: Annihilate" */
+	"Janus IV",		/* TOS: "The Devil in the Dark" */
+	"Makus III",		/* TOS: "The Galileo Seven" */
+	"Marcos XII",		/* TOS: "And the Children Shall Lead", */
+	"Omega IV",		/* TOS: "The Omega Glory" */
+	"Regulus V",		/* TOS: "Amok Time */
+	"Deeva",		/* TOS: "Operation -- Annihilate!" */
 	/* Worlds from BSD Trek */
-	//"Talos IV",		/* TOS: "The Cage" (interdicted world) */
 	"Rigel II",		/* TOS: "Shore Leave" ("III" in BSD) */
-	"Deneb II",		/* TOS: "Wolf in the Fold" ("IV" in BSD) */
-	//"Canopus V",		/* noncanonical */
-	//"Icarus I",		/* noncanonical */
-	//"Prometheus II",	/* noncanonical */
-	//"Omega VII",		/* noncanonical */
-	//"Elysium I",		/* noncanonical */
-	"Scalos IV",		/* TOS: "Wink of an Eye" */
-	//"Procyon IV",		/* noncanonical */
-	//"Arachnid I",		/* noncanonical */
-	//"Argo VIII",		/* noncanonical */
-	//"Triad III",		/* noncanonical */
-	//"Echo IV",		/* noncanonical */
-	//"Nimrod III",		/* noncanonical */
-	//"Nemisis IV",		/* noncanonical */
-	//"Centarurus I",	/* noncanonical */
-	//"Kronos III",		/* noncanonical */
-	//"Spectros V",		/* noncanonical */
 	"Beta III",		/* TOS: "The Return of the Archons" */
-	"Gamma Tranguli VI (Vaalel)",	/* TOS: "The Apple" */
-	"Pyris VII",		/* TOS: "Catspaw" ("III" in BSD) */
 	"Triacus",		/* TOS: "And the Children Shall Lead", */
-	"Marcos XII",		/* TOS: "And the Children Shall Lead", */
-	//"Kaland",		/* noncanonical */
-	"Ardana",		/* TOS: "The Cloud Minders" */
-	//"Stratos",		/* noncanonical */
-	//"Eden",		/* TOS: "The Way to Eden" (in Romulan space) */
-	//"Arrikis",		/* noncanonical */
-	//"Epsilon Eridani IV",	/* noncanonical */
 	"Exo III",		/* TOS: "What Are Little Girls Made Of?" (Class P) */
-    };
+#if 0
+	// Others
+	"Hansen's Planet",	/* TOS: "The Galileo Seven" */
+	"Taurus IV",		/* TOS: "The Galileo Seven" (class G) */
+	"Antos IV (Doraphane)",	/* TOS: "Whom Gods Destroy", "Who Mourns for Adonais?" */
+	"Izar",			/* TOS: "Whom Gods Destroy" */
+	"Tiburon",		/* TOS: "The Way to Eden" */
+	"Merak II",		/* TOS: "The Cloud Minders" */ 
+	"Coridan (Desotriana)",	/* TOS: "Journey to Babel" */
+	"Iotia",		/* TOS: "A Piece of the Action" */
+#endif
+   };
 
     return names[pindx];
 }



From esr at mail.berlios.de  Tue Sep 19 10:05:43 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 19 Sep 2006 10:05:43 +0200
Subject: [Sst-commit-watch] r592 - in trunk: . doc src
Message-ID: <200609190805.k8J85hI3009219@sheep.berlios.de>

Author: esr
Date: 2006-09-19 10:05:42 +0200 (Tue, 19 Sep 2006)
New Revision: 592

Modified:
   trunk/TODO
   trunk/doc/sst-doc.xml
   trunk/doc/sst.xml
   trunk/src/events.c
   trunk/src/io.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
Improvements to the testing machinery, including the replay option.


Modified: trunk/TODO
===================================================================
--- trunk/TODO	2006-09-19 08:01:27 UTC (rev 591)
+++ trunk/TODO	2006-09-19 08:05:42 UTC (rev 592)
@@ -1,6 +1,73 @@
 		Super Star Trek TO-DO list
 
+Bugs:
 
+-----------------------------------------------------------------------------
+     Short-range scan
+    1 2 3 4 5 6 7 8 9 10
+ 1  E . . . . . . . . . Stardate      3800.9, Time Left 6.14
+ 2  . . . . . . . . . C Condition     RED, 0 DAMAGES
+ 3  . @ . * . . . . . . Position      1 - 3 , 1 - 1
+ 4  . . . . . . . . . . Life Support  ACTIVE
+ 5  . . . . . . . . . . Warp Factor   5.0
+ 6  . . . . . . . . . . Energy        3871.68
+ 7  . . . . * . . . . . Torpedoes     10
+ 8  . . . . . . . . . . Shields       UP, 92% 2294.3 units
+ 9  . . . . . . R . . . Klingons Left 8
+10  . . . . . . * . . . Major system  Capella IV (Kohath)
+
+
+COMMAND> phot 2
+Target sector for torpedo number 1- 2 10
+Target sector for torpedo number 2- 2 10
+
+***Commander at Sector 2 - 10 damaged-- displaced by blast to Sector 3 - 10
+
+
+***Commander at Sector 2 - 10 destroyed.
+=== ATTACK!
+
+***TORPEDO INCOMING From Unknown?? at Sector 3 - 10
+
+Torpedo missed.
+-----------------------------------------------------------------------------
+
+Here's the log that reproduces it
+
+-----------------------------------------------------------------------------
+seed 1158606492
+sr
+phasers
+auto
+391
+sensors
+planets
+lr
+chart
+probe
+y
+n
+a
+1 8
+shields up
+sr
+m a 10 10
+
+chart
+m a 1 3 1 1
+
+n
+chart
+sr
+phot 2
+2 10
+2 10
+-----------------------------------------------------------------------------
+
+The bug is the 'Unknown??' in the incoming-torpedo message.  What
+happened here is that the Commander launched a torp just before being
+killed.  The torpedo knows its origin but not who fired it.
+
 Short-term items:
 
 * Adjust the sst.spec wrt the build system changes

Modified: trunk/doc/sst-doc.xml
===================================================================
--- trunk/doc/sst-doc.xml	2006-09-19 08:01:27 UTC (rev 591)
+++ trunk/doc/sst-doc.xml	2006-09-19 08:05:42 UTC (rev 592)
@@ -1440,6 +1440,11 @@
 <quote>Super-Commander</quote> is more powerful than an ordinary
 commander, he can destroy a base more quickly.</para>
 
+<para>Inhabited worlds can be attacked, enslaved, and forced to 
+build more Klingon starships.  They will send out a distress call
+by subspace radio when they are attacked, and you will lose contact
+with them when they are enslaved.</para>
+
 <para>The <quote>Super-Commander</quote> travels around the galaxy at
 a speed of about warp 6 or 7.  His movement is strictly time based;
 the more time passes, the further he can go.</para>
@@ -1507,11 +1512,12 @@
 <para>You lose&mdash;</para>
 
 <orderedlist>
+<listitem><para>300 points for each inhabited world you destroy,</para></listitem>
 <listitem><para>200 points if you get yourself killed,</para></listitem>
 <listitem><para>100 points for each starbase you destroy,</para></listitem>
 <listitem><para>100 points for each starship you lose,</para></listitem>
 <listitem><para>45 points for each time you had to call for help,</para></listitem>
-<listitem><para>10 points for each planet you destroyed,</para></listitem>
+<listitem><para>10 points for each uninhabited planet you destroyed,</para></listitem>
 <listitem><para>5 points for each star you destroyed, and</para></listitem>
 <listitem><para>1 point for each casualty you incurred.</para></listitem>
 </orderedlist>

Modified: trunk/doc/sst.xml
===================================================================
--- trunk/doc/sst.xml	2006-09-19 08:01:27 UTC (rev 591)
+++ trunk/doc/sst.xml	2006-09-19 08:05:42 UTC (rev 592)
@@ -15,8 +15,10 @@
 
 <cmdsynopsis>
 <command>sst</command>
-<arg choice='opt'>-t </arg> 
-<arg rep='repeat' ><replaceable>command</replaceable></arg>  
+      <arg choice='opt'>-r <replaceable>filename</replaceable></arg> 
+      <arg choice='opt'>-t </arg> 
+      <arg choice='opt'>-x </arg> 
+      <arg rep='repeat' ><replaceable>command</replaceable></arg>  
 </cmdsynopsis>
 
 </refsynopsisdiv>
@@ -38,10 +40,17 @@
 systems where <filename>/usr/share/doc/sst/</filename> is a legal
 filename, it will probably be installed there as well.</para>
 
-<para>There is one option -t, which forces the original pure-tty mode.
+<para>The option -t forces the original pure-tty mode.
 Normally sst tries to come up in full-screen mode that assumes it is
 running on a cursor-addressable terminal or terminal emulator.</para>
 
+<para>The option -r sets up replay of a session logfile.  Commands
+in the logfile are executed, then additional commands are taken
+from stdin as normal.  The -r option forces -t mode.</para>
+
+<para>The option -x enables some debugging features of interest
+probably only to sst2k developers.</para>
+
 <para>Input tokens for the setup prompts will be read from the
 remainder of the command line before standard input.  Thus, for
 example, you can invoke the program as</para>
@@ -54,11 +63,34 @@
 mode (all features enabled).</para>
 </refsect1>
 
+<refsect1 id='files'><title>FILES</title>
+<variablelist>
+<varlistentry>
+<term>/usr/share/doc/sst/sst.doc</term>
+<listitem>
+<para>Documentation file.</para>
+</listitem>
+</varlistentry>
+<varlistentry>
+<term>sst-input.log</term>
+<listitem>
+<para>Where user input is saved to (send this with your bug reports).</para>
+</listitem>
+</varlistentry>
+<varlistentry>
+<term>emsave.trk</term>
+<listitem>
+<para>Save file produced by EMEXIT command.</para>
+</listitem>
+</varlistentry>
+</variablelist>
+</refsect1>
+
 <refsect1 id='authors'><title>AUTHORS</title> 
 <para>Super Star Trek was designed and written by David Matuszek, Paul
 Reynolds, and Don Smith in the 1970s.  It was resurrected by Tom Almy.
 The screen-oriented interface is by Stas Sergeev. This version has
-been cleaned up and documented by Eric S. Raymond
+been improved, cleaned up and documented by Eric S. Raymond
 <email>esr at snark.thyrsus.com</email>.  There is a <ulink
 url='https://developer.berlios.de/projects/sst/'>project
 page</ulink>.</para>

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-19 08:01:27 UTC (rev 591)
+++ trunk/src/events.c	2006-09-19 08:05:42 UTC (rev 592)
@@ -410,7 +410,7 @@
 	    }
 	    break;
 	case FDISTR: /* inhabited system issues distress call */
-	    schedule(FDISTR, expran(0.5*game.intime));
+	    unschedule(FDISTR);
 	    /* try a whole bunch of times to find something suitable */
 	    i = 100;
 	    do {
@@ -434,8 +434,6 @@
 	    ev = schedule(FENSLV, expran(game.intime));
 	    ev->quadrant = w;
 	    q->status = distressed;
-	    if (idebug)
-		prout("=== Distress call set at %d, %d.", w.x, w.y);
 
 	    /* tell the captain about it if we can */
 	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED)

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-09-19 08:01:27 UTC (rev 591)
+++ trunk/src/io.c	2006-09-19 08:05:42 UTC (rev 592)
@@ -203,7 +203,10 @@
 	strcat(line, "\n");
 	wrefresh(curwnd);
     } else {
-	fgets(line, max, stdin);
+	if (replayfp && !feof(replayfp))
+	    fgets(line, max, replayfp);
+	else
+	    fgets(line, max, stdin);
     }
     if (logfp)
 	fputs(line, logfp);

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-19 08:01:27 UTC (rev 591)
+++ trunk/src/sst.c	2006-09-19 08:05:42 UTC (rev 592)
@@ -176,8 +176,7 @@
 char citem[10];
 int seed;		// the random-number seed
 bool idebug;		// debug mode
-bool randready;		// Has the random-number generator initialized?
-FILE *logfp;
+FILE *logfp, *replayfp;
 
 char *device[NDEVICES] = {
 	"S. R. Sensors",
@@ -595,8 +594,20 @@
     else
 	game.options |= OPTION_TTY;
 
-    while ((option = getopt(argc, argv, "tx")) != -1) {
+    seed = (int)time(NULL);
+    while ((option = getopt(argc, argv, "r:tx")) != -1) {
 	switch (option) {
+	case 'r':
+	    replayfp = fopen(optarg, "r");
+	    if (replayfp == NULL) {
+		fprintf(stderr, "sst: can't open replay file %s\n", optarg);
+		exit(1);	
+	    }
+	    if (fscanf(replayfp, "seed %d\n", &seed) != 1) {
+		fprintf(stderr, "sst: replay file %s is ill-formed\n", optarg);
+		exit(1);	
+	    }
+	    /* FALL THROUGH */
 	case 't':
 	    game.options |= OPTION_TTY;
 	    game.options &=~ OPTION_CURSES;
@@ -612,8 +623,10 @@
     /* where to save the input in case of bugs */
     logfp = fopen("sst-input.log", "w");
     setlinebuf(logfp);
+    fprintf(logfp, "seed %d\n", seed);
+    srand(seed);
 
-    randomize();
+    srand(seed);
     iostart();
 
     line[0] = '\0';
@@ -715,14 +728,6 @@
 
 double Rand(void) 
 {
-    if (!randready) {
-	if (seed == 0)
-	    seed = (unsigned)time(NULL);
-	if (logfp)
-	    fprintf(logfp, "seed %d\n", seed);
-	srand(seed);
-	randready = true;
-    }
     return rand()/(1.0 + (double)RAND_MAX);
 }
 
@@ -884,12 +889,16 @@
 	    case FENSLV:  proutn("Enlavement      "); break;
 	    case FREPRO:  proutn("Klingon Build   "); break;
 	    }
-	    if (is_scheduled(i))
+	    if (is_scheduled(i)) {
 		proutn("%.2f", scheduled(i)-game.state.date);
-	    else
+		if (i == FENSLV || i == FREPRO) {
+		    ev = findevent(i);
+		    proutn(" in %d-%d", ev->quadrant.x,ev->quadrant.y);
+		}
+	    } else
 		proutn("never");
+	    proutn("? ");
 	    chew();
-	    proutn("? ");
 	    key = scan();
 	    if (key == 'n') {
 		unschedule(i);

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-19 08:01:27 UTC (rev 591)
+++ trunk/src/sst.h	2006-09-19 08:05:42 UTC (rev 592)
@@ -178,6 +178,7 @@
 extern event *schedule(int, double);
 extern void postpone(int, double);
 extern double scheduled(int);
+#define findevent(evtype)	&game.future[evtype]
 
 #define SSTMAGIC	"SST2.0\n"
 
@@ -281,9 +282,8 @@
 extern double aaitem;
 extern char citem[10];
 extern int seed;
-extern bool randready;
 extern bool idebug;
-extern FILE *logfp;
+extern FILE *logfp, *replayfp;
 
 /* the Space Thingy's global state should *not* be saved! */
 extern coord thing;



From esr at mail.berlios.de  Tue Sep 19 10:28:19 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 19 Sep 2006 10:28:19 +0200
Subject: [Sst-commit-watch] r593 - in trunk: . src
Message-ID: <200609190828.k8J8SJlx010647@sheep.berlios.de>

Author: esr
Date: 2006-09-19 10:28:19 +0200 (Tue, 19 Sep 2006)
New Revision: 593

Modified:
   trunk/TODO
   trunk/src/battle.c
   trunk/src/sst.c
Log:
Fix two minor bugs, one in the shove code and one in debugme().


Modified: trunk/TODO
===================================================================
--- trunk/TODO	2006-09-19 08:05:42 UTC (rev 592)
+++ trunk/TODO	2006-09-19 08:28:19 UTC (rev 593)
@@ -1,73 +1,5 @@
 		Super Star Trek TO-DO list
 
-Bugs:
-
------------------------------------------------------------------------------
-     Short-range scan
-    1 2 3 4 5 6 7 8 9 10
- 1  E . . . . . . . . . Stardate      3800.9, Time Left 6.14
- 2  . . . . . . . . . C Condition     RED, 0 DAMAGES
- 3  . @ . * . . . . . . Position      1 - 3 , 1 - 1
- 4  . . . . . . . . . . Life Support  ACTIVE
- 5  . . . . . . . . . . Warp Factor   5.0
- 6  . . . . . . . . . . Energy        3871.68
- 7  . . . . * . . . . . Torpedoes     10
- 8  . . . . . . . . . . Shields       UP, 92% 2294.3 units
- 9  . . . . . . R . . . Klingons Left 8
-10  . . . . . . * . . . Major system  Capella IV (Kohath)
-
-
-COMMAND> phot 2
-Target sector for torpedo number 1- 2 10
-Target sector for torpedo number 2- 2 10
-
-***Commander at Sector 2 - 10 damaged-- displaced by blast to Sector 3 - 10
-
-
-***Commander at Sector 2 - 10 destroyed.
-=== ATTACK!
-
-***TORPEDO INCOMING From Unknown?? at Sector 3 - 10
-
-Torpedo missed.
------------------------------------------------------------------------------
-
-Here's the log that reproduces it
-
------------------------------------------------------------------------------
-seed 1158606492
-sr
-phasers
-auto
-391
-sensors
-planets
-lr
-chart
-probe
-y
-n
-a
-1 8
-shields up
-sr
-m a 10 10
-
-chart
-m a 1 3 1 1
-
-n
-chart
-sr
-phot 2
-2 10
-2 10
------------------------------------------------------------------------------
-
-The bug is the 'Unknown??' in the incoming-torpedo message.  What
-happened here is that the Commander launched a torp just before being
-killed.  The torpedo knows its origin but not who fired it.
-
 Short-term items:
 
 * Adjust the sst.spec wrt the build system changes

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-19 08:05:42 UTC (rev 592)
+++ trunk/src/battle.c	2006-09-19 08:28:19 UTC (rev 593)
@@ -423,10 +423,8 @@
 	setwnd(message_window);
     }
     if (shoved) {
-	coord w;
-	w.x = jx; w.y = jy;
-	game.quad[jx][jy]=iquad;
 	game.quad[w.x][w.y]=IHDOT;
+	game.quad[jx][jy]=iquad;
 	prout(_(" displaced by blast to %s "), cramlc(sector, w));
 	for_local_enemies(ll)
 	    game.kdist[ll] = game.kavgd[ll] = sqrt(square(game.sector.x-game.ks[ll].x)+square(game.sector.y-game.ks[ll].y));

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-19 08:05:42 UTC (rev 592)
+++ trunk/src/sst.c	2006-09-19 08:28:19 UTC (rev 593)
@@ -909,20 +909,23 @@
 		    chew();
 		    proutn("In quadrant- ");
 		    key = scan();
-		    if (key != IHREAL) {
-			prout("Event %d canceled, no y coordinate.", i);
-			unschedule(i);
-			continue;
+		    /* IHEOL says to leave coordinates as they are */
+		    if (key != IHEOL) {
+			if (key != IHREAL) {
+			    prout("Event %d canceled, no x coordinate.", i);
+			    unschedule(i);
+			    continue;
+			}
+			w.x = (int)aaitem;
+			key = scan();
+			if (key != IHREAL) {
+			    prout("Event %d canceled, no y coordinate.", i);
+			    unschedule(i);
+			    continue;
+			}
+			w.y = (int)aaitem;
+			ev->quadrant = w;
 		    }
-		    w.y = (int)aaitem;
-		    key = scan();
-		    if (key != IHREAL) {
-			prout("Event %d canceled, no x coordinate.", i);
-			unschedule(i);
-			continue;
-		    }
-		    w.x = (int)aaitem;
-		    ev->quadrant = w;
 		}
 	    }
 	}



From esr at mail.berlios.de  Tue Sep 19 10:56:52 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 19 Sep 2006 10:56:52 +0200
Subject: [Sst-commit-watch] r594 - trunk/src
Message-ID: <200609190856.k8J8uq0q013173@sheep.berlios.de>

Author: esr
Date: 2006-09-19 10:56:52 +0200 (Tue, 19 Sep 2006)
New Revision: 594

Modified:
   trunk/src/events.c
Log:
FDISTR/FENSLV/FREPRO sequence looks like it's working.


Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-19 08:28:19 UTC (rev 593)
+++ trunk/src/events.c	2006-09-19 08:56:52 UTC (rev 594)
@@ -1,3 +1,11 @@
+/*
+ * events.c -- event-queue handling
+ *
+ * This isn't a real event queue a la BSD Trek yet -- you can only have one 
+ * event of each type active at any given time.  Mostly these means we can 
+ * only have one FDISTR/FENSLV/FREPRO sequence going at any given time;
+ * BSD Trek, from which we swiped the idea, can have up to 5.
+ */
 #include "sst.h"
 #include <math.h>
 
@@ -55,7 +63,7 @@
     int radio_was_broken;
     struct quadrant *pdest, *q;
     coord w, hold;
-    event *ev;
+    event *ev, *ev2;
 
     if (idebug) {
 	prout("=== EVENTS from %.2f to %.2f:", game.state.date, fintim);
@@ -438,13 +446,14 @@
 	    /* tell the captain about it if we can */
 	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED)
 	    {
-		prout("Uhura: Captain, starsystem %s in quadrant %d - %d is under attack.",
-		      systemname(q->planet), w.x, w.y);
+		prout("Uhura- Captain, starsystem %s in quadrant %s",
+		      systemname(q->planet), cramlc(quadrant, w));
+		prout("is under attack.");
 		if (cancelrest())
 		    return;
 	    }
 	    break;
-      case FENSLV:		/* starsystem is enslaved */
+	case FENSLV:		/* starsystem is enslaved */
 	    ev = unschedule(FENSLV);
 	    /* see if current distress call still active */
 	    q = &game.state.galaxy[ev->quadrant.x][ev->quadrant.y];
@@ -455,17 +464,22 @@
 	    q->status = enslaved;
 
 	    /* play stork and schedule the first baby */
-	    ev = schedule(FREPRO, expran(2.0 * game.intime));
+	    ev2 = schedule(FREPRO, expran(2.0 * game.intime));
+	    ev2->quadrant = ev->quadrant;
 
 	    /* report the disaster if we can */
 	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED)
 	    {
-		prout("\nUhura:  We've lost contact with starsystem %s\n",
+		prout("Uhura- We've lost contact with starsystem %s",
 		      systemname(q->planet));
-		prout("  in quadrant %d,%d.\n", ev->quadrant.x,ev->quadrant.y);
+		prout("in quadrant %s.\n", cramlc(quadrant, ev->quadrant));
 	    }
 	    break;
-      case FREPRO:		/* Klingon reproduces */
+	case FREPRO:		/* Klingon reproduces */
+	    /*
+	     * If we ever switch to a real event queue, we'll need to
+	     * explicitly retrieve and restore the x and y.
+	     */
 	    ev = schedule(FREPRO, expran(1.0 * game.intime));
 	    /* see if current distress call still active */
 	    q = &game.state.galaxy[ev->quadrant.x][ev->quadrant.y];
@@ -892,11 +906,9 @@
 	game.state.nplankl += npdead;
     }
     /* mark supernova in galaxy and in star chart */
-    if ((game.quadrant.x == nq.x && game.quadrant.y == nq.y) ||
-	game.damage[DRADIO] == 0 ||
-	game.condit == IHDOCKED)
+    if (same(game.quadrant, nq) || game.damage[DRADIO] == 0 || game.condit == IHDOCKED)
 	game.state.galaxy[nq.x][nq.y].supernova = true;
-    /* If supernova destroys last klingons give special message */
+    /* If supernova destroys last Klingons give special message */
     if (KLINGREM==0 && (nq.x != game.quadrant.x || nq.y != game.quadrant.y)) {
 	skip(2);
 	if (insx == 0) prout(_("Lucky you!"));



From esr at mail.berlios.de  Tue Sep 19 11:19:41 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 19 Sep 2006 11:19:41 +0200
Subject: [Sst-commit-watch] r595 - trunk/src
Message-ID: <200609190919.k8J9JfIS017501@sheep.berlios.de>

Author: esr
Date: 2006-09-19 11:19:41 +0200 (Tue, 19 Sep 2006)
New Revision: 595

Modified:
   trunk/src/ai.c
   trunk/src/events.c
   trunk/src/sst.h
Log:
More booleans cleanup.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-19 08:56:52 UTC (rev 594)
+++ trunk/src/ai.c	2006-09-19 09:19:41 UTC (rev 595)
@@ -1,8 +1,9 @@
 #include "sst.h"
 
-static int tryexit(int lookx, int looky, int ienm, int loccom, int irun) 
+static bool tryexit(int lookx, int looky, int ienm, int loccom, int irun) 
+/* a bad guy attempts to bug out */
 {
-    int l;
+    int n;
     coord iq;
 
     iq.x = game.quadrant.x+(lookx+(QUADSIZE-1))/QUADSIZE - 1;
@@ -10,18 +11,18 @@
     if (!VALID_QUADRANT(iq.x,iq.y) ||
 	game.state.galaxy[iq.x][iq.y].supernova ||
 	game.state.galaxy[iq.x][iq.y].klingons > 8)
-	return 0; /* no can do -- neg energy, supernovae, or >8 Klingons */
-    if (ienm == IHR) return 0; /* Romulans cannot escape! */
+	return false; /* no can do -- neg energy, supernovae, or >8 Klingons */
+    if (ienm == IHR) return false; /* Romulans cannot escape! */
     if (irun == 0) {
 	/* avoid intruding on another commander's territory */
 	if (ienm == IHC) {
-	    for_commanders(l)
-		if (same(game.state.kcmdr[l],iq)) return 0;
+	    for_commanders(n)
+		if (same(game.state.kcmdr[n],iq)) return false;
 	    /* refuse to leave if currently attacking starbase */
-	    if (same(game.battle, game.quadrant)) return 0;
+	    if (same(game.battle, game.quadrant)) return false;
 	}
 	/* don't leave if over 1000 units of energy */
-	if (game.kpower[loccom] > 1000.) return 0;
+	if (game.kpower[loccom] > 1000.) return false;
     }
     /* print escape message and move out of quadrant.
        We know this if either short or long range sensors are working */
@@ -54,25 +55,26 @@
 	game.state.kscmdr.y=iq.y;
     }
     else {
-	for_commanders(l) {
-	    if (same(game.state.kcmdr[l], game.quadrant)) {
-		game.state.kcmdr[l]=iq;
+	for_commanders(n) {
+	    if (same(game.state.kcmdr[n], game.quadrant)) {
+		game.state.kcmdr[n]=iq;
 		break;
 	    }
 	}
 	game.comhere = 0;
     }
-    return 1; /* success */
+    return true; /* success */
 }
 
 
-static void movebaddy(coord com, int loccom, int ienm) 
+static void movebaddy(coord com, int loccom, int ienm)
+/* tactical movement for the bad guys */
 {
     int motion, mdist, nsteps, mx, my, lookx, looky, ll;
     coord next;
     int irun = 0;
     int krawlx, krawly;
-    int success;
+    bool success;
     int attempts;
     /* This should probably be just game.comhere + game.ishere */
     int nbaddys = game.skill >= SKILL_EXPERT ?
@@ -186,7 +188,7 @@
 	looky = next.y + my;
 	krawlx = mx < 0 ? 1 : -1;
 	krawly = my < 0 ? 1 : -1;
-	success = 0;
+	success = false;
 	attempts = 0; /* Settle mysterious hang problem */
 	while (attempts++ < 20 && !success) {
 	    if (lookx < 1 || lookx > QUADSIZE) {
@@ -220,7 +222,7 @@
 		}
 		else break; /* we have failed */
 	    }
-	    else success = 1;
+	    else success = true;
 	}
 	if (success) {
 	    next.x = lookx;
@@ -254,6 +256,7 @@
 }
 
 void movcom(void) 
+/* move a commander */
 {
     coord w; 
     int i;
@@ -291,7 +294,8 @@
     sortkl();
 }
 
-static bool movescom(coord iq, int flag, int *ipage) 
+static bool movescom(coord iq, bool flag, bool *ipage) 
+/* commander movement helper */
 {
     int i;
 
@@ -350,13 +354,14 @@
     return false; /* looks good! */
 }
 			
-void scom(int *ipage)
+void scom(bool *ipage)
+/* move the Super Commander */
 {
     int i, i2, j, ideltax, ideltay, ifindit, iwhichb;
     coord iq, sc, ibq;
     int basetbl[BASEMAX+1];
     double bdist[BASEMAX+1];
-    int flag;
+    bool flag;
 
     if (idebug) prout("== SCOM");
 
@@ -525,6 +530,7 @@
 }
 
 void movetho(void)
+/* move the Tholian */
 {
     int idx, idy, im, i;
     coord dummy;

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-19 08:56:52 UTC (rev 594)
+++ trunk/src/events.c	2006-09-19 09:19:41 UTC (rev 595)
@@ -58,9 +58,9 @@
 
 void events(void) 
 {
-    int ictbeam=0, ipage=0, istract=0, line, i=0, j, k, l, ixhold=0, iyhold=0;
+    int istract=0, evcode, i=0, j, k, l;
     double fintim = game.state.date + game.optime, datemin, xtime, repair, yank=0;
-    int radio_was_broken;
+    bool radio_was_broken, ictbeam = false, ipage = false;
     struct quadrant *pdest, *q;
     coord w, hold;
     event *ev, *ev2;
@@ -92,15 +92,15 @@
     radio_was_broken = (game.damage[DRADIO] != 0.0);
 
     for (;;) {
-	/* Select earliest extraneous event, line==0 if no events */
-	line = FSPY;
+	/* Select earliest extraneous event, evcode==0 if no events */
+	evcode = FSPY;
 	if (game.alldone) return;
 	datemin = fintim;
 	for (l = 1; l < NEVENTS; l++)
 	    if (game.future[l].date < datemin) {
-		line = l;
+		evcode = l;
 		if (idebug)
-		    prout("== Event %d fires", line);
+		    prout("== Event %d fires", evcode);
 		datemin = game.future[l].date;
 	    }
 	xtime = datemin-game.state.date;
@@ -141,12 +141,12 @@
 	    prout(_("   The star chart is now up to date.\""));
 	    skip(1);
 	}
-	/* Cause extraneous event LINE to occur */
+	/* Cause extraneous event EVCODE to occur */
 	game.optime -= xtime;
-	switch (line) {
+	switch (evcode) {
 	case FSNOVA: /* Supernova */
-	    if (ipage==0) pause_game(1);
-	    ipage=1;
+	    if (!ipage) pause_game(1);
+	    ipage=true;
 	    snova(0,0);
 	    schedule(FSNOVA, expran(0.5*game.intime));
 	    if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova) return;
@@ -168,7 +168,7 @@
 	    }
 	    else return;
 	case FTBEAM: /* Tractor beam */
-	    if (line==FTBEAM) {
+	    if (evcode==FTBEAM) {
 		if (game.state.remcom == 0) {
 		    unschedule(FTBEAM);
 		    break;
@@ -184,8 +184,8 @@
 	    }
 	    /* tractor beaming cases merge here */
 	    yank = sqrt(yank);
-	    if (ipage==0) pause_game(1);
-	    ipage=1;
+	    if (!ipage) pause_game(1);
+	    ipage=true;
 	    game.optime = (10.0/(7.5*7.5))*yank; /* 7.5 is yank rate (warp 7.5) */
 	    ictbeam = 1;
 	    skip(1);
@@ -212,7 +212,7 @@
 		    prout(_("Galileo, left on the planet surface, is well hidden."));
 		}
 	    }
-	    if (line==0)
+	    if (evcode==0)
 		game.quadrant = game.state.kscmdr;
 	    else
 		game.quadrant = game.state.kcmdr[i];
@@ -279,8 +279,8 @@
 	    if (game.damage[DRADIO] != 0.0 && game.condit != IHDOCKED) 
 		break; /* No warning :-( */
 	    game.iseenit = 1;
-	    if (ipage==0) pause_game(1);
-	    ipage = 1;
+	    if (!ipage) pause_game(1);
+	    ipage = true;
 	    skip(1);
 	    proutn(_("Lt. Uhura-  \"Captain, the starbase in "));
 	    prout(cramlc(quadrant, game.battle));
@@ -296,12 +296,11 @@
 	    game.isatb = 2;
 	    if (!game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].starbase) 
 		break; /* WAS RETURN! */
-	    ixhold = game.battle.x;
-	    iyhold = game.battle.y;
+	    hold = game.battle;
 	    game.battle = game.state.kscmdr;
 	    /* FALL THROUGH */
 	case FCDBAS: /* Commander succeeds in destroying base */
-	    if (line==FCDBAS) {
+	    if (evcode==FCDBAS) {
 		unschedule(FCDBAS);
 		/* find the lucky pair */
 		for_commanders(i)
@@ -328,8 +327,8 @@
 	    else if (game.state.rembase != 1 &&
 		     (game.damage[DRADIO] <= 0.0 || game.condit == IHDOCKED)) {
 		/* Get word via subspace radio */
-		if (ipage==0) pause_game(1);
-		ipage = 1;
+		if (!ipage) pause_game(1);
+		ipage = true;
 		skip(1);
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Command reports that"));
 		proutn(_("   the starbase in "));
@@ -348,8 +347,7 @@
 	    game.state.rembase--;
 	    if (game.isatb == 2) {
 		/* reinstate a commander's base attack */
-		game.battle.x = ixhold;
-		game.battle.y = iyhold;
+		game.battle = hold;
 		game.isatb = 0;
 	    }
 	    else {

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-19 08:56:52 UTC (rev 594)
+++ trunk/src/sst.h	2006-09-19 09:19:41 UTC (rev 595)
@@ -385,7 +385,7 @@
 void pause_game(int);
 void nova(int, int);
 void snova(int, int);
-void scom(int *);
+void scom(bool *);
 void hittem(double *);
 void prouts(char *, ...);
 int isit(char *);



From esr at mail.berlios.de  Tue Sep 19 12:14:04 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 19 Sep 2006 12:14:04 +0200
Subject: [Sst-commit-watch] r596 - trunk/src
Message-ID: <200609191014.k8JAE44P022631@sheep.berlios.de>

Author: esr
Date: 2006-09-19 12:14:04 +0200 (Tue, 19 Sep 2006)
New Revision: 596

Modified:
   trunk/src/events.c
Log:
Klingon ship births are working.


Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-19 09:19:41 UTC (rev 595)
+++ trunk/src/events.c	2006-09-19 10:14:04 UTC (rev 596)
@@ -444,9 +444,9 @@
 	    /* tell the captain about it if we can */
 	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED)
 	    {
-		prout("Uhura- Captain, starsystem %s in quadrant %s",
+		prout("Uhura- Captain, %s in %s reports it is under attack",
 		      systemname(q->planet), cramlc(quadrant, w));
-		prout("is under attack.");
+		prout("by a Klingon invasion fleet.");
 		if (cancelrest())
 		    return;
 	    }
@@ -470,7 +470,7 @@
 	    {
 		prout("Uhura- We've lost contact with starsystem %s",
 		      systemname(q->planet));
-		prout("in quadrant %s.\n", cramlc(quadrant, ev->quadrant));
+		prout("in %s.\n", cramlc(quadrant, ev->quadrant));
 	    }
 	    break;
 	case FREPRO:		/* Klingon reproduces */
@@ -485,28 +485,30 @@
 		q->status = secure;
 		break;
 	    }
+	    if (game.state.remkl >=MAXKLGAME)
+		break;		/* full right now */
 	    /* reproduce one Klingon */
 	    w = ev->quadrant;
-	    if (game.state.remkl >=MAXKLGAME)
-		break;		/* full right now */
-	    /* this quadrant not ok, pick an adjacent one */
-	    for (i = w.x - 1; i <= w.x + 1; i++)
-	    {
-		for (j = w.y - 1; j <= w.y + 1; j++)
+	    if (game.klhere >= MAXKLQUAD) {
+		/* this quadrant not ok, pick an adjacent one */
+		for (i = w.x - 1; i <= w.x + 1; i++)
 		{
-		    if (!VALID_QUADRANT(i, j))
-			continue;
-		    q = &game.state.galaxy[w.x][w.y];
-		    /* check for this quad ok (not full & no snova) */
-		    if (q->klingons >= MAXKLQUAD || !q->supernova)
-			continue;
-		    goto foundit;
+		    for (j = w.y - 1; j <= w.y + 1; j++)
+		    {
+			if (!VALID_QUADRANT(i, j))
+			    continue;
+			q = &game.state.galaxy[w.x][w.y];
+			/* check for this quad ok (not full & no snova) */
+			if (q->klingons >= MAXKLQUAD || q->supernova)
+			    continue;
+			goto foundit;
+		    }
 		}
+		break;	/* search for eligible quadrant failed */
+	    foundit:
+		w.x = i;
+		w.y = j;
 	    }
-	    break;	/* search for eligible quadrant failed */
-	foundit:
-	    w.x = i;
-	    w.y = j;
 
 	    /* deliver the child */
 	    game.state.remkl++;
@@ -516,6 +518,19 @@
 
 	    /* recompute time left */
 	    game.state.remtime = game.state.remres/(game.state.remkl+4*game.state.remcom);
+	    /* report the disaster if we can */
+	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED)
+	    {
+		if (same(game.quadrant, w)) {
+		    prout("Spock- sensors indicate the Klingons have");
+		    prout("launched a warship from %s.",systemname(q->planet));
+		} else {
+		    prout("Uhura- Starfleet reports increased Klingon activity");
+		    if (q->planet != NOPLANET)
+			proutn("near %s", systemname(q->planet));
+		    prout("in %s.\n", cramlc(quadrant, w));
+		}
+	    }
 	    break;
 	}
     }



From esr at mail.berlios.de  Tue Sep 19 20:13:36 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 19 Sep 2006 20:13:36 +0200
Subject: [Sst-commit-watch] r597 - trunk/src
Message-ID: <200609191813.k8JIDaIa031390@sheep.berlios.de>

Author: esr
Date: 2006-09-19 20:13:35 +0200 (Tue, 19 Sep 2006)
New Revision: 597

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/finish.c
   trunk/src/io.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.h
Log:
Abstract out damage checks.  Implement BSD-Trek check in abandon-ship
routine that transporter is operational and an inhabited planet is 
nearby before crew can beam down, otherwise they die in space.  (But
this isn't counted against your score yet.)


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-19 10:14:04 UTC (rev 596)
+++ trunk/src/ai.c	2006-09-19 18:13:35 UTC (rev 597)
@@ -26,7 +26,7 @@
     }
     /* print escape message and move out of quadrant.
        We know this if either short or long range sensors are working */
-    if (game.damage[DSRSENS] == 0.0 || game.damage[DLRSENS] == 0.0 ||
+    if (!damaged(DSRSENS) || !damaged(DLRSENS) ||
 	game.condit == IHDOCKED) {
 	crmena(1, ienm, 2, game.ks[loccom]);
 	prout(_(" escapes to %s (and regains strength)."),
@@ -87,7 +87,7 @@
 
     /* If SC, check with spy to see if should hi-tail it */
     if (ienm==IHS &&
-	(game.kpower[loccom] <= 500.0 || (game.condit==IHDOCKED && game.damage[DPHOTON]==0))) {
+	(game.kpower[loccom] <= 500.0 || (game.condit==IHDOCKED && !damaged(DPHOTON)))) {
 	irun = 1;
 	motion = -QUADSIZE;
     }
@@ -133,12 +133,12 @@
 
 	forces = game.kpower[loccom]+100.0*game.nenhere+400*(nbaddys-1);
 	if (!game.shldup) forces += 1000; /* Good for enemy if shield is down! */
-	if (game.damage[DPHASER] == 0.0 || game.damage[DPHOTON] == 0.0) {
-	    if (game.damage[DPHASER] != 0) /* phasers damaged */
+	if (!damaged(DPHASER) || !damaged(DPHOTON)) {
+	    if (damaged(DPHASER)) /* phasers damaged */
 		forces += 300.0;
 	    else
 		forces -= 0.2*(game.energy - 2500.0);
-	    if (game.damage[DPHOTON] != 0) /* photon torpedoes damaged */
+	    if (damaged(DPHOTON)) /* photon torpedoes damaged */
 		forces += 300.0;
 	    else
 		forces -= 50.0*game.torps;
@@ -244,7 +244,7 @@
 	game.ks[loccom].y = next.y;
 	game.kdist[loccom] = game.kavgd[loccom] =
 	    sqrt(square(game.sector.x-next.x)+square(game.sector.y-next.y));
-	if (game.damage[DSRSENS] == 0 || game.condit == IHDOCKED) {
+	if (!damaged(DSRSENS) || game.condit == IHDOCKED) {
 	    proutn("***");
 	    cramen(ienm);
 	    proutn(_(" from %s"), cramlc(2, com));
@@ -339,7 +339,7 @@
 	    /* destroy the planet */
 	    DESTROY(&game.state.plnets[i]);
 	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = NOPLANET;
-	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED) {
+	    if (!damaged(DRADIO) || game.condit == IHDOCKED) {
 		if (*ipage==0) pause_game(1);
 		*ipage = 1;
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"));
@@ -494,7 +494,7 @@
 	    schedule(FSCDBAS, 1.0 +2.0*Rand());
 	    if (is_scheduled(FCDBAS)) 
 		postpone(FSCDBAS, scheduled(FCDBAS)-game.state.date);
-	    if (game.damage[DRADIO] > 0 && game.condit != IHDOCKED)
+	    if (damaged(DRADIO) && game.condit != IHDOCKED)
 		return; /* no warning */
 	    game.iseenit = 1;
 	    if (*ipage == 0)  pause_game(1);
@@ -517,7 +517,7 @@
     if (
 	!idebug &&
 	(Rand() > 0.2 ||
-	 (game.damage[DRADIO] > 0.0 && game.condit != IHDOCKED) ||
+	 (damaged(DRADIO) && game.condit != IHDOCKED) ||
 	 !game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].charted))
 	return;
     if (*ipage==0) pause_game(1);

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-19 10:14:04 UTC (rev 596)
+++ trunk/src/battle.c	2006-09-19 18:13:35 UTC (rev 597)
@@ -15,7 +15,7 @@
 		action = NRG;
 	    else {
 		chew();
-		if (game.damage[DSHIELD]) {
+		if (!damaged(DSHIELD)) {
 		    prout(_("Shields damaged and down."));
 		    return;
 		}
@@ -31,7 +31,7 @@
 		proutn(_("Energy to transfer to shields- "));
 		action = NRG;
 	    }
-	    else if (game.damage[DSHIELD]) {
+	    else if (damaged(DSHIELD)) {
 		prout(_("Shields damaged and down."));
 		return;
 	    }
@@ -191,7 +191,7 @@
     if (fabs(deltay) > bigger) bigger = fabs(deltay);
     deltax /= bigger;
     deltay /= bigger;
-    if (game.damage[DSRSENS]==0 || game.condit==IHDOCKED) 
+    if (!damaged(DSRSENS) || game.condit==IHDOCKED) 
 	setwnd(srscan_window);
     else 
 	setwnd(message_window);
@@ -466,7 +466,7 @@
 	proutn(device[j]);
     }
     prout(_(" damaged."));
-    if (game.damage[DSHIELD] && game.shldup) {
+    if (damaged(DSHIELD) && game.shldup) {
 	prout(_("***Shields knocked down."));
 	game.shldup=false;
     }
@@ -525,7 +525,7 @@
 	    double course = 1.90985*atan2((double)game.sector.y-jay.y, (double)jay.x-game.sector.x);
 	    hit = 0;
 	    proutn(_("***TORPEDO INCOMING"));
-	    if (game.damage[DSRSENS] <= 0.0) {
+	    if (!damaged(DSRSENS)) {
 		proutn(_(" From "));
 		crmena(0, iquad, i, jay);
 	    }
@@ -559,11 +559,11 @@
 		       doesn't make any sense, so I've fw.xed it */
 	ihurt = 1;
 	proutn(_("%d unit hit"), (int)hit);
-	if ((game.damage[DSRSENS] > 0 && itflag) || game.skill<=SKILL_FAIR) {
+	if ((damaged(DSRSENS) && itflag) || game.skill<=SKILL_FAIR) {
 	    proutn(_(" on the "));
 	    crmshp();
 	}
-	if (game.damage[DSRSENS] <= 0.0 && itflag) {
+	if (!damaged(DSRSENS) && itflag) {
 	    proutn(_(" from "));
 	    crmena(0, iquad, i, jay);
 	}
@@ -594,7 +594,7 @@
 	skip(1);
 	proutn(_("Energy left %2d    shields "), (int)game.energy);
 	if (game.shldup) proutn(_("up "));
-	else if (game.damage[DSHIELD] == 0) proutn(_("down "));
+	else if (!damaged(DSHIELD)) proutn(_("down "));
 	else proutn(_("damaged, "));
     }
     prout(_("%d%%,   torpedoes left %d"), percent, game.torps);
@@ -726,7 +726,7 @@
 
     game.ididit = 0;
 
-    if (game.damage[DPHOTON]) {
+    if (damaged(DPHOTON)) {
 	prout(_("Photon tubes damaged."));
 	chew();
 	return;
@@ -911,19 +911,19 @@
 
     skip(1);
     /* SR sensors and Computer */
-    if (game.damage[DSRSENS]+game.damage[DCOMPTR] > 0) ipoop = 0;
+    if (damaged(DSRSENS) || damaged(DCOMPTR)) ipoop = 0;
     if (game.condit == IHDOCKED) {
 	prout(_("Phasers can't be fired through base shields."));
 	chew();
 	return;
     }
-    if (game.damage[DPHASER] != 0) {
+    if (damaged(DPHASER)) {
 	prout(_("Phaser control damaged."));
 	chew();
 	return;
     }
     if (game.shldup) {
-	if (game.damage[DSHCTRL]) {
+	if (damaged(DSHCTRL)) {
 	    prout(_("High speed shield control damaged."));
 	    chew();
 	    return;
@@ -1073,7 +1073,7 @@
     case FORCEMAN:
 	chew();
 	key = IHEOL;
-	if (game.damage[DCOMPTR]!=0)
+	if (damaged(DCOMPTR))
 	    prout(_("Battle comuter damaged, manual file only."));
 	else {
 	    skip(1);
@@ -1096,7 +1096,7 @@
 		msgflag = 0;
 		rpow = 0.0;
 	    }
-	    if (game.damage[DSRSENS] && !(abs(game.sector.x-aim.x) < 2 && abs(game.sector.y-aim.y) < 2) &&
+	    if (damaged(DSRSENS) && !(abs(game.sector.x-aim.x) < 2 && abs(game.sector.y-aim.y) < 2) &&
 		(ienm == IHC || ienm == IHS)) {
 		cramen(ienm);
 		prout(_(" can't be located without short range scan."));
@@ -1113,7 +1113,7 @@
 			(1.01+0.05*Rand()) + 1.0;
 		kz = k;
 		proutn("(");
-		if (game.damage[DCOMPTR]==0) proutn("%d", irec);
+		if (!damaged(DCOMPTR)) proutn("%d", irec);
 		else proutn("??");
 		proutn(")  ");
 		proutn(_("units to fire at "));
@@ -1211,7 +1211,7 @@
 	kpow = game.kpower[kk];
 	w = game.ks[kk];
 	if (hit > 0.005) {
-	    if (game.damage[DSRSENS]==0)
+	    if (!damaged(DSRSENS))
 		boom(w.x, w.y);
 	    proutn(_("%d unit hit on "), (int)hit);
 	}

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-19 10:14:04 UTC (rev 596)
+++ trunk/src/events.c	2006-09-19 18:13:35 UTC (rev 597)
@@ -89,7 +89,7 @@
 	}
     }
 
-    radio_was_broken = (game.damage[DRADIO] != 0.0);
+    radio_was_broken = damaged(DRADIO);
 
     for (;;) {
 	/* Select earliest extraneous event, evcode==0 if no events */
@@ -113,7 +113,7 @@
 	    return;
 	}
 	/* Is life support adequate? */
-	if (game.damage[DLIFSUP] && game.condit != IHDOCKED) {
+	if (damaged(DLIFSUP) && game.condit != IHDOCKED) {
 	    if (game.lsupres < xtime && game.damage[DLIFSUP] > game.lsupres) {
 		finish(FLIFESUP);
 		return;
@@ -129,7 +129,7 @@
 	    if (game.damage[l] > 0.0 && l != DDRAY)
 		game.damage[l] -= (game.damage[l]-repair > 0.0 ? repair : game.damage[l]);
 	/* If radio repaired, update star chart and attack reports */
-	if (radio_was_broken && game.damage[DRADIO] == 0.0) {
+	if (radio_was_broken && !damaged(DRADIO)) {
 	    prout(_("Lt. Uhura- \"Captain, the sub-space radio is working and"));
 	    prout(_("   surveillance reports are coming in."));
 	    skip(1);
@@ -157,10 +157,10 @@
 		game.condit==IHDOCKED || game.isatb==1 || game.iscate==1) return;
 	    if (game.ientesc ||
 		(game.energy < 2000 && game.torps < 4 && game.shield < 1250) ||
-		(game.damage[DPHASER]>0 && (game.damage[DPHOTON]>0 || game.torps < 4)) ||
-		(game.damage[DSHIELD] > 0 &&
-		 (game.energy < 2500 || game.damage[DPHASER] > 0) &&
-		 (game.torps < 5 || game.damage[DPHOTON] > 0))) {
+		(damaged(DPHASER) && (damaged(DPHOTON) || game.torps < 4)) ||
+		(damaged(DSHIELD) &&
+		 (game.energy < 2500 || damaged(DPHASER)) &&
+		 (game.torps < 5 || damaged(DPHOTON)))) {
 		/* Tractor-beam her! */
 		istract=1;
 		yank = square(game.state.kscmdr.x-game.quadrant.x) + square(game.state.kscmdr.y-game.quadrant.y);
@@ -227,7 +227,7 @@
 		game.resting = false;
 	    }
 	    if (!game.shldup) {
-		if (game.damage[DSHIELD]==0 && game.shield > 0) {
+		if (!damaged(DSHIELD) && game.shield > 0) {
 		    doshield(2); /* Shldsup */
 		    game.shldchg=0;
 		}
@@ -276,7 +276,7 @@
 		postpone(FCDBAS, scheduled(FSCDBAS)-game.state.date);
 	    game.future[FBATTAK].date = game.future[FCDBAS].date + expran(0.3*game.intime);
 	    game.iseenit = 0;
-	    if (game.damage[DRADIO] != 0.0 && game.condit != IHDOCKED) 
+	    if (!damaged(DRADIO) && game.condit != IHDOCKED) 
 		break; /* No warning :-( */
 	    game.iseenit = 1;
 	    if (!ipage) pause_game(1);
@@ -325,7 +325,7 @@
 		prout(_("Spock-  \"Captain, I believe the starbase has been destroyed.\""));
 	    }
 	    else if (game.state.rembase != 1 &&
-		     (game.damage[DRADIO] <= 0.0 || game.condit == IHDOCKED)) {
+		     (!damaged(DRADIO) || game.condit == IHDOCKED)) {
 		/* Get word via subspace radio */
 		if (!ipage) pause_game(1);
 		ipage = true;
@@ -372,7 +372,7 @@
 		if (!VALID_QUADRANT(i, j) ||
 		    game.state.galaxy[game.probec.x][game.probec.y].supernova) {
 		    // Left galaxy or ran into supernova
-		    if (game.damage[DRADIO]==0.0 || game.condit == IHDOCKED) {
+		    if (!damaged(DRADIO) || game.condit == IHDOCKED) {
 			if (ipage==0) pause_game(1);
 			ipage = 1;
 			skip(1);
@@ -386,7 +386,7 @@
 		    unschedule(FDSPROB);
 		    break;
 		}
-		if (game.damage[DRADIO]==0.0   || game.condit == IHDOCKED) {
+		if (!damaged(DRADIO) || game.condit == IHDOCKED) {
 		    if (ipage==0) pause_game(1);
 		    ipage = 1;
 		    skip(1);
@@ -398,7 +398,7 @@
 	    pdest = &game.state.galaxy[game.probec.x][game.probec.y];
 	    /* Update star chart if Radio is working or have access to
 	       radio. */
-	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED) {
+	    if (!damaged(DRADIO) || game.condit == IHDOCKED) {
 		struct page *chp = &game.state.chart[game.probec.x][game.probec.y];
 
 		chp->klingons = pdest->klingons;
@@ -442,7 +442,7 @@
 	    q->status = distressed;
 
 	    /* tell the captain about it if we can */
-	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED)
+	    if (!damaged(DRADIO) || game.condit == IHDOCKED)
 	    {
 		prout("Uhura- Captain, %s in %s reports it is under attack",
 		      systemname(q->planet), cramlc(quadrant, w));
@@ -466,7 +466,7 @@
 	    ev2->quadrant = ev->quadrant;
 
 	    /* report the disaster if we can */
-	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED)
+	    if (!damaged(DRADIO) || game.condit == IHDOCKED)
 	    {
 		prout("Uhura- We've lost contact with starsystem %s",
 		      systemname(q->planet));
@@ -519,7 +519,7 @@
 	    /* recompute time left */
 	    game.state.remtime = game.state.remres/(game.state.remkl+4*game.state.remcom);
 	    /* report the disaster if we can */
-	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED)
+	    if (!damaged(DRADIO) || game.condit == IHDOCKED)
 	    {
 		if (same(game.quadrant, w)) {
 		    prout("Spock- sensors indicate the Klingons have");
@@ -821,7 +821,7 @@
 
 	if (nq.x != game.quadrant.y || nq.y != game.quadrant.y || game.justin != 0) {
 	    /* it isn't here, or we just entered (treat as inroute) */
-	    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED) {
+	    if (!damaged(DRADIO) || game.condit == IHDOCKED) {
 		skip(1);
 		prout(_("Message from Starfleet Command       Stardate %.2f"), game.state.date);
 		prout(_("     Supernova in %s; caution advised."),
@@ -919,7 +919,7 @@
 	game.state.nplankl += npdead;
     }
     /* mark supernova in galaxy and in star chart */
-    if (same(game.quadrant, nq) || game.damage[DRADIO] == 0 || game.condit == IHDOCKED)
+    if (same(game.quadrant, nq) || !damaged(DRADIO) || game.condit == IHDOCKED)
 	game.state.galaxy[nq.x][nq.y].supernova = true;
     /* If supernova destroys last Klingons give special message */
     if (KLINGREM==0 && (nq.x != game.quadrant.x || nq.y != game.quadrant.y)) {

Modified: trunk/src/finish.c
===================================================================
--- trunk/src/finish.c	2006-09-19 10:14:04 UTC (rev 596)
+++ trunk/src/finish.c	2006-09-19 18:13:35 UTC (rev 597)
@@ -6,7 +6,7 @@
 {
     /* Finish with a BANG! */
     chew();
-    if (game.damage[DCOMPTR] != 0.0) {
+    if (damaged(DCOMPTR)) {
 	prout(_("Computer damaged; cannot execute destruct sequence."));
 	return;
     }

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-09-19 10:14:04 UTC (rev 596)
+++ trunk/src/io.c	2006-09-19 18:13:35 UTC (rev 597)
@@ -398,7 +398,7 @@
 	    skip(1);
 	proutn("%d - %d   ", ix, iy);
     } else {
-	if (game.damage[DSRSENS]==0 || game.condit==IHDOCKED) {
+	if (!damaged(DSRSENS) || game.condit==IHDOCKED) {
 	    if (i != 1 && l == 1) {
 		drawmaps(2);
 		delay(400);

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-19 10:14:04 UTC (rev 596)
+++ trunk/src/moving.c	2006-09-19 18:13:35 UTC (rev 597)
@@ -237,7 +237,7 @@
     game.shield = game.inshld;
     game.torps = game.intorps;
     game.lsupres = game.inlsr;
-    if (game.damage[DRADIO] == 0.0 &&
+    if (!damaged(DRADIO) &&
 	(is_scheduled(FCDBAS) || game.isatb == 1) && game.iseenit == 0) {
 	/* get attack report from base */
 	prout("Lt. Uhura- \"Captain, an important message from the starbase:\"");
@@ -276,7 +276,7 @@
 		return;
 	}
 	while (automatic == -1) {
-		if (game.damage[DCOMPTR]) {
+		if (damaged(DCOMPTR)) {
 			if (isprobe)
 				prout("Computer damaged; manual navigation only");
 			else
@@ -438,7 +438,7 @@
     double power;
 
     game.ididit = 0;
-    if (game.damage[DIMPULS]) {
+    if (damaged(DIMPULS)) {
 	chew();
 	skip(1);
 	prout("Engineer Scott- \"The impulse engines are damaged, Sir.\"");
@@ -502,7 +502,7 @@
 	    prout("Engineer Scott- \"The impulse engines are damaged, Sir.\"");
 	    return;
 	}
-	if (game.damage[DWARPEN] > 0.0 && game.warpfac > 4.0) {
+	if (damaged(DWARPEN) && game.warpfac > 4.0) {
 	    chew();
 	    skip(1);
 	    prout("Engineer Scott- \"Sorry, Captain. Until this damage");
@@ -641,7 +641,7 @@
 	prout("Warp engines inoperative.");
 	return;
     }
-    if (game.damage[DWARPEN] > 0.0 && aaitem > 4.0) {
+    if (damaged(DWARPEN) && aaitem > 4.0) {
 	prout("Engineer Scott- \"I'm doing my best, Captain,");
 	prout("  but right now we can only go warp 4.\"");
 	return;
@@ -681,7 +681,7 @@
     chew();
     /* is captain on planet? */
     if (game.landed==1) {
-	if (game.damage[DTRANSP]) {
+	if (damaged(DTRANSP)) {
 	    finish(FPNOVA);
 	    return;
 	}
@@ -731,10 +731,10 @@
 	crmshp();
 	skip(1);
 	prout("safely out of quadrant.");
-	if (game.damage[DRADIO] == 0.0)
+	if (!damaged(DRADIO))
 	    game.state.galaxy[game.quadrant.x][game.quadrant.y].charted = true;
 	/* Try to use warp engines */
-	if (game.damage[DWARPEN]) {
+	if (damaged(DWARPEN)) {
 	    skip(1);
 	    prout("Warp engines damaged.");
 	    finish(FSNOVAED);
@@ -841,7 +841,7 @@
 	    prout("Ye Faerie Queene has no deep space probes.");
 	return;
     }
-    if (game.damage[DDSP] != 0.0) {
+    if (damaged(DDSP)) {
 	chew();
 	skip(1);
 	prout("Engineer Scott- \"The probe launcher is damaged, Sir.\"");
@@ -850,7 +850,7 @@
     if (is_scheduled(FDSPROB)) {
 	chew();
 	skip(1);
-	if (game.damage[DRADIO] != 0 && game.condit != IHDOCKED) {
+	if (damaged(DRADIO) && game.condit != IHDOCKED) {
 	    prout("Spock-  \"Records show the previous probe has not yet");
 	    prout("   reached its destination.\"");
 	}
@@ -911,7 +911,7 @@
 	prout("Lt. Uhura-  \"But Captain, we're already docked.\"");
 	return;
     }
-    if (game.damage[DRADIO] != 0) {
+    if (damaged(DRADIO)) {
 	prout("Subspace radio damaged.");
 	return;
     }

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-19 10:14:04 UTC (rev 596)
+++ trunk/src/planets.c	2006-09-19 18:13:35 UTC (rev 597)
@@ -62,7 +62,7 @@
 	prout("Already in standard orbit.");
 	return;
     }
-    if (game.damage[DWARPEN] != 0 && game.damage[DIMPULS] != 0) {
+    if (damaged(DWARPEN) && damaged(DIMPULS)) {
 	prout("Both warp and impulse engines damaged.");
 	return;
     }
@@ -86,7 +86,7 @@
 {
     skip(1);
     chew();
-    if (game.damage[DSRSENS] != 0.0) {
+    if (damaged(DSRSENS)) {
 	prout("Short range sensors damaged.");
 	return;
     }
@@ -113,9 +113,9 @@
 {
     chew();
     skip(1);
-    if (game.damage[DTRANSP] != 0) {
+    if (damaged(DTRANSP)) {
 	prout("Transporter damaged.");
-	if (game.damage[DSHUTTL]==0 && (game.state.plnets[game.iplnet].known==shuttle_down || game.iscraft == 1)) {
+	if (!damaged(DSHUTTL) && (game.state.plnets[game.iplnet].known==shuttle_down || game.iscraft == 1)) {
 	    skip(1);
 	    proutn("Spock-  \"May I suggest the shuttle craft, Sir?\" ");
 	    if (ja() != 0) shuttle();
@@ -287,7 +287,7 @@
 {
     chew();
     skip(1);
-    if(game.damage[DSHUTTL] != 0.0) {
+    if(damaged(DSHUTTL)) {
 	if (game.damage[DSHUTTL] == -1.0) {
 	    if (game.inorbit && game.state.plnets[game.iplnet].known == shuttle_down)
 		prout("Ye Faerie Queene has no shuttle craft bay to dock it at.");
@@ -296,7 +296,8 @@
 	}
 	else if (game.damage[DSHUTTL] > 0)
 	    prout("The Galileo is damaged.");
-	else prout("Shuttle craft is now serving Big Macs.");
+	else /* game.damage[DSHUTTL] < 0 */ 
+	    prout("Shuttle craft is now serving Big Macs.");
 	return;
     }
     if (!game.inorbit) {
@@ -338,7 +339,7 @@
 	/* Kirk on planet */
 	if (game.iscraft==1) {
 	    /* Galileo on ship! */
-	    if (game.damage[DTRANSP]==0) {
+	    if (!damaged(DTRANSP)) {
 		proutn("Spock-  \"Would you rather use the transporter?\" ");
 		if (ja() != 0) {
 		    beam();
@@ -412,7 +413,7 @@
 	prout("Sulu-  \"But Sir, there are no enemies in this quadrant.\"");
 	return;
     }
-    if (game.damage[DDRAY] > 0.0) {
+    if (damaged(DDRAY)) {
 	prout("Death Ray is damaged.");
 	return;
     }

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-19 10:14:04 UTC (rev 596)
+++ trunk/src/reports.c	2006-09-19 18:13:35 UTC (rev 597)
@@ -69,7 +69,7 @@
 	prout(" destroyed, %d remaining.", game.state.rembase);
     }
     else prout("There are %d bases.", game.inbase);
-    if (game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED || game.iseenit) {
+    if (!damaged(DRADIO) || game.condit == IHDOCKED || game.iseenit) {
 	/* Don't report this if not seen and
 	   either the radio is dead or not at base! */
 	attakreport(0);
@@ -87,7 +87,7 @@
 	if (game.nprobes!=1) proutn("s");
 	prout(".");
     }
-    if ((game.damage[DRADIO] == 0.0 || game.condit == IHDOCKED)
+    if ((!damaged(DRADIO) || game.condit == IHDOCKED)
 		&& is_scheduled(FDSPROB)) {
 	if (game.isarmed) 
 	    proutn("An armed deep space probe is in");
@@ -117,7 +117,7 @@
 {
     int x, y;
     chew();
-    if (game.damage[DLRSENS] != 0.0) {
+    if (damaged(DLRSENS)) {
 	/* Now allow base's sensors if docked */
 	if (game.condit != IHDOCKED) {
 	    prout("LONG-RANGE SENSORS DAMAGED.");
@@ -134,7 +134,7 @@
 	    if (!VALID_QUADRANT(x, y))
 		proutn("  -1");
 	    else {
-		if (!game.damage[DRADIO])
+		if (!damaged(DRADIO))
 		    game.state.galaxy[x][y].charted = true;
 		game.state.chart[x][y].klingons = game.state.galaxy[x][y].klingons;
 		game.state.chart[x][y].starbase = game.state.galaxy[x][y].starbase;
@@ -156,7 +156,7 @@
     chew();
 
     for (i = 0; i < NDEVICES; i++) {
-	if (game.damage[i] > 0.0) {
+	if (damaged(i)) {
 	    if (!jdam) {
 		prout("DEVICE            -REPAIR TIMES-");
 		prout("                IN FLIGHT   DOCKED");
@@ -190,7 +190,7 @@
     int i,j;
     chew();
 
-    if (game.damage[DRADIO] == 0.0)
+    if (!damaged(DRADIO))
 	rechart();
 
     if (game.lastchart < game.state.date && game.condit == IHDOCKED) {
@@ -280,7 +280,7 @@
 	break;
     case 4:
 	proutn("Life Support  ");
-	if (game.damage[DLIFSUP] != 0.0) {
+	if (damaged(DLIFSUP)) {
 	    if (game.condit == IHDOCKED)
 		proutn("DAMAGED, Base provides");
 	    else
@@ -302,7 +302,7 @@
 	break;
     case 8:
 	proutn("Shields       ");
-	if (game.damage[DSHIELD] != 0)
+	if (damaged(DSHIELD))
 	    proutn("DAMAGED,");
 	else if (game.shldup)
 	    proutn("UP,");
@@ -340,7 +340,7 @@
     int goodScan=true, leftside=true, rightside=true, nn=false; 
     switch (l) {
     case SCAN_FULL: // SRSCAN
-	if (game.damage[DSRSENS] != 0) {
+	if (damaged(DSRSENS)) {
 	    /* Allow base's sensors if docked */
 	    if (game.condit != IHDOCKED) {
 		prout("   S.R. SENSORS DAMAGED!");
@@ -350,7 +350,7 @@
 		prout("  [Using Base's sensors]");
 	}
 	else prout("     Short-range scan");
-	if (goodScan && !game.damage[DRADIO]) { 
+	if (goodScan && !damaged(DRADIO)) { 
 	    game.state.chart[game.quadrant.x][game.quadrant.y].klingons = game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons;
 	    game.state.chart[game.quadrant.x][game.quadrant.y].starbase = game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase;
 	    game.state.chart[game.quadrant.x][game.quadrant.y].stars = game.state.galaxy[game.quadrant.x][game.quadrant.y].stars;
@@ -410,7 +410,7 @@
     int ix1, ix2, iy1, iy2;
     bool wfl, prompt = false;
     double ttime, twarp, tpower;
-    if (game.damage[DCOMPTR] != 0.0) {
+    if (damaged(DCOMPTR)) {
 	prout("COMPUTER DAMAGED, USE A POCKET CALCULATOR.");
 	skip(1);
 	return;

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-19 10:14:04 UTC (rev 596)
+++ trunk/src/setup.c	2006-09-19 18:13:35 UTC (rev 597)
@@ -92,9 +92,31 @@
     return 0;
 }
 
+/*
+**  Abandon Ship
+**
+**	The ship is abandoned.  If your current ship is the Faire
+**	Queene, or if your shuttlecraft is dead, you're out of
+**	luck.  You need the shuttlecraft in order for the captain
+**	(that's you!!) to escape.
+**
+**	Your crew can beam to an inhabited starsystem in the
+**	quadrant, if there is one and if the transporter is working.
+**	If there is no inhabited starsystem, or if the transporter
+**	is out, they are left to die in outer space.
+**
+**	If there are no starbases left, you are captured by the
+**	Klingons, who torture you mercilessly.  However, if there
+**	is at least one starbase, you are returned to the
+**	Federation in a prisoner of war exchange.  Of course, this
+**	can't happen unless you have taken some prisoners.
+**
+*/
+
 void abandn(void) 
 {
     int nb, l;
+    struct quadrant *q;
 
     chew();
     if (game.condit==IHDOCKED) {
@@ -132,13 +154,23 @@
 	prouts("***ALL HANDS ABANDON SHIP!");
 	skip(2);
 	prout("Captain and crew escape in shuttle craft.");
-	prout("Remainder of ship's complement beam down");
-	prout("to nearest habitable planet.");
 	if (game.state.rembase==0) {
 	    /* Oops! no place to go... */
 	    finish(FABANDN);
 	    return;
 	}
+	q = &game.state.galaxy[game.quadrant.x][game.quadrant.y];
+	/* Dispose of crew */
+	if (!(game.options & OPTION_WORLDS) && !damaged(DTRANSP)) {
+	    prout("Remainder of ship's complement beam down");
+	    prout("to nearest habitable planet.");
+	} else if (q->planet != NOPLANET && !damaged(DTRANSP)) {
+	    prout("Remainder of ship's complement beam down");
+	    prout("to %s.", systemname(q->planet));
+	} else {
+	    prout("Entire crew of %d left to die in outer space.");
+	}
+
 	/* If at least one base left, give 'em the Faerie Queene */
 	skip(1);
 	game.icrystl = 0; /* crystals are lost */
@@ -175,7 +207,7 @@
     prout("still useable.");
     if (game.icrystl!=0) prout("The dilithium crystals have been moved.");
     game.imine=0;
-    game.iscraft=0; /* Gallileo disappears */
+    game.iscraft=0; /* Galileo disappears */
     /* Resupply ship */
     game.condit=IHDOCKED;
     for (l = 0; l < NDEVICES; l++) 
@@ -650,7 +682,7 @@
     // Check for RNZ
     if (game.irhere > 0 && game.klhere == 0 && (here->planet == NOPLANET || game.state.plnets[here->planet].inhabited == UNINHABITED)) {
 	game.neutz = 1;
-	if (game.damage[DRADIO] <= 0.0) {
+	if (!damaged(DRADIO)) {
 	    skip(1);
 	    prout("LT. Uhura- \"Captain, an urgent message.");
 	    prout("  I'll put it on audio.\"  CLICK");
@@ -671,7 +703,7 @@
 	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] =
 		sqrt(square(game.sector.x-w.x) + square(game.sector.y-w.y));
 	    game.kpower[game.nenhere] = Rand()*6000.0 +500.0 +250.0*game.skill;
-	    if (game.damage[DSRSENS] == 0.0) {
+	    if (!damaged(DSRSENS)) {
 		skip(1);
 		prout("MR. SPOCK- \"Captain, this is most unusual.");
 		prout("    Please examine your short-range scan.\"");

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-19 10:14:04 UTC (rev 596)
+++ trunk/src/sst.h	2006-09-19 18:13:35 UTC (rev 597)
@@ -146,6 +146,8 @@
 #define DDSP    14  // Added deep space probe
 #define NDEVICES (15)	// Number of devices
 
+#define damaged(dev)	game.damage[dev] != 0.0
+
 #define FOREVER	1e30
 
 /* Define future events */



From stsp at mail.berlios.de  Tue Sep 19 20:44:10 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Tue, 19 Sep 2006 20:44:10 +0200
Subject: [Sst-commit-watch] r598 - in trunk: po src
Message-ID: <200609191844.k8JIiAcT000705@sheep.berlios.de>

Author: stsp
Date: 2006-09-19 20:44:07 +0200 (Tue, 19 Sep 2006)
New Revision: 598

Modified:
   trunk/po/POTFILES.in
   trunk/po/ru.po
   trunk/src/io.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
Log:
more gettextizing and translating

Modified: trunk/po/POTFILES.in
===================================================================
--- trunk/po/POTFILES.in	2006-09-19 18:13:35 UTC (rev 597)
+++ trunk/po/POTFILES.in	2006-09-19 18:44:07 UTC (rev 598)
@@ -3,3 +3,7 @@
 src/battle.c
 src/events.c
 src/finish.c
+src/io.c
+src/moving.c
+src/planets.c
+src/reports.c

Modified: trunk/po/ru.po
===================================================================
--- trunk/po/ru.po	2006-09-19 18:13:35 UTC (rev 597)
+++ trunk/po/ru.po	2006-09-19 18:44:07 UTC (rev 598)
@@ -4,13 +4,14 @@
 # This file is distributed under the same license as the sst package.
 # Stas Sergeev <stsp at aknet.ru>, 2006.
 #
-# ???????? ???? ??? ?? ???. ? ???? ???????????, ? ?? ??????????. :)
+# ????????, ???? ??? ?? ???. ? ???? ???????????, ? ?? ??????????.
+# ??????? ?? ??????, ? ????? ???????????. :)
 #
 msgid ""
 msgstr ""
 "Project-Id-Version: sst 2.0\n"
 "Report-Msgid-Bugs-To: stsp\n"
-"POT-Creation-Date: 2006-09-15 18:55+0400\n"
+"POT-Creation-Date: 2006-09-19 17:25+0400\n"
 "PO-Revision-Date: 2006-09-15 11:01+0400\n"
 "Last-Translator: Stas Sergeev <stsp at aknet.ru>\n"
 "Language-Team: Russian <ru at li.org>\n"
@@ -20,68 +21,68 @@
 "Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%"
 "10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
 
-#: src/ai.c:30
+#: src/ai.c:31
 #, c-format
 msgid " escapes to %s (and regains strength)."
 msgstr " ??????? ? %s (? ??????????????? ???????)"
 
-#: src/ai.c:258
+#: src/ai.c:257
 #, c-format
 msgid " from %s"
 msgstr " ?? %s"
 
-#: src/ai.c:259
+#: src/ai.c:258
 msgid " advances to "
 msgstr " ????????? ? "
 
-#: src/ai.c:260
+#: src/ai.c:259
 msgid " retreats to "
 msgstr " ????????? ? "
 
-#: src/ai.c:358 src/ai.c:545
+#: src/ai.c:352 src/ai.c:537
 msgid "Lt. Uhura-  \"Captain, Starfleet Intelligence reports"
 msgstr "??. ?????- \"???????, ???????? ????????? ????? ???????????"
 
-#: src/ai.c:359
+#: src/ai.c:353
 msgid "   a planet in "
 msgstr "   ??????? ? "
 
-#: src/ai.c:361
+#: src/ai.c:355
 msgid " has been destroyed"
 msgstr " ??????????"
 
-#: src/ai.c:362
+#: src/ai.c:356
 msgid "   by the Super-commander.\""
 msgstr "   ????-?????."
 
-#: src/ai.c:520 src/events.c:209
+#: src/ai.c:512 src/events.c:240
 msgid "Lt. Uhura-  \"Captain, the starbase in "
 msgstr "??. ?????- \"???????, ???? ? "
 
-#: src/ai.c:523
+#: src/ai.c:515
 msgid "   reports that it is under attack from the Klingon Super-commander."
 msgstr "   ????????, ??? ??? ????????? ????-????? ?????????."
 
-#: src/ai.c:524
+#: src/ai.c:516
 #, c-format
 msgid "   It can survive until stardate %d.\""
 msgstr "   ??? ?????? ???????????? ?? ???? %d.\""
 
-#: src/ai.c:527 src/events.c:217
+#: src/ai.c:519 src/events.c:248
 msgid "Mr. Spock-  \"Captain, shall we cancel the rest period?\""
 msgstr "?????? ????- \"???????, ??? ???????? ??????\""
 
-#: src/ai.c:546
+#: src/ai.c:538
 msgid "   the Super-commander is in "
 msgstr "   ????-??? ????????? ? "
 
-#: src/ai.c:611
+#: src/ai.c:604
 msgid " completes web."
 msgstr " ??????? ????."
 
 #: src/battle.c:19 src/battle.c:35
 msgid "Shields damaged and down."
-msgstr "?????? ??????? ? ?????????."
+msgstr "?????? ??????? ? ?????."
 
 #: src/battle.c:29
 msgid "Do you wish to change shield energy? "
@@ -93,17 +94,17 @@
 
 #: src/battle.c:39
 msgid "Shields are up. Do you want them down? "
-msgstr "?????? ????????. ?? ?????? ?? ?????????? "
+msgstr "?????? ???????. ?? ?????? ?? ?????? "
 
 #: src/battle.c:47
 msgid "Shields are down. Do you want them up? "
-msgstr "?????? ?????????. ?? ?????? ?? ????????? "
+msgstr "?????? ?????. ?? ?????? ?? ???????? "
 
 #: src/battle.c:59
 msgid "Shields already up."
-msgstr "?????? ? ??? ??? ????????."
+msgstr "?????? ? ??? ??? ???????."
 
-#: src/battle.c:65 src/battle.c:1170
+#: src/battle.c:65 src/battle.c:1175
 msgid "Shields raised."
 msgstr "?????? ???????."
 
@@ -113,9 +114,9 @@
 
 #: src/battle.c:76
 msgid "Shields already down."
-msgstr "?????? ? ??? ??? ?????????."
+msgstr "?????? ? ??? ??? ?????."
 
-#: src/battle.c:81 src/battle.c:851
+#: src/battle.c:81 src/battle.c:856
 msgid "Shields lowered."
 msgstr "?????? ???????."
 
@@ -131,7 +132,7 @@
 msgid "Excess energy requested returned to ship energy"
 msgstr "?????? ??????? ????????? ???????"
 
-#: src/battle.c:108
+#: src/battle.c:108 src/moving.c:525 src/moving.c:618
 msgid "Engineering to bridge--"
 msgstr "?????????? ????? ???????--"
 
@@ -159,7 +160,8 @@
 msgid "Draining energy from shields.\""
 msgstr "???????? ??????? ?? ??????.\""
 
-#: src/battle.c:137 src/battle.c:855 src/events.c:667
+#: src/battle.c:137 src/battle.c:860 src/events.c:817 src/moving.c:141
+#: src/moving.c:724 src/planets.c:465
 msgid "***RED ALERT!  RED ALERT!"
 msgstr "***???????!  ???????!"
 
@@ -188,530 +190,530 @@
 msgid "***Sickbay reports %d casualties"
 msgstr "***?? ???????? ??????????? ? %d ????????????"
 
-#: src/battle.c:213
+#: src/battle.c:215
 msgid "Torpedo hits "
 msgstr "??????? ?????? ? ????: "
 
-#: src/battle.c:249
+#: src/battle.c:251
 msgid " uses anti-photon device;"
 msgstr " ?????????? ??????????????? ?????????;"
 
-#: src/battle.c:250
+#: src/battle.c:252
 msgid "   torpedo neutralized."
 msgstr "   ??????? ??????????????."
 
-#: src/battle.c:279 src/battle.c:289
+#: src/battle.c:281 src/battle.c:291
 msgid " damaged but not destroyed."
 msgstr " ?????????, ?? ?? ?????????."
 
-#: src/battle.c:283
+#: src/battle.c:285
 msgid " buffeted into black hole."
 msgstr " ??????? ? ?????? ????."
 
-#: src/battle.c:292
+#: src/battle.c:294
 msgid " damaged--"
 msgstr " ?????????--"
 
-#: src/battle.c:299
+#: src/battle.c:301
 msgid "***STARBASE DESTROYED.."
 msgstr "***???? ??????????.."
 
-#: src/battle.c:317 src/battle.c:654 src/events.c:472 src/events.c:493
+#: src/battle.c:319 src/battle.c:660 src/events.c:622 src/events.c:642
 msgid " destroyed."
 msgstr " ?????????."
 
-#: src/battle.c:335
+#: src/battle.c:337
 msgid " unaffected by photon blast."
 msgstr " ?? ????????? ???????? ???????."
 
-#: src/battle.c:340
+#: src/battle.c:342
 msgid "AAAAIIIIEEEEEEEEAAAAAAAAUUUUUGGGGGHHHHHHHHHHHH!!!"
 msgstr "?????????????????????????????????????????????????????!!!"
 
-#: src/battle.c:342
+#: src/battle.c:344
 msgid "    HACK!     HACK!    HACK!        *CHOKE!*  "
 msgstr ""
 
-#: src/battle.c:344
+#: src/battle.c:346
 msgid "Mr. Spock-"
 msgstr "?????? ????-"
 
-#: src/battle.c:345
+#: src/battle.c:347
 msgid "  \"Fascinating!\""
 msgstr "  \"??????????!\""
 
-#: src/battle.c:361
+#: src/battle.c:363
 msgid " swallows torpedo."
 msgstr " ????????? ???????."
 
-#: src/battle.c:365
+#: src/battle.c:367
 msgid "***Torpedo absorbed by Tholian web."
 msgstr "***?????????? ???? ????????? ???????."
 
-#: src/battle.c:382
+#: src/battle.c:384
 msgid " survives photon blast."
 msgstr " ???????? ???????? ?????."
 
-#: src/battle.c:385
+#: src/battle.c:387
 msgid " disappears."
 msgstr " ?????."
 
-#: src/battle.c:410
+#: src/battle.c:414
 #, c-format
 msgid " displaced by blast to %s "
 msgstr " ????????? ??????? ?? %s "
 
-#: src/battle.c:417
+#: src/battle.c:421
 msgid "Torpedo missed."
 msgstr "??????? ?????????."
 
-#: src/battle.c:430
+#: src/battle.c:434
 msgid "***CRITICAL HIT--"
 msgstr "***??????????? ????--"
 
-#: src/battle.c:446
+#: src/battle.c:450
 msgid " and "
 msgstr " ? "
 
-#: src/battle.c:450
+#: src/battle.c:454
 msgid " damaged."
 msgstr " ?????????."
 
-#: src/battle.c:452
+#: src/battle.c:456
 msgid "***Shields knocked down."
 msgstr "***?????? ?????."
 
-#: src/battle.c:510
+#: src/battle.c:515
 msgid "***TORPEDO INCOMING"
 msgstr "***??????? ????????????"
 
-#: src/battle.c:512
+#: src/battle.c:517
 msgid " From "
 msgstr " ?? "
 
-#: src/battle.c:544
+#: src/battle.c:549
 #, c-format
 msgid "%d unit hit"
 msgstr "???? ?? %d ??????"
 
-#: src/battle.c:546
+#: src/battle.c:551
 msgid " on the "
 msgstr " ?? "
 
-#: src/battle.c:550
+#: src/battle.c:555
 msgid " from "
 msgstr " ?? "
 
-#: src/battle.c:568
+#: src/battle.c:573
 msgid "***Enemies decide against attacking your ship."
 msgstr "***????? ?????? ?? ????????? ??? ???????."
 
-#: src/battle.c:573
+#: src/battle.c:578
 msgid "Enemy attack reduces shield strength to "
 msgstr "????????? ????? ????????? ???? ?????? ?? "
 
-#: src/battle.c:578
+#: src/battle.c:583
 #, c-format
 msgid "Energy left %2d    shields "
 msgstr "??????? ???????: %2d    ?????? "
 
-#: src/battle.c:579
+#: src/battle.c:584
 msgid "up "
-msgstr "???????? "
+msgstr "??????? "
 
-#: src/battle.c:580
+#: src/battle.c:585
 msgid "down "
-msgstr "????????? "
+msgstr "????? "
 
-#: src/battle.c:581
+#: src/battle.c:586
 msgid "damaged, "
 msgstr "???????, "
 
-#: src/battle.c:583
+#: src/battle.c:588
 #, c-format
 msgid "%d%%,   torpedoes left %d"
 msgstr "%d%%,   ???????? %d ??????"
 
-#: src/battle.c:589
+#: src/battle.c:594
 #, c-format
 msgid "Mc Coy-  \"Sickbay to bridge.  We suffered %d casualties"
 msgstr "??????- \"??????? ???????.  ? ??? ????????? %d ????????????"
 
-#: src/battle.c:590
+#: src/battle.c:595
 msgid "   in that last attack.\""
 msgstr "   ?? ????????? ?????.\""
 
-#: src/battle.c:694
+#: src/battle.c:699
 msgid "Spock-  \"Bridge to sickbay.  Dr. McCoy,"
 msgstr "????- \"?????? ????????.  ?????? ??????,"
 
-#: src/battle.c:695
+#: src/battle.c:700
 msgid "  I recommend an immediate review of"
 msgstr "  ?????????? ?????????? ?????????"
 
-#: src/battle.c:696
+#: src/battle.c:701
 msgid "  the Captain's psychological profile.\""
 msgstr "  ??????????????? ????????? ????????.\""
 
-#: src/battle.c:713
+#: src/battle.c:718
 msgid "Photon tubes damaged."
 msgstr "???????? ????? ???????."
 
-#: src/battle.c:718
+#: src/battle.c:723
 msgid "No torpedoes left."
 msgstr "?????? ?????? ?? ????????."
 
-#: src/battle.c:729
+#: src/battle.c:734
 #, c-format
 msgid "%d torpedoes left."
 msgstr "???????? %d ??????."
 
-#: src/battle.c:730
+#: src/battle.c:735
 msgid "Number of torpedoes to fire- "
 msgstr "????? ?????? ?? ???????- "
 
-#: src/battle.c:741
+#: src/battle.c:746
 msgid "Maximum of 3 torpedoes per burst."
 msgstr "???????? 3 ??????? ?? ????."
 
-#: src/battle.c:782
+#: src/battle.c:787
 #, c-format
 msgid "Target sector for torpedo number %d- "
 msgstr "?????? ?????????? ??? ??????? ????? %d- "
 
-#: src/battle.c:809
+#: src/battle.c:814
 #, c-format
 msgid "***TORPEDO NUMBER %d MISFIRES"
 msgstr "***??????? ????? %d ?? ?????"
 
-#: src/battle.c:811
+#: src/battle.c:816
 msgid "***TORPEDO MISFIRES."
 msgstr "***??????? ?? ?????."
 
-#: src/battle.c:814
+#: src/battle.c:819
 msgid "  Remainder of burst aborted."
 msgstr "  ??????? ????? ???????."
 
-#: src/battle.c:817
+#: src/battle.c:822
 msgid "***Photon tubes damaged by misfire."
 msgstr "***???????? ????? ????????? ??? ??????."
 
-#: src/battle.c:838
+#: src/battle.c:843
 msgid "Weapons officer Sulu-  \"Phasers overheated, sir.\""
 msgstr "???????? ????- \"?????? ??????????, ???.\""
 
-#: src/battle.c:861
+#: src/battle.c:866
 msgid "Sulu-  \"Captain! Shield malf***********************\""
 msgstr "????- \"???????! ?????? ?? ????*********************\""
 
-#: src/battle.c:867
+#: src/battle.c:872
 msgid "Sulu-  \"Captain! Shield malfunction! Phaser fire contained!\""
 msgstr ""
 "????- \"???????! ?????? ?? ?????????! ??????? ??????? ????????? ??????!\""
 
-#: src/battle.c:869
+#: src/battle.c:874
 msgid "Lt. Uhura-  \"Sir, all decks reporting damage.\""
 msgstr "??. ?????- \"???, ??? ?????? ???????? ? ???????????.\""
 
-#: src/battle.c:875
+#: src/battle.c:880
 msgid "McCoy to bridge- \"Severe radiation burns, Jim."
 msgstr "?????? ???????- \"?????????? ???????????? ?????, ????."
 
-#: src/battle.c:876
+#: src/battle.c:881
 #, c-format
 msgid "  %d casualties so far.\""
 msgstr "  ????-??? %d ????????????.\""
 
-#: src/battle.c:880
+#: src/battle.c:885
 msgid "Phaser energy dispersed by shields."
 msgstr "??????? ??????? ???????? ???????? ?????."
 
-#: src/battle.c:881
+#: src/battle.c:886
 msgid "Enemy unaffected."
 msgstr "???? ?? ?????????."
 
-#: src/battle.c:899
+#: src/battle.c:904
 msgid "Phasers can't be fired through base shields."
 msgstr "?????? ?? ????? ???????? ????? ?????? ????."
 
-#: src/battle.c:904
+#: src/battle.c:909
 msgid "Phaser control damaged."
 msgstr "?????????? ???????? ?? ????????."
 
-#: src/battle.c:910
+#: src/battle.c:915
 msgid "High speed shield control damaged."
 msgstr "???????????????? ?????????? ??????? ?? ????????."
 
-#: src/battle.c:915
+#: src/battle.c:920
 msgid "Insufficient energy to activate high-speed shield control."
 msgstr "???????????? ??????? ??? ????????????????? ?????????? ???????."
 
-#: src/battle.c:919
+#: src/battle.c:924
 msgid "Weapons Officer Sulu-  \"High-speed shield control enabled, sir.\""
 msgstr "???????? ????- \"???????????????? ?????????? ??????? ????????, ???.\""
 
-#: src/battle.c:929
+#: src/battle.c:934
 msgid "There is no enemy present to select."
 msgstr "????? ??? ??????."
 
-#: src/battle.c:945 src/battle.c:960 src/battle.c:971
+#: src/battle.c:950 src/battle.c:965 src/battle.c:976
 msgid "Energy will be expended into space."
 msgstr "??????? ????? ? ???????."
 
-#: src/battle.c:977
+#: src/battle.c:982
 msgid "Manual or automatic? "
 msgstr "?????? ??? ???????????????"
 
-#: src/battle.c:988
+#: src/battle.c:993
 #, c-format
 msgid "Phasers locked on target. Energy available: %.2f"
 msgstr "?????? ???????? ?? ????. ????????? ???????: %.2f"
 
-#: src/battle.c:998
+#: src/battle.c:1003
 #, c-format
 msgid "(%d) units required. "
 msgstr ""
 
-#: src/battle.c:1000
+#: src/battle.c:1005
 msgid "Units to fire= "
 msgstr "??????? ?? ???????= "
 
-#: src/battle.c:1005 src/battle.c:1076
+#: src/battle.c:1010 src/battle.c:1081
 #, c-format
 msgid "Energy available= %.2f"
 msgstr "????????? ???????= %.2f"
 
-#: src/battle.c:1046
+#: src/battle.c:1051
 msgid "*** Tholian web absorbs "
 msgstr "*** ?????????? ???? ????????? "
 
-#: src/battle.c:1047
+#: src/battle.c:1052
 msgid "excess "
 msgstr "?????????? "
 
-#: src/battle.c:1048
+#: src/battle.c:1053
 msgid "phaser energy."
 msgstr "??????? ???????."
 
-#: src/battle.c:1051
+#: src/battle.c:1056
 #, c-format
 msgid "%d expended on empty space."
 msgstr "%d ???? ? ???????."
 
-#: src/battle.c:1060
+#: src/battle.c:1065
 msgid "Battle comuter damaged, manual file only."
 msgstr "???????? ????????? ??????, ??????????? ?????? ??????????."
 
-#: src/battle.c:1063 src/finish.c:13
+#: src/battle.c:1068 src/finish.c:13
 msgid "---WORKING---"
 msgstr "---??????---"
 
-#: src/battle.c:1065
+#: src/battle.c:1070
 msgid "Short-range-sensors-damaged"
 msgstr "???????-????????-??????-???????"
 
-#: src/battle.c:1066
+#: src/battle.c:1071
 msgid "Insufficient-data-for-automatic-phaser-fire"
 msgstr "????????????-??????-???-???????????????-?????????-???????"
 
-#: src/battle.c:1067
+#: src/battle.c:1072
 msgid "Manual-fire-must-be-used"
 msgstr "???????????-??????-?????????"
 
-#: src/battle.c:1085
+#: src/battle.c:1090
 msgid " can't be located without short range scan."
 msgstr " ?? ????? ???? ????????? ??? ???????? ????????????."
 
-#: src/battle.c:1102
+#: src/battle.c:1107
 msgid "units to fire at "
 msgstr "??????? ?? ??????? ?? "
 
-#: src/battle.c:1132
+#: src/battle.c:1137
 msgid "Available energy exceeded -- try again."
 msgstr "????????? ??????? ?? ??????? -- ?????????? ?????."
 
-#: src/battle.c:1164
+#: src/battle.c:1169
 msgid "Sulu-  \"Sir, the high-speed shield control has malfunctioned . . ."
 msgstr "????- \"???, ???????????????? ?????????? ??????? ?? ????????? . . ."
 
-#: src/battle.c:1165
+#: src/battle.c:1170
 msgid "         CLICK   CLICK   POP  . . ."
 msgstr "         ????   ????   ????  . . ."
 
-#: src/battle.c:1166
+#: src/battle.c:1171
 msgid " No response, sir!"
 msgstr " ??? ??????, ???!"
 
-#: src/battle.c:1199
+#: src/battle.c:1204
 #, c-format
 msgid "%d unit hit on "
 msgstr "%d ?????? ??????? ??????? ?? "
 
-#: src/battle.c:1202
+#: src/battle.c:1207
 msgid "Very small hit on "
 msgstr "????? ?????? ???? ?? "
 
-#: src/battle.c:1216
+#: src/battle.c:1221
 msgid "***Mr. Spock-  \"Captain, the vessel at "
 msgstr "***?????? ????- \"???????, ??????? ?? "
 
-#: src/battle.c:1218
+#: src/battle.c:1223
 msgid "   has just lost its firepower.\""
 msgstr "   ??????? ??????????????.\""
 
-#: src/events.c:53
+#: src/events.c:83
 msgid "Lt. Uhura- \"Captain, the sub-space radio is working and"
 msgstr "??. ?????- \"???????, ??????????? ????? ???????? ?"
 
-#: src/events.c:54
+#: src/events.c:84
 msgid "   surveillance reports are coming in."
 msgstr "   ????????? ?????????? ?? ?????? ??????????."
 
-#: src/events.c:61
+#: src/events.c:91
 msgid "   The star chart is now up to date.\""
 msgstr "   ???????? ????? ?????????."
 
-#: src/events.c:114
+#: src/events.c:144
 msgid " caught in long range tractor beam--"
 msgstr " ?????? ???????????? ????????? ?????--"
 
-#: src/events.c:126
+#: src/events.c:156
 msgid "Galileo, left on the planet surface, is captured"
 msgstr "???????, ?????????? ?? ???????, ???????"
 
-#: src/events.c:127
+#: src/events.c:157
 msgid "by aliens and made into a flying McDonald's."
 msgstr "?????????????? ? ????????? ? ??????????? ???????????."
 
-#: src/events.c:132
+#: src/events.c:162
 msgid "Galileo, left on the planet surface, is well hidden."
 msgstr "???????, ?????????? ?? ???????, ?????? ???????."
 
-#: src/events.c:145
+#: src/events.c:175
 msgid " is pulled to "
 msgstr " ??????? ? "
 
-#: src/events.c:150
+#: src/events.c:180
 msgid "(Remainder of rest/repair period cancelled.)"
 msgstr "(??????? ??????? ??????/??????? ???????.)"
 
-#: src/events.c:158
+#: src/events.c:188
 msgid "(Shields not currently useable.)"
 msgstr "(?????? ? ????????? ?????????.)"
 
-#: src/events.c:211
+#: src/events.c:242
 msgid "   reports that it is under attack and that it can"
 msgstr "   ????????, ??? ??? ????????? ? ??????"
 
-#: src/events.c:212
+#: src/events.c:243
 #, c-format
 msgid "   hold out only until stardate %d"
 msgstr "   ???????????? ?? ???? %d.\""
 
-#: src/events.c:257
+#: src/events.c:288
 msgid "Spock-  \"Captain, I believe the starbase has been destroyed.\""
 msgstr "????- \"???????, ? ????????, ??? ???? ??????????.\""
 
-#: src/events.c:265
+#: src/events.c:296
 msgid "Lt. Uhura-  \"Captain, Starfleet Command reports that"
 msgstr "??. ?????- \"???????, ???? ????????? ????? ????????"
 
-#: src/events.c:266
+#: src/events.c:297
 msgid "   the starbase in "
 msgstr "   ???? ? "
 
-#: src/events.c:268
+#: src/events.c:299
 msgid " has been destroyed by"
 msgstr " ??????????"
 
-#: src/events.c:269
+#: src/events.c:300
 msgid "the Klingon Super-Commander"
 msgstr "????-????? ?????????"
 
-#: src/events.c:270
+#: src/events.c:301
 msgid "a Klingon Commander"
 msgstr "?????????? ?????????"
 
-#: src/events.c:313
+#: src/events.c:344
 msgid "Lt. Uhura-  \"The deep space probe "
 msgstr "??. ?????- \"???????????? ??????????? ?????? "
 
-#: src/events.c:315
+#: src/events.c:346
 msgid "has left the galaxy"
 msgstr "???????? ?????????"
 
-#: src/events.c:317
+#: src/events.c:348
 msgid "is no longer transmitting"
 msgstr "?????? ?? ????????"
 
-#: src/events.c:327
+#: src/events.c:358
 msgid "Lt. Uhura-  \"The deep space probe is now in "
 msgstr "??. ?????- \"???????????? ??????????? ?????? ?????? ? "
 
-#: src/events.c:364
+#: src/events.c:511
 msgid "How long? "
 msgstr "????? ????? "
 
-#: src/events.c:374
+#: src/events.c:521
 msgid "Are you sure? "
 msgstr "?? ???????? "
 
-#: src/events.c:384
+#: src/events.c:531
 #, c-format
 msgid "%d stardates left."
 msgstr "???????? %d ????."
 
-#: src/events.c:426 src/events.c:465
+#: src/events.c:576 src/events.c:615
 msgid " novas."
 msgstr " ??????????."
 
-#: src/events.c:498
+#: src/events.c:647
 msgid "***Starship buffeted by nova."
 msgstr "***????????? ????????? ??????? ??????."
 
-#: src/events.c:506
+#: src/events.c:655
 msgid "***Shields knocked out."
 msgstr "***?????? ???????."
 
-#: src/events.c:536
+#: src/events.c:685
 msgid " damaged"
 msgstr " ?????????"
 
-#: src/events.c:544
+#: src/events.c:693
 msgid ", blasted into "
 msgstr ", ?????????? ? "
 
-#: src/events.c:555
+#: src/events.c:704
 msgid ", buffeted to "
 msgstr " ??????? ? ?????? ????."
 
-#: src/events.c:584
+#: src/events.c:733
 msgid "Force of nova displaces starship."
 msgstr "????? ?????? ??????? ?????????."
 
-#: src/events.c:641
+#: src/events.c:790
 #, c-format
 msgid "Message from Starfleet Command       Stardate %.2f"
 msgstr "????????? ?? ????? ????????? ?????       ???? %.2f"
 
-#: src/events.c:642
+#: src/events.c:791
 #, c-format
 msgid "     Supernova in %s; caution advised."
 msgstr "     ????? ?????????? ? %s; ?????????? ????????????."
 
-#: src/events.c:669
+#: src/events.c:820
 msgid "***Incipient supernova detected at "
 msgstr "***???????????????? ????????? ?????????? ? "
 
-#: src/events.c:673
+#: src/events.c:823
 msgid "Emergency override attempts t"
 msgstr "????????? ???????? ?"
 
-#: src/events.c:744
+#: src/events.c:893
 msgid "Lucky you!"
 msgstr "???????!"
 
-#: src/events.c:745
+#: src/events.c:894
 #, c-format
 msgid "A supernova in %s has just destroyed the last Klingons."
 msgstr "?????????? ? %s ??? ??? ?????????? ????????? ?????????."
@@ -886,7 +888,7 @@
 msgid "Your energy supply is exhausted."
 msgstr "????????? ??????? ???????."
 
-#: src/finish.c:187 src/finish.c:206 src/finish.c:225
+#: src/finish.c:187 src/finish.c:206 src/finish.c:225 src/moving.c:726
 msgid "The "
 msgstr " "
 
@@ -924,7 +926,7 @@
 
 #: src/finish.c:209
 msgid "...Not even cinders remain..."
-msgstr "...? ??????? ????? ?? ????????..."
+msgstr "...? ????????-?? ?? ????????..."
 
 #: src/finish.c:212
 msgid "You have been captured by the Klingons. If you still"
@@ -1299,3 +1301,1468 @@
 "%.2f\n"
 msgstr ""
 "                                                    ????????? ? ????:  %.2f\n"
+
+#: src/io.c:92
+msgid "[ANOUNCEMENT ARRIVING...]"
+msgstr "[????????? ?????????...]"
+
+#: src/io.c:94
+msgid "[IMPORTANT ANNOUNCEMENT ARRIVING -- PRESS ENTER TO CONTINUE]"
+msgstr "[????????? ?????? ????????? -- ??????? ???? ??? ???????????]"
+
+#: src/io.c:98
+msgid "[CONTINUE?]"
+msgstr "[???????????]"
+
+#: src/io.c:100
+msgid "[PRESS ENTER TO CONTINUE]"
+msgstr "[??????? ???? ??? ???????????]"
+
+#: src/io.c:383
+#, c-format
+msgid "Track for torpedo number %d-  "
+msgstr "?????? ??????? ????? %d- "
+
+#: src/io.c:387
+msgid "Torpedo track- "
+msgstr "?????? ???????- "
+
+#: src/moving.c:16
+msgid "Helmsman Sulu- \"Leaving standard orbit.\""
+msgstr "??????? ????- \"?????? ? ??????.\""
+
+#: src/moving.c:103
+msgid "YOU HAVE ATTEMPTED TO CROSS THE NEGATIVE ENERGY BARRIER"
+msgstr "?? ????????? ???????? ????????????? ?????????????? ??????"
+
+#: src/moving.c:104
+msgid "AT THE EDGE OF THE GALAXY.  THE THIRD TIME YOU TRY THIS,"
+msgstr "?? ??????? ?????????.  ??? ???? ??? ??? ????????,"
+
+#: src/moving.c:105
+msgid "YOU WILL BE DESTROYED."
+msgstr "? ??????? ?? ????."
+
+#: src/moving.c:114
+#, c-format
+msgid "Entering %s."
+msgstr "?????? ? %s."
+
+#: src/moving.c:145
+msgid " pulled into black hole at "
+msgstr " ??????? ? ?????? ???? ? "
+
+#: src/moving.c:167
+msgid " encounters Tholian web at "
+msgstr " ????????? ?????????? ???? ? "
+
+#: src/moving.c:169
+msgid " blocked by object at "
+msgstr " ?????????? ???????? ? "
+
+#: src/moving.c:172
+msgid "Emergency stop required "
+msgstr "?????????? ????????? ??????????? "
+
+#: src/moving.c:173
+#, c-format
+msgid "%2d units of energy."
+msgstr "%2d ?????? ???????."
+
+#: src/moving.c:221
+msgid "Already docked."
+msgstr "? ??? ??? ????????????."
+
+#: src/moving.c:225
+msgid "You must first leave standard orbit."
+msgstr "??????? ?? ?????? ???? ? ??????."
+
+#: src/moving.c:230
+msgid " not adjacent to base."
+msgstr " ??? ???????????? ????."
+
+#: src/moving.c:234
+msgid "Docked."
+msgstr "????????????."
+
+#: src/moving.c:243
+msgid "Lt. Uhura- \"Captain, an important message from the starbase:\""
+msgstr "??. ?????- \"???????, ??? ?????? ????????? ? ????:\""
+
+#: src/moving.c:271
+msgid "Dummy! You can't leave standard orbit until you"
+msgstr "?????! ?? ?? ?????? ???? ? ?????? ???? ?? ??"
+
+#: src/moving.c:272
+msgid "are back aboard the "
+msgstr "????????? ?? ???? ??????? "
+
+#: src/moving.c:281
+msgid "Computer damaged; manual navigation only"
+msgstr "????????? ??????; ?????? ?????? ?????????? ????????"
+
+#: src/moving.c:283
+msgid "Computer damaged; manual movement only"
+msgstr "????????? ??????; ????????? ??????????? ???????"
+
+#: src/moving.c:298
+msgid "Manual or automatic- "
+msgstr "?????? ??? ??????????????- "
+
+#: src/moving.c:321
+msgid "(Manual navigation assumed.)"
+msgstr "(???????????? ?????? ??????????.)"
+
+#: src/moving.c:323
+msgid "(Manual movement assumed.)"
+msgstr "(???????????? ?????? ?????????.)"
+
+#: src/moving.c:332
+msgid "Target quadrant or quadrant&sector- "
+msgstr "???????? ?????????? ??? ????????&??????- "
+
+#: src/moving.c:334
+msgid "Destination sector or quadrant&sector- "
+msgstr "?????? ?????????? ??? ????????&??????- "
+
+#: src/moving.c:388
+#, c-format
+msgid "Helmsman Sulu- \"Course locked in for %s.\""
+msgstr "??????? ????- \"???? ???? ?? %s.\""
+
+#: src/moving.c:392
+msgid "Ensign Chekov- \"Course laid in, Captain.\""
+msgstr "????????? ?????- \"???? ????, ???????.\""
+
+#: src/moving.c:399
+msgid "X and Y displacements- "
+msgstr "?????????? ?? X ? Y- "
+
+#: src/moving.c:424
+msgid "Helmsman Sulu- \"Aye, Sir.\""
+msgstr "??????? ????- \"???, ???.\""
+
+#: src/moving.c:444 src/moving.c:502
+msgid "Engineer Scott- \"The impulse engines are damaged, Sir.\""
+msgstr "??????? ????- \"?????????? ????????? ??????????, ???.\""
+
+#: src/moving.c:459
+msgid "First Officer Spock- \"Captain, the impulse engines"
+msgstr "?????? ?????? ????- \"???????, ?????????? ?????????"
+
+#: src/moving.c:460
+msgid "require 20.0 units to engage, plus 100.0 units per"
+msgstr "??????? 20.0 ?????? ??????? ??? ???????, ???? 100.0 ?????? ??"
+
+#: src/moving.c:462
+#, c-format
+msgid "quadrant.  We can go, therefore, a maximum of %d"
+msgstr "????????.  ?????????????, ?? ???????? ???????? %d"
+
+#: src/moving.c:464
+msgid " quadrants.\""
+msgstr " ??????????.\""
+
+#: src/moving.c:467
+msgid "quadrant.  They are, therefore, useless.\""
+msgstr "????????.  ????? ??????? ??? ??????????.\""
+
+#: src/moving.c:475
+msgid "First Officer Spock- \"Captain, our speed under impulse"
+msgstr "?????? ?????? ????- \"???????, ???? ???????? ?? ??????????"
+
+#: src/moving.c:476
+msgid "power is only 0.95 sectors per stardate. Are you sure"
+msgstr "???? ????? 0.95 ???????? ? ????. ?? ???????,"
+
+#: src/moving.c:477
+msgid "we dare spend the time?\" "
+msgstr "??? ?? ????? ??????? ??????? ????????\" "
+
+#: src/moving.c:508
+msgid "Engineer Scott- \"Sorry, Captain. Until this damage"
+msgstr "??????? ????- \"????????, ???????. ???? ??? ????????????? ??"
+
+#: src/moving.c:509
+msgid "  is repaired, I can only give you warp 4.\""
+msgstr "  ?????????, ? ???? ?????? ?????????? ??? ???????? 4.\""
+
+#: src/moving.c:529
+msgid "We can't do it, Captain. We don't have enough energy."
+msgstr "?? ??????, ???????. ? ??? ?? ?????? ???????."
+
+#: src/moving.c:532
+#, c-format
+msgid "We don't have enough energy, but we could do it at warp %d"
+msgstr "? ??? ?? ?????????? ???????, ?? ?? ????? ?? ??????? ?? ??? ???????? %d"
+
+#: src/moving.c:535
+msgid "if you'll lower the shields."
+msgstr ", ???? ?????? ?? ???????? ??????."
+
+#: src/moving.c:542
+msgid "We haven't the energy to go that far with the shields up."
+msgstr ""
+"? ??? ??? ??????? ????? ?????? ??? ??????, ?? ??? ? ? ???????? ???????."
+
+#: src/moving.c:550
+msgid "First Officer Spock- \"Captain, I compute that such"
+msgstr "?????? ?????? ????- \"???????, ? ?????? ??? ?????"
+
+#: src/moving.c:551
+#, c-format
+msgid "  a trip would require approximately %2.0f"
+msgstr "  ????? ????????? ???????? %2.0f"
+
+#: src/moving.c:553
+msgid " percent of our"
+msgstr " ????????? ?? ??????"
+
+#: src/moving.c:554
+msgid "  remaining time.  Are you sure this is wise?\" "
+msgstr " ??????? ???????.  ?? ??????? ??? ??? ????????\" "
+
+#: src/moving.c:619
+msgid "  Scott here.  The warp engines are damaged."
+msgstr "  ???? ?? ?????.  ??????????????????? ????????? ???????."
+
+#: src/moving.c:620
+msgid "  We'll have to reduce speed to warp 4."
+msgstr "  ???????? ??????? ???????? ?? 4."
+
+#: src/moving.c:635
+msgid "Warp factor- "
+msgstr "????????- "
+
+#: src/moving.c:643
+msgid "Warp engines inoperative."
+msgstr "??????????????????? ????????? ?? ????????."
+
+#: src/moving.c:647
+msgid "Engineer Scott- \"I'm doing my best, Captain,"
+msgstr "??????? ????- \"? ????? ??? ??? ????, ???????,"
+
+#: src/moving.c:648
+msgid "  but right now we can only go warp 4.\""
+msgstr "  ?? ?????? ?? ????? ???? ?????? ???????? 4."
+
+#: src/moving.c:652
+msgid "Helmsman Sulu- \"Our top speed is warp 10, Captain.\""
+msgstr "????????? ????- \"???? ???????????? ???????? - 10, ???????.\""
+
+#: src/moving.c:656
+msgid "Helmsman Sulu- \"We can't go below warp 1, Captain.\""
+msgstr "????????? ????- \"?? ?? ????? ?????????? ???????? ???? 1, ???????.\""
+
+#: src/moving.c:663
+#, c-format
+msgid "Helmsman Sulu- \"Warp factor %d, Captain.\""
+msgstr "????????? ????- \"???????? %d, ???????.\""
+
+#: src/moving.c:668
+msgid "Engineer Scott- \"Aye, but our maximum safe speed is warp 6.\""
+msgstr "??????? ????- \"???, ???? ????????? ?????????? ???????? - 6.\""
+
+#: src/moving.c:672
+msgid "Engineer Scott- \"Aye, Captain, we'll try it.\""
+msgstr "??????? ????- \"??? ???????, ?????????.\""
+
+#: src/moving.c:675
+msgid "Engineer Scott- \"Aye, Captain, but our engines may not take it.\""
+msgstr "??????? ????- \"??? ???????, ?? ???? ?????? ????? ?? ??????????.\""
+
+#: src/moving.c:690
+msgid "Scotty rushes to the transporter controls."
+msgstr "????? ????????? ? ?????????? ?????????????."
+
+#: src/moving.c:692
+msgid "But with the shields up it's hopeless."
+msgstr "?? ? ???????? ??????? ??? ??????????."
+
+#: src/moving.c:695
+msgid "His desperate attempt to rescue you . . ."
+msgstr "??? ????????? ??????? ?????? ??? . . ."
+
+#: src/moving.c:697 src/moving.c:993
+msgid "fails."
+msgstr "???????????."
+
+#: src/moving.c:701
+msgid "SUCCEEDS!"
+msgstr "?????????? ???????!"
+
+#: src/moving.c:704
+msgid "The crystals mined were "
+msgstr "????????? ????????? "
+
+#: src/moving.c:706
+msgid "lost."
+msgstr "???????."
+
+#: src/moving.c:709
+msgid "saved."
+msgstr "???????????."
+
+#: src/moving.c:728
+msgid " has stopped in a quadrant containing"
+msgstr " ??????????? ? ????????? ??"
+
+#: src/moving.c:729
+msgid "   a supernova."
+msgstr "   ??????????."
+
+#: src/moving.c:732
+msgid "***Emergency automatic override attempts to hurl "
+msgstr "***????????? ???????? ??????? "
+
+#: src/moving.c:735
+msgid "safely out of quadrant."
+msgstr "?? ?????????."
+
+#: src/moving.c:741
+msgid "Warp engines damaged."
+msgstr "??????????????????? ????????? ??????????."
+
+#: src/moving.c:747
+#, c-format
+msgid "Warp factor set to %d"
+msgstr "???????? ??????????? ?? %d"
+
+#: src/moving.c:761
+msgid "Insufficient energy to leave quadrant."
+msgstr "???????????? ??????? ????? ???????? ????????."
+
+#: src/moving.c:775
+msgid "***TIME WARP ENTERED."
+msgstr "***??????????? ?????????? ??????????."
+
+#: src/moving.c:778
+#, c-format
+msgid "You are traveling backwards in time %d stardates."
+msgstr "?? ????????????? ????? ?? ??????? ?? %d ????."
+
+#: src/moving.c:803
+msgid "Checkov-  \"Security reports the Galileo has disappeared, Sir!"
+msgstr "?????- \"?????? ??????????? ? ??????? ???????, ???!"
+
+#: src/moving.c:811
+msgid "Checkov-  \"Security reports the Galileo has reappeared in the dock!\""
+msgstr "?????- \"?????? ?????????? ? ????????? ??????? ? ????!\""
+
+#: src/moving.c:818
+msgid "Spock has reconstructed a correct star chart from memory"
+msgstr "???? ??????????? ???????? ????? ?? ??????"
+
+#: src/moving.c:823
+#, c-format
+msgid "You are traveling forward in time %d stardates."
+msgstr "?? ????????????? ?????? ?? ??????? ?? %d ????."
+
+#: src/moving.c:841
+msgid "Engineer Scott- \"We have no more deep space probes, Sir.\""
+msgstr ""
+"??????? ????- \"? ??? ?????? ??? ???????????? ??????????? ?????, ???.\""
+
+#: src/moving.c:843
+msgid "Ye Faerie Queene has no deep space probes."
+msgstr "?? ????????? ???????? ??? ???????????? ??????????? ?????."
+
+#: src/moving.c:849
+msgid "Engineer Scott- \"The probe launcher is damaged, Sir.\""
+msgstr "??????? ????- \"???????? ??????? ??????, ???.\""
+
+#: src/moving.c:856
+msgid "Spock-  \"Records show the previous probe has not yet"
+msgstr "????- \"??????? ? ?????????? ?????? ??????? ? ???, ??? ??? ??? ??"
+
+#: src/moving.c:857
+msgid "   reached its destination.\""
+msgstr "   ???????? ?????? ??????????.\""
+
+#: src/moving.c:860
+msgid "Uhura- \"The previous probe is still reporting data, Sir.\""
+msgstr "?????- \"?????????? ?????? ??? ??? ???????? ???????, ???.\""
+
+#: src/moving.c:867
+#, c-format
+msgid "%d probe left."
+msgstr "???????? %d ???????."
+
+#: src/moving.c:867
+#, c-format
+msgid "%d probes left."
+msgstr "???????? %d ??????."
+
+#: src/moving.c:868
+msgid "Are you sure you want to fire a probe? "
+msgstr "?? ???????, ??? ?????? ????????? ??????? "
+
+#: src/moving.c:878
+msgid "Arm NOVAMAX warhead? "
+msgstr "????????? ??????? ???????????? "
+
+#: src/moving.c:899
+msgid "Ensign Chekov-  \"The deep space probe is launched, Captain.\""
+msgstr ""
+"????????? ?????- \"???????????? ??????????? ?????? ????????, ???????.\""
+
+#: src/moving.c:913
+msgid "Lt. Uhura-  \"But Captain, we're already docked.\""
+msgstr "??. ?????- \"?? ???????, ?? ???? ??? ???????????????.\""
+
+#: src/moving.c:917
+msgid "Subspace radio damaged."
+msgstr "??????????????????? ????? ??????????."
+
+#: src/moving.c:921
+msgid "Lt. Uhura-  \"Captain, I'm not getting any response from Starbase.\""
+msgstr "??. ?????- \"???????, ? ?? ??????? ??????? ???????? ?? ????.\""
+
+#: src/moving.c:925
+msgid "You must be aboard the "
+msgstr "?? ?????? ???? ?? ????? ??????? "
+
+#: src/moving.c:952
+#, c-format
+msgid "Starbase in %s responds--"
+msgstr "???? ?? %s ????????--"
+
+#: src/moving.c:955
+msgid " dematerializes."
+msgstr " ??????????????????."
+
+#: src/moving.c:968
+msgid "You have been lost in space..."
+msgstr "?? ??????? ? ??????????? ???????..."
+
+#: src/moving.c:976
+msgid "1st"
+msgstr "1-??"
+
+#: src/moving.c:977
+msgid "2nd"
+msgstr "2-??"
+
+#: src/moving.c:978
+msgid "3rd"
+msgstr "3-?"
+
+#: src/moving.c:980
+msgid " attempt to re-materialize "
+msgstr " ??????? ?????????????? "
+
+#: src/moving.c:1007
+msgid "succeeds."
+msgstr "?????????? ???????."
+
+#: src/moving.c:1011
+msgid "Lt. Uhura-  \"Captain, we made it!\""
+msgstr "??. ?????- \"???????, ?????????!\""
+
+#: src/planets.c:33
+msgid "Spock-  \"Planet report follows, Captain.\""
+msgstr "????- \"??? ?????????? ? ???????, ???????.\""
+
+#: src/planets.c:47
+msgid "   class "
+msgstr "   ????? "
+
+#: src/planets.c:50
+msgid "no "
+msgstr "??????????? "
+
+#: src/planets.c:51
+msgid "dilithium crystals present."
+msgstr "???????? ?????????? ???????."
+
+#: src/planets.c:53
+msgid "    Shuttle Craft Galileo on surface."
+msgstr "    ?????? ??????? ?? ???????????."
+
+#: src/planets.c:56
+msgid "No information available."
+msgstr "??? ??????????."
+
+#: src/planets.c:64
+msgid "Already in standard orbit."
+msgstr "? ??? ??? ?? ??????.\""
+
+#: src/planets.c:68
+msgid "Both warp and impulse engines damaged."
+msgstr "??????????????????? ????????? ???????, ????? ??? ? ??????????."
+
+#: src/planets.c:73
+msgid " not adjacent to planet."
+msgstr " ??????? ?????? ?? ???????."
+
+#: src/planets.c:78
+msgid "Helmsman Sulu-  \"Entering standard orbit, Sir.\""
+msgstr "??????? ????- \"??????? ?? ??????, ???.\""
+
+#: src/planets.c:82
+#, c-format
+msgid "Sulu-  \"Entered orbit at altitude %.2f kilometers.\""
+msgstr "????- \"????? ?? ?????? ?? ?????? %.2f kilometers.\""
+
+#: src/planets.c:92
+msgid "Short range sensors damaged."
+msgstr "??????? ???????? ?????? ???????."
+
+#: src/planets.c:96
+msgid "Spock- \"No planet in this quadrant, Captain.\""
+msgstr "????- \"? ???? ????????? ??? ??????, ???????.\""
+
+#: src/planets.c:100
+#, c-format
+msgid "Spock-  \"Sensor scan for %s-"
+msgstr "????- \"???????????? %s-"
+
+#: src/planets.c:102
+#, c-format
+msgid "         Planet at %s is of class %s."
+msgstr "         ??????? ?? %s ?????? %s."
+
+#: src/planets.c:106
+msgid "         Sensors show Galileo still on surface."
+msgstr "         ??????? ??????????, ??? ??????? ??? ??? ?? ???????????."
+
+#: src/planets.c:107
+msgid "         Readings indicate"
+msgstr "         ????????????"
+
+#: src/planets.c:108
+msgid " no"
+msgstr " ??"
+
+#: src/planets.c:109
+msgid " dilithium crystals present.\""
+msgstr " ?????????? ???????? ?????????? ???????."
+
+#: src/planets.c:119
+msgid "Transporter damaged."
+msgstr "??????????? ?? ????????."
+
+#: src/planets.c:122
+msgid "Spock-  \"May I suggest the shuttle craft, Sir?\" "
+msgstr "????- \"???? ? ???????????? ??????, ????\""
+
+#: src/planets.c:129 src/planets.c:306
+msgid " not in standard orbit."
+msgstr " ?? ?? ??????."
+
+#: src/planets.c:133
+msgid "Impossible to transport through shields."
+msgstr "?????????? ???????????????? ????? ???????? ????."
+
+#: src/planets.c:137 src/planets.c:322
+msgid "Spock-  \"Captain, we have no information on this planet"
+msgstr "????- \"???????, ? ??? ??? ?????????? ?? ???? ???????"
+
+#: src/planets.c:138 src/planets.c:323
+msgid "  and Starfleet Regulations clearly state that in this situation"
+msgstr " ? ?????????? ????????? ????? ????? ???????????? ? ????? ????????"
+
+#: src/planets.c:139
+msgid "  you may not go down.\""
+msgstr " ?? ?????????? ?? ???????????.\""
+
+#: src/planets.c:145
+msgid "Spock-  \"Wouldn't you rather take the Galileo?\" "
+msgstr "????- \"????? ?? ??? ?? ??????????? ????????\""
+
+#: src/planets.c:150
+msgid "Your crew hides the Galileo to prevent capture by aliens."
+msgstr "???? ??????? ?????? ???????, ????? ?? ?? ???????? ?????????????."
+
+#: src/planets.c:152
+msgid "Landing party assembled, ready to beam up."
+msgstr "????????? ????? ??????, ?????? ? ????????????."
+
+#: src/planets.c:154
+msgid "Kirk whips out communicator..."
+msgstr "???? ???????? ????????????..."
+
+#: src/planets.c:155
+msgid "BEEP  BEEP  BEEP"
+msgstr "???  ???  ???"
+
+#: src/planets.c:157
+msgid "\"Kirk to enterprise-  Lock on coordinates...energize.\""
+msgstr "\"???? ???????????- ?????????? ??????????...???????.\""
+
+#: src/planets.c:162
+msgid "Spock-  \"Captain, I fail to see the logic in"
+msgstr "????- \"???????, ? ?? ???? ??????"
+
+#: src/planets.c:163
+msgid "  exploring a planet with no dilithium crystals."
+msgstr " ??????????? ???????, ?? ??????? ??? ?????????? ???????."
+
+#: src/planets.c:164 src/planets.c:254
+msgid "  Are you sure this is wise?\" "
+msgstr "  ?? ??????? ??? ??? ????????\" "
+
+#: src/planets.c:170
+msgid "Scotty-  \"Transporter room ready, Sir.\""
+msgstr "?????- \"??????????? ?????, ???.\""
+
+#: src/planets.c:172
+msgid "Kirk and landing party prepare to beam down to planet surface."
+msgstr "???? ? ????????? ????? ????????? ? ???????????? ?? ???????."
+
+#: src/planets.c:174
+msgid "Kirk-  \"Energize.\""
+msgstr "????- \"???????.\""
+
+#: src/planets.c:183
+msgid "Scotty-  \"Oh my God!  I've lost them.\""
+msgstr "?????- \"? ???!  ? ?? ???????.\""
+
+#: src/planets.c:189
+msgid "Transport complete."
+msgstr "??????????????? ?????????."
+
+#: src/planets.c:192
+msgid "The shuttle craft Galileo is here!"
+msgstr "?????? ??????? ?????!"
+
+#: src/planets.c:207
+msgid "Mining party not on planet."
+msgstr "?????????? ?? ??????? ???."
+
+#: src/planets.c:211
+msgid "This planet has already been strip-mined for dilithium."
+msgstr "??? ??????? ??? ???????? ?? ?????; ??????? ??? ?????? ???."
+
+#: src/planets.c:215
+msgid "No dilithium crystals on this planet."
+msgstr "?? ???? ??????? ??????? ???."
+
+#: src/planets.c:219
+msgid "You've already mined enough crystals for this trip."
+msgstr "?? ??????? ??? ?????????? ?????????? ?? ??? ???????."
+
+#: src/planets.c:223
+msgid "With all those fresh crystals aboard the "
+msgstr "? ??? ??? ????? ?????????? ?? ?????, ???"
+
+#: src/planets.c:226
+msgid "there's no reason to mine more at this time."
+msgstr "??? ?????? ???????? ???."
+
+#: src/planets.c:231
+msgid "Mining operation complete."
+msgstr "?????? ?????????? ?????????."
+
+#: src/planets.c:243
+msgid "No dilithium crystals available."
+msgstr "??? ?????????? ???????."
+
+#: src/planets.c:247
+msgid "Spock-  \"Captain, Starfleet Regulations prohibit such an operation"
+msgstr "????- \"???????, ?????????? ????????? ????? ????????? ??? ????????,"
+
+#: src/planets.c:248
+msgid "  except when condition Yellow exists."
+msgstr " ????? ??????? ??????? ?????????."
+
+#: src/planets.c:251
+msgid "Spock- \"Captain, I must warn you that loading"
+msgstr "????- \"???????, ? ?????? ???????????? ???, ??? ??????"
+
+#: src/planets.c:252
+msgid "  raw dilithium crystals into the ship's power"
+msgstr " ?????????????? ????????? ??????? ? ??????????????"
+
+#: src/planets.c:253
+msgid "  system may risk a severe explosion."
+msgstr " ??????? ??????? ??????, ? ????? ???????? ? ???????? ??????."
+
+#: src/planets.c:260
+msgid "Engineering Officer Scott-  \"(GULP) Aye Sir."
+msgstr "???????-??????? ????- \"(?????? ??????) ??? ???."
+
+#: src/planets.c:261
+msgid "  Mr. Spock and I will try it.\""
+msgstr "  ?? ? ???????? ?????? ?????????.\""
+
+#: src/planets.c:263
+msgid "Spock-  \"Crystals in place, Sir."
+msgstr "????- \"????????? ?? ?????, ???."
+
+#: src/planets.c:264
+msgid "  Ready to activate circuit.\""
+msgstr "  ????? ???????? ????.\""
+
+#: src/planets.c:266
+msgid "Scotty-  \"Keep your fingers crossed, Sir!\""
+msgstr "?????-  \"????????? ??????, ???!\""
+
+#: src/planets.c:269
+msgid "  \"Activating now! - - No good!  It's***"
+msgstr "  \"??? ????????! - - ?????!  ???***"
+
+#: src/planets.c:271 src/planets.c:469
+msgid "***RED ALERT!  RED A*L********************************"
+msgstr "***???????! ???*??***********************************"
+
+#: src/planets.c:274 src/planets.c:472
+msgid "******************   KA-BOOM!!!!   *******************"
+msgstr "******************   ??-???!!!!    ********************"
+
+#: src/planets.c:280
+msgid "  \"Activating now! - - "
+msgstr "  \"??? ????????! - - "
+
+#: src/planets.c:281
+msgid "The instruments"
+msgstr "????????"
+
+#: src/planets.c:282
+msgid "   are going crazy, but I think it's"
+msgstr "   ????? ? ???, ?? ? ?????, ??? ???"
+
+#: src/planets.c:283
+msgid "   going to work!!  Congratulations, Sir!\""
+msgstr "   ?????? ????????!!  ??????????, ???!\""
+
+#: src/planets.c:295
+msgid "Ye Faerie Queene has no shuttle craft bay to dock it at."
+msgstr "?? ????????? ???????? ??? ????????? ??? ???????? ? ????????."
+
+#: src/planets.c:297
+msgid "Ye Faerie Queene had no shuttle craft."
+msgstr "?? ????????? ???????? ??? ???????."
+
+#: src/planets.c:300
+msgid "The Galileo is damaged."
+msgstr "??????? ?????????."
+
+#: src/planets.c:301
+msgid "Shuttle craft is now serving Big Macs."
+msgstr "?????? ???????????? ??? ???????? ??? ?????."
+
+#: src/planets.c:310
+msgid "Shuttle craft not currently available."
+msgstr "?????? ?????? ??????????."
+
+#: src/planets.c:314
+msgid "You will have to beam down to retrieve the shuttle craft."
+msgstr "??? ???????? ?????????? ?? ??????????? ????? ??????? ??????."
+
+#: src/planets.c:318
+msgid "Shuttle craft cannot pass through shields."
+msgstr "?????? ?? ????? ????????? ????? ??????."
+
+#: src/planets.c:324
+msgid "  you may not fly down.\""
+msgstr " ??? ?? ??????? ??????? ????.\""
+
+#: src/planets.c:329
+msgid "First Officer Spock-  \"Captain, I compute that such"
+msgstr "?????? ?????? ????- \"???????, ? ?????? ??? ?????"
+
+#: src/planets.c:330
+#, c-format
+msgid "  a maneuver would require approximately %2d%% of our"
+msgstr "  ?????? ????????? ???????? %2d%%"
+
+#: src/planets.c:332
+msgid "remaining time."
+msgstr "??????????? ???????."
+
+#: src/planets.c:333
+msgid "Are you sure this is wise?\" "
+msgstr "?? ??????? ??? ??? ????????\" "
+
+#: src/planets.c:344
+msgid "Spock-  \"Would you rather use the transporter?\" "
+msgstr "????- \"?? ????? ?? ??? ??????????????? ??????????????\" "
+
+#: src/planets.c:349
+msgid "Shuttle crew"
+msgstr "?????? ???????"
+
+#: src/planets.c:352
+msgid "Rescue party"
+msgstr "???????????? ???????"
+
+#: src/planets.c:353
+msgid " boards Galileo and swoops toward planet surface."
+msgstr " ??????? ? ??????? ? ???????????? ? ??????????? ???????."
+
+#: src/planets.c:358 src/planets.c:379
+msgid "Trip complete."
+msgstr "????? ???????."
+
+#: src/planets.c:363
+msgid "You and your mining party board the"
+msgstr "?? ? ??? ????? ??????? ?"
+
+#: src/planets.c:364
+msgid "shuttle craft for the trip back to the Enterprise."
+msgstr "?????? ??? ?????? ? ???????????."
+
+#: src/planets.c:366
+msgid "The short hop begins . . ."
+msgstr "??????? ???????? ??????? . . ."
+
+#: src/planets.c:386
+msgid "Mining party assembles in the hangar deck,"
+msgstr "?????? ?????????? ????????? ? ?????? ??????,"
+
+#: src/planets.c:387
+msgid "ready to board the shuttle craft \"Galileo\"."
+msgstr "??? ?????? ??????? ? ?????? \"???????\"."
+
+#: src/planets.c:389
+msgid "The hangar doors open; the trip begins."
+msgstr "????? ?????? ???????; ????? ???????."
+
+#: src/planets.c:397
+msgid "Trip complete"
+msgstr "????? ???????"
+
+#: src/planets.c:410
+msgid "Ye Faerie Queene has no death ray."
+msgstr "?? ????????? ???????? ??? ???? ??????."
+
+#: src/planets.c:414
+msgid "Sulu-  \"But Sir, there are no enemies in this quadrant.\""
+msgstr "????- \"?? ???, ? ???? ????????? ??? ??????.\""
+
+#: src/planets.c:418
+msgid "Death Ray is damaged."
+msgstr "??? ?????? ?????????."
+
+#: src/planets.c:421
+msgid "Spock-  \"Captain, the 'Experimental Death Ray'"
+msgstr "????- \"???????, '????????????????? ??? ??????'"
+
+#: src/planets.c:422
+msgid "  is highly unpredictible.  Considering the alternatives,"
+msgstr "  ???????? ?????????????.  ??????? ??? ????????????,"
+
+#: src/planets.c:423
+msgid "  are you sure this is wise?\" "
+msgstr " ?? ??????? ??? ??? ????????\" "
+
+#: src/planets.c:425
+msgid "Spock-  \"Acknowledged.\""
+msgstr "????- \"????.\""
+
+#: src/planets.c:428
+msgid "WHOOEE ... WHOOEE ... WHOOEE ... WHOOEE"
+msgstr ""
+
+#: src/planets.c:430
+msgid "Crew scrambles in emergency preparation."
+msgstr "??????? ???????????, ???????? ??????? ?????????????."
+
+#: src/planets.c:431
+msgid "Spock and Scotty ready the death ray and"
+msgstr "???? ? ????? ???????? ??? ?????? ?"
+
+#: src/planets.c:432
+msgid "prepare to channel all ship's power to the device."
+msgstr "? ?????? ? ???????? ???? ??????? ??????? ?? ?????????."
+
+#: src/planets.c:434
+msgid "Spock-  \"Preparations complete, sir.\""
+msgstr "????- \"????????????? ????????, ???.\""
+
+#: src/planets.c:435
+msgid "Kirk-  \"Engage!\""
+msgstr "????- \"???!\""
+
+#: src/planets.c:437
+msgid "WHIRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"
+msgstr ""
+
+#: src/planets.c:443 src/planets.c:463
+msgid "Sulu- \"Captain!  It's working!\""
+msgstr "????- \"???????!  ?? ????????!\""
+
+#: src/planets.c:447
+msgid "Ensign Chekov-  \"Congratulations, Captain!\""
+msgstr "????????? ?????- \"??????????, ???????.\""
+
+#: src/planets.c:450
+msgid "Spock-  \"Captain, I believe the `Experimental Death Ray'"
+msgstr "????- \"???????, ? ????????, ??? '????????????????? ??? ??????'"
+
+#: src/planets.c:452
+msgid "   is still operational.\""
+msgstr "   ??? ??? ????????.\""
+
+#: src/planets.c:455
+msgid "   has been rendered nonfunctional.\""
+msgstr "   ?????? ? ??????????.\""
+
+#: src/planets.c:467
+msgid "***MATTER-ANTIMATTER IMPLOSION IMMINENT!"
+msgstr "***???????? ??????? ??????? ? ????????????!"
+
+#: src/planets.c:478
+msgid "Sulu- \"Captain!  Yagabandaghangrapl, brachriigringlanbla!\""
+msgstr "????- \"???????!  ?????????, ????????, ???????-?????????!\""
+
+#: src/planets.c:480
+msgid "Lt. Uhura-  \"Graaeek!  Graaeek!\""
+msgstr "??. ?????- \"??????!  ????!\""
+
+#: src/planets.c:482
+msgid "Spock-  \"Fascinating!  . . . All humans aboard"
+msgstr "????- \"??????????!  . . . ??? ???? ?? ?????"
+
+#: src/planets.c:483
+msgid "  have apparently been transformed into strange mutations."
+msgstr "  ???? ??????????? ?????-?? ???????? ???????."
+
+#: src/planets.c:484
+msgid "  Vulcans do not seem to be affected."
+msgstr "  ????????? ??????, ??????, ?? ??????????."
+
+#: src/planets.c:486
+msgid "Kirk-  \"Raauch!  Raauch!\""
+msgstr "????- \"???! ???! ???-??!"
+
+#: src/planets.c:492
+msgid "Sulu- \"Captain!  It's   --WHAT?!?!\""
+msgstr "????- \"???????!  ???   --??????!\""
+
+#: src/planets.c:494
+msgid "Spock-  \"I believe the word is"
+msgstr "????- \"??????, ?????"
+
+#: src/planets.c:495
+msgid " *ASTONISHING*"
+msgstr " *???????????*"
+
+#: src/planets.c:496
+msgid " Mr. Sulu."
+msgstr " ?????? ????."
+
+#: src/planets.c:500
+msgid "  Captain, our quadrant is now infested with"
+msgstr "  ???????, ??? ???????? ?????? ???? ?????"
+
+#: src/planets.c:501
+msgid " - - - - - -  *THINGS*."
+msgstr " - - - - - -  *??????*."
+
+#: src/planets.c:503
+msgid "  I have no logical explanation.\""
+msgstr "  ? ???? ??? ????????? ??????????.\""
+
+#: src/planets.c:506
+msgid "Sulu- \"Captain!  The Death Ray is creating tribbles!\""
+msgstr "????- \"???????!   ??? ?????? ?????-?? ??????? ????????!\""
+
+#: src/planets.c:508
+msgid "Scotty-  \"There are so many tribbles down here"
+msgstr "?????-  \"??? ??????? ???? ???????? ??????"
+
+#: src/planets.c:509
+msgid "  in Engineering, we can't move for 'em, Captain.\""
+msgstr "  ? ??????????? ??????, ??? ?? ?? ????? ? ???? ???????????, ???????.\""
+
+#: src/planets.c:534
+msgid "Deneva"
+msgstr ""
+
+#: src/planets.c:535
+msgid "Eminiar VII"
+msgstr ""
+
+#: src/planets.c:536
+msgid "Hansen's Planet"
+msgstr ""
+
+#: src/planets.c:537
+msgid "Taurus IV"
+msgstr ""
+
+#: src/planets.c:538
+msgid "Aldebaran III"
+msgstr ""
+
+#: src/planets.c:539
+msgid "Vulcan (T'Khasi)"
+msgstr ""
+
+#: src/planets.c:540
+msgid "Tellar Prime (Miracht)"
+msgstr ""
+
+#: src/planets.c:541
+msgid "Andoria (Fesoan)"
+msgstr ""
+
+#: src/planets.c:542
+msgid "Antos IV (Doraphane)"
+msgstr ""
+
+#: src/planets.c:543
+msgid "Catulla (Cendo-Prae)"
+msgstr ""
+
+#: src/planets.c:544
+msgid "Izar"
+msgstr ""
+
+#: src/planets.c:545
+msgid "Tiburon"
+msgstr ""
+
+#: src/planets.c:546
+msgid "Merak II"
+msgstr ""
+
+#: src/planets.c:547
+msgid "Argelius II (Nelphia)"
+msgstr ""
+
+#: src/planets.c:548
+msgid "Daran V"
+msgstr ""
+
+#: src/planets.c:549
+msgid "Medusa"
+msgstr ""
+
+#: src/planets.c:550
+msgid "Coridan (Desotriana)"
+msgstr ""
+
+#: src/planets.c:551
+msgid "Berengaria IV"
+msgstr ""
+
+#: src/planets.c:552
+msgid "Capella IV (Kohath)"
+msgstr ""
+
+#: src/planets.c:553
+msgid "Gideon"
+msgstr ""
+
+#: src/planets.c:554
+msgid "Iotia"
+msgstr ""
+
+#: src/planets.c:557
+msgid "Rigel II"
+msgstr ""
+
+#: src/planets.c:558
+msgid "Deneb II"
+msgstr ""
+
+#: src/planets.c:564
+msgid "Scalos IV"
+msgstr ""
+
+#: src/planets.c:575
+msgid "Beta III"
+msgstr ""
+
+#: src/planets.c:576
+msgid "Gamma Tranguli VI (Vaalel)"
+msgstr ""
+
+#: src/planets.c:577
+msgid "Pyris VII"
+msgstr ""
+
+#: src/planets.c:578
+msgid "Triacus"
+msgstr ""
+
+#: src/planets.c:579
+msgid "Marcos XII"
+msgstr ""
+
+#: src/planets.c:581
+msgid "Ardana"
+msgstr ""
+
+#: src/planets.c:586
+msgid "Exo III"
+msgstr ""
+
+#: src/reports.c:10
+#, c-format
+msgid "Starbase in %s is currently under Commander attack."
+msgstr ""
+
+#: src/reports.c:12 src/reports.c:18
+#, c-format
+msgid "It can hold out until Stardate %d."
+msgstr "??? ?????? ???????????? ?? ???? %d.\""
+
+#: src/reports.c:16
+#, c-format
+msgid "Starbase in %s is under Super-commander attack."
+msgstr ""
+
+#: src/reports.c:23
+#, c-format
+msgid "Base in %i - %i attacked by C. Alive until %.1f"
+msgstr ""
+
+#: src/reports.c:25
+#, c-format
+msgid "Base in %i - %i attacked by S. Alive until %.1f"
+msgstr ""
+
+#: src/reports.c:52
+#, c-format
+msgid "You %s playing a %s%s %s game."
+msgstr ""
+
+#: src/reports.c:53
+msgid "were"
+msgstr ""
+
+#: src/reports.c:53
+msgid "are now"
+msgstr ""
+
+#: src/reports.c:54
+msgid "No plaque is allowed."
+msgstr ""
+
+#: src/reports.c:55
+#, c-format
+msgid "This is tournament game %d."
+msgstr ""
+
+#: src/reports.c:56
+#, c-format
+msgid "Your secret password is \"%s\""
+msgstr ""
+
+#: src/reports.c:57
+#, c-format
+msgid "%d of %d Klingons have been killed"
+msgstr ""
+
+#: src/reports.c:58
+#, c-format
+msgid ", including %d Commander%s."
+msgstr ", ??????? %d ?????????%s."
+
+#: src/reports.c:58 src/reports.c:81 src/reports.c:87 src/reports.c:110
+msgid "s"
+msgstr "(??)"
+
+#: src/reports.c:59
+msgid ", but no Commanders."
+msgstr ", ?? ??? ??????????."
+
+#: src/reports.c:61
+#, c-format
+msgid "The Super Commander has %sbeen destroyed."
+msgstr "????-??? %s??? ?????????."
+
+#: src/reports.c:62
+msgid "not "
+msgstr "?? "
+
+#: src/reports.c:64
+msgid "There "
+msgstr " "
+
+#: src/reports.c:65
+msgid "has been 1 base"
+msgstr "1 ???"
+
+#: src/reports.c:67
+#, c-format
+msgid "have been %d bases"
+msgstr "%d ???"
+
+#: src/reports.c:69
+#, c-format
+msgid " destroyed, %d remaining."
+msgstr " ??????????, %d ????????."
+
+#: src/reports.c:71
+#, c-format
+msgid "There are %d bases."
+msgstr "???????? %d ???."
+
+#: src/reports.c:78
+#, c-format
+msgid "%d casualt%s suffered so far."
+msgstr "%d ????????????%s ??? ??????.\""
+
+#: src/reports.c:80
+#, c-format
+msgid "There were %d call%s for help."
+msgstr ""
+
+#: src/reports.c:83
+msgid "You have "
+msgstr "? ??? "
+
+#: src/reports.c:85
+msgid "no"
+msgstr "???????????"
+
+#: src/reports.c:86
+msgid " deep space probe"
+msgstr " ???????????? ??????????? ??????"
+
+#: src/reports.c:93
+msgid "An armed deep space probe is in"
+msgstr "???????????? ??????????? ?????? ? ??????? ??????? ?????? ?"
+
+#: src/reports.c:95
+msgid "A deep space probe is in"
+msgstr "???????????? ??????????? ?????? ?????? ?"
+
+#: src/reports.c:101
+msgid "Dilithium crystals aboard ship... not yet used."
+msgstr "????????? ??????? ?? ?????... ???? ?? ??????????????."
+
+#: src/reports.c:109
+#, c-format
+msgid "Dilithium crystals have been used %d time%s."
+msgstr "????????? ??????? ?????????????? %d ???%s."
+
+#: src/reports.c:123
+msgid "LONG-RANGE SENSORS DAMAGED."
+msgstr "??????? ???????? ?????? ???????."
+
+#: src/reports.c:126
+msgid "Starbase's long-range scan"
+msgstr "??????? ????? ? ????"
+
+#: src/reports.c:129
+msgid "Long-range scan"
+msgstr "??????? ?????"
+
+#: src/reports.c:160
+msgid "DEVICE            -REPAIR TIMES-"
+msgstr "??????????        -????? ???????-"
+
+#: src/reports.c:161
+msgid "                IN FLIGHT   DOCKED"
+msgstr "                ? ??????    ????????????"
+
+#: src/reports.c:170
+msgid "All devices functional."
+msgstr "??? ?????????? ? ???????."
+
+#: src/reports.c:196
+msgid "Spock-  \"I revised the Star Chart from the starbase's records.\""
+msgstr "????- \"? ??????? ???????? ????? ?? ??????? ? ????.\""
+
+#: src/reports.c:200
+msgid "       STAR CHART FOR THE KNOWN GALAXY"
+msgstr "       ???????? ????? ????????????? ????????"
+
+#: src/reports.c:202
+#, c-format
+msgid "(Last surveillance update %d stardates ago)."
+msgstr ""
+
+#: src/reports.c:260
+#, c-format
+msgid "Stardate      %.1f, Time Left %.2f"
+msgstr ""
+
+#: src/reports.c:274
+#, c-format
+msgid "Condition     %s, %i DAMAGES"
+msgstr ""
+
+#: src/reports.c:277
+#, c-format
+msgid "Position      %d - %d , %d - %d"
+msgstr ""
+
+#: src/reports.c:281
+msgid "Life Support  "
+msgstr ""
+
+#: src/reports.c:284
+msgid "DAMAGED, Base provides"
+msgstr ""
+
+#: src/reports.c:286
+#, c-format
+msgid "DAMAGED, reserves=%4.2f"
+msgstr ""
+
+#: src/reports.c:289
+msgid "ACTIVE"
+msgstr ""
+
+#: src/reports.c:292
+#, c-format
+msgid "Warp Factor   %.1f"
+msgstr "????????    %.1f"
+
+#: src/reports.c:295
+#, c-format
+msgid "Energy        %.2f"
+msgstr ""
+
+#: src/reports.c:297
+msgid " (have crystals)"
+msgstr ""
+
+#: src/reports.c:300
+#, c-format
+msgid "Torpedoes     %d"
+msgstr "???????      %d"
+
+#: src/reports.c:303
+msgid "Shields       "
+msgstr "??????        "
+
+#: src/reports.c:305
+msgid "DAMAGED,"
+msgstr "???????,"
+
+#: src/reports.c:307
+msgid "UP,"
+msgstr "???????,"
+
+#: src/reports.c:309
+msgid "DOWN,"
+msgstr "?????,"
+
+#: src/reports.c:310
+#, c-format
+msgid " %d%% %.1f units"
+msgstr ""
+
+#: src/reports.c:314
+#, c-format
+msgid "Klingons Left %d"
+msgstr ""
+
+#: src/reports.c:320
+#, c-format
+msgid "Major system  %s"
+msgstr ""
+
+#: src/reports.c:322
+msgid "Sector is uninhabited"
+msgstr ""
+
+#: src/reports.c:344
+msgid "   S.R. SENSORS DAMAGED!"
+msgstr ""
+
+#: src/reports.c:348
+msgid "  [Using Base's sensors]"
+msgstr ""
+
+#: src/reports.c:350
+msgid "     Short-range scan"
+msgstr ""
+
+#: src/reports.c:365
+msgid "Information desired? "
+msgstr ""
+
+#: src/reports.c:371
+msgid "UNRECOGNIZED REQUEST. Legal requests are:"
+msgstr ""
+
+#: src/reports.c:372
+msgid "  date, condition, position, lsupport, warpfactor,"
+msgstr ""
+
+#: src/reports.c:373
+msgid "  energy, torpedoes, shields, klingons, time, system, bases."
+msgstr ""
+
+#: src/reports.c:412
+msgid "COMPUTER DAMAGED, USE A POCKET CALCULATOR."
+msgstr ""
+
+#: src/reports.c:419
+msgid "Destination quadrant and/or sector? "
+msgstr "???????? ?????????? ?/??? ??????? "
+
+#: src/reports.c:454
+msgid "Answer \"no\" if you don't know the value:"
+msgstr ""
+
+#: src/reports.c:457
+msgid "Time or arrival date? "
+msgstr ""
+
+#: src/reports.c:463
+msgid "We'll never make it, sir."
+msgstr ""
+
+#: src/reports.c:471
+msgid "Warp factor? "
+msgstr "????????? "
+
+#: src/reports.c:481
+msgid "Captain, certainly you can give me one of these."
+msgstr ""
+
+#: src/reports.c:488
+msgid "Insufficient energy, sir."
+msgstr "?? ??????? ???????, ???."
+
+#: src/reports.c:491 src/reports.c:533
+msgid "New warp factor to try? "
+msgstr "??????????? ?????? ????????? "
+
+#: src/reports.c:507
+msgid "But if you lower your shields,"
+msgstr "?? ???? ?? ??????? ??????,"
+
+#: src/reports.c:508
+msgid "remaining"
+msgstr "???????"
+
+#: src/reports.c:512
+msgid "Remaining"
+msgstr "???????"
+
+#: src/reports.c:513
+#, c-format
+msgid " energy will be %.2f."
+msgstr " ??????? ????? %.2f."
+
+#: src/reports.c:515
+#, c-format
+msgid "And we will arrive at stardate %.2f."
+msgstr "? ?? ???????? %.2f ?????."
+
+#: src/reports.c:519
+msgid "Any warp speed is adequate."
+msgstr ""
+
+#: src/reports.c:521
+#, c-format
+msgid "Minimum warp needed is %.2f,"
+msgstr ""
+
+#: src/reports.c:522
+#, c-format
+msgid "and we will arrive at stardate %.2f."
+msgstr "? ?? ???????? %.2f ?????."
+
+#: src/reports.c:526
+msgid "Unfortunately, the Federation will be destroyed by then."
+msgstr "? ?????????, ????????? ? ???? ??????? ??? ????? ??????????."
+
+#: src/reports.c:528
+msgid "You'll be taking risks at that speed, Captain"
+msgstr ""
+
+#: src/reports.c:532
+msgid "The starbase there will be destroyed by then."
+msgstr "???? ? ???? ??????? ??? ????? ??????????."

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-09-19 18:13:35 UTC (rev 597)
+++ trunk/src/io.c	2006-09-19 18:44:07 UTC (rev 598)
@@ -36,7 +36,6 @@
     setlocale(LC_ALL, "");
     bindtextdomain(PACKAGE, LOCALEDIR);
     textdomain(PACKAGE);
-    gettext("");
 
     if (atexit(outro)){
 	fprintf(stderr,"Unable to register outro(), exiting...\n");
@@ -92,15 +91,15 @@
     char buf[BUFSIZ];
     if (i==1) {
 	if (game.skill > SKILL_FAIR)
-	    prompt = "[ANOUNCEMENT ARRIVING...]";
+	    prompt = _("[ANOUNCEMENT ARRIVING...]");
 	else
-	    prompt = "[IMPORTANT ANNOUNCEMENT ARRIVING -- PRESS ENTER TO CONTINUE]";
+	    prompt = _("[IMPORTANT ANNOUNCEMENT ARRIVING -- PRESS ENTER TO CONTINUE]");
     }
     else {
 	if (game.skill > SKILL_FAIR)
-	    prompt = "[CONTINUE?]";
+	    prompt = _("[CONTINUE?]");
 	else
-	    prompt = "[PRESS ENTER TO CONTINUE]";
+	    prompt = _("[PRESS ENTER TO CONTINUE]");
 
     }
     if (game.options & OPTION_CURSES) {
@@ -388,11 +387,11 @@
 	if (l == 1) {
 	    if (n != 1) {
 		skip(1);
-		proutn("Track for torpedo number %d-  ", i);
+		proutn(_("Track for torpedo number %d-  "), i);
 	    }
 	    else {
 		skip(1);
-		proutn("Torpedo track- ");
+		proutn(_("Torpedo track- "));
 	    }
 	} else if (l==4 || l==9) 
 	    skip(1);
@@ -433,21 +432,3 @@
 	chart(0);
     }
 }
-
-void setpassword(void) 
-{
-    if (!(game.options & OPTION_CURSES)) {
-	for (;;) {
-	    scan();
-	    strcpy(game.passwd, citem);
-	    chew();
-	    if (*game.passwd != 0) break;
-	    proutn("Please type in a secret password-");
-	}
-    } else {
-	int i;
-        for(i=0;i<3;i++) game.passwd[i]=(char)(97+(int)(Rand()*25));
-        game.passwd[3]=0;
-    }
-}
-

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-19 18:13:35 UTC (rev 597)
+++ trunk/src/moving.c	2006-09-19 18:44:07 UTC (rev 598)
@@ -13,7 +13,7 @@
 
     w.x = w.y = 0;
     if (game.inorbit) {
-	prout("Helmsman Sulu- \"Leaving standard orbit.\"");
+	prout(_("Helmsman Sulu- \"Leaving standard orbit.\""));
 	game.inorbit = false;
     }
 
@@ -100,9 +100,9 @@
 			return;
 		    }
 		    skip(1);
-		    prout("YOU HAVE ATTEMPTED TO CROSS THE NEGATIVE ENERGY BARRIER");
-		    prout("AT THE EDGE OF THE GALAXY.  THE THIRD TIME YOU TRY THIS,");
-		    prout("YOU WILL BE DESTROYED.");
+		    prout(_("YOU HAVE ATTEMPTED TO CROSS THE NEGATIVE ENERGY BARRIER"));
+		    prout(_("AT THE EDGE OF THE GALAXY.  THE THIRD TIME YOU TRY THIS,"));
+		    prout(_("YOU WILL BE DESTROYED."));
 		}
 		/* Compute final position in new quadrant */
 		if (trbeam) return; /* Don't bother if we are to be beamed */
@@ -111,7 +111,7 @@
 		game.sector.x = w.x - QUADSIZE*(game.quadrant.x-1);
 		game.sector.y = w.y - QUADSIZE*(game.quadrant.y-1);
 		skip(1);
-		prout("Entering %s.", cramlc(quadrant, game.quadrant));
+		prout(_("Entering %s."), cramlc(quadrant, game.quadrant));
 		game.quad[game.sector.x][game.sector.y] = game.ship;
 		newqad(0);
 		if (game.skill>SKILL_NOVICE) attack(0);
@@ -138,11 +138,11 @@
 		    break;
 		case IHBLANK:
 		    skip(1);
-		    prouts("***RED ALERT!  RED ALERT!");
+		    prouts(_("***RED ALERT!  RED ALERT!"));
 		    skip(1);
 		    proutn("***");
 		    crmshp();
-		    proutn(" pulled into black hole at ");
+		    proutn(_(" pulled into black hole at "));
 		    prout(cramlc(sector, w));
 		    /*
 		     * Getting pulled into a black hole was certain
@@ -164,13 +164,13 @@
 		    skip(1);
 		    crmshp();
 		    if (iquad == IHWEB)
-			proutn(" encounters Tholian web at ");
+			proutn(_(" encounters Tholian web at "));
 		    else
-			proutn(" blocked by object at ");
+			proutn(_(" blocked by object at "));
 		    proutn(cramlc(sector, w));
 		    prout(";");
-		    proutn("Emergency stop required ");
-		    prout("%2d units of energy.", (int)stopegy);
+		    proutn(_("Emergency stop required "));
+		    prout(_("%2d units of energy."), (int)stopegy);
 		    game.energy -= stopegy;
 		    finalx = x-deltax+0.5;
 		    game.sector.x = finalx;
@@ -218,20 +218,20 @@
 {
     chew();
     if (game.condit == IHDOCKED && l) {
-	prout("Already docked.");
+	prout(_("Already docked."));
 	return;
     }
     if (game.inorbit) {
-	prout("You must first leave standard orbit.");
+	prout(_("You must first leave standard orbit."));
 	return;
     }
     if (game.base.x==0 || abs(game.sector.x-game.base.x) > 1 || abs(game.sector.y-game.base.y) > 1) {
 	crmshp();
-	prout(" not adjacent to base.");
+	prout(_(" not adjacent to base."));
 	return;
     }
     game.condit = IHDOCKED;
-    if (l) prout("Docked.");
+    if (l) prout(_("Docked."));
     game.ididit=1;
     if (game.energy < game.inenrg) game.energy = game.inenrg;
     game.shield = game.inshld;
@@ -240,7 +240,7 @@
     if (!damaged(DRADIO) &&
 	(is_scheduled(FCDBAS) || game.isatb == 1) && game.iseenit == 0) {
 	/* get attack report from base */
-	prout("Lt. Uhura- \"Captain, an important message from the starbase:\"");
+	prout(_("Lt. Uhura- \"Captain, an important message from the starbase:\""));
 	attakreport(0);
 	game.iseenit = 1;
     }
@@ -268,8 +268,8 @@
 	game.direc = -1.0;
 	
 	if (game.landed == 1 && !isprobe) {
-		prout("Dummy! You can't leave standard orbit until you");
-		proutn("are back aboard the ");
+		prout(_("Dummy! You can't leave standard orbit until you"));
+		proutn(_("are back aboard the "));
 		crmshp();
 		prout(".");
 		chew();
@@ -278,9 +278,9 @@
 	while (automatic == -1) {
 		if (damaged(DCOMPTR)) {
 			if (isprobe)
-				prout("Computer damaged; manual navigation only");
+				prout(_("Computer damaged; manual navigation only"));
 			else
-				prout("Computer damaged; manual movement only");
+				prout(_("Computer damaged; manual movement only"));
 			chew();
 			automatic = 0;
 			key = IHEOL;
@@ -295,7 +295,7 @@
 			key = scan();
 
 		if (key == IHEOL) {
-			proutn("Manual or automatic- ");
+			proutn(_("Manual or automatic- "));
 			iprompt = 1;
 			chew();
 		}
@@ -318,9 +318,9 @@
 		}
 		else { /* numeric */
 			if (isprobe)
-				prout("(Manual navigation assumed.)");
+				prout(_("(Manual navigation assumed.)"));
 			else
-				prout("(Manual movement assumed.)");
+				prout(_("(Manual movement assumed.)"));
 			automatic = 0;
 			break;
 		}
@@ -329,9 +329,9 @@
 	if (automatic) {
 		while (key == IHEOL) {
 			if (isprobe)
-				proutn("Target quadrant or quadrant&sector- ");
+				proutn(_("Target quadrant or quadrant&sector- "));
 			else
-				proutn("Destination sector or quadrant&sector- ");
+				proutn(_("Destination sector or quadrant&sector- "));
 			chew();
 			iprompt = 1;
 			key = scan();
@@ -385,18 +385,18 @@
 		if (!isprobe) {
 			if (itemp) {
 				if (iprompt) {
-					prout("Helmsman Sulu- \"Course locked in for %s.\"",
+					prout(_("Helmsman Sulu- \"Course locked in for %s.\""),
 						cramlc(sector, incr));
 				}
 			}
-			else prout("Ensign Chekov- \"Course laid in, Captain.\"");
+			else prout(_("Ensign Chekov- \"Course laid in, Captain.\""));
 		}
 		deltax = icolq - game.quadrant.y + 0.1*(incr.x-game.sector.y);
 		deltay = game.quadrant.x - irowq + 0.1*(game.sector.x-incr.y);
 	}
 	else { /* manual */
 		while (key == IHEOL) {
-			proutn("X and Y displacements- ");
+			proutn(_("X and Y displacements- "));
 			chew();
 			iprompt = 1;
 			key = scan();
@@ -421,7 +421,7 @@
 	}
 	if (itemp == 2 && !isprobe) {
 		skip(1);
-		prout("Helmsman Sulu- \"Aye, Sir.\"");
+		prout(_("Helmsman Sulu- \"Aye, Sir.\""));
 	}
 	game.dist = sqrt(deltax*deltax + deltay*deltay);
 	game.direc = atan2(deltax, deltay)*1.90985932;
@@ -441,7 +441,7 @@
     if (damaged(DIMPULS)) {
 	chew();
 	skip(1);
-	prout("Engineer Scott- \"The impulse engines are damaged, Sir.\"");
+	prout(_("Engineer Scott- \"The impulse engines are damaged, Sir.\""));
 	return;
     }
 
@@ -456,15 +456,15 @@
     if (power >= game.energy) {
 	/* Insufficient power for trip */
 	skip(1);
-	prout("First Officer Spock- \"Captain, the impulse engines");
-	prout("require 20.0 units to engage, plus 100.0 units per");
+	prout(_("First Officer Spock- \"Captain, the impulse engines"));
+	prout(_("require 20.0 units to engage, plus 100.0 units per"));
 	if (game.energy > 30) {
-	    proutn("quadrant.  We can go, therefore, a maximum of %d", 
+	    proutn(_("quadrant.  We can go, therefore, a maximum of %d"),
 		   (int)(0.01 * (game.energy-20.0)-0.05));
-	    prout(" quadrants.\"");
+	    prout(_(" quadrants.\""));
 	}
 	else {
-	    prout("quadrant.  They are, therefore, useless.\"");
+	    prout(_("quadrant.  They are, therefore, useless.\""));
 	}
 	chew();
 	return;
@@ -472,9 +472,9 @@
     /* Make sure enough time is left for the trip */
     game.optime = game.dist/0.095;
     if (game.optime >= game.state.remtime) {
-	prout("First Officer Spock- \"Captain, our speed under impulse");
-	prout("power is only 0.95 sectors per stardate. Are you sure");
-	proutn("we dare spend the time?\" ");
+	prout(_("First Officer Spock- \"Captain, our speed under impulse"));
+	prout(_("power is only 0.95 sectors per stardate. Are you sure"));
+	proutn(_("we dare spend the time?\" "));
 	if (ja() == 0) return;
     }
     /* Activate impulse engines and pay the cost */
@@ -499,14 +499,14 @@
 	if (game.damage[DWARPEN] > 10.0) {
 	    chew();
 	    skip(1);
-	    prout("Engineer Scott- \"The impulse engines are damaged, Sir.\"");
+	    prout(_("Engineer Scott- \"The impulse engines are damaged, Sir.\""));
 	    return;
 	}
 	if (damaged(DWARPEN) && game.warpfac > 4.0) {
 	    chew();
 	    skip(1);
-	    prout("Engineer Scott- \"Sorry, Captain. Until this damage");
-	    prout("  is repaired, I can only give you warp 4.\"");
+	    prout(_("Engineer Scott- \"Sorry, Captain. Until this damage"));
+	    prout(_("  is repaired, I can only give you warp 4.\""));
 	    return;
 	}
 			
@@ -522,24 +522,24 @@
 	    /* Insufficient power for trip */
 	    game.ididit = 0;
 	    skip(1);
-	    prout("Engineering to bridge--");
+	    prout(_("Engineering to bridge--"));
 	    if (!game.shldup || 0.5*power > game.energy) {
 		iwarp = pow((game.energy/(game.dist+0.05)), 0.333333333);
 		if (iwarp <= 0) {
-		    prout("We can't do it, Captain. We haven't the energy.");
+		    prout(_("We can't do it, Captain. We don't have enough energy."));
 		}
 		else {
-		    proutn("We haven't the energy, but we could do it at warp %d", iwarp);
+		    proutn(_("We don't have enough energy, but we could do it at warp %d"), iwarp);
 		    if (game.shldup) {
 			prout(",");
-			prout("if you'll lower the shields.");
+			prout(_("if you'll lower the shields."));
 		    }
 		    else
 			prout(".");
 		}
 	    }
 	    else
-		prout("We haven't the energy to go that far with the shields up.");
+		prout(_("We haven't the energy to go that far with the shields up."));
 	    return;
 	}
 						
@@ -547,11 +547,11 @@
 	game.optime = 10.0*game.dist/game.wfacsq;
 	if (game.optime >= 0.8*game.state.remtime) {
 	    skip(1);
-	    prout("First Officer Spock- \"Captain, I compute that such");
-	    proutn("  a trip would require approximately %2.0f",
+	    prout(_("First Officer Spock- \"Captain, I compute that such"));
+	    proutn(_("  a trip would require approximately %2.0f"),
 		   100.0*game.optime/game.state.remtime);
-	    prout(" percent of our");
-	    proutn("  remaining time.  Are you sure this is wise?\" ");
+	    prout(_(" percent of our"));
+	    proutn(_("  remaining time.  Are you sure this is wise?\" "));
 	    if (ja() == 0) { game.ididit = 0; game.optime=0; return;}
 	}
     }
@@ -613,9 +613,9 @@
     if (blooey) {
 	game.damage[DWARPEN] = game.damfac*(3.0*Rand()+1.0);
 	skip(1);
-	prout("Engineering to bridge--");
-	prout("  Scott here.  The warp engines are damaged.");
-	prout("  We'll have to reduce speed to warp 4.");
+	prout(_("Engineering to bridge--"));
+	prout(_("  Scott here.  The warp engines are damaged."));
+	prout(_("  We'll have to reduce speed to warp 4."));
     }
     game.ididit = 1;
     return;
@@ -630,7 +630,7 @@
 	
     while ((key=scan()) == IHEOL) {
 	chew();
-	proutn("Warp factor- ");
+	proutn(_("Warp factor- "));
     }
     chew();
     if (key != IHREAL) {
@@ -638,39 +638,39 @@
 	return;
     }
     if (game.damage[DWARPEN] > 10.0) {
-	prout("Warp engines inoperative.");
+	prout(_("Warp engines inoperative."));
 	return;
     }
     if (damaged(DWARPEN) && aaitem > 4.0) {
-	prout("Engineer Scott- \"I'm doing my best, Captain,");
-	prout("  but right now we can only go warp 4.\"");
+	prout(_("Engineer Scott- \"I'm doing my best, Captain,"));
+	prout(_("  but right now we can only go warp 4.\""));
 	return;
     }
     if (aaitem > 10.0) {
-	prout("Helmsman Sulu- \"Our top speed is warp 10, Captain.\"");
+	prout(_("Helmsman Sulu- \"Our top speed is warp 10, Captain.\""));
 	return;
     }
     if (aaitem < 1.0) {
-	prout("Helmsman Sulu- \"We can't go below warp 1, Captain.\"");
+	prout(_("Helmsman Sulu- \"We can't go below warp 1, Captain.\""));
 	return;
     }
     oldfac = game.warpfac;
     game.warpfac = aaitem;
     game.wfacsq=game.warpfac*game.warpfac;
     if (game.warpfac <= oldfac || game.warpfac <= 6.0) {
-	proutn("Helmsman Sulu- \"Warp factor %d, Captain.\"", 
+	proutn(_("Helmsman Sulu- \"Warp factor %d, Captain.\""),
 	       (int)game.warpfac);
 	return;
     }
     if (game.warpfac < 8.00) {
-	prout("Engineer Scott- \"Aye, but our maximum safe speed is warp 6.\"");
+	prout(_("Engineer Scott- \"Aye, but our maximum safe speed is warp 6.\""));
 	return;
     }
     if (game.warpfac == 10.0) {
-	prout("Engineer Scott- \"Aye, Captain, we'll try it.\"");
+	prout(_("Engineer Scott- \"Aye, Captain, we'll try it.\""));
 	return;
     }
-    prout("Engineer Scott- \"Aye, Captain, but our engines may not take it.\"");
+    prout(_("Engineer Scott- \"Aye, Captain, but our engines may not take it.\""));
     return;
 }
 
@@ -685,26 +685,26 @@
 	    finish(FPNOVA);
 	    return;
 	}
-	prout("Scotty rushes to the transporter controls.");
+	prout(_("Scotty rushes to the transporter controls."));
 	if (game.shldup) {
-	    prout("But with the shields up it's hopeless.");
+	    prout(_("But with the shields up it's hopeless."));
 	    finish(FPNOVA);
 	}
-	prouts("His desperate attempt to rescue you . . .");
+	prouts(_("His desperate attempt to rescue you . . ."));
 	if (Rand() <= 0.5) {
-	    prout("fails.");
+	    prout(_("fails."));
 	    finish(FPNOVA);
 	    return;
 	}
-	prout("SUCCEEDS!");
+	prout(_("SUCCEEDS!"));
 	if (game.imine) {
 	    game.imine = 0;
-	    proutn("The crystals mined were ");
+	    proutn(_("The crystals mined were "));
 	    if (Rand() <= 0.25) {
-		prout("lost.");
+		prout(_("lost."));
 	    }
 	    else {
-		prout("saved.");
+		prout(_("saved."));
 		game.icrystl = 1;
 	    }
 	}
@@ -719,30 +719,30 @@
     skip(1);
     do {
 	if (game.justin) {
-	    prouts("***RED ALERT!  READ ALERT!");
+	    prouts(_("***RED ALERT!  RED ALERT!"));
 	    skip(1);
-	    proutn("The ");
+	    proutn(_("The "));
 	    crmshp();
-	    prout(" has stopped in a quadrant containing");
-	    prouts("   a supernova.");
+	    prout(_(" has stopped in a quadrant containing"));
+	    prouts(_("   a supernova."));
 	    skip(2);
 	}
-	proutn("***Emergency automatic override attempts to hurl ");
+	proutn(_("***Emergency automatic override attempts to hurl "));
 	crmshp();
 	skip(1);
-	prout("safely out of quadrant.");
+	prout(_("safely out of quadrant."));
 	if (!damaged(DRADIO))
 	    game.state.galaxy[game.quadrant.x][game.quadrant.y].charted = true;
 	/* Try to use warp engines */
 	if (damaged(DWARPEN)) {
 	    skip(1);
-	    prout("Warp engines damaged.");
+	    prout(_("Warp engines damaged."));
 	    finish(FSNOVAED);
 	    return;
 	}
 	game.warpfac = 6.0+2.0*Rand();
 	game.wfacsq = game.warpfac * game.warpfac;
-	prout("Warp factor set to %d", (int)game.warpfac);
+	prout(_("Warp factor set to %d"), (int)game.warpfac);
 	power = 0.75*game.energy;
 	game.dist = power/(game.warpfac*game.warpfac*game.warpfac*(game.shldup+1));
 	distreq = 1.4142+Rand();
@@ -756,7 +756,7 @@
 	    /* This is bad news, we didn't leave quadrant. */
 	    if (game.alldone) return;
 	    skip(1);
-	    prout("Insufficient energy to leave quadrant.");
+	    prout(_("Insufficient energy to leave quadrant."));
 	    finish(FSNOVAED);
 	    return;
 	}
@@ -770,10 +770,10 @@
 void timwrp() 
 {
     int l, gotit;
-    prout("***TIME WARP ENTERED.");
+    prout(_("***TIME WARP ENTERED."));
     if (game.state.snap && Rand() < 0.5) {
 	/* Go back in time */
-	prout("You are traveling backwards in time %d stardates.",
+	prout(_("You are traveling backwards in time %d stardates."),
 	      (int)(game.state.date-game.snapsht.date));
 	game.state = game.snapsht;
 	game.state.snap = 0;
@@ -798,7 +798,7 @@
 	    if (game.state.plnets[l].known == shuttle_down) {
 		gotit = 1;
 		if (game.iscraft==1 && game.ship==IHE) {
-		    prout("Checkov-  \"Security reports the Galileo has disappeared, Sir!");
+		    prout(_("Checkov-  \"Security reports the Galileo has disappeared, Sir!"));
 		    game.iscraft = 0;
 		}
 	    }
@@ -806,19 +806,19 @@
 	/* Likewise, if in the original time the Galileo was abandoned, but
 	   was on ship earlier, it would have vanished -- lets restore it */
 	if (game.iscraft==0 && gotit==0 && game.damage[DSHUTTL] >= 0.0) {
-	    prout("Checkov-  \"Security reports the Galileo has reappeared in the dock!\"");
+	    prout(_("Checkov-  \"Security reports the Galileo has reappeared in the dock!\""));
 	    game.iscraft = 1;
 	}
 	/* 
 	 * There used to be code to do the actual reconstrction here,
 	 * but the starchart is now part of the snapshotted galaxy state.
 	 */
-	prout("Spock has reconstructed a correct star chart from memory");
+	prout(_("Spock has reconstructed a correct star chart from memory"));
     }
     else {
 	/* Go forward in time */
 	game.optime = -0.5*game.intime*log(Rand());
-	prout("You are traveling forward in time %d stardates.", (int)game.optime);
+	prout(_("You are traveling forward in time %d stardates."), (int)game.optime);
 	/* cheat to make sure no tractor beams occur during time warp */
 	postpone(FTBEAM, game.optime);
 	game.damage[DRADIO] += game.optime;
@@ -836,34 +836,34 @@
 	chew();
 	skip(1);
 	if (game.ship == IHE) 
-	    prout("Engineer Scott- \"We have no more deep space probes, Sir.\"");
+	    prout(_("Engineer Scott- \"We have no more deep space probes, Sir.\""));
 	else
-	    prout("Ye Faerie Queene has no deep space probes.");
+	    prout(_("Ye Faerie Queene has no deep space probes."));
 	return;
     }
     if (damaged(DDSP)) {
 	chew();
 	skip(1);
-	prout("Engineer Scott- \"The probe launcher is damaged, Sir.\"");
+	prout(_("Engineer Scott- \"The probe launcher is damaged, Sir.\""));
 	return;
     }
     if (is_scheduled(FDSPROB)) {
 	chew();
 	skip(1);
 	if (damaged(DRADIO) && game.condit != IHDOCKED) {
-	    prout("Spock-  \"Records show the previous probe has not yet");
-	    prout("   reached its destination.\"");
+	    prout(_("Spock-  \"Records show the previous probe has not yet"));
+	    prout(_("   reached its destination.\""));
 	}
 	else
-	    prout("Uhura- \"The previous probe is still reporting data, Sir.\"");
+	    prout(_("Uhura- \"The previous probe is still reporting data, Sir.\""));
 	return;
     }
     key = scan();
 
     if (key == IHEOL) {
 	/* slow mode, so let Kirk know how many probes there are left */
-	prout(game.nprobes==1 ? "%d probe left." : "%d probes left.", game.nprobes);
-	proutn("Are you sure you want to fire a probe? ");
+	prout(game.nprobes==1 ? _("%d probe left.") : _("%d probes left."), game.nprobes);
+	proutn(_("Are you sure you want to fire a probe? "));
 	if (ja()==0) return;
     }
 
@@ -873,7 +873,7 @@
 	key = scan();
     }
     else if (key == IHEOL) {
-	proutn("Arm NOVAMAX warhead? ");
+	proutn(_("Arm NOVAMAX warhead? "));
 	game.isarmed = ja();
     }
     getcd(true, key);
@@ -894,7 +894,7 @@
     game.probey = game.quadrant.y*QUADSIZE + game.sector.y - 1;
     game.probec = game.quadrant;
     schedule(FDSPROB, 0.01); // Time to move one sector
-    prout("Ensign Chekov-  \"The deep space probe is launched, Captain.\"");
+    prout(_("Ensign Chekov-  \"The deep space probe is launched, Captain.\""));
     game.ididit = 1;
     return;
 }
@@ -908,19 +908,19 @@
     chew();
     /* Test for game.conditions which prevent calling for help */
     if (game.condit == IHDOCKED) {
-	prout("Lt. Uhura-  \"But Captain, we're already docked.\"");
+	prout(_("Lt. Uhura-  \"But Captain, we're already docked.\""));
 	return;
     }
     if (damaged(DRADIO)) {
-	prout("Subspace radio damaged.");
+	prout(_("Subspace radio damaged."));
 	return;
     }
     if (game.state.rembase==0) {
-	prout("Lt. Uhura-  \"Captain, I'm not getting any response from Starbase.\"");
+	prout(_("Lt. Uhura-  \"Captain, I'm not getting any response from Starbase.\""));
 	return;
     }
     if (game.landed == 1) {
-	proutn("You must be aboard the ");
+	proutn(_("You must be aboard the "));
 	crmshp();
 	prout(".");
 	return;
@@ -946,10 +946,10 @@
     }
     /* dematerialize starship */
     game.quad[game.sector.x][game.sector.y]=IHDOT;
-    proutn("Starbase in %s responds--", cramlc(quadrant, game.quadrant));
+    proutn(_("Starbase in %s responds--"), cramlc(quadrant, game.quadrant));
     proutn("");
     crmshp();
-    prout(" dematerializes.");
+    prout(_(" dematerializes."));
     game.sector.x=0;
     for (l = 1; l <= 5; l++) {
 	ix = game.base.x+3.0*Rand()-1;
@@ -962,7 +962,7 @@
 	}
     }
     if (game.sector.x==0){
-	prout("You have been lost in space...");
+	prout(_("You have been lost in space..."));
 	finish(FMATERIALIZE);
 	return;
     }
@@ -970,11 +970,11 @@
     probf = pow((1.0 - pow(0.98,ddist)), 0.33333333);
     for (l = 1; l <= 3; l++) {
 	switch (l) {
-	case 1: proutn("1st"); break;
-	case 2: proutn("2nd"); break;
-	case 3: proutn("3rd"); break;
+	case 1: proutn(_("1st")); break;
+	case 2: proutn(_("2nd")); break;
+	case 3: proutn(_("3rd")); break;
 	}
-	proutn(" attempt to re-materialize ");
+	proutn(_(" attempt to re-materialize "));
 	crmshp();
 	switch (l){
 	case 1: game.quad[ix][iy]=IHMATER0;
@@ -987,7 +987,7 @@
 	textcolor(RED);
 	warble();
 	if (Rand() > probf) break;
-	prout("fails.");
+	prout(_("fails."));
 	delay(500);
 	textcolor(DEFAULT);
     }
@@ -1001,9 +1001,9 @@
     }
     game.quad[ix][iy]=game.ship;
     textcolor(GREEN);
-    prout("succeeds.");
+    prout(_("succeeds."));
     textcolor(DEFAULT);
     dock(0);
     skip(1);
-    prout("Lt. Uhura-  \"Captain, we made it!\"");
+    prout(_("Lt. Uhura-  \"Captain, we made it!\""));
 }

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-19 18:13:35 UTC (rev 597)
+++ trunk/src/planets.c	2006-09-19 18:44:07 UTC (rev 598)
@@ -31,7 +31,7 @@
     int i;
     skip(1);
     chew();
-    prout("Spock-  \"Planet report follows, Captain.\"");
+    prout(_("Spock-  \"Planet report follows, Captain.\""));
     skip(1);
     for (i = 0; i < game.inplan; i++) {
 	if ((game.state.plnets[i].known != unknown
@@ -42,16 +42,16 @@
 	    if (idebug && game.state.plnets[i].known==unknown)
 		proutn("(Unknown) ");
 	    proutn(cramlc(quadrant, game.state.plnets[i].w));
-	    proutn("   class ");
+	    proutn(_("   class "));
 	    proutn(classes[game.state.plnets[i].pclass]);
 	    proutn("   ");
-	    if (game.state.plnets[i].crystals <= 0) proutn("no ");
-	    prout("dilithium crystals present.");
+	    if (game.state.plnets[i].crystals <= 0) proutn(_("no "));
+	    prout(_("dilithium crystals present."));
 	    if (game.state.plnets[i].known==shuttle_down) 
-		prout("    Shuttle Craft Galileo on surface.");
+		prout(_("    Shuttle Craft Galileo on surface."));
 	}
     }
-    if (iknow==0) prout("No information available.");
+    if (iknow==0) prout(_("No information available."));
 }
 
 void orbit(void) 
@@ -59,25 +59,25 @@
     skip(1);
     chew();
     if (game.inorbit) {
-	prout("Already in standard orbit.");
+	prout(_("Already in standard orbit."));
 	return;
     }
     if (damaged(DWARPEN) && damaged(DIMPULS)) {
-	prout("Both warp and impulse engines damaged.");
+	prout(_("Both warp and impulse engines damaged."));
 	return;
     }
     if (game.plnet.x == 0 || abs(game.sector.x-game.plnet.x) > 1 || abs(game.sector.y-game.plnet.y) > 1) {
 	crmshp();
-	prout(" not adjacent to planet.");
+	prout(_(" not adjacent to planet."));
 	skip(1);
 	return;
     }
     game.optime = 0.02+0.03*Rand();
-    prout("Helmsman Sulu-  \"Entering standard orbit, Sir.\"");
+    prout(_("Helmsman Sulu-  \"Entering standard orbit, Sir.\""));
     newcnd();
     if (consumeTime()) return;
     game.height = (1400.0+7200.0*Rand());
-    prout("Sulu-  \"Entered orbit at altitude %.2f kilometers.\"", game.height);
+    prout(_("Sulu-  \"Entered orbit at altitude %.2f kilometers.\""), game.height);
     game.inorbit = true;
     game.ididit = true;
 }
@@ -87,24 +87,24 @@
     skip(1);
     chew();
     if (damaged(DSRSENS)) {
-	prout("Short range sensors damaged.");
+	prout(_("Short range sensors damaged."));
 	return;
     }
     if (!game.plnet.x && (game.options & OPTION_TTY)) {
-	prout("Spock- \"No planet in this quadrant, Captain.\"");
+	prout(_("Spock- \"No planet in this quadrant, Captain.\""));
 	return;
     }
     if ((game.plnet.x != 0)&& (game.state.plnets[game.iplnet].known == unknown)) {
-	prout("Spock-  \"Sensor scan for %s-", cramlc(quadrant, game.quadrant));
+	prout(_("Spock-  \"Sensor scan for %s-"), cramlc(quadrant, game.quadrant));
 	skip(1);
-	prout("         Planet at %s is of class %s.",
+	prout(_("         Planet at %s is of class %s."),
 	      cramlc(sector,game.plnet),
 	      classes[game.state.plnets[game.iplnet].pclass]);
 	if (game.state.plnets[game.iplnet].known==shuttle_down) 
-	    prout("         Sensors show Galileo still on surface.");
-	proutn("         Readings indicate");
-	if (game.state.plnets[game.iplnet].crystals == 0) proutn(" no");
-	prout(" dilithium crystals present.\"");
+	    prout(_("         Sensors show Galileo still on surface."));
+	proutn(_("         Readings indicate"));
+	if (game.state.plnets[game.iplnet].crystals == 0) proutn(_(" no"));
+	prout(_(" dilithium crystals present.\""));
 	if (game.state.plnets[game.iplnet].known == unknown) game.state.plnets[game.iplnet].known = known;
     }
 }
@@ -114,62 +114,62 @@
     chew();
     skip(1);
     if (damaged(DTRANSP)) {
-	prout("Transporter damaged.");
+	prout(_("Transporter damaged."));
 	if (!damaged(DSHUTTL) && (game.state.plnets[game.iplnet].known==shuttle_down || game.iscraft == 1)) {
 	    skip(1);
-	    proutn("Spock-  \"May I suggest the shuttle craft, Sir?\" ");
+	    proutn(_("Spock-  \"May I suggest the shuttle craft, Sir?\" "));
 	    if (ja() != 0) shuttle();
 	}
 	return;
     }
     if (!game.inorbit) {
 	crmshp();
-	prout(" not in standard orbit.");
+	prout(_(" not in standard orbit."));
 	return;
     }
     if (game.shldup) {
-	prout("Impossible to transport through shields.");
+	prout(_("Impossible to transport through shields."));
 	return;
     }
     if (game.state.plnets[game.iplnet].known==unknown) {
-	prout("Spock-  \"Captain, we have no information on this planet");
-	prout("  and Starfleet Regulations clearly state that in this situation");
-	prout("  you may not go down.\"");
+	prout(_("Spock-  \"Captain, we have no information on this planet"));
+	prout(_("  and Starfleet Regulations clearly state that in this situation"));
+	prout(_("  you may not go down.\""));
 	return;
     }
     if (game.landed==1) {
 	/* Coming from planet */
 	if (game.state.plnets[game.iplnet].known==shuttle_down) {
-	    proutn("Spock-  \"Wouldn't you rather take the Galileo?\" ");
+	    proutn(_("Spock-  \"Wouldn't you rather take the Galileo?\" "));
 	    if (ja() != 0) {
 		chew();
 		return;
 	    }
-	    prout("Your crew hides the Galileo to prevent capture by aliens.");
+	    prout(_("Your crew hides the Galileo to prevent capture by aliens."));
 	}
-	prout("Landing party assembled, ready to beam up.");
+	prout(_("Landing party assembled, ready to beam up."));
 	skip(1);
-	prout("Kirk whips out communicator...");
-	prouts("BEEP  BEEP  BEEP");
+	prout(_("Kirk whips out communicator..."));
+	prouts(_("BEEP  BEEP  BEEP"));
 	skip(2);
-	prout("\"Kirk to enterprise-  Lock on coordinates...energize.\"");
+	prout(_("\"Kirk to enterprise-  Lock on coordinates...energize.\""));
     }
     else {
 	/* Going to planet */
 	if (game.state.plnets[game.iplnet].crystals==0) {
-	    prout("Spock-  \"Captain, I fail to see the logic in");
-	    prout("  exploring a planet with no dilithium crystals.");
-	    proutn("  Are you sure this is wise?\" ");
+	    prout(_("Spock-  \"Captain, I fail to see the logic in"));
+	    prout(_("  exploring a planet with no dilithium crystals."));
+	    proutn(_("  Are you sure this is wise?\" "));
 	    if (ja()==0) {
 		chew();
 		return;
 	    }
 	}
-	prout("Scotty-  \"Transporter room ready, Sir.\"");
+	prout(_("Scotty-  \"Transporter room ready, Sir.\""));
 	skip(1);
-	prout("Kirk, and landing party prepare to beam down to planet surface.");
+	prout(_("Kirk and landing party prepare to beam down to planet surface."));
 	skip(1);
-	prout("Kirk-  \"Energize.\"");
+	prout(_("Kirk-  \"Energize.\""));
     }
     game.ididit=1;
     skip(1);
@@ -178,16 +178,16 @@
     if (Rand() > 0.98) {
 	prouts("BOOOIIIOOOIIOOOOIIIOIING . . .");
 	skip(2);
-	prout("Scotty-  \"Oh my God!  I've lost them.\"");
+	prout(_("Scotty-  \"Oh my God!  I've lost them.\""));
 	finish(FLOST);
 	return;
     }
     prouts(".    .   .  .  .  .  .E.E.EEEERRRRRIIIIIOOOHWW");
     skip(2);
-    prout("Transport complete.");
+    prout(_("Transport complete."));
     game.landed = -game.landed;
     if (game.landed==1 && game.state.plnets[game.iplnet].known==shuttle_down) {
-	prout("The shuttle craft Galileo is here!");
+	prout(_("The shuttle craft Galileo is here!"));
     }
     if (game.landed!=1 && game.imine==1) {
 	game.icrystl = 1;
@@ -202,31 +202,31 @@
     skip(1);
     chew();
     if (game.landed!= 1) {
-	prout("Mining party not on planet.");
+	prout(_("Mining party not on planet."));
 	return;
     }
     if (game.state.plnets[game.iplnet].crystals == MINED) {
-	prout("This planet has already been strip-mined for dilithium.");
+	prout(_("This planet has already been strip-mined for dilithium."));
 	return;
     }
     else if (game.state.plnets[game.iplnet].crystals == 0) {
-	prout("No dilithium crystals on this planet.");
+	prout(_("No dilithium crystals on this planet."));
 	return;
     }
     if (game.imine == 1) {
-	prout("You've already mined enough crystals for this trip.");
+	prout(_("You've already mined enough crystals for this trip."));
 	return;
     }
     if (game.icrystl == 1 && game.cryprob == 0.05) {
-	proutn("With all those fresh crystals aboard the ");
+	proutn(_("With all those fresh crystals aboard the "));
 	crmshp();
 	skip(1);
-	prout("there's no reason to mine more at this time.");
+	prout(_("there's no reason to mine more at this time."));
 	return;
     }
     game.optime = (0.1+0.2*Rand())*game.state.plnets[game.iplnet].pclass;
     if (consumeTime()) return;
-    prout("Mining operation complete.");
+    prout(_("Mining operation complete."));
     game.state.plnets[game.iplnet].crystals = MINED;
     game.imine = 1;
     game.ididit=1;
@@ -238,47 +238,47 @@
     skip(1);
     chew();
     if (game.icrystl!=1) {
-	prout("No dilithium crystals available.");
+	prout(_("No dilithium crystals available."));
 	return;
     }
     if (game.energy >= 1000) {
-	prout("Spock-  \"Captain, Starfleet Regulations prohibit such an operation");
-	prout("  except when game.condition Yellow exists.");
+	prout(_("Spock-  \"Captain, Starfleet Regulations prohibit such an operation"));
+	prout(_("  except when condition Yellow exists."));
 	return;
     }
-    prout("Spock- \"Captain, I must warn you that loading");
-    prout("  raw dilithium crystals into the ship's power");
-    prout("  system may risk a severe explosion.");
-    proutn("  Are you sure this is wise?\" ");
+    prout(_("Spock- \"Captain, I must warn you that loading"));
+    prout(_("  raw dilithium crystals into the ship's power"));
+    prout(_("  system may risk a severe explosion."));
+    proutn(_("  Are you sure this is wise?\" "));
     if (ja()==0) {
 	chew();
 	return;
     }
     skip(1);
-    prout("Engineering Officer Scott-  \"(GULP) Aye Sir.");
-    prout("  Mr. Spock and I will try it.\"");
+    prout(_("Engineering Officer Scott-  \"(GULP) Aye Sir."));
+    prout(_("  Mr. Spock and I will try it.\""));
     skip(1);
-    prout("Spock-  \"Crystals in place, Sir.");
-    prout("  Ready to activate circuit.\"");
+    prout(_("Spock-  \"Crystals in place, Sir."));
+    prout(_("  Ready to activate circuit.\""));
     skip(1);
-    prouts("Scotty-  \"Keep your fingers crossed, Sir!\"");
+    prouts(_("Scotty-  \"Keep your fingers crossed, Sir!\""));
     skip(1);
     if (Rand() <= game.cryprob) {
-	prouts("  \"Activating now! - - No good!  It's***");
+	prouts(_("  \"Activating now! - - No good!  It's***"));
 	skip(2);
-	prouts("***RED ALERT!  RED A*L********************************");
+	prouts(_("***RED ALERT!  RED A*L********************************"));
 	skip(1);
 	stars();
-	prouts("******************   KA-BOOM!!!!   *******************");
+	prouts(_("******************   KA-BOOM!!!!   *******************"));
 	skip(1);
 	kaboom();
 	return;
     }
     game.energy += 5000.0*(1.0 + 0.9*Rand());
-    prouts("  \"Activating now! - - ");
-    prout("The instruments");
-    prout("   are going crazy, but I think it's");
-    prout("   going to work!!  Congratulations, Sir!\"");
+    prouts(_("  \"Activating now! - - "));
+    prout(_("The instruments"));
+    prout(_("   are going crazy, but I think it's"));
+    prout(_("   going to work!!  Congratulations, Sir!\""));
     game.cryprob *= 2.0;
     game.ididit=1;
 }
@@ -290,46 +290,46 @@
     if(damaged(DSHUTTL)) {
 	if (game.damage[DSHUTTL] == -1.0) {
 	    if (game.inorbit && game.state.plnets[game.iplnet].known == shuttle_down)
-		prout("Ye Faerie Queene has no shuttle craft bay to dock it at.");
+		prout(_("Ye Faerie Queene has no shuttle craft bay to dock it at."));
 	    else
-		prout("Ye Faerie Queene had no shuttle craft.");
+		prout(_("Ye Faerie Queene had no shuttle craft."));
 	}
 	else if (game.damage[DSHUTTL] > 0)
-	    prout("The Galileo is damaged.");
+	    prout(_("The Galileo is damaged."));
 	else /* game.damage[DSHUTTL] < 0 */ 
-	    prout("Shuttle craft is now serving Big Macs.");
+	    prout(_("Shuttle craft is now serving Big Macs."));
 	return;
     }
     if (!game.inorbit) {
 	crmshp();
-	prout(" not in standard orbit.");
+	prout(_(" not in standard orbit."));
 	return;
     }
     if ((game.state.plnets[game.iplnet].known != shuttle_down) && game.iscraft != 1) {
-	prout("Shuttle craft not currently available.");
+	prout(_("Shuttle craft not currently available."));
 	return;
     }
     if (game.landed==-1 && game.state.plnets[game.iplnet].known==shuttle_down) {
-	prout("You will have to beam down to retrieve the shuttle craft.");
+	prout(_("You will have to beam down to retrieve the shuttle craft."));
 	return;
     }
     if (game.shldup || game.condit == IHDOCKED) {
-	prout("Shuttle craft cannot pass through shields.");
+	prout(_("Shuttle craft cannot pass through shields."));
 	return;
     }
     if (game.state.plnets[game.iplnet].known==unknown) {
-	prout("Spock-  \"Captain, we have no information on this planet");
-	prout("  and Starfleet Regulations clearly state that in this situation");
-	prout("  you may not fly down.\"");
+	prout(_("Spock-  \"Captain, we have no information on this planet"));
+	prout(_("  and Starfleet Regulations clearly state that in this situation"));
+	prout(_("  you may not fly down.\""));
 	return;
     }
     game.optime = 3.0e-5*game.height;
     if (game.optime >= 0.8*game.state.remtime) {
-	prout("First Officer Spock-  \"Captain, I compute that such");
-	proutn("  a maneuver would require approximately 2d%% of our",
+	prout(_("First Officer Spock-  \"Captain, I compute that such"));
+	proutn(_("  a maneuver would require approximately %2d%% of our"),
 	       (int)(100*game.optime/game.state.remtime));
-	prout("remaining time.");
-	proutn("Are you sure this is wise?\" ");
+	prout(_("remaining time."));
+	proutn(_("Are you sure this is wise?\" "));
 	if (ja()==0) {
 	    game.optime = 0.0;
 	    return;
@@ -340,29 +340,29 @@
 	if (game.iscraft==1) {
 	    /* Galileo on ship! */
 	    if (!damaged(DTRANSP)) {
-		proutn("Spock-  \"Would you rather use the transporter?\" ");
+		proutn(_("Spock-  \"Would you rather use the transporter?\" "));
 		if (ja() != 0) {
 		    beam();
 		    return;
 		}
-		proutn("Shuttle crew");
+		proutn(_("Shuttle crew"));
 	    }
 	    else
-		proutn("Rescue party");
-	    prout(" boards Galileo and swoops toward planet surface.");
+		proutn(_("Rescue party"));
+	    prout(_(" boards Galileo and swoops toward planet surface."));
 	    game.iscraft = 0;
 	    skip(1);
 	    if (consumeTime()) return;
 	    game.state.plnets[game.iplnet].known=shuttle_down;
-	    prout("Trip complete.");
+	    prout(_("Trip complete."));
 	    return;
 	}
 	else {
 	    /* Ready to go back to ship */
-	    prout("You and your mining party board the");
-	    prout("shuttle craft for the trip back to the Enterprise.");
+	    prout(_("You and your mining party board the"));
+	    prout(_("shuttle craft for the trip back to the Enterprise."));
 	    skip(1);
-	    prout("The short hop begins . . .");
+	    prout(_("The short hop begins . . ."));
 	    game.state.plnets[game.iplnet].known=known;
 	    game.icraft = 1;
 	    skip(1);
@@ -375,17 +375,17 @@
 		game.cryprob = 0.05;
 	    }
 	    game.imine = 0;
-	    prout("Trip complete.");
+	    prout(_("Trip complete."));
 	    return;
 	}
     }
     else {
 	/* Kirk on ship */
 	/* and so is Galileo */
-	prout("Mining party assembles in the hangar deck,");
-	prout("ready to board the shuttle craft \"Galileo\".");
+	prout(_("Mining party assembles in the hangar deck,"));
+	prout(_("ready to board the shuttle craft \"Galileo\"."));
 	skip(1);
-	prouts("The hangar doors open; the trip begins.");
+	prouts(_("The hangar doors open; the trip begins."));
 	skip(1);
 	game.icraft = 1;
 	game.iscraft = 0;
@@ -393,7 +393,7 @@
 	game.state.plnets[game.iplnet].known = shuttle_down;
 	game.landed = 1;
 	game.icraft = 0;
-	prout("Trip complete");
+	prout(_("Trip complete"));
 	return;
     }
 }
@@ -406,52 +406,52 @@
     skip(1);
     chew();
     if (game.ship != IHE) {
-	prout("Ye Faerie Queene has no death ray.");
+	prout(_("Ye Faerie Queene has no death ray."));
 	return;
     }
     if (game.nenhere==0) {
-	prout("Sulu-  \"But Sir, there are no enemies in this quadrant.\"");
+	prout(_("Sulu-  \"But Sir, there are no enemies in this quadrant.\""));
 	return;
     }
     if (damaged(DDRAY)) {
-	prout("Death Ray is damaged.");
+	prout(_("Death Ray is damaged."));
 	return;
     }
-    prout("Spock-  \"Captain, the 'Experimental Death Ray'");
-    prout("  is highly unpredictible.  Considering the alternatives,");
-    proutn("  are you sure this is wise?\" ");
+    prout(_("Spock-  \"Captain, the 'Experimental Death Ray'"));
+    prout(_("  is highly unpredictible.  Considering the alternatives,"));
+    proutn(_("  are you sure this is wise?\" "));
     if (ja()==0) return;
-    prout("Spock-  \"Acknowledged.\"");
+    prout(_("Spock-  \"Acknowledged.\""));
     skip(1);
     game.ididit=1;
-    prouts("WHOOEE ... WHOOEE ... WHOOEE ... WHOOEE");
+    prouts(_("WHOOEE ... WHOOEE ... WHOOEE ... WHOOEE"));
     skip(1);
-    prout("Crew scrambles in emergency preparation.");
-    prout("Spock and Scotty ready the death ray and");
-    prout("prepare to channel all ship's power to the device.");
+    prout(_("Crew scrambles in emergency preparation."));
+    prout(_("Spock and Scotty ready the death ray and"));
+    prout(_("prepare to channel all ship's power to the device."));
     skip(1);
-    prout("Spock-  \"Preparations complete, sir.\"");
-    prout("Kirk-  \"Engage!\"");
+    prout(_("Spock-  \"Preparations complete, sir.\""));
+    prout(_("Kirk-  \"Engage!\""));
     skip(1);
-    prouts("WHIRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR");
+    prouts(_("WHIRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"));
     skip(1);
     dprob = .30;
     if (game.options & OPTION_PLAIN)
 	dprob = .5;
     if (r > dprob) {
-	prouts("Sulu- \"Captain!  It's working!\"");
+	prouts(_("Sulu- \"Captain!  It's working!\""));
 	skip(2);
 	while (game.nenhere > 0)
 	    deadkl(game.ks[1], game.quad[game.ks[1].x][game.ks[1].y],game.ks[1].x,game.ks[1].y);
-	prout("Ensign Chekov-  \"Congratulations, Captain!\"");
+	prout(_("Ensign Chekov-  \"Congratulations, Captain!\""));
 	if (KLINGREM == 0) finish(FWON);
 	if ((game.options & OPTION_PLAIN) == 0) {
-	    prout("Spock-  \"Captain, I believe the `Experimental Death Ray'");
+	    prout(_("Spock-  \"Captain, I believe the `Experimental Death Ray'"));
 	    if (Rand() <= 0.05) {
-		prout("   is still operational.\"");
+		prout(_("   is still operational.\""));
 	    }
 	    else {
-		prout("   has been rendered nonfunctional.\"");
+		prout(_("   has been rendered nonfunctional.\""));
 		game.damage[DDRAY] = 39.95;
 	    }
 	}
@@ -459,60 +459,62 @@
     }
     r = Rand();	// Pick failure method 
     if (r <= .30) {
-	prouts("Sulu- \"Captain!  It's working!\"");
+	prouts(_("Sulu- \"Captain!  It's working!\""));
 	skip(1);
-	prouts("***RED ALERT!  RED ALERT!");
+	prouts(_("***RED ALERT!  RED ALERT!"));
 	skip(1);
-	prout("***MATTER-ANTIMATTER IMPLOSION IMMINENT!");
+	prout(_("***MATTER-ANTIMATTER IMPLOSION IMMINENT!"));
 	skip(1);
-	prouts("***RED ALERT!  RED A*L********************************");
+	prouts(_("***RED ALERT!  RED A*L********************************"));
 	skip(1);
 	stars();
-	prouts("******************   KA-BOOM!!!!   *******************");
+	prouts(_("******************   KA-BOOM!!!!   *******************"));
 	skip(1);
 	kaboom();
 	return;
     }
     if (r <= .55) {
-	prouts("Sulu- \"Captain!  Yagabandaghangrapl, brachriigringlanbla!\"");
+	prouts(_("Sulu- \"Captain!  Yagabandaghangrapl, brachriigringlanbla!\""));
 	skip(1);
-	prout("Lt. Uhura-  \"Graaeek!  Graaeek!\"");
+	prout(_("Lt. Uhura-  \"Graaeek!  Graaeek!\""));
 	skip(1);
-	prout("Spock-  \"Fascinating!  . . . All humans aboard");
-	prout("  have apparently been transformed into strange mutations.");
-	prout("  Vulcans do not seem to be affected.");
+	prout(_("Spock-  \"Fascinating!  . . . All humans aboard"));
+	prout(_("  have apparently been transformed into strange mutations."));
+	prout(_("  Vulcans do not seem to be affected."));
 	skip(1);
-	prout("Kirk-  \"Raauch!  Raauch!\"");
+	prout(_("Kirk-  \"Raauch!  Raauch!\""));
 	finish(FDRAY);
 	return;
     }
     if (r <= 0.75) {
 	int i,j;
-	prouts("Sulu- \"Captain!  It's   --WHAT?!?!\"");
+	prouts(_("Sulu- \"Captain!  It's   --WHAT?!?!\""));
 	skip(2);
-	proutn("Spock-  \"I believe the word is");
-	prouts(" *ASTONISHING*");
-	prout(" Mr. Sulu.");
+	proutn(_("Spock-  \"I believe the word is"));
+	prouts(_(" *ASTONISHING*"));
+	prout(_(" Mr. Sulu."));
 	for_sectors(i)
 	    for_sectors(j)
 		if (game.quad[i][j] == IHDOT) game.quad[i][j] = IHQUEST;
-	prout("  Captain, our quadrant is now infested with");
-	prouts(" - - - - - -  *THINGS*.");
+	prout(_("  Captain, our quadrant is now infested with"));
+	prouts(_(" - - - - - -  *THINGS*."));
 	skip(1);
-	prout("  I have no logical explanation.\"");
+	prout(_("  I have no logical explanation.\""));
 	return;
     }
-    prouts("Sulu- \"Captain!  The Death Ray is creating tribbles!\"");
+    prouts(_("Sulu- \"Captain!  The Death Ray is creating tribbles!\""));
     skip(1);
-    prout("Scotty-  \"There are so many tribbles down here");
-    prout("  in Engineering, we can't move for 'em, Captain.\"");
+    prout(_("Scotty-  \"There are so many tribbles down here"));
+    prout(_("  in Engineering, we can't move for 'em, Captain.\""));
     finish(FTRIBBLE);
     return;
 }
 
 char *systemname(int pindx)
 {
-    static char	*names[NINHAB] =
+    /* the below array shoud not be static, or it won't gettextize
+     * because of the early initialization. */
+    char *names[NINHAB] =
     {
 	/*
 	 * I used <http://www.memory-alpha.org> to find planets
@@ -524,49 +526,49 @@
 	 */
 	"ERROR",
 	// Federation Worlds
-	"Andoria (Fesoan)",	/* several episodes */
-	"Tellar Prime (Miracht)",	/* TOS: "Journey to Babel" */
-	"Vulcan (T'Khasi)",	/* many episodes */
-	"Medusa",		/* TOS: "Is There in Truth No Beauty?" */
-	"Argelius II (Nelphia)",/* TOS: "Wolf in the Fold" ("IV" in BSD) */
-	"Ardana",		/* TOS: "The Cloud Minders" */
-	"Catulla (Cendo-Prae)",	/* TOS: "The Way to Eden" */
-	"Gideon",		/* TOS: "The Mark of Gideon" */
-	"Aldebaran III",	/* TOS: "The Deadly Years" */
-	"Alpha Majoris I",	/* TOS: "Wolf in the Fold" */
-	"Altair IV",		/* TOS: "Amok Time */
-	"Ariannus",		/* TOS: "Let That Be Your Last Battlefield" */
-	"Benecia"		/* TOS: "The Conscience of the King" */
-	"Beta Niobe I (Sarpeidon)",	/* TOS: "All Our Yesterdays" */
-	"Alpha Carinae II",	/* TOS: "The Ultimate Computer" */
-	"Capella IV (Kohath)",	/* TOS: "Friday's Child" (Class G) */
-	"Daran V",		/* TOS: "For the World is Hollow and I Have Touched the Sky" */
-	"Deneb II",		/* TOS: "Wolf in the Fold" ("IV" in BSD) */
-	"Eminiar VII",		/* TOS: "A Taste of Armageddon" */
-	"Gamma Canaris IV",	/* TOS: "Metamorphosis" */
-	"Gamma Tranguli VI (Vaalel)",	/* TOS: "The Apple" */
-	"Ingraham B",		/* TOS: "Operation: Annihilate" */
-	"Janus IV",		/* TOS: "The Devil in the Dark" */
-	"Makus III",		/* TOS: "The Galileo Seven" */
-	"Marcos XII",		/* TOS: "And the Children Shall Lead", */
-	"Omega IV",		/* TOS: "The Omega Glory" */
-	"Regulus V",		/* TOS: "Amok Time */
-	"Deeva",		/* TOS: "Operation -- Annihilate!" */
+	_("Andoria (Fesoan)"),	/* several episodes */
+	_("Tellar Prime (Miracht)"),	/* TOS: "Journey to Babel" */
+	_("Vulcan (T'Khasi)"),	/* many episodes */
+	_("Medusa"),		/* TOS: "Is There in Truth No Beauty?" */
+	_("Argelius II (Nelphia)"),/* TOS: "Wolf in the Fold" ("IV" in BSD) */
+	_("Ardana"),		/* TOS: "The Cloud Minders" */
+	_("Catulla (Cendo-Prae)"),	/* TOS: "The Way to Eden" */
+	_("Gideon"),		/* TOS: "The Mark of Gideon" */
+	_("Aldebaran III"),	/* TOS: "The Deadly Years" */
+	_("Alpha Majoris I"),	/* TOS: "Wolf in the Fold" */
+	_("Altair IV"),		/* TOS: "Amok Time */
+	_("Ariannus"),		/* TOS: "Let That Be Your Last Battlefield" */
+	_("Benecia"),		/* TOS: "The Conscience of the King" */
+	_("Beta Niobe I (Sarpeidon)"),	/* TOS: "All Our Yesterdays" */
+	_("Alpha Carinae II"),	/* TOS: "The Ultimate Computer" */
+	_("Capella IV (Kohath)"),	/* TOS: "Friday's Child" (Class G) */
+	_("Daran V"),		/* TOS: "For the World is Hollow and I Have Touched the Sky" */
+	_("Deneb II"),		/* TOS: "Wolf in the Fold" ("IV" in BSD) */
+	_("Eminiar VII"),		/* TOS: "A Taste of Armageddon" */
+	_("Gamma Canaris IV"),	/* TOS: "Metamorphosis" */
+	_("Gamma Tranguli VI (Vaalel)"),	/* TOS: "The Apple" */
+	_("Ingraham B"),		/* TOS: "Operation: Annihilate" */
+	_("Janus IV"),		/* TOS: "The Devil in the Dark" */
+	_("Makus III"),		/* TOS: "The Galileo Seven" */
+	_("Marcos XII"),		/* TOS: "And the Children Shall Lead", */
+	_("Omega IV"),		/* TOS: "The Omega Glory" */
+	_("Regulus V"),		/* TOS: "Amok Time */
+	_("Deeva"),		/* TOS: "Operation -- Annihilate!" */
 	/* Worlds from BSD Trek */
-	"Rigel II",		/* TOS: "Shore Leave" ("III" in BSD) */
-	"Beta III",		/* TOS: "The Return of the Archons" */
-	"Triacus",		/* TOS: "And the Children Shall Lead", */
-	"Exo III",		/* TOS: "What Are Little Girls Made Of?" (Class P) */
+	_("Rigel II"),		/* TOS: "Shore Leave" ("III" in BSD) */
+	_("Beta III"),		/* TOS: "The Return of the Archons" */
+	_("Triacus"),		/* TOS: "And the Children Shall Lead", */
+	_("Exo III"),		/* TOS: "What Are Little Girls Made Of?" (Class P) */
 #if 0
 	// Others
-	"Hansen's Planet",	/* TOS: "The Galileo Seven" */
-	"Taurus IV",		/* TOS: "The Galileo Seven" (class G) */
-	"Antos IV (Doraphane)",	/* TOS: "Whom Gods Destroy", "Who Mourns for Adonais?" */
-	"Izar",			/* TOS: "Whom Gods Destroy" */
-	"Tiburon",		/* TOS: "The Way to Eden" */
-	"Merak II",		/* TOS: "The Cloud Minders" */ 
-	"Coridan (Desotriana)",	/* TOS: "Journey to Babel" */
-	"Iotia",		/* TOS: "A Piece of the Action" */
+	_("Hansen's Planet"),	/* TOS: "The Galileo Seven" */
+	_("Taurus IV"),		/* TOS: "The Galileo Seven" (class G) */
+	_("Antos IV (Doraphane)"),	/* TOS: "Whom Gods Destroy", "Who Mourns for Adonais?" */
+	_("Izar"),			/* TOS: "Whom Gods Destroy" */
+	_("Tiburon"),		/* TOS: "The Way to Eden" */
+	_("Merak II"),		/* TOS: "The Cloud Minders" */ 
+	_("Coridan (Desotriana)"),	/* TOS: "Journey to Babel" */
+	_("Iotia"),		/* TOS: "A Piece of the Action" */
 #endif
    };
 

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-19 18:13:35 UTC (rev 597)
+++ trunk/src/reports.c	2006-09-19 18:44:07 UTC (rev 598)
@@ -7,22 +7,22 @@
 {
     if (!curt) {
 	if (is_scheduled(FCDBAS)) {
-	    prout("Starbase in %s is currently under Commander attack.",
+	    prout(_("Starbase in %s is currently under Commander attack."),
 		  cramlc(quadrant, game.battle));
-	    prout("It can hold out until Stardate %d.", 
+	    prout(_("It can hold out until Stardate %d."),
 		  (int)scheduled(FCDBAS));
 	}
 	if (game.isatb == 1) {
-	    prout("Starbase in %s is under Super-commander attack.",
+	    prout(_("Starbase in %s is under Super-commander attack."),
 		  cramlc(quadrant, game.state.kscmdr));
-	    prout("It can hold out until Stardate %d.", 
+	    prout(_("It can hold out until Stardate %d."),
 		  (int)scheduled(FSCDBAS));
 	}
     } else {
         if (is_scheduled(FCDBAS))
-	    proutn("Base in %i - %i attacked by C. Alive until %.1f", game.battle.x, game.battle.y, scheduled(FCDBAS));
+	    proutn(_("Base in %i - %i attacked by C. Alive until %.1f"), game.battle.x, game.battle.y, scheduled(FCDBAS));
         if (game.isatb)
-	    proutn("Base in %i - %i attacked by S. Alive until %.1f", game.state.kscmdr.x, game.state.kscmdr.y, scheduled(FSCDBAS));
+	    proutn(_("Base in %i - %i attacked by S. Alive until %.1f"), game.state.kscmdr.x, game.state.kscmdr.y, scheduled(FSCDBAS));
     }
     clreol();
 }
@@ -33,7 +33,7 @@
     char *s1,*s2,*s3;
 
     chew();
-    s1 = (game.thawed?"game.thawed ":"");
+    s1 = (game.thawed?"thawed ":"");
     switch (game.length) {
     case 1: s2="short"; break;
     case 2: s2="medium"; break;
@@ -49,56 +49,56 @@
     default: s3="skilled"; break;
     }
     prout("");
-    prout("You %s playing a %s%s %s game.",
-	  game.alldone? "were": "are now", s1, s2, s3);
-    if (game.skill>SKILL_GOOD && game.thawed && !game.alldone) prout("No plaque is allowed.");
-    if (game.tourn) prout("This is tournament game %d.", game.tourn);
-    prout("Your secret password is \"%s\"",game.passwd);
-    proutn("%d of %d Klingons have been killed", KLINGKILLED, INKLINGTOT);
-    if (NKILLC) prout(", including %d Commander%s.", NKILLC, NKILLC==1?"":"s");
-    else if (NKILLK + NKILLSC > 0) prout(", but no Commanders.");
+    prout(_("You %s playing a %s%s %s game."),
+	  game.alldone? _("were") : _("are now"), s1, s2, s3);
+    if (game.skill>SKILL_GOOD && game.thawed && !game.alldone) prout(_("No plaque is allowed."));
+    if (game.tourn) prout(_("This is tournament game %d."), game.tourn);
+    prout(_("Your secret password is \"%s\""),game.passwd);
+    proutn(_("%d of %d Klingons have been killed"), KLINGKILLED, INKLINGTOT);
+    if (NKILLC) prout(_(", including %d Commander%s."), NKILLC, NKILLC==1?"":_("s"));
+    else if (NKILLK + NKILLSC > 0) prout(_(", but no Commanders."));
     else prout(".");
-    if (game.skill > SKILL_FAIR) prout("The Super Commander has %sbeen destroyed.",
-				  game.state.nscrem?"not ":"");
+    if (game.skill > SKILL_FAIR) prout(_("The Super Commander has %sbeen destroyed."),
+				  game.state.nscrem?_("not "):"");
     if (game.state.rembase != game.inbase) {
-	proutn("There ");
-	if (game.inbase-game.state.rembase==1) proutn("has been 1 base");
+	proutn(_("There "));
+	if (game.inbase-game.state.rembase==1) proutn(_("has been 1 base"));
 	else {
-	    proutn("have been %d bases", game.inbase-game.state.rembase);
+	    proutn(_("have been %d bases"), game.inbase-game.state.rembase);
 	}
-	prout(" destroyed, %d remaining.", game.state.rembase);
+	prout(_(" destroyed, %d remaining."), game.state.rembase);
     }
-    else prout("There are %d bases.", game.inbase);
+    else prout(_("There are %d bases."), game.inbase);
     if (!damaged(DRADIO) || game.condit == IHDOCKED || game.iseenit) {
 	/* Don't report this if not seen and
 	   either the radio is dead or not at base! */
 	attakreport(0);
 	game.iseenit = 1;
     }
-    if (game.casual) prout("%d casualt%s suffered so far.",
+    if (game.casual) prout(_("%d casualt%s suffered so far."),
 		      game.casual, game.casual==1? "y" : "ies");
-    if (game.nhelp) prout("There were %d call%s for help.",
-		     game.nhelp, game.nhelp==1 ? "" : "s");
+    if (game.nhelp) prout(_("There were %d call%s for help."),
+		     game.nhelp, game.nhelp==1 ? "" : _("s"));
     if (game.ship == IHE) {
-	proutn("You have ");
+	proutn(_("You have "));
 	if (game.nprobes) proutn("%d", game.nprobes);
-	else proutn("no");
-	proutn(" deep space probe");
-	if (game.nprobes!=1) proutn("s");
+	else proutn(_("no"));
+	proutn(_(" deep space probe"));
+	if (game.nprobes!=1) proutn(_("s"));
 	prout(".");
     }
     if ((!damaged(DRADIO) || game.condit == IHDOCKED)
 		&& is_scheduled(FDSPROB)) {
 	if (game.isarmed) 
-	    proutn("An armed deep space probe is in");
+	    proutn(_("An armed deep space probe is in"));
 	else
-	    proutn("A deep space probe is in");
+	    proutn(_("A deep space probe is in"));
 	proutn(cramlc(quadrant, game.probec));
 	prout(".");
     }
     if (game.icrystl) {
 	if (game.cryprob <= .05)
-	    prout("Dilithium crystals aboard ship... not yet used.");
+	    prout(_("Dilithium crystals aboard ship... not yet used."));
 	else {
 	    int i=0;
 	    double ai = 0.05;
@@ -106,8 +106,8 @@
 		ai *= 2.0;
 		i++;
 	    }
-	    prout("Dilithium crystals have been used %d time%s.",
-		  i, i==1? "" : "s");
+	    prout(_("Dilithium crystals have been used %d time%s."),
+		  i, i==1? "" : _("s"));
 	}
     }
     skip(1);
@@ -120,13 +120,13 @@
     if (damaged(DLRSENS)) {
 	/* Now allow base's sensors if docked */
 	if (game.condit != IHDOCKED) {
-	    prout("LONG-RANGE SENSORS DAMAGED.");
+	    prout(_("LONG-RANGE SENSORS DAMAGED."));
 	    return;
 	}
-	prout("Starbase's long-range scan");
+	prout(_("Starbase's long-range scan"));
     }
     else {
-	prout("Long-range scan");
+	prout(_("Long-range scan"));
     }
     for (x = game.quadrant.x-1; x <= game.quadrant.x+1; x++) {
 	proutn(" ");
@@ -158,8 +158,8 @@
     for (i = 0; i < NDEVICES; i++) {
 	if (damaged(i)) {
 	    if (!jdam) {
-		prout("DEVICE            -REPAIR TIMES-");
-		prout("                IN FLIGHT   DOCKED");
+		prout(_("DEVICE            -REPAIR TIMES-"));
+		prout(_("                IN FLIGHT   DOCKED"));
 		jdam = true;
 	    }
 	    prout("  %16s %8.2f  %8.2f", 
@@ -168,7 +168,7 @@
 		  game.docfac*game.damage[i]+0.005);
 	}
     }
-    if (!jdam) prout("All devices functional.");
+    if (!jdam) prout(_("All devices functional."));
 }
 
 void rechart(void)
@@ -194,13 +194,13 @@
 	rechart();
 
     if (game.lastchart < game.state.date && game.condit == IHDOCKED) {
-	prout("Spock-  \"I revised the Star Chart from the starbase's records.\"");
+	prout(_("Spock-  \"I revised the Star Chart from the starbase's records.\""));
 	rechart();
     }
 
-    if (nn == 0) prout("       STAR CHART FOR THE KNOWN GALAXY");
+    if (nn == 0) prout(_("       STAR CHART FOR THE KNOWN GALAXY"));
     if (game.state.date > game.lastchart)
-	prout("(Last surveillance update %d stardates ago).",
+	prout(_("(Last surveillance update %d stardates ago)."),
 	      (int)(game.state.date-game.lastchart));
     prout("      1    2    3    4    5    6    7    8");
     for_quadrants(i) {
@@ -258,7 +258,7 @@
     int t, dam = 0;
     switch (req) {
     case 1:
-	proutn("Stardate      %.1f, Time Left %.2f", game.state.date, game.state.remtime);
+	proutn(_("Stardate      %.1f, Time Left %.2f"), game.state.date, game.state.remtime);
 	break;
     case 2:
 	if (game.condit != IHDOCKED) newcnd();
@@ -272,55 +272,55 @@
 	for (t=0;t<NDEVICES;t++)
 	    if (game.damage[t]>0) 
 		dam++;
-	proutn("Condition     %s, %i DAMAGES", cp, dam);
+	proutn(_("Condition     %s, %i DAMAGES"), cp, dam);
 	break;
     case 3:
-	proutn("Position      %d - %d , %d - %d",
+	proutn(_("Position      %d - %d , %d - %d"),
 	       game.quadrant.x, game.quadrant.y, game.sector.x, game.sector.y);
 	break;
     case 4:
-	proutn("Life Support  ");
+	proutn(_("Life Support  "));
 	if (damaged(DLIFSUP)) {
 	    if (game.condit == IHDOCKED)
-		proutn("DAMAGED, Base provides");
+		proutn(_("DAMAGED, Base provides"));
 	    else
-		proutn("DAMAGED, reserves=%4.2f", game.lsupres);
+		proutn(_("DAMAGED, reserves=%4.2f"), game.lsupres);
 	}
 	else
-	    proutn("ACTIVE");
+	    proutn(_("ACTIVE"));
 	break;
     case 5:
-	proutn("Warp Factor   %.1f", game.warpfac);
+	proutn(_("Warp Factor   %.1f"), game.warpfac);
 	break;
     case 6:
-	proutn("Energy        %.2f", game.energy);
+	proutn(_("Energy        %.2f"), game.energy);
 	if (game.icrystl && (game.options & OPTION_SHOWME))	/* ESR */
-	    proutn(" (have crystals)");
+	    proutn(_(" (have crystals)"));
 	break;
     case 7:
-	proutn("Torpedoes     %d", game.torps);
+	proutn(_("Torpedoes     %d"), game.torps);
 	break;
     case 8:
-	proutn("Shields       ");
+	proutn(_("Shields       "));
 	if (damaged(DSHIELD))
-	    proutn("DAMAGED,");
+	    proutn(_("DAMAGED,"));
 	else if (game.shldup)
-	    proutn("UP,");
+	    proutn(_("UP,"));
 	else
-	    proutn("DOWN,");
-	proutn(" %d%% %.1f units",
+	    proutn(_("DOWN,"));
+	proutn(_(" %d%% %.1f units"),
 	       (int)((100.0*game.shield)/game.inshld + 0.5), game.shield);
 	break;
     case 9:
-	proutn("Klingons Left %d", KLINGREM);
+	proutn(_("Klingons Left %d"), KLINGREM);
 	break;
     case 10:
 	if (game.options & OPTION_WORLDS) {
 	    int here = game.state.galaxy[game.quadrant.x][game.quadrant.y].planet;
 	    if (here != NOPLANET && game.state.plnets[here].inhabited != UNINHABITED)
-		proutn("Major system  %s", systemname(here));
+		proutn(_("Major system  %s"), systemname(here));
 	    else
-		proutn("Sector is uninhabited");
+		proutn(_("Sector is uninhabited"));
 	}
 
 	break;
@@ -343,13 +343,13 @@
 	if (damaged(DSRSENS)) {
 	    /* Allow base's sensors if docked */
 	    if (game.condit != IHDOCKED) {
-		prout("   S.R. SENSORS DAMAGED!");
+		prout(_("   S.R. SENSORS DAMAGED!"));
 		goodScan=false;
 	    }
 	    else
-		prout("  [Using Base's sensors]");
+		prout(_("  [Using Base's sensors]"));
 	}
-	else prout("     Short-range scan");
+	else prout(_("     Short-range scan"));
 	if (goodScan && !damaged(DRADIO)) { 
 	    game.state.chart[game.quadrant.x][game.quadrant.y].klingons = game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons;
 	    game.state.chart[game.quadrant.x][game.quadrant.y].starbase = game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase;
@@ -364,15 +364,15 @@
 	break;
     case SCAN_REQUEST:
 	while (scan() == IHEOL)
-	    proutn("Information desired? ");
+	    proutn(_("Information desired? "));
 	chew();
 	for (req = 1; req <= sizeof(requests)/sizeof(requests[0]); req++)
 	    if (strncmp(citem,requests[req],min(2,strlen(citem)))==0)
 		break;
 	if (req > sizeof(requests)/sizeof(requests[0])) {
-	    prout("UNRECOGNIZED REQUEST. Legal requests are:");
-	    prout("  date, condition, position, lsupport, warpfactor,");
-	    prout("  energy, torpedoes, shields, klingons, time, system, bases.");
+	    prout(_("UNRECOGNIZED REQUEST. Legal requests are:"));
+	    prout(_("  date, condition, position, lsupport, warpfactor,"));
+	    prout(_("  energy, torpedoes, shields, klingons, time, system, bases."));
 	    return false;
 	}
 	// no break
@@ -411,14 +411,14 @@
     bool wfl, prompt = false;
     double ttime, twarp, tpower;
     if (damaged(DCOMPTR)) {
-	prout("COMPUTER DAMAGED, USE A POCKET CALCULATOR.");
+	prout(_("COMPUTER DAMAGED, USE A POCKET CALCULATOR."));
 	skip(1);
 	return;
     }
     if (scan() != IHREAL) {
 	prompt = true;
 	chew();
-	proutn("Destination quadrant and/or sector? ");
+	proutn(_("Destination quadrant and/or sector? "));
 	if (scan()!=IHREAL) {
 	    huh();
 	    return;
@@ -453,16 +453,16 @@
 		square(ix1-game.quadrant.y+0.1*(ix2-game.sector.y)));
     wfl = false;
 
-    if (prompt) prout("Answer \"no\" if you don't know the value:");
+    if (prompt) prout(_("Answer \"no\" if you don't know the value:"));
     for (;;) {
 	chew();
-	proutn("Time or arrival date? ");
+	proutn(_("Time or arrival date? "));
 	if (scan()==IHREAL) {
 	    ttime = aaitem;
 	    if (ttime > game.state.date) ttime -= game.state.date; // Actually a star date
 	    if (ttime <= 1e-10 ||
 		(twarp=(floor(sqrt((10.0*game.dist)/ttime)*10.0)+1.0)/10.0) > 10) {
-		prout("We'll never make it, sir.");
+		prout(_("We'll never make it, sir."));
 		chew();
 		return;
 	    }
@@ -470,7 +470,7 @@
 	    break;
 	}
 	chew();
-	proutn("Warp factor? ");
+	proutn(_("Warp factor? "));
 	if (scan()== IHREAL) {
 	    wfl = true;
 	    twarp = aaitem;
@@ -480,17 +480,17 @@
 	    }
 	    break;
 	}
-	prout("Captain, certainly you can give me one of these.");
+	prout(_("Captain, certainly you can give me one of these."));
     }
     for (;;) {
 	chew();
 	ttime = (10.0*game.dist)/square(twarp);
 	tpower = game.dist*twarp*twarp*twarp*(game.shldup+1);
 	if (tpower >= game.energy) {
-	    prout("Insufficient energy, sir.");
+	    prout(_("Insufficient energy, sir."));
 	    if (!game.shldup || tpower > game.energy*2.0) {
 		if (!wfl) return;
-		proutn("New warp factor to try? ");
+		proutn(_("New warp factor to try? "));
 		if (scan() == IHREAL) {
 		    wfl = true;
 		    twarp = aaitem;
@@ -506,33 +506,33 @@
 		    return;
 		}
 	    }
-	    prout("But if you lower your shields,");
-	    proutn("remaining");
+	    prout(_("But if you lower your shields,"));
+	    proutn(_("remaining"));
 	    tpower /= 2;
 	}
 	else
-	    proutn("Remaining");
-	prout(" game.energy will be %.2f.", game.energy-tpower);
+	    proutn(_("Remaining"));
+	prout(_(" energy will be %.2f."), game.energy-tpower);
 	if (wfl) {
-	    prout("And we will arrive at stardate %.2f.",
+	    prout(_("And we will arrive at stardate %.2f."),
 		  game.state.date+ttime);
 	}
 	else if (twarp==1.0)
-	    prout("Any warp speed is adequate.");
+	    prout(_("Any warp speed is adequate."));
 	else {
-	    prout("Minimum warp needed is %.2f,", twarp);
-	    prout("and we will arrive at stardate %.2f.",
+	    prout(_("Minimum warp needed is %.2f,"), twarp);
+	    prout(_("and we will arrive at stardate %.2f."),
 		  game.state.date+ttime);
 	}
 	if (game.state.remtime < ttime)
-	    prout("Unfortunately, the Federation will be destroyed by then.");
+	    prout(_("Unfortunately, the Federation will be destroyed by then."));
 	if (twarp > 6.0)
-	    prout("You'll be taking risks at that speed, Captain");
+	    prout(_("You'll be taking risks at that speed, Captain"));
 	if ((game.isatb==1 && game.state.kscmdr.y == iy1 && game.state.kscmdr.x == ix1 &&
 	     scheduled(FSCDBAS)< ttime+game.state.date)||
 	    (scheduled(FCDBAS)<ttime+game.state.date && game.battle.y==iy1 && game.battle.x == ix1))
-	    prout("The starbase there will be destroyed by then.");
-	proutn("New warp factor to try? ");
+	    prout(_("The starbase there will be destroyed by then."));
+	proutn(_("New warp factor to try? "));
 	if (scan() == IHREAL) {
 	    wfl = true;
 	    twarp = aaitem;

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-19 18:13:35 UTC (rev 597)
+++ trunk/src/setup.c	2006-09-19 18:44:07 UTC (rev 598)
@@ -786,3 +786,20 @@
 	    }
     } while (sw);
 }
+
+void setpassword(void) 
+{
+    if (!(game.options & OPTION_CURSES)) {
+	while (TRUE) {
+	    scan();
+	    strcpy(game.passwd, citem);
+	    chew();
+	    if (*game.passwd != 0) break;
+	    proutn(_("Please type in a secret password-"));
+	}
+    } else {
+	int i;
+        for(i=0;i<3;i++) game.passwd[i]=(char)(97+(int)(Rand()*25));
+        game.passwd[3]=0;
+    }
+}



From esr at mail.berlios.de  Tue Sep 19 21:04:36 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 19 Sep 2006 21:04:36 +0200
Subject: [Sst-commit-watch] r599 - trunk/src
Message-ID: <200609191904.k8JJ4aXb002487@sheep.berlios.de>

Author: esr
Date: 2006-09-19 21:04:35 +0200 (Tue, 19 Sep 2006)
New Revision: 599

Modified:
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/finish.c
   trunk/src/moving.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
More BSD features; You can now lose if your entire crew
dies in battle.  When abandoning ship in a game with inhabited
worlds enabled, they must have one in the quadrant to beam down
to; otherwise they die in space and this counts heavily against
your score (BSD Trek had score adjustment as a to-do).  
Docking at a starbase replenishes your crew.


Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-19 18:44:07 UTC (rev 598)
+++ trunk/src/battle.c	2006-09-19 19:04:35 UTC (rev 599)
@@ -158,6 +158,7 @@
     icas = 10.0+20.0*Rand();
     prout(_("***Sickbay reports %d casualties"), icas);
     game.casual += icas;
+    game.state.crew -= icas;
     for (l=0; l < NDEVICES; l++) {
 	if (l == DDRAY) 
 	    continue; // Don't damage deathray 
@@ -550,13 +551,13 @@
 	    if (absorb > game.shield) absorb = game.shield;
 	    game.shield -= absorb;
 	    hit -= hitsh;
-	    if (game.condit==IHDOCKED) dock(0);
+	    if (game.condit==IHDOCKED) dock(false);
 	    if (propor > 0.1 && hit < 0.005*game.energy) continue;
 	}
 	/* It's a hit -- print out hit size */
 	atackd = 1; /* We weren't going to check casualties, etc. if
 		       shields were down for some strange reason. This
-		       doesn't make any sense, so I've fw.xed it */
+		       doesn't make any sense, so I've fixed it */
 	ihurt = 1;
 	proutn(_("%d unit hit"), (int)hit);
 	if ((damaged(DSRSENS) && itflag) || game.skill<=SKILL_FAIR) {
@@ -574,7 +575,7 @@
 	fry(hit);
 	game.energy -= hit;
 	if (game.condit==IHDOCKED) 
-	    dock(0);
+	    dock(false);
     }
     if (game.energy <= 0) {
 	/* Returning home upon your shield, not with it... */
@@ -606,6 +607,7 @@
 	    prout(_("Mc Coy-  \"Sickbay to bridge.  We suffered %d casualties"), icas);
 	    prout(_("   in that last attack.\""));
 	    game.casual += icas;
+	    game.state.crew -= icas;
 	}
     }
     /* After attack, reset average distance to enemies */
@@ -891,7 +893,8 @@
 	skip(1);
 	prout(_("McCoy to bridge- \"Severe radiation burns, Jim."));
 	prout(_("  %d casualties so far.\""), icas);
-	game.casual -= icas;
+	game.casual += icas;
+	game.state.crew -= icas;
     }
     skip(1);
     prout(_("Phaser energy dispersed by shields."));

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-19 18:44:07 UTC (rev 598)
+++ trunk/src/events.c	2006-09-19 19:04:35 UTC (rev 599)
@@ -112,6 +112,11 @@
 	    finish(FDEPLETE);
 	    return;
 	}
+	/* Any crew left alive? */
+	if (game.state.crew <=0) {
+	    finish(FCREW);
+	    return;
+	}
 	/* Is life support adequate? */
 	if (damaged(DLIFSUP) && game.condit != IHDOCKED) {
 	    if (game.lsupres < xtime && game.damage[DLIFSUP] > game.lsupres) {

Modified: trunk/src/finish.c
===================================================================
--- trunk/src/finish.c	2006-09-19 18:44:07 UTC (rev 598)
+++ trunk/src/finish.c	2006-09-19 19:04:35 UTC (rev 599)
@@ -88,7 +88,7 @@
 	if (game.alive) {
 	    double badpt;
 	    badpt = 5.0*game.state.starkl + game.casual + 10.0*game.state.nplankl +
-		45.*game.nhelp+100.*game.state.basekl;
+		45.*game.nhelp+100.*game.state.basekl+3.*game.abandoned;
 	    if (game.ship == IHF) badpt += 100.0;
 	    else if (game.ship == 0) badpt += 200.0;
 	    if (badpt < 100.0) badpt = 0.0;	// Close enough!
@@ -278,6 +278,9 @@
 	prout(_("Your ship is drawn to the center of the black hole."));
 	prout(_("You are crushed into extremely dense matter."));
 	break;
+    case FCREW:
+	prout(_("Your last crew member has died."));
+	break;
     }
     if (game.ship==IHF) game.ship= 0;
     else if (game.ship == IHE) game.ship = IHF;
@@ -366,6 +369,9 @@
     if (game.casual)
 	prout(_("%6d casualties incurred                %5d"),
 	      game.casual, -game.casual);
+    if (game.abandoned)
+	prout(_("%6d crew abandoned in space            %5d"),
+	      game.abandoned, -3*game.abandoned);
     if (klship)
 	prout(_("%6d ship(s) lost or destroyed          %5d"),
 	      klship, -100*klship);

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-19 18:44:07 UTC (rev 598)
+++ trunk/src/moving.c	2006-09-19 19:04:35 UTC (rev 599)
@@ -214,10 +214,10 @@
     return;
 }
 
-void dock(int l) 
+void dock(bool verbose) 
 {
     chew();
-    if (game.condit == IHDOCKED && l) {
+    if (game.condit == IHDOCKED && verbose) {
 	prout(_("Already docked."));
 	return;
     }
@@ -231,12 +231,13 @@
 	return;
     }
     game.condit = IHDOCKED;
-    if (l) prout(_("Docked."));
+    if (verbose) prout(_("Docked."));
     game.ididit=1;
     if (game.energy < game.inenrg) game.energy = game.inenrg;
     game.shield = game.inshld;
     game.torps = game.intorps;
     game.lsupres = game.inlsr;
+    game.state.crew = FULLCREW;
     if (!damaged(DRADIO) &&
 	(is_scheduled(FCDBAS) || game.isatb == 1) && game.iseenit == 0) {
 	/* get attack report from base */

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-19 18:44:07 UTC (rev 598)
+++ trunk/src/setup.c	2006-09-19 19:04:35 UTC (rev 599)
@@ -28,7 +28,7 @@
     }
     else {
 	if ((key = scan()) == IHEOL) {
-	    proutn("File name: ");
+	    proutn(_("File name: "));
 	    key = scan();
 	}
 	if (key != IHALPHA) {
@@ -41,7 +41,7 @@
 	}
     }
     if ((fp = fopen(citem, "wb")) == NULL) {
-	proutn("Can't freeze game as file ");
+	proutn(_("Can't freeze game as file "));
 	proutn(citem);
 	skip(1);
 	return;
@@ -169,6 +169,8 @@
 	    prout("to %s.", systemname(q->planet));
 	} else {
 	    prout("Entire crew of %d left to die in outer space.");
+	    game.casual += game.state.crew;
+	    game.abandoned += game.state.crew;
 	}
 
 	/* If at least one base left, give 'em the Faerie Queene */
@@ -202,6 +204,7 @@
     }
     /* Get new commission */
     game.quad[game.sector.x][game.sector.y] = game.ship = IHF;
+    game.state.crew = FULLCREW;
     prout("Starfleet puts you in command of another ship,");
     prout("the Faerie Queene, which is antiquated but,");
     prout("still useable.");
@@ -232,6 +235,7 @@
     // Prepare the Enterprise
     game.alldone = game.gamewon = 0;
     game.ship = IHE;
+    game.state.crew = FULLCREW;
     game.energy = game.inenrg = 5000.0;
     game.shield = game.inshld = 2500.0;
     game.shldchg = 0;
@@ -249,7 +253,7 @@
     // Set up assorted game parameters
     game.battle.x = game.battle.y = 0;
     game.state.date = game.indate = 100.0*(int)(31.0*Rand()+20.0);
-    game.nkinks = game.nhelp = game.casual = 0;
+    game.nkinks = game.nhelp = game.casual = game.abandoned = 0;
     game.resting = false;
     game.isatb = game.iscate = game.imine = game.icrystl = game.icraft = game.state.nplankl = 0;
     game.state.starkl = game.state.basekl = 0;

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-19 18:44:07 UTC (rev 598)
+++ trunk/src/sst.c	2006-09-19 19:04:35 UTC (rev 599)
@@ -162,6 +162,12 @@
       type is "plain" or "almy".)
 
    6. User input is now logged so we can do regression testing.
+
+   7. More BSD-Trek features: You can now lose if your entire crew
+      dies in battle.  When abandoning ship in a game with inhabited
+      worlds enabled, they must have one in the quadrant to beam down
+      to; otherwise they die in space and this counts heavily against
+      your score.  Docking at a starbase replenishes your crew.
 */
 
 /* the input queue */

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-19 18:44:07 UTC (rev 598)
+++ trunk/src/sst.h	2006-09-19 19:04:35 UTC (rev 599)
@@ -58,6 +58,8 @@
 
 typedef struct {
     int snap,		// snapshot taken
+	crew,		// crew complement
+#define FULLCREW	428	/* BSD Trek was 387, that's wrong */
 	remkl,			// remaining klingons
 	remcom,			// remaining commanders
 	nscrem,			// remaining super commanders
@@ -224,6 +226,7 @@
 	condit,		// condition (red/yellow/green/docked)
 	torps,		// number of torpedoes
 	ship,		// ship type -- 'E' is Enterprise
+	abandoned,	// count of crew abandoned in space
 	length,		// length of game
 	skill,		// skill level
 	klhere,		// klingons here
@@ -295,7 +298,7 @@
               FNEG3, FNOVA, FSNOVAED, FABANDN, FDILITHIUM,
 			  FMATERIALIZE, FPHASER, FLOST, FMINING, FDPLANET,
 			  FPNOVA, FSSC, FSTRACTOR, FDRAY, FTRIBBLE,
-			  FHOLE} FINTYPE ;
+	      FHOLE, FCREW} FINTYPE ;
 enum loctype {neither, quadrant, sector};
 
 #define IHR 'R'
@@ -336,7 +339,7 @@
 void photon(void);
 void warp(bool);
 void doshield(int);
-void dock(int);
+void dock(bool);
 void dreprt(void);
 void chart(int);
 void rechart(void);



From esr at mail.berlios.de  Tue Sep 19 21:20:43 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 19 Sep 2006 21:20:43 +0200
Subject: [Sst-commit-watch] r600 - trunk/src
Message-ID: <200609191920.k8JJKhUn003652@sheep.berlios.de>

Author: esr
Date: 2006-09-19 21:20:43 +0200 (Tue, 19 Sep 2006)
New Revision: 600

Modified:
   trunk/src/events.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/setup.c
   trunk/src/sst.h
Log:
Avoid a nassty bug in planet-name display, and fix another boolean.


Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-19 19:04:35 UTC (rev 599)
+++ trunk/src/events.c	2006-09-19 19:20:43 UTC (rev 600)
@@ -238,7 +238,7 @@
 		}
 		else prout(_("(Shields not currently useable.)"));
 	    }
-	    newqad(0);
+	    newqad(false);
 	    /* Adjust finish time to time of tractor beaming */
 	    fintim = game.state.date+game.optime;
 	    attack(0);

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-19 19:04:35 UTC (rev 599)
+++ trunk/src/moving.c	2006-09-19 19:20:43 UTC (rev 600)
@@ -113,7 +113,7 @@
 		skip(1);
 		prout(_("Entering %s."), cramlc(quadrant, game.quadrant));
 		game.quad[game.sector.x][game.sector.y] = game.ship;
-		newqad(0);
+		newqad(false);
 		if (game.skill>SKILL_NOVICE) attack(0);
 		return;
 	    }
@@ -824,7 +824,7 @@
 	postpone(FTBEAM, game.optime);
 	game.damage[DRADIO] += game.optime;
     }
-    newqad(0);
+    newqad(false);
     events();	/* Stas Sergeev added this -- do pending events */
 }
 
@@ -943,7 +943,7 @@
 	}
 	/* Since starbase not in quadrant, set up new quadrant */
 	game.quadrant = game.state.baseq[line];
-	newqad(1);
+	newqad(true);
     }
     /* dematerialize starship */
     game.quad[game.sector.x][game.sector.y]=IHDOT;

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-19 19:04:35 UTC (rev 599)
+++ trunk/src/planets.c	2006-09-19 19:20:43 UTC (rev 600)
@@ -512,9 +512,10 @@
 
 char *systemname(int pindx)
 {
-    /* the below array shoud not be static, or it won't gettextize
+    static char copy[BUFSIZ];
+    /* the below array should not be static, or it won't gettextize
      * because of the early initialization. */
-    char *names[NINHAB] =
+    char *names[NINHAB+1] =
     {
 	/*
 	 * I used <http://www.memory-alpha.org> to find planets
@@ -553,7 +554,7 @@
 	_("Marcos XII"),		/* TOS: "And the Children Shall Lead", */
 	_("Omega IV"),		/* TOS: "The Omega Glory" */
 	_("Regulus V"),		/* TOS: "Amok Time */
-	_("Deeva"),		/* TOS: "Operation -- Annihilate!" */
+	_("Deneva"),		/* TOS: "Operation -- Annihilate!" */
 	/* Worlds from BSD Trek */
 	_("Rigel II"),		/* TOS: "Shore Leave" ("III" in BSD) */
 	_("Beta III"),		/* TOS: "The Return of the Archons" */
@@ -570,7 +571,8 @@
 	_("Coridan (Desotriana)"),	/* TOS: "Journey to Babel" */
 	_("Iotia"),		/* TOS: "A Piece of the Action" */
 #endif
-   };
+    };
 
-    return names[pindx];
+    strcpy(copy, names[pindx]);
+    return copy;
 }

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-19 19:04:35 UTC (rev 599)
+++ trunk/src/setup.c	2006-09-19 19:20:43 UTC (rev 600)
@@ -181,11 +181,10 @@
 	prout("the Federation in a prisoner-of-war exchange.");
 	nb = Rand()*game.state.rembase+1;
 	/* Set up quadrant and position FQ adjacient to base */
-	if (game.quadrant.x!=game.state.baseq[nb].x || game.quadrant.y!=game.state.baseq[nb].y) {
-	    game.quadrant.x = game.state.baseq[nb].x;
-	    game.quadrant.y = game.state.baseq[nb].y;
+	if (!same(game.quadrant, game.state.baseq[nb])) {
+	    game.quadrant = game.state.baseq[nb];
 	    game.sector.x = game.sector.y = 5;
-	    newqad(1);
+	    newqad(true);
 	}
 	for (;;) {
 	    /* position next to base by trial and error */
@@ -199,7 +198,7 @@
 	    if (l < QUADSIZE+1) break; /* found a spot */
 	    game.sector.x=QUADSIZE/2;
 	    game.sector.y=QUADSIZE/2;
-	    newqad(1);
+	    newqad(true);
 	}
     }
     /* Get new commission */
@@ -450,7 +449,7 @@
     prout("Good Luck!");
     if (game.state.nscrem) prout("  YOU'LL NEED IT.");
     waitfor();
-    newqad(0);
+    newqad(false);
     if (game.nenhere-iqhere-game.ithere) game.shldup = true;
     if (game.neutz) attack(0);	// bad luck to start in a Romulan Neutral Zone
 }
@@ -592,7 +591,7 @@
     game.kpower[i] = Rand()*150.0 +300.0 +25.0*game.skill;
 }
 
-void newqad(int shutup) 
+void newqad(bool shutup) 
 {
     int i, j;
     coord w;

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-19 19:04:35 UTC (rev 599)
+++ trunk/src/sst.h	2006-09-19 19:20:43 UTC (rev 600)
@@ -367,7 +367,7 @@
 void prout(char *, ...);
 void proutn(char *, ...);
 void stars(void);
-void newqad(int);
+void newqad(bool);
 bool ja(void);
 void cramen(int);
 void crmshp(void);



From esr at mail.berlios.de  Tue Sep 19 21:35:24 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 19 Sep 2006 21:35:24 +0200
Subject: [Sst-commit-watch] r601 - trunk/src
Message-ID: <200609191935.k8JJZOMD004637@sheep.berlios.de>

Author: esr
Date: 2006-09-19 21:35:24 +0200 (Tue, 19 Sep 2006)
New Revision: 601

Modified:
   trunk/src/events.c
   trunk/src/io.c
   trunk/src/moving.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
More boolean cleanups.


Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-19 19:20:43 UTC (rev 600)
+++ trunk/src/events.c	2006-09-19 19:35:24 UTC (rev 601)
@@ -139,7 +139,7 @@
 	    prout(_("   surveillance reports are coming in."));
 	    skip(1);
 	    if (game.iseenit==0) {
-		attakreport(0);
+		attakreport(false);
 		game.iseenit = 1;
 	    }
 	    rechart();
@@ -198,7 +198,7 @@
 	    crmshp();
 	    prout(_(" caught in long range tractor beam--"));
 	    /* If Kirk & Co. screwing around on planet, handle */
-	    atover(1); /* atover(1) is Grab */
+	    atover(true); /* atover(true) is Grab */
 	    if (game.alldone) return;
 	    if (game.icraft == 1) { /* Caught in Galileo? */
 		finish(FSTRACTOR);

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-09-19 19:20:43 UTC (rev 600)
+++ trunk/src/io.c	2006-09-19 19:35:24 UTC (rev 601)
@@ -316,17 +316,17 @@
  * Things past this point have policy implications.
  */
 
-void drawmaps(short l)
+void drawmaps(int mode)
 /* hook to be called after moving to redraw maps */
 {
     if (game.options & OPTION_CURSES) {
-	if (l == 1)
+	if (mode == 1)
 	    sensor();
         setwnd(srscan_window);
         wmove(curwnd, 0, 0);
         enqueue("no");
         srscan(SCAN_FULL);
-	if (l != 2) {
+	if (mode != 2) {
 	    setwnd(report_window);
 	    wclear(report_window);
 	    wmove(report_window, 0, 0);
@@ -429,6 +429,6 @@
     if (game.options & OPTION_CURSES) {
 	setwnd(message_window);
 	wclear(message_window);
-	chart(0);
+	chart(false);
     }
 }

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-19 19:20:43 UTC (rev 600)
+++ trunk/src/moving.c	2006-09-19 19:35:24 UTC (rev 601)
@@ -242,7 +242,7 @@
 	(is_scheduled(FCDBAS) || game.isatb == 1) && game.iseenit == 0) {
 	/* get attack report from base */
 	prout(_("Lt. Uhura- \"Captain, an important message from the starbase:\""));
-	attakreport(0);
+	attakreport(false);
 	game.iseenit = 1;
     }
 }
@@ -675,7 +675,7 @@
     return;
 }
 
-void atover(int igrab) 
+void atover(bool igrab) 
 {
     double power, distreq;
 

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-19 19:20:43 UTC (rev 600)
+++ trunk/src/reports.c	2006-09-19 19:35:24 UTC (rev 601)
@@ -3,7 +3,7 @@
 #include <stdlib.h>
 #include <string.h>
 
-void attakreport(int curt) 
+void attakreport(bool curt) 
 {
     if (!curt) {
 	if (is_scheduled(FCDBAS)) {
@@ -72,7 +72,7 @@
     if (!damaged(DRADIO) || game.condit == IHDOCKED || game.iseenit) {
 	/* Don't report this if not seen and
 	   either the radio is dead or not at base! */
-	attakreport(0);
+	attakreport(false);
 	game.iseenit = 1;
     }
     if (game.casual) prout(_("%d casualt%s suffered so far."),
@@ -185,7 +185,7 @@
 	    }
 }
 
-void chart(int nn) 
+void chart(bool title) 
 {
     int i,j;
     chew();
@@ -198,7 +198,7 @@
 	rechart();
     }
 
-    if (nn == 0) prout(_("       STAR CHART FOR THE KNOWN GALAXY"));
+    if (!title) prout(_("       STAR CHART FOR THE KNOWN GALAXY"));
     if (game.state.date > game.lastchart)
 	prout(_("(Last surveillance update %d stardates ago)."),
 	      (int)(game.state.date-game.lastchart));
@@ -325,7 +325,7 @@
 
 	break;
     case 11:
-	attakreport(1);
+	attakreport(true);
 	break;
     }
 }
@@ -337,7 +337,7 @@
 	{"","da","co","po","ls","wa","en","to","sh","kl","sy", "ti"};
     
     int i, j, jj, req=0;
-    int goodScan=true, leftside=true, rightside=true, nn=false; 
+    int goodScan=true, leftside=true, rightside=true, title=false; 
     switch (l) {
     case SCAN_FULL: // SRSCAN
 	if (damaged(DSRSENS)) {
@@ -357,7 +357,7 @@
 	    game.state.galaxy[game.quadrant.x][game.quadrant.y].charted = true;
 	}
 	scan();
-	if (isit("chart")) nn = true;
+	if (isit("chart")) title = true;
 	if (isit("no")) rightside = false;
 	chew();
 	prout("    1 2 3 4 5 6 7 8 9 10");
@@ -400,7 +400,7 @@
 	if (req!=0) return(goodScan);
     }
     prout("");
-    if (nn) chart(1);
+    if (title) chart(true);
     return(goodScan);
 }
 			

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-19 19:20:43 UTC (rev 600)
+++ trunk/src/setup.c	2006-09-19 19:35:24 UTC (rev 601)
@@ -225,14 +225,14 @@
     return;
 }
 	
-void setup(int needprompt) 
+void setup(bool needprompt) 
 {
     int i,j, krem, klumper;
     int ix, iy;
     //  Decide how many of everything
     if (choose(needprompt)) return; // frozen game
     // Prepare the Enterprise
-    game.alldone = game.gamewon = 0;
+    game.alldone = game.gamewon = false;
     game.ship = IHE;
     game.state.crew = FULLCREW;
     game.energy = game.inenrg = 5000.0;

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-19 19:20:43 UTC (rev 600)
+++ trunk/src/sst.c	2006-09-19 19:35:24 UTC (rev 601)
@@ -469,7 +469,7 @@
 	    dreprt();
 	    break;
 	case CHART:			// chart
-	    chart(0);
+	    chart(false);
 	    break;
 	case IMPULSE:			// impulse
 	    impuls();
@@ -570,14 +570,14 @@
 		if (game.alldone) break;	// Events did us in
 	    }
 	    if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova) { // Galaxy went Nova!
-		atover(0);
+		atover(false);
 		continue;
 	    }
-	    if (hitme && game.justin==0) {
+	    if (hitme && !game.justin) {
 		attack(2);
 		if (game.alldone) break;
 		if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova) {	// went NOVA! 
-		    atover(0);
+		    atover(false);
 		    hitme = true;
 		    continue;
 		}
@@ -940,6 +940,6 @@
     proutn("Induce supernova here? ");
     if (ja()) {
 	game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova = true;
-	atover(1);
+	atover(true);
     }
 }

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-19 19:20:43 UTC (rev 600)
+++ trunk/src/sst.h	2006-09-19 19:35:24 UTC (rev 601)
@@ -330,9 +330,9 @@
 void prelim(void);
 void attack(int);
 bool choose(bool);
-void setup(int);
+void setup(bool);
 void score(void);
-void atover(int);
+void atover(bool);
 int srscan(int);
 void lrscan(void);
 void phasers(void);
@@ -341,7 +341,7 @@
 void doshield(int);
 void dock(bool);
 void dreprt(void);
-void chart(int);
+void chart(bool);
 void rechart(void);
 void impuls(void);
 void wait(void);
@@ -397,21 +397,21 @@
 void preport(void);
 void orbit(void);
 void sensor(void);
-void drawmaps(short);
+void drawmaps(int);
 void beam(void);
 void mine(void);
 void usecrystals(void);
 void shuttle(void);
 void deathray(void);
 void debugme(void);
-void attakreport(int);
+void attakreport(bool);
 void movetho(void);
 void probe(void);
 void iostart(void);
 void setwnd(WINDOW *);
 void warble(void);
-void boom(int ii, int jj);
-void tracktorpedo(int ix, int iy, int l, int i, int n, int iquad);
+void boom(int, int);
+void tracktorpedo(int, int, int, int, int, int);
 void cgetline(char *, int);
 void waitfor(void);
 void setpassword(void);



From esr at mail.berlios.de  Tue Sep 19 23:00:30 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 19 Sep 2006 23:00:30 +0200
Subject: [Sst-commit-watch] r602 - trunk/src
Message-ID: <200609192100.k8JL0U3s011417@sheep.berlios.de>

Author: esr
Date: 2006-09-19 23:00:29 +0200 (Tue, 19 Sep 2006)
New Revision: 602

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/finish.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
More type cleanup.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-19 19:35:24 UTC (rev 601)
+++ trunk/src/ai.c	2006-09-19 21:00:29 UTC (rev 602)
@@ -28,7 +28,7 @@
        We know this if either short or long range sensors are working */
     if (!damaged(DSRSENS) || !damaged(DLRSENS) ||
 	game.condit == IHDOCKED) {
-	crmena(1, ienm, 2, game.ks[loccom]);
+	crmena(1, ienm, sector, game.ks[loccom]);
 	prout(_(" escapes to %s (and regains strength)."),
 	      cramlc(quadrant, iq));
     }
@@ -507,7 +507,7 @@
 		   (int)scheduled(FSCDBAS));
 	    if (!game.resting) return;
 	    prout(_("Mr. Spock-  \"Captain, shall we cancel the rest period?\""));
-	    if (ja()==0) return;
+	    if (ja() == false) return;
 	    game.resting = false;
 	    game.optime = 0.0; /* actually finished */
 	    return;
@@ -588,7 +588,7 @@
     /* All plugged up -- Tholian splits */
     game.quad[game.tholian.x][game.tholian.y]=IHWEB;
     dropin(IHBLANK, &dummy);
-    crmena(1,IHT, 2, game.tholian);
+    crmena(true, IHT, sector, game.tholian);
     prout(_(" completes web."));
     game.ithere = game.tholian.x = game.tholian.y = 0;
     game.nenhere--;

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-19 19:35:24 UTC (rev 601)
+++ trunk/src/battle.c	2006-09-19 21:00:29 UTC (rev 602)
@@ -1,6 +1,7 @@
 #include "sst.h"
 
 void doshield(int i) 
+/* change shield status */
 {
     int key;
     enum {NONE, SHUP, SHDN, NRG} action = NONE;
@@ -27,7 +28,7 @@
 	}
 	if (action==NONE) {
 	    proutn(_("Do you wish to change shield energy? "));
-	    if (ja()) {
+	    if (ja() == true) {
 		proutn(_("Energy to transfer to shields- "));
 		action = NRG;
 	    }
@@ -37,7 +38,7 @@
 	    }
 	    else if (game.shldup) {
 		proutn(_("Shields are up. Do you want them down? "));
-		if (ja()) action = SHDN;
+		if (ja() == true) action = SHDN;
 		else {
 		    chew();
 		    return;
@@ -45,7 +46,7 @@
 	    }
 	    else {
 		proutn(_("Shields are down. Do you want them up? "));
-		if (ja()) action = SHUP;
+		if (ja() == true) action = SHUP;
 		else {
 		    chew();
 		    return;
@@ -69,7 +70,7 @@
 	    finish(FNRG);
 	    return;
 	}
-	game.ididit=1;
+	game.ididit=true;
 	return;
     case SHDN:
 	if (!game.shldup) {
@@ -92,7 +93,7 @@
 	    prout(_("Insufficient ship energy."));
 	    return;
 	}
-	game.ididit = 1;
+	game.ididit = true;
 	if (game.shield+aaitem >= game.inshld) {
 	    prout(_("Shield energy maximized."));
 	    if (game.shield+aaitem > game.inshld) {
@@ -129,10 +130,11 @@
     }
 }
 
-void ram(int ibumpd, int ienm, coord w)
+void ram(bool ibumpd, int ienm, coord w)
+/* make our ship ram something */
 {
     double type = 1.0, extradm;
-    int icas, l;
+    int icas, m;
 	
     prouts(_("***RED ALERT!  RED ALERT!"));
     skip(1);
@@ -148,7 +150,7 @@
     case IHQUEST: type = 4.0; break;
     }
     proutn(ibumpd ? _(" rammed by ") : _(" rams "));
-    crmena(0, ienm, 2, w);
+    crmena(false, ienm, sector, w);
     if (ibumpd) proutn(_(" (original position)"));
     skip(1);
     deadkl(w, ienm, game.sector.x, game.sector.y);
@@ -159,13 +161,13 @@
     prout(_("***Sickbay reports %d casualties"), icas);
     game.casual += icas;
     game.state.crew -= icas;
-    for (l=0; l < NDEVICES; l++) {
-	if (l == DDRAY) 
+    for (m=0; m < NDEVICES; m++) {
+	if (m == DDRAY) 
 	    continue; // Don't damage deathray 
-	if (game.damage[l] < 0) 
+	if (game.damage[m] < 0) 
 	    continue;
 	extradm = (10.0*type*Rand()+1.0)*game.damfac;
-	game.damage[l] += game.optime + extradm; /* Damage for at least time of travel! */
+	game.damage[m] += game.optime + extradm; /* Damage for at least time of travel! */
     }
     game.shldup = false;
     if (KLINGREM) {
@@ -177,6 +179,7 @@
 }
 
 void torpedo(double course, double r, int inx, int iny, double *hit, int i, int n)
+/* let a photon torpedo fly */
 {
     int l, iquad=0, jx=0, jy=0, shoved=0, ll;
 	
@@ -248,7 +251,7 @@
 	case IHC: /* Hit a commander */
 	case IHS:
 	    if (Rand() <= 0.05) {
-		crmena(1, iquad, 2, w);
+		crmena(true, iquad, sector, w);
 		prout(_(" uses anti-photon device;"));
 		prout(_("   torpedo neutralized."));
 		return;
@@ -269,7 +272,7 @@
 		deadkl(w, iquad, w.x, w.y);
 		return;
 	    }
-	    crmena(1, iquad, 2, w);
+	    crmena(true, iquad, sector, w);
 	    /* If enemy damaged but not destroyed, try to displace */
 	    ang = angle + 2.5*(Rand()-0.5);
 	    temp = fabs(sin(ang));
@@ -316,7 +319,7 @@
 	    newcnd();
 	    return;
 	case IHP: /* Hit a planet */
-	    crmena(1, iquad, 2, w);
+	    crmena(true, iquad, sector, w);
 	    prout(_(" destroyed."));
 	    game.state.nplankl++;
 	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = NOPLANET;
@@ -330,7 +333,7 @@
 	    }
 	    return;
 	case IHW: /* Hit an inhabited world -- very bad! */
-	    crmena(1, iquad, 2, w);
+	    crmena(true, iquad, sector, w);
 	    prout(_(" destroyed."));
 	    game.state.nworldkl++;
 	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = NOPLANET;
@@ -350,7 +353,7 @@
 		nova(w.x, w.y);
 		return;
 	    }
-	    crmena(1, IHSTAR, 2, w);
+	    crmena(true, IHSTAR, sector, w);
 	    prout(_(" unaffected by photon blast."));
 	    return;
 	case IHQUEST: /* Hit a thingy */
@@ -376,7 +379,7 @@
 	    return;
 	case IHBLANK: /* Black hole */
 	    skip(1);
-	    crmena(1, IHBLANK, 2, w);
+	    crmena(true, IHBLANK, sector, w);
 	    prout(_(" swallows torpedo."));
 	    return;
 	case IHWEB: /* hit the web */
@@ -396,7 +399,7 @@
 		return;
 	    }
 	    skip(1);
-	    crmena(1, IHT, 2, w);
+	    crmena(true, IHT, sector, w);
 	    if (Rand() > 0.05) {
 		prout(_(" survives photon blast."));
 		return;
@@ -414,7 +417,7 @@
 	default: /* Problem! */
 	    skip(1);
 	    proutn("Don't know how to handle collision with ");
-	    crmena(1, iquad, 2, w);
+	    crmena(true, iquad, sector, w);
 	    skip(1);
 	    return;
 	}
@@ -437,10 +440,11 @@
     return;
 }
 
-static void fry(double hit) 
+static void fry(double hit)
+/* critical-hit resolution */
 {
     double ncrit, extradm;
-    int ktr=1, l, ll, j, cdam[NDEVICES];
+    int ktr=1, loop1, loop2, j, cdam[NDEVICES];
 
     /* a critical hit occured */
     if (hit < (275.0-25.0*game.skill)*(1.0+0.5*Rand())) return;
@@ -448,18 +452,18 @@
     ncrit = 1.0 + hit/(500.0+100.0*Rand());
     proutn(_("***CRITICAL HIT--"));
     /* Select devices and cause damage */
-    for (l = 0; l < ncrit && 0 < NDEVICES; l++) {
+    for (loop1 = 0; loop1 < ncrit && 0 < NDEVICES; loop1++) {
 	do {
 	    j = NDEVICES*Rand();
 	    /* Cheat to prevent shuttle damage unless on ship */
 	} while 
 	      (game.damage[j]<0.0 || (j==DSHUTTL && game.iscraft!=1) || j==DDRAY);
-	cdam[l] = j;
+	cdam[loop1] = j;
 	extradm = (hit*game.damfac)/(ncrit*(75.0+25.0*Rand()));
 	game.damage[j] += extradm;
-	if (l > 0) {
-	    for (ll=2; ll<=l && j != cdam[ll-1]; ll++) ;
-	    if (ll<=l) continue;
+	if (loop1 > 0) {
+	    for (loop2=2; loop2<=loop1 && j != cdam[loop2-1]; loop2++) ;
+	    if (loop2<=loop1) continue;
 	    ktr += 1;
 	    if (ktr==3) skip(1);
 	    proutn(_(" and "));
@@ -473,14 +477,15 @@
     }
 }
 
-void attack(int torps_ok) 
+void attack(bool torps_ok) 
+/* bad guy attacks us */
 {
-    /* torps_ok == 0 forces use of phasers in an attack */
-    int percent, ihurt=0, l, i=0, iquad, itflag;
-    int atackd = 0, attempt = 0;
-    double hit;
-    double pfac, dustfac, hitmax=0.0, hittot=0.0, chgfac=1.0, r;
+    /* torps_ok == false forces use of phasers in an attack */
+    int percent, loop, iquad;
+    bool itflag, atackd = false, attempt = false, ihurt = false;
+    double hit, pfac, dustfac, hitmax=0.0, hittot=0.0, chgfac=1.0, r;
     coord jay;
+    enum loctype where = neither;
 
     game.iattak = 1;
     if (game.alldone) return;
@@ -492,21 +497,21 @@
 	game.neutz = 0;
 	return;
     }
-    if ((((game.comhere || game.ishere) && (game.justin == 0)) || game.skill == SKILL_EMERITUS)&&(torps_ok!=0)) movcom();
+    if ((((game.comhere || game.ishere) && !game.justin) || game.skill == SKILL_EMERITUS) && torps_ok) movcom();
     if (game.nenhere==0 || (game.nenhere==1 && iqhere && iqengry==0)) return;
     pfac = 1.0/game.inshld;
     if (game.shldchg == 1) chgfac = 0.25+0.5*Rand();
     skip(1);
-    if (game.skill <= SKILL_FAIR) i = 2;
-    for_local_enemies(l) {
-	if (game.kpower[l] < 0) continue;	/* too weak to attack */
+    if (game.skill <= SKILL_FAIR) where = sector;
+    for_local_enemies(loop) {
+	if (game.kpower[loop] < 0) continue;	/* too weak to attack */
 	/* compute hit strength and diminsh shield power */
 	r = Rand();
 	/* Increase chance of photon torpedos if docked or enemy energy low */
 	if (game.condit == IHDOCKED) r *= 0.25;
-	if (game.kpower[l] < 500) r *= 0.25; 
-	jay.x = game.ks[l].x;
-	jay.y = game.ks[l].y;
+	if (game.kpower[loop] < 500) r *= 0.25; 
+	jay.x = game.ks[loop].x;
+	jay.y = game.ks[loop].y;
 	iquad = game.quad[jay.x][jay.y];
 	if (iquad==IHT || (iquad==IHQUEST && !iqengry)) continue;
 	itflag = (iquad == IHK && r > 0.0005) || !torps_ok ||
@@ -517,10 +522,10 @@
 	if (itflag) {
 	    /* Enemy uses phasers */
 	    if (game.condit == IHDOCKED) continue; /* Don't waste the effort! */
-	    attempt = 1; /* Attempt to attack */
+	    attempt = true; /* Attempt to attack */
 	    dustfac = 0.8+0.05*Rand();
-	    hit = game.kpower[l]*pow(dustfac,game.kavgd[l]);
-	    game.kpower[l] *= 0.75;
+	    hit = game.kpower[loop]*pow(dustfac,game.kavgd[loop]);
+	    game.kpower[loop] *= 0.75;
 	}
 	else { /* Enemy used photon torpedo */
 	    double course = 1.90985*atan2((double)game.sector.y-jay.y, (double)jay.x-game.sector.x);
@@ -528,12 +533,12 @@
 	    proutn(_("***TORPEDO INCOMING"));
 	    if (!damaged(DSRSENS)) {
 		proutn(_(" From "));
-		crmena(0, iquad, i, jay);
+		crmena(false, iquad, where, jay);
 	    }
-	    attempt = 1;
+	    attempt = true;
 	    prout("  ");
 	    r = (Rand()+Rand())*0.5 -0.5;
-	    r += 0.002*game.kpower[l]*r;
+	    r += 0.002*game.kpower[loop]*r;
 	    torpedo(course, r, jay.x, jay.y, &hit, 1, 1);
 	    if (KLINGREM==0) 
 		finish(FWON); /* Klingons did themselves in! */
@@ -546,7 +551,7 @@
 	    double absorb, hitsh, propor = pfac*game.shield*(game.condit==IHDOCKED ? 2.1 : 1.0);
 	    if(propor < 0.1) propor = 0.1;
 	    hitsh = propor*chgfac*hit+1.0;
-	    atackd=1;
+	    atackd = true;
 	    absorb = 0.8*hitsh;
 	    if (absorb > game.shield) absorb = game.shield;
 	    game.shield -= absorb;
@@ -555,10 +560,10 @@
 	    if (propor > 0.1 && hit < 0.005*game.energy) continue;
 	}
 	/* It's a hit -- print out hit size */
-	atackd = 1; /* We weren't going to check casualties, etc. if
+	atackd = true; /* We weren't going to check casualties, etc. if
 		       shields were down for some strange reason. This
 		       doesn't make any sense, so I've fixed it */
-	ihurt = 1;
+	ihurt = true;
 	proutn(_("%d unit hit"), (int)hit);
 	if ((damaged(DSRSENS) && itflag) || game.skill<=SKILL_FAIR) {
 	    proutn(_(" on the "));
@@ -566,7 +571,7 @@
 	}
 	if (!damaged(DSRSENS) && itflag) {
 	    proutn(_(" from "));
-	    crmena(0, iquad, i, jay);
+	    crmena(false, iquad, where, jay);
 	}
 	skip(1);
 	/* Decide if hit is critical */
@@ -582,11 +587,11 @@
 	finish(FBATTLE);
 	return;
     }
-    if (attempt == 0 && game.condit == IHDOCKED)
+    if (!attempt && game.condit == IHDOCKED)
 	prout(_("***Enemies decide against attacking your ship."));
-    if (atackd == 0) return;
+    if (!atackd) return;
     percent = 100.0*pfac*game.shield+0.5;
-    if (ihurt==0) {
+    if (!ihurt) {
 	/* Shields fully protect ship */
 	proutn(_("Enemy attack reduces shield strength to "));
     }
@@ -611,13 +616,14 @@
 	}
     }
     /* After attack, reset average distance to enemies */
-    for_local_enemies(l)
-	game.kavgd[l] = game.kdist[l];
+    for_local_enemies(loop)
+	game.kavgd[loop] = game.kdist[loop];
     sortkl();
     return;
 }
 		
-void deadkl(coord w, int type, int ixx, int iyy) 
+void deadkl(coord w, int type, int ixx, int iyy)
+/* kill a Klingon, Tholian, Romulan, or Thingy */
 {
     /* Added ixx and iyy allow enemy to "move" before dying */
     coord mv;
@@ -625,7 +631,7 @@
 
     mv.x = ixx; mv.y = iyy;
     skip(1);
-    crmena(1, type, 2, mv);
+    crmena(true, type, sector, mv);
     /* Decide what kind of enemy it is and update approriately */
     if (type == IHR) {
 	/* chalk up a Romulan */
@@ -721,6 +727,7 @@
 }
 
 void photon(void) 
+/* launch photon torpedo */
 {
     double targ[4][3], course[4];
     double r, dummy;
@@ -849,7 +856,8 @@
 
 	
 
-static void overheat(double rpow) 
+static void overheat(double rpow)
+/* check for phasers overheating */
 {
     if (rpow > 1500) {
 	double chekbrn = (rpow-1500.)*0.00038;
@@ -861,6 +869,7 @@
 }
 
 static int checkshctrl(double rpow) 
+/* check shield control */
 {
     double hit;
     int icas;
@@ -905,6 +914,7 @@
 	
 
 void phasers(void) 
+/* fire phasers */
 {
     double hits[21], rpow=0, extra, powrem, over, temp;
     int kz = 0, k=1, i, irec=0; /* Cheating inhibitor */
@@ -1120,7 +1130,7 @@
 		else proutn("??");
 		proutn(")  ");
 		proutn(_("units to fire at "));
-		crmena(0, ienm, 2, aim);
+		crmena(false, ienm, sector, aim);
 		proutn("-  ");
 		key = scan();
 	    }
@@ -1196,6 +1206,7 @@
 }
 
 void hittem(double *hits) 
+/* register a phaser hit on Klingons and Romulans */
 {
     double kp, kpow, wham, hit, dustfac, kpini;
     int nenhr2=game.nenhere, k=1, kk=1, ienm;
@@ -1222,7 +1233,7 @@
 	    proutn(_("Very small hit on "));
 	ienm = game.quad[w.x][w.y];
 	if (ienm==IHQUEST) iqengry=1;
-	crmena(0,ienm,2,w);
+	crmena(false,ienm,sector,w);
 	skip(1);
 	if (kpow == 0) {
 	    deadkl(w, ienm, w.x, w.y);

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-19 19:35:24 UTC (rev 601)
+++ trunk/src/events.c	2006-09-19 21:00:29 UTC (rev 602)
@@ -46,7 +46,7 @@
     if (game.resting) {
 	skip(1);
 	proutn(_("Mr. Spock-  \"Captain, shall we cancel the rest period?\""));
-	if (ja()) {
+	if (ja() == true) {
 	    game.resting = false;
 	    game.optime = 0.0;
 	    return true;
@@ -562,7 +562,7 @@
     if (delay <= 0.0) return;
     if (delay >= game.state.remtime || game.nenhere != 0) {
 	proutn(_("Are you sure? "));
-	if (ja() == 0) return;
+	if (ja() == false) return;
     }
 
     /* Alternate resting periods (events) with attacks */
@@ -615,7 +615,7 @@
 
     /* handle initial nova */
     game.quad[ix][iy] = IHDOT;
-    crmena(1, IHSTAR, 2, nov);
+    crmena(false, IHSTAR, sector, nov);
     prout(_(" novas."));
     game.state.galaxy[game.quadrant.x][game.quadrant.y].stars--;
     game.state.starkl++;
@@ -654,14 +654,14 @@
 			hits[top2][2]=scratch.y;
 			game.state.galaxy[game.quadrant.x][game.quadrant.y].stars -= 1;
 			game.state.starkl++;
-			crmena(1, IHSTAR, 2, scratch);
+			crmena(true, IHSTAR, sector, scratch);
 			prout(_(" novas."));
 			game.quad[scratch.x][scratch.y] = IHDOT;
 			break;
 		    case IHP: /* Destroy planet */
 			game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = NOPLANET;
 			game.state.nplankl++;
-			crmena(1, IHP, 2, scratch);
+			crmena(true, IHP, sector, scratch);
 			prout(_(" destroyed."));
 			DESTROY(&game.state.plnets[game.iplnet]);
 			game.iplnet = game.plnet.x = game.plnet.y = 0;
@@ -681,7 +681,7 @@
 			game.base.x = game.base.y = 0;
 			game.state.basekl++;
 			newcnd();
-			crmena(1, IHB, 2, scratch);
+			crmena(true, IHB, sector, scratch);
 			prout(_(" destroyed."));
 			game.quad[scratch.x][scratch.y] = IHDOT;
 			break;
@@ -724,7 +724,7 @@
 			}
 			newc.x = scratch.x + scratch.x - hits[mm][1];
 			newc.y = scratch.y + scratch.y - hits[mm][2];
-			crmena(1, iquad, 2, scratch);
+			crmena(true, iquad, sector, scratch);
 			proutn(_(" damaged"));
 			if (!VALID_SECTOR(newc.x, newc.y)) {
 			    /* can't leave quadrant */
@@ -734,7 +734,7 @@
 			iquad1 = game.quad[newc.x][newc.y];
 			if (iquad1 == IHBLANK) {
 			    proutn(_(", blasted into "));
-			    crmena(0, IHBLANK, 2, newc);
+			    crmena(false, IHBLANK, sector, newc);
 			    skip(1);
 			    deadkl(scratch, iquad, newc.x, newc.y);
 			    break;
@@ -817,7 +817,7 @@
 	    }
 	    if (idebug) {
 		proutn("=== Super nova here?");
-		if (ja()==1) {
+		if (ja() == true) {
 		    nq.x = game.quadrant.x;
 		    nq.y = game.quadrant.y;
 		}

Modified: trunk/src/finish.c
===================================================================
--- trunk/src/finish.c	2006-09-19 19:35:24 UTC (rev 601)
+++ trunk/src/finish.c	2006-09-19 21:00:29 UTC (rev 602)
@@ -139,7 +139,7 @@
 		    else {
 			proutn(_("Do you want your Commodore Emeritus Citation printed? "));
 			chew();
-			if (ja()) {
+			if (ja() == true) {
 			    igotit = 1;
 			}
 		    }

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-19 19:35:24 UTC (rev 601)
+++ trunk/src/moving.c	2006-09-19 21:00:29 UTC (rev 602)
@@ -4,12 +4,14 @@
 
 static void getcd(bool, int);
 
-void imove(void) 
+void imove(void)
+/* movement execution for warp, impule, supernova, and tractor-beam events */
 {
     double angle, deltax, deltay, bigger, x, y,
         finald, finalx, finaly, stopegy, probf;
-    int trbeam = 0, n, l, kink, kinks, iquad;
+    int n, m, kink, kinks, iquad;
     coord w;
+    bool trbeam = 0;
 
     w.x = w.y = 0;
     if (game.inorbit) {
@@ -30,7 +32,7 @@
 
     /* If tractor beam is to occur, don't move full distance */
     if (game.state.date+game.optime >= scheduled(FTBEAM)) {
-	trbeam = 1;
+	trbeam = true;
 	game.condit = IHRED;
 	game.dist = game.dist*(scheduled(FTBEAM)-game.state.date)/game.optime + 0.1;
 	game.optime = scheduled(FTBEAM) - game.state.date + 1e-5;
@@ -42,7 +44,7 @@
     n = 10.0*game.dist*bigger+0.5;
 
     if (n > 0) {
-	for (l = 1; l <= n; l++) {
+	for (m = 1; m <= n; m++) {
 	    w.x = (x += deltax) + 0.5;
 	    w.y = (y += deltay) + 0.5;
 	    if (!VALID_SECTOR(w.x, w.y)) {
@@ -50,10 +52,10 @@
 		/* Don't do it if being pushed by Nova */
 		if (game.nenhere != 0 && game.iattak != 2) {
 		    newcnd();
-		    for_local_enemies(l) {
-			finald = sqrt((w.x-game.ks[l].x)*(double)(w.x-game.ks[l].x) +
-				      (w.y-game.ks[l].y)*(double)(w.y-game.ks[l].y));
-			game.kavgd[l] = 0.5 * (finald+game.kdist[l]);
+		    for_local_enemies(m) {
+			finald = sqrt((w.x-game.ks[m].x)*(double)(w.x-game.ks[m].x) +
+				      (w.y-game.ks[m].y)*(double)(w.y-game.ks[m].y));
+			game.kavgd[m] = 0.5 * (finald+game.kdist[m]);
 		    }
 		    /*
 		     * Stas Sergeev added the game.condition
@@ -150,8 +152,8 @@
 		     * possibility that you'll get timewarped instead.
 		     */
 		    n=0;
-		    for (l=0;l<NDEVICES;l++)
-			if (game.damage[l]>0) 
+		    for (m=0;m<NDEVICES;m++)
+			if (game.damage[m]>0) 
 			    n++;
 		    probf=pow(1.4,(game.energy+game.shield)/5000.0-1.0)*pow(1.3,1.0/(n+1)-1.0);
 		    if ((game.options & OPTION_BLKHOLE) && Rand()>probf) 
@@ -196,16 +198,16 @@
     /* No quadrant change -- compute new avg enemy distances */
     game.quad[game.sector.x][game.sector.y] = game.ship;
     if (game.nenhere) {
-	for_local_enemies(l) {
-	    finald = sqrt((w.x-game.ks[l].x)*(double)(w.x-game.ks[l].x) +
-			  (w.y-game.ks[l].y)*(double)(w.y-game.ks[l].y));
-	    game.kavgd[l] = 0.5 * (finald+game.kdist[l]);
-	    game.kdist[l] = finald;
+	for_local_enemies(m) {
+	    finald = sqrt((w.x-game.ks[m].x)*(double)(w.x-game.ks[m].x) +
+			  (w.y-game.ks[m].y)*(double)(w.y-game.ks[m].y));
+	    game.kavgd[m] = 0.5 * (finald+game.kdist[m]);
+	    game.kdist[m] = finald;
 	}
 	sortkl();
 	if (!game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova && game.iattak == 0)
 	    attack(0);
-	for_local_enemies(l) game.kavgd[l] = game.kdist[l];
+	for_local_enemies(m) game.kavgd[m] = game.kdist[m];
     }
     newcnd();
     game.iattak = 0;
@@ -215,6 +217,7 @@
 }
 
 void dock(bool verbose) 
+/* dock our ship at a starbase */
 {
     chew();
     if (game.condit == IHDOCKED && verbose) {
@@ -232,7 +235,7 @@
     }
     game.condit = IHDOCKED;
     if (verbose) prout(_("Docked."));
-    game.ididit=1;
+    game.ididit=true;
     if (game.energy < game.inenrg) game.energy = game.inenrg;
     game.shield = game.inshld;
     game.torps = game.intorps;
@@ -247,198 +250,203 @@
     }
 }
 
-static void getcd(bool isprobe, int akey) {
-	/* This program originally required input in terms of a (clock)
-	   direction and distance. Somewhere in history, it was changed to
-	   cartesian coordinates. So we need to convert. I think
-	   "manual" input should still be done this way -- it's a real
-	   pain if the computer isn't working! Manual mode is still confusing
-	   because it involves giving x and y motions, yet the coordinates
-	   are always displayed y - x, where +y is downward! */
+/* 
+ * This program originally required input in terms of a (clock)
+ * direction and distance. Somewhere in history, it was changed to
+ * cartesian coordinates. So we need to convert. I think
+ * "manual" input should still be done this way -- it's a real
+ * pain if the computer isn't working! Manual mode is still confusing
+ * because it involves giving x and y motions, yet the coordinates
+ * are always displayed y - x, where +y is downward!
+ */
 
-	
-        int irowq=game.quadrant.x, icolq=game.quadrant.y, itemp=0, iprompt=0, key=0;
-	double xi, xj, xk, xl;
-	double deltax, deltay;
-	int automatic = -1;
-	coord incr;
+static void getcd(bool isprobe, int akey)
+/* get course and distance */
+{
+    int irowq=game.quadrant.x, icolq=game.quadrant.y, key=0;
+    double xi, xj, xk, xl;
+    double deltax, deltay;
+    enum {unspecified, manual, automatic} navmode = unspecified;
+    enum {curt, normal, verbose} itemp = curt;
+    coord incr;
+    bool iprompt = false;
 
-	/* Get course direction and distance. If user types bad values, return
-	   with DIREC = -1.0. */
+    /* Get course direction and distance. If user types bad values, return
+       with DIREC = -1.0. */
 
-	game.direc = -1.0;
+    game.direc = -1.0;
 	
-	if (game.landed == 1 && !isprobe) {
-		prout(_("Dummy! You can't leave standard orbit until you"));
-		proutn(_("are back aboard the "));
-		crmshp();
-		prout(".");
+    if (game.landed == 1 && !isprobe) {
+	prout(_("Dummy! You can't leave standard orbit until you"));
+	proutn(_("are back aboard the "));
+	crmshp();
+	prout(".");
+	chew();
+	return;
+    }
+    while (navmode == unspecified) {
+	if (damaged(DCOMPTR)) {
+	    if (isprobe)
+		prout(_("Computer damaged; manual navigation only"));
+	    else
+		prout(_("Computer damaged; manual movement only"));
+	    chew();
+	    navmode = manual;
+	    key = IHEOL;
+	    break;
+	}
+	if (isprobe && akey != -1) {
+	    /* For probe launch, use pre-scanned value first time */
+	    key = akey;
+	    akey = -1;
+	}
+	else 
+	    key = scan();
+
+	if (key == IHEOL) {
+	    proutn(_("Manual or automatic- "));
+	    iprompt = true;
+	    chew();
+	}
+	else if (key == IHALPHA) {
+	    if (isit("manual")) {
+		navmode = manual;
+		key = scan();
+		break;
+	    }
+	    else if (isit("automatic")) {
+		navmode = automatic;
+		key = scan();
+		break;
+	    }
+	    else {
+		huh();
 		chew();
 		return;
+	    }
 	}
-	while (automatic == -1) {
-		if (damaged(DCOMPTR)) {
-			if (isprobe)
-				prout(_("Computer damaged; manual navigation only"));
-			else
-				prout(_("Computer damaged; manual movement only"));
-			chew();
-			automatic = 0;
-			key = IHEOL;
-			break;
-		}
-		if (isprobe && akey != -1) {
-			/* For probe launch, use pre-scaned value first time */
-			key = akey;
-			akey = -1;
-		}
-		else 
-			key = scan();
+	else { /* numeric */
+	    if (isprobe)
+		prout(_("(Manual navigation assumed.)"));
+	    else
+		prout(_("(Manual movement assumed.)"));
+	    navmode = automatic;
+	    break;
+	}
+    }
 
-		if (key == IHEOL) {
-			proutn(_("Manual or automatic- "));
-			iprompt = 1;
-			chew();
-		}
-		else if (key == IHALPHA) {
-			if (isit("manual")) {
-				automatic =0;
-				key = scan();
-				break;
-			}
-			else if (isit("automatic")) {
-				automatic = 1;
-				key = scan();
-				break;
-			}
-			else {
-				huh();
-				chew();
-				return;
-			}
-		}
-		else { /* numeric */
-			if (isprobe)
-				prout(_("(Manual navigation assumed.)"));
-			else
-				prout(_("(Manual movement assumed.)"));
-			automatic = 0;
-			break;
-		}
+    if (navmode == automatic) {
+	while (key == IHEOL) {
+	    if (isprobe)
+		proutn(_("Target quadrant or quadrant&sector- "));
+	    else
+		proutn(_("Destination sector or quadrant&sector- "));
+	    chew();
+	    iprompt = true;
+	    key = scan();
 	}
 
-	if (automatic) {
-		while (key == IHEOL) {
-			if (isprobe)
-				proutn(_("Target quadrant or quadrant&sector- "));
-			else
-				proutn(_("Destination sector or quadrant&sector- "));
-			chew();
-			iprompt = 1;
-			key = scan();
-		}
+	if (key != IHREAL) {
+	    huh();
+	    return;
+	}
+	xi = aaitem;
+	key = scan();
+	if (key != IHREAL){
+	    huh();
+	    return;
+	}
+	xj = aaitem;
+	key = scan();
+	if (key == IHREAL) {
+	    /* both quadrant and sector specified */
+	    xk = aaitem;
+	    key = scan();
+	    if (key != IHREAL) {
+		huh();
+		return;
+	    }
+	    xl = aaitem;
 
-		if (key != IHREAL) {
-			huh();
-			return;
-		}
-		xi = aaitem;
-		key = scan();
-		if (key != IHREAL){
-			huh();
-			return;
-		}
-		xj = aaitem;
-		key = scan();
-		if (key == IHREAL) {
-			/* both quadrant and sector specified */
-			xk = aaitem;
-			key = scan();
-			if (key != IHREAL) {
-				huh();
-				return;
-			}
-			xl = aaitem;
-
-			irowq = xi + 0.5;
-			icolq = xj + 0.5;
-			incr.y = xk + 0.5;
-			incr.x = xl + 0.5;
-		}
-		else {
-			if (isprobe) {
-				/* only quadrant specified -- go to center of dest quad */
-				irowq = xi + 0.5;
-				icolq = xj + 0.5;
-				incr.y = incr.x = 5;
-			}
-			else {
-				incr.y = xi + 0.5;
-				incr.x = xj + 0.5;
-			}
-			itemp = 1;
-		}
-		if (!VALID_QUADRANT(icolq,irowq)||!VALID_SECTOR(incr.x,incr.y)) {
-		    huh();
-		    return;
-		}
-		skip(1);
-		if (!isprobe) {
-			if (itemp) {
-				if (iprompt) {
-					prout(_("Helmsman Sulu- \"Course locked in for %s.\""),
-						cramlc(sector, incr));
-				}
-			}
-			else prout(_("Ensign Chekov- \"Course laid in, Captain.\""));
-		}
-		deltax = icolq - game.quadrant.y + 0.1*(incr.x-game.sector.y);
-		deltay = game.quadrant.x - irowq + 0.1*(game.sector.x-incr.y);
+	    irowq = xi + 0.5;
+	    icolq = xj + 0.5;
+	    incr.y = xk + 0.5;
+	    incr.x = xl + 0.5;
 	}
-	else { /* manual */
-		while (key == IHEOL) {
-			proutn(_("X and Y displacements- "));
-			chew();
-			iprompt = 1;
-			key = scan();
+	else {
+	    if (isprobe) {
+		/* only quadrant specified -- go to center of dest quad */
+		irowq = xi + 0.5;
+		icolq = xj + 0.5;
+		incr.y = incr.x = 5;
+	    }
+	    else {
+		incr.y = xi + 0.5;
+		incr.x = xj + 0.5;
+	    }
+	    itemp = normal;
+	}
+	if (!VALID_QUADRANT(icolq,irowq)||!VALID_SECTOR(incr.x,incr.y)) {
+	    huh();
+	    return;
+	}
+	skip(1);
+	if (!isprobe) {
+	    if (itemp > curt) {
+		if (iprompt) {
+		    prout(_("Helmsman Sulu- \"Course locked in for %s.\""),
+			  cramlc(sector, incr));
 		}
-		itemp = 2;
-		if (key != IHREAL) {
-			huh();
-			return;
-		}
-		deltax = aaitem;
-		key = scan();
-		if (key != IHREAL) {
-			huh();
-			return;
-		}
-		deltay = aaitem;
+	    }
+	    else prout(_("Ensign Chekov- \"Course laid in, Captain.\""));
 	}
-	/* Check for zero movement */
-	if (deltax == 0 && deltay == 0) {
-		chew();
-		return;
+	deltax = icolq - game.quadrant.y + 0.1*(incr.x-game.sector.y);
+	deltay = game.quadrant.x - irowq + 0.1*(game.sector.x-incr.y);
+    }
+    else { /* manual */
+	while (key == IHEOL) {
+	    proutn(_("X and Y displacements- "));
+	    chew();
+	    iprompt = true;
+	    key = scan();
 	}
-	if (itemp == 2 && !isprobe) {
-		skip(1);
-		prout(_("Helmsman Sulu- \"Aye, Sir.\""));
+	itemp = verbose;
+	if (key != IHREAL) {
+	    huh();
+	    return;
 	}
-	game.dist = sqrt(deltax*deltax + deltay*deltay);
-	game.direc = atan2(deltax, deltay)*1.90985932;
-	if (game.direc < 0.0) game.direc += 12.0;
+	deltax = aaitem;
+	key = scan();
+	if (key != IHREAL) {
+	    huh();
+	    return;
+	}
+	deltay = aaitem;
+    }
+    /* Check for zero movement */
+    if (deltax == 0 && deltay == 0) {
 	chew();
 	return;
-
+    }
+    if (itemp == verbose && !isprobe) {
+	skip(1);
+	prout(_("Helmsman Sulu- \"Aye, Sir.\""));
+    }
+    game.dist = sqrt(deltax*deltax + deltay*deltay);
+    game.direc = atan2(deltax, deltay)*1.90985932;
+    if (game.direc < 0.0) game.direc += 12.0;
+    chew();
+    return;
 }
 		
 
 
 void impuls(void) 
+/* move under impulse power */
 {
     double power;
 
-    game.ididit = 0;
+    game.ididit = false;
     if (damaged(DIMPULS)) {
 	chew();
 	skip(1);
@@ -476,11 +484,11 @@
 	prout(_("First Officer Spock- \"Captain, our speed under impulse"));
 	prout(_("power is only 0.95 sectors per stardate. Are you sure"));
 	proutn(_("we dare spend the time?\" "));
-	if (ja() == 0) return;
+	if (ja() == false) return;
     }
     /* Activate impulse engines and pay the cost */
     imove();
-    game.ididit = 1;
+    game.ididit = true;
     if (game.alldone) return;
     power = 20.0 + 100.0*game.dist;
     game.energy -= power;
@@ -490,13 +498,15 @@
 }
 
 
-void warp(bool timewarp) 
+void warp(bool timewarp)
+/* move under warp drive */
 {
-    int blooey=0, twarp=0, iwarp;
+    int iwarp;
+    bool blooey = false, twarp = false;
     double power;
 
     if (!timewarp) { /* Not WARPX entry */
-	game.ididit = 0;
+	game.ididit = false;
 	if (game.damage[DWARPEN] > 10.0) {
 	    chew();
 	    skip(1);
@@ -521,7 +531,7 @@
 
 	if (power >= game.energy) {
 	    /* Insufficient power for trip */
-	    game.ididit = 0;
+	    game.ididit = false;
 	    skip(1);
 	    prout(_("Engineering to bridge--"));
 	    if (!game.shldup || 0.5*power > game.energy) {
@@ -553,7 +563,7 @@
 		   100.0*game.optime/game.state.remtime);
 	    prout(_(" percent of our"));
 	    proutn(_("  remaining time.  Are you sure this is wise?\" "));
-	    if (ja() == 0) { game.ididit = 0; game.optime=0; return;}
+	    if (ja() == false) { game.ididit = false; game.optime=0; return;}
 	}
     }
     /* Entry WARPX */
@@ -561,15 +571,15 @@
 	/* Decide if engine damage will occur */
 	double prob = game.dist*(6.0-game.warpfac)*(6.0-game.warpfac)/66.666666666;
 	if (prob > Rand()) {
-	    blooey = 1;
+	    blooey = true;
 	    game.dist = Rand()*game.dist;
 	}
 	/* Decide if time warp will occur */
-	if (0.5*game.dist*pow(7.0,game.warpfac-10.0) > Rand()) twarp=1;
-	if (idebug && game.warpfac==10 && twarp==0) {
-	    blooey=0;
+	if (0.5*game.dist*pow(7.0,game.warpfac-10.0) > Rand()) twarp = true;
+	if (idebug && game.warpfac==10 && !twarp) {
+	    blooey = false;
 	    proutn("=== Force time warp? ");
-	    if (ja()==1) twarp=1;
+	    if (ja() == true) twarp = true;
 	}
 	if (blooey || twarp) {
 	    /* If time warp or engine damage, check path */
@@ -596,8 +606,8 @@
 		iy = y +0.5;
 		if (!VALID_SECTOR(ix, iy)) break;
 		if (game.quad[ix][iy] != IHDOT) {
-		    blooey = 0;
-		    twarp = 0;
+		    blooey = false;
+		    twarp = false;
 		}
 	    }
 	}
@@ -618,13 +628,14 @@
 	prout(_("  Scott here.  The warp engines are damaged."));
 	prout(_("  We'll have to reduce speed to warp 4."));
     }
-    game.ididit = 1;
+    game.ididit = true;
     return;
 }
 
 
 
 void setwrp(void) 
+/* change the warp factor */
 {
     int key;
     double oldfac;
@@ -676,6 +687,7 @@
 }
 
 void atover(bool igrab) 
+/* cope with being tossed out of quadrant by supernova or yanked by beam */
 {
     double power, distreq;
 
@@ -769,6 +781,7 @@
 }
 
 void timwrp() 
+/* let's do the time warp again */
 {
     int l, gotit;
     prout(_("***TIME WARP ENTERED."));
@@ -829,6 +842,7 @@
 }
 
 void probe(void) 
+/* launch deep-space probe */
 {
     double angle, bigger;
     int key;
@@ -865,7 +879,7 @@
 	/* slow mode, so let Kirk know how many probes there are left */
 	prout(game.nprobes==1 ? _("%d probe left.") : _("%d probes left."), game.nprobes);
 	proutn(_("Are you sure you want to fire a probe? "));
-	if (ja()==0) return;
+	if (ja() == false) return;
     }
 
     game.isarmed = false;
@@ -896,15 +910,16 @@
     game.probec = game.quadrant;
     schedule(FDSPROB, 0.01); // Time to move one sector
     prout(_("Ensign Chekov-  \"The deep space probe is launched, Captain.\""));
-    game.ididit = 1;
+    game.ididit = true;
     return;
 }
 
 void mayday(void) 
+/* yell for help from nearest starbase */
 {
     /* There's more than one way to move in this game! */
     double ddist, xdist, probf;
-    int line = 0, l, ix, iy;
+    int line = 0, m, ix, iy;
 
     chew();
     /* Test for game.conditions which prevent calling for help */
@@ -934,11 +949,11 @@
     }
     else {
 	ddist = FOREVER;
-	for_starbases(l) {
-	    xdist=10.0*sqrt(square(game.state.baseq[l].x-game.quadrant.x)+square(game.state.baseq[l].y-game.quadrant.y));
+	for_starbases(m) {
+	    xdist=10.0*sqrt(square(game.state.baseq[m].x-game.quadrant.x)+square(game.state.baseq[m].y-game.quadrant.y));
 	    if (xdist < ddist) {
 		ddist = xdist;
-		line = l;
+		line = m;
 	    }
 	}
 	/* Since starbase not in quadrant, set up new quadrant */
@@ -952,7 +967,7 @@
     crmshp();
     prout(_(" dematerializes."));
     game.sector.x=0;
-    for (l = 1; l <= 5; l++) {
+    for (m = 1; m <= 5; m++) {
 	ix = game.base.x+3.0*Rand()-1;
 	iy = game.base.y+3.0*Rand()-1;
 	if (VALID_SECTOR(ix,iy) && game.quad[ix][iy]==IHDOT) {
@@ -969,15 +984,15 @@
     }
     /* Give starbase three chances to rematerialize starship */
     probf = pow((1.0 - pow(0.98,ddist)), 0.33333333);
-    for (l = 1; l <= 3; l++) {
-	switch (l) {
+    for (m = 1; m <= 3; m++) {
+	switch (m) {
 	case 1: proutn(_("1st")); break;
 	case 2: proutn(_("2nd")); break;
 	case 3: proutn(_("3rd")); break;
 	}
 	proutn(_(" attempt to re-materialize "));
 	crmshp();
-	switch (l){
+	switch (m){
 	case 1: game.quad[ix][iy]=IHMATER0;
 	    break;
 	case 2: game.quad[ix][iy]=IHMATER1;
@@ -992,7 +1007,7 @@
 	delay(500);
 	textcolor(DEFAULT);
     }
-    if (l > 3) {
+    if (m > 3) {
 	game.quad[ix][iy]=IHQUEST;
 	game.alive = 0;
 	drawmaps(1);
@@ -1004,7 +1019,7 @@
     textcolor(GREEN);
     prout(_("succeeds."));
     textcolor(DEFAULT);
-    dock(0);
+    dock(false);
     skip(1);
     prout(_("Lt. Uhura-  \"Captain, we made it!\""));
 }

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-19 19:35:24 UTC (rev 601)
+++ trunk/src/planets.c	2006-09-19 21:00:29 UTC (rev 602)
@@ -118,7 +118,7 @@
 	if (!damaged(DSHUTTL) && (game.state.plnets[game.iplnet].known==shuttle_down || game.iscraft == 1)) {
 	    skip(1);
 	    proutn(_("Spock-  \"May I suggest the shuttle craft, Sir?\" "));
-	    if (ja() != 0) shuttle();
+	    if (ja() == true) shuttle();
 	}
 	return;
     }
@@ -141,7 +141,7 @@
 	/* Coming from planet */
 	if (game.state.plnets[game.iplnet].known==shuttle_down) {
 	    proutn(_("Spock-  \"Wouldn't you rather take the Galileo?\" "));
-	    if (ja() != 0) {
+	    if (ja() == true) {
 		chew();
 		return;
 	    }
@@ -160,7 +160,7 @@
 	    prout(_("Spock-  \"Captain, I fail to see the logic in"));
 	    prout(_("  exploring a planet with no dilithium crystals."));
 	    proutn(_("  Are you sure this is wise?\" "));
-	    if (ja()==0) {
+	    if (ja() == false) {
 		chew();
 		return;
 	    }
@@ -250,7 +250,7 @@
     prout(_("  raw dilithium crystals into the ship's power"));
     prout(_("  system may risk a severe explosion."));
     proutn(_("  Are you sure this is wise?\" "));
-    if (ja()==0) {
+    if (ja() == false) {
 	chew();
 	return;
     }
@@ -330,7 +330,7 @@
 	       (int)(100*game.optime/game.state.remtime));
 	prout(_("remaining time."));
 	proutn(_("Are you sure this is wise?\" "));
-	if (ja()==0) {
+	if (ja() == false) {
 	    game.optime = 0.0;
 	    return;
 	}
@@ -341,7 +341,7 @@
 	    /* Galileo on ship! */
 	    if (!damaged(DTRANSP)) {
 		proutn(_("Spock-  \"Would you rather use the transporter?\" "));
-		if (ja() != 0) {
+		if (ja() == true) {
 		    beam();
 		    return;
 		}
@@ -420,7 +420,7 @@
     prout(_("Spock-  \"Captain, the 'Experimental Death Ray'"));
     prout(_("  is highly unpredictible.  Considering the alternatives,"));
     proutn(_("  are you sure this is wise?\" "));
-    if (ja()==0) return;
+    if (ja() == false) return;
     prout(_("Spock-  \"Acknowledged.\""));
     skip(1);
     game.ididit=1;

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-19 19:35:24 UTC (rev 601)
+++ trunk/src/sst.c	2006-09-19 21:00:29 UTC (rev 602)
@@ -656,7 +656,7 @@
 
 	if (game.tourn && game.alldone) {
 	    proutn("Do you want your score recorded?");
-	    if (ja()) {
+	    if (ja() == true) {
 		chew2();
 		freeze(false);
 	    }
@@ -702,9 +702,9 @@
     return buf;
 }
 
-void crmena(int i, int enemy, int key, coord w) 
+void crmena(bool stars, int enemy, enum loctype key, coord w) 
 {
-    if (i == 1) proutn("***");
+    if (stars) proutn("***");
     cramen(enemy);
     proutn(" at ");
     proutn(cramlc(key, w));
@@ -842,27 +842,27 @@
 void debugme(void) 
 {
     proutn("Reset levels? ");
-    if (ja() != 0) {
+    if (ja() == true) {
 	if (game.energy < game.inenrg) game.energy = game.inenrg;
 	game.shield = game.inshld;
 	game.torps = game.intorps;
 	game.lsupres = game.inlsr;
     }
     proutn("Reset damage? ");
-    if (ja() != 0) {
+    if (ja() == true) {
 	int i;
 	for (i=0; i < NDEVICES; i++) 
 	    if (game.damage[i] > 0.0) 
 		game.damage[i] = 0.0;
     }
     proutn("Toggle debug flag? ");
-    if (ja() != 0) {
+    if (ja() == true) {
 	idebug = !idebug;
 	if (idebug) prout("Debug output ON");
 	else prout("Debug output OFF");
     }
     proutn("Cause selective damage? ");
-    if (ja() != 0) {
+    if (ja() == true) {
 	int i, key;
 	for (i=0; i < NDEVICES; i++) {
 	    proutn("Kill ");
@@ -876,7 +876,7 @@
 	}
     }
     proutn("Examine/change events? ");
-    if (ja() != 0) {
+    if (ja() == true) {
 	event *ev;
 	coord w;
 	int i;
@@ -938,7 +938,7 @@
 	chew();
     }
     proutn("Induce supernova here? ");
-    if (ja()) {
+    if (ja() == true) {
 	game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova = true;
 	atover(true);
     }

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-19 19:35:24 UTC (rev 601)
+++ trunk/src/sst.h	2006-09-19 21:00:29 UTC (rev 602)
@@ -328,7 +328,7 @@
 
 /* Function prototypes */
 void prelim(void);
-void attack(int);
+void attack(bool);
 bool choose(bool);
 void setup(bool);
 void score(void);
@@ -380,8 +380,8 @@
 void newcnd(void);
 void sortkl(void);
 void imove(void);
-void ram(int, int, coord);
-void crmena(int, int, int, coord w);
+void ram(bool, int, coord);
+void crmena(bool, int, enum loctype, coord w);
 void deadkl(coord, int, int, int);
 void timwrp(void);
 void movcom(void);



From esr at mail.berlios.de  Tue Sep 19 23:30:16 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 19 Sep 2006 23:30:16 +0200
Subject: [Sst-commit-watch] r603 - trunk/src
Message-ID: <200609192130.k8JLUGj8013250@sheep.berlios.de>

Author: esr
Date: 2006-09-19 23:30:15 +0200 (Tue, 19 Sep 2006)
New Revision: 603

Modified:
   trunk/src/finish.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
More type cleanup and explanatory comments.


Modified: trunk/src/finish.c
===================================================================
--- trunk/src/finish.c	2006-09-19 21:00:29 UTC (rev 602)
+++ trunk/src/finish.c	2006-09-19 21:30:15 UTC (rev 603)
@@ -2,7 +2,8 @@
 #include <string.h>
 #include <time.h>
 
-void dstrct() 
+void selfdestruct(void)
+/* self-destruct maneuver */
 {
     /* Finish with a BANG! */
     chew();
@@ -69,7 +70,8 @@
 }
 				
 
-void finish(FINTYPE ifin) 
+void finish(FINTYPE ifin)
+/* end the game, with appropriate notfications */
 {
     bool igotit = false;
     game.alldone = true;
@@ -313,6 +315,7 @@
 }
 
 void score(void) 
+/* compute player's score */
 {
     double timused = game.state.date - game.indate;
     int ithperd, iwon, klship;
@@ -392,7 +395,9 @@
     prout(_("TOTAL SCORE                               %5d"), iscore);
 }
 
-void plaque(void) {
+void plaque(void)
+/* emit winner's commemmorative plaque */
+{
 	FILE *fp=NULL;
 	time_t t;
 	char *timestring;

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-19 21:00:29 UTC (rev 602)
+++ trunk/src/moving.c	2006-09-19 21:30:15 UTC (rev 603)
@@ -711,7 +711,7 @@
 	}
 	prout(_("SUCCEEDS!"));
 	if (game.imine) {
-	    game.imine = 0;
+	    game.imine = false;
 	    proutn(_("The crystals mined were "));
 	    if (Rand() <= 0.25) {
 		prout(_("lost."));

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-19 21:00:29 UTC (rev 602)
+++ trunk/src/planets.c	2006-09-19 21:30:15 UTC (rev 603)
@@ -2,30 +2,18 @@
 
 static char *classes[] = {"M","N","O"};
 
-static int consumeTime(void) 
+static bool consumeTime(void)
+/* abort a lengthy operation if an event interrupts it */
 {
-/* I think most of this avoidance was caused by overlay scheme.
-   Let's see what happens if all events can occur here */
-
-//  double asave;
-    game.ididit = 1;
-#if 0
-    /* Don't worry about this */
-    if (scheduled(FTBEAM) <= game.state.date+game.optime && game.state.remcom != 0 && game.condit != IHDOCKED) {
-	/* We are about to be tractor beamed -- operation fails */
-	return 1;
-    }
-#endif
-//	asave = scheduled(FSNOVA);
-//	unschedule(FSNOVA); /* defer supernovas */
-    events();	/* Used to avoid if FSCMOVE is scheduled within time */
-//	schedule(FSNOVA, asave-game.state.time);
-    /*fails if game over, quadrant super-novas or we've moved to new quadrant*/
-    if (game.alldone || game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova || game.justin != 0) return 1;
-    return 0;
+    game.ididit = true;
+    events();
+    if (game.alldone || game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova || game.justin) 
+	return true;
+    return false;
 }
 
 void preport(void) 
+/* report on (uninhabited) planets in the galaxy */
 {
     bool iknow = false;
     int i;
@@ -51,10 +39,11 @@
 		prout(_("    Shuttle Craft Galileo on surface."));
 	}
     }
-    if (iknow==0) prout(_("No information available."));
+    if (!iknow) prout(_("No information available."));
 }
 
-void orbit(void) 
+void orbit(void)
+/* enter standard orbit */
 {
     skip(1);
     chew();
@@ -82,7 +71,8 @@
     game.ididit = true;
 }
 
-void sensor(void) 
+void sensor(void)
+/* examine planets in this quadrant */
 {
     skip(1);
     chew();
@@ -110,6 +100,7 @@
 }
 
 void beam(void) 
+/* use the transporter */
 {
     chew();
     skip(1);
@@ -171,7 +162,7 @@
 	skip(1);
 	prout(_("Kirk-  \"Energize.\""));
     }
-    game.ididit=1;
+    game.ididit = true;
     skip(1);
     prouts("WWHOOOIIIIIRRRRREEEE.E.E.  .  .  .  .   .    .");
     skip(2);
@@ -189,15 +180,16 @@
     if (game.landed==1 && game.state.plnets[game.iplnet].known==shuttle_down) {
 	prout(_("The shuttle craft Galileo is here!"));
     }
-    if (game.landed!=1 && game.imine==1) {
+    if (game.landed!=1 && game.imine) {
 	game.icrystl = 1;
 	game.cryprob = 0.05;
     }
-    game.imine = 0;
+    game.imine = false;
     return;
 }
 
 void mine(void) 
+/* strip-mine a world for dilithium */
 {
     skip(1);
     chew();
@@ -213,7 +205,7 @@
 	prout(_("No dilithium crystals on this planet."));
 	return;
     }
-    if (game.imine == 1) {
+    if (game.imine) {
 	prout(_("You've already mined enough crystals for this trip."));
 	return;
     }
@@ -228,13 +220,13 @@
     if (consumeTime()) return;
     prout(_("Mining operation complete."));
     game.state.plnets[game.iplnet].crystals = MINED;
-    game.imine = 1;
-    game.ididit=1;
+    game.imine = game.ididit = true;
 }
 
-void usecrystals(void) 
+void usecrystals(void)
+/* use dilithium crystals */
 {
-    game.ididit=0;
+    game.ididit = false;
     skip(1);
     chew();
     if (game.icrystl!=1) {
@@ -280,10 +272,11 @@
     prout(_("   are going crazy, but I think it's"));
     prout(_("   going to work!!  Congratulations, Sir!\""));
     game.cryprob *= 2.0;
-    game.ididit=1;
+    game.ididit = true;
 }
 
 void shuttle(void) 
+/* use shuttlecraft for planetary jaunt */
 {
     chew();
     skip(1);
@@ -370,11 +363,11 @@
 	    if (consumeTime()) return;
 	    game.iscraft = 1;
 	    game.icraft = 0;
-	    if (game.imine!=0) {
+	    if (game.imine) {
 		game.icrystl = 1;
 		game.cryprob = 0.05;
 	    }
-	    game.imine = 0;
+	    game.imine = false;
 	    prout(_("Trip complete."));
 	    return;
 	}
@@ -398,11 +391,12 @@
     }
 }
 
-void deathray(void) 
+void deathray(void)
+/* use the big zapper */
 {
     double dprob, r = Rand();
 	
-    game.ididit = 0;
+    game.ididit = false;
     skip(1);
     chew();
     if (game.ship != IHE) {
@@ -423,7 +417,7 @@
     if (ja() == false) return;
     prout(_("Spock-  \"Acknowledged.\""));
     skip(1);
-    game.ididit=1;
+    game.ididit = true;
     prouts(_("WHOOEE ... WHOOEE ... WHOOEE ... WHOOEE"));
     skip(1);
     prout(_("Crew scrambles in emergency preparation."));
@@ -511,6 +505,7 @@
 }
 
 char *systemname(int pindx)
+/* return the name of a given solar system */
 {
     static char copy[BUFSIZ];
     /* the below array should not be static, or it won't gettextize

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-19 21:00:29 UTC (rev 602)
+++ trunk/src/reports.c	2006-09-19 21:30:15 UTC (rev 603)
@@ -3,7 +3,8 @@
 #include <stdlib.h>
 #include <string.h>
 
-void attakreport(bool curt) 
+void attakreport(bool curt)
+/* report status of bases under attack */
 {
     if (!curt) {
 	if (is_scheduled(FCDBAS)) {
@@ -28,7 +29,8 @@
 }
 	
 
-void report(void) 
+void report(void)
+/* report on general game status */
 {
     char *s1,*s2,*s3;
 
@@ -114,6 +116,7 @@
 }
 	
 void lrscan(void) 
+/* long-range sensor scan */
 {
     int x, y;
     chew();
@@ -150,6 +153,7 @@
 }
 
 void dreprt(void) 
+/* damage report */
 {
     bool jdam = false;
     int i;
@@ -185,7 +189,8 @@
 	    }
 }
 
-void chart(bool title) 
+void chart(bool title)
+/* display the star chart */ 
 {
     int i,j;
     chew();
@@ -232,6 +237,7 @@
 }
 
 static void sectscan(int goodScan, int i, int j) 
+/* light up an individual dot in a sector */
 {
     if (goodScan || (abs(i-game.sector.x)<= 1 && abs(j-game.sector.y) <= 1)){
 	if ((game.quad[i][j]==IHMATER0)||(game.quad[i][j]==IHMATER1)||(game.quad[i][j]==IHMATER2)||(game.quad[i][j]==IHE)||(game.quad[i][j]==IHF)){
@@ -252,7 +258,8 @@
 	proutn("- ");
 }
 
-static void status(int req) 
+static void status(int req)
+/* print status report lines */
 {
     char *cp = NULL;
     int t, dam = 0;
@@ -330,7 +337,8 @@
     }
 }
 		
-int srscan(int l) 
+int srscan(int l)
+/* short-range scan */
 {
     /* the "sy" request is undocumented */
     static char requests[][3] =
@@ -406,6 +414,7 @@
 			
 			
 void eta(void)
+/* use computer to get estimated time of arrival for a warp jump */
 {
     int ix1, ix2, iy1, iy2;
     bool wfl, prompt = false;

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-19 21:00:29 UTC (rev 602)
+++ trunk/src/setup.c	2006-09-19 21:30:15 UTC (rev 603)
@@ -208,7 +208,7 @@
     prout("the Faerie Queene, which is antiquated but,");
     prout("still useable.");
     if (game.icrystl!=0) prout("The dilithium crystals have been moved.");
-    game.imine=0;
+    game.imine = false;
     game.iscraft=0; /* Galileo disappears */
     /* Resupply ship */
     game.condit=IHDOCKED;
@@ -253,8 +253,8 @@
     game.battle.x = game.battle.y = 0;
     game.state.date = game.indate = 100.0*(int)(31.0*Rand()+20.0);
     game.nkinks = game.nhelp = game.casual = game.abandoned = 0;
-    game.resting = false;
-    game.isatb = game.iscate = game.imine = game.icrystl = game.icraft = game.state.nplankl = 0;
+    game.resting = game.imine = false;
+    game.isatb = game.iscate = game.icrystl = game.icraft = game.state.nplankl = 0;
     game.state.starkl = game.state.basekl = 0;
     game.iscraft = 1;
     game.landed = -1;

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-19 21:00:29 UTC (rev 602)
+++ trunk/src/sst.c	2006-09-19 21:30:15 UTC (rev 603)
@@ -531,7 +531,7 @@
 	    abandn();
 	    break;
 	case DESTRUCT:			// Self Destruct
-	    dstrct();
+	    selfdestruct();
 	    break;
 	case SAVE:			// Save Game
 	    freeze(false);

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-19 21:00:29 UTC (rev 602)
+++ trunk/src/sst.h	2006-09-19 21:30:15 UTC (rev 603)
@@ -215,6 +215,7 @@
 	neutz,		// Romulan Neutral Zone
 	isarmed,	// probe is armed
 	inorbit,	// orbiting a planet
+	imine,		// mining
 	thawed;		// thawed game
     int inkling,	// initial number of klingons
 	inbase,		// initial number of bases
@@ -237,7 +238,6 @@
 	shldchg,	// shield is changing (affects efficiency)
 	landed,		// party on planet (1), on ship (-1)
 	iplnet,		// planet # in quadrant
-	imine,		// mining
 	inplan,		// initial planets
 	nenhere,	// number of enemies in quadrant
 	ishere,		// super-commander in quandrant
@@ -352,7 +352,7 @@
 void mayday(void);
 void abandn(void);
 void finish(FINTYPE);
-void dstrct(void);
+void selfdestruct(void);
 void kaboom(void);
 void freeze(bool);
 int thaw(void);



From esr at mail.berlios.de  Wed Sep 20 00:03:07 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 20 Sep 2006 00:03:07 +0200
Subject: [Sst-commit-watch] r604 - trunk/src
Message-ID: <200609192203.k8JM37xJ015903@sheep.berlios.de>

Author: esr
Date: 2006-09-20 00:03:07 +0200 (Wed, 20 Sep 2006)
New Revision: 604

Modified:
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/moving.c
   trunk/src/sst.c
Log:
More boolean cleanups and explanator comments.


Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-19 21:30:15 UTC (rev 603)
+++ trunk/src/battle.c	2006-09-19 22:03:07 UTC (rev 604)
@@ -6,7 +6,7 @@
     int key;
     enum {NONE, SHUP, SHDN, NRG} action = NONE;
 
-    game.ididit = 0;
+    game.ididit = false;
 
     if (i == 2) action = SHUP;
     else {
@@ -80,7 +80,7 @@
 	game.shldup=false;
 	game.shldchg=1;
 	prout(_("Shields lowered."));
-	game.ididit=1;
+	game.ididit = true;
 	return;
     case NRG:
 	while (scan() != IHREAL) {
@@ -109,7 +109,7 @@
 	    prout(_("Engineering to bridge--"));
 	    prout(_("  Scott here. Power circuit problem, Captain."));
 	    prout(_("  I can't drain the shields."));
-	    game.ididit = 0;
+	    game.ididit = false;
 	    return;
 	}
 	if (game.shield+aaitem < 0) {
@@ -733,7 +733,7 @@
     double r, dummy;
     int key, n, i, osuabor;
 
-    game.ididit = 0;
+    game.ididit = false;
 
     if (damaged(DPHOTON)) {
 	prout(_("Photon tubes damaged."));
@@ -822,7 +822,7 @@
 	    if (targetcheck(targ[i][1], targ[i][2], &course[i])) return;
 	}
     }
-    game.ididit = 1;
+    game.ididit = true;
     /* Loop for moving <n> torpedoes */
     osuabor = 0;
     for (i = 1; i <= n && !osuabor; i++) {
@@ -1069,7 +1069,7 @@
 	    }
 	    if (powrem > 0.0) extra += powrem;
 	    hittem(hits);
-	    game.ididit=1;
+	    game.ididit = true;
 	}
 	if (extra > 0 && game.alldone == 0) {
 	    if (game.ithere) {
@@ -1181,7 +1181,7 @@
 	    if (checkshctrl(rpow)) return;
 	}
 	hittem(hits);
-	game.ididit=1;
+	game.ididit = true;
     case NOTSET:;	/* avoid gcc warning */
     }
     /* Say shield raised or malfunction, if necessary */

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-19 21:30:15 UTC (rev 603)
+++ trunk/src/events.c	2006-09-19 22:03:07 UTC (rev 604)
@@ -42,6 +42,7 @@
 }
 
 static bool cancelrest(void)
+/* rest period is interrupted by event */
 {
     if (game.resting) {
 	skip(1);
@@ -57,6 +58,7 @@
 }
 
 void events(void) 
+/* run through the event queue looking for things to do */
 {
     int istract=0, evcode, i=0, j, k, l;
     double fintim = game.state.date + game.optime, datemin, xtime, repair, yank=0;
@@ -543,11 +545,12 @@
 
 				
 void wait(void) 
+/* wait on events */
 {
     int key;
     double temp, delay, origTime;
 
-    game.ididit = 0;
+    game.ididit = false;
     for (;;) {
 	key = scan();
 	if (key  != IHEOL) break;
@@ -584,7 +587,7 @@
 	if (game.optime < delay) attack(0);
 	if (game.alldone) return;
 	events();
-	game.ididit = 1;
+	game.ididit = true;
 	if (game.alldone) return;
 	delay -= temp;
 	/* Repair Deathray if long rest at starbase */
@@ -599,6 +602,7 @@
 }
 
 void nova(int ix, int iy) 
+/* star goes nova */
 {
     static double course[] =
 	{0.0, 10.5, 12.0, 1.5, 9.0, 0.0, 3.0, 7.5, 6.0, 4.5};
@@ -782,10 +786,11 @@
 	
 	
 void snova(int insx, int insy) 
+/* star goes supernova */
 {
     int comdead, nsx, nsy, num=0, kldead, iscdead;
     int nrmdead, npdead;
-    int incipient=0;
+    bool incipient = false;
     coord nq;
 
     nq.x = nq.y = 0;
@@ -835,7 +840,7 @@
 	}
 	else {
 	    /* we are in the quadrant! */
-	    incipient = 1;
+	    incipient = true;
 	    num = Rand()* game.state.galaxy[nq.x][nq.y].stars + 1;
 	    for_sectors(nsx) {
 		for_sectors(nsy) {
@@ -849,7 +854,7 @@
 	}
     }
     else {
-	incipient = 1;
+	incipient = true;
     }
 
     if (incipient) {
@@ -900,18 +905,18 @@
     game.state.nromrem -= nrmdead;
     npdead = num - nrmdead*10;
     if (npdead) {
-	int l;
-	for (l = 0; l < game.inplan; l++)
-	    if (same(game.state.plnets[l].w, nq)) {
-		DESTROY(&game.state.plnets[l]);
+	int loop;
+	for (loop = 0; loop < game.inplan; loop++)
+	    if (same(game.state.plnets[loop].w, nq)) {
+		DESTROY(&game.state.plnets[loop]);
 	    }
     }
     /* Destroy any base in supernovaed quadrant */
     if (game.state.rembase) {
-	int maxloop = game.state.rembase, l;
-	for (l = 1; l <= maxloop; l++)
-	    if (same(game.state.baseq[l], nq)) {
-		game.state.baseq[l] = game.state.baseq[game.state.rembase];
+	int maxloop = game.state.rembase, loop;
+	for (loop = 1; loop <= maxloop; loop++)
+	    if (same(game.state.baseq[loop], nq)) {
+		game.state.baseq[loop] = game.state.baseq[game.state.rembase];
 		game.state.baseq[game.state.rembase].x = game.state.baseq[game.state.rembase].y = 0;
 		game.state.rembase--;
 		break;
@@ -927,7 +932,7 @@
     if (same(game.quadrant, nq) || !damaged(DRADIO) || game.condit == IHDOCKED)
 	game.state.galaxy[nq.x][nq.y].supernova = true;
     /* If supernova destroys last Klingons give special message */
-    if (KLINGREM==0 && (nq.x != game.quadrant.x || nq.y != game.quadrant.y)) {
+    if (KLINGREM==0 && !same(nq, game.quadrant)) {
 	skip(2);
 	if (insx == 0) prout(_("Lucky you!"));
 	proutn(_("A supernova in %s has just destroyed the last Klingons."),

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-19 21:30:15 UTC (rev 603)
+++ trunk/src/moving.c	2006-09-19 22:03:07 UTC (rev 604)
@@ -235,7 +235,7 @@
     }
     game.condit = IHDOCKED;
     if (verbose) prout(_("Docked."));
-    game.ididit=true;
+    game.ididit = true;
     if (game.energy < game.inenrg) game.energy = game.inenrg;
     game.shield = game.inshld;
     game.torps = game.intorps;

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-19 21:30:15 UTC (rev 603)
+++ trunk/src/sst.c	2006-09-19 22:03:07 UTC (rev 604)
@@ -409,7 +409,7 @@
 		makechart();
 		continue;
 	    }
-	    game.ididit=0;
+	    game.ididit = false;
 	    clrscr();
 	    setwnd(message_window);
 	    clrscr();



From esr at mail.berlios.de  Wed Sep 20 01:09:40 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 20 Sep 2006 01:09:40 +0200
Subject: [Sst-commit-watch] r605 - trunk/src
Message-ID: <200609192309.k8JN9e4t005565@sheep.berlios.de>

Author: esr
Date: 2006-09-20 01:09:39 +0200 (Wed, 20 Sep 2006)
New Revision: 605

Modified:
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/moving.c
   trunk/src/sst.h
Log:
Clean up the rather nasty logoc of snova(), and fix a minor navigation
bug (inability to select manual mode) introduced by a recent commit.


Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-19 22:03:07 UTC (rev 604)
+++ trunk/src/battle.c	2006-09-19 23:09:39 UTC (rev 605)
@@ -16,7 +16,7 @@
 		action = NRG;
 	    else {
 		chew();
-		if (!damaged(DSHIELD)) {
+		if (damaged(DSHIELD)) {
 		    prout(_("Shields damaged and down."));
 		    return;
 		}
@@ -350,7 +350,7 @@
 	    return;
 	case IHSTAR: /* Hit a star */
 	    if (Rand() > 0.10) {
-		nova(w.x, w.y);
+		nova(w);
 		return;
 	    }
 	    crmena(true, IHSTAR, sector, w);

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-19 22:03:07 UTC (rev 604)
+++ trunk/src/events.c	2006-09-19 23:09:39 UTC (rev 605)
@@ -154,7 +154,7 @@
 	case FSNOVA: /* Supernova */
 	    if (!ipage) pause_game(1);
 	    ipage=true;
-	    snova(0,0);
+	    snova(false, NULL);
 	    schedule(FSNOVA, expran(0.5*game.intime));
 	    if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova) return;
 	    break;
@@ -416,7 +416,7 @@
 	    game.proben--; // One less to travel
 	    if (game.proben == 0 && game.isarmed && pdest->stars) {
 		/* lets blow the sucker! */
-		snova(1,0);
+		snova(true, &game.probec);
 		unschedule(FDSPROB);
 		if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova) 
 		    return;
@@ -601,24 +601,23 @@
     game.optime = 0;
 }
 
-void nova(int ix, int iy) 
+void nova(coord nov) 
 /* star goes nova */
 {
     static double course[] =
 	{0.0, 10.5, 12.0, 1.5, 9.0, 0.0, 3.0, 7.5, 6.0, 4.5};
     int bot, top, top2, hits[QUADSIZE+1][3], kount, icx, icy, mm, nn, j;
     int iquad, iquad1, i, ll;
-    coord newc, nov, scratch;
+    coord newc, scratch;
 
-    nov.x = ix; nov.y = iy;
     if (Rand() < 0.05) {
 	/* Wow! We've supernova'ed */
-	snova(ix, iy);
+	snova(false, &nov);
 	return;
     }
 
     /* handle initial nova */
-    game.quad[ix][iy] = IHDOT;
+    game.quad[nov.x][nov.y] = IHDOT;
     crmena(false, IHSTAR, sector, nov);
     prout(_(" novas."));
     game.state.galaxy[game.quadrant.x][game.quadrant.y].stars--;
@@ -628,8 +627,8 @@
     bot = top = top2 = 1;
     kount = 0;
     icx = icy = 0;
-    hits[1][1] = ix;
-    hits[1][2] = iy;
+    hits[1][1] = nov.x;
+    hits[1][2] = nov.y;
     while (1) {
 	for (mm = bot; mm <= top; mm++) 
 	    for (nn = 1; nn <= 3; nn++)  /* nn,j represents coordinates around current */
@@ -650,7 +649,7 @@
 		    case IHSTAR: /* Affect another star */
 			if (Rand() < 0.05) {
 			    /* This star supernovas */
-			    snova(scratch.x,scratch.y);
+			    snova(false, &scratch);
 			    return;
 			}
 			top2++;
@@ -678,7 +677,7 @@
 		    case IHB: /* Destroy base */
 			game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase = false;
 			for_starbases(i)
-			    if (game.state.baseq[i].x==game.quadrant.x && game.state.baseq[i].y==game.quadrant.y) 
+			    if (same(game.state.baseq[i], game.quadrant)) 
 				break;
 			game.state.baseq[i] = game.state.baseq[game.state.rembase];
 			game.state.rembase--;
@@ -720,7 +719,7 @@
 		    case IHS:
 		    case IHR:
 			for_local_enemies(ll)
-			    if (game.ks[ll].x==scratch.x && game.ks[ll].y==scratch.y) break;
+			    if (same(game.ks[ll], scratch)) break;
 			game.kpower[ll] -= 800.0; /* If firepower is lost, die */
 			if (game.kpower[ll] <= 0.0) {
 			    deadkl(scratch, iquad, scratch.x, scratch.y);
@@ -752,8 +751,7 @@
 			proutn(cramlc(sector, newc));
 			game.quad[scratch.x][scratch.y] = IHDOT;
 			game.quad[newc.x][newc.y] = iquad;
-			game.ks[ll].x = newc.x;
-			game.ks[ll].y = newc.y;
+			game.ks[ll] = newc;
 			game.kavgd[ll] = sqrt(square(game.sector.x-newc.x)+square(game.sector.y-newc.y));
 			game.kdist[ll] = game.kavgd[ll];
 			skip(1);
@@ -785,87 +783,68 @@
 }
 	
 	
-void snova(int insx, int insy) 
+void snova(bool induced, coord *w) 
 /* star goes supernova */
 {
-    int comdead, nsx, nsy, num=0, kldead, iscdead;
-    int nrmdead, npdead;
-    bool incipient = false;
+    int num = 0, nrmdead, npdead, kldead;
     coord nq;
 
-    nq.x = nq.y = 0;
-    nsx = insy;
-    nsy = insy;
-
-    if (insy== 0) {
-	if (insx == 1)
-	    /* NOVAMAX being used */
-	    nq = game.probec;
-	else {
-	    int stars = 0;
-	    /* Scheduled supernova -- select star */
-	    /* logic changed here so that we won't favor quadrants in top
-	       left of universe */
-	    for_quadrants(nq.x) {
-		for_quadrants(nq.y) {
-		    stars += game.state.galaxy[nq.x][nq.y].stars;
-		}
+    if (w != NULL) 
+	nq = *w;
+    else {
+	int stars = 0;
+	/* Scheduled supernova -- select star */
+	/* logic changed here so that we won't favor quadrants in top
+	   left of universe */
+	for_quadrants(nq.x) {
+	    for_quadrants(nq.y) {
+		stars += game.state.galaxy[nq.x][nq.y].stars;
 	    }
-	    if (stars == 0) return; /* nothing to supernova exists */
-	    num = Rand()*stars + 1;
-	    for_quadrants(nq.x) {
-		for_quadrants(nq.y) {
-		    num -= game.state.galaxy[nq.x][nq.y].stars;
-		    if (num <= 0) break;
-		}
-		if (num <=0) break;
+	}
+	if (stars == 0) return; /* nothing to supernova exists */
+	num = Rand()*stars + 1;
+	for_quadrants(nq.x) {
+	    for_quadrants(nq.y) {
+		num -= game.state.galaxy[nq.x][nq.y].stars;
+		if (num <= 0) break;
 	    }
-	    if (idebug) {
-		proutn("=== Super nova here?");
-		if (ja() == true) {
-		    nq.x = game.quadrant.x;
-		    nq.y = game.quadrant.y;
-		}
-	    }
+	    if (num <=0) break;
 	}
+	if (idebug) {
+	    proutn("=== Super nova here?");
+	    if (ja() == true)
+		nq = game.quadrant;
+	}
+    }
 
-	if (nq.x != game.quadrant.y || nq.y != game.quadrant.y || game.justin != 0) {
-	    /* it isn't here, or we just entered (treat as inroute) */
-	    if (!damaged(DRADIO) || game.condit == IHDOCKED) {
-		skip(1);
-		prout(_("Message from Starfleet Command       Stardate %.2f"), game.state.date);
-		prout(_("     Supernova in %s; caution advised."),
-		      cramlc(quadrant, nq));
-	    }
+    if (!same(nq, game.quadrant) || game.justin) {
+	/* it isn't here, or we just entered (treat as enroute) */
+	if (!damaged(DRADIO) || game.condit == IHDOCKED) {
+	    skip(1);
+	    prout(_("Message from Starfleet Command       Stardate %.2f"), game.state.date);
+	    prout(_("     Supernova in %s; caution advised."),
+		  cramlc(quadrant, nq));
 	}
-	else {
-	    /* we are in the quadrant! */
-	    incipient = true;
-	    num = Rand()* game.state.galaxy[nq.x][nq.y].stars + 1;
-	    for_sectors(nsx) {
-		for_sectors(nsy) {
-		    if (game.quad[nsx][nsy]==IHSTAR) {
-			num--;
-			if (num==0) break;
-		    }
+    }
+    else {
+	coord ns;
+	/* we are in the quadrant! */
+	num = Rand()* game.state.galaxy[nq.x][nq.y].stars + 1;
+	for_sectors(ns.x) {
+	    for_sectors(ns.y) {
+		if (game.quad[ns.x][ns.y]==IHSTAR) {
+		    num--;
+		    if (num==0) break;
 		}
-		if (num==0) break;
 	    }
+	    if (num==0) break;
 	}
-    }
-    else {
-	incipient = true;
-    }
 
-    if (incipient) {
-	coord nd;
 	skip(1);
 	prouts(_("***RED ALERT!  RED ALERT!"));
 	skip(1);
-	nd.x = nsx; nd.y = nsy;
-	prout(_("***Incipient supernova detected at "), cramlc(sector, nd));
-	nq = game.quadrant;
-	if (square(nsx-game.sector.x) + square(nsy-game.sector.y) <= 2.1) {
+	prout(_("***Incipient supernova detected at "), cramlc(sector, ns));
+	if (square(ns.x-game.sector.x) + square(ns.y-game.sector.y) <= 2.1) {
 	    proutn(_("Emergency override attempts t"));
 	    prouts("***************");
 	    skip(1);
@@ -873,14 +852,13 @@
 	    game.alldone=1;
 	}
     }
+
     /* destroy any Klingons in supernovaed quadrant */
     kldead = game.state.galaxy[nq.x][nq.y].klingons;
     game.state.galaxy[nq.x][nq.y].klingons = 0;
-    comdead = iscdead = 0;
     if (same(nq, game.state.kscmdr)) {
 	/* did in the Supercommander! */
 	game.state.nscrem = game.state.kscmdr.x = game.state.kscmdr.y = game.isatb = game.iscate = 0;
-	iscdead = 1;
 	unschedule(FSCMOVE);
 	unschedule(FSCDBAS);
     }
@@ -892,7 +870,6 @@
 		game.state.kcmdr[game.state.remcom].x = game.state.kcmdr[game.state.remcom].y = 0;
 		game.state.remcom--;
 		kldead--;
-		comdead++;
 		if (game.state.remcom==0) unschedule(FTBEAM);
 		break;
 	    }
@@ -923,7 +900,7 @@
 	    }
     }
     /* If starship caused supernova, tally up destruction */
-    if (insx) {
+    if (induced) {
 	game.state.starkl += game.state.galaxy[nq.x][nq.y].stars;
 	game.state.basekl += game.state.galaxy[nq.x][nq.y].starbase;
 	game.state.nplankl += npdead;
@@ -934,7 +911,7 @@
     /* If supernova destroys last Klingons give special message */
     if (KLINGREM==0 && !same(nq, game.quadrant)) {
 	skip(2);
-	if (insx == 0) prout(_("Lucky you!"));
+	if (!induced) prout(_("Lucky you!"));
 	proutn(_("A supernova in %s has just destroyed the last Klingons."),
 	       cramlc(quadrant, nq));
 	finish(FWON);
@@ -944,5 +921,3 @@
     if (game.alldone) finish(FSNOVAED);
     return;
 }
-		
-				

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-19 22:03:07 UTC (rev 604)
+++ trunk/src/moving.c	2006-09-19 23:09:39 UTC (rev 605)
@@ -670,7 +670,7 @@
     game.warpfac = aaitem;
     game.wfacsq=game.warpfac*game.warpfac;
     if (game.warpfac <= oldfac || game.warpfac <= 6.0) {
-	proutn(_("Helmsman Sulu- \"Warp factor %d, Captain.\""),
+	prout(_("Helmsman Sulu- \"Warp factor %d, Captain.\""),
 	       (int)game.warpfac);
 	return;
     }

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-19 22:03:07 UTC (rev 604)
+++ trunk/src/sst.h	2006-09-19 23:09:39 UTC (rev 605)
@@ -388,8 +388,8 @@
 void torpedo(double, double, int, int, double *, int, int);
 void huh(void);
 void pause_game(int);
-void nova(int, int);
-void snova(int, int);
+void nova(coord);
+void snova(bool, coord *);
 void scom(bool *);
 void hittem(double *);
 void prouts(char *, ...);



From esr at mail.berlios.de  Wed Sep 20 01:56:57 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 20 Sep 2006 01:56:57 +0200
Subject: [Sst-commit-watch] r606 - trunk/src
Message-ID: <200609192356.k8JNuvL9029900@sheep.berlios.de>

Author: esr
Date: 2006-09-20 01:56:55 +0200 (Wed, 20 Sep 2006)
New Revision: 606

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
Clean up more booleans.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-19 23:09:39 UTC (rev 605)
+++ trunk/src/ai.c	2006-09-19 23:56:55 UTC (rev 606)
@@ -45,14 +45,13 @@
     game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons--;
     game.state.galaxy[iq.x][iq.y].klingons++;
     if (ienm==IHS) {
-	game.ishere=0;
-	game.iscate=0;
-	game.ientesc=0;
-	game.isatb=0;
+	game.ishere = false;
+	game.iscate = 0;
+	game.ientesc = false;
+	game.isatb = 0;
 	schedule(FSCMOVE, 0.2777);
 	unschedule(FSCDBAS);
-	game.state.kscmdr.x=iq.x;
-	game.state.kscmdr.y=iq.y;
+	game.state.kscmdr=iq;
     }
     else {
 	for_commanders(n) {
@@ -317,8 +316,8 @@
 	/* SC has scooted, Remove him from current quadrant */
 	game.iscate=0;
 	game.isatb=0;
-	game.ishere=0;
-	game.ientesc=0;
+	game.ishere = false;
+	game.ientesc = false;
 	unschedule(FSCDBAS);
 	for_local_enemies(i) 
 	    if (game.quad[game.ks[i].x][game.ks[i].y] == IHS) break;
@@ -535,7 +534,7 @@
     int idx, idy, im, i;
     coord dummy;
     /* Move the Tholian */
-    if (game.ithere==0 || game.justin == 1) return;
+    if (!game.ithere || game.justin) return;
 
     if (game.tholian.x == 1 && game.tholian.y == 1) {
 	idx = 1; idy = QUADSIZE;
@@ -551,7 +550,7 @@
     }
     else {
 	/* something is wrong! */
-	game.ithere = 0;
+	game.ithere = false;
 	return;
     }
 
@@ -590,7 +589,8 @@
     dropin(IHBLANK, &dummy);
     crmena(true, IHT, sector, game.tholian);
     prout(_(" completes web."));
-    game.ithere = game.tholian.x = game.tholian.y = 0;
+    game.ithere = false;
+    game.tholian.x = game.tholian.y = 0;
     game.nenhere--;
     return;
 }

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-19 23:09:39 UTC (rev 605)
+++ trunk/src/battle.c	2006-09-19 23:56:55 UTC (rev 606)
@@ -181,13 +181,14 @@
 void torpedo(double course, double r, int inx, int iny, double *hit, int i, int n)
 /* let a photon torpedo fly */
 {
-    int l, iquad=0, jx=0, jy=0, shoved=0, ll;
-	
+    int l, iquad=0, jx=0, jy=0, ll;
+    bool shoved = false;
     double ac=course + 0.25*r;
     double angle = (15.0-ac)*0.5235988;
     double bullseye = (15.0 - course)*0.5235988;
     double deltax=-sin(angle), deltay=cos(angle), x=inx, y=iny, bigger;
     double ang, temp, xx, yy, kp, h1;
+    struct quadrant *q = &game.state.galaxy[game.quadrant.x][game.quadrant.y];
     coord w;
 
     w.x = w.y = 0;
@@ -245,7 +246,7 @@
 	    game.sector.x = jx;
 	    game.sector.y = jy;
 	    crmshp();
-	    shoved = 1;
+	    shoved = true;
 	    break;
 					  
 	case IHC: /* Hit a commander */
@@ -298,22 +299,21 @@
 	    proutn(_(" damaged--"));
 	    game.ks[ll].x = jx;
 	    game.ks[ll].y = jy;
-	    shoved = 1;
+	    shoved = true;
 	    break;
 	case IHB: /* Hit a base */
 	    skip(1);
 	    prout(_("***STARBASE DESTROYED.."));
 	    for_starbases(ll) {
-		if (game.state.baseq[ll].x==game.quadrant.x && game.state.baseq[ll].y==game.quadrant.y) {
-		    game.state.baseq[ll].x=game.state.baseq[game.state.rembase].x;
-		    game.state.baseq[ll].y=game.state.baseq[game.state.rembase].y;
+		if (same(game.state.baseq[ll], game.quadrant)) {
+		    game.state.baseq[ll]=game.state.baseq[game.state.rembase];
 		    break;
 		}
 	    }
 	    game.quad[w.x][w.y]=IHDOT;
 	    game.state.rembase--;
 	    game.base.x=game.base.y=0;
-	    game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase--;
+	    q->starbase--;
 	    game.state.chart[game.quadrant.x][game.quadrant.y].starbase--;
 	    game.state.basekl++;
 	    newcnd();
@@ -322,7 +322,7 @@
 	    crmena(true, iquad, sector, w);
 	    prout(_(" destroyed."));
 	    game.state.nplankl++;
-	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = NOPLANET;
+	    q->planet = NOPLANET;
 	    DESTROY(&game.state.plnets[game.iplnet]);
 	    game.iplnet = 0;
 	    game.plnet.x = game.plnet.y = 0;
@@ -336,7 +336,7 @@
 	    crmena(true, iquad, sector, w);
 	    prout(_(" destroyed."));
 	    game.state.nworldkl++;
-	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = NOPLANET;
+	    q->planet = NOPLANET;
 	    DESTROY(&game.state.plnets[game.iplnet]);
 	    game.iplnet = 0;
 	    game.plnet.x = game.plnet.y = 0;
@@ -373,8 +373,8 @@
 		 * you can shove the Thingy and piss it off.
 		 * It then becomes an enemy and may fire at you.
 		 */
-		iqengry=1;
-		shoved=1;
+		iqengry = true;
+		shoved = true;
 	    }
 	    return;
 	case IHBLANK: /* Black hole */
@@ -393,7 +393,7 @@
 	    h1 = fabs(h1);
 	    if (h1 >= 600) {
 		game.quad[w.x][w.y] = IHDOT;
-		game.ithere = 0;
+		game.ithere = false;
 		game.tholian.x = game.tholian.y = 0;
 		deadkl(w, iquad, w.x, w.y);
 		return;
@@ -406,7 +406,8 @@
 	    }
 	    prout(_(" disappears."));
 	    game.quad[w.x][w.y] = IHWEB;
-	    game.ithere = game.tholian.x = game.tholian.y = 0;
+	    game.ithere = false;
+	    game.tholian.x = game.tholian.y = 0;
 	    game.nenhere--;
 	    {
 		coord dummy;
@@ -498,7 +499,7 @@
 	return;
     }
     if ((((game.comhere || game.ishere) && !game.justin) || game.skill == SKILL_EMERITUS) && torps_ok) movcom();
-    if (game.nenhere==0 || (game.nenhere==1 && iqhere && iqengry==0)) return;
+    if (game.nenhere==0 || (game.nenhere==1 && iqhere && !iqengry)) return;
     pfac = 1.0/game.inshld;
     if (game.shldchg == 1) chgfac = 0.25+0.5*Rand();
     skip(1);
@@ -510,8 +511,7 @@
 	/* Increase chance of photon torpedos if docked or enemy energy low */
 	if (game.condit == IHDOCKED) r *= 0.25;
 	if (game.kpower[loop] < 500) r *= 0.25; 
-	jay.x = game.ks[loop].x;
-	jay.y = game.ks[loop].y;
+	jay = game.ks[loop];
 	iquad = game.quad[jay.x][jay.y];
 	if (iquad==IHT || (iquad==IHQUEST && !iqengry)) continue;
 	itflag = (iquad == IHK && r > 0.0005) || !torps_ok ||
@@ -641,11 +641,12 @@
     }
     else if (type == IHT) {
 	/* Killed a Tholian */
-	game.ithere = 0;
+	game.ithere = false;
     }
     else if (type == IHQUEST) {
 	/* Killed a Thingy */
-	iqhere=iqengry=thing.x=thing.y=0;
+	iqhere = iqengry = false;
+	thing.x =thing.y = 0;
     }
     else {
 	/* Some type of a Klingon */
@@ -669,7 +670,8 @@
 	    break;
 	case IHS:
 	    game.state.nscrem--;
-	    game.ishere = game.state.kscmdr.x = game.state.kscmdr.y = game.isatb = game.iscate = 0;
+	    game.ishere = false;
+	    game.state.kscmdr.x = game.state.kscmdr.y = game.isatb = game.iscate = 0;
 	    unschedule(FSCMOVE);
 	    unschedule(FSCDBAS);
 	    break;
@@ -731,7 +733,8 @@
 {
     double targ[4][3], course[4];
     double r, dummy;
-    int key, n, i, osuabor;
+    int key, n, i;
+    bool osuabor;
 
     game.ididit = false;
 
@@ -824,7 +827,7 @@
     }
     game.ididit = true;
     /* Loop for moving <n> torpedoes */
-    osuabor = 0;
+    osuabor = false;
     for (i = 1; i <= n && !osuabor; i++) {
 	if (game.condit != IHDOCKED) game.torps--;
 	r = (Rand()+Rand())*0.5 -0.5;
@@ -838,7 +841,7 @@
 	    skip(1);
 	    if (i < n)
 		prout(_("  Remainder of burst aborted."));
-	    osuabor=1;
+	    osuabor = true;
 	    if (Rand() <= 0.2) {
 		prout(_("***Photon tubes damaged by misfire."));
 		game.damage[DPHOTON] = game.damfac*(1.0+2.0*Rand());
@@ -868,7 +871,7 @@
     }
 }
 
-static int checkshctrl(double rpow) 
+static bool checkshctrl(double rpow) 
 /* check shield control */
 {
     double hit;
@@ -877,7 +880,7 @@
     skip(1);
     if (Rand() < .998) {
 	prout(_("Shields lowered."));
-	return 0;
+	return false;
     }
     /* Something bad has happened */
     prouts(_("***RED ALERT!  RED ALERT!"));
@@ -890,7 +893,7 @@
 	skip(1);
 	stars();
 	finish(FPHASER);
-	return 1;
+	return true;
     }
     prouts(_("Sulu-  \"Captain! Shield malfunction! Phaser fire contained!\""));
     skip(2);
@@ -909,7 +912,7 @@
     prout(_("Phaser energy dispersed by shields."));
     prout(_("Enemy unaffected."));
     overheat(rpow);
-    return 1;
+    return true;
 }
 	
 
@@ -918,13 +921,13 @@
 {
     double hits[21], rpow=0, extra, powrem, over, temp;
     int kz = 0, k=1, i, irec=0; /* Cheating inhibitor */
-    int ifast=0, no=0, ipoop=1, msgflag = 1;
+    bool ifast = false, no = false, ipoop = true, msgflag = true;
     enum {NOTSET, MANUAL, FORCEMAN, AUTOMATIC} automode = NOTSET;
     int key=0;
 
     skip(1);
     /* SR sensors and Computer */
-    if (damaged(DSRSENS) || damaged(DCOMPTR)) ipoop = 0;
+    if (damaged(DSRSENS) || damaged(DCOMPTR)) ipoop = false;
     if (game.condit == IHDOCKED) {
 	prout(_("Phasers can't be fired through base shields."));
 	chew();
@@ -947,7 +950,7 @@
 	    return;
 	}
 	prout(_("Weapons Officer Sulu-  \"High-speed shield control enabled, sir.\""));
-	ifast = 1;
+	ifast = true;
 		
     }
     /* Original code so convoluted, I re-did it all */
@@ -978,7 +981,7 @@
 		}
 	    }
 	    else if (isit("no")) {
-		no = 1;
+		no = true;
 	    }
 	    else {
 		huh();
@@ -1011,7 +1014,7 @@
     switch (automode) {
     case AUTOMATIC:
 	if (key == IHALPHA && isit("no")) {
-	    no = 1;
+	    no = true;
 	    key = scan();
 	}
 	if (key != IHREAL && game.nenhere != 0) {
@@ -1044,7 +1047,7 @@
 	    return;
 	}
 	if ((key=scan()) == IHALPHA && isit("no")) {
-	    no = 1;
+	    no = true;
 	}
 	if (ifast) {
 	    game.energy -= 200; /* Go and do it! */
@@ -1071,7 +1074,7 @@
 	    hittem(hits);
 	    game.ididit = true;
 	}
-	if (extra > 0 && game.alldone == 0) {
+	if (extra > 0 && !game.alldone) {
 	    if (game.ithere) {
 		proutn(_("*** Tholian web absorbs "));
 		if (game.nenhere>0) proutn(_("excess "));
@@ -1106,7 +1109,7 @@
 		proutn(_("Energy available= %.2f"),
 		       game.energy-.006-(ifast?200:0));
 		skip(1);
-		msgflag = 0;
+		msgflag = false;
 		rpow = 0.0;
 	    }
 	    if (damaged(DSRSENS) && !(abs(game.sector.x-aim.x) < 2 && abs(game.sector.y-aim.y) < 2) &&
@@ -1145,7 +1148,7 @@
 	    }
 	    if (key == IHEOL) {
 		if (k==1) { /* Let me say I'm baffled by this */
-		    msgflag = 1;
+		    msgflag = true;
 		}
 		continue;
 	    }
@@ -1172,7 +1175,7 @@
 	    return;
 	}
 	if (key == IHALPHA && isit("no")) {
-	    no = 1;
+	    no = true;
 	}
 	game.energy -= rpow;
 	chew();
@@ -1232,7 +1235,7 @@
 	else
 	    proutn(_("Very small hit on "));
 	ienm = game.quad[w.x][w.y];
-	if (ienm==IHQUEST) iqengry=1;
+	if (ienm==IHQUEST) iqengry = true;
 	crmena(false,ienm,sector,w);
 	skip(1);
 	if (kpow == 0) {

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-19 23:09:39 UTC (rev 605)
+++ trunk/src/events.c	2006-09-19 23:56:55 UTC (rev 606)
@@ -60,9 +60,9 @@
 void events(void) 
 /* run through the event queue looking for things to do */
 {
-    int istract=0, evcode, i=0, j, k, l;
+    int evcode, i=0, j, k, l;
     double fintim = game.state.date + game.optime, datemin, xtime, repair, yank=0;
-    bool radio_was_broken, ictbeam = false, ipage = false;
+    bool radio_was_broken, ictbeam = false, ipage = false, istract = false;
     struct quadrant *pdest, *q;
     coord w, hold;
     event *ev, *ev2;
@@ -160,7 +160,7 @@
 	    break;
 	case FSPY: /* Check with spy to see if S.C. should tractor beam */
 	    if (game.state.nscrem == 0 ||
-		ictbeam+istract > 0 ||
+		ictbeam || istract ||
 		game.condit==IHDOCKED || game.isatb==1 || game.iscate==1) return;
 	    if (game.ientesc ||
 		(game.energy < 2000 && game.torps < 4 && game.shield < 1250) ||
@@ -169,7 +169,7 @@
 		 (game.energy < 2500 || damaged(DPHASER)) &&
 		 (game.torps < 5 || damaged(DPHOTON)))) {
 		/* Tractor-beam her! */
-		istract=1;
+		istract = true;
 		yank = square(game.state.kscmdr.x-game.quadrant.x) + square(game.state.kscmdr.y-game.quadrant.y);
 		/********* fall through to FTBEAM code ***********/
 	    }
@@ -202,7 +202,7 @@
 	    /* If Kirk & Co. screwing around on planet, handle */
 	    atover(true); /* atover(true) is Grab */
 	    if (game.alldone) return;
-	    if (game.icraft == 1) { /* Caught in Galileo? */
+	    if (game.icraft) { /* Caught in Galileo? */
 		finish(FSTRACTOR);
 		return;
 	    }
@@ -363,9 +363,9 @@
 	    break;
 	case FSCMOVE: /* Supercommander moves */
 	    schedule(FSCMOVE, 0.2777);
-	    if (game.ientesc+istract==0 &&
-		game.isatb != 1 &&
-		(game.iscate != 1 || !game.justin)) scom(&ipage);
+	    if (!game.ientesc && !istract && game.isatb != 1 &&
+			(game.iscate != 1 || !game.justin)) 
+		scom(&ipage);
 	    break;
 	case FDSPROB: /* Move deep space probe */
 	    schedule(FDSPROB, 0.01);

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-19 23:09:39 UTC (rev 605)
+++ trunk/src/planets.c	2006-09-19 23:56:55 UTC (rev 606)
@@ -357,12 +357,12 @@
 	    skip(1);
 	    prout(_("The short hop begins . . ."));
 	    game.state.plnets[game.iplnet].known=known;
-	    game.icraft = 1;
+	    game.icraft = true;
 	    skip(1);
 	    game.landed = -1;
 	    if (consumeTime()) return;
 	    game.iscraft = 1;
-	    game.icraft = 0;
+	    game.icraft = false;
 	    if (game.imine) {
 		game.icrystl = 1;
 		game.cryprob = 0.05;
@@ -380,12 +380,12 @@
 	skip(1);
 	prouts(_("The hangar doors open; the trip begins."));
 	skip(1);
-	game.icraft = 1;
+	game.icraft = true;
 	game.iscraft = 0;
 	if (consumeTime()) return;
 	game.state.plnets[game.iplnet].known = shuttle_down;
 	game.landed = 1;
-	game.icraft = 0;
+	game.icraft = false;
 	prout(_("Trip complete"));
 	return;
     }

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-19 23:09:39 UTC (rev 605)
+++ trunk/src/reports.c	2006-09-19 23:56:55 UTC (rev 606)
@@ -323,9 +323,9 @@
 	break;
     case 10:
 	if (game.options & OPTION_WORLDS) {
-	    int here = game.state.galaxy[game.quadrant.x][game.quadrant.y].planet;
-	    if (here != NOPLANET && game.state.plnets[here].inhabited != UNINHABITED)
-		proutn(_("Major system  %s"), systemname(here));
+	    int plnet = game.state.galaxy[game.quadrant.x][game.quadrant.y].planet;
+	    if (plnet != NOPLANET && game.state.plnets[plnet].inhabited != UNINHABITED)
+		proutn(_("Major system  %s"), systemname(plnet));
 	    else
 		proutn(_("Sector is uninhabited"));
 	}

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-19 23:09:39 UTC (rev 605)
+++ trunk/src/setup.c	2006-09-19 23:56:55 UTC (rev 606)
@@ -253,8 +253,8 @@
     game.battle.x = game.battle.y = 0;
     game.state.date = game.indate = 100.0*(int)(31.0*Rand()+20.0);
     game.nkinks = game.nhelp = game.casual = game.abandoned = 0;
-    game.resting = game.imine = false;
-    game.isatb = game.iscate = game.icrystl = game.icraft = game.state.nplankl = 0;
+    game.resting = game.imine = game.icraft = false;
+    game.isatb = game.iscate = game.icrystl = game.state.nplankl = 0;
     game.state.starkl = game.state.basekl = 0;
     game.iscraft = 1;
     game.landed = -1;
@@ -595,7 +595,7 @@
 {
     int i, j;
     coord w;
-    struct quadrant *here;
+    struct quadrant *q;
 
     game.iattak = 1;
     game.justin = true;
@@ -603,39 +603,39 @@
     game.klhere = 0;
     game.comhere = 0;
     game.plnet.x = game.plnet.y = 0;
-    game.ishere = 0;
+    game.ishere = false;
     game.irhere = 0;
     game.iplnet = 0;
     game.nenhere = 0;
     game.neutz = false;
     game.inorbit = false;
     game.landed = -1;
-    game.ientesc = 0;
-    game.ithere = 0;
-    iqhere=0;
-    iqengry=0;
+    game.ientesc = false;
+    game.ithere = false;
+    iqhere = false;
+    iqengry = false;
     game.iseenit = 0;
     if (game.iscate) {
 	// Attempt to escape Super-commander, so tbeam back!
 	game.iscate = 0;
-	game.ientesc = 1;
+	game.ientesc = true;
     }
     // Clear quadrant
     for_sectors(i)
 	for_sectors(j) 
 	    game.quad[i][j] = IHDOT;
-    here = &game.state.galaxy[game.quadrant.x][game.quadrant.y];
+    q = &game.state.galaxy[game.quadrant.x][game.quadrant.y];
     // cope with supernova
-    if (here->supernova)
+    if (q->supernova)
 	return;
-    game.klhere = here->klingons;
-    game.irhere = here->romulans;
+    game.klhere = q->klingons;
+    game.irhere = q->romulans;
     game.nenhere = game.klhere + game.irhere;
 
     // Position Starship
     game.quad[game.sector.x][game.sector.y] = game.ship;
 
-    if (here->klingons) {
+    if (q->klingons) {
 	// Position ordinary Klingons
 	for (i = 1; i <= game.klhere; i++)
 	    newkling(i, &w);
@@ -654,7 +654,7 @@
 	    game.quad[game.ks[1].x][game.ks[1].y] = IHS;
 	    game.kpower[1] = 1175.0 + 400.0*Rand() + 125.0*game.skill;
 	    game.iscate = game.state.remkl>1;
-	    game.ishere = 1;
+	    game.ishere = true;
 	}
     }
     // Put in Romulans if needed
@@ -665,13 +665,13 @@
 	game.kpower[i] = Rand()*400.0 + 450.0 + 50.0*game.skill;
     }
     // If quadrant needs a starbase, put it in
-    if (here->starbase)
+    if (q->starbase)
 	dropin(IHB, &game.base);
 	
     // If quadrant needs a planet, put it in
-    if (here->planet != NOPLANET) {
-	game.iplnet = here->planet;
-	if (game.state.plnets[here->planet].inhabited == UNINHABITED)
+    if (q->planet != NOPLANET) {
+	game.iplnet = q->planet;
+	if (game.state.plnets[q->planet].inhabited == UNINHABITED)
 	    dropin(IHP, &game.plnet);
 	else
 	    dropin(IHW, &game.plnet);
@@ -679,11 +679,11 @@
     // Check for game.condition
     newcnd();
     // And finally the stars
-    for (i = 1; i <= here->stars; i++) 
+    for (i = 1; i <= q->stars; i++) 
 	dropin(IHSTAR, &w);
 
     // Check for RNZ
-    if (game.irhere > 0 && game.klhere == 0 && (here->planet == NOPLANET || game.state.plnets[here->planet].inhabited == UNINHABITED)) {
+    if (game.irhere > 0 && game.klhere == 0 && (q->planet == NOPLANET || game.state.plnets[q->planet].inhabited == UNINHABITED)) {
 	game.neutz = 1;
 	if (!damaged(DRADIO)) {
 	    skip(1);
@@ -725,7 +725,7 @@
 		game.tholian.y = Rand() > 0.5 ? QUADSIZE : 1;
 	    } while (game.quad[game.tholian.x][game.tholian.y] != IHDOT);
 	    game.quad[game.tholian.x][game.tholian.y] = IHT;
-	    game.ithere = 1;
+	    game.ithere = true;
 	    game.nenhere++;
 	    game.ks[game.nenhere].x = game.tholian.x;
 	    game.ks[game.nenhere].y = game.tholian.y;

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-19 23:09:39 UTC (rev 605)
+++ trunk/src/sst.c	2006-09-19 23:56:55 UTC (rev 606)
@@ -175,7 +175,7 @@
 
 struct game game;
 coord thing;
-int iqhere, iqengry;
+bool iqhere, iqengry;
 int iscore, iskill;	// Common PLAQ
 double aaitem;
 double perdate;

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-19 23:09:39 UTC (rev 605)
+++ trunk/src/sst.h	2006-09-19 23:56:55 UTC (rev 606)
@@ -210,7 +210,11 @@
 	alive,		// we are alive (not killed)
 	justin,		// just entered quadrant
 	shldup,		// shields are up
+	ishere,		// super-commander in quadrant
+	ientesc,	// attempted escape from supercommander
+	ithere,		// Tholian is here 
 	resting,	// rest time
+	icraft,		// Kirk in Galileo
 	alldone,	// game is now finished
 	neutz,		// Romulan Neutral Zone
 	isarmed,	// probe is armed
@@ -240,17 +244,13 @@
 	iplnet,		// planet # in quadrant
 	inplan,		// initial planets
 	nenhere,	// number of enemies in quadrant
-	ishere,		// super-commander in quandrant
 	irhere,		// Romulans in quadrant
-	icraft,		// Kirk in Galileo
-	ientesc,	// attempted escape from supercommander
 	iscraft,	// =1 if craft on ship, -1 if removed from game
 	isatb,		// =1 if super commander is attacking base
 	iscate,		// super commander is here
 	iattak,		// attack recursion elimination (was cracks[4])
 	icrystl,	// dilithium crystals aboard
 	tourn,		// tournament number
-	ithere,		// Tholian is here 
 	iseenit,	// seen base attack report
 	proben,		// number of moves for probe
 	nprobes;	// number of probes available
@@ -292,7 +292,7 @@
 
 /* the Space Thingy's global state should *not* be saved! */
 extern coord thing;
-extern int iqhere, iqengry;
+extern bool iqhere, iqengry;
 
 typedef enum {FWON, FDEPLETE, FLIFESUP, FNRG, FBATTLE,
               FNEG3, FNOVA, FSNOVAED, FABANDN, FDILITHIUM,



From esr at mail.berlios.de  Wed Sep 20 05:26:17 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 20 Sep 2006 05:26:17 +0200
Subject: [Sst-commit-watch] r607 - trunk/src
Message-ID: <200609200326.k8K3QHbj011805@sheep.berlios.de>

Author: esr
Date: 2006-09-20 05:26:16 +0200 (Wed, 20 Sep 2006)
New Revision: 607

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/moving.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
More boolean cleanups.  More consistent use of coord type -- anong other 
things, this allows us to write a distance() macro and get rid of a lot
of gnarly expressions.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-19 23:56:55 UTC (rev 606)
+++ trunk/src/ai.c	2006-09-20 03:26:16 UTC (rev 607)
@@ -241,8 +241,7 @@
 	/* it moved */
 	game.ks[loccom].x = next.x;
 	game.ks[loccom].y = next.y;
-	game.kdist[loccom] = game.kavgd[loccom] =
-	    sqrt(square(game.sector.x-next.x)+square(game.sector.y-next.y));
+	game.kdist[loccom] = game.kavgd[loccom] = distance(game.sector, next);
 	if (!damaged(DSRSENS) || game.condit == IHDOCKED) {
 	    proutn("***");
 	    cramen(ienm);
@@ -387,9 +386,7 @@
 	sc = game.state.kscmdr;
 	for_starbases(i) {
 	    basetbl[i] = i;
-	    ibq.x = game.state.baseq[i].x;
-	    ibq.y = game.state.baseq[i].y;
-	    bdist[i] = sqrt(square(ibq.x-sc.x) + square(ibq.y-sc.y));
+	    bdist[i] = distance(game.state.baseq[i], sc);
 	}
 	if (game.state.rembase > 1) {
 	    /* sort into nearest first order */
@@ -532,7 +529,6 @@
 /* move the Tholian */
 {
     int idx, idy, im, i;
-    coord dummy;
     /* Move the Tholian */
     if (!game.ithere || game.justin) return;
 
@@ -586,7 +582,7 @@
     }
     /* All plugged up -- Tholian splits */
     game.quad[game.tholian.x][game.tholian.y]=IHWEB;
-    dropin(IHBLANK, &dummy);
+    dropin(IHBLANK);
     crmena(true, IHT, sector, game.tholian);
     prout(_(" completes web."));
     game.ithere = false;

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-19 23:56:55 UTC (rev 606)
+++ trunk/src/battle.c	2006-09-20 03:26:16 UTC (rev 607)
@@ -409,10 +409,7 @@
 	    game.ithere = false;
 	    game.tholian.x = game.tholian.y = 0;
 	    game.nenhere--;
-	    {
-		coord dummy;
-		dropin(IHBLANK, &dummy);
-	    }
+	    dropin(IHBLANK);
 	    return;
 					
 	default: /* Problem! */
@@ -430,9 +427,10 @@
     if (shoved) {
 	game.quad[w.x][w.y]=IHDOT;
 	game.quad[jx][jy]=iquad;
+	w.x = jx; w.y = jy;
 	prout(_(" displaced by blast to %s "), cramlc(sector, w));
 	for_local_enemies(ll)
-	    game.kdist[ll] = game.kavgd[ll] = sqrt(square(game.sector.x-game.ks[ll].x)+square(game.sector.y-game.ks[ll].y));
+	    game.kdist[ll] = game.kavgd[ll] = distance(game.sector,game.ks[ll]);
 	sortkl();
 	return;
     }

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-19 23:56:55 UTC (rev 606)
+++ trunk/src/events.c	2006-09-20 03:26:16 UTC (rev 607)
@@ -93,6 +93,7 @@
 
     radio_was_broken = damaged(DRADIO);
 
+    hold.x = hold.y = 0;
     for (;;) {
 	/* Select earliest extraneous event, evcode==0 if no events */
 	evcode = FSPY;
@@ -223,7 +224,7 @@
 		game.quadrant = game.state.kscmdr;
 	    else
 		game.quadrant = game.state.kcmdr[i];
-	    iran(QUADSIZE, &game.sector.x, &game.sector.y);
+	    game.sector = iran(QUADSIZE);
 	    crmshp();
 	    proutn(_(" is pulled to "));
 	    proutn(cramlc(quadrant, game.quadrant));
@@ -431,7 +432,7 @@
 		   which has some stars which are inhabited and
 		   not already under attack, which is not
 		   supernova'ed, and which has some Klingons in it */
-		iran(GALSIZE, &w.x, &w.y);
+		w = iran(GALSIZE);
 		q = &game.state.galaxy[w.x][w.y];
 	    } while (--i &&
 		     (same(game.quadrant, w) || q->planet == NOPLANET ||
@@ -521,7 +522,7 @@
 	    game.state.remkl++;
 	    q->klingons++;
 	    if (same(game.quadrant, w))
-		newkling(++game.klhere, &hold);
+		newkling(++game.klhere);
 
 	    /* recompute time left */
 	    game.state.remtime = game.state.remres/(game.state.remkl+4*game.state.remcom);
@@ -752,8 +753,7 @@
 			game.quad[scratch.x][scratch.y] = IHDOT;
 			game.quad[newc.x][newc.y] = iquad;
 			game.ks[ll] = newc;
-			game.kavgd[ll] = sqrt(square(game.sector.x-newc.x)+square(game.sector.y-newc.y));
-			game.kdist[ll] = game.kavgd[ll];
+			game.kdist[ll] = game.kavgd[ll] = distance(game.sector, newc);
 			skip(1);
 			break;
 		    }
@@ -849,7 +849,7 @@
 	    prouts("***************");
 	    skip(1);
 	    stars();
-	    game.alldone=1;
+	    game.alldone = true;
 	}
     }
 

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-19 23:56:55 UTC (rev 606)
+++ trunk/src/moving.c	2006-09-20 03:26:16 UTC (rev 607)
@@ -945,12 +945,12 @@
     game.nhelp++;
     if (game.base.x!=0) {
 	/* There's one in this quadrant */
-	ddist = sqrt(square(game.base.x-game.sector.x)+square(game.base.y-game.sector.y));
+	ddist = distance(game.base, game.sector);
     }
     else {
 	ddist = FOREVER;
 	for_starbases(m) {
-	    xdist=10.0*sqrt(square(game.state.baseq[m].x-game.quadrant.x)+square(game.state.baseq[m].y-game.quadrant.y));
+	    xdist = QUADSIZE * distance(game.state.baseq[m], game.quadrant);
 	    if (xdist < ddist) {
 		ddist = xdist;
 		line = m;

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-19 23:56:55 UTC (rev 606)
+++ trunk/src/reports.c	2006-09-20 03:26:16 UTC (rev 607)
@@ -416,7 +416,7 @@
 void eta(void)
 /* use computer to get estimated time of arrival for a warp jump */
 {
-    int ix1, ix2, iy1, iy2;
+    coord w1, w2;
     bool wfl, prompt = false;
     double ttime, twarp, tpower;
     if (damaged(DCOMPTR)) {
@@ -433,33 +433,33 @@
 	    return;
 	}
     }
-    iy1 = aaitem +0.5;
+    w1.y = aaitem +0.5;
     if (scan() != IHREAL) {
 	huh();
 	return;
     }
-    ix1 = aaitem + 0.5;
+    w1.x = aaitem + 0.5;
     if (scan() == IHREAL) {
-	iy2 = aaitem + 0.5;
+	w2.y = aaitem + 0.5;
 	if (scan() != IHREAL) {
 	    huh();
 	    return;
 	}
-	ix2 = aaitem + 0.5;
+	w2.x = aaitem + 0.5;
     }
     else {
-	if (game.quadrant.y>ix1) ix2 = 1;
-	else ix2=QUADSIZE;
-	if (game.quadrant.x>iy1) iy2 = 1;
-	else iy2=QUADSIZE;
+	if (game.quadrant.y>w1.x) w2.x = 1;
+	else w2.x=QUADSIZE;
+	if (game.quadrant.x>w1.y) w2.y = 1;
+	else w2.y=QUADSIZE;
     }
 
-    if (!VALID_QUADRANT(ix1, iy1) || !VALID_SECTOR(ix2, iy2)) {
+    if (!VALID_QUADRANT(w1.x, w1.y) || !VALID_SECTOR(w2.x, w2.y)) {
 	huh();
 	return;
     }
-    game.dist = sqrt(square(iy1-game.quadrant.x+0.1*(iy2-game.sector.x))+
-		square(ix1-game.quadrant.y+0.1*(ix2-game.sector.y)));
+    game.dist = sqrt(square(w1.y-game.quadrant.y+0.1*(w2.y-game.sector.y))+
+		square(w1.x-game.quadrant.x+0.1*(w2.x-game.sector.x)));
     wfl = false;
 
     if (prompt) prout(_("Answer \"no\" if you don't know the value:"));
@@ -537,9 +537,9 @@
 	    prout(_("Unfortunately, the Federation will be destroyed by then."));
 	if (twarp > 6.0)
 	    prout(_("You'll be taking risks at that speed, Captain"));
-	if ((game.isatb==1 && game.state.kscmdr.y == iy1 && game.state.kscmdr.x == ix1 &&
+	if ((game.isatb==1 && same(game.state.kscmdr, w1) &&
 	     scheduled(FSCDBAS)< ttime+game.state.date)||
-	    (scheduled(FCDBAS)<ttime+game.state.date && game.battle.y==iy1 && game.battle.x == ix1))
+	    (scheduled(FCDBAS)<ttime+game.state.date && same(game.battle, w1)))
 	    prout(_("The starbase there will be destroyed by then."));
 	proutn(_("New warp factor to try? "));
 	if (scan() == IHREAL) {

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-19 23:56:55 UTC (rev 606)
+++ trunk/src/setup.c	2006-09-20 03:26:16 UTC (rev 607)
@@ -8,7 +8,8 @@
     return buf.st_size;
 }
 
-void prelim(void) 
+void prelim(void)
+/* issue a historically correct banner */
 {
     skip(2);
     prout("-SUPER- STAR TREK");
@@ -19,7 +20,8 @@
 #endif /* __HISTORICAL__ */
 }
 
-void freeze(bool boss) 
+void freeze(bool boss)
+/* save game */
 {
     FILE *fp;
     int key;
@@ -50,12 +52,11 @@
     fwrite(&game, sizeof(game), 1, fp);
 
     fclose(fp);
-
-    /* I hope that's enough! */
 }
 
 
-int thaw(void) 
+bool thaw(void) 
+/* retrieve saved game */
 {
     FILE *fp;
     int key;
@@ -67,7 +68,7 @@
     }
     if (key != IHALPHA) {
 	huh();
-	return 1;
+	return true;
     }
     chew();
     if (strchr(citem, '.') == NULL) {
@@ -89,7 +90,7 @@
 
     fclose(fp);
 
-    return 0;
+    return false;
 }
 
 /*
@@ -114,6 +115,7 @@
 */
 
 void abandn(void) 
+/* abandon ship */
 {
     int nb, l;
     struct quadrant *q;
@@ -226,9 +228,10 @@
 }
 	
 void setup(bool needprompt) 
+/* prepare to play, set up cosmos */
 {
     int i,j, krem, klumper;
-    int ix, iy;
+    coord w;
     //  Decide how many of everything
     if (choose(needprompt)) return; // frozen game
     // Prepare the Enterprise
@@ -241,8 +244,8 @@
     game.shldup = false;
     game.inlsr = 4.0;
     game.lsupres = 4.0;
-    iran(GALSIZE, &game.quadrant.x, &game.quadrant.y);
-    iran(QUADSIZE, &game.sector.x, &game.sector.y);
+    game.quadrant = iran(GALSIZE);
+    game.sector = iran(QUADSIZE);
     game.torps = game.intorps = 10;
     game.nprobes = (int)(3.0*Rand() + 2.0);	/* Give them 2-4 of these wonders */
     game.warpfac = 5.0;
@@ -303,16 +306,16 @@
     for (i = 1; i <= game.inbase; i++) {
 	bool contflag;
 	do {
-	    do iran(GALSIZE, &ix, &iy);
-	    while (game.state.galaxy[ix][iy].starbase);
+	    do w = iran(GALSIZE);
+	    while (game.state.galaxy[w.x][w.y].starbase);
 	    contflag = false;
 	    for (j = i-1; j > 0; j--) {
 		/* Improved placement algorithm to spread out bases */
-		double distq = square(ix-game.state.baseq[j].x) + square(iy-game.state.baseq[j].y);
+		double distq = square(w.x-game.state.baseq[j].x) + square(w.y-game.state.baseq[j].y);
 		if (distq < 6.0*(BASEMAX+1-game.inbase) && Rand() < 0.75) {
 		    contflag = true;
 		    if (idebug)
-			prout("=== Abandoning base #%d at %d-%d", i, ix, iy);
+			prout("=== Abandoning base #%d at %d-%d", i, w.x, w.y);
 		    break;
 		}
 		else if (distq < 6.0 * (BASEMAX+1-game.inbase)) {
@@ -322,10 +325,9 @@
 	    }
 	} while (contflag);
 			
-	game.state.baseq[i].x = ix;
-	game.state.baseq[i].y = iy;
-	game.state.galaxy[ix][iy].starbase = 1;
-	game.state.chart[ix][iy].starbase = 1;
+	game.state.baseq[i] = w;
+	game.state.galaxy[w.x][w.y].starbase = 1;
+	game.state.chart[w.x][w.y].starbase = 1;
     }
     // Position ordinary Klingon Battle Cruisers
     krem = game.inkling;
@@ -337,10 +339,10 @@
 	int klump = (1.0 - r*r)*klumper;
 	if (klump > krem) klump = krem;
 	krem -= klump;
-	do iran(GALSIZE,&ix,&iy);
-	while (game.state.galaxy[ix][iy].supernova ||
-		game.state.galaxy[ix][iy].klingons + klump > 9);
-	game.state.galaxy[ix][iy].klingons += klump;
+	do w = iran(GALSIZE);
+	while (game.state.galaxy[w.x][w.y].supernova ||
+		game.state.galaxy[w.x][w.y].klingons + klump > 9);
+	game.state.galaxy[w.x][w.y].klingons += klump;
     } while (krem > 0);
     // Position Klingon Commander Ships
 #ifdef ODEBUG
@@ -351,30 +353,28 @@
 	    do { /* IF debugging, put commanders by bases, always! */
 #ifdef ODEBUG
 		if (game.idebug && klumper <= game.inbase) {
-		    ix = game.state.baseq[klumper].x;
-		    iy = game.state.baseq[klumper].y;
+		    w = game.state.baseq[klumper];
 		    klumper++;
 		}
 		else
 #endif /* ODEBUG */
-		    iran(GALSIZE, &ix, &iy);
+		    w = iran(GALSIZE);
 	    }
-	    while ((!game.state.galaxy[ix][iy].klingons && Rand() < 0.75)||
-		   game.state.galaxy[ix][iy].supernova||
-		   game.state.galaxy[ix][iy].klingons > 8);
+	    while ((!game.state.galaxy[w.x][w.y].klingons && Rand() < 0.75)||
+		   game.state.galaxy[w.x][w.y].supernova||
+		   game.state.galaxy[w.x][w.y].klingons > 8);
 	    // check for duplicate
 	    for (j = 1; j < i; j++)
-		if (game.state.kcmdr[j].x==ix && game.state.kcmdr[j].y==iy) break;
+		if (game.state.kcmdr[j].x==w.x && game.state.kcmdr[j].y==w.y) break;
 	} while (j < i);
-	game.state.galaxy[ix][iy].klingons++;
-	game.state.kcmdr[i].x = ix;
-	game.state.kcmdr[i].y = iy;
+	game.state.galaxy[w.x][w.y].klingons++;
+	game.state.kcmdr[i] = w;
     }
     // Locate planets in galaxy
     for (i = 0; i < game.inplan; i++) {
-	do iran(GALSIZE, &ix, &iy); while (game.state.galaxy[ix][iy].planet != NOPLANET);
-	game.state.plnets[i].w.x = ix;
-	game.state.plnets[i].w.y = iy;
+	do w = iran(GALSIZE); 
+	while (game.state.galaxy[w.x][w.y].planet != NOPLANET);
+	game.state.plnets[i].w = w;
 	if (i < NINHAB) {
 	    game.state.plnets[i].pclass = M;	// All inhabited planets are class M
 	    game.state.plnets[i].crystals = 0;
@@ -387,24 +387,23 @@
 	    game.state.plnets[i].inhabited = UNINHABITED;
 	}
 	if ((game.options & OPTION_WORLDS) || i >= NINHAB)
-	    game.state.galaxy[ix][iy].planet = i;
+	    game.state.galaxy[w.x][w.y].planet = i;
     }
     // Locate Romulans
     for (i = 1; i <= game.state.nromrem; i++) {
-	iran(GALSIZE, &ix, &iy);
-	game.state.galaxy[ix][iy].romulans = 1;
+	w = iran(GALSIZE);
+	game.state.galaxy[w.x][w.y].romulans = 1;
     }
     // Locate the Super Commander
     if (game.state.nscrem > 0) {
-	do iran(GALSIZE, &ix, &iy);
-	while (game.state.galaxy[ix][iy].supernova || game.state.galaxy[ix][iy].klingons > 8);
-	game.state.kscmdr.x = ix;
-	game.state.kscmdr.y = iy;
-	game.state.galaxy[ix][iy].klingons++;
+	do w = iran(GALSIZE);
+	while (game.state.galaxy[w.x][w.y].supernova || game.state.galaxy[w.x][w.y].klingons > 8);
+	game.state.kscmdr = w;
+	game.state.galaxy[w.x][w.y].klingons++;
     }
     // Place thing (in tournament game, thingx == -1, don't want one!)
     if (thing.x != -1) {
-	iran(GALSIZE, &thing.x, &thing.y);
+	thing = iran(GALSIZE);
     }
     else {
 	thing.x = thing.y = 0;
@@ -455,10 +454,11 @@
 }
 
 bool choose(bool needprompt) 
+/* choose your game type */
 {
     for(;;) {
 	game.tourn = 0;
-	game.thawed = 0;
+	game.thawed = false;
 	game.skill = SKILL_NONE;
 	game.length = 0;
 	if (needprompt) /* Can start with command line options */
@@ -566,14 +566,18 @@
     return false;
 }
 
-void dropin(int iquad, coord *w) 
+coord dropin(int iquad)
+/* drop a feature on a random dot in the current quadrant */
 {
-    do iran(QUADSIZE, &w->x, &w->y);
-    while (game.quad[w->x][w->y] != IHDOT);
-    game.quad[w->x][w->y] = iquad;
+    coord w;
+    do w = iran(QUADSIZE);
+    while (game.quad[w.x][w.y] != IHDOT);
+    game.quad[w.x][w.y] = iquad;
+    return w;
 }
 
-void newcnd(void) 
+void newcnd(void)
+/* update our alert status */
 {
     game.condit = IHGREEN;
     if (game.energy < 1000.0) game.condit = IHYELLOW;
@@ -582,16 +586,18 @@
     if (!game.alive) game.condit=IHDEAD;
 }
 
-void newkling(int i, coord *pi)
+coord newkling(int i)
 /* drop new Klingon into current quadrant */
 {
-    dropin(IHK, pi);
-    game.ks[i] = *pi;
-    game.kdist[i] = game.kavgd[i] = sqrt(square(game.sector.x-pi->x) + square(game.sector.y-pi->y));
+    coord pi = dropin(IHK);
+    game.ks[i] = pi;
+    game.kdist[i] = game.kavgd[i] = distance(game.sector, pi);
     game.kpower[i] = Rand()*150.0 +300.0 +25.0*game.skill;
+    return pi;
 }
 
-void newqad(bool shutup) 
+void newqad(bool shutup)
+/* set up a new state of quadrant, for when we enter or re-enter it */
 {
     int i, j;
     coord w;
@@ -636,12 +642,14 @@
     game.quad[game.sector.x][game.sector.y] = game.ship;
 
     if (q->klingons) {
+	w.x = w.y = 0;	/* quiet a gcc warning */
 	// Position ordinary Klingons
 	for (i = 1; i <= game.klhere; i++)
-	    newkling(i, &w);
+	    w = newkling(i);
 	// If we need a commander, promote a Klingon
 	for_commanders(i)
-	    if (game.state.kcmdr[i].x==game.quadrant.x && game.state.kcmdr[i].y==game.quadrant.y) break;
+	    if (same(game.state.kcmdr[i], game.quadrant))
+		break;
 			
 	if (i <= game.state.remcom) {
 	    game.quad[w.x][w.y] = IHC;
@@ -650,7 +658,7 @@
 	}
 
 	// If we need a super-commander, promote a Klingon
-	if (game.quadrant.x == game.state.kscmdr.x && game.quadrant.y == game.state.kscmdr.y) {
+	if (same(game.quadrant, game.state.kscmdr)) {
 	    game.quad[game.ks[1].x][game.ks[1].y] = IHS;
 	    game.kpower[1] = 1175.0 + 400.0*Rand() + 125.0*game.skill;
 	    game.iscate = game.state.remkl>1;
@@ -659,28 +667,28 @@
     }
     // Put in Romulans if needed
     for (i = game.klhere+1; i <= game.nenhere; i++) {
-	dropin(IHR, &w);
+	w = dropin(IHR);
 	game.ks[i] = w;
-	game.kdist[i] = game.kavgd[i] = sqrt(square(game.sector.x-w.x) + square(game.sector.y-w.y));
+	game.kdist[i] = game.kavgd[i] = distance(game.sector, w);
 	game.kpower[i] = Rand()*400.0 + 450.0 + 50.0*game.skill;
     }
     // If quadrant needs a starbase, put it in
     if (q->starbase)
-	dropin(IHB, &game.base);
+	game.base = dropin(IHB);
 	
     // If quadrant needs a planet, put it in
     if (q->planet != NOPLANET) {
 	game.iplnet = q->planet;
 	if (game.state.plnets[q->planet].inhabited == UNINHABITED)
-	    dropin(IHP, &game.plnet);
+	    game.plnet = dropin(IHP);
 	else
-	    dropin(IHW, &game.plnet);
+	    game.plnet = dropin(IHW);
     }
     // Check for game.condition
     newcnd();
     // And finally the stars
     for (i = 1; i <= q->stars; i++) 
-	dropin(IHSTAR, &w);
+	dropin(IHSTAR);
 
     // Check for RNZ
     if (game.irhere > 0 && game.klhere == 0 && (q->planet == NOPLANET || game.state.plnets[q->planet].inhabited == UNINHABITED)) {
@@ -698,13 +706,13 @@
     if (shutup==0) {
 	// Put in THING if needed
 	if (same(thing, game.quadrant)) {
-	    dropin(IHQUEST, &w);
-	    iran(GALSIZE, &thing.x, &thing.y);
+	    w = dropin(IHQUEST);
+	    thing = iran(GALSIZE);
 	    game.nenhere++;
 	    iqhere=1;
 	    game.ks[game.nenhere] = w;
 	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] =
-		sqrt(square(game.sector.x-w.x) + square(game.sector.y-w.y));
+		distance(game.sector, w);
 	    game.kpower[game.nenhere] = Rand()*6000.0 +500.0 +250.0*game.skill;
 	    if (!damaged(DSRSENS)) {
 		skip(1);
@@ -730,7 +738,7 @@
 	    game.ks[game.nenhere].x = game.tholian.x;
 	    game.ks[game.nenhere].y = game.tholian.y;
 	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] =
-		sqrt(square(game.sector.x-game.tholian.x) + square(game.sector.y-game.tholian.y));
+		distance(game.sector, game.tholian);
 	    game.kpower[game.nenhere] = Rand()*400.0 +100.0 +25.0*game.skill;
 	    /* Reserve unocupied corners */
 	    if (game.quad[1][1]==IHDOT) game.quad[1][1] = 'X';
@@ -745,7 +753,7 @@
     // Put in a few black holes
     for (i = 1; i <= 3; i++)
 	if (Rand() > 0.5) 
-	    dropin(IHBLANK, &w);
+	    dropin(IHBLANK);
 
     // Take out X's in corners if Tholian present
     if (game.ithere) {
@@ -757,6 +765,7 @@
 }
 
 void sortkl(void) 
+/* sort Klingons by distance from us */
 {
     double t;
     int j, k;
@@ -790,7 +799,8 @@
     } while (sw);
 }
 
-void setpassword(void) 
+void setpassword(void)
+/* set the self-destruct password */
 {
     if (!(game.options & OPTION_CURSES)) {
 	while (TRUE) {

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-19 23:56:55 UTC (rev 606)
+++ trunk/src/sst.c	2006-09-20 03:26:16 UTC (rev 607)
@@ -290,7 +290,9 @@
 #define NUMCOMMANDS	sizeof(commands)/sizeof(commands[0])
 #define ACCEPT(i)	(!commands[i].option || (commands[i].option & game.options))
 
-static void listCommands(void) {
+static void listCommands(void) 
+/* generate a list of legal commands */
+{
     int i, k = 0;
     proutn("LEGAL COMMANDS ARE:");
     for (i = 0; i < NUMCOMMANDS; i++) {
@@ -304,7 +306,8 @@
     skip(1);
 }
 
-static void helpme(void) 
+static void helpme(void)
+/* browse on-line help */
 {
     int i, j;
     char cmdbuf[32], *cp;
@@ -383,12 +386,14 @@
     fclose(fp);
 }
 
-void enqueue(char *s) 
+void enqueue(char *s)
+/* enqueue input for the command parser */
 {
     strcpy(line, s);
 }
 
-static void makemoves(void) 
+static void makemoves(void)
+/* command-interpretation loop */
 {
     int key, i, v = 0;
     bool hitme;
@@ -551,7 +556,7 @@
 	    if (game.ididit) hitme = true;
 	    break;
 	case QUIT:
-	    game.alldone = 1;		// quit the game
+	    game.alldone = true;		// quit the game
 	    break;
 	case HELP:
 	    helpme();			// get help
@@ -647,7 +652,7 @@
 	setup(line[0] == '\0');
 	if (game.alldone) {
 	    score();
-	    game.alldone = 0;
+	    game.alldone = false;
 	}
 	else makemoves();
 	skip(1);
@@ -671,6 +676,7 @@
 
 
 void cramen(int i) 
+/* print the name of an enemy */
 {
     /* return an enemy */
     char *s;
@@ -693,6 +699,7 @@
 }
 
 char *cramlc(enum loctype key, coord w)
+/* name a location */
 {
     static char buf[32];
     buf[0] = '\0';
@@ -703,6 +710,7 @@
 }
 
 void crmena(bool stars, int enemy, enum loctype key, coord w) 
+/* print an enemy and his location */
 {
     if (stars) proutn("***");
     cramen(enemy);
@@ -710,7 +718,8 @@
     proutn(cramlc(key, w));
 }
 
-void crmshp(void) 
+void crmshp(void)
+/* print our ship name */
 {
     char *s;
     switch (game.ship) {
@@ -721,7 +730,8 @@
     proutn(s);
 }
 
-void stars(void) 
+void stars(void)
+/* print a line of stars */
 {
     prouts("******************************************************");
     skip(1);
@@ -737,10 +747,13 @@
     return rand()/(1.0 + (double)RAND_MAX);
 }
 
-void iran(int size, int *i, int *j) 
+coord iran(int size)
+/* choose a random location */ 
 {
-    *i = Rand()*(size*1.0) + 1.0;
-    *j = Rand()*(size*1.0) + 1.0;
+    coord w;
+    w.x = Rand()*(size*1.0) + 1.0;
+    w.y = Rand()*(size*1.0) + 1.0;
+    return w;
 }
 
 void chew(void)
@@ -811,7 +824,8 @@
     return IHALPHA;
 }
 
-bool ja(void) 
+bool ja(void)
+/* yes-or-no confirmation */
 {
     chew();
     for(;;) {
@@ -823,7 +837,8 @@
     }
 }
 
-void huh(void) 
+void huh(void)
+/* complain about unparseable input */
 {
     chew();
     skip(1);
@@ -831,15 +846,13 @@
 }
 
 int isit(char *s) 
+/* compares s to citem and returns true if it matches to the length of s */
 {
-    /* New function -- compares s to scanned citem and returns true if it
-       matches to the length of s */
-
     return strncasecmp(s, citem, max(1, strlen(citem))) == 0;
-
 }
 
-void debugme(void) 
+void debugme(void)
+/* access to the internals for debugging */
 {
     proutn("Reset levels? ");
     if (ja() == true) {

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-19 23:56:55 UTC (rev 606)
+++ trunk/src/sst.h	2006-09-20 03:26:16 UTC (rev 607)
@@ -42,7 +42,9 @@
 
 typedef struct {int x; int y;} coord;
 
-#define same(c1, c2)	(c1.x == c2.x && c1.y == c2.y)
+#define square(i)		((i)*(i))
+#define same(c1, c2)		((c1.x == c2.x) && (c1.y == c2.y))
+#define distance(c1, c2)	sqrt(square(c1.x - c2.x) + square(c1.y - c2.y))
 
 typedef struct {
     coord w;
@@ -355,7 +357,7 @@
 void selfdestruct(void);
 void kaboom(void);
 void freeze(bool);
-int thaw(void);
+bool thaw(void);
 void plaque(void);
 int scan(void);
 #define IHEOL (0)
@@ -374,9 +376,8 @@
 char *cramlc(enum loctype, coord w);
 double expran(double);
 double Rand(void);
-void iran(int, int *, int *);
-#define square(i) ((i)*(i))
-void dropin(int, coord*);
+coord iran(int);
+coord dropin(int);
 void newcnd(void);
 void sortkl(void);
 void imove(void);
@@ -419,7 +420,7 @@
 void makechart(void);
 void enqueue(char *);
 char *systemname(int);
-void newkling(int, coord *);
+coord newkling(int);
 
 /* mode arguments for srscan() */
 #define SCAN_FULL		1



From esr at mail.berlios.de  Wed Sep 20 05:57:05 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 20 Sep 2006 05:57:05 +0200
Subject: [Sst-commit-watch] r608 - trunk/src
Message-ID: <200609200357.k8K3v5RR013197@sheep.berlios.de>

Author: esr
Date: 2006-09-20 05:57:04 +0200 (Wed, 20 Sep 2006)
New Revision: 608

Modified:
   trunk/src/battle.c
   trunk/src/io.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/setup.c
   trunk/src/sst.h
Log:
More uses of distance() macro. Eliminate some magic numbers.  


Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-20 03:26:16 UTC (rev 607)
+++ trunk/src/battle.c	2006-09-20 03:57:04 UTC (rev 608)
@@ -181,7 +181,7 @@
 void torpedo(double course, double r, int inx, int iny, double *hit, int i, int n)
 /* let a photon torpedo fly */
 {
-    int l, iquad=0, jx=0, jy=0, ll;
+    int l, iquad=0, ll;
     bool shoved = false;
     double ac=course + 0.25*r;
     double angle = (15.0-ac)*0.5235988;
@@ -189,9 +189,9 @@
     double deltax=-sin(angle), deltay=cos(angle), x=inx, y=iny, bigger;
     double ang, temp, xx, yy, kp, h1;
     struct quadrant *q = &game.state.galaxy[game.quadrant.x][game.quadrant.y];
-    coord w;
+    coord w, jw;
 
-    w.x = w.y = 0;
+    w.x = w.y = jw.x = jw.y = 0;
     bigger = fabs(deltax);
     if (fabs(deltay) > bigger) bigger = fabs(deltay);
     deltax /= bigger;
@@ -208,7 +208,7 @@
 	w.y = y + 0.5;
 	if (!VALID_SECTOR(w.x, w.y)) break;
 	iquad=game.quad[w.x][w.y];
-	tracktorpedo(w.x, w.y, l, i, n, iquad);
+	tracktorpedo(w, l, i, n, iquad);
 	if (iquad==IHDOT) continue;
 	/* hit something */
 	setwnd(message_window);
@@ -232,19 +232,19 @@
 	    if (fabs(cos(ang)) > temp) temp = fabs(cos(ang));
 	    xx = -sin(ang)/temp;
 	    yy = cos(ang)/temp;
-	    jx=w.x+xx+0.5;
-	    jy=w.y+yy+0.5;
-	    if (!VALID_SECTOR(jx, jy)) return;
-	    if (game.quad[jx][jy]==IHBLANK) {
+	    jw.x=w.x+xx+0.5;
+	    jw.y=w.y+yy+0.5;
+	    if (!VALID_SECTOR(jw.x, jw.y)) return;
+	    if (game.quad[jw.x][jw.y]==IHBLANK) {
 		finish(FHOLE);
 		return;
 	    }
-	    if (game.quad[jx][jy]!=IHDOT) {
+	    if (game.quad[jw.x][jw.y]!=IHDOT) {
 		/* can't move into object */
 		return;
 	    }
-	    game.sector.x = jx;
-	    game.sector.y = jy;
+	    game.sector.x = jw.x;
+	    game.sector.y = jw.y;
 	    crmshp();
 	    shoved = true;
 	    break;
@@ -280,25 +280,25 @@
 	    if (fabs(cos(ang)) > temp) temp = fabs(cos(ang));
 	    xx = -sin(ang)/temp;
 	    yy = cos(ang)/temp;
-	    jx=w.x+xx+0.5;
-	    jy=w.y+yy+0.5;
-	    if (!VALID_SECTOR(jx, jy)) {
+	    jw.x=w.x+xx+0.5;
+	    jw.y=w.y+yy+0.5;
+	    if (!VALID_SECTOR(jw.x, jw.y)) {
 		prout(_(" damaged but not destroyed."));
 		return;
 	    }
-	    if (game.quad[jx][jy]==IHBLANK) {
+	    if (game.quad[jw.x][jw.y]==IHBLANK) {
 		prout(_(" buffeted into black hole."));
-		deadkl(w, iquad, jx, jy);
+		deadkl(w, iquad, jw.x, jw.y);
 		return;
 	    }
-	    if (game.quad[jx][jy]!=IHDOT) {
+	    if (game.quad[jw.x][jw.y]!=IHDOT) {
 		/* can't move into object */
 		prout(_(" damaged but not destroyed."));
 		return;
 	    }
 	    proutn(_(" damaged--"));
-	    game.ks[ll].x = jx;
-	    game.ks[ll].y = jy;
+	    game.ks[ll].x = jw.x;
+	    game.ks[ll].y = jw.y;
 	    shoved = true;
 	    break;
 	case IHB: /* Hit a base */
@@ -426,9 +426,8 @@
     }
     if (shoved) {
 	game.quad[w.x][w.y]=IHDOT;
-	game.quad[jx][jy]=iquad;
-	w.x = jx; w.y = jy;
-	prout(_(" displaced by blast to %s "), cramlc(sector, w));
+	game.quad[jw.x][jw.y]=iquad;
+	prout(_(" displaced by blast to %s "), cramlc(sector, jw));
 	for_local_enemies(ll)
 	    game.kdist[ll] = game.kavgd[ll] = distance(game.sector,game.ks[ll]);
 	sortkl();
@@ -1227,7 +1226,7 @@
 	w = game.ks[kk];
 	if (hit > 0.005) {
 	    if (!damaged(DSRSENS))
-		boom(w.x, w.y);
+		boom(w);
 	    proutn(_("%d unit hit on "), (int)hit);
 	}
 	else

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-09-20 03:26:16 UTC (rev 607)
+++ trunk/src/io.c	2006-09-20 03:57:04 UTC (rev 608)
@@ -340,26 +340,26 @@
     }
 }
 
-static void put_srscan_sym(int x, int y, char sym)
+static void put_srscan_sym(coord w, char sym)
 {
-    wmove(srscan_window, x+1, y*2+2);
+    wmove(srscan_window, w.x+1, w.y*2+2);
     waddch(srscan_window, sym);
     wrefresh(srscan_window);
 }
 
-void boom(int ii, int jj)
+void boom(coord w)
 /* enemy fall down, go boom */ 
 {
     if (game.options & OPTION_CURSES) {
 	drawmaps(2);
 	setwnd(srscan_window);
 	wattron(srscan_window, A_REVERSE);
-	put_srscan_sym(ii, jj, game.quad[ii][jj]);
+	put_srscan_sym(w, game.quad[w.x][w.y]);
 	sound(500);
 	delay(1000);
 	nosound();
 	wattroff(srscan_window, A_REVERSE);
-	put_srscan_sym(ii, jj, game.quad[ii][jj]);
+	put_srscan_sym(w, game.quad[w.x][w.y]);
 	delay(500);
 	setwnd(message_window);
     }
@@ -380,7 +380,7 @@
     }
 }
 
-void tracktorpedo(int ix, int iy, int l, int i, int n, int iquad)
+void tracktorpedo(coord w, int l, int i, int n, int iquad)
 /* torpedo-track animation */
 {
     if (!game.options & OPTION_CURSES) {
@@ -395,7 +395,7 @@
 	    }
 	} else if (l==4 || l==9) 
 	    skip(1);
-	proutn("%d - %d   ", ix, iy);
+	proutn("%d - %d   ", w.x, w.y);
     } else {
 	if (!damaged(DSRSENS) || game.condit==IHDOCKED) {
 	    if (i != 1 && l == 1) {
@@ -403,23 +403,23 @@
 		delay(400);
 	    }
 	    if ((iquad==IHDOT)||(iquad==IHBLANK)){
-		put_srscan_sym(ix, iy, '+');
+		put_srscan_sym(w, '+');
 		sound(l*10);
 		delay(100);
 		nosound();
-		put_srscan_sym(ix, iy, iquad);
+		put_srscan_sym(w, iquad);
 	    }
 	    else {
 		wattron(curwnd, A_REVERSE);
-		put_srscan_sym(ix, iy, iquad);
+		put_srscan_sym(w, iquad);
 		sound(500);
 		delay(1000);
 		nosound();
 		wattroff(curwnd, A_REVERSE);
-		put_srscan_sym(ix, iy, iquad);
+		put_srscan_sym(w, iquad);
 	    }
 	} else {
-	    proutn("%d - %d   ", ix, iy);
+	    proutn("%d - %d   ", w.x, w.y);
 	}
     }
 }

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-20 03:26:16 UTC (rev 607)
+++ trunk/src/moving.c	2006-09-20 03:57:04 UTC (rev 608)
@@ -8,10 +8,10 @@
 /* movement execution for warp, impule, supernova, and tractor-beam events */
 {
     double angle, deltax, deltay, bigger, x, y,
-        finald, finalx, finaly, stopegy, probf;
+        finald, stopegy, probf;
     int n, m, kink, kinks, iquad;
-    coord w;
-    bool trbeam = 0;
+    coord w, final;
+    bool trbeam = false;
 
     w.x = w.y = 0;
     if (game.inorbit) {
@@ -53,9 +53,8 @@
 		if (game.nenhere != 0 && game.iattak != 2) {
 		    newcnd();
 		    for_local_enemies(m) {
-			finald = sqrt((w.x-game.ks[m].x)*(double)(w.x-game.ks[m].x) +
-				      (w.y-game.ks[m].y)*(double)(w.y-game.ks[m].y));
-			game.kavgd[m] = 0.5 * (finald+game.kdist[m]);
+			finald = distance(w, game.ks[m]);
+			game.kavgd[m] = 0.5 * (finald + game.kdist[m]);
 		    }
 		    /*
 		     * Stas Sergeev added the game.condition
@@ -123,8 +122,7 @@
 	    if (iquad != IHDOT) {
 		/* object encountered in flight path */
 		stopegy = 50.0*game.dist/game.optime;
-		game.dist=0.1*sqrt((game.sector.x-w.x)*(double)(game.sector.x-w.x) +
-			      (game.sector.y-w.y)*(double)(game.sector.y-w.y));
+		game.dist = distance(game.sector, w) / (QUADSIZE * 1.0);
 		switch (iquad) {
 		case IHT: /* Ram a Tholian */
 		case IHK: /* Ram enemy ship */
@@ -132,11 +130,9 @@
 		case IHS:
 		case IHR:
 		case IHQUEST:
-		    game.sector.x = w.x;
-		    game.sector.y = w.y;
+		    game.sector = w;
 		    ram(0, iquad, game.sector);
-		    finalx = game.sector.x;
-		    finaly = game.sector.y;
+		    final = game.sector;
 		    break;
 		case IHBLANK:
 		    skip(1);
@@ -174,10 +170,9 @@
 		    proutn(_("Emergency stop required "));
 		    prout(_("%2d units of energy."), (int)stopegy);
 		    game.energy -= stopegy;
-		    finalx = x-deltax+0.5;
-		    game.sector.x = finalx;
-		    finaly = y-deltay+0.5;
-		    game.sector.y = finaly;
+		    final.x = x-deltax+0.5;
+		    final.y = y-deltay+0.5;
+		    game.sector = final;
 		    if (game.energy <= 0) {
 			finish(FNRG);
 			return;
@@ -187,20 +182,16 @@
 		goto no_quad_change;	/* sorry! */
 	    }
 	}
-	game.dist = 0.1*sqrt((game.sector.x-w.x)*(double)(game.sector.x-w.x) +
-			(game.sector.y-w.y)*(double)(game.sector.y-w.y));
-	game.sector.x = w.x;
-	game.sector.y = w.y;
+	game.dist = distance(game.sector, w) / (QUADSIZE * 1.0);
+	game.sector = w;
     }
-    finalx = game.sector.x;
-    finaly = game.sector.y;
+    final = game.sector;
 no_quad_change:
     /* No quadrant change -- compute new avg enemy distances */
     game.quad[game.sector.x][game.sector.y] = game.ship;
     if (game.nenhere) {
 	for_local_enemies(m) {
-	    finald = sqrt((w.x-game.ks[m].x)*(double)(w.x-game.ks[m].x) +
-			  (w.y-game.ks[m].y)*(double)(w.y-game.ks[m].y));
+	    finald = distance(w, game.ks[m]);
 	    game.kavgd[m] = 0.5 * (finald+game.kdist[m]);
 	    game.kdist[m] = finald;
 	}
@@ -718,7 +709,7 @@
 	    }
 	    else {
 		prout(_("saved."));
-		game.icrystl = 1;
+		game.icrystl = true;
 	    }
 	}
     }

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-20 03:26:16 UTC (rev 607)
+++ trunk/src/planets.c	2006-09-20 03:57:04 UTC (rev 608)
@@ -181,7 +181,7 @@
 	prout(_("The shuttle craft Galileo is here!"));
     }
     if (game.landed!=1 && game.imine) {
-	game.icrystl = 1;
+	game.icrystl = true;
 	game.cryprob = 0.05;
     }
     game.imine = false;
@@ -209,7 +209,7 @@
 	prout(_("You've already mined enough crystals for this trip."));
 	return;
     }
-    if (game.icrystl == 1 && game.cryprob == 0.05) {
+    if (game.icrystl && game.cryprob == 0.05) {
 	proutn(_("With all those fresh crystals aboard the "));
 	crmshp();
 	skip(1);
@@ -229,7 +229,7 @@
     game.ididit = false;
     skip(1);
     chew();
-    if (game.icrystl!=1) {
+    if (!game.icrystl) {
 	prout(_("No dilithium crystals available."));
 	return;
     }
@@ -364,7 +364,7 @@
 	    game.iscraft = 1;
 	    game.icraft = false;
 	    if (game.imine) {
-		game.icrystl = 1;
+		game.icrystl = true;
 		game.cryprob = 0.05;
 	    }
 	    game.imine = false;

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-20 03:26:16 UTC (rev 607)
+++ trunk/src/setup.c	2006-09-20 03:57:04 UTC (rev 608)
@@ -177,7 +177,7 @@
 
 	/* If at least one base left, give 'em the Faerie Queene */
 	skip(1);
-	game.icrystl = 0; /* crystals are lost */
+	game.icrystl = false; /* crystals are lost */
 	game.nprobes = 0; /* No probes */
 	prout("You are captured by Klingons and released to");
 	prout("the Federation in a prisoner-of-war exchange.");
@@ -209,7 +209,7 @@
     prout("Starfleet puts you in command of another ship,");
     prout("the Faerie Queene, which is antiquated but,");
     prout("still useable.");
-    if (game.icrystl!=0) prout("The dilithium crystals have been moved.");
+    if (game.icrystl) prout("The dilithium crystals have been moved.");
     game.imine = false;
     game.iscraft=0; /* Galileo disappears */
     /* Resupply ship */
@@ -256,8 +256,8 @@
     game.battle.x = game.battle.y = 0;
     game.state.date = game.indate = 100.0*(int)(31.0*Rand()+20.0);
     game.nkinks = game.nhelp = game.casual = game.abandoned = 0;
-    game.resting = game.imine = game.icraft = false;
-    game.isatb = game.iscate = game.icrystl = game.state.nplankl = 0;
+    game.resting = game.imine = game.icrystl = game.icraft = false;
+    game.isatb = game.iscate = game.state.nplankl = 0;
     game.state.starkl = game.state.basekl = 0;
     game.iscraft = 1;
     game.landed = -1;

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-20 03:26:16 UTC (rev 607)
+++ trunk/src/sst.h	2006-09-20 03:57:04 UTC (rev 608)
@@ -222,6 +222,7 @@
 	isarmed,	// probe is armed
 	inorbit,	// orbiting a planet
 	imine,		// mining
+	icrystl,	// dilithium crystals aboard
 	thawed;		// thawed game
     int inkling,	// initial number of klingons
 	inbase,		// initial number of bases
@@ -251,7 +252,6 @@
 	isatb,		// =1 if super commander is attacking base
 	iscate,		// super commander is here
 	iattak,		// attack recursion elimination (was cracks[4])
-	icrystl,	// dilithium crystals aboard
 	tourn,		// tournament number
 	iseenit,	// seen base attack report
 	proben,		// number of moves for probe
@@ -411,8 +411,8 @@
 void iostart(void);
 void setwnd(WINDOW *);
 void warble(void);
-void boom(int, int);
-void tracktorpedo(int, int, int, int, int, int);
+void boom(coord);
+void tracktorpedo(coord, int, int, int, int);
 void cgetline(char *, int);
 void waitfor(void);
 void setpassword(void);



From esr at mail.berlios.de  Wed Sep 20 06:35:24 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 20 Sep 2006 06:35:24 +0200
Subject: [Sst-commit-watch] r609 - trunk/src
Message-ID: <200609200435.k8K4ZO4e001982@sheep.berlios.de>

Author: esr
Date: 2006-09-20 06:35:23 +0200 (Wed, 20 Sep 2006)
New Revision: 609

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/finish.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/sst.h
Log:
Still more application of coord type.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-20 03:57:04 UTC (rev 608)
+++ trunk/src/ai.c	2006-09-20 04:35:23 UTC (rev 609)
@@ -208,7 +208,7 @@
 		/* See if we should ram ship */
 		if (game.quad[lookx][looky] == game.ship &&
 		    (ienm == IHC || ienm == IHS)) {
-		    ram(1, ienm, com);
+		    ram(true, ienm, com);
 		    return;
 		}
 		if (krawlx != mx && my != 0) {

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-20 03:57:04 UTC (rev 608)
+++ trunk/src/battle.c	2006-09-20 04:35:23 UTC (rev 609)
@@ -153,7 +153,7 @@
     crmena(false, ienm, sector, w);
     if (ibumpd) proutn(_(" (original position)"));
     skip(1);
-    deadkl(w, ienm, game.sector.x, game.sector.y);
+    deadkl(w, ienm, game.sector);
     proutn("***");
     crmshp();
     prout(_(" heavily damaged."));
@@ -178,7 +178,7 @@
     return;
 }
 
-void torpedo(double course, double r, int inx, int iny, double *hit, int i, int n)
+void torpedo(double course, double r, coord in, double *hit, int i, int n)
 /* let a photon torpedo fly */
 {
     int l, iquad=0, ll;
@@ -186,7 +186,7 @@
     double ac=course + 0.25*r;
     double angle = (15.0-ac)*0.5235988;
     double bullseye = (15.0 - course)*0.5235988;
-    double deltax=-sin(angle), deltay=cos(angle), x=inx, y=iny, bigger;
+    double deltax=-sin(angle), deltay=cos(angle), x=in.x, y=in.y, bigger;
     double ang, temp, xx, yy, kp, h1;
     struct quadrant *q = &game.state.galaxy[game.quadrant.x][game.quadrant.y];
     coord w, jw;
@@ -221,8 +221,7 @@
 	    crmshp();
 	    prout(".");
 	    *hit = 700.0 + 100.0*Rand() -
-		1000.0*sqrt(square(w.x-inx)+square(w.y-iny))*
-		fabs(sin(bullseye-angle));
+		1000.0 * distance(w, in) * fabs(sin(bullseye-angle));
 	    *hit = fabs(*hit);
 	    newcnd(); /* we're blown out of dock */
 	    /* We may be displaced. */
@@ -243,8 +242,7 @@
 		/* can't move into object */
 		return;
 	    }
-	    game.sector.x = jw.x;
-	    game.sector.y = jw.y;
+	    game.sector = jw;
 	    crmshp();
 	    shoved = true;
 	    break;
@@ -261,16 +259,16 @@
 	case IHK:
 	    /* find the enemy */
 	    for_local_enemies(ll)
-		if (w.x==game.ks[ll].x && w.y==game.ks[ll].y) break;
+		if (same(w, game.ks[ll]))
+		    break;
 	    kp = fabs(game.kpower[ll]);
 	    h1 = 700.0 + 100.0*Rand() -
-		1000.0*sqrt(square(w.x-inx)+square(w.y-iny))*
-		fabs(sin(bullseye-angle));
+		1000.0 * distance(w, in) * fabs(sin(bullseye-angle));
 	    h1 = fabs(h1);
 	    if (kp < h1) h1 = kp;
 	    game.kpower[ll] -= (game.kpower[ll]<0 ? -h1 : h1);
 	    if (game.kpower[ll] == 0) {
-		deadkl(w, iquad, w.x, w.y);
+		deadkl(w, iquad, w);
 		return;
 	    }
 	    crmena(true, iquad, sector, w);
@@ -288,7 +286,7 @@
 	    }
 	    if (game.quad[jw.x][jw.y]==IHBLANK) {
 		prout(_(" buffeted into black hole."));
-		deadkl(w, iquad, jw.x, jw.y);
+		deadkl(w, iquad, jw);
 		return;
 	    }
 	    if (game.quad[jw.x][jw.y]!=IHDOT) {
@@ -297,8 +295,7 @@
 		return;
 	    }
 	    proutn(_(" damaged--"));
-	    game.ks[ll].x = jw.x;
-	    game.ks[ll].y = jw.y;
+	    game.ks[ll] = jw;
 	    shoved = true;
 	    break;
 	case IHB: /* Hit a base */
@@ -366,7 +363,7 @@
 		proutn(_("Mr. Spock-"));
 		prouts(_("  \"Fascinating!\""));
 		skip(1);
-		deadkl(w, iquad, w.x, w.y);
+		deadkl(w, iquad, w);
 	    } else {
 		/*
 		 * Stas Sergeev added the possibility that
@@ -388,14 +385,13 @@
 	    return;
 	case IHT:  /* Hit a Tholian */
 	    h1 = 700.0 + 100.0*Rand() -
-		1000.0*sqrt(square(w.x-inx)+square(w.y-iny))*
-		fabs(sin(bullseye-angle));
+		1000.0 * distance(w, in) * fabs(sin(bullseye-angle));
 	    h1 = fabs(h1);
 	    if (h1 >= 600) {
 		game.quad[w.x][w.y] = IHDOT;
 		game.ithere = false;
 		game.tholian.x = game.tholian.y = 0;
-		deadkl(w, iquad, w.x, w.y);
+		deadkl(w, iquad, w);
 		return;
 	    }
 	    skip(1);
@@ -536,7 +532,7 @@
 	    prout("  ");
 	    r = (Rand()+Rand())*0.5 -0.5;
 	    r += 0.002*game.kpower[loop]*r;
-	    torpedo(course, r, jay.x, jay.y, &hit, 1, 1);
+	    torpedo(course, r, jay, &hit, 1, 1);
 	    if (KLINGREM==0) 
 		finish(FWON); /* Klingons did themselves in! */
 	    if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova || game.alldone) 
@@ -619,14 +615,12 @@
     return;
 }
 		
-void deadkl(coord w, int type, int ixx, int iyy)
+void deadkl(coord w, int type, coord mv)
 /* kill a Klingon, Tholian, Romulan, or Thingy */
 {
-    /* Added ixx and iyy allow enemy to "move" before dying */
-    coord mv;
+    /* Added mv to allow enemy to "move" before dying */
     int i,j;
 
-    mv.x = ixx; mv.y = iyy;
     skip(1);
     crmena(true, type, sector, mv);
     /* Decide what kind of enemy it is and update approriately */
@@ -847,7 +841,7 @@
 	}
 	if (game.shldup || game.condit == IHDOCKED) 
 	    r *= 1.0 + 0.0001*game.shield;
-	torpedo(course[i], r, game.sector.x, game.sector.y, &dummy, i, n);
+	torpedo(course[i], r, game.sector, &dummy, i, n);
 	if (game.alldone || game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova)
 	    return;
     }
@@ -1236,7 +1230,7 @@
 	crmena(false,ienm,sector,w);
 	skip(1);
 	if (kpow == 0) {
-	    deadkl(w, ienm, w.x, w.y);
+	    deadkl(w, ienm, w);
 	    if (KLINGREM==0) finish(FWON);
 	    if (game.alldone) return;
 	    kk--; /* don't do the increment */

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-20 03:57:04 UTC (rev 608)
+++ trunk/src/events.c	2006-09-20 04:35:23 UTC (rev 609)
@@ -171,7 +171,7 @@
 		 (game.torps < 5 || damaged(DPHOTON)))) {
 		/* Tractor-beam her! */
 		istract = true;
-		yank = square(game.state.kscmdr.x-game.quadrant.x) + square(game.state.kscmdr.y-game.quadrant.y);
+		yank = distance(game.state.kscmdr, game.quadrant);
 		/********* fall through to FTBEAM code ***********/
 	    }
 	    else return;
@@ -714,7 +714,7 @@
 			kount++;
 			break;
 		    case IHK: /* kill klingon */
-			deadkl(scratch,iquad, scratch.x, scratch.y);
+			deadkl(scratch,iquad, scratch);
 			break;
 		    case IHC: /* Damage/destroy big enemies */
 		    case IHS:
@@ -723,7 +723,7 @@
 			    if (same(game.ks[ll], scratch)) break;
 			game.kpower[ll] -= 800.0; /* If firepower is lost, die */
 			if (game.kpower[ll] <= 0.0) {
-			    deadkl(scratch, iquad, scratch.x, scratch.y);
+			    deadkl(scratch, iquad, scratch);
 			    break;
 			}
 			newc.x = scratch.x + scratch.x - hits[mm][1];
@@ -740,7 +740,7 @@
 			    proutn(_(", blasted into "));
 			    crmena(false, IHBLANK, sector, newc);
 			    skip(1);
-			    deadkl(scratch, iquad, newc.x, newc.y);
+			    deadkl(scratch, iquad, newc);
 			    break;
 			}
 			if (iquad1 != IHDOT) {

Modified: trunk/src/finish.c
===================================================================
--- trunk/src/finish.c	2006-09-20 03:57:04 UTC (rev 608)
+++ trunk/src/finish.c	2006-09-20 04:35:23 UTC (rev 609)
@@ -62,7 +62,7 @@
 	int l=1;
 	while (l <= game.nenhere) {
 	    if (game.kpower[l]*game.kdist[l] <= whammo) 
-		deadkl(game.ks[l], game.quad[game.ks[l].x][game.ks[l].y], game.ks[l].x, game.ks[l].y);
+		deadkl(game.ks[l], game.quad[game.ks[l].x][game.ks[l].y], game.ks[l]);
 	    l++;
 	}
     }

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-20 03:57:04 UTC (rev 608)
+++ trunk/src/moving.c	2006-09-20 04:35:23 UTC (rev 609)
@@ -131,7 +131,7 @@
 		case IHR:
 		case IHQUEST:
 		    game.sector = w;
-		    ram(0, iquad, game.sector);
+		    ram(false, iquad, game.sector);
 		    final = game.sector;
 		    break;
 		case IHBLANK:

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-20 03:57:04 UTC (rev 608)
+++ trunk/src/planets.c	2006-09-20 04:35:23 UTC (rev 609)
@@ -436,7 +436,7 @@
 	prouts(_("Sulu- \"Captain!  It's working!\""));
 	skip(2);
 	while (game.nenhere > 0)
-	    deadkl(game.ks[1], game.quad[game.ks[1].x][game.ks[1].y],game.ks[1].x,game.ks[1].y);
+	    deadkl(game.ks[1], game.quad[game.ks[1].x][game.ks[1].y],game.ks[1]);
 	prout(_("Ensign Chekov-  \"Congratulations, Captain!\""));
 	if (KLINGREM == 0) finish(FWON);
 	if ((game.options & OPTION_PLAIN) == 0) {

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-20 03:57:04 UTC (rev 608)
+++ trunk/src/sst.h	2006-09-20 04:35:23 UTC (rev 609)
@@ -383,10 +383,10 @@
 void imove(void);
 void ram(bool, int, coord);
 void crmena(bool, int, enum loctype, coord w);
-void deadkl(coord, int, int, int);
+void deadkl(coord, int, coord);
 void timwrp(void);
 void movcom(void);
-void torpedo(double, double, int, int, double *, int, int);
+void torpedo(double, double, coord, double *, int, int);
 void huh(void);
 void pause_game(int);
 void nova(coord);



From esr at mail.berlios.de  Wed Sep 20 07:18:08 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 20 Sep 2006 07:18:08 +0200
Subject: [Sst-commit-watch] r610 - trunk/src
Message-ID: <200609200518.k8K5I83r021646@sheep.berlios.de>

Author: esr
Date: 2006-09-20 07:18:07 +0200 (Wed, 20 Sep 2006)
New Revision: 610

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/finish.c
   trunk/src/moving.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
More boolean-chasing and coord applications.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-20 04:35:23 UTC (rev 609)
+++ trunk/src/ai.c	2006-09-20 05:18:07 UTC (rev 610)
@@ -1,19 +1,19 @@
 #include "sst.h"
 
-static bool tryexit(int lookx, int looky, int ienm, int loccom, int irun) 
+static bool tryexit(coord look, int ienm, int loccom, bool irun) 
 /* a bad guy attempts to bug out */
 {
     int n;
     coord iq;
 
-    iq.x = game.quadrant.x+(lookx+(QUADSIZE-1))/QUADSIZE - 1;
-    iq.y = game.quadrant.y+(looky+(QUADSIZE-1))/QUADSIZE - 1;
+    iq.x = game.quadrant.x+(look.x+(QUADSIZE-1))/QUADSIZE - 1;
+    iq.y = game.quadrant.y+(look.y+(QUADSIZE-1))/QUADSIZE - 1;
     if (!VALID_QUADRANT(iq.x,iq.y) ||
 	game.state.galaxy[iq.x][iq.y].supernova ||
 	game.state.galaxy[iq.x][iq.y].klingons > 8)
 	return false; /* no can do -- neg energy, supernovae, or >8 Klingons */
     if (ienm == IHR) return false; /* Romulans cannot escape! */
-    if (irun == 0) {
+    if (!irun) {
 	/* avoid intruding on another commander's territory */
 	if (ienm == IHC) {
 	    for_commanders(n)
@@ -60,7 +60,7 @@
 		break;
 	    }
 	}
-	game.comhere = 0;
+	game.comhere = false;
     }
     return true; /* success */
 }
@@ -69,11 +69,10 @@
 static void movebaddy(coord com, int loccom, int ienm)
 /* tactical movement for the bad guys */
 {
-    int motion, mdist, nsteps, mx, my, lookx, looky, ll;
-    coord next;
-    int irun = 0;
+    int motion, mdist, nsteps, mx, my, ll;
+    coord next, look;
     int krawlx, krawly;
-    bool success;
+    bool success, irun = false;
     int attempts;
     /* This should probably be just game.comhere + game.ishere */
     int nbaddys = game.skill >= SKILL_EXPERT ?
@@ -87,7 +86,7 @@
     /* If SC, check with spy to see if should hi-tail it */
     if (ienm==IHS &&
 	(game.kpower[loccom] <= 500.0 || (game.condit==IHDOCKED && !damaged(DPHOTON)))) {
-	irun = 1;
+	irun = true;
 	motion = -QUADSIZE;
     }
     else {
@@ -183,40 +182,40 @@
 	if (idebug)
 	    proutn(" %d", ll+1);
 	/* Check if preferred position available */
-	lookx = next.x + mx;
-	looky = next.y + my;
+	look.x = next.x + mx;
+	look.y = next.y + my;
 	krawlx = mx < 0 ? 1 : -1;
 	krawly = my < 0 ? 1 : -1;
 	success = false;
 	attempts = 0; /* Settle mysterious hang problem */
 	while (attempts++ < 20 && !success) {
-	    if (lookx < 1 || lookx > QUADSIZE) {
-		if (motion < 0 && tryexit(lookx, looky, ienm, loccom, irun))
+	    if (look.x < 1 || look.x > QUADSIZE) {
+		if (motion < 0 && tryexit(look, ienm, loccom, irun))
 		    return;
 		if (krawlx == mx || my == 0) break;
-		lookx = next.x + krawlx;
+		look.x = next.x + krawlx;
 		krawlx = -krawlx;
 	    }
-	    else if (looky < 1 || looky > QUADSIZE) {
-		if (motion < 0 && tryexit(lookx, looky, ienm, loccom, irun))
+	    else if (look.y < 1 || look.y > QUADSIZE) {
+		if (motion < 0 && tryexit(look, ienm, loccom, irun))
 		    return;
 		if (krawly == my || mx == 0) break;
-		looky = next.y + krawly;
+		look.y = next.y + krawly;
 		krawly = -krawly;
 	    }
-	    else if ((game.options & OPTION_RAMMING) && game.quad[lookx][looky] != IHDOT) {
+	    else if ((game.options & OPTION_RAMMING) && game.quad[look.x][look.y] != IHDOT) {
 		/* See if we should ram ship */
-		if (game.quad[lookx][looky] == game.ship &&
+		if (game.quad[look.x][look.y] == game.ship &&
 		    (ienm == IHC || ienm == IHS)) {
 		    ram(true, ienm, com);
 		    return;
 		}
 		if (krawlx != mx && my != 0) {
-		    lookx = next.x + krawlx;
+		    look.x = next.x + krawlx;
 		    krawlx = -krawlx;
 		}
 		else if (krawly != my && mx != 0) {
-		    looky = next.y + krawly;
+		    look.y = next.y + krawly;
 		    krawly = -krawly;
 		}
 		else break; /* we have failed */
@@ -224,8 +223,7 @@
 	    else success = true;
 	}
 	if (success) {
-	    next.x = lookx;
-	    next.y = looky;
+	    next = look;
 	    if (idebug)
 		proutn(cramlc(neither, next));
 	}
@@ -237,10 +235,9 @@
     /* Put commander in place within same quadrant */
     game.quad[com.x][com.y] = IHDOT;
     game.quad[next.x][next.y] = ienm;
-    if (next.x != com.x || next.y != com.y) {
+    if (!same(next, com)) {
 	/* it moved */
-	game.ks[loccom].x = next.x;
-	game.ks[loccom].y = next.y;
+	game.ks[loccom] = next;
 	game.kdist[loccom] = game.kavgd[loccom] = distance(game.sector, next);
 	if (!damaged(DSRSENS) || game.condit == IHDOCKED) {
 	    proutn("***");
@@ -485,14 +482,14 @@
 	if (same(ibq, game.state.kscmdr) && same(game.state.kscmdr, game.battle)) {
 	    /* attack the base */
 	    if (flag) return; /* no, don't attack base! */
-	    game.iseenit = 0;
+	    game.iseenit = false;
 	    game.isatb = 1;
 	    schedule(FSCDBAS, 1.0 +2.0*Rand());
 	    if (is_scheduled(FCDBAS)) 
 		postpone(FSCDBAS, scheduled(FCDBAS)-game.state.date);
 	    if (damaged(DRADIO) && game.condit != IHDOCKED)
 		return; /* no warning */
-	    game.iseenit = 1;
+	    game.iseenit = true;
 	    if (*ipage == 0)  pause_game(1);
 	    *ipage=1;
 	    proutn(_("Lt. Uhura-  \"Captain, the starbase in "));
@@ -586,7 +583,6 @@
     crmena(true, IHT, sector, game.tholian);
     prout(_(" completes web."));
     game.ithere = false;
-    game.tholian.x = game.tholian.y = 0;
     game.nenhere--;
     return;
 }

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-20 04:35:23 UTC (rev 609)
+++ trunk/src/battle.c	2006-09-20 05:18:07 UTC (rev 610)
@@ -390,7 +390,6 @@
 	    if (h1 >= 600) {
 		game.quad[w.x][w.y] = IHDOT;
 		game.ithere = false;
-		game.tholian.x = game.tholian.y = 0;
 		deadkl(w, iquad, w);
 		return;
 	    }
@@ -403,7 +402,6 @@
 	    prout(_(" disappears."));
 	    game.quad[w.x][w.y] = IHWEB;
 	    game.ithere = false;
-	    game.tholian.x = game.tholian.y = 0;
 	    game.nenhere--;
 	    dropin(IHBLANK);
 	    return;
@@ -488,7 +486,7 @@
     if (game.ithere) movetho();
 
     if (game.neutz) { /* The one chance not to be attacked */
-	game.neutz = 0;
+	game.neutz = false;
 	return;
     }
     if ((((game.comhere || game.ishere) && !game.justin) || game.skill == SKILL_EMERITUS) && torps_ok) movcom();
@@ -645,7 +643,7 @@
 	game.klhere--;
 	switch (type) {
 	case IHC:
-	    game.comhere = 0;
+	    game.comhere = false;
 	    for_commanders (i)
 		if (game.state.kcmdr[i].x==game.quadrant.x && game.state.kcmdr[i].y==game.quadrant.y) break;
 	    game.state.kcmdr[i] = game.state.kcmdr[game.state.remcom];

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-20 04:35:23 UTC (rev 609)
+++ trunk/src/events.c	2006-09-20 05:18:07 UTC (rev 610)
@@ -141,9 +141,9 @@
 	    prout(_("Lt. Uhura- \"Captain, the sub-space radio is working and"));
 	    prout(_("   surveillance reports are coming in."));
 	    skip(1);
-	    if (game.iseenit==0) {
+	    if (!game.iseenit) {
 		attakreport(false);
-		game.iseenit = 1;
+		game.iseenit = true;
 	    }
 	    rechart();
 	    prout(_("   The star chart is now up to date.\""));
@@ -283,10 +283,10 @@
 	    if (game.isatb) /* extra time if SC already attacking */
 		postpone(FCDBAS, scheduled(FSCDBAS)-game.state.date);
 	    game.future[FBATTAK].date = game.future[FCDBAS].date + expran(0.3*game.intime);
-	    game.iseenit = 0;
+	    game.iseenit = false;
 	    if (!damaged(DRADIO) && game.condit != IHDOCKED) 
 		break; /* No warning :-( */
-	    game.iseenit = 1;
+	    game.iseenit = true;
 	    if (!ipage) pause_game(1);
 	    ipage = true;
 	    skip(1);

Modified: trunk/src/finish.c
===================================================================
--- trunk/src/finish.c	2006-09-20 04:35:23 UTC (rev 609)
+++ trunk/src/finish.c	2006-09-20 05:18:07 UTC (rev 610)
@@ -142,7 +142,7 @@
 			proutn(_("Do you want your Commodore Emeritus Citation printed? "));
 			chew();
 			if (ja() == true) {
-			    igotit = 1;
+			    igotit = true;
 			}
 		    }
 		}
@@ -152,7 +152,7 @@
 	    prout(_("LIVE LONG AND PROSPER."));
 	}
 	score();
-	if (igotit != 0) plaque();
+	if (igotit) plaque();
 	return;
     case FDEPLETE: // Federation Resources Depleted
 	prout(_("Your time has run out and the Federation has been"));

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-20 04:35:23 UTC (rev 609)
+++ trunk/src/moving.c	2006-09-20 05:18:07 UTC (rev 610)
@@ -233,11 +233,11 @@
     game.lsupres = game.inlsr;
     game.state.crew = FULLCREW;
     if (!damaged(DRADIO) &&
-	(is_scheduled(FCDBAS) || game.isatb == 1) && game.iseenit == 0) {
+	(is_scheduled(FCDBAS) || game.isatb == 1) && !game.iseenit) {
 	/* get attack report from base */
 	prout(_("Lt. Uhura- \"Captain, an important message from the starbase:\""));
 	attakreport(false);
-	game.iseenit = 1;
+	game.iseenit = true;
     }
 }
 
@@ -774,7 +774,8 @@
 void timwrp() 
 /* let's do the time warp again */
 {
-    int l, gotit;
+    int l;
+    bool gotit;
     prout(_("***TIME WARP ENTERED."));
     if (game.state.snap && Rand() < 0.5) {
 	/* Go back in time */
@@ -798,10 +799,10 @@
 
 	/* Make sure Galileo is consistant -- Snapshot may have been taken
 	   when on planet, which would give us two Galileos! */
-	gotit = 0;
+	gotit = false;
 	for (l = 0; l < game.inplan; l++) {
 	    if (game.state.plnets[l].known == shuttle_down) {
-		gotit = 1;
+		gotit = true;
 		if (game.iscraft==1 && game.ship==IHE) {
 		    prout(_("Checkov-  \"Security reports the Galileo has disappeared, Sir!"));
 		    game.iscraft = 0;
@@ -810,7 +811,7 @@
 	}
 	/* Likewise, if in the original time the Galileo was abandoned, but
 	   was on ship earlier, it would have vanished -- lets restore it */
-	if (game.iscraft==0 && gotit==0 && game.damage[DSHUTTL] >= 0.0) {
+	if (game.iscraft==0 && !gotit && game.damage[DSHUTTL] >= 0.0) {
 	    prout(_("Checkov-  \"Security reports the Galileo has reappeared in the dock!\""));
 	    game.iscraft = 1;
 	}

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-20 04:35:23 UTC (rev 609)
+++ trunk/src/reports.c	2006-09-20 05:18:07 UTC (rev 610)
@@ -75,7 +75,7 @@
 	/* Don't report this if not seen and
 	   either the radio is dead or not at base! */
 	attakreport(false);
-	game.iseenit = 1;
+	game.iseenit = true;
     }
     if (game.casual) prout(_("%d casualt%s suffered so far."),
 		      game.casual, game.casual==1? "y" : "ies");

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-20 04:35:23 UTC (rev 609)
+++ trunk/src/setup.c	2006-09-20 05:18:07 UTC (rev 610)
@@ -607,7 +607,7 @@
     game.justin = true;
     game.base.x = game.base.y = 0;
     game.klhere = 0;
-    game.comhere = 0;
+    game.comhere = false;
     game.plnet.x = game.plnet.y = 0;
     game.ishere = false;
     game.irhere = 0;
@@ -620,7 +620,7 @@
     game.ithere = false;
     iqhere = false;
     iqengry = false;
-    game.iseenit = 0;
+    game.iseenit = false;
     if (game.iscate) {
 	// Attempt to escape Super-commander, so tbeam back!
 	game.iscate = 0;
@@ -654,7 +654,7 @@
 	if (i <= game.state.remcom) {
 	    game.quad[w.x][w.y] = IHC;
 	    game.kpower[game.klhere] = 950.0+400.0*Rand()+50.0*game.skill;
-	    game.comhere = 1;
+	    game.comhere = true;
 	}
 
 	// If we need a super-commander, promote a Klingon
@@ -692,7 +692,7 @@
 
     // Check for RNZ
     if (game.irhere > 0 && game.klhere == 0 && (q->planet == NOPLANET || game.state.plnets[q->planet].inhabited == UNINHABITED)) {
-	game.neutz = 1;
+	game.neutz = true;
 	if (!damaged(DRADIO)) {
 	    skip(1);
 	    prout("LT. Uhura- \"Captain, an urgent message.");
@@ -735,8 +735,7 @@
 	    game.quad[game.tholian.x][game.tholian.y] = IHT;
 	    game.ithere = true;
 	    game.nenhere++;
-	    game.ks[game.nenhere].x = game.tholian.x;
-	    game.ks[game.nenhere].y = game.tholian.y;
+	    game.ks[game.nenhere] = game.tholian;
 	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] =
 		distance(game.sector, game.tholian);
 	    game.kpower[game.nenhere] = Rand()*400.0 +100.0 +25.0*game.skill;

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-20 04:35:23 UTC (rev 609)
+++ trunk/src/sst.c	2006-09-20 05:18:07 UTC (rev 610)
@@ -403,7 +403,7 @@
 	drawmaps(1);
 	for(;;)  { /* get a command */
 	    hitme = false;
-	    game.justin = 0;
+	    game.justin = false;
 	    game.optime = 0.0;
 	    i = -1;
 	    chew();

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-20 04:35:23 UTC (rev 609)
+++ trunk/src/sst.h	2006-09-20 05:18:07 UTC (rev 610)
@@ -212,6 +212,7 @@
 	alive,		// we are alive (not killed)
 	justin,		// just entered quadrant
 	shldup,		// shields are up
+	comhere,	// commander here
 	ishere,		// super-commander in quadrant
 	ientesc,	// attempted escape from supercommander
 	ithere,		// Tholian is here 
@@ -223,6 +224,7 @@
 	inorbit,	// orbiting a planet
 	imine,		// mining
 	icrystl,	// dilithium crystals aboard
+	iseenit,	// seen base attack report
 	thawed;		// thawed game
     int inkling,	// initial number of klingons
 	inbase,		// initial number of bases
@@ -238,7 +240,6 @@
 	length,		// length of game
 	skill,		// skill level
 	klhere,		// klingons here
-	comhere,	// commanders here
 	casual,		// causalties
 	nhelp,		// calls for help
 	nkinks,		// count of energy-barrier crossings
@@ -253,7 +254,6 @@
 	iscate,		// super commander is here
 	iattak,		// attack recursion elimination (was cracks[4])
 	tourn,		// tournament number
-	iseenit,	// seen base attack report
 	proben,		// number of moves for probe
 	nprobes;	// number of probes available
     double inresor,	// initial resources



From esr at mail.berlios.de  Wed Sep 20 07:31:22 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 20 Sep 2006 07:31:22 +0200
Subject: [Sst-commit-watch] r611 - trunk/src
Message-ID: <200609200531.k8K5VM2P022078@sheep.berlios.de>

Author: esr
Date: 2006-09-20 07:31:21 +0200 (Wed, 20 Sep 2006)
New Revision: 611

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/io.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.h
Log:
Change the condition field from an uint with #defines to an enum.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-20 05:18:07 UTC (rev 610)
+++ trunk/src/ai.c	2006-09-20 05:31:21 UTC (rev 611)
@@ -27,7 +27,7 @@
     /* print escape message and move out of quadrant.
        We know this if either short or long range sensors are working */
     if (!damaged(DSRSENS) || !damaged(DLRSENS) ||
-	game.condit == IHDOCKED) {
+	game.condition == docked) {
 	crmena(1, ienm, sector, game.ks[loccom]);
 	prout(_(" escapes to %s (and regains strength)."),
 	      cramlc(quadrant, iq));
@@ -40,7 +40,7 @@
     game.kdist[loccom] = game.kdist[game.nenhere];
     game.klhere--;
     game.nenhere--;
-    if (game.condit != IHDOCKED) newcnd();
+    if (game.condition != docked) newcnd();
     /* Handle global matters related to escape */
     game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons--;
     game.state.galaxy[iq.x][iq.y].klingons++;
@@ -85,7 +85,7 @@
 
     /* If SC, check with spy to see if should hi-tail it */
     if (ienm==IHS &&
-	(game.kpower[loccom] <= 500.0 || (game.condit==IHDOCKED && !damaged(DPHOTON)))) {
+	(game.kpower[loccom] <= 500.0 || (game.condition==docked && !damaged(DPHOTON)))) {
 	irun = true;
 	motion = -QUADSIZE;
     }
@@ -146,12 +146,12 @@
 	    forces += 1000.0;
 	}
 	motion = 0;
-	if (forces <= 1000.0 && game.condit != IHDOCKED) /* Typical situation */
+	if (forces <= 1000.0 && game.condition != docked) /* Typical situation */
 	    motion = ((forces+200.0*Rand())/150.0) - 5.0;
 	else {
 	    if (forces > 1000.0) /* Very strong -- move in for kill */
 		motion = (1.0-square(Rand()))*dist1 + 1.0;
-	    if (game.condit==IHDOCKED && (game.options & OPTION_BASE)) /* protected by base -- back off ! */
+	    if (game.condition==docked && (game.options & OPTION_BASE)) /* protected by base -- back off ! */
 		motion -= game.skill*(2.0-square(Rand()));
 	}
 	if (idebug)
@@ -239,7 +239,7 @@
 	/* it moved */
 	game.ks[loccom] = next;
 	game.kdist[loccom] = game.kavgd[loccom] = distance(game.sector, next);
-	if (!damaged(DSRSENS) || game.condit == IHDOCKED) {
+	if (!damaged(DSRSENS) || game.condition == docked) {
 	    proutn("***");
 	    cramen(ienm);
 	    proutn(_(" from %s"), cramlc(2, com));
@@ -324,7 +324,7 @@
 	game.kpower[i] = game.kpower[game.nenhere];
 	game.klhere--;
 	game.nenhere--;
-	if (game.condit!=IHDOCKED) newcnd();
+	if (game.condition!=docked) newcnd();
 	sortkl();
     }
     /* check for a helpful planet */
@@ -334,7 +334,7 @@
 	    /* destroy the planet */
 	    DESTROY(&game.state.plnets[i]);
 	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = NOPLANET;
-	    if (!damaged(DRADIO) || game.condit == IHDOCKED) {
+	    if (!damaged(DRADIO) || game.condition == docked) {
 		if (*ipage==0) pause_game(1);
 		*ipage = 1;
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"));
@@ -487,7 +487,7 @@
 	    schedule(FSCDBAS, 1.0 +2.0*Rand());
 	    if (is_scheduled(FCDBAS)) 
 		postpone(FSCDBAS, scheduled(FCDBAS)-game.state.date);
-	    if (damaged(DRADIO) && game.condit != IHDOCKED)
+	    if (damaged(DRADIO) && game.condition != docked)
 		return; /* no warning */
 	    game.iseenit = true;
 	    if (*ipage == 0)  pause_game(1);
@@ -510,7 +510,7 @@
     if (
 	!idebug &&
 	(Rand() > 0.2 ||
-	 (damaged(DRADIO) && game.condit != IHDOCKED) ||
+	 (damaged(DRADIO) && game.condition != docked) ||
 	 !game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].charted))
 	return;
     if (*ipage==0) pause_game(1);

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-20 05:18:07 UTC (rev 610)
+++ trunk/src/battle.c	2006-09-20 05:31:21 UTC (rev 611)
@@ -62,7 +62,7 @@
 	}
 	game.shldup = true;
 	game.shldchg = 1;
-	if (game.condit != IHDOCKED) game.energy -= 50.0;
+	if (game.condition != docked) game.energy -= 50.0;
 	prout(_("Shields raised."));
 	if (game.energy <= 0) {
 	    skip(1);
@@ -196,7 +196,7 @@
     if (fabs(deltay) > bigger) bigger = fabs(deltay);
     deltax /= bigger;
     deltay /= bigger;
-    if (!damaged(DSRSENS) || game.condit==IHDOCKED) 
+    if (!damaged(DSRSENS) || game.condition==docked) 
 	setwnd(srscan_window);
     else 
 	setwnd(message_window);
@@ -225,7 +225,7 @@
 	    *hit = fabs(*hit);
 	    newcnd(); /* we're blown out of dock */
 	    /* We may be displaced. */
-	    if (game.landed==1 || game.condit==IHDOCKED) return; /* Cheat if on a planet */
+	    if (game.landed==1 || game.condition==docked) return; /* Cheat if on a planet */
 	    ang = angle + 2.5*(Rand()-0.5);
 	    temp = fabs(sin(ang));
 	    if (fabs(cos(ang)) > temp) temp = fabs(cos(ang));
@@ -500,7 +500,7 @@
 	/* compute hit strength and diminsh shield power */
 	r = Rand();
 	/* Increase chance of photon torpedos if docked or enemy energy low */
-	if (game.condit == IHDOCKED) r *= 0.25;
+	if (game.condition == docked) r *= 0.25;
 	if (game.kpower[loop] < 500) r *= 0.25; 
 	jay = game.ks[loop];
 	iquad = game.quad[jay.x][jay.y];
@@ -512,7 +512,7 @@
 	    (iquad==IHQUEST && r > 0.05);
 	if (itflag) {
 	    /* Enemy uses phasers */
-	    if (game.condit == IHDOCKED) continue; /* Don't waste the effort! */
+	    if (game.condition == docked) continue; /* Don't waste the effort! */
 	    attempt = true; /* Attempt to attack */
 	    dustfac = 0.8+0.05*Rand();
 	    hit = game.kpower[loop]*pow(dustfac,game.kavgd[loop]);
@@ -537,9 +537,9 @@
 		return; /* Supernova or finished */
 	    if (hit == 0) continue;
 	}
-	if (game.shldup || game.shldchg != 0 || game.condit==IHDOCKED) {
+	if (game.shldup || game.shldchg != 0 || game.condition==docked) {
 	    /* shields will take hits */
-	    double absorb, hitsh, propor = pfac*game.shield*(game.condit==IHDOCKED ? 2.1 : 1.0);
+	    double absorb, hitsh, propor = pfac*game.shield*(game.condition==docked ? 2.1 : 1.0);
 	    if(propor < 0.1) propor = 0.1;
 	    hitsh = propor*chgfac*hit+1.0;
 	    atackd = true;
@@ -547,7 +547,7 @@
 	    if (absorb > game.shield) absorb = game.shield;
 	    game.shield -= absorb;
 	    hit -= hitsh;
-	    if (game.condit==IHDOCKED) dock(false);
+	    if (game.condition==docked) dock(false);
 	    if (propor > 0.1 && hit < 0.005*game.energy) continue;
 	}
 	/* It's a hit -- print out hit size */
@@ -570,7 +570,7 @@
 	hittot += hit;
 	fry(hit);
 	game.energy -= hit;
-	if (game.condit==IHDOCKED) 
+	if (game.condition==docked) 
 	    dock(false);
     }
     if (game.energy <= 0) {
@@ -578,7 +578,7 @@
 	finish(FBATTLE);
 	return;
     }
-    if (!attempt && game.condit == IHDOCKED)
+    if (!attempt && game.condition == docked)
 	prout(_("***Enemies decide against attacking your ship."));
     if (!atackd) return;
     percent = 100.0*pfac*game.shield+0.5;
@@ -674,7 +674,7 @@
 
     game.state.remtime = game.state.remres/(game.state.remkl + 4*game.state.remcom);
 
-    /* Remove enemy ship from arrays describing local game.conditions */
+    /* Remove enemy ship from arrays describing local conditions */
     if (is_scheduled(FCDBAS) && game.battle.x==game.quadrant.x && game.battle.y==game.quadrant.y && type==IHC)
 	unschedule(FCDBAS);
     for_local_enemies(i)
@@ -818,7 +818,7 @@
     /* Loop for moving <n> torpedoes */
     osuabor = false;
     for (i = 1; i <= n && !osuabor; i++) {
-	if (game.condit != IHDOCKED) game.torps--;
+	if (game.condition != docked) game.torps--;
 	r = (Rand()+Rand())*0.5 -0.5;
 	if (fabs(r) >= 0.47) {
 	    /* misfire! */
@@ -837,7 +837,7 @@
 		break;
 	    }
 	}
-	if (game.shldup || game.condit == IHDOCKED) 
+	if (game.shldup || game.condition == docked) 
 	    r *= 1.0 + 0.0001*game.shield;
 	torpedo(course[i], r, game.sector, &dummy, i, n);
 	if (game.alldone || game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova)
@@ -917,7 +917,7 @@
     skip(1);
     /* SR sensors and Computer */
     if (damaged(DSRSENS) || damaged(DCOMPTR)) ipoop = false;
-    if (game.condit == IHDOCKED) {
+    if (game.condition == docked) {
 	prout(_("Phasers can't be fired through base shields."));
 	chew();
 	return;

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-20 05:18:07 UTC (rev 610)
+++ trunk/src/events.c	2006-09-20 05:31:21 UTC (rev 611)
@@ -121,7 +121,7 @@
 	    return;
 	}
 	/* Is life support adequate? */
-	if (damaged(DLIFSUP) && game.condit != IHDOCKED) {
+	if (damaged(DLIFSUP) && game.condition != docked) {
 	    if (game.lsupres < xtime && game.damage[DLIFSUP] > game.lsupres) {
 		finish(FLIFESUP);
 		return;
@@ -131,7 +131,7 @@
 	}
 	/* Fix devices */
 	repair = xtime;
-	if (game.condit == IHDOCKED) repair /= game.docfac;
+	if (game.condition == docked) repair /= game.docfac;
 	/* Don't fix Deathray here */
 	for (l=0; l<NDEVICES; l++)
 	    if (game.damage[l] > 0.0 && l != DDRAY)
@@ -162,7 +162,7 @@
 	case FSPY: /* Check with spy to see if S.C. should tractor beam */
 	    if (game.state.nscrem == 0 ||
 		ictbeam || istract ||
-		game.condit==IHDOCKED || game.isatb==1 || game.iscate==1) return;
+		game.condition==docked || game.isatb==1 || game.iscate==1) return;
 	    if (game.ientesc ||
 		(game.energy < 2000 && game.torps < 4 && game.shield < 1250) ||
 		(damaged(DPHASER) && (damaged(DPHOTON) || game.torps < 4)) ||
@@ -183,7 +183,7 @@
 		}
 		i = Rand()*game.state.remcom+1.0;
 		yank = square(game.state.kcmdr[i].x-game.quadrant.x) + square(game.state.kcmdr[i].y-game.quadrant.y);
-		if (istract || game.condit == IHDOCKED || yank == 0) {
+		if (istract || game.condition == docked || yank == 0) {
 		    /* Drats! Have to reschedule */
 		    schedule(FTBEAM, 
 			     game.optime + expran(1.5*game.intime/game.state.remcom));
@@ -284,7 +284,7 @@
 		postpone(FCDBAS, scheduled(FSCDBAS)-game.state.date);
 	    game.future[FBATTAK].date = game.future[FCDBAS].date + expran(0.3*game.intime);
 	    game.iseenit = false;
-	    if (!damaged(DRADIO) && game.condit != IHDOCKED) 
+	    if (!damaged(DRADIO) && game.condition != docked) 
 		break; /* No warning :-( */
 	    game.iseenit = true;
 	    if (!ipage) pause_game(1);
@@ -333,7 +333,7 @@
 		prout(_("Spock-  \"Captain, I believe the starbase has been destroyed.\""));
 	    }
 	    else if (game.state.rembase != 1 &&
-		     (!damaged(DRADIO) || game.condit == IHDOCKED)) {
+		     (!damaged(DRADIO) || game.condition == docked)) {
 		/* Get word via subspace radio */
 		if (!ipage) pause_game(1);
 		ipage = true;
@@ -380,7 +380,7 @@
 		if (!VALID_QUADRANT(i, j) ||
 		    game.state.galaxy[game.probec.x][game.probec.y].supernova) {
 		    // Left galaxy or ran into supernova
-		    if (!damaged(DRADIO) || game.condit == IHDOCKED) {
+		    if (!damaged(DRADIO) || game.condition == docked) {
 			if (ipage==0) pause_game(1);
 			ipage = 1;
 			skip(1);
@@ -394,7 +394,7 @@
 		    unschedule(FDSPROB);
 		    break;
 		}
-		if (!damaged(DRADIO) || game.condit == IHDOCKED) {
+		if (!damaged(DRADIO) || game.condition == docked) {
 		    if (ipage==0) pause_game(1);
 		    ipage = 1;
 		    skip(1);
@@ -406,7 +406,7 @@
 	    pdest = &game.state.galaxy[game.probec.x][game.probec.y];
 	    /* Update star chart if Radio is working or have access to
 	       radio. */
-	    if (!damaged(DRADIO) || game.condit == IHDOCKED) {
+	    if (!damaged(DRADIO) || game.condition == docked) {
 		struct page *chp = &game.state.chart[game.probec.x][game.probec.y];
 
 		chp->klingons = pdest->klingons;
@@ -450,7 +450,7 @@
 	    q->status = distressed;
 
 	    /* tell the captain about it if we can */
-	    if (!damaged(DRADIO) || game.condit == IHDOCKED)
+	    if (!damaged(DRADIO) || game.condition == docked)
 	    {
 		prout("Uhura- Captain, %s in %s reports it is under attack",
 		      systemname(q->planet), cramlc(quadrant, w));
@@ -474,7 +474,7 @@
 	    ev2->quadrant = ev->quadrant;
 
 	    /* report the disaster if we can */
-	    if (!damaged(DRADIO) || game.condit == IHDOCKED)
+	    if (!damaged(DRADIO) || game.condition == docked)
 	    {
 		prout("Uhura- We've lost contact with starsystem %s",
 		      systemname(q->planet));
@@ -527,7 +527,7 @@
 	    /* recompute time left */
 	    game.state.remtime = game.state.remres/(game.state.remkl+4*game.state.remcom);
 	    /* report the disaster if we can */
-	    if (!damaged(DRADIO) || game.condit == IHDOCKED)
+	    if (!damaged(DRADIO) || game.condition == docked)
 	    {
 		if (same(game.quadrant, w)) {
 		    prout("Spock- sensors indicate the Klingons have");
@@ -592,7 +592,7 @@
 	if (game.alldone) return;
 	delay -= temp;
 	/* Repair Deathray if long rest at starbase */
-	if (origTime-delay >= 9.99 && game.condit == IHDOCKED)
+	if (origTime-delay >= 9.99 && game.condition == docked)
 	    game.damage[DDRAY] = 0.0;
     } while 
 	// leave if quadrant supernovas
@@ -819,7 +819,7 @@
 
     if (!same(nq, game.quadrant) || game.justin) {
 	/* it isn't here, or we just entered (treat as enroute) */
-	if (!damaged(DRADIO) || game.condit == IHDOCKED) {
+	if (!damaged(DRADIO) || game.condition == docked) {
 	    skip(1);
 	    prout(_("Message from Starfleet Command       Stardate %.2f"), game.state.date);
 	    prout(_("     Supernova in %s; caution advised."),
@@ -906,7 +906,7 @@
 	game.state.nplankl += npdead;
     }
     /* mark supernova in galaxy and in star chart */
-    if (same(game.quadrant, nq) || !damaged(DRADIO) || game.condit == IHDOCKED)
+    if (same(game.quadrant, nq) || !damaged(DRADIO) || game.condition == docked)
 	game.state.galaxy[nq.x][nq.y].supernova = true;
     /* If supernova destroys last Klingons give special message */
     if (KLINGREM==0 && !same(nq, game.quadrant)) {

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-09-20 05:18:07 UTC (rev 610)
+++ trunk/src/io.c	2006-09-20 05:31:21 UTC (rev 611)
@@ -397,7 +397,7 @@
 	    skip(1);
 	proutn("%d - %d   ", w.x, w.y);
     } else {
-	if (!damaged(DSRSENS) || game.condit==IHDOCKED) {
+	if (!damaged(DSRSENS) || game.condition==docked) {
 	    if (i != 1 && l == 1) {
 		drawmaps(2);
 		delay(400);

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-20 05:18:07 UTC (rev 610)
+++ trunk/src/moving.c	2006-09-20 05:31:21 UTC (rev 611)
@@ -33,7 +33,7 @@
     /* If tractor beam is to occur, don't move full distance */
     if (game.state.date+game.optime >= scheduled(FTBEAM)) {
 	trbeam = true;
-	game.condit = IHRED;
+	game.condition = red;
 	game.dist = game.dist*(scheduled(FTBEAM)-game.state.date)/game.optime + 0.1;
 	game.optime = scheduled(FTBEAM) - game.state.date + 1e-5;
     }
@@ -57,7 +57,7 @@
 			game.kavgd[m] = 0.5 * (finald + game.kdist[m]);
 		    }
 		    /*
-		     * Stas Sergeev added the game.condition
+		     * Stas Sergeev added the condition
 		     * that attacks only happen if Klingons
 		     * are present and your skill is good.
 		     */
@@ -211,7 +211,7 @@
 /* dock our ship at a starbase */
 {
     chew();
-    if (game.condit == IHDOCKED && verbose) {
+    if (game.condition == docked && verbose) {
 	prout(_("Already docked."));
 	return;
     }
@@ -224,7 +224,7 @@
 	prout(_(" not adjacent to base."));
 	return;
     }
-    game.condit = IHDOCKED;
+    game.condition = docked;
     if (verbose) prout(_("Docked."));
     game.ididit = true;
     if (game.energy < game.inenrg) game.energy = game.inenrg;
@@ -857,7 +857,7 @@
     if (is_scheduled(FDSPROB)) {
 	chew();
 	skip(1);
-	if (damaged(DRADIO) && game.condit != IHDOCKED) {
+	if (damaged(DRADIO) && game.condition != docked) {
 	    prout(_("Spock-  \"Records show the previous probe has not yet"));
 	    prout(_("   reached its destination.\""));
 	}
@@ -914,8 +914,8 @@
     int line = 0, m, ix, iy;
 
     chew();
-    /* Test for game.conditions which prevent calling for help */
-    if (game.condit == IHDOCKED) {
+    /* Test for conditions which prevent calling for help */
+    if (game.condition == docked) {
 	prout(_("Lt. Uhura-  \"But Captain, we're already docked.\""));
 	return;
     }

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-20 05:18:07 UTC (rev 610)
+++ trunk/src/planets.c	2006-09-20 05:31:21 UTC (rev 611)
@@ -235,7 +235,7 @@
     }
     if (game.energy >= 1000) {
 	prout(_("Spock-  \"Captain, Starfleet Regulations prohibit such an operation"));
-	prout(_("  except when condition Yellow exists."));
+	prout(_("  except when Condition Yellow exists."));
 	return;
     }
     prout(_("Spock- \"Captain, I must warn you that loading"));
@@ -306,7 +306,7 @@
 	prout(_("You will have to beam down to retrieve the shuttle craft."));
 	return;
     }
-    if (game.shldup || game.condit == IHDOCKED) {
+    if (game.shldup || game.condition == docked) {
 	prout(_("Shuttle craft cannot pass through shields."));
 	return;
     }

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-20 05:18:07 UTC (rev 610)
+++ trunk/src/reports.c	2006-09-20 05:31:21 UTC (rev 611)
@@ -71,7 +71,7 @@
 	prout(_(" destroyed, %d remaining."), game.state.rembase);
     }
     else prout(_("There are %d bases."), game.inbase);
-    if (!damaged(DRADIO) || game.condit == IHDOCKED || game.iseenit) {
+    if (!damaged(DRADIO) || game.condition == docked || game.iseenit) {
 	/* Don't report this if not seen and
 	   either the radio is dead or not at base! */
 	attakreport(false);
@@ -89,7 +89,7 @@
 	if (game.nprobes!=1) proutn(_("s"));
 	prout(".");
     }
-    if ((!damaged(DRADIO) || game.condit == IHDOCKED)
+    if ((!damaged(DRADIO) || game.condition == docked)
 		&& is_scheduled(FDSPROB)) {
 	if (game.isarmed) 
 	    proutn(_("An armed deep space probe is in"));
@@ -122,7 +122,7 @@
     chew();
     if (damaged(DLRSENS)) {
 	/* Now allow base's sensors if docked */
-	if (game.condit != IHDOCKED) {
+	if (game.condition != docked) {
 	    prout(_("LONG-RANGE SENSORS DAMAGED."));
 	    return;
 	}
@@ -198,7 +198,7 @@
     if (!damaged(DRADIO))
 	rechart();
 
-    if (game.lastchart < game.state.date && game.condit == IHDOCKED) {
+    if (game.lastchart < game.state.date && game.condition == docked) {
 	prout(_("Spock-  \"I revised the Star Chart from the starbase's records.\""));
 	rechart();
     }
@@ -241,12 +241,12 @@
 {
     if (goodScan || (abs(i-game.sector.x)<= 1 && abs(j-game.sector.y) <= 1)){
 	if ((game.quad[i][j]==IHMATER0)||(game.quad[i][j]==IHMATER1)||(game.quad[i][j]==IHMATER2)||(game.quad[i][j]==IHE)||(game.quad[i][j]==IHF)){
-	    switch (game.condit) {
-	    case IHRED: textcolor(RED); break;
-	    case IHGREEN: textcolor(GREEN); break;
-	    case IHYELLOW: textcolor(YELLOW); break;
-	    case IHDOCKED: textcolor(CYAN); break;
-	    case IHDEAD: textcolor(BROWN);
+	    switch (game.condition) {
+	    case red: textcolor(RED); break;
+	    case green: textcolor(GREEN); break;
+	    case yellow: textcolor(YELLOW); break;
+	    case docked: textcolor(CYAN); break;
+	    case dead: textcolor(BROWN);
 	    }
 	    if (game.quad[i][j] != game.ship) 
 		highvideo();
@@ -268,13 +268,13 @@
 	proutn(_("Stardate      %.1f, Time Left %.2f"), game.state.date, game.state.remtime);
 	break;
     case 2:
-	if (game.condit != IHDOCKED) newcnd();
-	switch (game.condit) {
-	case IHRED: cp = "RED"; break;
-	case IHGREEN: cp = "GREEN"; break;
-	case IHYELLOW: cp = "YELLOW"; break;
-	case IHDOCKED: cp = "DOCKED"; break;
-	case IHDEAD: cp="DEAD"; break;
+	if (game.condition != docked) newcnd();
+	switch (game.condition) {
+	case red: cp = "RED"; break;
+	case green: cp = "GREEN"; break;
+	case yellow: cp = "YELLOW"; break;
+	case docked: cp = "DOCKED"; break;
+	case dead: cp="DEAD"; break;
 	}
 	for (t=0;t<NDEVICES;t++)
 	    if (game.damage[t]>0) 
@@ -288,7 +288,7 @@
     case 4:
 	proutn(_("Life Support  "));
 	if (damaged(DLIFSUP)) {
-	    if (game.condit == IHDOCKED)
+	    if (game.condition == docked)
 		proutn(_("DAMAGED, Base provides"));
 	    else
 		proutn(_("DAMAGED, reserves=%4.2f"), game.lsupres);
@@ -350,7 +350,7 @@
     case SCAN_FULL: // SRSCAN
 	if (damaged(DSRSENS)) {
 	    /* Allow base's sensors if docked */
-	    if (game.condit != IHDOCKED) {
+	    if (game.condition != docked) {
 		prout(_("   S.R. SENSORS DAMAGED!"));
 		goodScan=false;
 	    }
@@ -393,7 +393,7 @@
 	leftside=false;
 	break;
     }
-    if (game.condit != IHDOCKED) newcnd();
+    if (game.condition != docked) newcnd();
     for (i = 1; i <= max(QUADSIZE, sizeof(requests)/sizeof(requests[0])); i++) {
 	jj = (req!=0 ? req : i);
 	if (leftside && i <= QUADSIZE) {

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-20 05:18:07 UTC (rev 610)
+++ trunk/src/setup.c	2006-09-20 05:31:21 UTC (rev 611)
@@ -121,7 +121,7 @@
     struct quadrant *q;
 
     chew();
-    if (game.condit==IHDOCKED) {
+    if (game.condition==docked) {
 	if (game.ship!=IHE) {
 	    prout("You cannot abandon Ye Faerie Queene.");
 	    return;
@@ -213,7 +213,7 @@
     game.imine = false;
     game.iscraft=0; /* Galileo disappears */
     /* Resupply ship */
-    game.condit=IHDOCKED;
+    game.condition=docked;
     for (l = 0; l < NDEVICES; l++) 
 	game.damage[l] = 0.0;
     game.damage[DSHUTTL] = -1;
@@ -579,11 +579,11 @@
 void newcnd(void)
 /* update our alert status */
 {
-    game.condit = IHGREEN;
-    if (game.energy < 1000.0) game.condit = IHYELLOW;
+    game.condition = green;
+    if (game.energy < 1000.0) game.condition = yellow;
     if (game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons || game.state.galaxy[game.quadrant.x][game.quadrant.y].romulans)
-	game.condit = IHRED;
-    if (!game.alive) game.condit=IHDEAD;
+	game.condition = red;
+    if (!game.alive) game.condition=dead;
 }
 
 coord newkling(int i)
@@ -684,7 +684,7 @@
 	else
 	    game.plnet = dropin(IHW);
     }
-    // Check for game.condition
+    // Check for condition
     newcnd();
     // And finally the stars
     for (i = 1; i <= q->stars; i++) 

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-20 05:18:07 UTC (rev 610)
+++ trunk/src/sst.h	2006-09-20 05:31:21 UTC (rev 611)
@@ -226,6 +226,13 @@
 	icrystl,	// dilithium crystals aboard
 	iseenit,	// seen base attack report
 	thawed;		// thawed game
+    enum {
+	green = 'G',
+	yellow = 'Y',
+	red = 'R',
+	docked = 'D',
+	dead = 'Z',
+    } condition;		// condition (red/yellow/green/docked)
     int inkling,	// initial number of klingons
 	inbase,		// initial number of bases
 	incom,		// initial number of commanders
@@ -233,7 +240,6 @@
 	inrom,		// initial number of commanders
 	instar,		// initial stars
 	intorps,	// initial/Max torpedoes
-	condit,		// condition (red/yellow/green/docked)
 	torps,		// number of torpedoes
 	ship,		// ship type -- 'E' is Enterprise
 	abandoned,	// count of crew abandoned in space
@@ -318,16 +324,10 @@
 #define IHF 'F'
 #define IHT 'T'
 #define IHWEB '#'
-#define IHGREEN 'G'
-#define IHYELLOW 'Y'
-#define IHRED 'R'
-#define IHDOCKED 'D'
-#define IHDEAD 'Z'
 #define IHMATER0 '-'
 #define IHMATER1 'o'
 #define IHMATER2 '0'
 
-
 /* Function prototypes */
 void prelim(void);
 void attack(bool);



From esr at mail.berlios.de  Wed Sep 20 08:25:58 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 20 Sep 2006 08:25:58 +0200
Subject: [Sst-commit-watch] r612 - trunk/src
Message-ID: <200609200625.k8K6PwgR024725@sheep.berlios.de>

Author: esr
Date: 2006-09-20 08:25:57 +0200 (Wed, 20 Sep 2006)
New Revision: 612

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/io.c
   trunk/src/moving.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
Replace more #defines with enums.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-20 05:31:21 UTC (rev 611)
+++ trunk/src/ai.c	2006-09-20 06:25:57 UTC (rev 612)
@@ -28,7 +28,7 @@
        We know this if either short or long range sensors are working */
     if (!damaged(DSRSENS) || !damaged(DLRSENS) ||
 	game.condition == docked) {
-	crmena(1, ienm, sector, game.ks[loccom]);
+	crmena(true, ienm, sector, game.ks[loccom]);
 	prout(_(" escapes to %s (and regains strength)."),
 	      cramlc(quadrant, iq));
     }
@@ -66,7 +66,7 @@
 }
 
 
-static void movebaddy(coord com, int loccom, int ienm)
+static void movebaddy(coord com, int loccom, feature ienm)
 /* tactical movement for the bad guys */
 {
     int motion, mdist, nsteps, mx, my, ll;
@@ -335,7 +335,7 @@
 	    DESTROY(&game.state.plnets[i]);
 	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = NOPLANET;
 	    if (!damaged(DRADIO) || game.condition == docked) {
-		if (*ipage==0) pause_game(1);
+		if (*ipage==0) pause_game(true);
 		*ipage = 1;
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"));
 		proutn(_("   a planet in "));
@@ -490,7 +490,7 @@
 	    if (damaged(DRADIO) && game.condition != docked)
 		return; /* no warning */
 	    game.iseenit = true;
-	    if (*ipage == 0)  pause_game(1);
+	    if (*ipage == 0)  pause_game(true);
 	    *ipage=1;
 	    proutn(_("Lt. Uhura-  \"Captain, the starbase in "));
 	    proutn(cramlc(quadrant, game.state.kscmdr));
@@ -513,7 +513,7 @@
 	 (damaged(DRADIO) && game.condition != docked) ||
 	 !game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].charted))
 	return;
-    if (*ipage==0) pause_game(1);
+    if (*ipage==0) pause_game(true);
     *ipage = 1;
     prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"));
     proutn(_("   the Super-commander is in "));

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-20 05:31:21 UTC (rev 611)
+++ trunk/src/battle.c	2006-09-20 06:25:57 UTC (rev 612)
@@ -1,6 +1,6 @@
 #include "sst.h"
 
-void doshield(int i) 
+void doshield(bool raise) 
 /* change shield status */
 {
     int key;
@@ -8,7 +8,8 @@
 
     game.ididit = false;
 
-    if (i == 2) action = SHUP;
+    if (raise) 
+	action = SHUP;
     else {
 	key = scan();
 	if (key == IHALPHA) {
@@ -130,10 +131,10 @@
     }
 }
 
-void ram(bool ibumpd, int ienm, coord w)
+void ram(bool ibumpd, feature ienm, coord w)
 /* make our ship ram something */
 {
-    double type = 1.0, extradm;
+    double hardness, extradm;
     int icas, m;
 	
     prouts(_("***RED ALERT!  RED ALERT!"));
@@ -143,11 +144,12 @@
     proutn("***");
     crmshp();
     switch (ienm) {
-    case IHR: type = 1.5; break;
-    case IHC: type = 2.0; break;
-    case IHS: type = 2.5; break;
-    case IHT: type = 0.5; break;
-    case IHQUEST: type = 4.0; break;
+    case IHR: hardness = 1.5; break;
+    case IHC: hardness = 2.0; break;
+    case IHS: hardness = 2.5; break;
+    case IHT: hardness = 0.5; break;
+    case IHQUEST: hardness = 4.0; break;
+    default: hardness = 1.0; break;
     }
     proutn(ibumpd ? _(" rammed by ") : _(" rams "));
     crmena(false, ienm, sector, w);
@@ -166,12 +168,12 @@
 	    continue; // Don't damage deathray 
 	if (game.damage[m] < 0) 
 	    continue;
-	extradm = (10.0*type*Rand()+1.0)*game.damfac;
+	extradm = (10.0*hardness*Rand()+1.0)*game.damfac;
 	game.damage[m] += game.optime + extradm; /* Damage for at least time of travel! */
     }
     game.shldup = false;
     if (KLINGREM) {
-	pause_game(2);
+	pause_game(true);
 	dreprt();
     }
     else finish(FWON);
@@ -613,7 +615,7 @@
     return;
 }
 		
-void deadkl(coord w, int type, coord mv)
+void deadkl(coord w, feature type, coord mv)
 /* kill a Klingon, Tholian, Romulan, or Thingy */
 {
     /* Added mv to allow enemy to "move" before dying */
@@ -664,6 +666,9 @@
 	    unschedule(FSCMOVE);
 	    unschedule(FSCDBAS);
 	    break;
+	default:	/* avoids a gcc warning */
+	    prout("*** Internal error, deadkl() called on %c\n", type);
+	    break;
 	}
     }
 

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-20 05:31:21 UTC (rev 611)
+++ trunk/src/events.c	2006-09-20 06:25:57 UTC (rev 612)
@@ -153,7 +153,7 @@
 	game.optime -= xtime;
 	switch (evcode) {
 	case FSNOVA: /* Supernova */
-	    if (!ipage) pause_game(1);
+	    if (!ipage) pause_game(true);
 	    ipage=true;
 	    snova(false, NULL);
 	    schedule(FSNOVA, expran(0.5*game.intime));
@@ -192,7 +192,7 @@
 	    }
 	    /* tractor beaming cases merge here */
 	    yank = sqrt(yank);
-	    if (!ipage) pause_game(1);
+	    if (!ipage) pause_game(true);
 	    ipage=true;
 	    game.optime = (10.0/(7.5*7.5))*yank; /* 7.5 is yank rate (warp 7.5) */
 	    ictbeam = 1;
@@ -224,7 +224,7 @@
 		game.quadrant = game.state.kscmdr;
 	    else
 		game.quadrant = game.state.kcmdr[i];
-	    game.sector = iran(QUADSIZE);
+	    game.sector = randplace(QUADSIZE);
 	    crmshp();
 	    proutn(_(" is pulled to "));
 	    proutn(cramlc(quadrant, game.quadrant));
@@ -236,7 +236,7 @@
 	    }
 	    if (!game.shldup) {
 		if (!damaged(DSHIELD) && game.shield > 0) {
-		    doshield(2); /* Shldsup */
+		    doshield(true); /* raise shields */
 		    game.shldchg=0;
 		}
 		else prout(_("(Shields not currently useable.)"));
@@ -287,7 +287,7 @@
 	    if (!damaged(DRADIO) && game.condition != docked) 
 		break; /* No warning :-( */
 	    game.iseenit = true;
-	    if (!ipage) pause_game(1);
+	    if (!ipage) pause_game(true);
 	    ipage = true;
 	    skip(1);
 	    proutn(_("Lt. Uhura-  \"Captain, the starbase in "));
@@ -335,7 +335,7 @@
 	    else if (game.state.rembase != 1 &&
 		     (!damaged(DRADIO) || game.condition == docked)) {
 		/* Get word via subspace radio */
-		if (!ipage) pause_game(1);
+		if (!ipage) pause_game(true);
 		ipage = true;
 		skip(1);
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Command reports that"));
@@ -381,7 +381,7 @@
 		    game.state.galaxy[game.probec.x][game.probec.y].supernova) {
 		    // Left galaxy or ran into supernova
 		    if (!damaged(DRADIO) || game.condition == docked) {
-			if (ipage==0) pause_game(1);
+			if (ipage==0) pause_game(true);
 			ipage = 1;
 			skip(1);
 			proutn(_("Lt. Uhura-  \"The deep space probe "));
@@ -395,7 +395,7 @@
 		    break;
 		}
 		if (!damaged(DRADIO) || game.condition == docked) {
-		    if (ipage==0) pause_game(1);
+		    if (ipage==0) pause_game(true);
 		    ipage = 1;
 		    skip(1);
 		    proutn(_("Lt. Uhura-  \"The deep space probe is now in "));
@@ -432,7 +432,7 @@
 		   which has some stars which are inhabited and
 		   not already under attack, which is not
 		   supernova'ed, and which has some Klingons in it */
-		w = iran(GALSIZE);
+		w = randplace(GALSIZE);
 		q = &game.state.galaxy[w.x][w.y];
 	    } while (--i &&
 		     (same(game.quadrant, w) || q->planet == NOPLANET ||

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-09-20 05:31:21 UTC (rev 611)
+++ trunk/src/io.c	2006-09-20 06:25:57 UTC (rev 612)
@@ -85,11 +85,11 @@
 	getch();
 }
 
-void pause_game(int i) 
+void pause_game(bool announcement) 
 {
     char *prompt;
     char buf[BUFSIZ];
-    if (i==1) {
+    if (announcement) {
 	if (game.skill > SKILL_FAIR)
 	    prompt = _("[ANOUNCEMENT ARRIVING...]");
 	else
@@ -115,7 +115,7 @@
 	putchar('\n');
 	proutn(prompt);
 	fgets(buf, sizeof(buf), stdin);
-	if (i != 0) {
+	if (announcement) {
 	    int j;
 	    for (j = 0; j < rows; j++)
 		putchar('\n');
@@ -130,7 +130,7 @@
     while (i-- > 0) {
 	if (game.options & OPTION_CURSES) {
 	    if (curwnd == message_window && linecount >= getmaxy(curwnd) - 3) {
-		pause_game(0);
+		pause_game(false);
 		clrscr();
 	    } else {
 		proutn("\n");
@@ -140,7 +140,7 @@
 	} else {
 	    linecount++;
 	    if (linecount >= rows)
-		pause_game(0);
+		pause_game(false);
 	    else
 		putchar('\n');
 	}

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-20 05:31:21 UTC (rev 611)
+++ trunk/src/moving.c	2006-09-20 06:25:57 UTC (rev 612)
@@ -9,7 +9,8 @@
 {
     double angle, deltax, deltay, bigger, x, y,
         finald, stopegy, probf;
-    int n, m, kink, kinks, iquad;
+    int n, m, kink, kinks;
+    feature iquad;
     coord w, final;
     bool trbeam = false;
 

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-20 05:31:21 UTC (rev 611)
+++ trunk/src/reports.c	2006-09-20 06:25:57 UTC (rev 612)
@@ -337,7 +337,7 @@
     }
 }
 		
-int srscan(int l)
+void srscan(scantype type)
 /* short-range scan */
 {
     /* the "sy" request is undocumented */
@@ -346,7 +346,7 @@
     
     int i, j, jj, req=0;
     int goodScan=true, leftside=true, rightside=true, title=false; 
-    switch (l) {
+    switch (type) {
     case SCAN_FULL: // SRSCAN
 	if (damaged(DSRSENS)) {
 	    /* Allow base's sensors if docked */
@@ -381,7 +381,7 @@
 	    prout(_("UNRECOGNIZED REQUEST. Legal requests are:"));
 	    prout(_("  date, condition, position, lsupport, warpfactor,"));
 	    prout(_("  energy, torpedoes, shields, klingons, time, system, bases."));
-	    return false;
+	    return;
 	}
 	// no break
     case SCAN_STATUS: // STATUS
@@ -405,11 +405,10 @@
 	if (rightside)
 	    status(jj);
 	if (i<sizeof(requests)/sizeof(requests[0])) skip(1);
-	if (req!=0) return(goodScan);
+	if (req!=0) return;
     }
     prout("");
     if (title) chart(true);
-    return(goodScan);
 }
 			
 			

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-20 05:31:21 UTC (rev 611)
+++ trunk/src/setup.c	2006-09-20 06:25:57 UTC (rev 612)
@@ -244,8 +244,8 @@
     game.shldup = false;
     game.inlsr = 4.0;
     game.lsupres = 4.0;
-    game.quadrant = iran(GALSIZE);
-    game.sector = iran(QUADSIZE);
+    game.quadrant = randplace(GALSIZE);
+    game.sector = randplace(QUADSIZE);
     game.torps = game.intorps = 10;
     game.nprobes = (int)(3.0*Rand() + 2.0);	/* Give them 2-4 of these wonders */
     game.warpfac = 5.0;
@@ -306,7 +306,7 @@
     for (i = 1; i <= game.inbase; i++) {
 	bool contflag;
 	do {
-	    do w = iran(GALSIZE);
+	    do w = randplace(GALSIZE);
 	    while (game.state.galaxy[w.x][w.y].starbase);
 	    contflag = false;
 	    for (j = i-1; j > 0; j--) {
@@ -339,7 +339,7 @@
 	int klump = (1.0 - r*r)*klumper;
 	if (klump > krem) klump = krem;
 	krem -= klump;
-	do w = iran(GALSIZE);
+	do w = randplace(GALSIZE);
 	while (game.state.galaxy[w.x][w.y].supernova ||
 		game.state.galaxy[w.x][w.y].klingons + klump > 9);
 	game.state.galaxy[w.x][w.y].klingons += klump;
@@ -358,7 +358,7 @@
 		}
 		else
 #endif /* ODEBUG */
-		    w = iran(GALSIZE);
+		    w = randplace(GALSIZE);
 	    }
 	    while ((!game.state.galaxy[w.x][w.y].klingons && Rand() < 0.75)||
 		   game.state.galaxy[w.x][w.y].supernova||
@@ -372,7 +372,7 @@
     }
     // Locate planets in galaxy
     for (i = 0; i < game.inplan; i++) {
-	do w = iran(GALSIZE); 
+	do w = randplace(GALSIZE); 
 	while (game.state.galaxy[w.x][w.y].planet != NOPLANET);
 	game.state.plnets[i].w = w;
 	if (i < NINHAB) {
@@ -391,19 +391,19 @@
     }
     // Locate Romulans
     for (i = 1; i <= game.state.nromrem; i++) {
-	w = iran(GALSIZE);
+	w = randplace(GALSIZE);
 	game.state.galaxy[w.x][w.y].romulans = 1;
     }
     // Locate the Super Commander
     if (game.state.nscrem > 0) {
-	do w = iran(GALSIZE);
+	do w = randplace(GALSIZE);
 	while (game.state.galaxy[w.x][w.y].supernova || game.state.galaxy[w.x][w.y].klingons > 8);
 	game.state.kscmdr = w;
 	game.state.galaxy[w.x][w.y].klingons++;
     }
     // Place thing (in tournament game, thingx == -1, don't want one!)
     if (thing.x != -1) {
-	thing = iran(GALSIZE);
+	thing = randplace(GALSIZE);
     }
     else {
 	thing.x = thing.y = 0;
@@ -566,11 +566,11 @@
     return false;
 }
 
-coord dropin(int iquad)
+coord dropin(feature iquad)
 /* drop a feature on a random dot in the current quadrant */
 {
     coord w;
-    do w = iran(QUADSIZE);
+    do w = randplace(QUADSIZE);
     while (game.quad[w.x][w.y] != IHDOT);
     game.quad[w.x][w.y] = iquad;
     return w;
@@ -707,7 +707,7 @@
 	// Put in THING if needed
 	if (same(thing, game.quadrant)) {
 	    w = dropin(IHQUEST);
-	    thing = iran(GALSIZE);
+	    thing = randplace(GALSIZE);
 	    game.nenhere++;
 	    iqhere=1;
 	    game.ks[game.nenhere] = w;

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-20 05:31:21 UTC (rev 611)
+++ trunk/src/sst.c	2006-09-20 06:25:57 UTC (rev 612)
@@ -460,7 +460,7 @@
 	    warp(false);
 	    break;
 	case SHIELDS:			// shields
-	    doshield(1);
+	    doshield(false);
 	    if (game.ididit) {
 		hitme=true;
 		game.shldchg = 0;
@@ -675,7 +675,7 @@
 }
 
 
-void cramen(int i) 
+void cramen(feature i) 
 /* print the name of an enemy */
 {
     /* return an enemy */
@@ -709,7 +709,7 @@
     return buf;
 }
 
-void crmena(bool stars, int enemy, enum loctype key, coord w) 
+void crmena(bool stars, feature enemy, enum loctype key, coord w) 
 /* print an enemy and his location */
 {
     if (stars) proutn("***");
@@ -747,7 +747,7 @@
     return rand()/(1.0 + (double)RAND_MAX);
 }
 
-coord iran(int size)
+coord randplace(int size)
 /* choose a random location */ 
 {
     coord w;
@@ -845,7 +845,7 @@
     prout("Beg your pardon, Captain?");
 }
 
-int isit(char *s) 
+bool isit(char *s) 
 /* compares s to citem and returns true if it matches to the length of s */
 {
     return strncasecmp(s, citem, max(1, strlen(citem))) == 0;

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-20 05:31:21 UTC (rev 611)
+++ trunk/src/sst.h	2006-09-20 06:25:57 UTC (rev 612)
@@ -58,6 +58,27 @@
 
 #define DESTROY(pl)	memset(pl, '\0', sizeof(planet))
 
+typedef enum {
+    IHR = 'R',
+    IHK = 'K',
+    IHC = 'C',
+    IHS = 'S',
+    IHSTAR = '*',
+    IHP = 'P',
+    IHW = '@',
+    IHB = 'B',
+    IHBLANK = ' ',
+    IHDOT = '.',
+    IHQUEST = '?',
+    IHE = 'E',
+    IHF = 'F',
+    IHT = 'T',
+    IHWEB = '#',
+    IHMATER0 = '-',
+    IHMATER1 = 'o',
+    IHMATER2 = '0',
+} feature;
+
 typedef struct {
     int snap,		// snapshot taken
 	crew,		// crew complement
@@ -193,7 +214,7 @@
     unsigned long options;
     snapshot state;
     snapshot snapsht;
-    char quad[QUADSIZE+1][QUADSIZE+1];		// contents of our quadrant
+    feature quad[QUADSIZE+1][QUADSIZE+1];		// contents of our quadrant
     double kpower[(QUADSIZE+1)*(QUADSIZE+1)];		// enemy energy levels
     double kdist[(QUADSIZE+1)*(QUADSIZE+1)];		// enemy distances
     double kavgd[(QUADSIZE+1)*(QUADSIZE+1)];		// average distances
@@ -227,11 +248,11 @@
 	iseenit,	// seen base attack report
 	thawed;		// thawed game
     enum {
-	green = 'G',
-	yellow = 'Y',
-	red = 'R',
-	docked = 'D',
-	dead = 'Z',
+	green,
+	yellow,
+	red,
+	docked,
+	dead,
     } condition;		// condition (red/yellow/green/docked)
     int inkling,	// initial number of klingons
 	inbase,		// initial number of bases
@@ -302,31 +323,22 @@
 extern coord thing;
 extern bool iqhere, iqengry;
 
-typedef enum {FWON, FDEPLETE, FLIFESUP, FNRG, FBATTLE,
-              FNEG3, FNOVA, FSNOVAED, FABANDN, FDILITHIUM,
-			  FMATERIALIZE, FPHASER, FLOST, FMINING, FDPLANET,
-			  FPNOVA, FSSC, FSTRACTOR, FDRAY, FTRIBBLE,
-	      FHOLE, FCREW} FINTYPE ;
+typedef enum {
+    FWON, FDEPLETE, FLIFESUP, FNRG, FBATTLE,
+    FNEG3, FNOVA, FSNOVAED, FABANDN, FDILITHIUM,
+    FMATERIALIZE, FPHASER, FLOST, FMINING, FDPLANET,
+    FPNOVA, FSSC, FSTRACTOR, FDRAY, FTRIBBLE,
+    FHOLE, FCREW
+} FINTYPE ;
+
 enum loctype {neither, quadrant, sector};
 
-#define IHR 'R'
-#define IHK 'K'
-#define IHC 'C'
-#define IHS 'S'
-#define IHSTAR '*'
-#define IHP 'P'
-#define IHW '@'
-#define IHB 'B'
-#define IHBLANK ' '
-#define IHDOT '.'
-#define IHQUEST '?'
-#define IHE 'E'
-#define IHF 'F'
-#define IHT 'T'
-#define IHWEB '#'
-#define IHMATER0 '-'
-#define IHMATER1 'o'
-#define IHMATER2 '0'
+typedef enum {
+    SCAN_FULL,
+    SCAN_REQUEST,
+    SCAN_STATUS,
+    SCAN_NO_LEFTSIDE,
+} scantype;
 
 /* Function prototypes */
 void prelim(void);
@@ -335,12 +347,12 @@
 void setup(bool);
 void score(void);
 void atover(bool);
-int srscan(int);
+void srscan(scantype);
 void lrscan(void);
 void phasers(void);
 void photon(void);
 void warp(bool);
-void doshield(int);
+void doshield(bool);
 void dock(bool);
 void dreprt(void);
 void chart(bool);
@@ -371,30 +383,30 @@
 void stars(void);
 void newqad(bool);
 bool ja(void);
-void cramen(int);
+void cramen(feature);
 void crmshp(void);
 char *cramlc(enum loctype, coord w);
 double expran(double);
 double Rand(void);
-coord iran(int);
-coord dropin(int);
+coord randplace(int);
+coord dropin(feature);
 void newcnd(void);
 void sortkl(void);
 void imove(void);
-void ram(bool, int, coord);
-void crmena(bool, int, enum loctype, coord w);
-void deadkl(coord, int, coord);
+void ram(bool, feature, coord);
+void crmena(bool, feature, enum loctype, coord w);
+void deadkl(coord, feature, coord);
 void timwrp(void);
 void movcom(void);
 void torpedo(double, double, coord, double *, int, int);
 void huh(void);
-void pause_game(int);
+void pause_game(bool);
 void nova(coord);
 void snova(bool, coord *);
 void scom(bool *);
 void hittem(double *);
 void prouts(char *, ...);
-int isit(char *);
+bool isit(char *);
 void preport(void);
 void orbit(void);
 void sensor(void);
@@ -422,12 +434,6 @@
 char *systemname(int);
 coord newkling(int);
 
-/* mode arguments for srscan() */
-#define SCAN_FULL		1
-#define SCAN_REQUEST		2
-#define SCAN_STATUS		3
-#define SCAN_NO_LEFTSIDE	4
-
 extern WINDOW *curwnd;
 extern WINDOW *fullscreen_window;
 extern WINDOW *srscan_window;
@@ -438,7 +444,7 @@
 
 extern void clreol(void);
 extern void clrscr(void);
-extern void textcolor(int color);
+extern void textcolor(int);
 extern void highvideo(void);
 
 enum COLORS {



From esr at mail.berlios.de  Wed Sep 20 10:55:42 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 20 Sep 2006 10:55:42 +0200
Subject: [Sst-commit-watch] r613 - trunk/src
Message-ID: <200609200855.k8K8tgu3006252@sheep.berlios.de>

Author: esr
Date: 2006-09-20 10:55:41 +0200 (Wed, 20 Sep 2006)
New Revision: 613

Modified:
   trunk/src/battle.c
   trunk/src/moving.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
BSD-Trek-like critical hits with weighting.


Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-20 06:25:57 UTC (rev 612)
+++ trunk/src/battle.c	2006-09-20 08:55:41 UTC (rev 613)
@@ -131,11 +131,66 @@
     }
 }
 
+static int randdevice(void)
+/* choose a device to damage, at random. */
+{
+    /*
+     * Quoth Eric Allman in the code of BSD-Trek:
+     * "Under certain conditions you can get a critical hit.  This
+     * sort of hit damages devices.  The probability that a given
+     * device is damaged depends on the device.  Well protected
+     * devices (such as the computer, which is in the core of the
+     * ship and has considerable redundancy) almost never get
+     * damaged, whereas devices which are exposed (such as the
+     * warp engines) or which are particularly delicate (such as
+     * the transporter) have a much higher probability of being
+     * damaged."
+     *
+     * This is one place where OPTION_PLAIN does not restore the
+     * original behavior, which was equiprobable damage across
+     * all devices.  If we wanted that, we'd return NDEVICES*Rand()
+     * and have done with it.  Also, in the original game, DNAVYS
+     * and DCOMPTR were the same device. 
+     *
+     * Instead, we use a table of weights similar to the one from BSD Trek.
+     * BSD doesn't have the shuttle, shield controller, death ray, or probes. 
+     * We don't have a cloaking device.  The shuttle got the allocation
+     * for the cloaking device, then we shaved a half-percent off
+     * everything to have some weight to give DSHCTRL/DDRAY/DDSP.
+     */
+    static int weights[NDEVICES] = {
+	105,	/* DSRSENS: short range scanners	10.5% */
+	105,	/* DLRSENS: long range scanners		10.5% */
+	120,	/* DPHASER: phasers			12.0% */
+	120,	/* DPHOTON: photon torpedoes		12.0% */
+	25,	/* DLIFSUP: life support		 2.5% */
+	65,	/* DWARPEN: warp drive			 6.5% */
+	70,	/* DIMPULS: impulse engines		 6.5% */
+	145,	/* DSHIELD: deflector shields		14.5% */
+	30,	/* DRADIO:  subspace radio		 3.0% */
+	45,	/* DSHUTTL: shuttle			 4.5% */
+	15,	/* DCOMPTR: computer			 1.5% */
+	20,	/* NAVCOMP: navigation system		 2.0% */
+	75,	/* DTRANSP: transporter			 7.5% */
+	20,	/* DSHCTRL: high-speed shield controller 2.0% */
+	10,	/* DDRAY: death ray			 1.0% */
+	30,	/* DDSP: deep-space probes		 3.0% */
+    };
+    int sum, i, idx = Rand() * 1000.0;	/* weights must sum to 1000 */
+
+    for (i = sum = 0; i < NDEVICES; i++) {
+	sum += weights[i];
+	if (idx < sum)
+	    return i;
+    }
+    return -1;	/* we should never get here, but this quiets GCC */
+}
+
 void ram(bool ibumpd, feature ienm, coord w)
 /* make our ship ram something */
 {
     double hardness, extradm;
-    int icas, m;
+    int icas, m, ncrits;
 	
     prouts(_("***RED ALERT!  RED ALERT!"));
     skip(1);
@@ -163,15 +218,22 @@
     prout(_("***Sickbay reports %d casualties"), icas);
     game.casual += icas;
     game.state.crew -= icas;
-    for (m=0; m < NDEVICES; m++) {
-	if (m == DDRAY) 
-	    continue; // Don't damage deathray 
-	if (game.damage[m] < 0) 
+    /*
+     * In the pre-SST2K version, all devices got equiprobably damaged,
+     * which was silly.  Instead, pick up to half the devices at
+     * random according to our weighting table,
+     */
+    ncrits = Rand() * (NDEVICES/2);
+    for (m=0; m < ncrits; m++) {
+	int dev = randdevice();
+	if (game.damage[dev] < 0) 
 	    continue;
 	extradm = (10.0*hardness*Rand()+1.0)*game.damfac;
-	game.damage[m] += game.optime + extradm; /* Damage for at least time of travel! */
+	/* Damage for at least time of travel! */
+	game.damage[dev] += game.optime + extradm;
     }
     game.shldup = false;
+    prout(_("***Shields are down."));
     if (KLINGREM) {
 	pause_game(true);
 	dreprt();
@@ -446,12 +508,12 @@
     ncrit = 1.0 + hit/(500.0+100.0*Rand());
     proutn(_("***CRITICAL HIT--"));
     /* Select devices and cause damage */
-    for (loop1 = 0; loop1 < ncrit && 0 < NDEVICES; loop1++) {
+    for (loop1 = 0; loop1 < ncrit; loop1++) {
 	do {
-	    j = NDEVICES*Rand();
+	    j = randdevice();
 	    /* Cheat to prevent shuttle damage unless on ship */
 	} while 
-	      (game.damage[j]<0.0 || (j==DSHUTTL && game.iscraft!=1) || j==DDRAY);
+	      (game.damage[j]<0.0 || (j==DSHUTTL && game.iscraft!=1));
 	cdam[loop1] = j;
 	extradm = (hit*game.damfac)/(ncrit*(75.0+25.0*Rand()));
 	game.damage[j] += extradm;
@@ -872,7 +934,7 @@
     int icas;
 	
     skip(1);
-    if (Rand() < .998) {
+    if (Rand() < 0.998) {
 	prout(_("Shields lowered."));
 	return false;
     }
@@ -915,13 +977,14 @@
 {
     double hits[21], rpow=0, extra, powrem, over, temp;
     int kz = 0, k=1, i, irec=0; /* Cheating inhibitor */
-    bool ifast = false, no = false, ipoop = true, msgflag = true;
+    bool ifast = false, no = false, itarg = true, msgflag = true;
     enum {NOTSET, MANUAL, FORCEMAN, AUTOMATIC} automode = NOTSET;
     int key=0;
 
     skip(1);
-    /* SR sensors and Computer */
-    if (damaged(DSRSENS) || damaged(DCOMPTR)) ipoop = false;
+    /* SR sensors and Computer are needed fopr automode */
+    if (damaged(DSRSENS) || damaged(DCOMPTR)) 
+	itarg = false;
     if (game.condition == docked) {
 	prout(_("Phasers can't be fired through base shields."));
 	chew();
@@ -964,7 +1027,7 @@
 		}
 	    }
 	    else if (isit("automatic")) {
-		if ((!ipoop) && game.nenhere != 0) {
+		if ((!itarg) && game.nenhere != 0) {
 		    automode = FORCEMAN;
 		}
 		else {
@@ -987,7 +1050,7 @@
 		prout(_("Energy will be expended into space."));
 		automode = AUTOMATIC;
 	    }
-	    else if (!ipoop)
+	    else if (!itarg)
 		automode = FORCEMAN;
 	    else
 		automode = AUTOMATIC;
@@ -998,7 +1061,7 @@
 		prout(_("Energy will be expended into space."));
 		automode = AUTOMATIC;
 	    }
-	    else if (!ipoop)
+	    else if (!itarg)
 		automode = FORCEMAN;
 	    else 
 		proutn(_("Manual or automatic? "));
@@ -1084,7 +1147,7 @@
 	chew();
 	key = IHEOL;
 	if (damaged(DCOMPTR))
-	    prout(_("Battle comuter damaged, manual file only."));
+	    prout(_("Battle computer damaged, manual file only."));
 	else {
 	    skip(1);
 	    prouts(_("---WORKING---"));
@@ -1118,7 +1181,7 @@
 	    }
 	    if (key == IHEOL) {
 		chew();
-		if (ipoop && k > kz)
+		if (itarg && k > kz)
 		    irec=(fabs(game.kpower[k])/(PHASEFAC*pow(0.9,game.kdist[k])))*
 			(1.01+0.05*Rand()) + 1.0;
 		kz = k;

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-20 06:25:57 UTC (rev 612)
+++ trunk/src/moving.c	2006-09-20 08:55:41 UTC (rev 613)
@@ -277,7 +277,7 @@
 	return;
     }
     while (navmode == unspecified) {
-	if (damaged(DCOMPTR)) {
+	if (damaged(DNAVSYS)) {
 	    if (isprobe)
 		prout(_("Computer damaged; manual navigation only"));
 	    else

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-20 06:25:57 UTC (rev 612)
+++ trunk/src/sst.c	2006-09-20 08:55:41 UTC (rev 613)
@@ -168,6 +168,11 @@
       worlds enabled, they must have one in the quadrant to beam down
       to; otherwise they die in space and this counts heavily against
       your score.  Docking at a starbase replenishes your crew.
+
+   8. Still more BSD-Trek: we now have a weighted damage table.
+      Also, the nav subsystem (enabling automatic course
+      setting) can be damaged separately from the main computer (which
+      handles weapons targeting, ETA calculation, and self-destruct).
 */
 
 /* the input queue */
@@ -196,6 +201,7 @@
 	"Subspace Radio",
 	"Shuttle Craft",
 	"Computer",
+	"Navigation System",
 	"Transporter",
 	"Shield Control",
 	"Death Ray",

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-20 06:25:57 UTC (rev 612)
+++ trunk/src/sst.h	2006-09-20 08:55:41 UTC (rev 613)
@@ -165,13 +165,14 @@
 #define DRADIO  8
 #define DSHUTTL 9
 #define DCOMPTR 10
-#define DTRANSP 11
-#define DSHCTRL 12
-#define DDRAY   13  // Added deathray
-#define DDSP    14  // Added deep space probe
-#define NDEVICES (15)	// Number of devices
+#define DNAVSYS	11
+#define DTRANSP 12
+#define DSHCTRL 13
+#define DDRAY   14
+#define DDSP    15
+#define NDEVICES (16)	// Number of devices
 
-#define damaged(dev)	game.damage[dev] != 0.0
+#define damaged(dev)	(game.damage[dev] != 0.0)
 
 #define FOREVER	1e30
 



From esr at mail.berlios.de  Wed Sep 20 11:45:17 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 20 Sep 2006 11:45:17 +0200
Subject: [Sst-commit-watch] r614 - in trunk: . doc src
Message-ID: <200609200945.k8K9jHPj010716@sheep.berlios.de>

Author: esr
Date: 2006-09-20 11:45:17 +0200 (Wed, 20 Sep 2006)
New Revision: 614

Modified:
   trunk/TODO
   trunk/doc/sst-doc.xml
   trunk/src/events.c
   trunk/src/moving.c
Log:
A bit of documentation swiped and edited from the BSD code.


Modified: trunk/TODO
===================================================================
--- trunk/TODO	2006-09-20 08:55:41 UTC (rev 613)
+++ trunk/TODO	2006-09-20 09:45:17 UTC (rev 614)
@@ -18,3 +18,18 @@
 * Wandering planet-killer as in "The Doomsday Machine";
   see <http://www.ericweisstein.com/fun/startrek/TheDoomsdayMachine.html>.
  
+BSD-Trek features we haven't swiped yet:
+
+* The cloaking device.
+
+* Summoning Klingons to surrender and taking captives.
+
+* Automatic bugout sets your warp factor to > 6.
+
+* Smarter computer, with multiple requests.
+
+* There is a small probility that a nova event will leave a black hole.
+
+* Multiple laser banks and beam spreading.
+
+* Visual scans for when sensors are out.

Modified: trunk/doc/sst-doc.xml
===================================================================
--- trunk/doc/sst-doc.xml	2006-09-20 08:55:41 UTC (rev 613)
+++ trunk/doc/sst-doc.xml	2006-09-20 09:45:17 UTC (rev 614)
@@ -1102,7 +1102,8 @@
 
 <para>You may self-destruct, thus killing yourself and ending the game.  If
 there are nearby Klingons, you may take a few of them with you (the
-more energy you have left, the bigger the bang).</para>
+more energy you have left, the bigger the bang). It is possible to
+win this way, if you kill off your last adversaries with the blast.</para>
 
 <para>In order to self-destruct you must remember the password you typed in
 at the beginning of the game.</para>

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-20 08:55:41 UTC (rev 613)
+++ trunk/src/events.c	2006-09-20 09:45:17 UTC (rev 614)
@@ -602,6 +602,14 @@
     game.optime = 0;
 }
 
+/*
+ *	A nova occurs.  It is the result of having a star hit with a
+ *	photon torpedo, or possibly of a probe warhead going off.
+ *	Stars that go nova cause stars which surround them to undergo
+ *	the same probabilistic process.  Klingons next to them are
+ *	destroyed.  And if the starship is next to it, it gets zapped.
+ *	If the zap is too much, it gets destroyed.
+ */
 void nova(coord nov) 
 /* star goes nova */
 {

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-20 08:55:41 UTC (rev 613)
+++ trunk/src/moving.c	2006-09-20 09:45:17 UTC (rev 614)
@@ -907,6 +907,26 @@
     return;
 }
 
+/*
+ *	Here's how the mayday code works:
+ *
+ *	First, the closest starbase is selected.  If there is a
+ *	a starbase in your own quadrant, you are in good shape.
+ *	This distance takes quadrant distances into account only.
+ *
+ *	A magic number is computed based on the distance which acts
+ *	as the probability that you will be rematerialized.  You
+ *	get three tries.
+ *
+ *	When it is determined that you should be able to be remater-
+ *	ialized (i.e., when the probability thing mentioned above
+ *	comes up positive), you are put into that quadrant (anywhere).
+ *	Then, we try to see if there is a spot adjacent to the star-
+ *	base.  If not, you can't be rematerialized!!!  Otherwise,
+ *	it drops you there.  It only tries five times to find a spot
+ *	to drop you.  After that, it's your problem.
+ */
+
 void mayday(void) 
 /* yell for help from nearest starbase */
 {



From esr at mail.berlios.de  Wed Sep 20 17:47:20 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 20 Sep 2006 17:47:20 +0200
Subject: [Sst-commit-watch] r615 - trunk/src
Message-ID: <200609201547.k8KFlK89010438@sheep.berlios.de>

Author: esr
Date: 2006-09-20 17:47:19 +0200 (Wed, 20 Sep 2006)
New Revision: 615

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/finish.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
Chase more booleans and enums.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-20 09:45:17 UTC (rev 614)
+++ trunk/src/ai.c	2006-09-20 15:47:19 UTC (rev 615)
@@ -46,7 +46,7 @@
     game.state.galaxy[iq.x][iq.y].klingons++;
     if (ienm==IHS) {
 	game.ishere = false;
-	game.iscate = 0;
+	game.iscate = false;
 	game.ientesc = false;
 	game.isatb = 0;
 	schedule(FSCMOVE, 0.2777);
@@ -310,7 +310,7 @@
     game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].klingons++;
     if (game.ishere) {
 	/* SC has scooted, Remove him from current quadrant */
-	game.iscate=0;
+	game.iscate=false;
 	game.isatb=0;
 	game.ishere = false;
 	game.ientesc = false;
@@ -335,8 +335,8 @@
 	    DESTROY(&game.state.plnets[i]);
 	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = NOPLANET;
 	    if (!damaged(DRADIO) || game.condition == docked) {
-		if (*ipage==0) pause_game(true);
-		*ipage = 1;
+		if (!*ipage) pause_game(true);
+		*ipage = true;
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"));
 		proutn(_("   a planet in "));
 		proutn(cramlc(quadrant, game.state.kscmdr));
@@ -363,7 +363,7 @@
     /* Decide on being active or passive */
     flag = ((NKILLC+NKILLK)/(game.state.date+0.01-game.indate) < 0.1*game.skill*(game.skill+1.0) ||
 	    (game.state.date-game.indate) < 3.0);
-    if (game.iscate==0 && flag) {
+    if (!game.iscate && flag) {
 	/* compute move away from Enterprise */
 	ideltax = game.state.kscmdr.x-game.quadrant.x;
 	ideltay = game.state.kscmdr.y-game.quadrant.y;
@@ -387,9 +387,9 @@
 	}
 	if (game.state.rembase > 1) {
 	    /* sort into nearest first order */
-	    int iswitch;
+	    bool iswitch;
 	    do {
-		iswitch = 0;
+		iswitch = false;
 		for (i=1; i < game.state.rembase-1; i++) {
 		    if (bdist[i] > bdist[i+1]) {
 			int ti = basetbl[i];
@@ -398,7 +398,7 @@
 			bdist[i+1] = t;
 			basetbl[i] = basetbl[i+1];
 			basetbl[i+1] =ti;
-			iswitch = 1;
+			iswitch = true;
 		    }
 		}
 	    } while (iswitch);
@@ -417,7 +417,7 @@
 	    /* if there is a commander, an no other base is appropriate,
 	       we will take the one with the commander */
 	    for_commanders (j) {
-		if (ibq.x==game.state.kcmdr[j].x && ibq.y==game.state.kcmdr[j].y && ifindit!= 2) {
+		if (same(ibq, game.state.kcmdr[j]) && ifindit!= 2) {
 		    ifindit = 2;
 		    iwhichb = i;
 		    break;
@@ -490,8 +490,8 @@
 	    if (damaged(DRADIO) && game.condition != docked)
 		return; /* no warning */
 	    game.iseenit = true;
-	    if (*ipage == 0)  pause_game(true);
-	    *ipage=1;
+	    if (!*ipage)  pause_game(true);
+	    *ipage = true;
 	    proutn(_("Lt. Uhura-  \"Captain, the starbase in "));
 	    proutn(cramlc(quadrant, game.state.kscmdr));
 	    skip(1);
@@ -513,8 +513,8 @@
 	 (damaged(DRADIO) && game.condition != docked) ||
 	 !game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].charted))
 	return;
-    if (*ipage==0) pause_game(true);
-    *ipage = 1;
+    if (!*ipage) pause_game(true);
+    *ipage = true;
     prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"));
     proutn(_("   the Super-commander is in "));
     proutn(cramlc(quadrant, game.state.kscmdr));

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-20 09:45:17 UTC (rev 614)
+++ trunk/src/battle.c	2006-09-20 15:47:19 UTC (rev 615)
@@ -62,7 +62,7 @@
 	    return;
 	}
 	game.shldup = true;
-	game.shldchg = 1;
+	game.shldchg = true;
 	if (game.condition != docked) game.energy -= 50.0;
 	prout(_("Shields raised."));
 	if (game.energy <= 0) {
@@ -79,7 +79,7 @@
 	    return;
 	}
 	game.shldup=false;
-	game.shldchg=1;
+	game.shldchg=true;
 	prout(_("Shields lowered."));
 	game.ididit = true;
 	return;
@@ -289,7 +289,8 @@
 	    *hit = fabs(*hit);
 	    newcnd(); /* we're blown out of dock */
 	    /* We may be displaced. */
-	    if (game.landed==1 || game.condition==docked) return; /* Cheat if on a planet */
+	    if (game.landed || game.condition==docked) 
+		return; /* Cheat if on a planet */
 	    ang = angle + 2.5*(Rand()-0.5);
 	    temp = fabs(sin(ang));
 	    if (fabs(cos(ang)) > temp) temp = fabs(cos(ang));
@@ -388,7 +389,7 @@
 	    game.iplnet = 0;
 	    game.plnet.x = game.plnet.y = 0;
 	    game.quad[w.x][w.y] = IHDOT;
-	    if (game.landed==1) {
+	    if (game.landed) {
 		/* captain perishes on planet */
 		finish(FDPLANET);
 	    }
@@ -402,7 +403,7 @@
 	    game.iplnet = 0;
 	    game.plnet.x = game.plnet.y = 0;
 	    game.quad[w.x][w.y] = IHDOT;
-	    if (game.landed==1) {
+	    if (game.landed) {
 		/* captain perishes on planet */
 		finish(FDPLANET);
 	    }
@@ -513,7 +514,7 @@
 	    j = randdevice();
 	    /* Cheat to prevent shuttle damage unless on ship */
 	} while 
-	      (game.damage[j]<0.0 || (j==DSHUTTL && game.iscraft!=1));
+	      (game.damage[j]<0.0 || (j==DSHUTTL && game.iscraft != onship));
 	cdam[loop1] = j;
 	extradm = (hit*game.damfac)/(ncrit*(75.0+25.0*Rand()));
 	game.damage[j] += extradm;
@@ -556,7 +557,7 @@
     if ((((game.comhere || game.ishere) && !game.justin) || game.skill == SKILL_EMERITUS) && torps_ok) movcom();
     if (game.nenhere==0 || (game.nenhere==1 && iqhere && !iqengry)) return;
     pfac = 1.0/game.inshld;
-    if (game.shldchg == 1) chgfac = 0.25+0.5*Rand();
+    if (game.shldchg) chgfac = 0.25+0.5*Rand();
     skip(1);
     if (game.skill <= SKILL_FAIR) where = sector;
     for_local_enemies(loop) {
@@ -601,7 +602,7 @@
 		return; /* Supernova or finished */
 	    if (hit == 0) continue;
 	}
-	if (game.shldup || game.shldchg != 0 || game.condition==docked) {
+	if (game.shldup || game.shldchg || game.condition==docked) {
 	    /* shields will take hits */
 	    double absorb, hitsh, propor = pfac*game.shield*(game.condition==docked ? 2.1 : 1.0);
 	    if(propor < 0.1) propor = 0.1;
@@ -724,7 +725,8 @@
 	case IHS:
 	    game.state.nscrem--;
 	    game.ishere = false;
-	    game.state.kscmdr.x = game.state.kscmdr.y = game.isatb = game.iscate = 0;
+	    game.state.kscmdr.x = game.state.kscmdr.y = game.isatb = 0;
+	    game.iscate = false;
 	    unschedule(FSCMOVE);
 	    unschedule(FSCDBAS);
 	    break;
@@ -1195,7 +1197,7 @@
 		key = scan();
 	    }
 	    if (key == IHALPHA && isit("no")) {
-		no = 1;
+		no = true;
 		key = scan();
 		continue;
 	    }

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-20 09:45:17 UTC (rev 614)
+++ trunk/src/events.c	2006-09-20 15:47:19 UTC (rev 615)
@@ -162,7 +162,7 @@
 	case FSPY: /* Check with spy to see if S.C. should tractor beam */
 	    if (game.state.nscrem == 0 ||
 		ictbeam || istract ||
-		game.condition==docked || game.isatb==1 || game.iscate==1) return;
+		game.condition==docked || game.isatb==1 || game.iscate) return;
 	    if (game.ientesc ||
 		(game.energy < 2000 && game.torps < 4 && game.shield < 1250) ||
 		(damaged(DPHASER) && (damaged(DPHOTON) || game.torps < 4)) ||
@@ -195,7 +195,7 @@
 	    if (!ipage) pause_game(true);
 	    ipage=true;
 	    game.optime = (10.0/(7.5*7.5))*yank; /* 7.5 is yank rate (warp 7.5) */
-	    ictbeam = 1;
+	    ictbeam = true;
 	    skip(1);
 	    proutn("***");
 	    crmshp();
@@ -208,13 +208,13 @@
 		return;
 	    }
 	    /* Check to see if shuttle is aboard */
-	    if (game.iscraft==0) {
+	    if (game.iscraft == offship) {
 		skip(1);
 		if (Rand() > 0.5) {
 		    prout(_("Galileo, left on the planet surface, is captured"));
 		    prout(_("by aliens and made into a flying McDonald's."));
 		    game.damage[DSHUTTL] = -10;
-		    game.iscraft = -1;
+		    game.iscraft = removed;
 		}
 		else {
 		    prout(_("Galileo, left on the planet surface, is well hidden."));
@@ -237,7 +237,7 @@
 	    if (!game.shldup) {
 		if (!damaged(DSHIELD) && game.shield > 0) {
 		    doshield(true); /* raise shields */
-		    game.shldchg=0;
+		    game.shldchg=false;
 		}
 		else prout(_("(Shields not currently useable.)"));
 	    }
@@ -250,7 +250,7 @@
 	    break;
 	case FSNAP: /* Snapshot of the universe (for time warp) */
 	    game.snapsht = game.state;
-	    game.state.snap = 1;
+	    game.state.snap = true;
 	    schedule(FSNAP, expran(0.5 * game.intime));
 	    break;
 	case FBATTAK: /* Commander attacks starbase */
@@ -365,7 +365,7 @@
 	case FSCMOVE: /* Supercommander moves */
 	    schedule(FSCMOVE, 0.2777);
 	    if (!game.ientesc && !istract && game.isatb != 1 &&
-			(game.iscate != 1 || !game.justin)) 
+			(!game.iscate || !game.justin)) 
 		scom(&ipage);
 	    break;
 	case FDSPROB: /* Move deep space probe */
@@ -381,8 +381,8 @@
 		    game.state.galaxy[game.probec.x][game.probec.y].supernova) {
 		    // Left galaxy or ran into supernova
 		    if (!damaged(DRADIO) || game.condition == docked) {
-			if (ipage==0) pause_game(true);
-			ipage = 1;
+			if (!ipage) pause_game(true);
+			ipage = true;
 			skip(1);
 			proutn(_("Lt. Uhura-  \"The deep space probe "));
 			if (!VALID_QUADRANT(j, i))
@@ -395,8 +395,8 @@
 		    break;
 		}
 		if (!damaged(DRADIO) || game.condition == docked) {
-		    if (ipage==0) pause_game(true);
-		    ipage = 1;
+		    if (!ipage) pause_game(true);
+		    ipage = true;
 		    skip(1);
 		    proutn(_("Lt. Uhura-  \"The deep space probe is now in "));
 		    proutn(cramlc(quadrant, game.probec));
@@ -677,7 +677,7 @@
 			prout(_(" destroyed."));
 			DESTROY(&game.state.plnets[game.iplnet]);
 			game.iplnet = game.plnet.x = game.plnet.y = 0;
-			if (game.landed == 1) {
+			if (game.landed) {
 			    finish(FPNOVA);
 			    return;
 			}
@@ -866,7 +866,8 @@
     game.state.galaxy[nq.x][nq.y].klingons = 0;
     if (same(nq, game.state.kscmdr)) {
 	/* did in the Supercommander! */
-	game.state.nscrem = game.state.kscmdr.x = game.state.kscmdr.y = game.isatb = game.iscate = 0;
+	game.state.nscrem = game.state.kscmdr.x = game.state.kscmdr.y = game.isatb =  0;
+	game.iscate = false;
 	unschedule(FSCMOVE);
 	unschedule(FSCDBAS);
     }

Modified: trunk/src/finish.c
===================================================================
--- trunk/src/finish.c	2006-09-20 09:45:17 UTC (rev 614)
+++ trunk/src/finish.c	2006-09-20 15:47:19 UTC (rev 615)
@@ -101,6 +101,8 @@
 		skip(1);
 		prout(_("In fact, you have done so well that Starfleet Command"));
 		switch (game.skill) {
+		case SKILL_NONE:
+		    break;	/* quiet gcc warning */
 		case SKILL_NOVICE:
 		    prout(_("promotes you one step in rank from \"Novice\" to \"Fair\"."));
 		    break;
@@ -167,7 +169,7 @@
 	else {
 	    prout(_("found guilty and"));
 	    prout(_("sentenced to death by slow torture."));
-	    game.alive = 0;
+	    game.alive = false;
 	}
 	score();
 	return;
@@ -286,7 +288,7 @@
     }
     if (game.ship==IHF) game.ship= 0;
     else if (game.ship == IHE) game.ship = IHF;
-    game.alive = 0;
+    game.alive = false;
     if (KLINGREM != 0) {
 	double goodies = game.state.remres/game.inresor;
 	double baddies = (game.state.remkl + 2.0*game.state.remcom)/(game.inkling+2.0*game.incom);
@@ -309,7 +311,7 @@
 	prout(_("martyr and a hero. Someday maybe they'll erect a"));
 	prout(_("statue in your memory. Rest in peace, and try not"));
 	prout(_("to think about pigeons."));
-	game.gamewon = 1;
+	game.gamewon = true;
     }
     score();
 }
@@ -329,11 +331,11 @@
     if (game.ship == IHE) klship = 0;
     else if (game.ship == IHF) klship = 1;
     else klship = 2;
-    if (game.gamewon == 0) game.state.nromrem = 0; // None captured if no win
+    if (!game.gamewon) game.state.nromrem = 0; // None captured if no win
     iscore = 10*NKILLK + 50*NKILLC + ithperd + iwon
 	- 100*game.state.basekl - 100*klship - 45*game.nhelp -5*game.state.starkl - game.casual
 	+ 20*NKILLROM + 200*NKILLSC - 10*game.state.nplankl - 300*game.state.nworldkl + game.state.nromrem;
-    if (game.alive == 0) iscore -= 200;
+    if (!game.alive) iscore -= 200;
     skip(2);
     prout(_("Your score --"));
     if (NKILLROM)
@@ -378,11 +380,12 @@
     if (klship)
 	prout(_("%6d ship(s) lost or destroyed          %5d"),
 	      klship, -100*klship);
-    if (game.alive==0)
+    if (!game.alive)
 	prout(_("Penalty for getting yourself killed        -200"));
     if (game.gamewon) {
 	proutn(_("Bonus for winning "));
 	switch (game.skill) {
+	case SKILL_NONE:     break;	/* quiet gcc warning */
 	case SKILL_NOVICE:   proutn(_("Novice game  ")); break;
 	case SKILL_FAIR:     proutn(_("Fair game    ")); break;
 	case SKILL_GOOD:     proutn(_("Good game    ")); break;

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-20 09:45:17 UTC (rev 614)
+++ trunk/src/moving.c	2006-09-20 15:47:19 UTC (rev 615)
@@ -268,7 +268,7 @@
 
     game.direc = -1.0;
 	
-    if (game.landed == 1 && !isprobe) {
+    if (game.landed && !isprobe) {
 	prout(_("Dummy! You can't leave standard orbit until you"));
 	proutn(_("are back aboard the "));
 	crmshp();
@@ -685,7 +685,7 @@
 
     chew();
     /* is captain on planet? */
-    if (game.landed==1) {
+    if (game.landed) {
 	if (damaged(DTRANSP)) {
 	    finish(FPNOVA);
 	    return;
@@ -783,7 +783,7 @@
 	prout(_("You are traveling backwards in time %d stardates."),
 	      (int)(game.state.date-game.snapsht.date));
 	game.state = game.snapsht;
-	game.state.snap = 0;
+	game.state.snap = false;
 	if (game.state.remcom) {
 	    schedule(FTBEAM, expran(game.intime/game.state.remcom));
 	    schedule(FBATTAK, expran(0.3*game.intime));
@@ -804,17 +804,17 @@
 	for (l = 0; l < game.inplan; l++) {
 	    if (game.state.plnets[l].known == shuttle_down) {
 		gotit = true;
-		if (game.iscraft==1 && game.ship==IHE) {
+		if (game.iscraft == onship && game.ship==IHE) {
 		    prout(_("Checkov-  \"Security reports the Galileo has disappeared, Sir!"));
-		    game.iscraft = 0;
+		    game.iscraft = offship;
 		}
 	    }
 	}
 	/* Likewise, if in the original time the Galileo was abandoned, but
 	   was on ship earlier, it would have vanished -- lets restore it */
-	if (game.iscraft==0 && !gotit && game.damage[DSHUTTL] >= 0.0) {
+	if (game.iscraft == offship && !gotit && game.damage[DSHUTTL] >= 0.0) {
 	    prout(_("Checkov-  \"Security reports the Galileo has reappeared in the dock!\""));
-	    game.iscraft = 1;
+	    game.iscraft = onship;
 	}
 	/* 
 	 * There used to be code to do the actual reconstrction here,
@@ -948,7 +948,7 @@
 	prout(_("Lt. Uhura-  \"Captain, I'm not getting any response from Starbase.\""));
 	return;
     }
-    if (game.landed == 1) {
+    if (game.landed) {
 	proutn(_("You must be aboard the "));
 	crmshp();
 	prout(".");
@@ -1022,7 +1022,7 @@
     }
     if (m > 3) {
 	game.quad[ix][iy]=IHQUEST;
-	game.alive = 0;
+	game.alive = false;
 	drawmaps(1);
 	setwnd(message_window);
 	finish(FMATERIALIZE);

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-20 09:45:17 UTC (rev 614)
+++ trunk/src/planets.c	2006-09-20 15:47:19 UTC (rev 615)
@@ -106,7 +106,7 @@
     skip(1);
     if (damaged(DTRANSP)) {
 	prout(_("Transporter damaged."));
-	if (!damaged(DSHUTTL) && (game.state.plnets[game.iplnet].known==shuttle_down || game.iscraft == 1)) {
+	if (!damaged(DSHUTTL) && (game.state.plnets[game.iplnet].known==shuttle_down || game.iscraft == onship)) {
 	    skip(1);
 	    proutn(_("Spock-  \"May I suggest the shuttle craft, Sir?\" "));
 	    if (ja() == true) shuttle();
@@ -128,7 +128,7 @@
 	prout(_("  you may not go down.\""));
 	return;
     }
-    if (game.landed==1) {
+    if (game.landed) {
 	/* Coming from planet */
 	if (game.state.plnets[game.iplnet].known==shuttle_down) {
 	    proutn(_("Spock-  \"Wouldn't you rather take the Galileo?\" "));
@@ -176,11 +176,11 @@
     prouts(".    .   .  .  .  .  .E.E.EEEERRRRRIIIIIOOOHWW");
     skip(2);
     prout(_("Transport complete."));
-    game.landed = -game.landed;
-    if (game.landed==1 && game.state.plnets[game.iplnet].known==shuttle_down) {
+    game.landed = !game.landed;
+    if (game.landed && game.state.plnets[game.iplnet].known==shuttle_down) {
 	prout(_("The shuttle craft Galileo is here!"));
     }
-    if (game.landed!=1 && game.imine) {
+    if (!game.landed && game.imine) {
 	game.icrystl = true;
 	game.cryprob = 0.05;
     }
@@ -193,7 +193,7 @@
 {
     skip(1);
     chew();
-    if (game.landed!= 1) {
+    if (!game.landed) {
 	prout(_("Mining party not on planet."));
 	return;
     }
@@ -298,11 +298,11 @@
 	prout(_(" not in standard orbit."));
 	return;
     }
-    if ((game.state.plnets[game.iplnet].known != shuttle_down) && game.iscraft != 1) {
+    if ((game.state.plnets[game.iplnet].known != shuttle_down) && game.iscraft != onship) {
 	prout(_("Shuttle craft not currently available."));
 	return;
     }
-    if (game.landed==-1 && game.state.plnets[game.iplnet].known==shuttle_down) {
+    if (!game.landed && game.state.plnets[game.iplnet].known==shuttle_down) {
 	prout(_("You will have to beam down to retrieve the shuttle craft."));
 	return;
     }
@@ -328,9 +328,9 @@
 	    return;
 	}
     }
-    if (game.landed == 1) {
+    if (game.landed) {
 	/* Kirk on planet */
-	if (game.iscraft==1) {
+	if (game.iscraft == onship) {
 	    /* Galileo on ship! */
 	    if (!damaged(DTRANSP)) {
 		proutn(_("Spock-  \"Would you rather use the transporter?\" "));
@@ -343,7 +343,7 @@
 	    else
 		proutn(_("Rescue party"));
 	    prout(_(" boards Galileo and swoops toward planet surface."));
-	    game.iscraft = 0;
+	    game.iscraft = offship;
 	    skip(1);
 	    if (consumeTime()) return;
 	    game.state.plnets[game.iplnet].known=shuttle_down;
@@ -359,9 +359,9 @@
 	    game.state.plnets[game.iplnet].known=known;
 	    game.icraft = true;
 	    skip(1);
-	    game.landed = -1;
+	    game.landed = false;
 	    if (consumeTime()) return;
-	    game.iscraft = 1;
+	    game.iscraft = onship;
 	    game.icraft = false;
 	    if (game.imine) {
 		game.icrystl = true;
@@ -381,10 +381,10 @@
 	prouts(_("The hangar doors open; the trip begins."));
 	skip(1);
 	game.icraft = true;
-	game.iscraft = 0;
+	game.iscraft = offship;
 	if (consumeTime()) return;
 	game.state.plnets[game.iplnet].known = shuttle_down;
-	game.landed = 1;
+	game.landed = true;
 	game.icraft = false;
 	prout(_("Trip complete"));
 	return;

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-20 09:45:17 UTC (rev 614)
+++ trunk/src/setup.c	2006-09-20 15:47:19 UTC (rev 615)
@@ -141,11 +141,11 @@
 	    prout("Shuttle craft damaged.");
 	    return;
 	}
-	if (game.landed==1) {
+	if (game.landed) {
 	    prout("You must be aboard the Enterprise.");
 	    return;
 	}
-	if (game.iscraft!=1) {
+	if (game.iscraft != onship) {
 	    prout("Shuttle craft not currently available.");
 	    return;
 	}
@@ -211,7 +211,7 @@
     prout("still useable.");
     if (game.icrystl) prout("The dilithium crystals have been moved.");
     game.imine = false;
-    game.iscraft=0; /* Galileo disappears */
+    game.iscraft = offship; /* Galileo disappears */
     /* Resupply ship */
     game.condition=docked;
     for (l = 0; l < NDEVICES; l++) 
@@ -240,7 +240,7 @@
     game.state.crew = FULLCREW;
     game.energy = game.inenrg = 5000.0;
     game.shield = game.inshld = 2500.0;
-    game.shldchg = 0;
+    game.shldchg = false;
     game.shldup = false;
     game.inlsr = 4.0;
     game.lsupres = 4.0;
@@ -256,12 +256,12 @@
     game.battle.x = game.battle.y = 0;
     game.state.date = game.indate = 100.0*(int)(31.0*Rand()+20.0);
     game.nkinks = game.nhelp = game.casual = game.abandoned = 0;
-    game.resting = game.imine = game.icrystl = game.icraft = false;
-    game.isatb = game.iscate = game.state.nplankl = 0;
+    game.iscate = game.resting = game.imine = game.icrystl = game.icraft = false;
+    game.isatb = game.state.nplankl = 0;
     game.state.starkl = game.state.basekl = 0;
-    game.iscraft = 1;
-    game.landed = -1;
-    game.alive = 1;
+    game.iscraft = onship;
+    game.landed = false;
+    game.alive = true;
     game.docfac = 0.25;
     for_quadrants(i)
 	for_quadrants(j) {
@@ -270,8 +270,8 @@
 	    quad->planet = NOPLANET;
 	    quad->romulans = 0;
 	    quad->klingons = 0;
-	    quad->starbase = 0;
-	    quad->supernova = 0;
+	    quad->starbase = false;
+	    quad->supernova = false;
 	    quad->status = secure;
 	}
     // Initialize times for extraneous events
@@ -326,8 +326,8 @@
 	} while (contflag);
 			
 	game.state.baseq[i] = w;
-	game.state.galaxy[w.x][w.y].starbase = 1;
-	game.state.chart[w.x][w.y].starbase = 1;
+	game.state.galaxy[w.x][w.y].starbase = true;
+	game.state.chart[w.x][w.y].starbase = true;
     }
     // Position ordinary Klingon Battle Cruisers
     krem = game.inkling;
@@ -405,13 +405,11 @@
     if (thing.x != -1) {
 	thing = randplace(GALSIZE);
     }
-    else {
+    else
 	thing.x = thing.y = 0;
-    }
 
-//	idate = date;
     skip(2);
-    game.state.snap = 0;
+    game.state.snap = false;
 		
     if (game.skill == SKILL_NOVICE) {
 	prout("It is stardate %d. The Federation is being attacked by",
@@ -615,7 +613,7 @@
     game.nenhere = 0;
     game.neutz = false;
     game.inorbit = false;
-    game.landed = -1;
+    game.landed = false;
     game.ientesc = false;
     game.ithere = false;
     iqhere = false;
@@ -623,7 +621,7 @@
     game.iseenit = false;
     if (game.iscate) {
 	// Attempt to escape Super-commander, so tbeam back!
-	game.iscate = 0;
+	game.iscate = false;
 	game.ientesc = true;
     }
     // Clear quadrant
@@ -661,7 +659,7 @@
 	if (same(game.quadrant, game.state.kscmdr)) {
 	    game.quad[game.ks[1].x][game.ks[1].y] = IHS;
 	    game.kpower[1] = 1175.0 + 400.0*Rand() + 125.0*game.skill;
-	    game.iscate = game.state.remkl>1;
+	    game.iscate = (game.state.remkl > 1);
 	    game.ishere = true;
 	}
     }
@@ -709,7 +707,7 @@
 	    w = dropin(IHQUEST);
 	    thing = randplace(GALSIZE);
 	    game.nenhere++;
-	    iqhere=1;
+	    iqhere = true;
 	    game.ks[game.nenhere] = w;
 	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] =
 		distance(game.sector, w);

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-20 09:45:17 UTC (rev 614)
+++ trunk/src/sst.c	2006-09-20 15:47:19 UTC (rev 615)
@@ -468,8 +468,8 @@
 	case SHIELDS:			// shields
 	    doshield(false);
 	    if (game.ididit) {
-		hitme=true;
-		game.shldchg = 0;
+		hitme = true;
+		game.shldchg = false;
 	    }
 	    break;
 	case DOCK:			// dock

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-20 09:45:17 UTC (rev 614)
+++ trunk/src/sst.h	2006-09-20 15:47:19 UTC (rev 615)
@@ -80,8 +80,8 @@
 } feature;
 
 typedef struct {
-    int snap,		// snapshot taken
-	crew,		// crew complement
+    bool snap;		// snapshot taken
+    int crew,		// crew complement
 #define FULLCREW	428	/* BSD Trek was 387, that's wrong */
 	remkl,			// remaining klingons
 	remcom,			// remaining commanders
@@ -112,7 +112,7 @@
     } galaxy[GALSIZE+1][GALSIZE+1]; 	// The Galaxy (subscript 0 not used)
     struct page {
 	int stars;
-	int starbase;
+	bool starbase;
 	int klingons;
     } chart[GALSIZE+1][GALSIZE+1]; 	// the starchart (subscript 0 not used)
 } snapshot;				// Data that is snapshot
@@ -128,13 +128,6 @@
 #define INKLINGTOT (game.inkling + game.incom + game.inscom)
 #define KLINGKILLED (INKLINGTOT - KLINGREM)
 
-#define SKILL_NONE	0
-#define SKILL_NOVICE	1
-#define SKILL_FAIR	2
-#define SKILL_GOOD	3
-#define SKILL_EXPERT	4
-#define SKILL_EMERITUS	5
-
 /* game options */
 #define OPTION_ALL	0xffffffff
 #define OPTION_TTY	0x00000001	/* old interface */
@@ -234,12 +227,15 @@
 	alive,		// we are alive (not killed)
 	justin,		// just entered quadrant
 	shldup,		// shields are up
+	shldchg,	// shield is changing (affects efficiency)
 	comhere,	// commander here
 	ishere,		// super-commander in quadrant
+	iscate,		// super commander is here
 	ientesc,	// attempted escape from supercommander
 	ithere,		// Tholian is here 
 	resting,	// rest time
 	icraft,		// Kirk in Galileo
+	landed,		// party on planet (true), on ship (false)
 	alldone,	// game is now finished
 	neutz,		// Romulan Neutral Zone
 	isarmed,	// probe is armed
@@ -255,31 +251,39 @@
 	docked,
 	dead,
     } condition;		// condition (red/yellow/green/docked)
+    enum {
+	onship,
+	offship,
+	removed,
+    } iscraft;		// 'onship' if craft on ship, 'removed' if out of game
+    enum {
+	SKILL_NONE,
+	SKILL_NOVICE,
+	SKILL_FAIR,
+	SKILL_GOOD,
+	SKILL_EXPERT,
+	SKILL_EMERITUS,
+    } skill;		// skill level
     int inkling,	// initial number of klingons
 	inbase,		// initial number of bases
 	incom,		// initial number of commanders
 	inscom,		// initial number of commanders
 	inrom,		// initial number of commanders
 	instar,		// initial stars
-	intorps,	// initial/Max torpedoes
+	intorps,	// initial/max torpedoes
 	torps,		// number of torpedoes
 	ship,		// ship type -- 'E' is Enterprise
 	abandoned,	// count of crew abandoned in space
 	length,		// length of game
-	skill,		// skill level
 	klhere,		// klingons here
 	casual,		// causalties
 	nhelp,		// calls for help
 	nkinks,		// count of energy-barrier crossings
-	shldchg,	// shield is changing (affects efficiency)
-	landed,		// party on planet (1), on ship (-1)
 	iplnet,		// planet # in quadrant
 	inplan,		// initial planets
 	nenhere,	// number of enemies in quadrant
 	irhere,		// Romulans in quadrant
-	iscraft,	// =1 if craft on ship, -1 if removed from game
 	isatb,		// =1 if super commander is attacking base
-	iscate,		// super commander is here
 	iattak,		// attack recursion elimination (was cracks[4])
 	tourn,		// tournament number
 	proben,		// number of moves for probe



From esr at mail.berlios.de  Wed Sep 20 18:29:49 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 20 Sep 2006 18:29:49 +0200
Subject: [Sst-commit-watch] r616 - in trunk: . doc src
Message-ID: <200609201629.k8KGTnE9013903@sheep.berlios.de>

Author: esr
Date: 2006-09-20 18:29:48 +0200 (Wed, 20 Sep 2006)
New Revision: 616

Modified:
   trunk/TODO
   trunk/doc/sst-doc.xml
   trunk/src/reports.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
Incorporate BSD-Trek visual-scan code, just in case.


Modified: trunk/TODO
===================================================================
--- trunk/TODO	2006-09-20 15:47:19 UTC (rev 615)
+++ trunk/TODO	2006-09-20 16:29:48 UTC (rev 616)
@@ -24,12 +24,9 @@
 
 * Summoning Klingons to surrender and taking captives.
 
-* Automatic bugout sets your warp factor to > 6.
-
 * Smarter computer, with multiple requests.
 
 * There is a small probility that a nova event will leave a black hole.
 
 * Multiple laser banks and beam spreading.
 
-* Visual scans for when sensors are out.

Modified: trunk/doc/sst-doc.xml
===================================================================
--- trunk/doc/sst-doc.xml	2006-09-20 15:47:19 UTC (rev 615)
+++ trunk/doc/sst-doc.xml	2006-09-20 16:29:48 UTC (rev 616)
@@ -411,6 +411,21 @@
 the contents of adjacent sectors.</para>
 
 </sect1>
+<!--
+<sect1><title>Visual Scan</title>
+
+<literallayout>
+Mnemonic:  VISUAL
+Shortest abbreviation: V
+</literallayout>
+
+<para>A visual scan is made in a particular direction of three sectors
+in the general direction specified.  This takes time, and Klingons can
+attack you, so it should be done only when short-range sensors are
+out.</para>
+
+</sect1>
+-->
 <sect1><title>Status Report</title>
 
 <literallayout>

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-20 15:47:19 UTC (rev 615)
+++ trunk/src/reports.c	2006-09-20 16:29:48 UTC (rev 616)
@@ -557,3 +557,74 @@
     }
 			
 }
+
+#if BSD_BUG_FOR_BUG
+/*
+ *	A visual scan is made in a particular direction of three sectors
+ *	in the general direction specified.  This takes time, and
+ *	Klingons can attack you, so it should be done only when sensors
+ * 	are out.  Code swiped from BSD-Trek.  Not presently used, as we
+ *	automatically display all adjacent sectors on the short-range
+ *	scan even when short-range sensors are out.
+ */
+
+/* This struct[] has the delta x, delta y for particular directions */
+coord visdelta[] =
+{
+    {-1,-1},
+    {-1, 0},
+    {-1, 1},
+    {0,	 1},
+    {1,	 1},
+    {1,	 0},
+    {1,	-1},
+    {0,	-1},
+    {-1,-1},
+    {-1, 0},
+    {-1, 1},
+};
+
+void visual(void)
+{
+    int		co, ix, iy;
+    coord	*v;
+
+    if (scan() != IHREAL) {
+	chew();
+	proutn(_("Direction? "));
+	if (scan()!=IHREAL) {
+	    huh();
+	    return;
+	}
+    }
+    if (aaitem < 0.0 || aaitem > 360.0)
+	return;
+    co = (aaitem + 22) / 45;
+    v = &visdelta[co];
+    ix = game.sector.x + v->x;
+    iy = game.sector.y + v->y;
+    if (ix < 0 || ix >= QUADSIZE || iy < 0 || iy >= QUADSIZE)
+	co = '?';
+    else
+	co = game.quad[ix][iy];
+    printf("%d,%d %c ", ix, iy, co);
+    v++;
+    ix = game.sector.x + v->x;
+    iy = game.sector.y + v->y;
+    if (ix < 0 || ix >= QUADSIZE || iy < 0 || iy >= QUADSIZE)
+	co = '?';
+    else
+	co = game.quad[ix][iy];
+    printf("%c ", co);
+    v++;
+    ix = game.sector.x + v->x;
+    iy = game.sector.y + v->y;
+    if (ix < 0 || ix >= QUADSIZE || iy < 0 || iy >= QUADSIZE)
+	co = '?';
+    else
+	co = game.quad[ix][iy];
+    printf("%c %d,%d\n", co, ix, iy);
+    game.optime = 0.5;
+    game.ididit = true;
+}
+#endif

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-20 15:47:19 UTC (rev 615)
+++ trunk/src/sst.c	2006-09-20 16:29:48 UTC (rev 616)
@@ -291,6 +291,10 @@
 	{"HELP",	HELP,		0},
 #define SEED	37
 	{"SEED",	SEED,		0},
+#if BSD_BUG_FOR_BUG
+#define VISUAL	38
+	{"VISUAL",	VISUAL,		0},
+#endif
 };
 
 #define NUMCOMMANDS	sizeof(commands)/sizeof(commands[0])
@@ -572,6 +576,11 @@
 	    if (key == IHREAL)
 		seed = (int)aaitem;
 	    break;
+#if BSD_BUG_FOR_BUG
+	case VISUAL:
+	    visual();			// perform visual scan
+	    break;
+#endif
 	}
 	commandhook(commands[i].name, false);
 	for (;;) {

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-20 15:47:19 UTC (rev 615)
+++ trunk/src/sst.h	2006-09-20 16:29:48 UTC (rev 616)
@@ -438,6 +438,9 @@
 void enqueue(char *);
 char *systemname(int);
 coord newkling(int);
+#if BSD_BUG_FOR_BUG
+void visual(void);
+#endif
 
 extern WINDOW *curwnd;
 extern WINDOW *fullscreen_window;



From stsp at mail.berlios.de  Wed Sep 20 18:42:37 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Wed, 20 Sep 2006 18:42:37 +0200
Subject: [Sst-commit-watch] r617 - in trunk: . po src
Message-ID: <200609201642.k8KGgb9m011254@sheep.berlios.de>

Author: stsp
Date: 2006-09-20 18:42:35 +0200 (Wed, 20 Sep 2006)
New Revision: 617

Modified:
   trunk/TODO
   trunk/po/POTFILES.in
   trunk/po/ru.po
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/io.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
- completed the first pass on the gettextization and translation
- better (IMHO) fix for the initialization of the gettextized string arrays
- do not clearscreen on exit to leave the "Galaxy Bird" message visible
- implemented scroll-pausing for "help"
- fixed enqueue() which didn't always work
- added IHW to cramen()

Modified: trunk/TODO
===================================================================
--- trunk/TODO	2006-09-20 16:29:48 UTC (rev 616)
+++ trunk/TODO	2006-09-20 16:42:35 UTC (rev 617)
@@ -4,20 +4,24 @@
 
 * Adjust the sst.spec wrt the build system changes
 
-* Maybe make a release
+* Complete, polish, improve, complete, polish, improve the
+  gettextization and the translation! Right now it just sucks.
 
+* Probably a separate window for status in ncurses mode
+  (right now status uses srscan window)
 
-Long-term items:
+* srscan() really needs to be restructured and cleaned up.
 
-* gettextize
 
-* Russian translation
+Long-term items:
 
 * Wrap a GUI around it.
 
 * Wandering planet-killer as in "The Doomsday Machine";
   see <http://www.ericweisstein.com/fun/startrek/TheDoomsdayMachine.html>.
  
+* Maybe make a release
+
 BSD-Trek features we haven't swiped yet:
 
 * The cloaking device.

Modified: trunk/po/POTFILES.in
===================================================================
--- trunk/po/POTFILES.in	2006-09-20 16:29:48 UTC (rev 616)
+++ trunk/po/POTFILES.in	2006-09-20 16:42:35 UTC (rev 617)
@@ -7,3 +7,5 @@
 src/moving.c
 src/planets.c
 src/reports.c
+src/setup.c
+src/sst.c

Modified: trunk/po/ru.po
===================================================================
--- trunk/po/ru.po	2006-09-20 16:29:48 UTC (rev 616)
+++ trunk/po/ru.po	2006-09-20 16:42:35 UTC (rev 617)
@@ -11,7 +11,7 @@
 msgstr ""
 "Project-Id-Version: sst 2.0\n"
 "Report-Msgid-Bugs-To: stsp\n"
-"POT-Creation-Date: 2006-09-19 17:25+0400\n"
+"POT-Creation-Date: 2006-09-20 20:41+0400\n"
 "PO-Revision-Date: 2006-09-15 11:01+0400\n"
 "Last-Translator: Stas Sergeev <stsp at aknet.ru>\n"
 "Language-Team: Russian <ru at li.org>\n"
@@ -21,814 +21,829 @@
 "Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%"
 "10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
 
-#: src/ai.c:31
+#: src/ai.c:32
 #, c-format
 msgid " escapes to %s (and regains strength)."
 msgstr " ??????? ? %s (? ??????????????? ???????)"
 
-#: src/ai.c:257
+#: src/ai.c:245
 #, c-format
 msgid " from %s"
 msgstr " ?? %s"
 
-#: src/ai.c:258
+#: src/ai.c:246
 msgid " advances to "
 msgstr " ????????? ? "
 
-#: src/ai.c:259
+#: src/ai.c:247
 msgid " retreats to "
 msgstr " ????????? ? "
 
-#: src/ai.c:352 src/ai.c:537
+#: src/ai.c:340 src/ai.c:518
 msgid "Lt. Uhura-  \"Captain, Starfleet Intelligence reports"
 msgstr "??. ?????- \"???????, ???????? ????????? ????? ???????????"
 
-#: src/ai.c:353
+#: src/ai.c:341
 msgid "   a planet in "
 msgstr "   ??????? ? "
 
-#: src/ai.c:355
+#: src/ai.c:343
 msgid " has been destroyed"
 msgstr " ??????????"
 
-#: src/ai.c:356
+#: src/ai.c:344
 msgid "   by the Super-commander.\""
 msgstr "   ????-?????."
 
-#: src/ai.c:512 src/events.c:240
+#: src/ai.c:495 src/events.c:293
 msgid "Lt. Uhura-  \"Captain, the starbase in "
 msgstr "??. ?????- \"???????, ???? ? "
 
-#: src/ai.c:515
+#: src/ai.c:498
 msgid "   reports that it is under attack from the Klingon Super-commander."
 msgstr "   ????????, ??? ??? ????????? ????-????? ?????????."
 
-#: src/ai.c:516
+#: src/ai.c:499
 #, c-format
 msgid "   It can survive until stardate %d.\""
 msgstr "   ??? ?????? ???????????? ?? ???? %d.\""
 
-#: src/ai.c:519 src/events.c:248
+#: src/ai.c:502 src/events.c:49
 msgid "Mr. Spock-  \"Captain, shall we cancel the rest period?\""
 msgstr "?????? ????- \"???????, ??? ???????? ??????\""
 
-#: src/ai.c:538
+#: src/ai.c:519
 msgid "   the Super-commander is in "
 msgstr "   ????-??? ????????? ? "
 
-#: src/ai.c:604
+#: src/ai.c:584
 msgid " completes web."
 msgstr " ??????? ????."
 
-#: src/battle.c:19 src/battle.c:35
+#: src/battle.c:21 src/battle.c:37
 msgid "Shields damaged and down."
 msgstr "?????? ??????? ? ?????."
 
-#: src/battle.c:29
+#: src/battle.c:31
 msgid "Do you wish to change shield energy? "
 msgstr "?? ?????? ???????? ??????? ??????? "
 
-#: src/battle.c:31 src/battle.c:87
+#: src/battle.c:33 src/battle.c:89
 msgid "Energy to transfer to shields- "
 msgstr "??????? ??? ????????? ????- "
 
-#: src/battle.c:39
+#: src/battle.c:41
 msgid "Shields are up. Do you want them down? "
 msgstr "?????? ???????. ?? ?????? ?? ?????? "
 
-#: src/battle.c:47
+#: src/battle.c:49
 msgid "Shields are down. Do you want them up? "
 msgstr "?????? ?????. ?? ?????? ?? ???????? "
 
-#: src/battle.c:59
+#: src/battle.c:61
 msgid "Shields already up."
 msgstr "?????? ? ??? ??? ???????."
 
-#: src/battle.c:65 src/battle.c:1175
+#: src/battle.c:67 src/battle.c:1262
 msgid "Shields raised."
 msgstr "?????? ???????."
 
-#: src/battle.c:68
+#: src/battle.c:70
 msgid "Shields raising uses up last of energy."
 msgstr "???????? ?????? ????????? ???? ??????? ???????."
 
-#: src/battle.c:76
+#: src/battle.c:78
 msgid "Shields already down."
 msgstr "?????? ? ??? ??? ?????."
 
-#: src/battle.c:81 src/battle.c:856
+#: src/battle.c:83 src/battle.c:940
 msgid "Shields lowered."
 msgstr "?????? ???????."
 
-#: src/battle.c:92
+#: src/battle.c:94
 msgid "Insufficient ship energy."
 msgstr "??????? ??????? ????????????."
 
-#: src/battle.c:97
+#: src/battle.c:99
 msgid "Shield energy maximized."
 msgstr "??????? ?????? ???????? ?????????."
 
-#: src/battle.c:99
+#: src/battle.c:101
 msgid "Excess energy requested returned to ship energy"
 msgstr "?????? ??????? ????????? ???????"
 
-#: src/battle.c:108 src/moving.c:525 src/moving.c:618
+#: src/battle.c:110 src/moving.c:526 src/moving.c:617
 msgid "Engineering to bridge--"
 msgstr "?????????? ????? ???????--"
 
-#: src/battle.c:109
+#: src/battle.c:111
 msgid "  Scott here. Power circuit problem, Captain."
 msgstr "  ??? ?????. ??? ???????? ? ?????????????? ????????, ???????."
 
-#: src/battle.c:110
+#: src/battle.c:112
 msgid "  I can't drain the shields."
 msgstr "  ? ?? ???? ???????? ??????? ?? ???????? ?????."
 
-#: src/battle.c:115
+#: src/battle.c:117
 msgid "All shield energy transferred to ship."
 msgstr "??? ??????? ?????? ???????????? ?? ???????."
 
-#: src/battle.c:120
+#: src/battle.c:122
 msgid "Scotty- \""
 msgstr "??????- \""
 
-#: src/battle.c:122
+#: src/battle.c:124
 msgid "Transferring energy to shields.\""
 msgstr "???????? ??????? ?? ??????.\""
 
-#: src/battle.c:124
+#: src/battle.c:126
 msgid "Draining energy from shields.\""
 msgstr "???????? ??????? ?? ??????.\""
 
-#: src/battle.c:137 src/battle.c:860 src/events.c:817 src/moving.c:141
-#: src/moving.c:724 src/planets.c:465
+#: src/battle.c:195 src/battle.c:944 src/events.c:852 src/moving.c:140
+#: src/moving.c:725 src/planets.c:458
 msgid "***RED ALERT!  RED ALERT!"
 msgstr "***???????!  ???????!"
 
-#: src/battle.c:139
+#: src/battle.c:197
 msgid "***COLLISION IMMINENT."
 msgstr "***????????? ????????????."
 
-#: src/battle.c:150
+#: src/battle.c:209
 msgid " rammed by "
 msgstr " ?????????? "
 
-#: src/battle.c:150
+#: src/battle.c:209
 msgid " rams "
 msgstr " ?????????? "
 
-#: src/battle.c:152
+#: src/battle.c:211
 msgid " (original position)"
 msgstr " (?????????????? ?????????)"
 
-#: src/battle.c:157
+#: src/battle.c:216
 msgid " heavily damaged."
 msgstr " ???????? ?????????."
 
-#: src/battle.c:159
+#: src/battle.c:218
 #, c-format
 msgid "***Sickbay reports %d casualties"
 msgstr "***?? ???????? ??????????? ? %d ????????????"
 
-#: src/battle.c:215
+#: src/battle.c:236
+#, fuzzy
+msgid "***Shields are down."
+msgstr "?????? ? ??? ??? ?????."
+
+#: src/battle.c:284
 msgid "Torpedo hits "
 msgstr "??????? ?????? ? ????: "
 
-#: src/battle.c:251
+#: src/battle.c:319
 msgid " uses anti-photon device;"
 msgstr " ?????????? ??????????????? ?????????;"
 
-#: src/battle.c:252
+#: src/battle.c:320
 msgid "   torpedo neutralized."
 msgstr "   ??????? ??????????????."
 
-#: src/battle.c:281 src/battle.c:291
+#: src/battle.c:349 src/battle.c:359
 msgid " damaged but not destroyed."
 msgstr " ?????????, ?? ?? ?????????."
 
-#: src/battle.c:285
+#: src/battle.c:353
 msgid " buffeted into black hole."
 msgstr " ??????? ? ?????? ????."
 
-#: src/battle.c:294
+#: src/battle.c:362
 msgid " damaged--"
 msgstr " ?????????--"
 
-#: src/battle.c:301
+#: src/battle.c:368
 msgid "***STARBASE DESTROYED.."
 msgstr "***???? ??????????.."
 
-#: src/battle.c:319 src/battle.c:660 src/events.c:622 src/events.c:642
+#: src/battle.c:385 src/battle.c:399 src/battle.c:740 src/events.c:677
+#: src/events.c:697
 msgid " destroyed."
 msgstr " ?????????."
 
-#: src/battle.c:337
+#: src/battle.c:410
+msgid "You have just destroyed an inhabited planet."
+msgstr "?? ?????? ??? ?????????? ????????? ???????."
+
+#: src/battle.c:411
+msgid "Celebratory rallies are being held on the Klingon homeworld."
+msgstr "?? ??????? ????????? ?????? ??????????? ????????????."
+
+#: src/battle.c:419
 msgid " unaffected by photon blast."
 msgstr " ?? ????????? ???????? ???????."
 
-#: src/battle.c:342
+#: src/battle.c:424
 msgid "AAAAIIIIEEEEEEEEAAAAAAAAUUUUUGGGGGHHHHHHHHHHHH!!!"
 msgstr "?????????????????????????????????????????????????????!!!"
 
-#: src/battle.c:344
+#: src/battle.c:426
 msgid "    HACK!     HACK!    HACK!        *CHOKE!*  "
 msgstr ""
 
-#: src/battle.c:346
+#: src/battle.c:428
 msgid "Mr. Spock-"
 msgstr "?????? ????-"
 
-#: src/battle.c:347
+#: src/battle.c:429
 msgid "  \"Fascinating!\""
 msgstr "  \"??????????!\""
 
-#: src/battle.c:363
+#: src/battle.c:445
 msgid " swallows torpedo."
 msgstr " ????????? ???????."
 
-#: src/battle.c:367
+#: src/battle.c:449
 msgid "***Torpedo absorbed by Tholian web."
 msgstr "***?????????? ???? ????????? ???????."
 
-#: src/battle.c:384
+#: src/battle.c:464
 msgid " survives photon blast."
 msgstr " ???????? ???????? ?????."
 
-#: src/battle.c:387
+#: src/battle.c:467
 msgid " disappears."
 msgstr " ?????."
 
-#: src/battle.c:414
+#: src/battle.c:489
 #, c-format
 msgid " displaced by blast to %s "
-msgstr " ????????? ??????? ?? %s "
+msgstr " ????????? ??????? ? %s "
 
-#: src/battle.c:421
+#: src/battle.c:496
 msgid "Torpedo missed."
 msgstr "??????? ?????????."
 
-#: src/battle.c:434
+#: src/battle.c:510
 msgid "***CRITICAL HIT--"
 msgstr "***??????????? ????--"
 
-#: src/battle.c:450
+#: src/battle.c:526
 msgid " and "
 msgstr " ? "
 
-#: src/battle.c:454
+#: src/battle.c:530
 msgid " damaged."
 msgstr " ?????????."
 
-#: src/battle.c:456
+#: src/battle.c:532
 msgid "***Shields knocked down."
 msgstr "***?????? ?????."
 
-#: src/battle.c:515
+#: src/battle.c:589
 msgid "***TORPEDO INCOMING"
 msgstr "***??????? ????????????"
 
-#: src/battle.c:517
+#: src/battle.c:591
 msgid " From "
 msgstr " ?? "
 
-#: src/battle.c:549
+#: src/battle.c:623
 #, c-format
 msgid "%d unit hit"
 msgstr "???? ?? %d ??????"
 
-#: src/battle.c:551
+#: src/battle.c:625
 msgid " on the "
 msgstr " ?? "
 
-#: src/battle.c:555
+#: src/battle.c:629
 msgid " from "
 msgstr " ?? "
 
-#: src/battle.c:573
+#: src/battle.c:647
 msgid "***Enemies decide against attacking your ship."
 msgstr "***????? ?????? ?? ????????? ??? ???????."
 
-#: src/battle.c:578
+#: src/battle.c:652
 msgid "Enemy attack reduces shield strength to "
 msgstr "????????? ????? ????????? ???? ?????? ?? "
 
-#: src/battle.c:583
+#: src/battle.c:657
 #, c-format
 msgid "Energy left %2d    shields "
 msgstr "??????? ???????: %2d    ?????? "
 
-#: src/battle.c:584
+#: src/battle.c:658
 msgid "up "
 msgstr "??????? "
 
-#: src/battle.c:585
+#: src/battle.c:659
 msgid "down "
 msgstr "????? "
 
-#: src/battle.c:586
+#: src/battle.c:660
 msgid "damaged, "
 msgstr "???????, "
 
-#: src/battle.c:588
+#: src/battle.c:662
 #, c-format
 msgid "%d%%,   torpedoes left %d"
 msgstr "%d%%,   ???????? %d ??????"
 
-#: src/battle.c:594
+#: src/battle.c:668
 #, c-format
 msgid "Mc Coy-  \"Sickbay to bridge.  We suffered %d casualties"
 msgstr "??????- \"??????? ???????.  ? ??? ????????? %d ????????????"
 
-#: src/battle.c:595
+#: src/battle.c:669
 msgid "   in that last attack.\""
 msgstr "   ?? ????????? ?????.\""
 
-#: src/battle.c:699
+#: src/battle.c:779
 msgid "Spock-  \"Bridge to sickbay.  Dr. McCoy,"
 msgstr "????- \"?????? ????????.  ?????? ??????,"
 
-#: src/battle.c:700
+#: src/battle.c:780
 msgid "  I recommend an immediate review of"
 msgstr "  ?????????? ?????????? ?????????"
 
-#: src/battle.c:701
+#: src/battle.c:781
 msgid "  the Captain's psychological profile.\""
 msgstr "  ??????????????? ????????? ????????.\""
 
-#: src/battle.c:718
+#: src/battle.c:800
 msgid "Photon tubes damaged."
 msgstr "???????? ????? ???????."
 
-#: src/battle.c:723
+#: src/battle.c:805
 msgid "No torpedoes left."
 msgstr "?????? ?????? ?? ????????."
 
-#: src/battle.c:734
+#: src/battle.c:816
 #, c-format
 msgid "%d torpedoes left."
 msgstr "???????? %d ??????."
 
-#: src/battle.c:735
+#: src/battle.c:817
 msgid "Number of torpedoes to fire- "
 msgstr "????? ?????? ?? ???????- "
 
-#: src/battle.c:746
+#: src/battle.c:828
 msgid "Maximum of 3 torpedoes per burst."
 msgstr "???????? 3 ??????? ?? ????."
 
-#: src/battle.c:787
+#: src/battle.c:869
 #, c-format
 msgid "Target sector for torpedo number %d- "
 msgstr "?????? ?????????? ??? ??????? ????? %d- "
 
-#: src/battle.c:814
+#: src/battle.c:896
 #, c-format
 msgid "***TORPEDO NUMBER %d MISFIRES"
 msgstr "***??????? ????? %d ?? ?????"
 
-#: src/battle.c:816
+#: src/battle.c:898
 msgid "***TORPEDO MISFIRES."
 msgstr "***??????? ?? ?????."
 
-#: src/battle.c:819
+#: src/battle.c:901
 msgid "  Remainder of burst aborted."
 msgstr "  ??????? ????? ???????."
 
-#: src/battle.c:822
+#: src/battle.c:904
 msgid "***Photon tubes damaged by misfire."
 msgstr "***???????? ????? ????????? ??? ??????."
 
-#: src/battle.c:843
+#: src/battle.c:926
 msgid "Weapons officer Sulu-  \"Phasers overheated, sir.\""
 msgstr "???????? ????- \"?????? ??????????, ???.\""
 
-#: src/battle.c:866
+#: src/battle.c:950
 msgid "Sulu-  \"Captain! Shield malf***********************\""
 msgstr "????- \"???????! ?????? ?? ????*********************\""
 
-#: src/battle.c:872
+#: src/battle.c:956
 msgid "Sulu-  \"Captain! Shield malfunction! Phaser fire contained!\""
 msgstr ""
 "????- \"???????! ?????? ?? ?????????! ??????? ??????? ????????? ??????!\""
 
-#: src/battle.c:874
+#: src/battle.c:958
 msgid "Lt. Uhura-  \"Sir, all decks reporting damage.\""
 msgstr "??. ?????- \"???, ??? ?????? ???????? ? ???????????.\""
 
-#: src/battle.c:880
+#: src/battle.c:964
 msgid "McCoy to bridge- \"Severe radiation burns, Jim."
 msgstr "?????? ???????- \"?????????? ???????????? ?????, ????."
 
-#: src/battle.c:881
+#: src/battle.c:965
 #, c-format
 msgid "  %d casualties so far.\""
 msgstr "  ????-??? %d ????????????.\""
 
-#: src/battle.c:885
+#: src/battle.c:970
 msgid "Phaser energy dispersed by shields."
 msgstr "??????? ??????? ???????? ???????? ?????."
 
-#: src/battle.c:886
+#: src/battle.c:971
 msgid "Enemy unaffected."
 msgstr "???? ?? ?????????."
 
-#: src/battle.c:904
+#: src/battle.c:991
 msgid "Phasers can't be fired through base shields."
 msgstr "?????? ?? ????? ???????? ????? ?????? ????."
 
-#: src/battle.c:909
+#: src/battle.c:996
 msgid "Phaser control damaged."
 msgstr "?????????? ???????? ?? ????????."
 
-#: src/battle.c:915
+#: src/battle.c:1002
 msgid "High speed shield control damaged."
 msgstr "???????????????? ?????????? ??????? ?? ????????."
 
-#: src/battle.c:920
+#: src/battle.c:1007
 msgid "Insufficient energy to activate high-speed shield control."
 msgstr "???????????? ??????? ??? ????????????????? ?????????? ???????."
 
-#: src/battle.c:924
+#: src/battle.c:1011
 msgid "Weapons Officer Sulu-  \"High-speed shield control enabled, sir.\""
 msgstr "???????? ????- \"???????????????? ?????????? ??????? ????????, ???.\""
 
-#: src/battle.c:934
+#: src/battle.c:1021
 msgid "There is no enemy present to select."
 msgstr "????? ??? ??????."
 
-#: src/battle.c:950 src/battle.c:965 src/battle.c:976
+#: src/battle.c:1037 src/battle.c:1052 src/battle.c:1063
 msgid "Energy will be expended into space."
 msgstr "??????? ????? ? ???????."
 
-#: src/battle.c:982
+#: src/battle.c:1069
 msgid "Manual or automatic? "
-msgstr "?????? ??? ???????????????"
+msgstr "?????? ??? ??????????????? "
 
-#: src/battle.c:993
+#: src/battle.c:1080
 #, c-format
 msgid "Phasers locked on target. Energy available: %.2f"
 msgstr "?????? ???????? ?? ????. ????????? ???????: %.2f"
 
-#: src/battle.c:1003
+#: src/battle.c:1090
 #, c-format
-msgid "(%d) units required. "
-msgstr ""
+msgid "%d units required. "
+msgstr "?????????? %d ??????. "
 
-#: src/battle.c:1005
+#: src/battle.c:1092
 msgid "Units to fire= "
 msgstr "??????? ?? ???????= "
 
-#: src/battle.c:1010 src/battle.c:1081
+#: src/battle.c:1097 src/battle.c:1168
 #, c-format
 msgid "Energy available= %.2f"
 msgstr "????????? ???????= %.2f"
 
-#: src/battle.c:1051
+#: src/battle.c:1138
 msgid "*** Tholian web absorbs "
 msgstr "*** ?????????? ???? ????????? "
 
-#: src/battle.c:1052
+#: src/battle.c:1139
 msgid "excess "
 msgstr "?????????? "
 
-#: src/battle.c:1053
+#: src/battle.c:1140
 msgid "phaser energy."
 msgstr "??????? ???????."
 
-#: src/battle.c:1056
+#: src/battle.c:1143
 #, c-format
 msgid "%d expended on empty space."
 msgstr "%d ???? ? ???????."
 
-#: src/battle.c:1065
-msgid "Battle comuter damaged, manual file only."
+#: src/battle.c:1152
+#, fuzzy
+msgid "Battle computer damaged, manual file only."
 msgstr "???????? ????????? ??????, ??????????? ?????? ??????????."
 
-#: src/battle.c:1068 src/finish.c:13
+#: src/battle.c:1155 src/finish.c:14
 msgid "---WORKING---"
 msgstr "---??????---"
 
-#: src/battle.c:1070
+#: src/battle.c:1157
 msgid "Short-range-sensors-damaged"
 msgstr "???????-????????-??????-???????"
 
-#: src/battle.c:1071
+#: src/battle.c:1158
 msgid "Insufficient-data-for-automatic-phaser-fire"
 msgstr "????????????-??????-???-???????????????-?????????-???????"
 
-#: src/battle.c:1072
+#: src/battle.c:1159
 msgid "Manual-fire-must-be-used"
 msgstr "???????????-??????-?????????"
 
-#: src/battle.c:1090
+#: src/battle.c:1177
 msgid " can't be located without short range scan."
 msgstr " ?? ????? ???? ????????? ??? ???????? ????????????."
 
-#: src/battle.c:1107
+#: src/battle.c:1194
 msgid "units to fire at "
 msgstr "??????? ?? ??????? ?? "
 
-#: src/battle.c:1137
+#: src/battle.c:1224
 msgid "Available energy exceeded -- try again."
 msgstr "????????? ??????? ?? ??????? -- ?????????? ?????."
 
-#: src/battle.c:1169
+#: src/battle.c:1256
 msgid "Sulu-  \"Sir, the high-speed shield control has malfunctioned . . ."
 msgstr "????- \"???, ???????????????? ?????????? ??????? ?? ????????? . . ."
 
-#: src/battle.c:1170
+#: src/battle.c:1257
 msgid "         CLICK   CLICK   POP  . . ."
 msgstr "         ????   ????   ????  . . ."
 
-#: src/battle.c:1171
+#: src/battle.c:1258
 msgid " No response, sir!"
-msgstr " ??? ??????, ???!"
+msgstr " ??? ???????, ???!"
 
-#: src/battle.c:1204
+#: src/battle.c:1292
 #, c-format
 msgid "%d unit hit on "
 msgstr "%d ?????? ??????? ??????? ?? "
 
-#: src/battle.c:1207
+#: src/battle.c:1295
 msgid "Very small hit on "
 msgstr "????? ?????? ???? ?? "
 
-#: src/battle.c:1221
+#: src/battle.c:1309
 msgid "***Mr. Spock-  \"Captain, the vessel at "
 msgstr "***?????? ????- \"???????, ??????? ?? "
 
-#: src/battle.c:1223
+#: src/battle.c:1311
 msgid "   has just lost its firepower.\""
 msgstr "   ??????? ??????????????.\""
 
-#: src/events.c:83
+#: src/events.c:141
 msgid "Lt. Uhura- \"Captain, the sub-space radio is working and"
 msgstr "??. ?????- \"???????, ??????????? ????? ???????? ?"
 
-#: src/events.c:84
+#: src/events.c:142
 msgid "   surveillance reports are coming in."
 msgstr "   ????????? ?????????? ?? ?????? ??????????."
 
-#: src/events.c:91
+#: src/events.c:149
 msgid "   The star chart is now up to date.\""
 msgstr "   ???????? ????? ?????????."
 
-#: src/events.c:144
+#: src/events.c:202
 msgid " caught in long range tractor beam--"
 msgstr " ?????? ???????????? ????????? ?????--"
 
-#: src/events.c:156
+#: src/events.c:214
 msgid "Galileo, left on the planet surface, is captured"
 msgstr "???????, ?????????? ?? ???????, ???????"
 
-#: src/events.c:157
+#: src/events.c:215
 msgid "by aliens and made into a flying McDonald's."
 msgstr "?????????????? ? ????????? ? ??????????? ???????????."
 
-#: src/events.c:162
+#: src/events.c:220
 msgid "Galileo, left on the planet surface, is well hidden."
 msgstr "???????, ?????????? ?? ???????, ?????? ???????."
 
-#: src/events.c:175
+#: src/events.c:229
 msgid " is pulled to "
 msgstr " ??????? ? "
 
-#: src/events.c:180
+#: src/events.c:234
 msgid "(Remainder of rest/repair period cancelled.)"
 msgstr "(??????? ??????? ??????/??????? ???????.)"
 
-#: src/events.c:188
+#: src/events.c:242
 msgid "(Shields not currently useable.)"
 msgstr "(?????? ? ????????? ?????????.)"
 
-#: src/events.c:242
+#: src/events.c:295
 msgid "   reports that it is under attack and that it can"
 msgstr "   ????????, ??? ??? ????????? ? ??????"
 
-#: src/events.c:243
+#: src/events.c:296
 #, c-format
 msgid "   hold out only until stardate %d"
 msgstr "   ???????????? ?? ???? %d.\""
 
-#: src/events.c:288
+#: src/events.c:333
 msgid "Spock-  \"Captain, I believe the starbase has been destroyed.\""
 msgstr "????- \"???????, ? ????????, ??? ???? ??????????.\""
 
-#: src/events.c:296
+#: src/events.c:341
 msgid "Lt. Uhura-  \"Captain, Starfleet Command reports that"
 msgstr "??. ?????- \"???????, ???? ????????? ????? ????????"
 
-#: src/events.c:297
+#: src/events.c:342
 msgid "   the starbase in "
 msgstr "   ???? ? "
 
-#: src/events.c:299
+#: src/events.c:344
 msgid " has been destroyed by"
 msgstr " ??????????"
 
-#: src/events.c:300
+#: src/events.c:346
 msgid "the Klingon Super-Commander"
 msgstr "????-????? ?????????"
 
-#: src/events.c:301
+#: src/events.c:347
 msgid "a Klingon Commander"
 msgstr "?????????? ?????????"
 
-#: src/events.c:344
+#: src/events.c:387
 msgid "Lt. Uhura-  \"The deep space probe "
 msgstr "??. ?????- \"???????????? ??????????? ?????? "
 
-#: src/events.c:346
+#: src/events.c:389
 msgid "has left the galaxy"
 msgstr "???????? ?????????"
 
-#: src/events.c:348
+#: src/events.c:391
 msgid "is no longer transmitting"
 msgstr "?????? ?? ????????"
 
-#: src/events.c:358
+#: src/events.c:401
 msgid "Lt. Uhura-  \"The deep space probe is now in "
 msgstr "??. ?????- \"???????????? ??????????? ?????? ?????? ? "
 
-#: src/events.c:511
+#: src/events.c:558
 msgid "How long? "
 msgstr "????? ????? "
 
-#: src/events.c:521
+#: src/events.c:568
 msgid "Are you sure? "
 msgstr "?? ???????? "
 
-#: src/events.c:531
+#: src/events.c:578
 #, c-format
 msgid "%d stardates left."
 msgstr "???????? %d ????."
 
-#: src/events.c:576 src/events.c:615
+#: src/events.c:631 src/events.c:670
 msgid " novas."
 msgstr " ??????????."
 
-#: src/events.c:647
+#: src/events.c:702
 msgid "***Starship buffeted by nova."
 msgstr "***????????? ????????? ??????? ??????."
 
-#: src/events.c:655
+#: src/events.c:710
 msgid "***Shields knocked out."
 msgstr "***?????? ???????."
 
-#: src/events.c:685
+#: src/events.c:740
 msgid " damaged"
 msgstr " ?????????"
 
-#: src/events.c:693
+#: src/events.c:748
 msgid ", blasted into "
 msgstr ", ?????????? ? "
 
-#: src/events.c:704
+#: src/events.c:759
 msgid ", buffeted to "
 msgstr " ??????? ? ?????? ????."
 
-#: src/events.c:733
+#: src/events.c:786
 msgid "Force of nova displaces starship."
 msgstr "????? ?????? ??????? ?????????."
 
-#: src/events.c:790
+#: src/events.c:832
 #, c-format
 msgid "Message from Starfleet Command       Stardate %.2f"
 msgstr "????????? ?? ????? ????????? ?????       ???? %.2f"
 
-#: src/events.c:791
+#: src/events.c:833
 #, c-format
 msgid "     Supernova in %s; caution advised."
 msgstr "     ????? ?????????? ? %s; ?????????? ????????????."
 
-#: src/events.c:820
+#: src/events.c:854
 msgid "***Incipient supernova detected at "
 msgstr "***???????????????? ????????? ?????????? ? "
 
-#: src/events.c:823
+#: src/events.c:856
 msgid "Emergency override attempts t"
 msgstr "????????? ???????? ?"
 
-#: src/events.c:893
+#: src/events.c:923
 msgid "Lucky you!"
 msgstr "???????!"
 
-#: src/events.c:894
+#: src/events.c:924
 #, c-format
 msgid "A supernova in %s has just destroyed the last Klingons."
 msgstr "?????????? ? %s ??? ??? ?????????? ????????? ?????????."
 
-#: src/finish.c:10
+#: src/finish.c:11
 msgid "Computer damaged; cannot execute destruct sequence."
 msgstr "????????? ??????; ?????????? ????????? ????????? ???????????????."
 
-#: src/finish.c:14
+#: src/finish.c:15
 msgid "SELF-DESTRUCT-SEQUENCE-ACTIVATED"
 msgstr "?????????-???????????????-????????"
 
-#: src/finish.c:21
+#: src/finish.c:22
 msgid "ENTER-CORRECT-PASSWORD-TO-CONTINUE-"
 msgstr "???????-??????-???-???????????-"
 
-#: src/finish.c:23
+#: src/finish.c:24
 msgid "SELF-DESTRUCT-SEQUENCE-OTHERWISE-"
 msgstr "???????????????-?-?????-"
 
-#: src/finish.c:25
+#: src/finish.c:26
 msgid "SELF-DESTRUCT-SEQUENCE-WILL-BE-ABORTED"
 msgstr "???????????????-?????-????????"
 
-#: src/finish.c:30
+#: src/finish.c:31
 msgid "PASSWORD-REJECTED;"
 msgstr "??????-??-??????"
 
-#: src/finish.c:32
+#: src/finish.c:33
 msgid "CONTINUITY-EFFECTED"
 msgstr "??????????-????"
 
-#: src/finish.c:36
+#: src/finish.c:37
 msgid "PASSWORD-ACCEPTED"
 msgstr "??????-??????"
 
-#: src/finish.c:43
+#: src/finish.c:44
 msgid "GOODBYE-CRUEL-WORLD"
 msgstr "??????-????????-???"
 
-#: src/finish.c:53
+#: src/finish.c:54
 msgid "********* Entropy of "
 msgstr "********* ???????? ??????? "
 
-#: src/finish.c:55
+#: src/finish.c:56
 msgid " maximized *********"
 msgstr " ???????? *********"
 
-#: src/finish.c:77
+#: src/finish.c:79
 #, c-format
 msgid "It is stardate %.1f."
 msgstr "??????? %.1f ?????."
 
-#: src/finish.c:82
+#: src/finish.c:84
 #, c-format
 msgid "The remaining %d Romulans surrender to Starfleet Command."
 msgstr "?????????? %d ??????? ??????? ????????? ?????."
 
-#: src/finish.c:85
+#: src/finish.c:87
 msgid "You have smashed the Klingon invasion fleet and saved"
 msgstr "?? ????????? ???? ????????????? ??????????? ? ??????"
 
-#: src/finish.c:86
+#: src/finish.c:88
 msgid "the Federation."
 msgstr "?????????."
 
-#: src/finish.c:100
+#: src/finish.c:102
 msgid "In fact, you have done so well that Starfleet Command"
 msgstr "?? ?????? ??????, ?? ??????????? ??? ?????, ??? ???? ????????? ?????"
 
-#: src/finish.c:103
+#: src/finish.c:107
 msgid "promotes you one step in rank from \"Novice\" to \"Fair\"."
-msgstr "???????? ??? ???? ?? ??????? ?? ??????????."
+msgstr "???????? ??? ???? ?? ??????? ?? ????????."
 
-#: src/finish.c:106
+#: src/finish.c:110
 msgid "promotes you one step in rank from \"Fair\" to \"Good\"."
-msgstr "???????? ??? ???? ?? ?????????? ?? ???????."
+msgstr "???????? ??? ???? ?? ???????? ?? ???????."
 
-#: src/finish.c:109
+#: src/finish.c:113
 msgid "promotes you one step in rank from \"Good\" to \"Expert\"."
 msgstr "???????? ??? ???? ?? ??????? ?? ???????????."
 
-#: src/finish.c:112
+#: src/finish.c:116
 msgid "promotes you to Commodore Emeritus."
 msgstr "???????? ??? ?? ????????? ?????????? ????????."
 
-#: src/finish.c:114
+#: src/finish.c:118
 msgid "Now that you think you're really good, try playing"
 msgstr "??????, ????? ?? ???????? ???? ??????? ???????, ??????????? ???????"
 
-#: src/finish.c:115
+#: src/finish.c:119
 msgid "the \"Emeritus\" game. It will splatter your ego."
 msgstr "?? \"Emeritus\". ??? ??????? ??? ???."
 
-#: src/finish.c:119
+#: src/finish.c:123
 msgid "Computer-  "
 msgstr "?????????-  "
 
-#: src/finish.c:120
+#: src/finish.c:124
 msgid "ERROR-ERROR-ERROR-ERROR"
 msgstr "????-????-????-??????"
 
-#: src/finish.c:122
+#: src/finish.c:126
 msgid "  YOUR-SKILL-HAS-EXCEEDED-THE-CAPACITY-OF-THIS-PROGRAM"
 msgstr "  ????-??????????-????????????-????-?????????"
 
-#: src/finish.c:124 src/finish.c:126 src/finish.c:128
+#: src/finish.c:128 src/finish.c:130 src/finish.c:132
 msgid "  THIS-PROGRAM-MUST-SURVIVE"
 msgstr ""
 
-#: src/finish.c:130
+#: src/finish.c:134
 msgid "  THIS-PROGRAM-MUST?- MUST ? - SUR? ? -?  VI"
 msgstr ""
 
-#: src/finish.c:132
+#: src/finish.c:136
 msgid "Now you can retire and write your own Star Trek game!"
 msgstr "?????? ?? ?????? ???? ?? ?????? ? ???????? ???? ???? Star Trek!"
 
@@ -888,7 +903,7 @@
 msgid "Your energy supply is exhausted."
 msgstr "????????? ??????? ???????."
 
-#: src/finish.c:187 src/finish.c:206 src/finish.c:225 src/moving.c:726
+#: src/finish.c:187 src/finish.c:206 src/finish.c:225 src/moving.c:727
 msgid "The "
 msgstr " "
 
@@ -974,11 +989,11 @@
 
 #: src/finish.c:235
 msgid "a wild jungle planet inhabited by primitive cannibals."
-msgstr "??????? ????? ????????, ?????????? ?????? ???????????."
+msgstr "??????? ????? ????????, ?????????? ???????????? ?????????."
 
 #: src/finish.c:237
 msgid "They are very fond of \"Captain Kirk\" soup."
-msgstr "??? ????? ????? \"???????????\" ???."
+msgstr "?? ????? ?????????? \"???????????\" ???."
 
 #: src/finish.c:239 src/finish.c:265
 msgid "Without your leadership, the "
@@ -1010,7 +1025,7 @@
 
 #: src/finish.c:258
 msgid "joins the Romulans, reigning terror on the Federation."
-msgstr "?????????????? ? ????????? ? ?????????? ?????? ?????????."
+msgstr "?????????????? ? ?????????, ???????? ?????? ?????????."
 
 #: src/finish.c:261
 msgid "The shuttle craft Galileo is also caught,"
@@ -1038,7 +1053,7 @@
 
 #: src/finish.c:275
 msgid "Tribbles consume all remaining water,"
-msgstr "??????? ?????? ??? ?????????? ????,"
+msgstr "??????? ?????? ??? ?????????? ????,"
 
 #: src/finish.c:276
 msgid "food, and oxygen on your ship."
@@ -1056,169 +1071,183 @@
 msgid "You are crushed into extremely dense matter."
 msgstr "??? ?????????? ?? ????????? ????????????? ????????."
 
-#: src/finish.c:293
+#: src/finish.c:286
+msgid "Your last crew member has died."
+msgstr "????????? ???? ????? ??????? ?????."
+
+#: src/finish.c:296
 msgid "As a result of your actions, a treaty with the Klingon"
 msgstr "? ?????????? ????? ????????, ? ???????? ?????????"
 
-#: src/finish.c:294
+#: src/finish.c:297
 msgid "Empire has been signed. The terms of the treaty are"
 msgstr "??????? ????????? ???????. ??????? ????? ????????"
 
-#: src/finish.c:296
+#: src/finish.c:299
 msgid "favorable to the Federation."
 msgstr "??????? ??? ?????????."
 
-#: src/finish.c:298
+#: src/finish.c:301
 msgid "Congratulations!"
 msgstr "???????????!"
 
-#: src/finish.c:301
+#: src/finish.c:304
 msgid "highly unfavorable to the Federation."
 msgstr "?????? ?? ??????? ??? ?????????."
 
-#: src/finish.c:304
+#: src/finish.c:307
 msgid "The Federation will be destroyed."
 msgstr "????????? ????????."
 
-#: src/finish.c:307
+#: src/finish.c:310
 msgid "Since you took the last Klingon with you, you are a"
 msgstr "????????? ?? ??????? ?? ??? ???? ?????????? ????????, ?? ??????"
 
-#: src/finish.c:308
+#: src/finish.c:311
 msgid "martyr and a hero. Someday maybe they'll erect a"
 msgstr "??????? ? ?????. ???????? ??????? ???? ????????"
 
-#: src/finish.c:309
+#: src/finish.c:312
 msgid "statue in your memory. Rest in peace, and try not"
 msgstr "?????? ? ???? ?????. ????????? ? ????? ? ???????????? ??"
 
-#: src/finish.c:310
+#: src/finish.c:313
 msgid "to think about pigeons."
 msgstr "?????? ? ???????."
 
-#: src/finish.c:336
+#: src/finish.c:340
 msgid "Your score --"
-msgstr "???? ???? --"
+msgstr "??? ???? --"
 
-#: src/finish.c:338
+#: src/finish.c:342
 #, c-format
 msgid "%6d Romulans destroyed                 %5d"
 msgstr "%6d ??????? ??????????                 %5d"
 
-#: src/finish.c:341
+#: src/finish.c:345
 #, c-format
 msgid "%6d Romulans captured                  %5d"
 msgstr "%6d ??????? ?????????                  %5d"
 
-#: src/finish.c:344
+#: src/finish.c:348
 #, c-format
 msgid "%6d ordinary Klingons destroyed        %5d"
 msgstr "%6d ??????? ????????? ??????????        %5d"
 
-#: src/finish.c:347
+#: src/finish.c:351
 #, c-format
 msgid "%6d Klingon commanders destroyed       %5d"
 msgstr "%6d ????????????? ?????????? ??????????       %5d"
 
-#: src/finish.c:350
+#: src/finish.c:354
 #, c-format
 msgid "%6d Super-Commander destroyed          %5d"
 msgstr "%6d ????-????? ??????????          %5d"
 
-#: src/finish.c:353
+#: src/finish.c:357
 #, c-format
 msgid "%6.2f Klingons per stardate              %5d"
 msgstr "%6.2f ????????? ? ????              %5d"
 
-#: src/finish.c:356
+#: src/finish.c:360
 #, c-format
 msgid "%6d stars destroyed by your action     %5d"
 msgstr "%6d ????? ??????????     %5d"
 
-#: src/finish.c:359
+#: src/finish.c:363
 #, c-format
 msgid "%6d planets destroyed by your action   %5d"
 msgstr "%6d ?????? ??????????   %5d"
 
-#: src/finish.c:362
+#: src/finish.c:366
 #, c-format
+msgid "%6d inhabited planets destroyed by your action   %5d"
+msgstr "%6d ????????? ?????? ??????????   %5d"
+
+#: src/finish.c:369
+#, c-format
 msgid "%6d bases destroyed by your action     %5d"
 msgstr "%6d ??? ??????????     %5d"
 
-#: src/finish.c:365
+#: src/finish.c:372
 #, c-format
 msgid "%6d calls for help from starbase       %5d"
 msgstr "%6d ????????? ?? ??????? ? ????       %5d"
 
-#: src/finish.c:368
+#: src/finish.c:375
 #, c-format
 msgid "%6d casualties incurred                %5d"
 msgstr "%6d ??????? ??????????                %5d"
 
-#: src/finish.c:371
+#: src/finish.c:378
 #, c-format
+msgid "%6d crew abandoned in space            %5d"
+msgstr "%6d ??????? ???????? ? ???????        %5d"
+
+#: src/finish.c:381
+#, c-format
 msgid "%6d ship(s) lost or destroyed          %5d"
 msgstr "%6d ???????(??) ????????          %5d"
 
-#: src/finish.c:374
+#: src/finish.c:384
 msgid "Penalty for getting yourself killed        -200"
 msgstr "???????? ?? ??????????? ??????        -200"
 
-#: src/finish.c:376
+#: src/finish.c:386
 msgid "Bonus for winning "
-msgstr "??????? ?? ?????? ? "
+msgstr "??????? ?? ?????? ? "
 
-#: src/finish.c:378
+#: src/finish.c:389
 msgid "Novice game  "
 msgstr "???? ???????  "
 
-#: src/finish.c:379
+#: src/finish.c:390
 msgid "Fair game    "
-msgstr "???? ??????????    "
+msgstr "???? ????????    "
 
-#: src/finish.c:380
+#: src/finish.c:391
 msgid "Good game    "
 msgstr "???? ???????    "
 
-#: src/finish.c:381
+#: src/finish.c:392
 msgid "Expert game  "
 msgstr "???? ???????????  "
 
-#: src/finish.c:382
+#: src/finish.c:393
 msgid "Emeritus game"
 msgstr "???? ?????????? ????????"
 
-#: src/finish.c:387
+#: src/finish.c:398
 #, c-format
 msgid "TOTAL SCORE                               %5d"
 msgstr "????? ????                               %5d"
 
-#: src/finish.c:400
+#: src/finish.c:413
 msgid "File or device name for your plaque: "
 msgstr "??? ????? ??? ?????????? ??? ???????: "
 
-#: src/finish.c:404
+#: src/finish.c:417
 msgid "Invalid name."
 msgstr "???????????? ???."
 
-#: src/finish.c:408
+#: src/finish.c:421
 msgid "Enter name to go on plaque (up to 30 characters): "
 msgstr "??????? ???? ??? ??? ??????? (?? 30 ??????): "
 
-#: src/finish.c:432
+#: src/finish.c:445
 #, c-format
 msgid ""
 "                                                       U. S. S. ENTERPRISE\n"
 msgstr "                                                       ??????????\n"
 
-#: src/finish.c:434
+#: src/finish.c:447
 #, c-format
 msgid ""
 "                                  For demonstrating outstanding ability as a "
 "starship captain\n"
 msgstr "                                  ?? ??????????? ???????\n"
 
-#: src/finish.c:436
+#: src/finish.c:449
 #, c-format
 msgid ""
 "                                                Starfleet Command bestows to "
@@ -1227,7 +1256,7 @@
 "                                                ???? ????????? ????? "
 "??????????? ???\n"
 
-#: src/finish.c:439
+#: src/finish.c:452
 #, c-format
 msgid ""
 "                                                           the rank of\n"
@@ -1236,7 +1265,7 @@
 "                                                           ??????\n"
 "\n"
 
-#: src/finish.c:440
+#: src/finish.c:453
 #, c-format
 msgid ""
 "                                                       \"Commodore Emeritus"
@@ -1247,7 +1276,7 @@
 "\"\n"
 "\n"
 
-#: src/finish.c:443
+#: src/finish.c:456
 #, c-format
 msgid ""
 " Expert level\n"
@@ -1256,7 +1285,7 @@
 " ??????? ???????????\n"
 "\n"
 
-#: src/finish.c:444
+#: src/finish.c:457
 #, c-format
 msgid ""
 "Emeritus level\n"
@@ -1265,7 +1294,7 @@
 "??????? ??????????\n"
 "\n"
 
-#: src/finish.c:445
+#: src/finish.c:458
 #, c-format
 msgid ""
 " Cheat level\n"
@@ -1274,7 +1303,7 @@
 " ??????? ?????????\n"
 "\n"
 
-#: src/finish.c:449
+#: src/finish.c:462
 #, c-format
 msgid ""
 "                                                 This day of %.6s %.4s, "
@@ -1285,7 +1314,7 @@
 "%.8s\n"
 "\n"
 
-#: src/finish.c:451
+#: src/finish.c:464
 #, c-format
 msgid ""
 "                                                        Your score:  %d\n"
@@ -1294,7 +1323,7 @@
 "                                                        ??? ????:  %d\n"
 "\n"
 
-#: src/finish.c:452
+#: src/finish.c:465
 #, c-format
 msgid ""
 "                                                    Klingons per stardate:  "
@@ -1302,231 +1331,230 @@
 msgstr ""
 "                                                    ????????? ? ????:  %.2f\n"
 
-#: src/io.c:92
+#: src/io.c:94
 msgid "[ANOUNCEMENT ARRIVING...]"
 msgstr "[????????? ?????????...]"
 
-#: src/io.c:94
+#: src/io.c:96
 msgid "[IMPORTANT ANNOUNCEMENT ARRIVING -- PRESS ENTER TO CONTINUE]"
 msgstr "[????????? ?????? ????????? -- ??????? ???? ??? ???????????]"
 
-#: src/io.c:98
+#: src/io.c:100
 msgid "[CONTINUE?]"
 msgstr "[???????????]"
 
-#: src/io.c:100
+#: src/io.c:102
 msgid "[PRESS ENTER TO CONTINUE]"
 msgstr "[??????? ???? ??? ???????????]"
 
-#: src/io.c:383
+#: src/io.c:390
 #, c-format
 msgid "Track for torpedo number %d-  "
 msgstr "?????? ??????? ????? %d- "
 
-#: src/io.c:387
+#: src/io.c:394
 msgid "Torpedo track- "
 msgstr "?????? ???????- "
 
-#: src/moving.c:16
+#: src/moving.c:19
 msgid "Helmsman Sulu- \"Leaving standard orbit.\""
 msgstr "??????? ????- \"?????? ? ??????.\""
 
-#: src/moving.c:103
+#: src/moving.c:105
 msgid "YOU HAVE ATTEMPTED TO CROSS THE NEGATIVE ENERGY BARRIER"
 msgstr "?? ????????? ???????? ????????????? ?????????????? ??????"
 
-#: src/moving.c:104
+#: src/moving.c:106
 msgid "AT THE EDGE OF THE GALAXY.  THE THIRD TIME YOU TRY THIS,"
 msgstr "?? ??????? ?????????.  ??? ???? ??? ??? ????????,"
 
-#: src/moving.c:105
+#: src/moving.c:107
 msgid "YOU WILL BE DESTROYED."
 msgstr "? ??????? ?? ????."
 
-#: src/moving.c:114
+#: src/moving.c:116
 #, c-format
 msgid "Entering %s."
 msgstr "?????? ? %s."
 
-#: src/moving.c:145
+#: src/moving.c:144
 msgid " pulled into black hole at "
 msgstr " ??????? ? ?????? ???? ? "
 
-#: src/moving.c:167
+#: src/moving.c:166
 msgid " encounters Tholian web at "
 msgstr " ????????? ?????????? ???? ? "
 
-#: src/moving.c:169
+#: src/moving.c:168
 msgid " blocked by object at "
 msgstr " ?????????? ???????? ? "
 
-#: src/moving.c:172
+#: src/moving.c:171
 msgid "Emergency stop required "
 msgstr "?????????? ????????? ??????????? "
 
-#: src/moving.c:173
+#: src/moving.c:172
 #, c-format
 msgid "%2d units of energy."
 msgstr "%2d ?????? ???????."
 
-#: src/moving.c:221
+#: src/moving.c:216
 msgid "Already docked."
 msgstr "? ??? ??? ????????????."
 
-#: src/moving.c:225
+#: src/moving.c:220
 msgid "You must first leave standard orbit."
 msgstr "??????? ?? ?????? ???? ? ??????."
 
-#: src/moving.c:230
+#: src/moving.c:225
 msgid " not adjacent to base."
 msgstr " ??? ???????????? ????."
 
-#: src/moving.c:234
+#: src/moving.c:229
 msgid "Docked."
 msgstr "????????????."
 
-#: src/moving.c:243
+#: src/moving.c:239
 msgid "Lt. Uhura- \"Captain, an important message from the starbase:\""
 msgstr "??. ?????- \"???????, ??? ?????? ????????? ? ????:\""
 
-#: src/moving.c:271
+#: src/moving.c:272
 msgid "Dummy! You can't leave standard orbit until you"
 msgstr "?????! ?? ?? ?????? ???? ? ?????? ???? ?? ??"
 
-#: src/moving.c:272
-msgid "are back aboard the "
-msgstr "????????? ?? ???? ??????? "
+#: src/moving.c:273
+msgid "are back aboard the ship."
+msgstr "????????? ?? ???? ???????."
 
-#: src/moving.c:281
+#: src/moving.c:280
 msgid "Computer damaged; manual navigation only"
 msgstr "????????? ??????; ?????? ?????? ?????????? ????????"
 
-#: src/moving.c:283
+#: src/moving.c:282
 msgid "Computer damaged; manual movement only"
 msgstr "????????? ??????; ????????? ??????????? ???????"
 
-#: src/moving.c:298
+#: src/moving.c:297
 msgid "Manual or automatic- "
 msgstr "?????? ??? ??????????????- "
 
-#: src/moving.c:321
+#: src/moving.c:320
 msgid "(Manual navigation assumed.)"
 msgstr "(???????????? ?????? ??????????.)"
 
-#: src/moving.c:323
+#: src/moving.c:322
 msgid "(Manual movement assumed.)"
 msgstr "(???????????? ?????? ?????????.)"
 
-#: src/moving.c:332
+#: src/moving.c:331
 msgid "Target quadrant or quadrant&sector- "
 msgstr "???????? ?????????? ??? ????????&??????- "
 
-#: src/moving.c:334
+#: src/moving.c:333
 msgid "Destination sector or quadrant&sector- "
 msgstr "?????? ?????????? ??? ????????&??????- "
 
-#: src/moving.c:388
+#: src/moving.c:387
 #, c-format
 msgid "Helmsman Sulu- \"Course locked in for %s.\""
 msgstr "??????? ????- \"???? ???? ?? %s.\""
 
-#: src/moving.c:392
+#: src/moving.c:391
 msgid "Ensign Chekov- \"Course laid in, Captain.\""
 msgstr "????????? ?????- \"???? ????, ???????.\""
 
-#: src/moving.c:399
+#: src/moving.c:398
 msgid "X and Y displacements- "
 msgstr "?????????? ?? X ? Y- "
 
-#: src/moving.c:424
+#: src/moving.c:423
 msgid "Helmsman Sulu- \"Aye, Sir.\""
 msgstr "??????? ????- \"???, ???.\""
 
-#: src/moving.c:444 src/moving.c:502
+#: src/moving.c:443 src/moving.c:503
 msgid "Engineer Scott- \"The impulse engines are damaged, Sir.\""
 msgstr "??????? ????- \"?????????? ????????? ??????????, ???.\""
 
-#: src/moving.c:459
+#: src/moving.c:458
 msgid "First Officer Spock- \"Captain, the impulse engines"
 msgstr "?????? ?????? ????- \"???????, ?????????? ?????????"
 
-#: src/moving.c:460
+#: src/moving.c:459
 msgid "require 20.0 units to engage, plus 100.0 units per"
 msgstr "??????? 20.0 ?????? ??????? ??? ???????, ???? 100.0 ?????? ??"
 
-#: src/moving.c:462
+#: src/moving.c:461
 #, c-format
 msgid "quadrant.  We can go, therefore, a maximum of %d"
 msgstr "????????.  ?????????????, ?? ???????? ???????? %d"
 
-#: src/moving.c:464
+#: src/moving.c:463
 msgid " quadrants.\""
 msgstr " ??????????.\""
 
-#: src/moving.c:467
+#: src/moving.c:466
 msgid "quadrant.  They are, therefore, useless.\""
 msgstr "????????.  ????? ??????? ??? ??????????.\""
 
-#: src/moving.c:475
+#: src/moving.c:474
 msgid "First Officer Spock- \"Captain, our speed under impulse"
 msgstr "?????? ?????? ????- \"???????, ???? ???????? ?? ??????????"
 
-#: src/moving.c:476
+#: src/moving.c:475
 msgid "power is only 0.95 sectors per stardate. Are you sure"
 msgstr "???? ????? 0.95 ???????? ? ????. ?? ???????,"
 
-#: src/moving.c:477
+#: src/moving.c:476
 msgid "we dare spend the time?\" "
 msgstr "??? ?? ????? ??????? ??????? ????????\" "
 
-#: src/moving.c:508
+#: src/moving.c:509
 msgid "Engineer Scott- \"Sorry, Captain. Until this damage"
 msgstr "??????? ????- \"????????, ???????. ???? ??? ????????????? ??"
 
-#: src/moving.c:509
+#: src/moving.c:510
 msgid "  is repaired, I can only give you warp 4.\""
 msgstr "  ?????????, ? ???? ?????? ?????????? ??? ???????? 4.\""
 
-#: src/moving.c:529
+#: src/moving.c:530
 msgid "We can't do it, Captain. We don't have enough energy."
 msgstr "?? ??????, ???????. ? ??? ?? ?????? ???????."
 
-#: src/moving.c:532
+#: src/moving.c:533
 #, c-format
 msgid "We don't have enough energy, but we could do it at warp %d"
 msgstr "? ??? ?? ?????????? ???????, ?? ?? ????? ?? ??????? ?? ??? ???????? %d"
 
-#: src/moving.c:535
+#: src/moving.c:536
 msgid "if you'll lower the shields."
 msgstr ", ???? ?????? ?? ???????? ??????."
 
-#: src/moving.c:542
+#: src/moving.c:543
 msgid "We haven't the energy to go that far with the shields up."
-msgstr ""
-"? ??? ??? ??????? ????? ?????? ??? ??????, ?? ??? ? ? ???????? ???????."
+msgstr "? ??? ??? ??????? ????? ?????? ??? ?????? ? ???????? ???????."
 
-#: src/moving.c:550
+#: src/moving.c:551
 msgid "First Officer Spock- \"Captain, I compute that such"
 msgstr "?????? ?????? ????- \"???????, ? ?????? ??? ?????"
 
-#: src/moving.c:551
+#: src/moving.c:552
 #, c-format
 msgid "  a trip would require approximately %2.0f"
 msgstr "  ????? ????????? ???????? %2.0f"
 
-#: src/moving.c:553
+#: src/moving.c:554
 msgid " percent of our"
-msgstr " ????????? ?? ??????"
+msgstr " ?????????"
 
-#: src/moving.c:554
+#: src/moving.c:555
 msgid "  remaining time.  Are you sure this is wise?\" "
-msgstr " ??????? ???????.  ?? ??????? ??? ??? ????????\" "
+msgstr " ??????????? ???????.  ?? ??????? ??? ??? ????????\" "
 
-#: src/moving.c:619
+#: src/moving.c:618
 msgid "  Scott here.  The warp engines are damaged."
 msgstr "  ???? ?? ?????.  ??????????????????? ????????? ???????."
 
-#: src/moving.c:620
+#: src/moving.c:619
 msgid "  We'll have to reduce speed to warp 4."
 msgstr "  ???????? ??????? ???????? ?? 4."
 
@@ -1561,7 +1589,7 @@
 
 #: src/moving.c:668
 msgid "Engineer Scott- \"Aye, but our maximum safe speed is warp 6.\""
-msgstr "??????? ????- \"???, ???? ????????? ?????????? ???????? - 6.\""
+msgstr "??????? ????- \"???, ???? ?????????? ?????????? ???????? - 6.\""
 
 #: src/moving.c:672
 msgid "Engineer Scott- \"Aye, Captain, we'll try it.\""
@@ -1571,1198 +1599,1720 @@
 msgid "Engineer Scott- \"Aye, Captain, but our engines may not take it.\""
 msgstr "??????? ????- \"??? ???????, ?? ???? ?????? ????? ?? ??????????.\""
 
-#: src/moving.c:690
+#: src/moving.c:691
 msgid "Scotty rushes to the transporter controls."
 msgstr "????? ????????? ? ?????????? ?????????????."
 
-#: src/moving.c:692
+#: src/moving.c:693
 msgid "But with the shields up it's hopeless."
 msgstr "?? ? ???????? ??????? ??? ??????????."
 
-#: src/moving.c:695
+#: src/moving.c:696
 msgid "His desperate attempt to rescue you . . ."
 msgstr "??? ????????? ??????? ?????? ??? . . ."
 
-#: src/moving.c:697 src/moving.c:993
+#: src/moving.c:698 src/moving.c:1017
 msgid "fails."
 msgstr "???????????."
 
-#: src/moving.c:701
+#: src/moving.c:702
 msgid "SUCCEEDS!"
 msgstr "?????????? ???????!"
 
-#: src/moving.c:704
+#: src/moving.c:705
 msgid "The crystals mined were "
 msgstr "????????? ????????? "
 
-#: src/moving.c:706
+#: src/moving.c:707
 msgid "lost."
 msgstr "???????."
 
-#: src/moving.c:709
+#: src/moving.c:710
 msgid "saved."
 msgstr "???????????."
 
-#: src/moving.c:728
+#: src/moving.c:729
 msgid " has stopped in a quadrant containing"
 msgstr " ??????????? ? ????????? ??"
 
-#: src/moving.c:729
+#: src/moving.c:730
 msgid "   a supernova."
 msgstr "   ??????????."
 
-#: src/moving.c:732
+#: src/moving.c:733
 msgid "***Emergency automatic override attempts to hurl "
 msgstr "***????????? ???????? ??????? "
 
-#: src/moving.c:735
+#: src/moving.c:736
 msgid "safely out of quadrant."
 msgstr "?? ?????????."
 
-#: src/moving.c:741
+#: src/moving.c:742
 msgid "Warp engines damaged."
 msgstr "??????????????????? ????????? ??????????."
 
-#: src/moving.c:747
+#: src/moving.c:748
 #, c-format
 msgid "Warp factor set to %d"
 msgstr "???????? ??????????? ?? %d"
 
-#: src/moving.c:761
+#: src/moving.c:762
 msgid "Insufficient energy to leave quadrant."
 msgstr "???????????? ??????? ????? ???????? ????????."
 
-#: src/moving.c:775
+#: src/moving.c:778
 msgid "***TIME WARP ENTERED."
 msgstr "***??????????? ?????????? ??????????."
 
-#: src/moving.c:778
+#: src/moving.c:781
 #, c-format
 msgid "You are traveling backwards in time %d stardates."
 msgstr "?? ????????????? ????? ?? ??????? ?? %d ????."
 
-#: src/moving.c:803
+#: src/moving.c:806
 msgid "Checkov-  \"Security reports the Galileo has disappeared, Sir!"
 msgstr "?????- \"?????? ??????????? ? ??????? ???????, ???!"
 
-#: src/moving.c:811
+#: src/moving.c:814
 msgid "Checkov-  \"Security reports the Galileo has reappeared in the dock!\""
 msgstr "?????- \"?????? ?????????? ? ????????? ??????? ? ????!\""
 
-#: src/moving.c:818
+#: src/moving.c:821
 msgid "Spock has reconstructed a correct star chart from memory"
 msgstr "???? ??????????? ???????? ????? ?? ??????"
 
-#: src/moving.c:823
+#: src/moving.c:826
 #, c-format
 msgid "You are traveling forward in time %d stardates."
 msgstr "?? ????????????? ?????? ?? ??????? ?? %d ????."
 
-#: src/moving.c:841
+#: src/moving.c:845
 msgid "Engineer Scott- \"We have no more deep space probes, Sir.\""
 msgstr ""
 "??????? ????- \"? ??? ?????? ??? ???????????? ??????????? ?????, ???.\""
 
-#: src/moving.c:843
+#: src/moving.c:847
 msgid "Ye Faerie Queene has no deep space probes."
 msgstr "?? ????????? ???????? ??? ???????????? ??????????? ?????."
 
-#: src/moving.c:849
+#: src/moving.c:853
 msgid "Engineer Scott- \"The probe launcher is damaged, Sir.\""
 msgstr "??????? ????- \"???????? ??????? ??????, ???.\""
 
-#: src/moving.c:856
+#: src/moving.c:860
 msgid "Spock-  \"Records show the previous probe has not yet"
 msgstr "????- \"??????? ? ?????????? ?????? ??????? ? ???, ??? ??? ??? ??"
 
-#: src/moving.c:857
+#: src/moving.c:861
 msgid "   reached its destination.\""
 msgstr "   ???????? ?????? ??????????.\""
 
-#: src/moving.c:860
+#: src/moving.c:864
 msgid "Uhura- \"The previous probe is still reporting data, Sir.\""
 msgstr "?????- \"?????????? ?????? ??? ??? ???????? ???????, ???.\""
 
-#: src/moving.c:867
+#: src/moving.c:871
 #, c-format
 msgid "%d probe left."
 msgstr "???????? %d ???????."
 
-#: src/moving.c:867
+#: src/moving.c:871
 #, c-format
 msgid "%d probes left."
 msgstr "???????? %d ??????."
 
-#: src/moving.c:868
+#: src/moving.c:872
 msgid "Are you sure you want to fire a probe? "
 msgstr "?? ???????, ??? ?????? ????????? ??????? "
 
-#: src/moving.c:878
+#: src/moving.c:882
 msgid "Arm NOVAMAX warhead? "
 msgstr "????????? ??????? ???????????? "
 
-#: src/moving.c:899
+#: src/moving.c:903
 msgid "Ensign Chekov-  \"The deep space probe is launched, Captain.\""
 msgstr ""
 "????????? ?????- \"???????????? ??????????? ?????? ????????, ???????.\""
 
-#: src/moving.c:913
+#: src/moving.c:938
 msgid "Lt. Uhura-  \"But Captain, we're already docked.\""
 msgstr "??. ?????- \"?? ???????, ?? ???? ??? ???????????????.\""
 
-#: src/moving.c:917
+#: src/moving.c:942
 msgid "Subspace radio damaged."
 msgstr "??????????????????? ????? ??????????."
 
-#: src/moving.c:921
+#: src/moving.c:946
 msgid "Lt. Uhura-  \"Captain, I'm not getting any response from Starbase.\""
 msgstr "??. ?????- \"???????, ? ?? ??????? ??????? ???????? ?? ????.\""
 
-#: src/moving.c:925
+#: src/moving.c:950
 msgid "You must be aboard the "
 msgstr "?? ?????? ???? ?? ????? ??????? "
 
-#: src/moving.c:952
+#: src/moving.c:976
 #, c-format
 msgid "Starbase in %s responds--"
 msgstr "???? ?? %s ????????--"
 
-#: src/moving.c:955
+#: src/moving.c:979
 msgid " dematerializes."
 msgstr " ??????????????????."
 
-#: src/moving.c:968
+#: src/moving.c:992
 msgid "You have been lost in space..."
 msgstr "?? ??????? ? ??????????? ???????..."
 
-#: src/moving.c:976
+#: src/moving.c:1000
 msgid "1st"
 msgstr "1-??"
 
-#: src/moving.c:977
+#: src/moving.c:1001
 msgid "2nd"
 msgstr "2-??"
 
-#: src/moving.c:978
+#: src/moving.c:1002
 msgid "3rd"
 msgstr "3-?"
 
-#: src/moving.c:980
+#: src/moving.c:1004
 msgid " attempt to re-materialize "
 msgstr " ??????? ?????????????? "
 
-#: src/moving.c:1007
+#: src/moving.c:1031
 msgid "succeeds."
 msgstr "?????????? ???????."
 
-#: src/moving.c:1011
+#: src/moving.c:1035
 msgid "Lt. Uhura-  \"Captain, we made it!\""
 msgstr "??. ?????- \"???????, ?????????!\""
 
-#: src/planets.c:33
+#: src/moving.c:1068
+msgid "You cannot abandon Ye Faerie Queene."
+msgstr "?? ?? ?????? ???????? ????????? ????????."
+
+#: src/moving.c:1075
+msgid "Ye Faerie Queene has no shuttle craft."
+msgstr "?? ????????? ???????? ??? ???????."
+
+#: src/moving.c:1079
+msgid "Shuttle craft now serving Big Macs."
+msgstr "?????? ???????????? ??? ???????? ??? ?????."
+
+#: src/moving.c:1083
+msgid "Shuttle craft damaged."
+msgstr "?????? ?????????."
+
+#: src/moving.c:1087
+#, fuzzy
+msgid "You must be aboard the Enterprise."
+msgstr "?? ?????? ???? ?? ????? ??????? "
+
+#: src/moving.c:1091 src/planets.c:302
+msgid "Shuttle craft not currently available."
+msgstr "?????? ?????? ??????????."
+
+#: src/moving.c:1096
+msgid "***ABANDON SHIP!  ABANDON SHIP!"
+msgstr "***???????? ???????!  ???????? ???????!"
+
+#: src/moving.c:1098
+msgid "***ALL HANDS ABANDON SHIP!"
+msgstr "***????? ????????? ???????? ???????!"
+
+#: src/moving.c:1100
+msgid "Captain and crew escape in shuttle craft."
+msgstr "??????? ? ???????? ?????? ?? ???????."
+
+#: src/moving.c:1109 src/moving.c:1112
+msgid "Remainder of ship's complement beam down"
+msgstr "??????? ??????? ??????? ?????????????????"
+
+#: src/moving.c:1110
+msgid "to nearest habitable planet."
+msgstr "?? ????????? ????????? ??? ????? ???????."
+
+#: src/moving.c:1113
+#, c-format
+msgid "to %s."
+msgstr "? %s."
+
+#: src/moving.c:1115
+#, c-format
+msgid "Entire crew of %d left to die in outer space."
+msgstr "???? ?????? ? ??????? %d ??????? ????? ? ???????? ???????."
+
+#: src/moving.c:1124
+msgid "You are captured by Klingons and released to"
+msgstr "???????? ??????? ??? ?"
+
+#: src/moving.c:1125
+msgid "the Federation in a prisoner-of-war exchange."
+msgstr "???????? ????? ?????????????? ? ??????????."
+
+#: src/moving.c:1151
+msgid "Starfleet puts you in command of another ship,"
+msgstr "???????? ???? ??????? ??? ???????????? ??? ????? ????????,"
+
+#: src/moving.c:1152
+msgid "the Faerie Queene, which is antiquated but,"
+msgstr "????????? ????????, ??????? ??????? ???????, ??"
+
+#: src/moving.c:1153
+msgid "still useable."
+msgstr "??? ??? ????????."
+
+#: src/moving.c:1154
+msgid "The dilithium crystals have been moved."
+msgstr "????????? ??????? ????? ? ?????."
+
+#: src/planets.c:22
 msgid "Spock-  \"Planet report follows, Captain.\""
 msgstr "????- \"??? ?????????? ? ???????, ???????.\""
 
-#: src/planets.c:47
+#: src/planets.c:33
 msgid "   class "
 msgstr "   ????? "
 
-#: src/planets.c:50
+#: src/planets.c:36
 msgid "no "
 msgstr "??????????? "
 
-#: src/planets.c:51
+#: src/planets.c:37
 msgid "dilithium crystals present."
 msgstr "???????? ?????????? ???????."
 
-#: src/planets.c:53
+#: src/planets.c:39
 msgid "    Shuttle Craft Galileo on surface."
 msgstr "    ?????? ??????? ?? ???????????."
 
-#: src/planets.c:56
+#: src/planets.c:42
 msgid "No information available."
 msgstr "??? ??????????."
 
-#: src/planets.c:64
+#: src/planets.c:51
 msgid "Already in standard orbit."
 msgstr "? ??? ??? ?? ??????.\""
 
-#: src/planets.c:68
+#: src/planets.c:55
 msgid "Both warp and impulse engines damaged."
 msgstr "??????????????????? ????????? ???????, ????? ??? ? ??????????."
 
-#: src/planets.c:73
+#: src/planets.c:60
 msgid " not adjacent to planet."
 msgstr " ??????? ?????? ?? ???????."
 
-#: src/planets.c:78
+#: src/planets.c:65
 msgid "Helmsman Sulu-  \"Entering standard orbit, Sir.\""
 msgstr "??????? ????- \"??????? ?? ??????, ???.\""
 
-#: src/planets.c:82
+#: src/planets.c:69
 #, c-format
 msgid "Sulu-  \"Entered orbit at altitude %.2f kilometers.\""
 msgstr "????- \"????? ?? ?????? ?? ?????? %.2f kilometers.\""
 
-#: src/planets.c:92
+#: src/planets.c:80
 msgid "Short range sensors damaged."
 msgstr "??????? ???????? ?????? ???????."
 
-#: src/planets.c:96
+#: src/planets.c:84
 msgid "Spock- \"No planet in this quadrant, Captain.\""
 msgstr "????- \"? ???? ????????? ??? ??????, ???????.\""
 
-#: src/planets.c:100
+#: src/planets.c:88
 #, c-format
 msgid "Spock-  \"Sensor scan for %s-"
 msgstr "????- \"???????????? %s-"
 
-#: src/planets.c:102
+#: src/planets.c:90
 #, c-format
 msgid "         Planet at %s is of class %s."
 msgstr "         ??????? ?? %s ?????? %s."
 
-#: src/planets.c:106
+#: src/planets.c:94
 msgid "         Sensors show Galileo still on surface."
 msgstr "         ??????? ??????????, ??? ??????? ??? ??? ?? ???????????."
 
-#: src/planets.c:107
+#: src/planets.c:95
 msgid "         Readings indicate"
 msgstr "         ????????????"
 
-#: src/planets.c:108
+#: src/planets.c:96
 msgid " no"
 msgstr " ??"
 
-#: src/planets.c:109
+#: src/planets.c:97
 msgid " dilithium crystals present.\""
 msgstr " ?????????? ???????? ?????????? ???????."
 
-#: src/planets.c:119
+#: src/planets.c:108
 msgid "Transporter damaged."
 msgstr "??????????? ?? ????????."
 
-#: src/planets.c:122
+#: src/planets.c:111
 msgid "Spock-  \"May I suggest the shuttle craft, Sir?\" "
 msgstr "????- \"???? ? ???????????? ??????, ????\""
 
-#: src/planets.c:129 src/planets.c:306
+#: src/planets.c:118 src/planets.c:298
 msgid " not in standard orbit."
 msgstr " ?? ?? ??????."
 
-#: src/planets.c:133
+#: src/planets.c:122
 msgid "Impossible to transport through shields."
 msgstr "?????????? ???????????????? ????? ???????? ????."
 
-#: src/planets.c:137 src/planets.c:322
+#: src/planets.c:126 src/planets.c:314
 msgid "Spock-  \"Captain, we have no information on this planet"
 msgstr "????- \"???????, ? ??? ??? ?????????? ?? ???? ???????"
 
-#: src/planets.c:138 src/planets.c:323
+#: src/planets.c:127 src/planets.c:315
 msgid "  and Starfleet Regulations clearly state that in this situation"
 msgstr " ? ?????????? ????????? ????? ????? ???????????? ? ????? ????????"
 
-#: src/planets.c:139
+#: src/planets.c:128
 msgid "  you may not go down.\""
 msgstr " ?? ?????????? ?? ???????????.\""
 
-#: src/planets.c:145
+#: src/planets.c:134
 msgid "Spock-  \"Wouldn't you rather take the Galileo?\" "
 msgstr "????- \"????? ?? ??? ?? ??????????? ????????\""
 
-#: src/planets.c:150
+#: src/planets.c:139
 msgid "Your crew hides the Galileo to prevent capture by aliens."
 msgstr "???? ??????? ?????? ???????, ????? ?? ?? ???????? ?????????????."
 
-#: src/planets.c:152
+#: src/planets.c:141
 msgid "Landing party assembled, ready to beam up."
 msgstr "????????? ????? ??????, ?????? ? ????????????."
 
-#: src/planets.c:154
+#: src/planets.c:143
 msgid "Kirk whips out communicator..."
 msgstr "???? ???????? ????????????..."
 
-#: src/planets.c:155
+#: src/planets.c:144
 msgid "BEEP  BEEP  BEEP"
 msgstr "???  ???  ???"
 
-#: src/planets.c:157
+#: src/planets.c:146
 msgid "\"Kirk to enterprise-  Lock on coordinates...energize.\""
 msgstr "\"???? ???????????- ?????????? ??????????...???????.\""
 
-#: src/planets.c:162
+#: src/planets.c:151
 msgid "Spock-  \"Captain, I fail to see the logic in"
 msgstr "????- \"???????, ? ?? ???? ??????"
 
-#: src/planets.c:163
+#: src/planets.c:152
 msgid "  exploring a planet with no dilithium crystals."
 msgstr " ??????????? ???????, ?? ??????? ??? ?????????? ???????."
 
-#: src/planets.c:164 src/planets.c:254
+#: src/planets.c:153 src/planets.c:244
 msgid "  Are you sure this is wise?\" "
 msgstr "  ?? ??????? ??? ??? ????????\" "
 
-#: src/planets.c:170
+#: src/planets.c:159
 msgid "Scotty-  \"Transporter room ready, Sir.\""
 msgstr "?????- \"??????????? ?????, ???.\""
 
-#: src/planets.c:172
+#: src/planets.c:161
 msgid "Kirk and landing party prepare to beam down to planet surface."
 msgstr "???? ? ????????? ????? ????????? ? ???????????? ?? ???????."
 
-#: src/planets.c:174
+#: src/planets.c:163
 msgid "Kirk-  \"Energize.\""
 msgstr "????- \"???????.\""
 
-#: src/planets.c:183
+#: src/planets.c:172
 msgid "Scotty-  \"Oh my God!  I've lost them.\""
 msgstr "?????- \"? ???!  ? ?? ???????.\""
 
-#: src/planets.c:189
+#: src/planets.c:178
 msgid "Transport complete."
 msgstr "??????????????? ?????????."
 
-#: src/planets.c:192
+#: src/planets.c:181
 msgid "The shuttle craft Galileo is here!"
 msgstr "?????? ??????? ?????!"
 
-#: src/planets.c:207
+#: src/planets.c:197
 msgid "Mining party not on planet."
 msgstr "?????????? ?? ??????? ???."
 
-#: src/planets.c:211
+#: src/planets.c:201
 msgid "This planet has already been strip-mined for dilithium."
 msgstr "??? ??????? ??? ???????? ?? ?????; ??????? ??? ?????? ???."
 
-#: src/planets.c:215
+#: src/planets.c:205
 msgid "No dilithium crystals on this planet."
 msgstr "?? ???? ??????? ??????? ???."
 
-#: src/planets.c:219
+#: src/planets.c:209
 msgid "You've already mined enough crystals for this trip."
 msgstr "?? ??????? ??? ?????????? ?????????? ?? ??? ???????."
 
-#: src/planets.c:223
+#: src/planets.c:213
 msgid "With all those fresh crystals aboard the "
 msgstr "? ??? ??? ????? ?????????? ?? ?????, ???"
 
-#: src/planets.c:226
+#: src/planets.c:216
 msgid "there's no reason to mine more at this time."
 msgstr "??? ?????? ???????? ???."
 
-#: src/planets.c:231
+#: src/planets.c:221
 msgid "Mining operation complete."
 msgstr "?????? ?????????? ?????????."
 
-#: src/planets.c:243
+#: src/planets.c:233
 msgid "No dilithium crystals available."
 msgstr "??? ?????????? ???????."
 
-#: src/planets.c:247
+#: src/planets.c:237
 msgid "Spock-  \"Captain, Starfleet Regulations prohibit such an operation"
 msgstr "????- \"???????, ?????????? ????????? ????? ????????? ??? ????????,"
 
-#: src/planets.c:248
-msgid "  except when condition Yellow exists."
+#: src/planets.c:238
+#, fuzzy
+msgid "  except when Condition Yellow exists."
 msgstr " ????? ??????? ??????? ?????????."
 
-#: src/planets.c:251
+#: src/planets.c:241
 msgid "Spock- \"Captain, I must warn you that loading"
 msgstr "????- \"???????, ? ?????? ???????????? ???, ??? ??????"
 
-#: src/planets.c:252
+#: src/planets.c:242
 msgid "  raw dilithium crystals into the ship's power"
 msgstr " ?????????????? ????????? ??????? ? ??????????????"
 
-#: src/planets.c:253
+#: src/planets.c:243
 msgid "  system may risk a severe explosion."
 msgstr " ??????? ??????? ??????, ? ????? ???????? ? ???????? ??????."
 
-#: src/planets.c:260
+#: src/planets.c:250
 msgid "Engineering Officer Scott-  \"(GULP) Aye Sir."
 msgstr "???????-??????? ????- \"(?????? ??????) ??? ???."
 
-#: src/planets.c:261
+#: src/planets.c:251
 msgid "  Mr. Spock and I will try it.\""
 msgstr "  ?? ? ???????? ?????? ?????????.\""
 
-#: src/planets.c:263
+#: src/planets.c:253
 msgid "Spock-  \"Crystals in place, Sir."
 msgstr "????- \"????????? ?? ?????, ???."
 
-#: src/planets.c:264
+#: src/planets.c:254
 msgid "  Ready to activate circuit.\""
 msgstr "  ????? ???????? ????.\""
 
-#: src/planets.c:266
+#: src/planets.c:256
 msgid "Scotty-  \"Keep your fingers crossed, Sir!\""
 msgstr "?????-  \"????????? ??????, ???!\""
 
-#: src/planets.c:269
+#: src/planets.c:259
 msgid "  \"Activating now! - - No good!  It's***"
 msgstr "  \"??? ????????! - - ?????!  ???***"
 
-#: src/planets.c:271 src/planets.c:469
+#: src/planets.c:261 src/planets.c:462
 msgid "***RED ALERT!  RED A*L********************************"
 msgstr "***???????! ???*??***********************************"
 
-#: src/planets.c:274 src/planets.c:472
+#: src/planets.c:264 src/planets.c:465
 msgid "******************   KA-BOOM!!!!   *******************"
 msgstr "******************   ??-???!!!!    ********************"
 
-#: src/planets.c:280
+#: src/planets.c:270
 msgid "  \"Activating now! - - "
 msgstr "  \"??? ????????! - - "
 
-#: src/planets.c:281
+#: src/planets.c:271
 msgid "The instruments"
 msgstr "????????"
 
-#: src/planets.c:282
+#: src/planets.c:272
 msgid "   are going crazy, but I think it's"
 msgstr "   ????? ? ???, ?? ? ?????, ??? ???"
 
-#: src/planets.c:283
+#: src/planets.c:273
 msgid "   going to work!!  Congratulations, Sir!\""
 msgstr "   ?????? ????????!!  ??????????, ???!\""
 
-#: src/planets.c:295
+#: src/planets.c:286
 msgid "Ye Faerie Queene has no shuttle craft bay to dock it at."
 msgstr "?? ????????? ???????? ??? ????????? ??? ???????? ? ????????."
 
-#: src/planets.c:297
+#: src/planets.c:288
 msgid "Ye Faerie Queene had no shuttle craft."
 msgstr "?? ????????? ???????? ??? ???????."
 
-#: src/planets.c:300
+#: src/planets.c:291
 msgid "The Galileo is damaged."
 msgstr "??????? ?????????."
 
-#: src/planets.c:301
+#: src/planets.c:293
 msgid "Shuttle craft is now serving Big Macs."
 msgstr "?????? ???????????? ??? ???????? ??? ?????."
 
-#: src/planets.c:310
-msgid "Shuttle craft not currently available."
-msgstr "?????? ?????? ??????????."
-
-#: src/planets.c:314
+#: src/planets.c:306
 msgid "You will have to beam down to retrieve the shuttle craft."
 msgstr "??? ???????? ?????????? ?? ??????????? ????? ??????? ??????."
 
-#: src/planets.c:318
+#: src/planets.c:310
 msgid "Shuttle craft cannot pass through shields."
 msgstr "?????? ?? ????? ????????? ????? ??????."
 
-#: src/planets.c:324
+#: src/planets.c:316
 msgid "  you may not fly down.\""
 msgstr " ??? ?? ??????? ??????? ????.\""
 
-#: src/planets.c:329
+#: src/planets.c:321
 msgid "First Officer Spock-  \"Captain, I compute that such"
 msgstr "?????? ?????? ????- \"???????, ? ?????? ??? ?????"
 
-#: src/planets.c:330
+#: src/planets.c:322
 #, c-format
 msgid "  a maneuver would require approximately %2d%% of our"
 msgstr "  ?????? ????????? ???????? %2d%%"
 
-#: src/planets.c:332
+#: src/planets.c:324
 msgid "remaining time."
 msgstr "??????????? ???????."
 
-#: src/planets.c:333
+#: src/planets.c:325
 msgid "Are you sure this is wise?\" "
 msgstr "?? ??????? ??? ??? ????????\" "
 
-#: src/planets.c:344
+#: src/planets.c:336
 msgid "Spock-  \"Would you rather use the transporter?\" "
 msgstr "????- \"?? ????? ?? ??? ??????????????? ??????????????\" "
 
-#: src/planets.c:349
+#: src/planets.c:341
 msgid "Shuttle crew"
 msgstr "?????? ???????"
 
-#: src/planets.c:352
+#: src/planets.c:344
 msgid "Rescue party"
 msgstr "???????????? ???????"
 
-#: src/planets.c:353
+#: src/planets.c:345
 msgid " boards Galileo and swoops toward planet surface."
 msgstr " ??????? ? ??????? ? ???????????? ? ??????????? ???????."
 
-#: src/planets.c:358 src/planets.c:379
+#: src/planets.c:350 src/planets.c:371
 msgid "Trip complete."
 msgstr "????? ???????."
 
-#: src/planets.c:363
+#: src/planets.c:355
 msgid "You and your mining party board the"
 msgstr "?? ? ??? ????? ??????? ?"
 
-#: src/planets.c:364
+#: src/planets.c:356
 msgid "shuttle craft for the trip back to the Enterprise."
 msgstr "?????? ??? ?????? ? ???????????."
 
-#: src/planets.c:366
+#: src/planets.c:358
 msgid "The short hop begins . . ."
 msgstr "??????? ???????? ??????? . . ."
 
-#: src/planets.c:386
+#: src/planets.c:378
 msgid "Mining party assembles in the hangar deck,"
 msgstr "?????? ?????????? ????????? ? ?????? ??????,"
 
-#: src/planets.c:387
+#: src/planets.c:379
 msgid "ready to board the shuttle craft \"Galileo\"."
 msgstr "??? ?????? ??????? ? ?????? \"???????\"."
 
-#: src/planets.c:389
+#: src/planets.c:381
 msgid "The hangar doors open; the trip begins."
 msgstr "????? ?????? ???????; ????? ???????."
 
-#: src/planets.c:397
+#: src/planets.c:389
 msgid "Trip complete"
 msgstr "????? ???????"
 
-#: src/planets.c:410
+#: src/planets.c:403
 msgid "Ye Faerie Queene has no death ray."
 msgstr "?? ????????? ???????? ??? ???? ??????."
 
-#: src/planets.c:414
+#: src/planets.c:407
 msgid "Sulu-  \"But Sir, there are no enemies in this quadrant.\""
 msgstr "????- \"?? ???, ? ???? ????????? ??? ??????.\""
 
-#: src/planets.c:418
+#: src/planets.c:411
 msgid "Death Ray is damaged."
 msgstr "??? ?????? ?????????."
 
-#: src/planets.c:421
+#: src/planets.c:414
 msgid "Spock-  \"Captain, the 'Experimental Death Ray'"
 msgstr "????- \"???????, '????????????????? ??? ??????'"
 
-#: src/planets.c:422
+#: src/planets.c:415
 msgid "  is highly unpredictible.  Considering the alternatives,"
 msgstr "  ???????? ?????????????.  ??????? ??? ????????????,"
 
-#: src/planets.c:423
+#: src/planets.c:416
 msgid "  are you sure this is wise?\" "
 msgstr " ?? ??????? ??? ??? ????????\" "
 
-#: src/planets.c:425
+#: src/planets.c:418
 msgid "Spock-  \"Acknowledged.\""
 msgstr "????- \"????.\""
 
-#: src/planets.c:428
+#: src/planets.c:421
 msgid "WHOOEE ... WHOOEE ... WHOOEE ... WHOOEE"
 msgstr ""
 
-#: src/planets.c:430
+#: src/planets.c:423
 msgid "Crew scrambles in emergency preparation."
 msgstr "??????? ???????????, ???????? ??????? ?????????????."
 
-#: src/planets.c:431
+#: src/planets.c:424
 msgid "Spock and Scotty ready the death ray and"
 msgstr "???? ? ????? ???????? ??? ?????? ?"
 
-#: src/planets.c:432
+#: src/planets.c:425
 msgid "prepare to channel all ship's power to the device."
 msgstr "? ?????? ? ???????? ???? ??????? ??????? ?? ?????????."
 
-#: src/planets.c:434
+#: src/planets.c:427
 msgid "Spock-  \"Preparations complete, sir.\""
 msgstr "????- \"????????????? ????????, ???.\""
 
-#: src/planets.c:435
+#: src/planets.c:428
 msgid "Kirk-  \"Engage!\""
 msgstr "????- \"???!\""
 
-#: src/planets.c:437
+#: src/planets.c:430
 msgid "WHIRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"
 msgstr ""
 
-#: src/planets.c:443 src/planets.c:463
+#: src/planets.c:436 src/planets.c:456
 msgid "Sulu- \"Captain!  It's working!\""
 msgstr "????- \"???????!  ?? ????????!\""
 
-#: src/planets.c:447
+#: src/planets.c:440
 msgid "Ensign Chekov-  \"Congratulations, Captain!\""
 msgstr "????????? ?????- \"??????????, ???????.\""
 
-#: src/planets.c:450
+#: src/planets.c:443
 msgid "Spock-  \"Captain, I believe the `Experimental Death Ray'"
 msgstr "????- \"???????, ? ????????, ??? '????????????????? ??? ??????'"
 
-#: src/planets.c:452
+#: src/planets.c:445
 msgid "   is still operational.\""
 msgstr "   ??? ??? ????????.\""
 
-#: src/planets.c:455
+#: src/planets.c:448
 msgid "   has been rendered nonfunctional.\""
 msgstr "   ?????? ? ??????????.\""
 
-#: src/planets.c:467
+#: src/planets.c:460
 msgid "***MATTER-ANTIMATTER IMPLOSION IMMINENT!"
 msgstr "***???????? ??????? ??????? ? ????????????!"
 
-#: src/planets.c:478
+#: src/planets.c:471
 msgid "Sulu- \"Captain!  Yagabandaghangrapl, brachriigringlanbla!\""
 msgstr "????- \"???????!  ?????????, ????????, ???????-?????????!\""
 
-#: src/planets.c:480
+#: src/planets.c:473
 msgid "Lt. Uhura-  \"Graaeek!  Graaeek!\""
 msgstr "??. ?????- \"??????!  ????!\""
 
-#: src/planets.c:482
+#: src/planets.c:475
 msgid "Spock-  \"Fascinating!  . . . All humans aboard"
 msgstr "????- \"??????????!  . . . ??? ???? ?? ?????"
 
-#: src/planets.c:483
+#: src/planets.c:476
 msgid "  have apparently been transformed into strange mutations."
 msgstr "  ???? ??????????? ?????-?? ???????? ???????."
 
-#: src/planets.c:484
+#: src/planets.c:477
 msgid "  Vulcans do not seem to be affected."
 msgstr "  ????????? ??????, ??????, ?? ??????????."
 
-#: src/planets.c:486
+#: src/planets.c:479
 msgid "Kirk-  \"Raauch!  Raauch!\""
 msgstr "????- \"???! ???! ???-??!"
 
-#: src/planets.c:492
+#: src/planets.c:485
 msgid "Sulu- \"Captain!  It's   --WHAT?!?!\""
 msgstr "????- \"???????!  ???   --??????!\""
 
-#: src/planets.c:494
+#: src/planets.c:487
 msgid "Spock-  \"I believe the word is"
 msgstr "????- \"??????, ?????"
 
-#: src/planets.c:495
+#: src/planets.c:488
 msgid " *ASTONISHING*"
 msgstr " *???????????*"
 
-#: src/planets.c:496
+#: src/planets.c:489
 msgid " Mr. Sulu."
 msgstr " ?????? ????."
 
-#: src/planets.c:500
+#: src/planets.c:493
 msgid "  Captain, our quadrant is now infested with"
 msgstr "  ???????, ??? ???????? ?????? ???? ?????"
 
-#: src/planets.c:501
+#: src/planets.c:494
 msgid " - - - - - -  *THINGS*."
 msgstr " - - - - - -  *??????*."
 
-#: src/planets.c:503
+#: src/planets.c:496
 msgid "  I have no logical explanation.\""
 msgstr "  ? ???? ??? ????????? ??????????.\""
 
-#: src/planets.c:506
+#: src/planets.c:499
 msgid "Sulu- \"Captain!  The Death Ray is creating tribbles!\""
 msgstr "????- \"???????!   ??? ?????? ?????-?? ??????? ????????!\""
 
-#: src/planets.c:508
+#: src/planets.c:501
 msgid "Scotty-  \"There are so many tribbles down here"
 msgstr "?????-  \"??? ??????? ???? ???????? ??????"
 
-#: src/planets.c:509
+#: src/planets.c:502
 msgid "  in Engineering, we can't move for 'em, Captain.\""
 msgstr "  ? ??????????? ??????, ??? ?? ?? ????? ? ???? ???????????, ???????.\""
 
-#: src/planets.c:534
-msgid "Deneva"
-msgstr ""
+#: src/reports.c:11
+#, c-format
+msgid "Starbase in %s is currently under Commander attack."
+msgstr "???? ? %s ????????? ?????????? ?????????."
 
-#: src/planets.c:535
-msgid "Eminiar VII"
-msgstr ""
+#: src/reports.c:13 src/reports.c:19
+#, c-format
+msgid "It can hold out until Stardate %d."
+msgstr "??? ?????? ???????????? ?? ???? %d.\""
 
-#: src/planets.c:536
-msgid "Hansen's Planet"
-msgstr ""
+#: src/reports.c:17
+#, c-format
+msgid "Starbase in %s is under Super-commander attack."
+msgstr "???? ? %s ????????? ????-????? ?????????."
 
-#: src/planets.c:537
-msgid "Taurus IV"
-msgstr ""
+#: src/reports.c:24
+#, c-format
+msgid "Base in %i - %i attacked by C. Alive until %.1f"
+msgstr "???? ? %i - %i ????????? C. ??????? ?? %.1f"
 
-#: src/planets.c:538
-msgid "Aldebaran III"
-msgstr ""
+#: src/reports.c:26
+#, c-format
+msgid "Base in %i - %i attacked by S. Alive until %.1f"
+msgstr "???? ? %i - %i ????????? S. ??????? ?? %.1f"
 
-#: src/planets.c:539
-msgid "Vulcan (T'Khasi)"
-msgstr ""
+#: src/reports.c:38
+msgid "thawed "
+msgstr "??????????? "
 
-#: src/planets.c:540
-msgid "Tellar Prime (Miracht)"
-msgstr ""
+#: src/reports.c:40
+msgid "short"
+msgstr "????????"
 
-#: src/planets.c:541
-msgid "Andoria (Fesoan)"
-msgstr ""
+#: src/reports.c:41
+msgid "medium"
+msgstr "???????"
 
-#: src/planets.c:542
-msgid "Antos IV (Doraphane)"
-msgstr ""
+#: src/reports.c:42
+msgid "long"
+msgstr "???????"
 
-#: src/planets.c:543
-msgid "Catulla (Cendo-Prae)"
+#: src/reports.c:43
+msgid "unknown length"
 msgstr ""
 
-#: src/planets.c:544
-msgid "Izar"
-msgstr ""
+#: src/reports.c:46
+msgid "novice"
+msgstr "???????"
 
-#: src/planets.c:545
-msgid "Tiburon"
-msgstr ""
+#: src/reports.c:47
+msgid "fair"
+msgstr "???????"
 
-#: src/planets.c:546
-msgid "Merak II"
-msgstr ""
+#: src/reports.c:48
+msgid "good"
+msgstr "??????"
 
-#: src/planets.c:547
-msgid "Argelius II (Nelphia)"
-msgstr ""
+#: src/reports.c:49
+msgid "expert"
+msgstr "??????????"
 
-#: src/planets.c:548
-msgid "Daran V"
-msgstr ""
+#: src/reports.c:50
+msgid "emeritus"
+msgstr "????????? ???????"
 
-#: src/planets.c:549
-msgid "Medusa"
+#: src/reports.c:51
+msgid "skilled"
 msgstr ""
 
-#: src/planets.c:550
-msgid "Coridan (Desotriana)"
-msgstr ""
-
-#: src/planets.c:551
-msgid "Berengaria IV"
-msgstr ""
-
-#: src/planets.c:552
-msgid "Capella IV (Kohath)"
-msgstr ""
-
-#: src/planets.c:553
-msgid "Gideon"
-msgstr ""
-
-#: src/planets.c:554
-msgid "Iotia"
-msgstr ""
-
-#: src/planets.c:557
-msgid "Rigel II"
-msgstr ""
-
-#: src/planets.c:558
-msgid "Deneb II"
-msgstr ""
-
-#: src/planets.c:564
-msgid "Scalos IV"
-msgstr ""
-
-#: src/planets.c:575
-msgid "Beta III"
-msgstr ""
-
-#: src/planets.c:576
-msgid "Gamma Tranguli VI (Vaalel)"
-msgstr ""
-
-#: src/planets.c:577
-msgid "Pyris VII"
-msgstr ""
-
-#: src/planets.c:578
-msgid "Triacus"
-msgstr ""
-
-#: src/planets.c:579
-msgid "Marcos XII"
-msgstr ""
-
-#: src/planets.c:581
-msgid "Ardana"
-msgstr ""
-
-#: src/planets.c:586
-msgid "Exo III"
-msgstr ""
-
-#: src/reports.c:10
+#: src/reports.c:54
 #, c-format
-msgid "Starbase in %s is currently under Commander attack."
-msgstr ""
+msgid "You %s a %s%s %s game."
+msgstr "?? %s ???? %s%s %s."
 
-#: src/reports.c:12 src/reports.c:18
-#, c-format
-msgid "It can hold out until Stardate %d."
-msgstr "??? ?????? ???????????? ?? ???? %d.\""
+#: src/reports.c:55
+msgid "were playing"
+msgstr "???????"
 
-#: src/reports.c:16
-#, c-format
-msgid "Starbase in %s is under Super-commander attack."
-msgstr ""
+#: src/reports.c:55
+msgid "are playing"
+msgstr "???????"
 
-#: src/reports.c:23
-#, c-format
-msgid "Base in %i - %i attacked by C. Alive until %.1f"
-msgstr ""
-
-#: src/reports.c:25
-#, c-format
-msgid "Base in %i - %i attacked by S. Alive until %.1f"
-msgstr ""
-
-#: src/reports.c:52
-#, c-format
-msgid "You %s playing a %s%s %s game."
-msgstr ""
-
-#: src/reports.c:53
-msgid "were"
-msgstr ""
-
-#: src/reports.c:53
-msgid "are now"
-msgstr ""
-
-#: src/reports.c:54
+#: src/reports.c:56
 msgid "No plaque is allowed."
-msgstr ""
+msgstr "??????? ?? ?????."
 
-#: src/reports.c:55
+#: src/reports.c:57
 #, c-format
 msgid "This is tournament game %d."
-msgstr ""
+msgstr "??? ????????? ???? ????? %d."
 
-#: src/reports.c:56
+#: src/reports.c:58
 #, c-format
 msgid "Your secret password is \"%s\""
-msgstr ""
+msgstr "??? ?????? \"%s\""
 
-#: src/reports.c:57
+#: src/reports.c:59
 #, c-format
 msgid "%d of %d Klingons have been killed"
-msgstr ""
+msgstr "%d ?? %d ????????? ?????"
 
-#: src/reports.c:58
+#: src/reports.c:60
 #, c-format
 msgid ", including %d Commander%s."
 msgstr ", ??????? %d ?????????%s."
 
-#: src/reports.c:58 src/reports.c:81 src/reports.c:87 src/reports.c:110
+#: src/reports.c:60 src/reports.c:83 src/reports.c:89 src/reports.c:112
 msgid "s"
 msgstr "(??)"
 
-#: src/reports.c:59
+#: src/reports.c:61
 msgid ", but no Commanders."
 msgstr ", ?? ??? ??????????."
 
-#: src/reports.c:61
+#: src/reports.c:63
 #, c-format
 msgid "The Super Commander has %sbeen destroyed."
 msgstr "????-??? %s??? ?????????."
 
-#: src/reports.c:62
+#: src/reports.c:64
 msgid "not "
 msgstr "?? "
 
-#: src/reports.c:64
+#: src/reports.c:66
 msgid "There "
 msgstr " "
 
-#: src/reports.c:65
+#: src/reports.c:67
 msgid "has been 1 base"
 msgstr "1 ???"
 
-#: src/reports.c:67
+#: src/reports.c:69
 #, c-format
 msgid "have been %d bases"
 msgstr "%d ???"
 
-#: src/reports.c:69
+#: src/reports.c:71
 #, c-format
 msgid " destroyed, %d remaining."
 msgstr " ??????????, %d ????????."
 
-#: src/reports.c:71
+#: src/reports.c:73
 #, c-format
 msgid "There are %d bases."
 msgstr "???????? %d ???."
 
-#: src/reports.c:78
+#: src/reports.c:80
 #, c-format
 msgid "%d casualt%s suffered so far."
 msgstr "%d ????????????%s ??? ??????.\""
 
-#: src/reports.c:80
+#: src/reports.c:82
 #, c-format
 msgid "There were %d call%s for help."
-msgstr ""
+msgstr "?? ??????? %d ?????%s ????."
 
-#: src/reports.c:83
+#: src/reports.c:85
 msgid "You have "
 msgstr "? ??? "
 
-#: src/reports.c:85
+#: src/reports.c:87
 msgid "no"
 msgstr "???????????"
 
-#: src/reports.c:86
+#: src/reports.c:88
 msgid " deep space probe"
 msgstr " ???????????? ??????????? ??????"
 
-#: src/reports.c:93
+#: src/reports.c:95
 msgid "An armed deep space probe is in"
 msgstr "???????????? ??????????? ?????? ? ??????? ??????? ?????? ?"
 
-#: src/reports.c:95
+#: src/reports.c:97
 msgid "A deep space probe is in"
 msgstr "???????????? ??????????? ?????? ?????? ?"
 
-#: src/reports.c:101
+#: src/reports.c:103
 msgid "Dilithium crystals aboard ship... not yet used."
 msgstr "????????? ??????? ?? ?????... ???? ?? ??????????????."
 
-#: src/reports.c:109
+#: src/reports.c:111
 #, c-format
 msgid "Dilithium crystals have been used %d time%s."
 msgstr "????????? ??????? ?????????????? %d ???%s."
 
-#: src/reports.c:123
+#: src/reports.c:126
 msgid "LONG-RANGE SENSORS DAMAGED."
 msgstr "??????? ???????? ?????? ???????."
 
-#: src/reports.c:126
+#: src/reports.c:129
 msgid "Starbase's long-range scan"
 msgstr "??????? ????? ? ????"
 
-#: src/reports.c:129
+#: src/reports.c:132
 msgid "Long-range scan"
 msgstr "??????? ?????"
 
-#: src/reports.c:160
+#: src/reports.c:165
 msgid "DEVICE            -REPAIR TIMES-"
 msgstr "??????????        -????? ???????-"
 
-#: src/reports.c:161
+#: src/reports.c:166
 msgid "                IN FLIGHT   DOCKED"
 msgstr "                ? ??????    ????????????"
 
-#: src/reports.c:170
+#: src/reports.c:175
 msgid "All devices functional."
 msgstr "??? ?????????? ? ???????."
 
-#: src/reports.c:196
+#: src/reports.c:202
 msgid "Spock-  \"I revised the Star Chart from the starbase's records.\""
 msgstr "????- \"? ??????? ???????? ????? ?? ??????? ? ????.\""
 
-#: src/reports.c:200
+#: src/reports.c:206
 msgid "       STAR CHART FOR THE KNOWN GALAXY"
 msgstr "       ???????? ????? ????????????? ????????"
 
-#: src/reports.c:202
+#: src/reports.c:208
 #, c-format
 msgid "(Last surveillance update %d stardates ago)."
-msgstr ""
+msgstr "(????????? ?????????? ???? %d ???? ?????)."
 
-#: src/reports.c:260
+#: src/reports.c:268
 #, c-format
 msgid "Stardate      %.1f, Time Left %.2f"
-msgstr ""
+msgstr "?????       %.1f, ???????? %.2f"
 
+#: src/reports.c:273
+msgid "RED"
+msgstr "???????"
+
 #: src/reports.c:274
+msgid "GREEN"
+msgstr "???????"
+
+#: src/reports.c:275
+msgid "YELLOW"
+msgstr "??????"
+
+#: src/reports.c:276
+msgid "DOCKED"
+msgstr "????????"
+
+#: src/reports.c:277
+msgid "DEAD"
+msgstr "?????"
+
+#: src/reports.c:282
 #, c-format
 msgid "Condition     %s, %i DAMAGES"
-msgstr ""
+msgstr "?????????     %s, %i ???????????"
 
-#: src/reports.c:277
+#: src/reports.c:285
 #, c-format
 msgid "Position      %d - %d , %d - %d"
-msgstr ""
+msgstr "?????????      %d - %d , %d - %d"
 
-#: src/reports.c:281
+#: src/reports.c:289
 msgid "Life Support  "
-msgstr ""
+msgstr "????????????????  "
 
-#: src/reports.c:284
+#: src/reports.c:292
 msgid "DAMAGED, Base provides"
-msgstr ""
+msgstr "???????, ???? ????????????"
 
-#: src/reports.c:286
+#: src/reports.c:294
 #, c-format
 msgid "DAMAGED, reserves=%4.2f"
-msgstr ""
+msgstr "???????, ????????=%4.2f"
 
-#: src/reports.c:289
+#: src/reports.c:297
 msgid "ACTIVE"
-msgstr ""
+msgstr "????????"
 
-#: src/reports.c:292
+#: src/reports.c:300
 #, c-format
 msgid "Warp Factor   %.1f"
 msgstr "????????    %.1f"
 
-#: src/reports.c:295
+#: src/reports.c:303
 #, c-format
 msgid "Energy        %.2f"
-msgstr ""
+msgstr "???????        %.2f"
 
-#: src/reports.c:297
+#: src/reports.c:305
 msgid " (have crystals)"
-msgstr ""
+msgstr " (???? ?????????)"
 
-#: src/reports.c:300
+#: src/reports.c:308
 #, c-format
 msgid "Torpedoes     %d"
 msgstr "???????      %d"
 
-#: src/reports.c:303
+#: src/reports.c:311
 msgid "Shields       "
 msgstr "??????        "
 
-#: src/reports.c:305
+#: src/reports.c:313
 msgid "DAMAGED,"
 msgstr "???????,"
 
-#: src/reports.c:307
+#: src/reports.c:315
 msgid "UP,"
 msgstr "???????,"
 
-#: src/reports.c:309
+#: src/reports.c:317
 msgid "DOWN,"
 msgstr "?????,"
 
-#: src/reports.c:310
+#: src/reports.c:318
 #, c-format
 msgid " %d%% %.1f units"
-msgstr ""
+msgstr " %d%% %.1f ??????"
 
-#: src/reports.c:314
+#: src/reports.c:322
 #, c-format
 msgid "Klingons Left %d"
-msgstr ""
+msgstr "???????? %d ?????????"
 
-#: src/reports.c:320
+#: src/reports.c:328
 #, c-format
 msgid "Major system  %s"
-msgstr ""
+msgstr "???????? ???????  %s"
 
-#: src/reports.c:322
+#: src/reports.c:330
 msgid "Sector is uninhabited"
-msgstr ""
+msgstr "?????? ?????????"
 
-#: src/reports.c:344
+#: src/reports.c:354
 msgid "   S.R. SENSORS DAMAGED!"
-msgstr ""
+msgstr "   ??????? ?.?. ???????!"
 
-#: src/reports.c:348
+#: src/reports.c:358
 msgid "  [Using Base's sensors]"
-msgstr ""
+msgstr "  [???????????? ??????? ????]"
 
-#: src/reports.c:350
+#: src/reports.c:360
 msgid "     Short-range scan"
-msgstr ""
+msgstr "     ??????? ?????"
 
-#: src/reports.c:365
+#: src/reports.c:375
 msgid "Information desired? "
-msgstr ""
+msgstr "????? ?????????? ???????? "
 
-#: src/reports.c:371
+#: src/reports.c:381
 msgid "UNRECOGNIZED REQUEST. Legal requests are:"
-msgstr ""
+msgstr "?????? ?? ????. ????????? ???????:"
 
-#: src/reports.c:372
-msgid "  date, condition, position, lsupport, warpfactor,"
-msgstr ""
-
-#: src/reports.c:373
-msgid "  energy, torpedoes, shields, klingons, time, system, bases."
-msgstr ""
-
-#: src/reports.c:412
+#: src/reports.c:422
 msgid "COMPUTER DAMAGED, USE A POCKET CALCULATOR."
-msgstr ""
+msgstr "?????????? ??????, ?????????????? ?????????????."
 
-#: src/reports.c:419
+#: src/reports.c:429
 msgid "Destination quadrant and/or sector? "
 msgstr "???????? ?????????? ?/??? ??????? "
 
-#: src/reports.c:454
+#: src/reports.c:464
 msgid "Answer \"no\" if you don't know the value:"
-msgstr ""
+msgstr "????????? \"no\" ???? ?? ??????:"
 
-#: src/reports.c:457
+#: src/reports.c:467
 msgid "Time or arrival date? "
-msgstr ""
+msgstr "????? ?????????"
 
-#: src/reports.c:463
+#: src/reports.c:473
 msgid "We'll never make it, sir."
-msgstr ""
+msgstr "?? ??? ?? ?????????, ???."
 
-#: src/reports.c:471
+#: src/reports.c:481
 msgid "Warp factor? "
 msgstr "????????? "
 
-#: src/reports.c:481
+#: src/reports.c:491
 msgid "Captain, certainly you can give me one of these."
-msgstr ""
+msgstr "???????, ?? ????? ????? ??????? ???? ?? ????????."
 
-#: src/reports.c:488
+#: src/reports.c:498
 msgid "Insufficient energy, sir."
 msgstr "?? ??????? ???????, ???."
 
-#: src/reports.c:491 src/reports.c:533
+#: src/reports.c:501 src/reports.c:543
 msgid "New warp factor to try? "
 msgstr "??????????? ?????? ????????? "
 
-#: src/reports.c:507
+#: src/reports.c:517
 msgid "But if you lower your shields,"
 msgstr "?? ???? ?? ??????? ??????,"
 
-#: src/reports.c:508
+#: src/reports.c:518
 msgid "remaining"
 msgstr "???????"
 
-#: src/reports.c:512
+#: src/reports.c:522
 msgid "Remaining"
 msgstr "???????"
 
-#: src/reports.c:513
+#: src/reports.c:523
 #, c-format
 msgid " energy will be %.2f."
 msgstr " ??????? ????? %.2f."
 
-#: src/reports.c:515
+#: src/reports.c:525
 #, c-format
 msgid "And we will arrive at stardate %.2f."
 msgstr "? ?? ???????? %.2f ?????."
 
-#: src/reports.c:519
+#: src/reports.c:529
 msgid "Any warp speed is adequate."
-msgstr ""
+msgstr "?? ????? ???????? ??????."
 
-#: src/reports.c:521
+#: src/reports.c:531
 #, c-format
 msgid "Minimum warp needed is %.2f,"
-msgstr ""
+msgstr "??????????? ??????????? ???????? - %.2f,"
 
-#: src/reports.c:522
+#: src/reports.c:532
 #, c-format
 msgid "and we will arrive at stardate %.2f."
 msgstr "? ?? ???????? %.2f ?????."
 
-#: src/reports.c:526
+#: src/reports.c:536
 msgid "Unfortunately, the Federation will be destroyed by then."
-msgstr "? ?????????, ????????? ? ???? ??????? ??? ????? ??????????."
+msgstr "? ?????????, ????????? ? ???? ??????? ????? ??? ??????????."
 
-#: src/reports.c:528
+#: src/reports.c:538
 msgid "You'll be taking risks at that speed, Captain"
-msgstr ""
+msgstr "?? ????? ???????? ?????? ?????????, ???????"
 
-#: src/reports.c:532
+#: src/reports.c:542
 msgid "The starbase there will be destroyed by then."
 msgstr "???? ? ???? ??????? ??? ????? ??????????."
+
+#: src/setup.c:15
+msgid "-SUPER- STAR TREK"
+msgstr "-?????- ???????? ????"
+
+#: src/setup.c:18
+msgid "Latest update-21 Sept 78"
+msgstr "????????? ?????????? - 21 ??? 78"
+
+#: src/setup.c:33 src/setup.c:66
+msgid "File name: "
+msgstr "??? ?????: "
+
+#: src/setup.c:46
+msgid "Can't freeze game as file "
+msgstr "?? ???? ????????? ???? ? "
+
+#: src/setup.c:78
+msgid "Can't find game file "
+msgstr "?? ???? ????? ???? "
+
+#: src/setup.c:85
+msgid "Game file format is bad, should begin with "
+msgstr "???? ? ????? ????????, ?? ?????? ??? ?????????? ? "
+
+#: src/setup.c:109
+msgid "Andoria (Fesoan)"
+msgstr ""
+
+#: src/setup.c:110
+msgid "Tellar Prime (Miracht)"
+msgstr ""
+
+#: src/setup.c:111
+msgid "Vulcan (T'Khasi)"
+msgstr ""
+
+#: src/setup.c:112
+msgid "Medusa"
+msgstr "??????"
+
+#: src/setup.c:113
+msgid "Argelius II (Nelphia)"
+msgstr ""
+
+#: src/setup.c:114
+msgid "Ardana"
+msgstr "??????"
+
+#: src/setup.c:115
+msgid "Catulla (Cendo-Prae)"
+msgstr ""
+
+#: src/setup.c:116
+msgid "Gideon"
+msgstr "??????"
+
+#: src/setup.c:117
+msgid "Aldebaran III"
+msgstr "?????????? 3"
+
+#: src/setup.c:118
+msgid "Alpha Majoris I"
+msgstr ""
+
+#: src/setup.c:119
+msgid "Altair IV"
+msgstr "??????? 4"
+
+#: src/setup.c:120
+msgid "Ariannus"
+msgstr ""
+
+#: src/setup.c:121
+msgid "Benecia"
+msgstr ""
+
+#: src/setup.c:122
+msgid "Beta Niobe I (Sarpeidon)"
+msgstr ""
+
+#: src/setup.c:123
+msgid "Alpha Carinae II"
+msgstr ""
+
+#: src/setup.c:124
+msgid "Capella IV (Kohath)"
+msgstr ""
+
+#: src/setup.c:125
+msgid "Daran V"
+msgstr ""
+
+#: src/setup.c:126
+msgid "Deneb II"
+msgstr ""
+
+#: src/setup.c:127
+msgid "Eminiar VII"
+msgstr ""
+
+#: src/setup.c:128
+msgid "Gamma Canaris IV"
+msgstr ""
+
+#: src/setup.c:129
+msgid "Gamma Tranguli VI (Vaalel)"
+msgstr ""
+
+#: src/setup.c:130
+msgid "Ingraham B"
+msgstr ""
+
+#: src/setup.c:131
+msgid "Janus IV"
+msgstr ""
+
+#: src/setup.c:132
+msgid "Makus III"
+msgstr ""
+
+#: src/setup.c:133
+msgid "Marcos XII"
+msgstr ""
+
+#: src/setup.c:134
+msgid "Omega IV"
+msgstr "????? 4"
+
+#: src/setup.c:135
+msgid "Regulus V"
+msgstr ""
+
+#: src/setup.c:136
+msgid "Deneva"
+msgstr ""
+
+#: src/setup.c:138
+msgid "Rigel II"
+msgstr ""
+
+#: src/setup.c:139
+msgid "Beta III"
+msgstr "???? 3"
+
+#: src/setup.c:140
+msgid "Triacus"
+msgstr ""
+
+#: src/setup.c:141
+msgid "Exo III"
+msgstr ""
+
+#: src/setup.c:144
+msgid "Hansen's Planet"
+msgstr ""
+
+#: src/setup.c:145
+msgid "Taurus IV"
+msgstr ""
+
+#: src/setup.c:146
+msgid "Antos IV (Doraphane)"
+msgstr ""
+
+#: src/setup.c:147
+msgid "Izar"
+msgstr ""
+
+#: src/setup.c:148
+msgid "Tiburon"
+msgstr ""
+
+#: src/setup.c:149
+msgid "Merak II"
+msgstr ""
+
+#: src/setup.c:150
+msgid "Coridan (Desotriana)"
+msgstr ""
+
+#: src/setup.c:151
+msgid "Iotia"
+msgstr "?????"
+
+#: src/setup.c:156
+msgid "S. R. Sensors"
+msgstr "??????? ?. ?."
+
+#: src/setup.c:157
+msgid "L. R. Sensors"
+msgstr "??????? ?. ?."
+
+#: src/setup.c:158
+msgid "Phasers"
+msgstr "??????"
+
+#: src/setup.c:159
+msgid "Photon Tubes"
+msgstr "???????? ?????"
+
+#: src/setup.c:160
+msgid "Life Support"
+msgstr "????????????????"
+
+#: src/setup.c:161
+msgid "Warp Engines"
+msgstr "??????????????????? ?????????"
+
+#: src/setup.c:162
+msgid "Impulse Engines"
+msgstr "?????????? ?????????"
+
+#: src/setup.c:163
+msgid "Shields"
+msgstr "??????"
+
+#: src/setup.c:164
+msgid "Subspace Radio"
+msgstr "??????????????????? ?????"
+
+#: src/setup.c:165
+msgid "Shuttle Craft"
+msgstr "??????"
+
+#: src/setup.c:166
+msgid "Computer"
+msgstr "?????????"
+
+#: src/setup.c:167
+msgid "Navigation System"
+msgstr ""
+
+#: src/setup.c:168
+msgid "Transporter"
+msgstr "???????????"
+
+#: src/setup.c:169
+msgid "Shield Control"
+msgstr "?????????? ???????"
+
+#: src/setup.c:170
+msgid "Death Ray"
+msgstr "??? ??????"
+
+#: src/setup.c:171
+msgid "D. S. Probe"
+msgstr "?. ?. ??????"
+
+#: src/setup.c:277
+#, c-format
+msgid "=== Abandoning base #%d at %d-%d"
+msgstr ""
+
+#: src/setup.c:282
+#, c-format
+msgid "=== Saving base #%d, close to #%d"
+msgstr ""
+
+#: src/setup.c:374
+#, c-format
+msgid "It is stardate %d. The Federation is being attacked by"
+msgstr "??????? %d ?????. ????????? ?????????"
+
+#: src/setup.c:376
+msgid "a deadly Klingon invasion force. As captain of the United"
+msgstr "???????????? ???????????? ??????????. ??? ???????"
+
+#: src/setup.c:377
+msgid "Starship U.S.S. Enterprise, it is your mission to seek out"
+msgstr "?????????? ??????????, ?? ?????? ?????"
+
+#: src/setup.c:378
+#, c-format
+msgid "and destroy this invasion force of %d battle cruisers."
+msgstr "? ?????????? ??? ?????????? ?????? ? ??????? %d ?????? ?????????."
+
+#: src/setup.c:380
+#, c-format
+msgid "You have an initial allotment of %d stardates to complete"
+msgstr "? ??? ???? %d ???? ????? ?????????"
+
+#: src/setup.c:381
+msgid "your mission.  As you proceed you may be given more time."
+msgstr "??? ??????.  ?? ???? ???? ??? ????? ???? ??? ???????."
+
+#: src/setup.c:383
+#, c-format
+msgid "You will have %d supporting starbases."
+msgstr "? ??? ????? %d ???."
+
+#: src/setup.c:384
+msgid "Starbase locations-  "
+msgstr "?????????? ???-  "
+
+#: src/setup.c:387
+#, c-format
+msgid "Stardate %d."
+msgstr "????? %d."
+
+#: src/setup.c:389
+#, c-format
+msgid "%d Klingons."
+msgstr "%d ?????????."
+
+#: src/setup.c:390
+msgid "An unknown number of Romulans."
+msgstr "????????? ???????."
+
+#: src/setup.c:391
+msgid "And one (GULP) Super-Commander."
+msgstr "? ???? (??!) ????-??? ?????????."
+
+#: src/setup.c:392
+#, c-format
+msgid "%d stardates."
+msgstr "%d ????."
+
+#: src/setup.c:393
+#, c-format
+msgid "%d starbases in "
+msgstr "%d ??? ? "
+
+#: src/setup.c:400
+msgid "The Enterprise is currently in "
+msgstr "?????????? ?????? ? "
+
+#: src/setup.c:405
+msgid "Good Luck!"
+msgstr "?????!"
+
+#: src/setup.c:406
+msgid "  YOU'LL NEED IT."
+msgstr "  ??? ??? ???????????."
+
+#: src/setup.c:422
+msgid "Would you like a regular, tournament, or saved game? "
+msgstr "?????? ??????? (r), ????????? (t), ??? ??????????? (s) ????? "
+
+#: src/setup.c:427
+msgid "Type in tournament number-"
+msgstr "??????? ????? ???????-"
+
+#: src/setup.c:448 src/setup.c:464 src/setup.c:494
+msgid "What is \""
+msgstr "??? ?? \""
+
+#: src/setup.c:471
+msgid "Would you like a Short, Medium, or Long game? "
+msgstr "?????? ???????? (s), ??????? (m), ??? ??????? (l) ????? "
+
+#: src/setup.c:472
+msgid "Are you a Novice, Fair, Good, Expert, or Emeritus player? "
+msgstr ""
+"?? ??????? (n), ??????? (f), ?????? (g), ?????????? (e), ??? ????????? (em)? "
+
+#: src/setup.c:478
+msgid "Choose your game style (or just press enter): "
+msgstr "???????? ????? ???? (??? ??????? ????): "
+
+#: src/setup.c:655
+msgid "LT. Uhura- \"Captain, an urgent message."
+msgstr "??. ?????- \"???????, ??????? ?????????."
+
+#: src/setup.c:656
+msgid "  I'll put it on audio.\"  CLICK"
+msgstr "  ? ?????? ??? ?? ????????????????.\"  ????"
+
+#: src/setup.c:658
+msgid "INTRUDER! YOU HAVE VIOLATED THE ROMULAN NEUTRAL ZONE."
+msgstr "?????! ?? ??????? ??????? ?????????? ???????."
+
+#: src/setup.c:659
+msgid "LEAVE AT ONCE, OR YOU WILL BE DESTROYED!"
+msgstr "?????? ??????????, ??? ?????? ?????????!"
+
+#: src/setup.c:676
+msgid "Mr. Spock- \"Captain, this is most unusual."
+msgstr "?????? ????- \"???????, ??? ???-?? ????? ?????????."
+
+#: src/setup.c:677
+msgid "    Please examine your short-range scan.\""
+msgstr "    ?????????? ?????????? ?????????? ???????? ????????????.\""
+
+#: src/setup.c:767
+msgid "Please type in a secret password-"
+msgstr "?????????? ???????? ??????-"
+
+#: src/sst.c:288
+msgid "LEGAL COMMANDS ARE:"
+msgstr "????????? ???????:"
+
+#: src/sst.c:313
+msgid "Help on what command? "
+msgstr "??????? ?? ????? ???????? "
+
+#: src/sst.c:343
+msgid "Spock-  \"Captain, that information is missing from the"
+msgstr "????- \"???????, ????? ?????????? ??? ?"
+
+#: src/sst.c:344
+msgid "   computer. You need to find "
+msgstr "   ??????????. ??? ???? ????? "
+
+#: src/sst.c:346
+msgid " and put it in the"
+msgstr "? ????????? ??? ?"
+
+#: src/sst.c:347
+msgid "   current directory or to "
+msgstr "   ??????? ??????? ??? ? "
+
+#: src/sst.c:358
+msgid "Spock- \"Captain, there is no information on that command.\""
+msgstr "????- \"???????, ?? ??? ??????? ??? ??????????.\""
+
+#: src/sst.c:372
+msgid "Spock- \"Captain, I've found the following information:\""
+msgstr "????- \"???????, ? ????? ???-????? ??????????:\""
+
+#: src/sst.c:543
+msgid "WARNING--Saved games produce no plaques!"
+msgstr "??????????????--??????????? ???? ?? ???? ???????!"
+
+#: src/sst.c:661
+msgid "Do you want your score recorded?"
+msgstr "?????? ???????? ???? ????? "
+
+#: src/sst.c:667
+msgid "Do you want to play again? "
+msgstr "?????? ??????? ?????? "
+
+#: src/sst.c:671
+msgid "May the Great Bird of the Galaxy roost upon your home planet."
+msgstr "? ????? ??????? ????? ????????? ??????? ?? ???? ???????."
+
+#: src/sst.c:683
+msgid "Romulan"
+msgstr "???????"
+
+#: src/sst.c:684
+msgid "Klingon"
+msgstr "???????"
+
+#: src/sst.c:685
+msgid "Commander"
+msgstr "????????"
+
+#: src/sst.c:686
+msgid "Super-commander"
+msgstr "????-???"
+
+#: src/sst.c:687
+msgid "Star"
+msgstr "??????"
+
+#: src/sst.c:688
+msgid "Planet"
+msgstr "???????"
+
+#: src/sst.c:689
+msgid "Starbase"
+msgstr "????"
+
+#: src/sst.c:690
+msgid "Black hole"
+msgstr "?????? ????"
+
+#: src/sst.c:691
+msgid "Tholian"
+msgstr "??????"
+
+#: src/sst.c:692
+msgid "Tholian web"
+msgstr "?????????? ????"
+
+#: src/sst.c:693
+msgid "Stranger"
+msgstr "????????"
+
+#: src/sst.c:694
+msgid "Inhabited World"
+msgstr "????????? ???"
+
+#: src/sst.c:705
+msgid "Quadrant "
+msgstr "???????? "
+
+#: src/sst.c:706
+msgid "Sector "
+msgstr "?????? "
+
+#: src/sst.c:716
+msgid " at "
+msgstr " ? "
+
+#: src/sst.c:725
+msgid "Enterprise"
+msgstr "??????????"
+
+#: src/sst.c:726
+msgid "Faerie Queene"
+msgstr "????????? ????????"
+
+#: src/sst.c:835
+msgid "Please answer with \"y\" or \"n\": "
+msgstr "?????????? ????????? ?? (\"y\") ??? ??? (\"n\"): "
+
+#: src/sst.c:844
+msgid "Beg your pardon, Captain?"
+msgstr "????? ????????, ????????"
+
+#~ msgid "You must be aboard the ship."
+#~ msgstr "?? ?????? ???? ?? ????? ???????."

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-20 16:29:48 UTC (rev 616)
+++ trunk/src/battle.c	2006-09-20 16:42:35 UTC (rev 617)
@@ -407,8 +407,8 @@
 		/* captain perishes on planet */
 		finish(FDPLANET);
 	    }
-	    prout("You have just destroyed an inhabited planet.");
-	    prout("Celebratory rallies are being held on the Klingon homeworld.");
+	    prout(_("You have just destroyed an inhabited planet."));
+	    prout(_("Celebratory rallies are being held on the Klingon homeworld."));
 	    return;
 	case IHSTAR: /* Hit a star */
 	    if (Rand() > 0.10) {
@@ -1087,7 +1087,7 @@
 		irec+=fabs(game.kpower[i])/(PHASEFAC*pow(0.90,game.kdist[i]))*
 		    (1.01+0.05*Rand()) + 1.0;
 	    kz=1;
-	    proutn(_("(%d) units required. "), irec);
+	    proutn(_("%d units required. "), irec);
 	    chew();
 	    proutn(_("Units to fire= "));
 	    key = scan();

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-20 16:29:48 UTC (rev 616)
+++ trunk/src/events.c	2006-09-20 16:42:35 UTC (rev 617)
@@ -453,7 +453,7 @@
 	    if (!damaged(DRADIO) || game.condition == docked)
 	    {
 		prout("Uhura- Captain, %s in %s reports it is under attack",
-		      systemname(q->planet), cramlc(quadrant, w));
+		      systnames[q->planet], cramlc(quadrant, w));
 		prout("by a Klingon invasion fleet.");
 		if (cancelrest())
 		    return;
@@ -477,7 +477,7 @@
 	    if (!damaged(DRADIO) || game.condition == docked)
 	    {
 		prout("Uhura- We've lost contact with starsystem %s",
-		      systemname(q->planet));
+		      systnames[q->planet]);
 		prout("in %s.\n", cramlc(quadrant, ev->quadrant));
 	    }
 	    break;
@@ -531,11 +531,11 @@
 	    {
 		if (same(game.quadrant, w)) {
 		    prout("Spock- sensors indicate the Klingons have");
-		    prout("launched a warship from %s.",systemname(q->planet));
+		    prout("launched a warship from %s.", systnames[q->planet]);
 		} else {
 		    prout("Uhura- Starfleet reports increased Klingon activity");
 		    if (q->planet != NOPLANET)
-			proutn("near %s", systemname(q->planet));
+			proutn("near %s", systnames[q->planet]);
 		    prout("in %s.\n", cramlc(quadrant, w));
 		}
 	    }

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-09-20 16:29:48 UTC (rev 616)
+++ trunk/src/io.c	2006-09-20 16:42:35 UTC (rev 617)
@@ -19,12 +19,12 @@
 /* wrap up, either normally or due to signal */
 {
     if (game.options & OPTION_CURSES) {
-	clear();
-	curs_set(1);
-	(void)refresh();
-	(void)resetterm();
-	//(void)echo();
-	(void)endwin();
+	//clear();
+	//curs_set(1);
+	//refresh();
+	//resetterm();
+	//echo();
+	endwin();
 	putchar('\n');
     }
     if (logfp)

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-20 16:29:48 UTC (rev 616)
+++ trunk/src/moving.c	2006-09-20 16:42:35 UTC (rev 617)
@@ -270,9 +270,7 @@
 	
     if (game.landed && !isprobe) {
 	prout(_("Dummy! You can't leave standard orbit until you"));
-	proutn(_("are back aboard the "));
-	crmshp();
-	prout(".");
+	proutn(_("are back aboard the ship."));
 	chew();
 	return;
     }
@@ -1036,3 +1034,137 @@
     skip(1);
     prout(_("Lt. Uhura-  \"Captain, we made it!\""));
 }
+
+/*
+**  Abandon Ship
+**
+**	The ship is abandoned.  If your current ship is the Faire
+**	Queene, or if your shuttlecraft is dead, you're out of
+**	luck.  You need the shuttlecraft in order for the captain
+**	(that's you!!) to escape.
+**
+**	Your crew can beam to an inhabited starsystem in the
+**	quadrant, if there is one and if the transporter is working.
+**	If there is no inhabited starsystem, or if the transporter
+**	is out, they are left to die in outer space.
+**
+**	If there are no starbases left, you are captured by the
+**	Klingons, who torture you mercilessly.  However, if there
+**	is at least one starbase, you are returned to the
+**	Federation in a prisoner of war exchange.  Of course, this
+**	can't happen unless you have taken some prisoners.
+**
+*/
+
+void abandn(void) 
+/* abandon ship */
+{
+    int nb, l;
+    struct quadrant *q;
+
+    chew();
+    if (game.condition==docked) {
+	if (game.ship!=IHE) {
+	    prout(_("You cannot abandon Ye Faerie Queene."));
+	    return;
+	}
+    }
+    else {
+	/* Must take shuttle craft to exit */
+	if (game.damage[DSHUTTL]==-1) {
+	    prout(_("Ye Faerie Queene has no shuttle craft."));
+	    return;
+	}
+	if (game.damage[DSHUTTL]<0) {
+	    prout(_("Shuttle craft now serving Big Macs."));
+	    return;
+	}
+	if (game.damage[DSHUTTL]>0) {
+	    prout(_("Shuttle craft damaged."));
+	    return;
+	}
+	if (game.landed) {
+	    prout(_("You must be aboard the Enterprise."));
+	    return;
+	}
+	if (game.iscraft != onship) {
+	    prout(_("Shuttle craft not currently available."));
+	    return;
+	}
+	/* Print abandon ship messages */
+	skip(1);
+	prouts(_("***ABANDON SHIP!  ABANDON SHIP!"));
+	skip(1);
+	prouts(_("***ALL HANDS ABANDON SHIP!"));
+	skip(2);
+	prout(_("Captain and crew escape in shuttle craft."));
+	if (game.state.rembase==0) {
+	    /* Oops! no place to go... */
+	    finish(FABANDN);
+	    return;
+	}
+	q = &game.state.galaxy[game.quadrant.x][game.quadrant.y];
+	/* Dispose of crew */
+	if (!(game.options & OPTION_WORLDS) && !damaged(DTRANSP)) {
+	    prout(_("Remainder of ship's complement beam down"));
+	    prout(_("to nearest habitable planet."));
+	} else if (q->planet != NOPLANET && !damaged(DTRANSP)) {
+	    prout(_("Remainder of ship's complement beam down"));
+	    prout(_("to %s."), systnames[q->planet]);
+	} else {
+	    prout(_("Entire crew of %d left to die in outer space."));
+	    game.casual += game.state.crew;
+	    game.abandoned += game.state.crew;
+	}
+
+	/* If at least one base left, give 'em the Faerie Queene */
+	skip(1);
+	game.icrystl = false; /* crystals are lost */
+	game.nprobes = 0; /* No probes */
+	prout(_("You are captured by Klingons and released to"));
+	prout(_("the Federation in a prisoner-of-war exchange."));
+	nb = Rand()*game.state.rembase+1;
+	/* Set up quadrant and position FQ adjacient to base */
+	if (!same(game.quadrant, game.state.baseq[nb])) {
+	    game.quadrant = game.state.baseq[nb];
+	    game.sector.x = game.sector.y = 5;
+	    newqad(true);
+	}
+	for (;;) {
+	    /* position next to base by trial and error */
+	    game.quad[game.sector.x][game.sector.y] = IHDOT;
+	    for_sectors(l) {
+		game.sector.x = 3.0*Rand() - 1.0 + game.base.x;
+		game.sector.y = 3.0*Rand() - 1.0 + game.base.y;
+		if (VALID_SECTOR(game.sector.x, game.sector.y) &&
+		    game.quad[game.sector.x][game.sector.y] == IHDOT) break;
+	    }
+	    if (l < QUADSIZE+1) break; /* found a spot */
+	    game.sector.x=QUADSIZE/2;
+	    game.sector.y=QUADSIZE/2;
+	    newqad(true);
+	}
+    }
+    /* Get new commission */
+    game.quad[game.sector.x][game.sector.y] = game.ship = IHF;
+    game.state.crew = FULLCREW;
+    prout(_("Starfleet puts you in command of another ship,"));
+    prout(_("the Faerie Queene, which is antiquated but,"));
+    prout(_("still useable."));
+    if (game.icrystl) prout(_("The dilithium crystals have been moved."));
+    game.imine = false;
+    game.iscraft = offship; /* Galileo disappears */
+    /* Resupply ship */
+    game.condition=docked;
+    for (l = 0; l < NDEVICES; l++) 
+	game.damage[l] = 0.0;
+    game.damage[DSHUTTL] = -1;
+    game.energy = game.inenrg = 3000.0;
+    game.shield = game.inshld = 1250.0;
+    game.torps = game.intorps = 6;
+    game.lsupres=game.inlsr=3.0;
+    game.shldup=false;
+    game.warpfac=5.0;
+    game.wfacsq=25.0;
+    return;
+}

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-20 16:29:48 UTC (rev 616)
+++ trunk/src/planets.c	2006-09-20 16:42:35 UTC (rev 617)
@@ -503,71 +503,3 @@
     finish(FTRIBBLE);
     return;
 }
-
-char *systemname(int pindx)
-/* return the name of a given solar system */
-{
-    static char copy[BUFSIZ];
-    /* the below array should not be static, or it won't gettextize
-     * because of the early initialization. */
-    char *names[NINHAB+1] =
-    {
-	/*
-	 * I used <http://www.memory-alpha.org> to find planets
-	 * with references in ST:TOS.  Eath and the Alpha Centauri
-	 * Colony have been omitted.
- 	 *
-	 * Some planets marked Class G and P here will be displayed as class M
-	 * because of the way planets are generated. This is a known bug.
-	 */
-	"ERROR",
-	// Federation Worlds
-	_("Andoria (Fesoan)"),	/* several episodes */
-	_("Tellar Prime (Miracht)"),	/* TOS: "Journey to Babel" */
-	_("Vulcan (T'Khasi)"),	/* many episodes */
-	_("Medusa"),		/* TOS: "Is There in Truth No Beauty?" */
-	_("Argelius II (Nelphia)"),/* TOS: "Wolf in the Fold" ("IV" in BSD) */
-	_("Ardana"),		/* TOS: "The Cloud Minders" */
-	_("Catulla (Cendo-Prae)"),	/* TOS: "The Way to Eden" */
-	_("Gideon"),		/* TOS: "The Mark of Gideon" */
-	_("Aldebaran III"),	/* TOS: "The Deadly Years" */
-	_("Alpha Majoris I"),	/* TOS: "Wolf in the Fold" */
-	_("Altair IV"),		/* TOS: "Amok Time */
-	_("Ariannus"),		/* TOS: "Let That Be Your Last Battlefield" */
-	_("Benecia"),		/* TOS: "The Conscience of the King" */
-	_("Beta Niobe I (Sarpeidon)"),	/* TOS: "All Our Yesterdays" */
-	_("Alpha Carinae II"),	/* TOS: "The Ultimate Computer" */
-	_("Capella IV (Kohath)"),	/* TOS: "Friday's Child" (Class G) */
-	_("Daran V"),		/* TOS: "For the World is Hollow and I Have Touched the Sky" */
-	_("Deneb II"),		/* TOS: "Wolf in the Fold" ("IV" in BSD) */
-	_("Eminiar VII"),		/* TOS: "A Taste of Armageddon" */
-	_("Gamma Canaris IV"),	/* TOS: "Metamorphosis" */
-	_("Gamma Tranguli VI (Vaalel)"),	/* TOS: "The Apple" */
-	_("Ingraham B"),		/* TOS: "Operation: Annihilate" */
-	_("Janus IV"),		/* TOS: "The Devil in the Dark" */
-	_("Makus III"),		/* TOS: "The Galileo Seven" */
-	_("Marcos XII"),		/* TOS: "And the Children Shall Lead", */
-	_("Omega IV"),		/* TOS: "The Omega Glory" */
-	_("Regulus V"),		/* TOS: "Amok Time */
-	_("Deneva"),		/* TOS: "Operation -- Annihilate!" */
-	/* Worlds from BSD Trek */
-	_("Rigel II"),		/* TOS: "Shore Leave" ("III" in BSD) */
-	_("Beta III"),		/* TOS: "The Return of the Archons" */
-	_("Triacus"),		/* TOS: "And the Children Shall Lead", */
-	_("Exo III"),		/* TOS: "What Are Little Girls Made Of?" (Class P) */
-#if 0
-	// Others
-	_("Hansen's Planet"),	/* TOS: "The Galileo Seven" */
-	_("Taurus IV"),		/* TOS: "The Galileo Seven" (class G) */
-	_("Antos IV (Doraphane)"),	/* TOS: "Whom Gods Destroy", "Who Mourns for Adonais?" */
-	_("Izar"),			/* TOS: "Whom Gods Destroy" */
-	_("Tiburon"),		/* TOS: "The Way to Eden" */
-	_("Merak II"),		/* TOS: "The Cloud Minders" */ 
-	_("Coridan (Desotriana)"),	/* TOS: "Journey to Babel" */
-	_("Iotia"),		/* TOS: "A Piece of the Action" */
-#endif
-    };
-
-    strcpy(copy, names[pindx]);
-    return copy;
-}

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-20 16:29:48 UTC (rev 616)
+++ trunk/src/reports.c	2006-09-20 16:42:35 UTC (rev 617)
@@ -35,24 +35,24 @@
     char *s1,*s2,*s3;
 
     chew();
-    s1 = (game.thawed?"thawed ":"");
+    s1 = (game.thawed?_("thawed "):"");
     switch (game.length) {
-    case 1: s2="short"; break;
-    case 2: s2="medium"; break;
-    case 4: s2="long"; break;
-    default: s2="unknown length"; break;
+    case 1: s2=_("short"); break;
+    case 2: s2=_("medium"); break;
+    case 4: s2=_("long"); break;
+    default: s2=_("unknown length"); break;
     }
     switch (game.skill) {
-    case SKILL_NOVICE: s3="novice"; break;
-    case SKILL_FAIR: s3="fair"; break;
-    case SKILL_GOOD: s3="good"; break;
-    case SKILL_EXPERT: s3="expert"; break;
-    case SKILL_EMERITUS: s3="emeritus"; break;
-    default: s3="skilled"; break;
+    case SKILL_NOVICE: s3=_("novice"); break;
+    case SKILL_FAIR: s3=_("fair"); break;
+    case SKILL_GOOD: s3=_("good"); break;
+    case SKILL_EXPERT: s3=_("expert"); break;
+    case SKILL_EMERITUS: s3=_("emeritus"); break;
+    default: s3=_("skilled"); break;
     }
     prout("");
-    prout(_("You %s playing a %s%s %s game."),
-	  game.alldone? _("were") : _("are now"), s1, s2, s3);
+    prout(_("You %s a %s%s %s game."),
+	  game.alldone? _("were playing") : _("are playing"), s1, s2, s3);
     if (game.skill>SKILL_GOOD && game.thawed && !game.alldone) prout(_("No plaque is allowed."));
     if (game.tourn) prout(_("This is tournament game %d."), game.tourn);
     prout(_("Your secret password is \"%s\""),game.passwd);
@@ -270,11 +270,11 @@
     case 2:
 	if (game.condition != docked) newcnd();
 	switch (game.condition) {
-	case red: cp = "RED"; break;
-	case green: cp = "GREEN"; break;
-	case yellow: cp = "YELLOW"; break;
-	case docked: cp = "DOCKED"; break;
-	case dead: cp="DEAD"; break;
+	case red: cp = _("RED"); break;
+	case green: cp = _("GREEN"); break;
+	case yellow: cp = _("YELLOW"); break;
+	case docked: cp = _("DOCKED"); break;
+	case dead: cp = _("DEAD"); break;
 	}
 	for (t=0;t<NDEVICES;t++)
 	    if (game.damage[t]>0) 
@@ -325,7 +325,7 @@
 	if (game.options & OPTION_WORLDS) {
 	    int plnet = game.state.galaxy[game.quadrant.x][game.quadrant.y].planet;
 	    if (plnet != NOPLANET && game.state.plnets[plnet].inhabited != UNINHABITED)
-		proutn(_("Major system  %s"), systemname(plnet));
+		proutn(_("Major system  %s"), systnames[plnet]);
 	    else
 		proutn(_("Sector is uninhabited"));
 	}
@@ -379,8 +379,8 @@
 		break;
 	if (req > sizeof(requests)/sizeof(requests[0])) {
 	    prout(_("UNRECOGNIZED REQUEST. Legal requests are:"));
-	    prout(_("  date, condition, position, lsupport, warpfactor,"));
-	    prout(_("  energy, torpedoes, shields, klingons, time, system, bases."));
+	    prout(("  date, condition, position, lsupport, warpfactor,"));
+	    prout(("  energy, torpedoes, shields, klingons, time, system, bases."));
 	    return;
 	}
 	// no break

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-20 16:29:48 UTC (rev 616)
+++ trunk/src/setup.c	2006-09-20 16:42:35 UTC (rev 617)
@@ -12,10 +12,10 @@
 /* issue a historically correct banner */
 {
     skip(2);
-    prout("-SUPER- STAR TREK");
+    prout(_("-SUPER- STAR TREK"));
     skip(1);
 #ifdef __HISTORICAL__
-    prout("Latest update-21 Sept 78");
+    prout(_("Latest update-21 Sept 78"));
     skip(1);
 #endif /* __HISTORICAL__ */
 }
@@ -63,7 +63,7 @@
 
     game.passwd[0] = '\0';
     if ((key = scan()) == IHEOL) {
-	proutn("File name: ");
+	proutn(_("File name: "));
 	key = scan();
     }
     if (key != IHALPHA) {
@@ -75,14 +75,15 @@
 	strcat(citem, ".trk");
     }
     if ((fp = fopen(citem, "rb")) == NULL) {
-	proutn("Can't find game file ");
+	proutn(_("Can't find game file "));
 	proutn(citem);
 	skip(1);
 	return 1;
     }
     fread(&game, sizeof(game), 1, fp);
     if (feof(fp) || ftell(fp) != filelength(fileno(fp)) || strcmp(game.magic, SSTMAGIC)) {
-	prout("Game file format is bad, should begin with " SSTMAGIC);
+	proutn(_("Game file format is bad, should begin with "));
+	prout(SSTMAGIC);
 	skip(1);
 	fclose(fp);
 	return 1;
@@ -93,138 +94,92 @@
     return false;
 }
 
-/*
-**  Abandon Ship
-**
-**	The ship is abandoned.  If your current ship is the Faire
-**	Queene, or if your shuttlecraft is dead, you're out of
-**	luck.  You need the shuttlecraft in order for the captain
-**	(that's you!!) to escape.
-**
-**	Your crew can beam to an inhabited starsystem in the
-**	quadrant, if there is one and if the transporter is working.
-**	If there is no inhabited starsystem, or if the transporter
-**	is out, they are left to die in outer space.
-**
-**	If there are no starbases left, you are captured by the
-**	Klingons, who torture you mercilessly.  However, if there
-**	is at least one starbase, you are returned to the
-**	Federation in a prisoner of war exchange.  Of course, this
-**	can't happen unless you have taken some prisoners.
-**
-*/
-
-void abandn(void) 
-/* abandon ship */
-{
-    int nb, l;
-    struct quadrant *q;
-
-    chew();
-    if (game.condition==docked) {
-	if (game.ship!=IHE) {
-	    prout("You cannot abandon Ye Faerie Queene.");
-	    return;
-	}
+#define SYSTEM_NAMES \
+    { \
+	/* \
+	 * I used <http://www.memory-alpha.org> to find planets \
+	 * with references in ST:TOS.  Eath and the Alpha Centauri \
+	 * Colony have been omitted. \
+ 	 * \
+	 * Some planets marked Class G and P here will be displayed as class M \
+	 * because of the way planets are generated. This is a known bug. \
+	 */ \
+	"ERROR", \
+	/* Federation Worlds */ \
+	_("Andoria (Fesoan)"),	/* several episodes */ \
+	_("Tellar Prime (Miracht)"),	/* TOS: "Journey to Babel" */ \
+	_("Vulcan (T'Khasi)"),	/* many episodes */ \
+	_("Medusa"),		/* TOS: "Is There in Truth No Beauty?" */ \
+	_("Argelius II (Nelphia)"),/* TOS: "Wolf in the Fold" ("IV" in BSD) */ \
+	_("Ardana"),		/* TOS: "The Cloud Minders" */ \
+	_("Catulla (Cendo-Prae)"),	/* TOS: "The Way to Eden" */ \
+	_("Gideon"),		/* TOS: "The Mark of Gideon" */ \
+	_("Aldebaran III"),	/* TOS: "The Deadly Years" */ \
+	_("Alpha Majoris I"),	/* TOS: "Wolf in the Fold" */ \
+	_("Altair IV"),		/* TOS: "Amok Time */ \
+	_("Ariannus"),		/* TOS: "Let That Be Your Last Battlefield" */ \
+	_("Benecia"),		/* TOS: "The Conscience of the King" */ \
+	_("Beta Niobe I (Sarpeidon)"),	/* TOS: "All Our Yesterdays" */ \
+	_("Alpha Carinae II"),	/* TOS: "The Ultimate Computer" */ \
+	_("Capella IV (Kohath)"),	/* TOS: "Friday's Child" (Class G) */ \
+	_("Daran V"),		/* TOS: "For the World is Hollow and I Have Touched the Sky" */ \
+	_("Deneb II"),		/* TOS: "Wolf in the Fold" ("IV" in BSD) */ \
+	_("Eminiar VII"),		/* TOS: "A Taste of Armageddon" */ \
+	_("Gamma Canaris IV"),	/* TOS: "Metamorphosis" */ \
+	_("Gamma Tranguli VI (Vaalel)"),	/* TOS: "The Apple" */ \
+	_("Ingraham B"),		/* TOS: "Operation: Annihilate" */ \
+	_("Janus IV"),		/* TOS: "The Devil in the Dark" */ \
+	_("Makus III"),		/* TOS: "The Galileo Seven" */ \
+	_("Marcos XII"),		/* TOS: "And the Children Shall Lead", */ \
+	_("Omega IV"),		/* TOS: "The Omega Glory" */ \
+	_("Regulus V"),		/* TOS: "Amok Time */ \
+	_("Deneva"),		/* TOS: "Operation -- Annihilate!" */ \
+	/* Worlds from BSD Trek */ \
+	_("Rigel II"),		/* TOS: "Shore Leave" ("III" in BSD) */ \
+	_("Beta III"),		/* TOS: "The Return of the Archons" */ \
+	_("Triacus"),		/* TOS: "And the Children Shall Lead", */ \
+	_("Exo III"),		/* TOS: "What Are Little Girls Made Of?" (Class P) */ \
     }
-    else {
-	/* Must take shuttle craft to exit */
-	if (game.damage[DSHUTTL]==-1) {
-	    prout("Ye Faerie Queene has no shuttle craft.");
-	    return;
-	}
-	if (game.damage[DSHUTTL]<0) {
-	    prout("Shuttle craft now serving Big Macs.");
-	    return;
-	}
-	if (game.damage[DSHUTTL]>0) {
-	    prout("Shuttle craft damaged.");
-	    return;
-	}
-	if (game.landed) {
-	    prout("You must be aboard the Enterprise.");
-	    return;
-	}
-	if (game.iscraft != onship) {
-	    prout("Shuttle craft not currently available.");
-	    return;
-	}
-	/* Print abandon ship messages */
-	skip(1);
-	prouts("***ABANDON SHIP!  ABANDON SHIP!");
-	skip(1);
-	prouts("***ALL HANDS ABANDON SHIP!");
-	skip(2);
-	prout("Captain and crew escape in shuttle craft.");
-	if (game.state.rembase==0) {
-	    /* Oops! no place to go... */
-	    finish(FABANDN);
-	    return;
-	}
-	q = &game.state.galaxy[game.quadrant.x][game.quadrant.y];
-	/* Dispose of crew */
-	if (!(game.options & OPTION_WORLDS) && !damaged(DTRANSP)) {
-	    prout("Remainder of ship's complement beam down");
-	    prout("to nearest habitable planet.");
-	} else if (q->planet != NOPLANET && !damaged(DTRANSP)) {
-	    prout("Remainder of ship's complement beam down");
-	    prout("to %s.", systemname(q->planet));
-	} else {
-	    prout("Entire crew of %d left to die in outer space.");
-	    game.casual += game.state.crew;
-	    game.abandoned += game.state.crew;
-	}
+#if 0	/* Others */
+	_("Hansen's Planet"),	/* TOS: "The Galileo Seven" */
+	_("Taurus IV"),		/* TOS: "The Galileo Seven" (class G) */
+	_("Antos IV (Doraphane)"),	/* TOS: "Whom Gods Destroy", "Who Mourns for Adonais?" */
+	_("Izar"),			/* TOS: "Whom Gods Destroy" */
+	_("Tiburon"),		/* TOS: "The Way to Eden" */
+	_("Merak II"),		/* TOS: "The Cloud Minders" */
+	_("Coridan (Desotriana)"),	/* TOS: "Journey to Babel" */
+	_("Iotia"),		/* TOS: "A Piece of the Action" */
+#endif
 
-	/* If at least one base left, give 'em the Faerie Queene */
-	skip(1);
-	game.icrystl = false; /* crystals are lost */
-	game.nprobes = 0; /* No probes */
-	prout("You are captured by Klingons and released to");
-	prout("the Federation in a prisoner-of-war exchange.");
-	nb = Rand()*game.state.rembase+1;
-	/* Set up quadrant and position FQ adjacient to base */
-	if (!same(game.quadrant, game.state.baseq[nb])) {
-	    game.quadrant = game.state.baseq[nb];
-	    game.sector.x = game.sector.y = 5;
-	    newqad(true);
-	}
-	for (;;) {
-	    /* position next to base by trial and error */
-	    game.quad[game.sector.x][game.sector.y] = IHDOT;
-	    for_sectors(l) {
-		game.sector.x = 3.0*Rand() - 1.0 + game.base.x;
-		game.sector.y = 3.0*Rand() - 1.0 + game.base.y;
-		if (VALID_SECTOR(game.sector.x, game.sector.y) &&
-		    game.quad[game.sector.x][game.sector.y] == IHDOT) break;
-	    }
-	    if (l < QUADSIZE+1) break; /* found a spot */
-	    game.sector.x=QUADSIZE/2;
-	    game.sector.y=QUADSIZE/2;
-	    newqad(true);
-	}
+#define DEVICE_NAMES \
+    { \
+	_("S. R. Sensors"), \
+	_("L. R. Sensors"), \
+	_("Phasers"), \
+	_("Photon Tubes"), \
+	_("Life Support"), \
+	_("Warp Engines"), \
+	_("Impulse Engines"), \
+	_("Shields"), \
+	_("Subspace Radio"), \
+	_("Shuttle Craft"), \
+	_("Computer"), \
+	_("Navigation System"), \
+	_("Transporter"), \
+	_("Shield Control"), \
+	_("Death Ray"), \
+	_("D. S. Probe") \
     }
-    /* Get new commission */
-    game.quad[game.sector.x][game.sector.y] = game.ship = IHF;
-    game.state.crew = FULLCREW;
-    prout("Starfleet puts you in command of another ship,");
-    prout("the Faerie Queene, which is antiquated but,");
-    prout("still useable.");
-    if (game.icrystl) prout("The dilithium crystals have been moved.");
-    game.imine = false;
-    game.iscraft = offship; /* Galileo disappears */
-    /* Resupply ship */
-    game.condition=docked;
-    for (l = 0; l < NDEVICES; l++) 
-	game.damage[l] = 0.0;
-    game.damage[DSHUTTL] = -1;
-    game.energy = game.inenrg = 3000.0;
-    game.shield = game.inshld = 1250.0;
-    game.torps = game.intorps = 6;
-    game.lsupres=game.inlsr=3.0;
-    game.shldup=false;
-    game.warpfac=5.0;
-    game.wfacsq=25.0;
-    return;
+
+static void setup_names(void)
+/* Sets up some arrays with localized names.
+ * Must be done after iostart() for localization to work. */
+{
+    char *tmp1[] = SYSTEM_NAMES;
+    char *tmp2[] = DEVICE_NAMES;
+
+    memcpy(systnames, tmp1, sizeof(systnames));
+    memcpy(device, tmp2, sizeof(device));
 }
 	
 void setup(bool needprompt) 
@@ -232,6 +187,10 @@
 {
     int i,j, krem, klumper;
     coord w;
+
+    /* call the setup hooks here */
+    setup_names();
+
     //  Decide how many of everything
     if (choose(needprompt)) return; // frozen game
     // Prepare the Enterprise
@@ -315,12 +274,12 @@
 		if (distq < 6.0*(BASEMAX+1-game.inbase) && Rand() < 0.75) {
 		    contflag = true;
 		    if (idebug)
-			prout("=== Abandoning base #%d at %d-%d", i, w.x, w.y);
+			prout(_("=== Abandoning base #%d at %d-%d"), i, w.x, w.y);
 		    break;
 		}
 		else if (distq < 6.0 * (BASEMAX+1-game.inbase)) {
 		    if (idebug)
-			prout("=== Saving base #%d, close to #%d", i, j);
+			prout(_("=== Saving base #%d, close to #%d"), i, j);
 		}
 	    }
 	} while (contflag);
@@ -412,39 +371,39 @@
     game.state.snap = false;
 		
     if (game.skill == SKILL_NOVICE) {
-	prout("It is stardate %d. The Federation is being attacked by",
+	prout(_("It is stardate %d. The Federation is being attacked by"),
 	      (int)game.state.date);
-	prout("a deadly Klingon invasion force. As captain of the United");
-	prout("Starship U.S.S. Enterprise, it is your mission to seek out");
-	prout("and destroy this invasion force of %d battle cruisers.",
+	prout(_("a deadly Klingon invasion force. As captain of the United"));
+	prout(_("Starship U.S.S. Enterprise, it is your mission to seek out"));
+	prout(_("and destroy this invasion force of %d battle cruisers."),
 	      INKLINGTOT);
-	prout("You have an initial allotment of %d stardates to complete", (int)game.intime);
-	prout("your mission.  As you proceed you may be given more time.");
+	prout(_("You have an initial allotment of %d stardates to complete"), (int)game.intime);
+	prout(_("your mission.  As you proceed you may be given more time."));
 	prout("");
-	prout("You will have %d supporting starbases.", game.inbase);
-	proutn("Starbase locations-  ");
+	prout(_("You will have %d supporting starbases."), game.inbase);
+	proutn(_("Starbase locations-  "));
     }
     else {
-	prout("Stardate %d.", (int)game.state.date);
+	prout(_("Stardate %d."), (int)game.state.date);
 	prout("");
-	prout("%d Klingons.", INKLINGTOT);
-	prout("An unknown number of Romulans.");
-	if (game.state.nscrem) prout("and one (GULP) Super-Commander.");
-	prout("%d stardates.",(int)game.intime);
-	proutn("%d starbases in ", game.inbase);
+	prout(_("%d Klingons."), INKLINGTOT);
+	prout(_("An unknown number of Romulans."));
+	if (game.state.nscrem) prout(_("And one (GULP) Super-Commander."));
+	prout(_("%d stardates."),(int)game.intime);
+	proutn(_("%d starbases in "), game.inbase);
     }
     for (i = 1; i <= game.inbase; i++) {
 	proutn(cramlc(0, game.state.baseq[i]));
 	proutn("  ");
     }
     skip(2);
-    proutn("The Enterprise is currently in ");
+    proutn(_("The Enterprise is currently in "));
     proutn(cramlc(quadrant, game.quadrant));
     proutn(" ");
     proutn(cramlc(sector, game.sector));
     skip(2);
-    prout("Good Luck!");
-    if (game.state.nscrem) prout("  YOU'LL NEED IT.");
+    prout(_("Good Luck!"));
+    if (game.state.nscrem) prout(_("  YOU'LL NEED IT."));
     waitfor();
     newqad(false);
     if (game.nenhere-iqhere-game.ithere) game.shldup = true;
@@ -460,12 +419,12 @@
 	game.skill = SKILL_NONE;
 	game.length = 0;
 	if (needprompt) /* Can start with command line options */
-	    proutn("Would you like a regular, tournament, or saved game? ");
+	    proutn(_("Would you like a regular, tournament, or saved game? "));
 	scan();
 	if (strlen(citem)==0) continue; // Try again
 	if (isit("tournament")) {
 	    while (scan() == IHEOL) {
-		proutn("Type in tournament number-");
+		proutn(_("Type in tournament number-"));
 	    }
 	    if (aaitem == 0) {
 		chew();
@@ -486,7 +445,7 @@
 	    return true;
 	}
 	if (isit("regular")) break;
-	proutn("What is \"");
+	proutn(_("What is \""));
 	proutn(citem);
 	prout("\"?");
 	chew();
@@ -502,21 +461,21 @@
 	    else if (isit("expert")) game.skill = SKILL_EXPERT;
 	    else if (isit("emeritus")) game.skill = SKILL_EMERITUS;
 	    else {
-		proutn("What is \"");
+		proutn(_("What is \""));
 		proutn(citem);
 		prout("\"?");
 	    }
 	}
 	else {
 	    chew();
-	    if (game.length==0) proutn("Would you like a Short, Medium, or Long game? ");
-	    else if (game.skill == SKILL_NONE) proutn("Are you a Novice, Fair, Good, Expert, or Emeritus player? ");
+	    if (game.length==0) proutn(_("Would you like a Short, Medium, or Long game? "));
+	    else if (game.skill == SKILL_NONE) proutn(_("Are you a Novice, Fair, Good, Expert, or Emeritus player? "));
 	}
     }
     // Choose game options -- added by ESR for SST2K
     if (scan() != IHALPHA) {
 	chew();
-	proutn("Choose your game style (or just press enter): ");
+	proutn(_("Choose your game style (or just press enter): "));
 	scan();
     }
     if (isit("plain")) {
@@ -532,7 +491,7 @@
     else if (isit("fancy"))
 	/* do nothing */;
     else if (strlen(citem)) {
-	    proutn("What is \"");
+	    proutn(_("What is \""));
 	    proutn(citem);
 	    prout("\"?");
     }
@@ -693,11 +652,11 @@
 	game.neutz = true;
 	if (!damaged(DRADIO)) {
 	    skip(1);
-	    prout("LT. Uhura- \"Captain, an urgent message.");
-	    prout("  I'll put it on audio.\"  CLICK");
+	    prout(_("LT. Uhura- \"Captain, an urgent message."));
+	    prout(_("  I'll put it on audio.\"  CLICK"));
 	    skip(1);
-	    prout("INTRUDER! YOU HAVE VIOLATED THE ROMULAN NEUTRAL ZONE.");
-	    prout("LEAVE AT ONCE, OR YOU WILL BE DESTROYED!");
+	    prout(_("INTRUDER! YOU HAVE VIOLATED THE ROMULAN NEUTRAL ZONE."));
+	    prout(_("LEAVE AT ONCE, OR YOU WILL BE DESTROYED!"));
 	}
     }
 
@@ -714,8 +673,8 @@
 	    game.kpower[game.nenhere] = Rand()*6000.0 +500.0 +250.0*game.skill;
 	    if (!damaged(DSRSENS)) {
 		skip(1);
-		prout("MR. SPOCK- \"Captain, this is most unusual.");
-		prout("    Please examine your short-range scan.\"");
+		prout(_("Mr. Spock- \"Captain, this is most unusual."));
+		prout(_("    Please examine your short-range scan.\""));
 	    }
 	}
     }

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-20 16:29:48 UTC (rev 616)
+++ trunk/src/sst.c	2006-09-20 16:42:35 UTC (rev 617)
@@ -189,23 +189,8 @@
 bool idebug;		// debug mode
 FILE *logfp, *replayfp;
 
-char *device[NDEVICES] = {
-	"S. R. Sensors",
-	"L. R. Sensors",
-	"Phasers",
-	"Photon Tubes",
-	"Life Support",
-	"Warp Engines",
-	"Impulse Engines",
-	"Shields",
-	"Subspace Radio",
-	"Shuttle Craft",
-	"Computer",
-	"Navigation System",
-	"Transporter",
-	"Shield Control",
-	"Death Ray",
-	"D. S. Probe"};									
+char *systnames[NINHAB + 1];
+char *device[NDEVICES];
 
 static struct 
 {
@@ -304,7 +289,7 @@
 /* generate a list of legal commands */
 {
     int i, k = 0;
-    proutn("LEGAL COMMANDS ARE:");
+    proutn(_("LEGAL COMMANDS ARE:"));
     for (i = 0; i < NUMCOMMANDS; i++) {
 	if (!ACCEPT(i))
 	    continue;
@@ -329,7 +314,7 @@
     for(;;) {
 	if (key == IHEOL) {
 	    setwnd(prompt_window);
-	    proutn("Help on what command? ");
+	    proutn(_("Help on what command? "));
 	    key = scan();
 	}
 	setwnd(message_window);
@@ -342,7 +327,6 @@
 	}
 	if (i != NUMCOMMANDS) break;
 	skip(1);
-	prout("Valid commands:");
 	listCommands();
 	key = IHEOL;
 	chew();
@@ -360,9 +344,13 @@
     if (fp == NULL)
         fp = fopen(DOC_NAME, "r");
     if (fp == NULL) {
-	prout("Spock-  \"Captain, that information is missing from the");
-        prout("   computer. You need to find "DOC_NAME" and put it in the");
-        prout("   current directory or to "SSTDOC".\"");
+	prout(_("Spock-  \"Captain, that information is missing from the"));
+        proutn(_("   computer. You need to find "));
+        proutn(DOC_NAME);
+        prout(_(" and put it in the"));
+        proutn(_("   current directory or to "));
+        proutn(SSTDOC);
+        prout(".\"");
 	/*
 	 * This used to continue: "You need to find SST.DOC and put 
 	 * it in the current directory."
@@ -371,7 +359,7 @@
     }
     for (;;) {
 	if (fgets(linebuf, sizeof(linebuf), fp) == NULL) {
-	    prout("Spock- \"Captain, there is no information on that command.\"");
+	    prout(_("Spock- \"Captain, there is no information on that command.\""));
 	    fclose(fp);
 	    return;
 	}
@@ -385,13 +373,16 @@
     }
 
     skip(1);
-    prout("Spock- \"Captain, I've found the following information:\"");
+    prout(_("Spock- \"Captain, I've found the following information:\""));
     skip(1);
 
-    while (fgets(linebuf, sizeof(linebuf),fp)) {
+    while (fgets(linebuf, sizeof(linebuf), fp)) {
+	char *eol;
 	if (strstr(linebuf, "******"))
 	    break;
-	proutn(linebuf);
+	if ((eol = strpbrk(linebuf, "\r\n")))
+	    *eol = 0;
+	prout(linebuf);
     }
     fclose(fp);
 }
@@ -399,6 +390,7 @@
 void enqueue(char *s)
 /* enqueue input for the command parser */
 {
+    chew();
     strcpy(line, s);
 }
 
@@ -552,7 +544,7 @@
 	    freeze(false);
 	    clrscr();
 	    if (game.skill > SKILL_GOOD)
-		prout("WARNING--Saved games produce no plaques!");
+		prout(_("WARNING--Saved games produce no plaques!"));
 	    break;
 	case DEATHRAY:			// Try a desparation measure
 	    deathray();
@@ -675,17 +667,17 @@
 	skip(1);
 
 	if (game.tourn && game.alldone) {
-	    proutn("Do you want your score recorded?");
+	    proutn(_("Do you want your score recorded?"));
 	    if (ja() == true) {
 		chew2();
 		freeze(false);
 	    }
 	}
-	proutn("Do you want to play again? ");
+	proutn(_("Do you want to play again? "));
 	if (!ja()) break;
     }
     skip(1);
-    prout("May the Great Bird of the Galaxy roost upon your home planet.");
+    prout(_("May the Great Bird of the Galaxy roost upon your home planet."));
     return 0;
 }
 
@@ -697,17 +689,18 @@
     char *s;
 	
     switch (i) {
-    case IHR: s = "Romulan"; break;
-    case IHK: s = "Klingon"; break;
-    case IHC: s = "Commander"; break;
-    case IHS: s = "Super-commander"; break;
-    case IHSTAR: s = "Star"; break;
-    case IHP: s = "Planet"; break;
-    case IHB: s = "Starbase"; break;
-    case IHBLANK: s = "Black hole"; break;
-    case IHT: s = "Tholian"; break;
-    case IHWEB: s = "Tholian web"; break;
-    case IHQUEST: s = "Stranger"; break;
+    case IHR: s = _("Romulan"); break;
+    case IHK: s = _("Klingon"); break;
+    case IHC: s = _("Commander"); break;
+    case IHS: s = _("Super-commander"); break;
+    case IHSTAR: s = _("Star"); break;
+    case IHP: s = _("Planet"); break;
+    case IHB: s = _("Starbase"); break;
+    case IHBLANK: s = _("Black hole"); break;
+    case IHT: s = _("Tholian"); break;
+    case IHWEB: s = _("Tholian web"); break;
+    case IHQUEST: s = _("Stranger"); break;
+    case IHW: s = _("Inhabited World"); break;
     default: s = "Unknown??"; break;
     }
     proutn(s);
@@ -718,8 +711,8 @@
 {
     static char buf[32];
     buf[0] = '\0';
-    if (key == quadrant) strcpy(buf, "Quadrant ");
-    else if (key == sector) strcpy(buf, "Sector ");
+    if (key == quadrant) strcpy(buf, _("Quadrant "));
+    else if (key == sector) strcpy(buf, _("Sector "));
     sprintf(buf+strlen(buf), "%d - %d", w.x, w.y);
     return buf;
 }
@@ -729,7 +722,7 @@
 {
     if (stars) proutn("***");
     cramen(enemy);
-    proutn(" at ");
+    proutn(_(" at "));
     proutn(cramlc(key, w));
 }
 
@@ -738,8 +731,8 @@
 {
     char *s;
     switch (game.ship) {
-    case IHE: s = "Enterprise"; break;
-    case IHF: s = "Faerie Queene"; break;
+    case IHE: s = _("Enterprise"); break;
+    case IHF: s = _("Faerie Queene"); break;
     default:  s = "Ship???"; break;
     }
     proutn(s);
@@ -848,7 +841,7 @@
 	chew();
 	if (*citem == 'y') return true;
 	if (*citem == 'n') return false;
-	proutn("Please answer with \"Y\" or \"N\": ");
+	proutn(_("Please answer with \"y\" or \"n\": "));
     }
 }
 
@@ -857,7 +850,7 @@
 {
     chew();
     skip(1);
-    prout("Beg your pardon, Captain?");
+    prout(_("Beg your pardon, Captain?"));
 }
 
 bool isit(char *s) 

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-20 16:29:48 UTC (rev 616)
+++ trunk/src/sst.h	2006-09-20 16:42:35 UTC (rev 617)
@@ -316,6 +316,7 @@
 
 /* the following global state doesn't need to be saved */
 extern char *device[NDEVICES];
+extern char *systnames[NINHAB + 1];
 extern int iscore, iskill; // Common PLAQ
 extern double perdate;
 extern double aaitem;
@@ -436,7 +437,6 @@
 void commandhook(char *, bool);
 void makechart(void);
 void enqueue(char *);
-char *systemname(int);
 coord newkling(int);
 #if BSD_BUG_FOR_BUG
 void visual(void);



From stsp at mail.berlios.de  Wed Sep 20 18:51:19 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Wed, 20 Sep 2006 18:51:19 +0200
Subject: [Sst-commit-watch] r618 - in trunk: po src
Message-ID: <200609201651.k8KGpJTd024341@sheep.berlios.de>

Author: stsp
Date: 2006-09-20 18:51:13 +0200 (Wed, 20 Sep 2006)
New Revision: 618

Modified:
   trunk/po/ru.po
   trunk/src/setup.c
Log:
this gettextized by mistake

Modified: trunk/po/ru.po
===================================================================
--- trunk/po/ru.po	2006-09-20 16:42:35 UTC (rev 617)
+++ trunk/po/ru.po	2006-09-20 16:51:13 UTC (rev 618)
@@ -11,7 +11,7 @@
 msgstr ""
 "Project-Id-Version: sst 2.0\n"
 "Report-Msgid-Bugs-To: stsp\n"
-"POT-Creation-Date: 2006-09-20 20:41+0400\n"
+"POT-Creation-Date: 2006-09-20 20:51+0400\n"
 "PO-Revision-Date: 2006-09-15 11:01+0400\n"
 "Last-Translator: Stas Sergeev <stsp at aknet.ru>\n"
 "Language-Team: Russian <ru at li.org>\n"
@@ -2803,6 +2803,10 @@
 msgid "The starbase there will be destroyed by then."
 msgstr "???? ? ???? ??????? ??? ????? ??????????."
 
+#: src/reports.c:594
+msgid "Direction? "
+msgstr ""
+
 #: src/setup.c:15
 msgid "-SUPER- STAR TREK"
 msgstr "-?????- ???????? ????"
@@ -3051,16 +3055,6 @@
 msgid "D. S. Probe"
 msgstr "?. ?. ??????"
 
-#: src/setup.c:277
-#, c-format
-msgid "=== Abandoning base #%d at %d-%d"
-msgstr ""
-
-#: src/setup.c:282
-#, c-format
-msgid "=== Saving base #%d, close to #%d"
-msgstr ""
-
 #: src/setup.c:374
 #, c-format
 msgid "It is stardate %d. The Federation is being attacked by"
@@ -3190,129 +3184,126 @@
 msgid "Please type in a secret password-"
 msgstr "?????????? ???????? ??????-"
 
-#: src/sst.c:288
+#: src/sst.c:292
 msgid "LEGAL COMMANDS ARE:"
 msgstr "????????? ???????:"
 
-#: src/sst.c:313
+#: src/sst.c:317
 msgid "Help on what command? "
 msgstr "??????? ?? ????? ???????? "
 
-#: src/sst.c:343
+#: src/sst.c:347
 msgid "Spock-  \"Captain, that information is missing from the"
 msgstr "????- \"???????, ????? ?????????? ??? ?"
 
-#: src/sst.c:344
+#: src/sst.c:348
 msgid "   computer. You need to find "
 msgstr "   ??????????. ??? ???? ????? "
 
-#: src/sst.c:346
+#: src/sst.c:350
 msgid " and put it in the"
 msgstr "? ????????? ??? ?"
 
-#: src/sst.c:347
+#: src/sst.c:351
 msgid "   current directory or to "
 msgstr "   ??????? ??????? ??? ? "
 
-#: src/sst.c:358
+#: src/sst.c:362
 msgid "Spock- \"Captain, there is no information on that command.\""
 msgstr "????- \"???????, ?? ??? ??????? ??? ??????????.\""
 
-#: src/sst.c:372
+#: src/sst.c:376
 msgid "Spock- \"Captain, I've found the following information:\""
 msgstr "????- \"???????, ? ????? ???-????? ??????????:\""
 
-#: src/sst.c:543
+#: src/sst.c:547
 msgid "WARNING--Saved games produce no plaques!"
 msgstr "??????????????--??????????? ???? ?? ???? ???????!"
 
-#: src/sst.c:661
+#: src/sst.c:670
 msgid "Do you want your score recorded?"
 msgstr "?????? ???????? ???? ????? "
 
-#: src/sst.c:667
+#: src/sst.c:676
 msgid "Do you want to play again? "
 msgstr "?????? ??????? ?????? "
 
-#: src/sst.c:671
+#: src/sst.c:680
 msgid "May the Great Bird of the Galaxy roost upon your home planet."
 msgstr "? ????? ??????? ????? ????????? ??????? ?? ???? ???????."
 
-#: src/sst.c:683
+#: src/sst.c:692
 msgid "Romulan"
 msgstr "???????"
 
-#: src/sst.c:684
+#: src/sst.c:693
 msgid "Klingon"
 msgstr "???????"
 
-#: src/sst.c:685
+#: src/sst.c:694
 msgid "Commander"
 msgstr "????????"
 
-#: src/sst.c:686
+#: src/sst.c:695
 msgid "Super-commander"
 msgstr "????-???"
 
-#: src/sst.c:687
+#: src/sst.c:696
 msgid "Star"
 msgstr "??????"
 
-#: src/sst.c:688
+#: src/sst.c:697
 msgid "Planet"
 msgstr "???????"
 
-#: src/sst.c:689
+#: src/sst.c:698
 msgid "Starbase"
 msgstr "????"
 
-#: src/sst.c:690
+#: src/sst.c:699
 msgid "Black hole"
 msgstr "?????? ????"
 
-#: src/sst.c:691
+#: src/sst.c:700
 msgid "Tholian"
 msgstr "??????"
 
-#: src/sst.c:692
+#: src/sst.c:701
 msgid "Tholian web"
 msgstr "?????????? ????"
 
-#: src/sst.c:693
+#: src/sst.c:702
 msgid "Stranger"
 msgstr "????????"
 
-#: src/sst.c:694
+#: src/sst.c:703
 msgid "Inhabited World"
 msgstr "????????? ???"
 
-#: src/sst.c:705
+#: src/sst.c:714
 msgid "Quadrant "
 msgstr "???????? "
 
-#: src/sst.c:706
+#: src/sst.c:715
 msgid "Sector "
 msgstr "?????? "
 
-#: src/sst.c:716
+#: src/sst.c:725
 msgid " at "
 msgstr " ? "
 
-#: src/sst.c:725
+#: src/sst.c:734
 msgid "Enterprise"
 msgstr "??????????"
 
-#: src/sst.c:726
+#: src/sst.c:735
 msgid "Faerie Queene"
 msgstr "????????? ????????"
 
-#: src/sst.c:835
+#: src/sst.c:844
 msgid "Please answer with \"y\" or \"n\": "
 msgstr "?????????? ????????? ?? (\"y\") ??? ??? (\"n\"): "
 
-#: src/sst.c:844
+#: src/sst.c:853
 msgid "Beg your pardon, Captain?"
 msgstr "????? ????????, ????????"
-
-#~ msgid "You must be aboard the ship."
-#~ msgstr "?? ?????? ???? ?? ????? ???????."

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-20 16:42:35 UTC (rev 617)
+++ trunk/src/setup.c	2006-09-20 16:51:13 UTC (rev 618)
@@ -274,12 +274,12 @@
 		if (distq < 6.0*(BASEMAX+1-game.inbase) && Rand() < 0.75) {
 		    contflag = true;
 		    if (idebug)
-			prout(_("=== Abandoning base #%d at %d-%d"), i, w.x, w.y);
+			prout("=== Abandoning base #%d at %d-%d", i, w.x, w.y);
 		    break;
 		}
 		else if (distq < 6.0 * (BASEMAX+1-game.inbase)) {
 		    if (idebug)
-			prout(_("=== Saving base #%d, close to #%d"), i, j);
+			prout("=== Saving base #%d, close to #%d", i, j);
 		}
 	    }
 	} while (contflag);



From stsp at mail.berlios.de  Wed Sep 20 19:03:05 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Wed, 20 Sep 2006 19:03:05 +0200
Subject: [Sst-commit-watch] r619 - trunk/po
Message-ID: <200609201703.k8KH35Mh000910@sheep.berlios.de>

Author: stsp
Date: 2006-09-20 19:02:59 +0200 (Wed, 20 Sep 2006)
New Revision: 619

Modified:
   trunk/po/ru.po
Log:
and this gettextized in while I was resolving the rejects...

Modified: trunk/po/ru.po
===================================================================
--- trunk/po/ru.po	2006-09-20 16:51:13 UTC (rev 618)
+++ trunk/po/ru.po	2006-09-20 17:02:59 UTC (rev 619)
@@ -2805,7 +2805,7 @@
 
 #: src/reports.c:594
 msgid "Direction? "
-msgstr ""
+msgstr "???????????? "
 
 #: src/setup.c:15
 msgid "-SUPER- STAR TREK"
@@ -3037,7 +3037,7 @@
 
 #: src/setup.c:167
 msgid "Navigation System"
-msgstr ""
+msgstr "????????????? ???????"
 
 #: src/setup.c:168
 msgid "Transporter"



From esr at mail.berlios.de  Wed Sep 20 20:10:28 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 20 Sep 2006 20:10:28 +0200
Subject: [Sst-commit-watch] r620 - trunk/src
Message-ID: <200609201810.k8KIASdi028744@sheep.berlios.de>

Author: esr
Date: 2006-09-20 20:10:28 +0200 (Wed, 20 Sep 2006)
New Revision: 620

Modified:
   trunk/src/events.c
   trunk/src/moving.c
   trunk/src/setup.c
   trunk/src/sst.c
Log:
Clean up some boolean arguments.


Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-20 17:02:59 UTC (rev 619)
+++ trunk/src/events.c	2006-09-20 18:10:28 UTC (rev 620)
@@ -244,7 +244,7 @@
 	    newqad(false);
 	    /* Adjust finish time to time of tractor beaming */
 	    fintim = game.state.date+game.optime;
-	    attack(0);
+	    attack(false);
 	    if (game.state.remcom <= 0) unschedule(FTBEAM);
 	    else schedule(FTBEAM, game.optime+expran(1.5*game.intime/game.state.remcom));
 	    break;
@@ -585,7 +585,7 @@
 	    if (rtime < temp) temp = rtime;
 	    game.optime = temp;
 	}
-	if (game.optime < delay) attack(0);
+	if (game.optime < delay) attack(false);
 	if (game.alldone) return;
 	events();
 	game.ididit = true;

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-20 17:02:59 UTC (rev 619)
+++ trunk/src/moving.c	2006-09-20 18:10:28 UTC (rev 620)
@@ -63,7 +63,7 @@
 		     * are present and your skill is good.
 		     */
 		    if (game.skill > SKILL_GOOD && game.klhere > 0 && !game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova)
-			attack(0);
+			attack(false);
 		    if (game.alldone) return;
 		}
 		/* compute final position -- new quadrant and sector */
@@ -116,7 +116,7 @@
 		prout(_("Entering %s."), cramlc(quadrant, game.quadrant));
 		game.quad[game.sector.x][game.sector.y] = game.ship;
 		newqad(false);
-		if (game.skill>SKILL_NOVICE) attack(0);
+		if (game.skill>SKILL_NOVICE) attack(false);
 		return;
 	    }
 	    iquad = game.quad[w.x][w.y];
@@ -198,7 +198,7 @@
 	}
 	sortkl();
 	if (!game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova && game.iattak == 0)
-	    attack(0);
+	    attack(false);
 	for_local_enemies(m) game.kavgd[m] = game.kdist[m];
     }
     newcnd();

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-20 17:02:59 UTC (rev 619)
+++ trunk/src/setup.c	2006-09-20 18:10:28 UTC (rev 620)
@@ -407,7 +407,7 @@
     waitfor();
     newqad(false);
     if (game.nenhere-iqhere-game.ithere) game.shldup = true;
-    if (game.neutz) attack(0);	// bad luck to start in a Romulan Neutral Zone
+    if (game.neutz) attack(false);	// bad luck to start in a Romulan Neutral Zone
 }
 
 bool choose(bool needprompt) 

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-20 17:02:59 UTC (rev 619)
+++ trunk/src/sst.c	2006-09-20 18:10:28 UTC (rev 620)
@@ -469,8 +469,8 @@
 	    }
 	    break;
 	case DOCK:			// dock
-	    dock(1);
-	    if (game.ididit) attack(0);
+	    dock(true);
+	    if (game.ididit) attack(false);
 	    break;
 	case DAMAGES:			// damages
 	    dreprt();
@@ -586,7 +586,7 @@
 		continue;
 	    }
 	    if (hitme && !game.justin) {
-		attack(2);
+		attack(true);
 		if (game.alldone) break;
 		if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova) {	// went NOVA! 
 		    atover(false);



From stsp at mail.berlios.de  Wed Sep 20 21:00:35 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Wed, 20 Sep 2006 21:00:35 +0200
Subject: [Sst-commit-watch] r621 - trunk/src
Message-ID: <200609201900.k8KJ0ZdK000949@sheep.berlios.de>

Author: stsp
Date: 2006-09-20 21:00:34 +0200 (Wed, 20 Sep 2006)
New Revision: 621

Modified:
   trunk/src/setup.c
   trunk/src/sst.h
Log:
allow gcc to still do the bounds checking

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-20 18:10:28 UTC (rev 620)
+++ trunk/src/setup.c	2006-09-20 19:00:34 UTC (rev 621)
@@ -175,8 +175,8 @@
 /* Sets up some arrays with localized names.
  * Must be done after iostart() for localization to work. */
 {
-    char *tmp1[] = SYSTEM_NAMES;
-    char *tmp2[] = DEVICE_NAMES;
+    char *tmp1[ARRAY_SIZE(systnames)] = SYSTEM_NAMES;
+    char *tmp2[ARRAY_SIZE(device)] = DEVICE_NAMES;
 
     memcpy(systnames, tmp1, sizeof(systnames));
     memcpy(device, tmp2, sizeof(device));

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-20 18:10:28 UTC (rev 620)
+++ trunk/src/sst.h	2006-09-20 19:00:34 UTC (rev 621)
@@ -203,6 +203,8 @@
 
 #define SSTMAGIC	"SST2.0\n"
 
+#define ARRAY_SIZE(a) (sizeof (a) / sizeof ((a)[0]))
+
 struct game {
     char magic[sizeof(SSTMAGIC)];
     unsigned long options;



From esr at mail.berlios.de  Wed Sep 20 22:50:54 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 20 Sep 2006 22:50:54 +0200
Subject: [Sst-commit-watch] r622 - in trunk: doc src
Message-ID: <200609202050.k8KKosIM014403@sheep.berlios.de>

Author: esr
Date: 2006-09-20 22:50:53 +0200 (Wed, 20 Sep 2006)
New Revision: 622

Modified:
   trunk/doc/sst.xml
   trunk/src/sst.c
Log:
On Stas Sergeev's suggestion, change where the logfile is written.


Modified: trunk/doc/sst.xml
===================================================================
--- trunk/doc/sst.xml	2006-09-20 19:00:34 UTC (rev 621)
+++ trunk/doc/sst.xml	2006-09-20 20:50:53 UTC (rev 622)
@@ -72,7 +72,7 @@
 </listitem>
 </varlistentry>
 <varlistentry>
-<term>sst-input.log</term>
+<term>/usr/tmp/sst-input.log</term>
 <listitem>
 <para>Where user input is saved to (send this with your bug reports).</para>
 </listitem>

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-20 19:00:34 UTC (rev 621)
+++ trunk/src/sst.c	2006-09-20 20:50:53 UTC (rev 622)
@@ -639,7 +639,7 @@
 	}
     }
     /* where to save the input in case of bugs */
-    logfp = fopen("sst-input.log", "w");
+    logfp = fopen("/usr/tmp/sst-input.log", "w");
     setlinebuf(logfp);
     fprintf(logfp, "seed %d\n", seed);
     srand(seed);



From esr at mail.berlios.de  Wed Sep 20 23:18:05 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 20 Sep 2006 23:18:05 +0200
Subject: [Sst-commit-watch] r623 - trunk/src
Message-ID: <200609202118.k8KLI5eK017255@sheep.berlios.de>

Author: esr
Date: 2006-09-20 23:18:05 +0200 (Wed, 20 Sep 2006)
New Revision: 623

Modified:
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/moving.c
   trunk/src/setup.c
   trunk/src/sst.h
Log:
Get rid of obnoxious iattak global, a kluge to prevent recursiion through
an infinit regress of moves leading to exit attacks forcing moves, etc.


Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-20 20:50:53 UTC (rev 622)
+++ trunk/src/battle.c	2006-09-20 21:18:05 UTC (rev 623)
@@ -544,7 +544,6 @@
     coord jay;
     enum loctype where = neither;
 
-    game.iattak = 1;
     if (game.alldone) return;
     if (idebug) prout("=== ATTACK!");
 

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-20 20:50:53 UTC (rev 622)
+++ trunk/src/events.c	2006-09-20 21:18:05 UTC (rev 623)
@@ -784,8 +784,7 @@
     game.optime = 10.0*game.dist/16.0;
     skip(1);
     prout(_("Force of nova displaces starship."));
-    game.iattak=2;	/* Eliminates recursion problem */
-    imove();
+    imove(true);
     game.optime = 10.0*game.dist/16.0;
     return;
 }

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-20 20:50:53 UTC (rev 622)
+++ trunk/src/moving.c	2006-09-20 21:18:05 UTC (rev 623)
@@ -4,8 +4,8 @@
 
 static void getcd(bool, int);
 
-void imove(void)
-/* movement execution for warp, impule, supernova, and tractor-beam events */
+void imove(bool novapush)
+/* movement execution for warp, impulse, supernova, and tractor-beam events */
 {
     double angle, deltax, deltay, bigger, x, y,
         finald, stopegy, probf;
@@ -51,7 +51,7 @@
 	    if (!VALID_SECTOR(w.x, w.y)) {
 		/* Leaving quadrant -- allow final enemy attack */
 		/* Don't do it if being pushed by Nova */
-		if (game.nenhere != 0 && game.iattak != 2) {
+		if (game.nenhere != 0 && !novapush) {
 		    newcnd();
 		    for_local_enemies(m) {
 			finald = distance(w, game.ks[m]);
@@ -197,12 +197,11 @@
 	    game.kdist[m] = finald;
 	}
 	sortkl();
-	if (!game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova && game.iattak == 0)
+	if (!game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova)
 	    attack(false);
 	for_local_enemies(m) game.kavgd[m] = game.kdist[m];
     }
     newcnd();
-    game.iattak = 0;
     drawmaps(0);
     setwnd(message_window);
     return;
@@ -477,7 +476,7 @@
 	if (ja() == false) return;
     }
     /* Activate impulse engines and pay the cost */
-    imove();
+    imove(false);
     game.ididit = true;
     if (game.alldone) return;
     power = 20.0 + 100.0*game.dist;
@@ -605,7 +604,7 @@
 				
 
     /* Activate Warp Engines and pay the cost */
-    imove();
+    imove(false);
     if (game.alldone) return;
     game.energy -= game.dist*game.warpfac*game.warpfac*game.warpfac*(game.shldup+1);
     if (game.energy <= 0) finish(FNRG);

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-20 20:50:53 UTC (rev 622)
+++ trunk/src/setup.c	2006-09-20 21:18:05 UTC (rev 623)
@@ -560,7 +560,6 @@
     coord w;
     struct quadrant *q;
 
-    game.iattak = 1;
     game.justin = true;
     game.base.x = game.base.y = 0;
     game.klhere = 0;

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-20 20:50:53 UTC (rev 622)
+++ trunk/src/sst.h	2006-09-20 21:18:05 UTC (rev 623)
@@ -286,7 +286,6 @@
 	nenhere,	// number of enemies in quadrant
 	irhere,		// Romulans in quadrant
 	isatb,		// =1 if super commander is attacking base
-	iattak,		// attack recursion elimination (was cracks[4])
 	tourn,		// tournament number
 	proben,		// number of moves for probe
 	nprobes;	// number of probes available
@@ -400,7 +399,7 @@
 coord dropin(feature);
 void newcnd(void);
 void sortkl(void);
-void imove(void);
+void imove(bool);
 void ram(bool, feature, coord);
 void crmena(bool, feature, enum loctype, coord w);
 void deadkl(coord, feature, coord);



From esr at mail.berlios.de  Thu Sep 21 12:47:33 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 21 Sep 2006 12:47:33 +0200
Subject: [Sst-commit-watch] r624 - trunk/src
Message-ID: <200609211047.k8LAlXkb021870@sheep.berlios.de>

Author: esr
Date: 2006-09-21 12:47:26 +0200 (Thu, 21 Sep 2006)
New Revision: 624

Modified:
   trunk/src/ai.c
   trunk/src/setup.c
Log:
More applications of same().


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-20 21:18:05 UTC (rev 623)
+++ trunk/src/ai.c	2006-09-21 10:47:26 UTC (rev 624)
@@ -301,7 +301,8 @@
     if (flag) {
 	/* Avoid quadrants with bases if we want to avoid Enterprise */
 	for_starbases(i)
-	    if (game.state.baseq[i].x==iq.x && game.state.baseq[i].y==iq.y) return 1;
+	    if (same(game.state.baseq[i], iq)) 
+		return true;
     }
     if (game.justin && !game.iscate) return true;
     /* do the move */
@@ -329,7 +330,7 @@
     }
     /* check for a helpful planet */
     for (i = 0; i < game.inplan; i++) {
-	if (game.state.plnets[i].w.x==game.state.kscmdr.x && game.state.plnets[i].w.y==game.state.kscmdr.y &&
+	if (same(game.state.plnets[i].w, game.state.kscmdr) &&
 	    game.state.plnets[i].crystals == 1) {
 	    /* destroy the planet */
 	    DESTROY(&game.state.plnets[i]);

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-20 21:18:05 UTC (rev 623)
+++ trunk/src/setup.c	2006-09-21 10:47:26 UTC (rev 624)
@@ -324,7 +324,8 @@
 		   game.state.galaxy[w.x][w.y].klingons > 8);
 	    // check for duplicate
 	    for (j = 1; j < i; j++)
-		if (game.state.kcmdr[j].x==w.x && game.state.kcmdr[j].y==w.y) break;
+		if (same(game.state.kcmdr[j], w))
+		    break;
 	} while (j < i);
 	game.state.galaxy[w.x][w.y].klingons++;
 	game.state.kcmdr[i] = w;



From esr at mail.berlios.de  Thu Sep 21 20:16:39 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 21 Sep 2006 20:16:39 +0200
Subject: [Sst-commit-watch] r625 - trunk/src
Message-ID: <200609211816.k8LIGdij022262@sheep.berlios.de>

Author: esr
Date: 2006-09-21 20:16:38 +0200 (Thu, 21 Sep 2006)
New Revision: 625

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/planets.c
   trunk/src/setup.c
   trunk/src/sst.h
Log:
Make the "crystals' member into an enumeration.
Add explanatory comments to the attack code.
Remove some redundant logic to push you out of dock on an attack.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-21 10:47:26 UTC (rev 624)
+++ trunk/src/ai.c	2006-09-21 18:16:38 UTC (rev 625)
@@ -331,7 +331,7 @@
     /* check for a helpful planet */
     for (i = 0; i < game.inplan; i++) {
 	if (same(game.state.plnets[i].w, game.state.kscmdr) &&
-	    game.state.plnets[i].crystals == 1) {
+	    game.state.plnets[i].crystals == present) {
 	    /* destroy the planet */
 	    DESTROY(&game.state.plnets[i]);
 	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = NOPLANET;

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-21 10:47:26 UTC (rev 624)
+++ trunk/src/battle.c	2006-09-21 18:16:38 UTC (rev 625)
@@ -539,29 +539,49 @@
 {
     /* torps_ok == false forces use of phasers in an attack */
     int percent, loop, iquad;
-    bool itflag, atackd = false, attempt = false, ihurt = false;
+    bool usephasers, atackd = false, attempt = false, ihurt = false;
     double hit, pfac, dustfac, hitmax=0.0, hittot=0.0, chgfac=1.0, r;
     coord jay;
     enum loctype where = neither;
 
-    if (game.alldone) return;
-    if (idebug) prout("=== ATTACK!");
+    /* game could be over at this point, check */
+    if (game.alldone) 
+	return;
 
-    if (game.ithere) movetho();
+    if (idebug) 
+	prout("=== ATTACK!");
 
+    /* Tholian gewts to move before attacking */
+    if (game.ithere) 
+	movetho();
+
+    /* if you have just entered the RNZ, you'll get a warning */
     if (game.neutz) { /* The one chance not to be attacked */
 	game.neutz = false;
 	return;
     }
-    if ((((game.comhere || game.ishere) && !game.justin) || game.skill == SKILL_EMERITUS) && torps_ok) movcom();
-    if (game.nenhere==0 || (game.nenhere==1 && iqhere && !iqengry)) return;
+
+    /* commanders get a chance to tac-move towards you */
+    if ((((game.comhere || game.ishere) && !game.justin) || game.skill == SKILL_EMERITUS) && torps_ok) 
+	movcom();
+
+    /* if no enemies remain after movement, we're done */
+    if (game.nenhere==0 || (game.nenhere==1 && iqhere && !iqengry)) 
+	return;
+
+    /* set up partial hits if attack happens during shield status change */
     pfac = 1.0/game.inshld;
     if (game.shldchg) chgfac = 0.25+0.5*Rand();
+
     skip(1);
-    if (game.skill <= SKILL_FAIR) where = sector;
+
+    /* message verbosity control */
+    if (game.skill <= SKILL_FAIR) 
+	where = sector;
+
     for_local_enemies(loop) {
 	if (game.kpower[loop] < 0) continue;	/* too weak to attack */
-	/* compute hit strength and diminsh shield power */
+	/* compute hit strength and diminish shield power */
 	r = Rand();
 	/* Increase chance of photon torpedos if docked or enemy energy low */
 	if (game.condition == docked) r *= 0.25;
@@ -569,20 +589,21 @@
 	jay = game.ks[loop];
 	iquad = game.quad[jay.x][jay.y];
 	if (iquad==IHT || (iquad==IHQUEST && !iqengry)) continue;
-	itflag = (iquad == IHK && r > 0.0005) || !torps_ok ||
+	/* different enemies have different probabilities of throwing a torp */
+	usephasers = !torps_ok || \
+	    (iquad == IHK && r > 0.0005) || 
 	    (iquad==IHC && r > 0.015) ||
 	    (iquad==IHR && r > 0.3) ||
 	    (iquad==IHS && r > 0.07) ||
 	    (iquad==IHQUEST && r > 0.05);
-	if (itflag) {
-	    /* Enemy uses phasers */
+	if (usephasers) {	    /* Enemy uses phasers */
 	    if (game.condition == docked) continue; /* Don't waste the effort! */
 	    attempt = true; /* Attempt to attack */
 	    dustfac = 0.8+0.05*Rand();
 	    hit = game.kpower[loop]*pow(dustfac,game.kavgd[loop]);
 	    game.kpower[loop] *= 0.75;
 	}
-	else { /* Enemy used photon torpedo */
+	else { /* Enemy uses photon torpedo */
 	    double course = 1.90985*atan2((double)game.sector.y-jay.y, (double)jay.x-game.sector.x);
 	    hit = 0;
 	    proutn(_("***TORPEDO INCOMING"));
@@ -601,30 +622,31 @@
 		return; /* Supernova or finished */
 	    if (hit == 0) continue;
 	}
+	/* incoming phaser or torpedo, shields may dissipate it */
 	if (game.shldup || game.shldchg || game.condition==docked) {
 	    /* shields will take hits */
 	    double absorb, hitsh, propor = pfac*game.shield*(game.condition==docked ? 2.1 : 1.0);
-	    if(propor < 0.1) propor = 0.1;
+	    if (propor < 0.1) propor = 0.1;
 	    hitsh = propor*chgfac*hit+1.0;
-	    atackd = true;
 	    absorb = 0.8*hitsh;
 	    if (absorb > game.shield) absorb = game.shield;
 	    game.shield -= absorb;
 	    hit -= hitsh;
-	    if (game.condition==docked) dock(false);
-	    if (propor > 0.1 && hit < 0.005*game.energy) continue;
+	    /* taking a hit blasts us out of a starbase dock */
+	    if (game.condition == docked)
+		dock(false);
+	    /* but the shields may take care of it */
+	    if (propor > 0.1 && hit < 0.005*game.energy) 
+		continue;
 	}
-	/* It's a hit -- print out hit size */
-	atackd = true; /* We weren't going to check casualties, etc. if
-		       shields were down for some strange reason. This
-		       doesn't make any sense, so I've fixed it */
+	/* hit from this opponent got through shields, so take damage */
 	ihurt = true;
 	proutn(_("%d unit hit"), (int)hit);
-	if ((damaged(DSRSENS) && itflag) || game.skill<=SKILL_FAIR) {
+	if ((damaged(DSRSENS) && usephasers) || game.skill<=SKILL_FAIR) {
 	    proutn(_(" on the "));
 	    crmshp();
 	}
-	if (!damaged(DSRSENS) && itflag) {
+	if (!damaged(DSRSENS) && usephasers) {
 	    proutn(_(" from "));
 	    crmena(false, iquad, where, jay);
 	}
@@ -634,8 +656,6 @@
 	hittot += hit;
 	fry(hit);
 	game.energy -= hit;
-	if (game.condition==docked) 
-	    dock(false);
     }
     if (game.energy <= 0) {
 	/* Returning home upon your shield, not with it... */
@@ -685,7 +705,7 @@
 
     skip(1);
     crmena(true, type, sector, mv);
-    /* Decide what kind of enemy it is and update approriately */
+    /* Decide what kind of enemy it is and update appropriately */
     if (type == IHR) {
 	/* chalk up a Romulan */
 	game.state.galaxy[game.quadrant.x][game.quadrant.y].romulans--;
@@ -709,7 +729,8 @@
 	case IHC:
 	    game.comhere = false;
 	    for_commanders (i)
-		if (game.state.kcmdr[i].x==game.quadrant.x && game.state.kcmdr[i].y==game.quadrant.y) break;
+		if (same(game.state.kcmdr[i], game.quadrant)) 
+		    break;
 	    game.state.kcmdr[i] = game.state.kcmdr[game.state.remcom];
 	    game.state.kcmdr[game.state.remcom].x = 0;
 	    game.state.kcmdr[game.state.remcom].y = 0;
@@ -743,7 +764,7 @@
     game.state.remtime = game.state.remres/(game.state.remkl + 4*game.state.remcom);
 
     /* Remove enemy ship from arrays describing local conditions */
-    if (is_scheduled(FCDBAS) && game.battle.x==game.quadrant.x && game.battle.y==game.quadrant.y && type==IHC)
+    if (is_scheduled(FCDBAS) && same(game.battle, game.quadrant) && type==IHC)
 	unschedule(FCDBAS);
     for_local_enemies(i)
 	if (same(game.ks[i], w)) break;

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-21 10:47:26 UTC (rev 624)
+++ trunk/src/planets.c	2006-09-21 18:16:38 UTC (rev 625)
@@ -23,7 +23,7 @@
     skip(1);
     for (i = 0; i < game.inplan; i++) {
 	if ((game.state.plnets[i].known != unknown
-	    && game.state.plnets[i].crystals != 0)
+	    && game.state.plnets[i].crystals != absent)
 	    || (idebug && game.state.plnets[i].w.x !=0)
 	    ) {
 	    iknow = true;
@@ -33,7 +33,7 @@
 	    proutn(_("   class "));
 	    proutn(classes[game.state.plnets[i].pclass]);
 	    proutn("   ");
-	    if (game.state.plnets[i].crystals <= 0) proutn(_("no "));
+	    if (game.state.plnets[i].crystals != present) proutn(_("no "));
 	    prout(_("dilithium crystals present."));
 	    if (game.state.plnets[i].known==shuttle_down) 
 		prout(_("    Shuttle Craft Galileo on surface."));
@@ -93,7 +93,7 @@
 	if (game.state.plnets[game.iplnet].known==shuttle_down) 
 	    prout(_("         Sensors show Galileo still on surface."));
 	proutn(_("         Readings indicate"));
-	if (game.state.plnets[game.iplnet].crystals == 0) proutn(_(" no"));
+	if (game.state.plnets[game.iplnet].crystals != present) proutn(_(" no"));
 	prout(_(" dilithium crystals present.\""));
 	if (game.state.plnets[game.iplnet].known == unknown) game.state.plnets[game.iplnet].known = known;
     }
@@ -147,7 +147,7 @@
     }
     else {
 	/* Going to planet */
-	if (game.state.plnets[game.iplnet].crystals==0) {
+	if (game.state.plnets[game.iplnet].crystals==absent) {
 	    prout(_("Spock-  \"Captain, I fail to see the logic in"));
 	    prout(_("  exploring a planet with no dilithium crystals."));
 	    proutn(_("  Are you sure this is wise?\" "));
@@ -197,11 +197,11 @@
 	prout(_("Mining party not on planet."));
 	return;
     }
-    if (game.state.plnets[game.iplnet].crystals == MINED) {
+    if (game.state.plnets[game.iplnet].crystals == mined) {
 	prout(_("This planet has already been strip-mined for dilithium."));
 	return;
     }
-    else if (game.state.plnets[game.iplnet].crystals == 0) {
+    else if (game.state.plnets[game.iplnet].crystals == absent) {
 	prout(_("No dilithium crystals on this planet."));
 	return;
     }
@@ -219,7 +219,7 @@
     game.optime = (0.1+0.2*Rand())*game.state.plnets[game.iplnet].pclass;
     if (consumeTime()) return;
     prout(_("Mining operation complete."));
-    game.state.plnets[game.iplnet].crystals = MINED;
+    game.state.plnets[game.iplnet].crystals = mined;
     game.imine = game.ididit = true;
 }
 

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-21 10:47:26 UTC (rev 624)
+++ trunk/src/setup.c	2006-09-21 18:16:38 UTC (rev 625)
@@ -337,12 +337,12 @@
 	game.state.plnets[i].w = w;
 	if (i < NINHAB) {
 	    game.state.plnets[i].pclass = M;	// All inhabited planets are class M
-	    game.state.plnets[i].crystals = 0;
+	    game.state.plnets[i].crystals = absent;
 	    game.state.plnets[i].known = known;
 	    game.state.plnets[i].inhabited = i;
 	} else {
 	    game.state.plnets[i].pclass = Rand()*3.0; // Planet class M N or O
-	    game.state.plnets[i].crystals = 1.5*Rand();		// 1 in 3 chance of crystals
+	    game.state.plnets[i].crystals = Rand()*1.5;		// 1 in 3 chance of crystals
 	    game.state.plnets[i].known = unknown;
 	    game.state.plnets[i].inhabited = UNINHABITED;
 	}

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-21 10:47:26 UTC (rev 624)
+++ trunk/src/sst.h	2006-09-21 18:16:38 UTC (rev 625)
@@ -51,8 +51,7 @@
     enum {M=0, N=1, O=2} pclass;
     int inhabited;	/* if NZ, an index into a name array */
 #define UNINHABITED	-1
-    int crystals; /* has crystals */
-#define MINED	-1	/* used to have crystals, but they were mined out */
+    enum {mined=-1, present=0, absent=1} crystals; /* has crystals */
     enum {unknown, known, shuttle_down} known;
 } planet;
 



From esr at mail.berlios.de  Fri Sep 22 13:38:55 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 22 Sep 2006 13:38:55 +0200
Subject: [Sst-commit-watch] r626 - trunk/src
Message-ID: <200609221138.k8MBctrY025660@sheep.berlios.de>

Author: esr
Date: 2006-09-22 13:38:54 +0200 (Fri, 22 Sep 2006)
New Revision: 626

Modified:
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/setup.c
   trunk/src/sst.h
Log:
Abstract away the operations involving a sentinel value for coordinates.
Besides making the code more readable, the seniinel may change someday 
if we go zero-origin everywhere.


Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-21 18:16:38 UTC (rev 625)
+++ trunk/src/battle.c	2006-09-22 11:38:54 UTC (rev 626)
@@ -387,7 +387,7 @@
 	    q->planet = NOPLANET;
 	    DESTROY(&game.state.plnets[game.iplnet]);
 	    game.iplnet = 0;
-	    game.plnet.x = game.plnet.y = 0;
+	    invalidate(game.plnet);
 	    game.quad[w.x][w.y] = IHDOT;
 	    if (game.landed) {
 		/* captain perishes on planet */
@@ -401,7 +401,7 @@
 	    q->planet = NOPLANET;
 	    DESTROY(&game.state.plnets[game.iplnet]);
 	    game.iplnet = 0;
-	    game.plnet.x = game.plnet.y = 0;
+	    invalidate(game.plnet);
 	    game.quad[w.x][w.y] = IHDOT;
 	    if (game.landed) {
 		/* captain perishes on planet */
@@ -719,7 +719,7 @@
     else if (type == IHQUEST) {
 	/* Killed a Thingy */
 	iqhere = iqengry = false;
-	thing.x =thing.y = 0;
+	invalidate(thing);
     }
     else {
 	/* Some type of a Klingon */

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-21 18:16:38 UTC (rev 625)
+++ trunk/src/events.c	2006-09-22 11:38:54 UTC (rev 626)
@@ -317,7 +317,7 @@
 		if (i > game.state.remcom || game.state.rembase == 0 ||
 		    !game.state.galaxy[game.battle.x][game.battle.y].starbase) {
 		    /* No action to take after all */
-		    game.battle.x = game.battle.y = 0;
+		    invalidate(game.battle);
 		    break;
 		}
 	    }
@@ -358,9 +358,8 @@
 		game.battle = hold;
 		game.isatb = 0;
 	    }
-	    else {
-		game.battle.x = game.battle.y = 0;
-	    }
+	    else
+		invalidate(game.battle);
 	    break;
 	case FSCMOVE: /* Supercommander moves */
 	    schedule(FSCMOVE, 0.2777);
@@ -676,7 +675,8 @@
 			crmena(true, IHP, sector, scratch);
 			prout(_(" destroyed."));
 			DESTROY(&game.state.plnets[game.iplnet]);
-			game.iplnet = game.plnet.x = game.plnet.y = 0;
+			game.iplnet = 0;
+			invalidate(game.plnet);
 			if (game.landed) {
 			    finish(FPNOVA);
 			    return;
@@ -690,7 +690,7 @@
 				break;
 			game.state.baseq[i] = game.state.baseq[game.state.rembase];
 			game.state.rembase--;
-			game.base.x = game.base.y = 0;
+			invalidate(game.base);
 			game.state.basekl++;
 			newcnd();
 			crmena(true, IHB, sector, scratch);
@@ -875,7 +875,7 @@
 	for (l = 1; l <= maxloop; l++) {
 	    if (same(game.state.kcmdr[l], nq)) {
 		game.state.kcmdr[l] = game.state.kcmdr[game.state.remcom];
-		game.state.kcmdr[game.state.remcom].x = game.state.kcmdr[game.state.remcom].y = 0;
+		invalidate(game.state.kcmdr[game.state.remcom]);
 		game.state.remcom--;
 		kldead--;
 		if (game.state.remcom==0) unschedule(FTBEAM);
@@ -902,7 +902,7 @@
 	for (loop = 1; loop <= maxloop; loop++)
 	    if (same(game.state.baseq[loop], nq)) {
 		game.state.baseq[loop] = game.state.baseq[game.state.rembase];
-		game.state.baseq[game.state.rembase].x = game.state.baseq[game.state.rembase].y = 0;
+		invalidate(game.state.baseq[game.state.rembase]);
 		game.state.rembase--;
 		break;
 	    }

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-21 18:16:38 UTC (rev 625)
+++ trunk/src/moving.c	2006-09-22 11:38:54 UTC (rev 626)
@@ -219,7 +219,7 @@
 	prout(_("You must first leave standard orbit."));
 	return;
     }
-    if (game.base.x==0 || abs(game.sector.x-game.base.x) > 1 || abs(game.sector.y-game.base.y) > 1) {
+    if (!is_valid(game.base) || abs(game.sector.x-game.base.x) > 1 || abs(game.sector.y-game.base.y) > 1) {
 	crmshp();
 	prout(_(" not adjacent to base."));
 	return;
@@ -793,7 +793,7 @@
 	game.isatb = 0;
 	unschedule(FCDBAS);
 	unschedule(FSCDBAS);
-	game.battle.x = game.battle.y = 0;
+	invalidate(game.battle);
 
 	/* Make sure Galileo is consistant -- Snapshot may have been taken
 	   when on planet, which would give us two Galileos! */
@@ -987,7 +987,7 @@
 	    break;
 	}
     }
-    if (game.sector.x==0){
+    if (!is_valid(game.sector)){
 	prout(_("You have been lost in space..."));
 	finish(FMATERIALIZE);
 	return;

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-21 18:16:38 UTC (rev 625)
+++ trunk/src/planets.c	2006-09-22 11:38:54 UTC (rev 626)
@@ -55,7 +55,7 @@
 	prout(_("Both warp and impulse engines damaged."));
 	return;
     }
-    if (game.plnet.x == 0 || abs(game.sector.x-game.plnet.x) > 1 || abs(game.sector.y-game.plnet.y) > 1) {
+    if (!is_valid(game.plnet) || abs(game.sector.x-game.plnet.x) > 1 || abs(game.sector.y-game.plnet.y) > 1) {
 	crmshp();
 	prout(_(" not adjacent to planet."));
 	skip(1);

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-21 18:16:38 UTC (rev 625)
+++ trunk/src/setup.c	2006-09-22 11:38:54 UTC (rev 626)
@@ -212,7 +212,7 @@
     for (i=0; i < NDEVICES; i++) 
 	game.damage[i] = 0.0;
     // Set up assorted game parameters
-    game.battle.x = game.battle.y = 0;
+    invalidate(game.battle);
     game.state.date = game.indate = 100.0*(int)(31.0*Rand()+20.0);
     game.nkinks = game.nhelp = game.casual = game.abandoned = 0;
     game.iscate = game.resting = game.imine = game.icrystl = game.icraft = false;
@@ -366,7 +366,7 @@
 	thing = randplace(GALSIZE);
     }
     else
-	thing.x = thing.y = 0;
+	invalidate(thing);
 
     skip(2);
     game.state.snap = false;
@@ -562,10 +562,10 @@
     struct quadrant *q;
 
     game.justin = true;
-    game.base.x = game.base.y = 0;
+    invalidate(game.base);
     game.klhere = 0;
     game.comhere = false;
-    game.plnet.x = game.plnet.y = 0;
+    invalidate(game.plnet);
     game.ishere = false;
     game.irhere = 0;
     game.iplnet = 0;

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-21 18:16:38 UTC (rev 625)
+++ trunk/src/sst.h	2006-09-22 11:38:54 UTC (rev 626)
@@ -45,6 +45,8 @@
 #define square(i)		((i)*(i))
 #define same(c1, c2)		((c1.x == c2.x) && (c1.y == c2.y))
 #define distance(c1, c2)	sqrt(square(c1.x - c2.x) + square(c1.y - c2.y))
+#define invalidate(w)		w.x = w.y = 0
+#define is_valid(w)		(w.x == 0 || w.y == 0)
 
 typedef struct {
     coord w;



From esr at mail.berlios.de  Fri Sep 22 16:11:44 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 22 Sep 2006 16:11:44 +0200
Subject: [Sst-commit-watch] r627 - trunk/doc
Message-ID: <200609221411.k8MEBibT010425@sheep.berlios.de>

Author: esr
Date: 2006-09-22 16:11:43 +0200 (Fri, 22 Sep 2006)
New Revision: 627

Modified:
   trunk/doc/sst-doc.xml
Log:
Added appending on development timeline.


Modified: trunk/doc/sst-doc.xml
===================================================================
--- trunk/doc/sst-doc.xml	2006-09-22 11:38:54 UTC (rev 626)
+++ trunk/doc/sst-doc.xml	2006-09-22 14:11:43 UTC (rev 627)
@@ -341,7 +341,7 @@
 </orderedlist>
 
 <para>If you are part way through entering a command and you change your
-minde, you can cancel the command by typing -1 as one of the
+mind, you can cancel the command by typing -1 as one of the
 parameters, with the exception of the manual move command.</para>
 
 <para>If anything is not clear to you, experiment.  The worst you can do is
@@ -1685,6 +1685,10 @@
 BASIC, in that it used used polar coordinates (a clockface angle
 and a distance) for manual navigation.</para>
 
+<para>Tom Almy writes: "I've received further information that the
+black holes, Tholian web, Super Commander, and Emeritus mode were
+added by Marc Newman."</para>
+
 <para>At the time the UT FORTRAN source was last translated to C it emitted
 the message "Latest update-21 Sept 78".  Thus, it actually predated
 (and may have influenced) the best-known BASIC version, the "Super
@@ -1950,6 +1954,9 @@
 </sect1>
 <sect1><title>References</title>
 
+<para>These are the original references by Dave Matuszek and Paul
+Reynolds:</para>
+
 <orderedlist>
 <listitem><para><citetitle>Star Trek</citetitle> (the original television
 series), produced and directed by Gene Rodenberry.</para></listitem>
@@ -1969,9 +1976,9 @@
 David Gerrold.  Similiar in scope to the above book.
 (Bantam)</para></listitem>
 
-<listitem><para><citetitle>The Star Trek Guide</citetitle>, third revision 4/17/67, by Gene
-Roddenberry.  The original writer's guide for the television
-series, but less comprehensive than (3) above.
+<listitem><para><citetitle>The Star Trek Guide</citetitle>, third
+revision 4/17/67, by Gene Roddenberry.  The original writer's guide
+for the television series, but less comprehensive than (3) above.
 (Norway Productions)</para></listitem>
 
 <listitem><para><citetitle>The Trouble With Tribbles</citetitle>, by
@@ -1994,4 +2001,66 @@
 
 </sect1>
 </chapter>
+
+<appendix><title>Setting the Wayback Machine</title>
+
+<para>SSTK and its ancestors have a long history.  One of the
+objectives of this project is to make that history available.
+Accordingly, here is a timeline of the development of SST2K and
+its ancestors, as closely as we can reconstruct it.  Someday this
+may become the basis for a "wayback machine" switch that enables
+feature sets by year.</para>
+
+<itemizedlist>
+<listitem><para>1971 &mdash; Mike Mayfield's original BASIC Star
+Trek.</para></listitem>
+
+<listitem><para>5 April 1973 &mdash; Grady Hicks's BASIC version fot
+the Taurus.</para></listitem>
+
+<listitem><para>Summer 1973 &mdash; Dave Matuszek, Paul Reynolds, and
+the Austin crew begin work on the UT FORTRAN version.</para></listitem>
+
+<listitem><para>1974 &mdash; Dave Matuszek gets distracted by other
+things, notably a job change and the birth of his first
+child.</para></listitem>
+
+<listitem><para>c.1977 &mdash; Tom Almy translates the UT FORTAN
+version to PDP-11 FORTRAN.</para></listitem>
+
+<listitem><para>21 September 1978 &mdash; This was the date on the
+first version Tom Almy saw, on which he based his C
+translation.</para></listitem>
+
+<listitem><para>1979 &mdash; Marc Newman adds Tholians, black holes,
+super-commanders, and Emeritus mode.</para></listitem>
+
+<listitem><para>1995-1996 &mdash; Tom Almy translates his FORTRAN
+port to ANSI C.</para></listitem>
+
+<listitem><para>1997 &mdash; Tom Almy finds the sources for the UT
+FORTRAN on the Web and merges in features new since the 1978 version:
+EMEXIT, Tholian Web, improved death ray.  He adds deep-space probes
+from the DECUS version.</para></listitem>
+
+<listitem><para>10 October 2004 &mdash; ESR starts hacking on Almy's C
+translation, de-FORTRANIZING the code. HELP/CALL/SOS becomes MAYDAY.
+</para></listitem>
+
+<listitem><para>30 October 2004 &mdash; SST2K project started on
+Berlios.</para></listitem>
+
+<listitem><para>18 January 2005 &mdash; First changes merged in from Stas
+Sergeev. The curses interface is added.</para></listitem>
+
+<listitem><para>September 2006 &mdash; BSD features merged
+in. Inhabited-worlds features and weighted critical hits date from
+this time.</para></listitem>
+</itemizedlist>
+
+<para>One as-yet unanswered question is when the code changed from
+distance/direction navigation to coordinate offsets.  Dave Matuszek
+believes it must have been after he stopped working on the game in
+1974.</para>
+</appendix>
 </book>



From esr at mail.berlios.de  Fri Sep 22 18:18:30 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 22 Sep 2006 18:18:30 +0200
Subject: [Sst-commit-watch] r628 - trunk/src
Message-ID: <200609221618.k8MGIU5s026421@sheep.berlios.de>

Author: esr
Date: 2006-09-22 18:18:30 +0200 (Fri, 22 Sep 2006)
New Revision: 628

Added:
   trunk/src/sst.py
Log:
Beginning of experimental Python translation.
The initial file is definitions corresponding to sst.h.


Added: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-09-22 14:11:43 UTC (rev 627)
+++ trunk/src/sst.py	2006-09-22 16:18:30 UTC (rev 628)
@@ -0,0 +1,204 @@
+"""
+sst.py =-- Super Star Trek in Python
+"""
+import math
+
+PHASEFAC	= 2.0
+GALSIZE 	= 8
+NINHAB  	= GALSIZE * GALSIZE / 2
+MAXUNINHAB	= 10
+PLNETMAB	= NINHAB + MAXUNINHAB
+QUADSIZE	= 10
+BASEMAX 	= 5
+FULLCREW	= 428	 # BSD Trek was 387, that's wrong
+MAXKLGAME	= 127
+MAXKLQUAD	= 9
+FOREVER 	= 1e30
+
+# Feature vakues
+IHR = 'R',
+IHK = 'K',
+IHC = 'C',
+IHS = 'S',
+IHSTAR = '*',
+IHP = 'P',
+IHW = '@',
+IHB = 'B',
+IHBLANK = ' ',
+IHDOT = '.',
+IHQUEST = '?',
+IHE = 'E',
+IHF = 'F',
+IHT = 'T',
+IHWEB = '#',
+IHMATER0 = '-',
+IHMATER1 = 'o',
+IHMATER2 = '0',
+
+class coord:
+    def __init(self, x=None, y=None):
+        self.x = x
+        self.y = y
+    def invalidate(self):
+        self.x = self.y = None
+    def is_valid(self):
+        return self.x != None and self.y != None
+    def __eq__(self, other):
+        return self.x == other.y and self.x == other.y
+    def distance(self, other):
+        return math.sqrt((self.x - other.x)**2 + (self.y - other.y)**2)
+
+class planet:
+    def __init(self):
+        self.w = coord()
+        self.name = None
+        self.crystals = None	# "absent", "present", or "mined"
+        self.known = "unknown"	# Other values: "known" and "shuttle down"
+
+class quadrant:
+    def __init__(self):
+        self.stars = None
+        self.planet = None
+        self.starbase = None
+        self.klingons = None
+        self.romulans = None
+        self.supernova = None
+        self.charted = None
+        self.status = "secure"	# Other valuues: "distressed", "enslaved"
+
+class page:
+    "A chart page.  The starchart is a 2D array of these."
+    def __init__(self):
+	self.stars = None	# Will hold a number
+	self.starbase = None	# Will hold a bool
+	self.klingons = None	# Will hold a number
+
+class snapshot:
+    "State of the universe.  The galaxy is a 2D array of these."
+    def __init__(self):
+        self.crew = None	# crew complement
+	self.remkl = None	# remaining klingons
+	self.remcom = None	# remaining commanders
+	self.nscrem = None	# remaining super commanders
+	self.rembase = None	# remaining bases
+	self.starkl = None	# destroyed stars
+	self.basekl = None	# destroyed bases
+	self.nromrem = None	# Romulans remaining
+	self.nplankl = None	# destroyed uninhabited planets
+	self.nworldkl = None	# destroyed inhabited planets
+        self.plnets = [];	# List of planets known
+        self.date = None	# stardate
+	self.remres = None	# remaining resources
+	self. remtime = None	# remaining time
+        self.bases = [] 	# Base quadrant coordinates
+        self.kcmdr = [] 	# Commander quadrant coordinates
+        self.kscmdr = None	# Supercommander quadrant coordinates
+        self.galaxy = {}	# Dictionary of quadrant objects
+        self.chart = {}		# Dictionary of page objects
+
+def damaged(dev):
+    return game.damage[dev] != 0.0
+
+class event:
+    def __init__(self):
+        self.date = None	# The only mandatory attribute
+
+class game:
+    def __init__(self):
+        self.options = []		# List of option strings
+        self.state = snapshot()		# State of the universe
+        self.snapsht = snapshot()	# For backwards timetravel
+        self.quad = {}			# contents of our quadrant
+        self.kpower = {}		# enemy energy levels
+        self.kdist = {}			# enemy distances
+        self.kavgd = {}			# average distances
+        self.damage = {}		# damage encountered
+        self.future = []		# future events
+        self.passwd = None		# Self Destruct password
+        # Coordinate members start here
+	self.ks = {}			# enemy sector locations
+	self.quadrant = None		# where we are
+        self.sector = None
+	self.tholian = None		# coordinates of Tholian
+	self.base = None		# position of base in current quadrant
+	self.battle = None		# base coordinates being attacked
+	self.plnet = None		# location of planet in quadrant
+	self.probec = None		# current probe quadrant
+        # Flag members start here
+	self.gamewon = None		# Finished!
+	self.ididit = None		# action taken -- allows enemy to attack
+	self.alive = None		# we are alive (not killed)
+	self.justin = None		# just entered quadrant
+	self.shldup = None		# shields are up
+	self.shldchg = None		# shield changing (affects efficiency)
+	self.comhere = None		# commander here
+	self.ishere = None		# super-commander in quadrant
+	self.iscate = None		# super commander is here
+	self.ientesc = None		# attempted escape from supercommander
+	self.ithere = None		# Tholian is here 
+	self.resting = None		# rest time
+	self.icraft = None		# Kirk in Galileo
+	self.landed = None		# party on planet or on ship
+	self.alldone = None		# game is now finished
+	self.neutz = None		# Romulan Neutral Zone
+	self.isarmed = None		# probe is armed
+	self.inorbit = None		# orbiting a planet
+	self.imine = None		# mining
+	self.icrystl = None		# dilithium crystals aboard
+	self.iseenit = None		# seen base attack report
+	self.thawed = None		# thawed game
+        # String members start here
+        self.condition = None		# green, yellow, red, docked, dead,
+        self.iscraft = None		# onship, offship, removed
+        self.skill = None		# levels: none, novice, fair, good,
+        				# expert, emeritus
+        # Integer nembers sart here
+	self.inkling = None		# initial number of klingons
+	self.inbase = None		# initial number of bases
+	self.incom = None		# initial number of commanders
+	self.inscom = None		# initial number of commanders
+	self.inrom = None		# initial number of commanders
+	self.instar = None		# initial stars
+	self.intorps = None		# initial/max torpedoes
+	self.torps = None		# number of torpedoes
+	self.ship = None		# ship type -- 'E' is Enterprise
+	self.abandoned = None		# count of crew abandoned in space
+	self.length = None		# length of game
+	self.klhere = None		# klingons here
+	self.casual = None		# causalties
+	self.nhelp = None		# calls for help
+	self.nkinks = None		# count of energy-barrier crossings
+	self.iplnet = None		# planet # in quadrant
+	self.inplan = None		# initial planets
+	self.nenhere = None		# number of enemies in quadrant
+	self.irhere = None		# Romulans in quadrant
+	self.isatb = None		# =1 if super commander is attacking base
+	self.tourn = None		# tournament number
+	self.proben = None		# number of moves for probe
+	self.nprobes = None		# number of probes available
+        # Float members start here
+	self.inresor = None		# initial resources
+	self.intime = None		# initial time
+	self.inenrg = None		# initial/max energy
+	self.inshld = None		# initial/max shield
+	self.inlsr = None		# initial life support resources
+	self.indate = None		# initial date
+	self.energy = None		# energy level
+	self.shield = None		# shield level
+	self.warpfac = None		# warp speed
+	self.wfacsq = None		# squared warp factor
+	self.lsupres = None		# life support reserves
+	self.dist = None		# movement distance
+	self.direc = None		# movement direction
+	self.optime = None		# time taken by current operation
+	self.docfac = None		# repair factor when docking (constant?)
+	self.damfac = None		# damage factor
+	self.lastchart = None		# time star chart was last updated
+	self.cryprob = None		# probability that crystal will work
+	self.probex = None		# location of probe
+	self.probey = None		#
+	self.probeinx = None		# probe x,y increment
+	self.probeiny = None		#
+	self.height = None		# height of orbit around planet
+
+



From stsp at mail.berlios.de  Fri Sep 22 19:09:25 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Fri, 22 Sep 2006 19:09:25 +0200
Subject: [Sst-commit-watch] r629 - in trunk: . po src
Message-ID: <200609221709.k8MH9PRe019662@sheep.berlios.de>

Author: stsp
Date: 2006-09-22 19:09:23 +0200 (Fri, 22 Sep 2006)
New Revision: 629

Modified:
   trunk/TODO
   trunk/po/ru.po
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/io.c
   trunk/src/moving.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
   trunk/src/xio.c
Log:
- use ARRAY_SIZE
- cleaned up srscan()
- introduced a separate ncurses window for status
- removed completed TODO entries
- fixed SIGSEGV in tty mode when env LINES is undefined (always!)
- made "Please enter password" message visible
- made the above message to appear for OPTION_PLAIN instead of !OPTION_CURSES
- killed enqueue()
- localized status() (added helper prstat() )
- enabled gcc to check the format arguments, which uncovered a lot of
  the real bugs!
- fixed the bugs uncovered by the gcc format checking (the last one in
  ai.c is left for Eric :)
- fixed problem with skip(): it relied on "linecount", but "linecount"
  doesn't increment when you enter the multiline answers, like, for example,
  the torpedo courses. The fix works only in curses mode though - no idea
  how to fix this for tty.
- localized prouts(), however, not very cleanly. Any help is appreciated,
  see the added comments.

Modified: trunk/TODO
===================================================================
--- trunk/TODO	2006-09-22 16:18:30 UTC (rev 628)
+++ trunk/TODO	2006-09-22 17:09:23 UTC (rev 629)
@@ -7,12 +7,7 @@
 * Complete, polish, improve, complete, polish, improve the
   gettextization and the translation! Right now it just sucks.
 
-* Probably a separate window for status in ncurses mode
-  (right now status uses srscan window)
 
-* srscan() really needs to be restructured and cleaned up.
-
-
 Long-term items:
 
 * Wrap a GUI around it.

Modified: trunk/po/ru.po
===================================================================
--- trunk/po/ru.po	2006-09-22 16:18:30 UTC (rev 628)
+++ trunk/po/ru.po	2006-09-22 17:09:23 UTC (rev 629)
@@ -11,7 +11,7 @@
 msgstr ""
 "Project-Id-Version: sst 2.0\n"
 "Report-Msgid-Bugs-To: stsp\n"
-"POT-Creation-Date: 2006-09-20 20:51+0400\n"
+"POT-Creation-Date: 2006-09-22 20:54+0400\n"
 "PO-Revision-Date: 2006-09-15 11:01+0400\n"
 "Last-Translator: Stas Sergeev <stsp at aknet.ru>\n"
 "Language-Team: Russian <ru at li.org>\n"
@@ -39,44 +39,44 @@
 msgid " retreats to "
 msgstr " ????????? ? "
 
-#: src/ai.c:340 src/ai.c:518
+#: src/ai.c:341 src/ai.c:519
 msgid "Lt. Uhura-  \"Captain, Starfleet Intelligence reports"
 msgstr "??. ?????- \"???????, ???????? ????????? ????? ???????????"
 
-#: src/ai.c:341
+#: src/ai.c:342
 msgid "   a planet in "
 msgstr "   ??????? ? "
 
-#: src/ai.c:343
+#: src/ai.c:344
 msgid " has been destroyed"
 msgstr " ??????????"
 
-#: src/ai.c:344
+#: src/ai.c:345
 msgid "   by the Super-commander.\""
 msgstr "   ????-?????."
 
-#: src/ai.c:495 src/events.c:293
+#: src/ai.c:496 src/events.c:293
 msgid "Lt. Uhura-  \"Captain, the starbase in "
 msgstr "??. ?????- \"???????, ???? ? "
 
-#: src/ai.c:498
+#: src/ai.c:499
 msgid "   reports that it is under attack from the Klingon Super-commander."
 msgstr "   ????????, ??? ??? ????????? ????-????? ?????????."
 
-#: src/ai.c:499
+#: src/ai.c:500
 #, c-format
 msgid "   It can survive until stardate %d.\""
 msgstr "   ??? ?????? ???????????? ?? ???? %d.\""
 
-#: src/ai.c:502 src/events.c:49
+#: src/ai.c:503 src/events.c:49
 msgid "Mr. Spock-  \"Captain, shall we cancel the rest period?\""
 msgstr "?????? ????- \"???????, ??? ???????? ??????\""
 
-#: src/ai.c:519
+#: src/ai.c:520
 msgid "   the Super-commander is in "
 msgstr "   ????-??? ????????? ? "
 
-#: src/ai.c:584
+#: src/ai.c:585
 msgid " completes web."
 msgstr " ??????? ????."
 
@@ -104,7 +104,7 @@
 msgid "Shields already up."
 msgstr "?????? ? ??? ??? ???????."
 
-#: src/battle.c:67 src/battle.c:1262
+#: src/battle.c:67 src/battle.c:1282
 msgid "Shields raised."
 msgstr "?????? ???????."
 
@@ -116,9 +116,9 @@
 msgid "Shields already down."
 msgstr "?????? ? ??? ??? ?????."
 
-#: src/battle.c:83 src/battle.c:940
+#: src/battle.c:83 src/battle.c:960
 msgid "Shields lowered."
-msgstr "?????? ???????."
+msgstr "?????? ?????."
 
 #: src/battle.c:94
 msgid "Insufficient ship energy."
@@ -132,7 +132,7 @@
 msgid "Excess energy requested returned to ship energy"
 msgstr "?????? ??????? ????????? ???????"
 
-#: src/battle.c:110 src/moving.c:526 src/moving.c:617
+#: src/battle.c:110 src/moving.c:525 src/moving.c:616
 msgid "Engineering to bridge--"
 msgstr "?????????? ????? ???????--"
 
@@ -160,8 +160,8 @@
 msgid "Draining energy from shields.\""
 msgstr "???????? ??????? ?? ??????.\""
 
-#: src/battle.c:195 src/battle.c:944 src/events.c:852 src/moving.c:140
-#: src/moving.c:725 src/planets.c:458
+#: src/battle.c:195 src/battle.c:964 src/events.c:851 src/moving.c:140
+#: src/moving.c:724 src/planets.c:458
 msgid "***RED ALERT!  RED ALERT!"
 msgstr "***???????!  ???????!"
 
@@ -191,388 +191,387 @@
 msgstr "***?? ???????? ??????????? ? %d ????????????"
 
 #: src/battle.c:236
-#, fuzzy
 msgid "***Shields are down."
-msgstr "?????? ? ??? ??? ?????."
+msgstr "***?????? ?????."
 
-#: src/battle.c:284
+#: src/battle.c:285
 msgid "Torpedo hits "
 msgstr "??????? ?????? ? ????: "
 
-#: src/battle.c:319
+#: src/battle.c:320
 msgid " uses anti-photon device;"
 msgstr " ?????????? ??????????????? ?????????;"
 
-#: src/battle.c:320
+#: src/battle.c:321
 msgid "   torpedo neutralized."
 msgstr "   ??????? ??????????????."
 
-#: src/battle.c:349 src/battle.c:359
+#: src/battle.c:350 src/battle.c:360
 msgid " damaged but not destroyed."
 msgstr " ?????????, ?? ?? ?????????."
 
-#: src/battle.c:353
+#: src/battle.c:354
 msgid " buffeted into black hole."
 msgstr " ??????? ? ?????? ????."
 
-#: src/battle.c:362
+#: src/battle.c:363
 msgid " damaged--"
 msgstr " ?????????--"
 
-#: src/battle.c:368
+#: src/battle.c:369
 msgid "***STARBASE DESTROYED.."
 msgstr "***???? ??????????.."
 
-#: src/battle.c:385 src/battle.c:399 src/battle.c:740 src/events.c:677
+#: src/battle.c:386 src/battle.c:400 src/battle.c:760 src/events.c:676
 #: src/events.c:697
 msgid " destroyed."
 msgstr " ?????????."
 
-#: src/battle.c:410
+#: src/battle.c:411
 msgid "You have just destroyed an inhabited planet."
 msgstr "?? ?????? ??? ?????????? ????????? ???????."
 
-#: src/battle.c:411
+#: src/battle.c:412
 msgid "Celebratory rallies are being held on the Klingon homeworld."
-msgstr "?? ??????? ????????? ?????? ??????????? ????????????."
+msgstr "?? ??????? ????????? ?????? ??????????? ???????."
 
-#: src/battle.c:419
+#: src/battle.c:420
 msgid " unaffected by photon blast."
 msgstr " ?? ????????? ???????? ???????."
 
-#: src/battle.c:424
+#: src/battle.c:425
 msgid "AAAAIIIIEEEEEEEEAAAAAAAAUUUUUGGGGGHHHHHHHHHHHH!!!"
 msgstr "?????????????????????????????????????????????????????!!!"
 
-#: src/battle.c:426
+#: src/battle.c:427
 msgid "    HACK!     HACK!    HACK!        *CHOKE!*  "
 msgstr ""
 
-#: src/battle.c:428
+#: src/battle.c:429
 msgid "Mr. Spock-"
 msgstr "?????? ????-"
 
-#: src/battle.c:429
+#: src/battle.c:430
 msgid "  \"Fascinating!\""
 msgstr "  \"??????????!\""
 
-#: src/battle.c:445
+#: src/battle.c:446
 msgid " swallows torpedo."
 msgstr " ????????? ???????."
 
-#: src/battle.c:449
+#: src/battle.c:450
 msgid "***Torpedo absorbed by Tholian web."
 msgstr "***?????????? ???? ????????? ???????."
 
-#: src/battle.c:464
+#: src/battle.c:465
 msgid " survives photon blast."
 msgstr " ???????? ???????? ?????."
 
-#: src/battle.c:467
+#: src/battle.c:468
 msgid " disappears."
 msgstr " ?????."
 
-#: src/battle.c:489
+#: src/battle.c:490
 #, c-format
 msgid " displaced by blast to %s "
 msgstr " ????????? ??????? ? %s "
 
-#: src/battle.c:496
+#: src/battle.c:497
 msgid "Torpedo missed."
 msgstr "??????? ?????????."
 
-#: src/battle.c:510
+#: src/battle.c:511
 msgid "***CRITICAL HIT--"
 msgstr "***??????????? ????--"
 
-#: src/battle.c:526
+#: src/battle.c:527
 msgid " and "
 msgstr " ? "
 
-#: src/battle.c:530
+#: src/battle.c:531
 msgid " damaged."
 msgstr " ?????????."
 
-#: src/battle.c:532
+#: src/battle.c:533
 msgid "***Shields knocked down."
 msgstr "***?????? ?????."
 
-#: src/battle.c:589
+#: src/battle.c:610
 msgid "***TORPEDO INCOMING"
 msgstr "***??????? ????????????"
 
-#: src/battle.c:591
+#: src/battle.c:612
 msgid " From "
 msgstr " ?? "
 
-#: src/battle.c:623
+#: src/battle.c:645
 #, c-format
 msgid "%d unit hit"
 msgstr "???? ?? %d ??????"
 
-#: src/battle.c:625
+#: src/battle.c:647
 msgid " on the "
 msgstr " ?? "
 
-#: src/battle.c:629
+#: src/battle.c:651
 msgid " from "
 msgstr " ?? "
 
-#: src/battle.c:647
+#: src/battle.c:667
 msgid "***Enemies decide against attacking your ship."
 msgstr "***????? ?????? ?? ????????? ??? ???????."
 
-#: src/battle.c:652
+#: src/battle.c:672
 msgid "Enemy attack reduces shield strength to "
 msgstr "????????? ????? ????????? ???? ?????? ?? "
 
-#: src/battle.c:657
+#: src/battle.c:677
 #, c-format
 msgid "Energy left %2d    shields "
 msgstr "??????? ???????: %2d    ?????? "
 
-#: src/battle.c:658
+#: src/battle.c:678
 msgid "up "
 msgstr "??????? "
 
-#: src/battle.c:659
+#: src/battle.c:679
 msgid "down "
 msgstr "????? "
 
-#: src/battle.c:660
+#: src/battle.c:680
 msgid "damaged, "
 msgstr "???????, "
 
-#: src/battle.c:662
+#: src/battle.c:682
 #, c-format
 msgid "%d%%,   torpedoes left %d"
 msgstr "%d%%,   ???????? %d ??????"
 
-#: src/battle.c:668
+#: src/battle.c:688
 #, c-format
 msgid "Mc Coy-  \"Sickbay to bridge.  We suffered %d casualties"
 msgstr "??????- \"??????? ???????.  ? ??? ????????? %d ????????????"
 
-#: src/battle.c:669
+#: src/battle.c:689
 msgid "   in that last attack.\""
 msgstr "   ?? ????????? ?????.\""
 
-#: src/battle.c:779
+#: src/battle.c:799
 msgid "Spock-  \"Bridge to sickbay.  Dr. McCoy,"
 msgstr "????- \"?????? ????????.  ?????? ??????,"
 
-#: src/battle.c:780
+#: src/battle.c:800
 msgid "  I recommend an immediate review of"
 msgstr "  ?????????? ?????????? ?????????"
 
-#: src/battle.c:781
+#: src/battle.c:801
 msgid "  the Captain's psychological profile.\""
 msgstr "  ??????????????? ????????? ????????.\""
 
-#: src/battle.c:800
+#: src/battle.c:820
 msgid "Photon tubes damaged."
 msgstr "???????? ????? ???????."
 
-#: src/battle.c:805
+#: src/battle.c:825
 msgid "No torpedoes left."
 msgstr "?????? ?????? ?? ????????."
 
-#: src/battle.c:816
+#: src/battle.c:836
 #, c-format
 msgid "%d torpedoes left."
 msgstr "???????? %d ??????."
 
-#: src/battle.c:817
+#: src/battle.c:837
 msgid "Number of torpedoes to fire- "
 msgstr "????? ?????? ?? ???????- "
 
-#: src/battle.c:828
+#: src/battle.c:848
 msgid "Maximum of 3 torpedoes per burst."
 msgstr "???????? 3 ??????? ?? ????."
 
-#: src/battle.c:869
+#: src/battle.c:889
 #, c-format
 msgid "Target sector for torpedo number %d- "
 msgstr "?????? ?????????? ??? ??????? ????? %d- "
 
-#: src/battle.c:896
+#: src/battle.c:916
 #, c-format
 msgid "***TORPEDO NUMBER %d MISFIRES"
 msgstr "***??????? ????? %d ?? ?????"
 
-#: src/battle.c:898
+#: src/battle.c:918
 msgid "***TORPEDO MISFIRES."
 msgstr "***??????? ?? ?????."
 
-#: src/battle.c:901
+#: src/battle.c:921
 msgid "  Remainder of burst aborted."
 msgstr "  ??????? ????? ???????."
 
-#: src/battle.c:904
+#: src/battle.c:924
 msgid "***Photon tubes damaged by misfire."
 msgstr "***???????? ????? ????????? ??? ??????."
 
-#: src/battle.c:926
+#: src/battle.c:946
 msgid "Weapons officer Sulu-  \"Phasers overheated, sir.\""
 msgstr "???????? ????- \"?????? ??????????, ???.\""
 
-#: src/battle.c:950
+#: src/battle.c:970
 msgid "Sulu-  \"Captain! Shield malf***********************\""
 msgstr "????- \"???????! ?????? ?? ????*********************\""
 
-#: src/battle.c:956
+#: src/battle.c:976
 msgid "Sulu-  \"Captain! Shield malfunction! Phaser fire contained!\""
 msgstr ""
 "????- \"???????! ?????? ?? ?????????! ??????? ??????? ????????? ??????!\""
 
-#: src/battle.c:958
+#: src/battle.c:978
 msgid "Lt. Uhura-  \"Sir, all decks reporting damage.\""
 msgstr "??. ?????- \"???, ??? ?????? ???????? ? ???????????.\""
 
-#: src/battle.c:964
+#: src/battle.c:984
 msgid "McCoy to bridge- \"Severe radiation burns, Jim."
 msgstr "?????? ???????- \"?????????? ???????????? ?????, ????."
 
-#: src/battle.c:965
+#: src/battle.c:985
 #, c-format
 msgid "  %d casualties so far.\""
 msgstr "  ????-??? %d ????????????.\""
 
-#: src/battle.c:970
+#: src/battle.c:990
 msgid "Phaser energy dispersed by shields."
 msgstr "??????? ??????? ???????? ???????? ?????."
 
-#: src/battle.c:971
+#: src/battle.c:991
 msgid "Enemy unaffected."
 msgstr "???? ?? ?????????."
 
-#: src/battle.c:991
+#: src/battle.c:1011
 msgid "Phasers can't be fired through base shields."
 msgstr "?????? ?? ????? ???????? ????? ?????? ????."
 
-#: src/battle.c:996
+#: src/battle.c:1016
 msgid "Phaser control damaged."
 msgstr "?????????? ???????? ?? ????????."
 
-#: src/battle.c:1002
+#: src/battle.c:1022
 msgid "High speed shield control damaged."
 msgstr "???????????????? ?????????? ??????? ?? ????????."
 
-#: src/battle.c:1007
+#: src/battle.c:1027
 msgid "Insufficient energy to activate high-speed shield control."
 msgstr "???????????? ??????? ??? ????????????????? ?????????? ???????."
 
-#: src/battle.c:1011
+#: src/battle.c:1031
 msgid "Weapons Officer Sulu-  \"High-speed shield control enabled, sir.\""
 msgstr "???????? ????- \"???????????????? ?????????? ??????? ????????, ???.\""
 
-#: src/battle.c:1021
+#: src/battle.c:1041
 msgid "There is no enemy present to select."
 msgstr "????? ??? ??????."
 
-#: src/battle.c:1037 src/battle.c:1052 src/battle.c:1063
+#: src/battle.c:1057 src/battle.c:1072 src/battle.c:1083
 msgid "Energy will be expended into space."
 msgstr "??????? ????? ? ???????."
 
-#: src/battle.c:1069
+#: src/battle.c:1089
 msgid "Manual or automatic? "
 msgstr "?????? ??? ??????????????? "
 
-#: src/battle.c:1080
+#: src/battle.c:1100
 #, c-format
 msgid "Phasers locked on target. Energy available: %.2f"
 msgstr "?????? ???????? ?? ????. ????????? ???????: %.2f"
 
-#: src/battle.c:1090
+#: src/battle.c:1110
 #, c-format
 msgid "%d units required. "
 msgstr "?????????? %d ??????. "
 
-#: src/battle.c:1092
+#: src/battle.c:1112
 msgid "Units to fire= "
 msgstr "??????? ?? ???????= "
 
-#: src/battle.c:1097 src/battle.c:1168
+#: src/battle.c:1117 src/battle.c:1188
 #, c-format
 msgid "Energy available= %.2f"
 msgstr "????????? ???????= %.2f"
 
-#: src/battle.c:1138
+#: src/battle.c:1158
 msgid "*** Tholian web absorbs "
 msgstr "*** ?????????? ???? ????????? "
 
-#: src/battle.c:1139
+#: src/battle.c:1159
 msgid "excess "
 msgstr "?????????? "
 
-#: src/battle.c:1140
+#: src/battle.c:1160
 msgid "phaser energy."
 msgstr "??????? ???????."
 
-#: src/battle.c:1143
+#: src/battle.c:1163
 #, c-format
 msgid "%d expended on empty space."
 msgstr "%d ???? ? ???????."
 
-#: src/battle.c:1152
-#, fuzzy
-msgid "Battle computer damaged, manual file only."
-msgstr "???????? ????????? ??????, ??????????? ?????? ??????????."
+#: src/battle.c:1172
+msgid "Battle computer damaged, manual fire only."
+msgstr "???????? ????????? ??????, ??????????? ?????? ?????????."
 
-#: src/battle.c:1155 src/finish.c:14
+#: src/battle.c:1175 src/finish.c:14
 msgid "---WORKING---"
 msgstr "---??????---"
 
-#: src/battle.c:1157
+#: src/battle.c:1177
 msgid "Short-range-sensors-damaged"
 msgstr "???????-????????-??????-???????"
 
-#: src/battle.c:1158
+#: src/battle.c:1178
 msgid "Insufficient-data-for-automatic-phaser-fire"
 msgstr "????????????-??????-???-???????????????-?????????-???????"
 
-#: src/battle.c:1159
+#: src/battle.c:1179
 msgid "Manual-fire-must-be-used"
 msgstr "???????????-??????-?????????"
 
-#: src/battle.c:1177
+#: src/battle.c:1197
 msgid " can't be located without short range scan."
 msgstr " ?? ????? ???? ????????? ??? ???????? ????????????."
 
-#: src/battle.c:1194
+#: src/battle.c:1214
 msgid "units to fire at "
 msgstr "??????? ?? ??????? ?? "
 
-#: src/battle.c:1224
+#: src/battle.c:1244
 msgid "Available energy exceeded -- try again."
 msgstr "????????? ??????? ?? ??????? -- ?????????? ?????."
 
-#: src/battle.c:1256
+#: src/battle.c:1276
 msgid "Sulu-  \"Sir, the high-speed shield control has malfunctioned . . ."
 msgstr "????- \"???, ???????????????? ?????????? ??????? ?? ????????? . . ."
 
-#: src/battle.c:1257
+#: src/battle.c:1277
 msgid "         CLICK   CLICK   POP  . . ."
 msgstr "         ????   ????   ????  . . ."
 
-#: src/battle.c:1258
+#: src/battle.c:1278
 msgid " No response, sir!"
 msgstr " ??? ???????, ???!"
 
-#: src/battle.c:1292
+#: src/battle.c:1312
 #, c-format
 msgid "%d unit hit on "
 msgstr "%d ?????? ??????? ??????? ?? "
 
-#: src/battle.c:1295
+#: src/battle.c:1315
 msgid "Very small hit on "
 msgstr "????? ?????? ???? ?? "
 
-#: src/battle.c:1309
-msgid "***Mr. Spock-  \"Captain, the vessel at "
+#: src/battle.c:1329
+#, fuzzy, c-format
+msgid "***Mr. Spock-  \"Captain, the vessel at %s"
 msgstr "***?????? ????- \"???????, ??????? ?? "
 
-#: src/battle.c:1311
+#: src/battle.c:1331
 msgid "   has just lost its firepower.\""
 msgstr "   ??????? ??????????????.\""
 
@@ -649,36 +648,36 @@
 msgid "a Klingon Commander"
 msgstr "?????????? ?????????"
 
-#: src/events.c:387
+#: src/events.c:386
 msgid "Lt. Uhura-  \"The deep space probe "
 msgstr "??. ?????- \"???????????? ??????????? ?????? "
 
-#: src/events.c:389
+#: src/events.c:388
 msgid "has left the galaxy"
 msgstr "???????? ?????????"
 
-#: src/events.c:391
+#: src/events.c:390
 msgid "is no longer transmitting"
 msgstr "?????? ?? ????????"
 
-#: src/events.c:401
+#: src/events.c:400
 msgid "Lt. Uhura-  \"The deep space probe is now in "
 msgstr "??. ?????- \"???????????? ??????????? ?????? ?????? ? "
 
-#: src/events.c:558
+#: src/events.c:557
 msgid "How long? "
 msgstr "????? ????? "
 
-#: src/events.c:568
+#: src/events.c:567
 msgid "Are you sure? "
 msgstr "?? ???????? "
 
-#: src/events.c:578
+#: src/events.c:577
 #, c-format
 msgid "%d stardates left."
 msgstr "???????? %d ????."
 
-#: src/events.c:631 src/events.c:670
+#: src/events.c:630 src/events.c:669
 msgid " novas."
 msgstr " ??????????."
 
@@ -706,29 +705,30 @@
 msgid "Force of nova displaces starship."
 msgstr "????? ?????? ??????? ?????????."
 
-#: src/events.c:832
+#: src/events.c:831
 #, c-format
 msgid "Message from Starfleet Command       Stardate %.2f"
 msgstr "????????? ?? ????? ????????? ?????       ???? %.2f"
 
-#: src/events.c:833
+#: src/events.c:832
 #, c-format
 msgid "     Supernova in %s; caution advised."
 msgstr "     ????? ?????????? ? %s; ?????????? ????????????."
 
-#: src/events.c:854
-msgid "***Incipient supernova detected at "
+#: src/events.c:853
+#, fuzzy, c-format
+msgid "***Incipient supernova detected at %s"
 msgstr "***???????????????? ????????? ?????????? ? "
 
-#: src/events.c:856
+#: src/events.c:855
 msgid "Emergency override attempts t"
 msgstr "????????? ???????? ?"
 
-#: src/events.c:923
+#: src/events.c:922
 msgid "Lucky you!"
 msgstr "???????!"
 
-#: src/events.c:924
+#: src/events.c:923
 #, c-format
 msgid "A supernova in %s has just destroyed the last Klingons."
 msgstr "?????????? ? %s ??? ??? ?????????? ????????? ?????????."
@@ -903,7 +903,7 @@
 msgid "Your energy supply is exhausted."
 msgstr "????????? ??????? ???????."
 
-#: src/finish.c:187 src/finish.c:206 src/finish.c:225 src/moving.c:727
+#: src/finish.c:187 src/finish.c:206 src/finish.c:225 src/moving.c:726
 msgid "The "
 msgstr " "
 
@@ -1331,28 +1331,28 @@
 msgstr ""
 "                                                    ????????? ? ????:  %.2f\n"
 
-#: src/io.c:94
+#: src/io.c:98
 msgid "[ANOUNCEMENT ARRIVING...]"
 msgstr "[????????? ?????????...]"
 
-#: src/io.c:96
+#: src/io.c:100
 msgid "[IMPORTANT ANNOUNCEMENT ARRIVING -- PRESS ENTER TO CONTINUE]"
 msgstr "[????????? ?????? ????????? -- ??????? ???? ??? ???????????]"
 
-#: src/io.c:100
+#: src/io.c:104
 msgid "[CONTINUE?]"
 msgstr "[???????????]"
 
-#: src/io.c:102
+#: src/io.c:106
 msgid "[PRESS ENTER TO CONTINUE]"
 msgstr "[??????? ???? ??? ???????????]"
 
-#: src/io.c:390
+#: src/io.c:400
 #, c-format
 msgid "Track for torpedo number %d-  "
 msgstr "?????? ??????? ????? %d- "
 
-#: src/io.c:394
+#: src/io.c:404
 msgid "Torpedo track- "
 msgstr "?????? ???????- "
 
@@ -1398,471 +1398,470 @@
 msgid "%2d units of energy."
 msgstr "%2d ?????? ???????."
 
-#: src/moving.c:216
+#: src/moving.c:215
 msgid "Already docked."
 msgstr "? ??? ??? ????????????."
 
-#: src/moving.c:220
+#: src/moving.c:219
 msgid "You must first leave standard orbit."
 msgstr "??????? ?? ?????? ???? ? ??????."
 
-#: src/moving.c:225
+#: src/moving.c:224
 msgid " not adjacent to base."
 msgstr " ??? ???????????? ????."
 
-#: src/moving.c:229
+#: src/moving.c:228
 msgid "Docked."
 msgstr "????????????."
 
-#: src/moving.c:239
+#: src/moving.c:238
 msgid "Lt. Uhura- \"Captain, an important message from the starbase:\""
 msgstr "??. ?????- \"???????, ??? ?????? ????????? ? ????:\""
 
-#: src/moving.c:272
+#: src/moving.c:271
 msgid "Dummy! You can't leave standard orbit until you"
 msgstr "?????! ?? ?? ?????? ???? ? ?????? ???? ?? ??"
 
-#: src/moving.c:273
+#: src/moving.c:272
 msgid "are back aboard the ship."
 msgstr "????????? ?? ???? ???????."
 
-#: src/moving.c:280
+#: src/moving.c:279
 msgid "Computer damaged; manual navigation only"
 msgstr "????????? ??????; ?????? ?????? ?????????? ????????"
 
-#: src/moving.c:282
+#: src/moving.c:281
 msgid "Computer damaged; manual movement only"
 msgstr "????????? ??????; ????????? ??????????? ???????"
 
-#: src/moving.c:297
+#: src/moving.c:296
 msgid "Manual or automatic- "
 msgstr "?????? ??? ??????????????- "
 
-#: src/moving.c:320
+#: src/moving.c:319
 msgid "(Manual navigation assumed.)"
 msgstr "(???????????? ?????? ??????????.)"
 
-#: src/moving.c:322
+#: src/moving.c:321
 msgid "(Manual movement assumed.)"
 msgstr "(???????????? ?????? ?????????.)"
 
-#: src/moving.c:331
+#: src/moving.c:330
 msgid "Target quadrant or quadrant&sector- "
 msgstr "???????? ?????????? ??? ????????&??????- "
 
-#: src/moving.c:333
+#: src/moving.c:332
 msgid "Destination sector or quadrant&sector- "
 msgstr "?????? ?????????? ??? ????????&??????- "
 
-#: src/moving.c:387
+#: src/moving.c:386
 #, c-format
 msgid "Helmsman Sulu- \"Course locked in for %s.\""
 msgstr "??????? ????- \"???? ???? ?? %s.\""
 
-#: src/moving.c:391
+#: src/moving.c:390
 msgid "Ensign Chekov- \"Course laid in, Captain.\""
 msgstr "????????? ?????- \"???? ????, ???????.\""
 
-#: src/moving.c:398
+#: src/moving.c:397
 msgid "X and Y displacements- "
 msgstr "?????????? ?? X ? Y- "
 
-#: src/moving.c:423
+#: src/moving.c:422
 msgid "Helmsman Sulu- \"Aye, Sir.\""
 msgstr "??????? ????- \"???, ???.\""
 
-#: src/moving.c:443 src/moving.c:503
+#: src/moving.c:442 src/moving.c:502
 msgid "Engineer Scott- \"The impulse engines are damaged, Sir.\""
 msgstr "??????? ????- \"?????????? ????????? ??????????, ???.\""
 
-#: src/moving.c:458
+#: src/moving.c:457
 msgid "First Officer Spock- \"Captain, the impulse engines"
 msgstr "?????? ?????? ????- \"???????, ?????????? ?????????"
 
-#: src/moving.c:459
+#: src/moving.c:458
 msgid "require 20.0 units to engage, plus 100.0 units per"
 msgstr "??????? 20.0 ?????? ??????? ??? ???????, ???? 100.0 ?????? ??"
 
-#: src/moving.c:461
+#: src/moving.c:460
 #, c-format
 msgid "quadrant.  We can go, therefore, a maximum of %d"
 msgstr "????????.  ?????????????, ?? ???????? ???????? %d"
 
-#: src/moving.c:463
+#: src/moving.c:462
 msgid " quadrants.\""
 msgstr " ??????????.\""
 
-#: src/moving.c:466
+#: src/moving.c:465
 msgid "quadrant.  They are, therefore, useless.\""
 msgstr "????????.  ????? ??????? ??? ??????????.\""
 
-#: src/moving.c:474
+#: src/moving.c:473
 msgid "First Officer Spock- \"Captain, our speed under impulse"
 msgstr "?????? ?????? ????- \"???????, ???? ???????? ?? ??????????"
 
-#: src/moving.c:475
+#: src/moving.c:474
 msgid "power is only 0.95 sectors per stardate. Are you sure"
 msgstr "???? ????? 0.95 ???????? ? ????. ?? ???????,"
 
-#: src/moving.c:476
+#: src/moving.c:475
 msgid "we dare spend the time?\" "
 msgstr "??? ?? ????? ??????? ??????? ????????\" "
 
-#: src/moving.c:509
+#: src/moving.c:508
 msgid "Engineer Scott- \"Sorry, Captain. Until this damage"
 msgstr "??????? ????- \"????????, ???????. ???? ??? ????????????? ??"
 
-#: src/moving.c:510
+#: src/moving.c:509
 msgid "  is repaired, I can only give you warp 4.\""
 msgstr "  ?????????, ? ???? ?????? ?????????? ??? ???????? 4.\""
 
-#: src/moving.c:530
+#: src/moving.c:529
 msgid "We can't do it, Captain. We don't have enough energy."
 msgstr "?? ??????, ???????. ? ??? ?? ?????? ???????."
 
-#: src/moving.c:533
+#: src/moving.c:532
 #, c-format
 msgid "We don't have enough energy, but we could do it at warp %d"
 msgstr "? ??? ?? ?????????? ???????, ?? ?? ????? ?? ??????? ?? ??? ???????? %d"
 
-#: src/moving.c:536
+#: src/moving.c:535
 msgid "if you'll lower the shields."
 msgstr ", ???? ?????? ?? ???????? ??????."
 
-#: src/moving.c:543
+#: src/moving.c:542
 msgid "We haven't the energy to go that far with the shields up."
 msgstr "? ??? ??? ??????? ????? ?????? ??? ?????? ? ???????? ???????."
 
-#: src/moving.c:551
+#: src/moving.c:550
 msgid "First Officer Spock- \"Captain, I compute that such"
 msgstr "?????? ?????? ????- \"???????, ? ?????? ??? ?????"
 
-#: src/moving.c:552
+#: src/moving.c:551
 #, c-format
 msgid "  a trip would require approximately %2.0f"
 msgstr "  ????? ????????? ???????? %2.0f"
 
-#: src/moving.c:554
+#: src/moving.c:553
 msgid " percent of our"
 msgstr " ?????????"
 
-#: src/moving.c:555
+#: src/moving.c:554
 msgid "  remaining time.  Are you sure this is wise?\" "
 msgstr " ??????????? ???????.  ?? ??????? ??? ??? ????????\" "
 
-#: src/moving.c:618
+#: src/moving.c:617
 msgid "  Scott here.  The warp engines are damaged."
 msgstr "  ???? ?? ?????.  ??????????????????? ????????? ???????."
 
-#: src/moving.c:619
+#: src/moving.c:618
 msgid "  We'll have to reduce speed to warp 4."
 msgstr "  ???????? ??????? ???????? ?? 4."
 
-#: src/moving.c:635
+#: src/moving.c:634
 msgid "Warp factor- "
 msgstr "????????- "
 
-#: src/moving.c:643
+#: src/moving.c:642
 msgid "Warp engines inoperative."
 msgstr "??????????????????? ????????? ?? ????????."
 
-#: src/moving.c:647
+#: src/moving.c:646
 msgid "Engineer Scott- \"I'm doing my best, Captain,"
 msgstr "??????? ????- \"? ????? ??? ??? ????, ???????,"
 
-#: src/moving.c:648
+#: src/moving.c:647
 msgid "  but right now we can only go warp 4.\""
 msgstr "  ?? ?????? ?? ????? ???? ?????? ???????? 4."
 
-#: src/moving.c:652
+#: src/moving.c:651
 msgid "Helmsman Sulu- \"Our top speed is warp 10, Captain.\""
 msgstr "????????? ????- \"???? ???????????? ???????? - 10, ???????.\""
 
-#: src/moving.c:656
+#: src/moving.c:655
 msgid "Helmsman Sulu- \"We can't go below warp 1, Captain.\""
 msgstr "????????? ????- \"?? ?? ????? ?????????? ???????? ???? 1, ???????.\""
 
-#: src/moving.c:663
+#: src/moving.c:662
 #, c-format
 msgid "Helmsman Sulu- \"Warp factor %d, Captain.\""
 msgstr "????????? ????- \"???????? %d, ???????.\""
 
-#: src/moving.c:668
+#: src/moving.c:667
 msgid "Engineer Scott- \"Aye, but our maximum safe speed is warp 6.\""
 msgstr "??????? ????- \"???, ???? ?????????? ?????????? ???????? - 6.\""
 
-#: src/moving.c:672
+#: src/moving.c:671
 msgid "Engineer Scott- \"Aye, Captain, we'll try it.\""
 msgstr "??????? ????- \"??? ???????, ?????????.\""
 
-#: src/moving.c:675
+#: src/moving.c:674
 msgid "Engineer Scott- \"Aye, Captain, but our engines may not take it.\""
 msgstr "??????? ????- \"??? ???????, ?? ???? ?????? ????? ?? ??????????.\""
 
-#: src/moving.c:691
+#: src/moving.c:690
 msgid "Scotty rushes to the transporter controls."
 msgstr "????? ????????? ? ?????????? ?????????????."
 
-#: src/moving.c:693
+#: src/moving.c:692
 msgid "But with the shields up it's hopeless."
 msgstr "?? ? ???????? ??????? ??? ??????????."
 
-#: src/moving.c:696
+#: src/moving.c:695
 msgid "His desperate attempt to rescue you . . ."
 msgstr "??? ????????? ??????? ?????? ??? . . ."
 
-#: src/moving.c:698 src/moving.c:1017
+#: src/moving.c:697 src/moving.c:1015
 msgid "fails."
 msgstr "???????????."
 
-#: src/moving.c:702
+#: src/moving.c:701
 msgid "SUCCEEDS!"
 msgstr "?????????? ???????!"
 
-#: src/moving.c:705
+#: src/moving.c:704
 msgid "The crystals mined were "
 msgstr "????????? ????????? "
 
-#: src/moving.c:707
+#: src/moving.c:706
 msgid "lost."
 msgstr "???????."
 
-#: src/moving.c:710
+#: src/moving.c:709
 msgid "saved."
 msgstr "???????????."
 
-#: src/moving.c:729
+#: src/moving.c:728
 msgid " has stopped in a quadrant containing"
 msgstr " ??????????? ? ????????? ??"
 
-#: src/moving.c:730
+#: src/moving.c:729
 msgid "   a supernova."
 msgstr "   ??????????."
 
-#: src/moving.c:733
+#: src/moving.c:732
 msgid "***Emergency automatic override attempts to hurl "
 msgstr "***????????? ???????? ??????? "
 
-#: src/moving.c:736
+#: src/moving.c:735
 msgid "safely out of quadrant."
 msgstr "?? ?????????."
 
-#: src/moving.c:742
+#: src/moving.c:741
 msgid "Warp engines damaged."
 msgstr "??????????????????? ????????? ??????????."
 
-#: src/moving.c:748
+#: src/moving.c:747
 #, c-format
 msgid "Warp factor set to %d"
 msgstr "???????? ??????????? ?? %d"
 
-#: src/moving.c:762
+#: src/moving.c:761
 msgid "Insufficient energy to leave quadrant."
 msgstr "???????????? ??????? ????? ???????? ????????."
 
-#: src/moving.c:778
+#: src/moving.c:777
 msgid "***TIME WARP ENTERED."
 msgstr "***??????????? ?????????? ??????????."
 
-#: src/moving.c:781
+#: src/moving.c:780
 #, c-format
 msgid "You are traveling backwards in time %d stardates."
 msgstr "?? ????????????? ????? ?? ??????? ?? %d ????."
 
-#: src/moving.c:806
+#: src/moving.c:805
 msgid "Checkov-  \"Security reports the Galileo has disappeared, Sir!"
 msgstr "?????- \"?????? ??????????? ? ??????? ???????, ???!"
 
-#: src/moving.c:814
+#: src/moving.c:813
 msgid "Checkov-  \"Security reports the Galileo has reappeared in the dock!\""
 msgstr "?????- \"?????? ?????????? ? ????????? ??????? ? ????!\""
 
-#: src/moving.c:821
+#: src/moving.c:820
 msgid "Spock has reconstructed a correct star chart from memory"
 msgstr "???? ??????????? ???????? ????? ?? ??????"
 
-#: src/moving.c:826
+#: src/moving.c:825
 #, c-format
 msgid "You are traveling forward in time %d stardates."
 msgstr "?? ????????????? ?????? ?? ??????? ?? %d ????."
 
-#: src/moving.c:845
+#: src/moving.c:844
 msgid "Engineer Scott- \"We have no more deep space probes, Sir.\""
 msgstr ""
 "??????? ????- \"? ??? ?????? ??? ???????????? ??????????? ?????, ???.\""
 
-#: src/moving.c:847
+#: src/moving.c:846
 msgid "Ye Faerie Queene has no deep space probes."
 msgstr "?? ????????? ???????? ??? ???????????? ??????????? ?????."
 
-#: src/moving.c:853
+#: src/moving.c:852
 msgid "Engineer Scott- \"The probe launcher is damaged, Sir.\""
 msgstr "??????? ????- \"???????? ??????? ??????, ???.\""
 
-#: src/moving.c:860
+#: src/moving.c:859
 msgid "Spock-  \"Records show the previous probe has not yet"
 msgstr "????- \"??????? ? ?????????? ?????? ??????? ? ???, ??? ??? ??? ??"
 
-#: src/moving.c:861
+#: src/moving.c:860
 msgid "   reached its destination.\""
 msgstr "   ???????? ?????? ??????????.\""
 
-#: src/moving.c:864
+#: src/moving.c:863
 msgid "Uhura- \"The previous probe is still reporting data, Sir.\""
 msgstr "?????- \"?????????? ?????? ??? ??? ???????? ???????, ???.\""
 
-#: src/moving.c:871
+#: src/moving.c:870
 #, c-format
 msgid "%d probe left."
 msgstr "???????? %d ???????."
 
-#: src/moving.c:871
+#: src/moving.c:870
 #, c-format
 msgid "%d probes left."
 msgstr "???????? %d ??????."
 
-#: src/moving.c:872
+#: src/moving.c:871
 msgid "Are you sure you want to fire a probe? "
 msgstr "?? ???????, ??? ?????? ????????? ??????? "
 
-#: src/moving.c:882
+#: src/moving.c:881
 msgid "Arm NOVAMAX warhead? "
 msgstr "????????? ??????? ???????????? "
 
-#: src/moving.c:903
+#: src/moving.c:902
 msgid "Ensign Chekov-  \"The deep space probe is launched, Captain.\""
 msgstr ""
 "????????? ?????- \"???????????? ??????????? ?????? ????????, ???????.\""
 
-#: src/moving.c:938
+#: src/moving.c:937
 msgid "Lt. Uhura-  \"But Captain, we're already docked.\""
 msgstr "??. ?????- \"?? ???????, ?? ???? ??? ???????????????.\""
 
-#: src/moving.c:942
+#: src/moving.c:941
 msgid "Subspace radio damaged."
 msgstr "??????????????????? ????? ??????????."
 
-#: src/moving.c:946
+#: src/moving.c:945
 msgid "Lt. Uhura-  \"Captain, I'm not getting any response from Starbase.\""
 msgstr "??. ?????- \"???????, ? ?? ??????? ??????? ???????? ?? ????.\""
 
-#: src/moving.c:950
+#: src/moving.c:949
 msgid "You must be aboard the "
 msgstr "?? ?????? ???? ?? ????? ??????? "
 
-#: src/moving.c:976
+#: src/moving.c:975
 #, c-format
 msgid "Starbase in %s responds--"
 msgstr "???? ?? %s ????????--"
 
-#: src/moving.c:979
+#: src/moving.c:977
 msgid " dematerializes."
 msgstr " ??????????????????."
 
-#: src/moving.c:992
+#: src/moving.c:990
 msgid "You have been lost in space..."
 msgstr "?? ??????? ? ??????????? ???????..."
 
-#: src/moving.c:1000
+#: src/moving.c:998
 msgid "1st"
 msgstr "1-??"
 
-#: src/moving.c:1001
+#: src/moving.c:999
 msgid "2nd"
 msgstr "2-??"
 
-#: src/moving.c:1002
+#: src/moving.c:1000
 msgid "3rd"
 msgstr "3-?"
 
-#: src/moving.c:1004
+#: src/moving.c:1002
 msgid " attempt to re-materialize "
 msgstr " ??????? ?????????????? "
 
-#: src/moving.c:1031
+#: src/moving.c:1029
 msgid "succeeds."
 msgstr "?????????? ???????."
 
-#: src/moving.c:1035
+#: src/moving.c:1033
 msgid "Lt. Uhura-  \"Captain, we made it!\""
 msgstr "??. ?????- \"???????, ?????????!\""
 
-#: src/moving.c:1068
+#: src/moving.c:1066
 msgid "You cannot abandon Ye Faerie Queene."
 msgstr "?? ?? ?????? ???????? ????????? ????????."
 
-#: src/moving.c:1075
+#: src/moving.c:1073
 msgid "Ye Faerie Queene has no shuttle craft."
 msgstr "?? ????????? ???????? ??? ???????."
 
-#: src/moving.c:1079
+#: src/moving.c:1077
 msgid "Shuttle craft now serving Big Macs."
 msgstr "?????? ???????????? ??? ???????? ??? ?????."
 
-#: src/moving.c:1083
+#: src/moving.c:1081
 msgid "Shuttle craft damaged."
 msgstr "?????? ?????????."
 
-#: src/moving.c:1087
-#, fuzzy
-msgid "You must be aboard the Enterprise."
-msgstr "?? ?????? ???? ?? ????? ??????? "
+#: src/moving.c:1085
+msgid "You must be aboard the ship."
+msgstr "?? ?????? ???? ?? ????? ???????."
 
-#: src/moving.c:1091 src/planets.c:302
+#: src/moving.c:1089 src/planets.c:302
 msgid "Shuttle craft not currently available."
 msgstr "?????? ?????? ??????????."
 
-#: src/moving.c:1096
+#: src/moving.c:1094
 msgid "***ABANDON SHIP!  ABANDON SHIP!"
 msgstr "***???????? ???????!  ???????? ???????!"
 
-#: src/moving.c:1098
+#: src/moving.c:1096
 msgid "***ALL HANDS ABANDON SHIP!"
 msgstr "***????? ????????? ???????? ???????!"
 
-#: src/moving.c:1100
+#: src/moving.c:1098
 msgid "Captain and crew escape in shuttle craft."
 msgstr "??????? ? ???????? ?????? ?? ???????."
 
-#: src/moving.c:1109 src/moving.c:1112
+#: src/moving.c:1107 src/moving.c:1110
 msgid "Remainder of ship's complement beam down"
 msgstr "??????? ??????? ??????? ?????????????????"
 
-#: src/moving.c:1110
+#: src/moving.c:1108
 msgid "to nearest habitable planet."
 msgstr "?? ????????? ????????? ??? ????? ???????."
 
-#: src/moving.c:1113
+#: src/moving.c:1111
 #, c-format
 msgid "to %s."
 msgstr "? %s."
 
-#: src/moving.c:1115
+#: src/moving.c:1113
 #, c-format
 msgid "Entire crew of %d left to die in outer space."
 msgstr "???? ?????? ? ??????? %d ??????? ????? ? ???????? ???????."
 
-#: src/moving.c:1124
+#: src/moving.c:1123
 msgid "You are captured by Klingons and released to"
 msgstr "???????? ??????? ??? ?"
 
-#: src/moving.c:1125
+#: src/moving.c:1124
 msgid "the Federation in a prisoner-of-war exchange."
 msgstr "???????? ????? ?????????????? ? ??????????."
 
-#: src/moving.c:1151
+#: src/moving.c:1150
 msgid "Starfleet puts you in command of another ship,"
 msgstr "???????? ???? ??????? ??? ???????????? ??? ????? ????????,"
 
-#: src/moving.c:1152
+#: src/moving.c:1151
 msgid "the Faerie Queene, which is antiquated but,"
 msgstr "????????? ????????, ??????? ??????? ???????, ??"
 
-#: src/moving.c:1153
+#: src/moving.c:1152
 msgid "still useable."
 msgstr "??? ??? ????????."
 
-#: src/moving.c:1154
+#: src/moving.c:1153
 msgid "The dilithium crystals have been moved."
 msgstr "????????? ??????? ????? ? ?????."
 
@@ -2070,7 +2069,6 @@
 msgstr "????- \"???????, ?????????? ????????? ????? ????????? ??? ????????,"
 
 #: src/planets.c:238
-#, fuzzy
 msgid "  except when Condition Yellow exists."
 msgstr " ????? ??????? ??????? ?????????."
 
@@ -2386,424 +2384,432 @@
 msgid "Starbase in %s is under Super-commander attack."
 msgstr "???? ? %s ????????? ????-????? ?????????."
 
-#: src/reports.c:24
+#: src/reports.c:22
+msgid "No Starbase is currently under attack."
+msgstr "???? ?????? ?? ?????????."
+
+#: src/reports.c:26
 #, c-format
 msgid "Base in %i - %i attacked by C. Alive until %.1f"
 msgstr "???? ? %i - %i ????????? C. ??????? ?? %.1f"
 
-#: src/reports.c:26
+#: src/reports.c:28
 #, c-format
 msgid "Base in %i - %i attacked by S. Alive until %.1f"
 msgstr "???? ? %i - %i ????????? S. ??????? ?? %.1f"
 
-#: src/reports.c:38
+#: src/reports.c:40
 msgid "thawed "
 msgstr "??????????? "
 
-#: src/reports.c:40
+#: src/reports.c:42
 msgid "short"
 msgstr "????????"
 
-#: src/reports.c:41
+#: src/reports.c:43
 msgid "medium"
 msgstr "???????"
 
-#: src/reports.c:42
+#: src/reports.c:44
 msgid "long"
 msgstr "???????"
 
-#: src/reports.c:43
+#: src/reports.c:45
 msgid "unknown length"
 msgstr ""
 
-#: src/reports.c:46
+#: src/reports.c:48
 msgid "novice"
 msgstr "???????"
 
-#: src/reports.c:47
+#: src/reports.c:49
 msgid "fair"
 msgstr "???????"
 
-#: src/reports.c:48
+#: src/reports.c:50
 msgid "good"
 msgstr "??????"
 
-#: src/reports.c:49
+#: src/reports.c:51
 msgid "expert"
 msgstr "??????????"
 
-#: src/reports.c:50
+#: src/reports.c:52
 msgid "emeritus"
 msgstr "????????? ???????"
 
-#: src/reports.c:51
+#: src/reports.c:53
 msgid "skilled"
 msgstr ""
 
-#: src/reports.c:54
+#: src/reports.c:56
 #, c-format
 msgid "You %s a %s%s %s game."
 msgstr "?? %s ???? %s%s %s."
 
-#: src/reports.c:55
+#: src/reports.c:57
 msgid "were playing"
 msgstr "???????"
 
-#: src/reports.c:55
+#: src/reports.c:57
 msgid "are playing"
 msgstr "???????"
 
-#: src/reports.c:56
+#: src/reports.c:58
 msgid "No plaque is allowed."
 msgstr "??????? ?? ?????."
 
-#: src/reports.c:57
+#: src/reports.c:59
 #, c-format
 msgid "This is tournament game %d."
 msgstr "??? ????????? ???? ????? %d."
 
-#: src/reports.c:58
+#: src/reports.c:60
 #, c-format
 msgid "Your secret password is \"%s\""
 msgstr "??? ?????? \"%s\""
 
-#: src/reports.c:59
+#: src/reports.c:61
 #, c-format
 msgid "%d of %d Klingons have been killed"
 msgstr "%d ?? %d ????????? ?????"
 
-#: src/reports.c:60
+#: src/reports.c:62
 #, c-format
 msgid ", including %d Commander%s."
 msgstr ", ??????? %d ?????????%s."
 
-#: src/reports.c:60 src/reports.c:83 src/reports.c:89 src/reports.c:112
+#: src/reports.c:62 src/reports.c:85 src/reports.c:91 src/reports.c:114
 msgid "s"
 msgstr "(??)"
 
-#: src/reports.c:61
+#: src/reports.c:63
 msgid ", but no Commanders."
 msgstr ", ?? ??? ??????????."
 
-#: src/reports.c:63
+#: src/reports.c:65
 #, c-format
 msgid "The Super Commander has %sbeen destroyed."
 msgstr "????-??? %s??? ?????????."
 
-#: src/reports.c:64
+#: src/reports.c:66
 msgid "not "
 msgstr "?? "
 
-#: src/reports.c:66
+#: src/reports.c:68
 msgid "There "
 msgstr " "
 
-#: src/reports.c:67
+#: src/reports.c:69
 msgid "has been 1 base"
 msgstr "1 ???"
 
-#: src/reports.c:69
+#: src/reports.c:71
 #, c-format
 msgid "have been %d bases"
 msgstr "%d ???"
 
-#: src/reports.c:71
+#: src/reports.c:73
 #, c-format
 msgid " destroyed, %d remaining."
 msgstr " ??????????, %d ????????."
 
-#: src/reports.c:73
+#: src/reports.c:75
 #, c-format
 msgid "There are %d bases."
 msgstr "???????? %d ???."
 
-#: src/reports.c:80
+#: src/reports.c:82
 #, c-format
 msgid "%d casualt%s suffered so far."
 msgstr "%d ????????????%s ??? ??????.\""
 
-#: src/reports.c:82
+#: src/reports.c:84
 #, c-format
 msgid "There were %d call%s for help."
 msgstr "?? ??????? %d ?????%s ????."
 
-#: src/reports.c:85
+#: src/reports.c:87
 msgid "You have "
 msgstr "? ??? "
 
-#: src/reports.c:87
+#: src/reports.c:89
 msgid "no"
 msgstr "???????????"
 
-#: src/reports.c:88
+#: src/reports.c:90
 msgid " deep space probe"
 msgstr " ???????????? ??????????? ??????"
 
-#: src/reports.c:95
+#: src/reports.c:97
 msgid "An armed deep space probe is in"
 msgstr "???????????? ??????????? ?????? ? ??????? ??????? ?????? ?"
 
-#: src/reports.c:97
+#: src/reports.c:99
 msgid "A deep space probe is in"
 msgstr "???????????? ??????????? ?????? ?????? ?"
 
-#: src/reports.c:103
+#: src/reports.c:105
 msgid "Dilithium crystals aboard ship... not yet used."
 msgstr "????????? ??????? ?? ?????... ???? ?? ??????????????."
 
-#: src/reports.c:111
+#: src/reports.c:113
 #, c-format
 msgid "Dilithium crystals have been used %d time%s."
 msgstr "????????? ??????? ?????????????? %d ???%s."
 
-#: src/reports.c:126
+#: src/reports.c:127
 msgid "LONG-RANGE SENSORS DAMAGED."
 msgstr "??????? ???????? ?????? ???????."
 
-#: src/reports.c:129
+#: src/reports.c:130
 msgid "Starbase's long-range scan"
 msgstr "??????? ????? ? ????"
 
-#: src/reports.c:132
+#: src/reports.c:133
 msgid "Long-range scan"
 msgstr "??????? ?????"
 
-#: src/reports.c:165
+#: src/reports.c:166
 msgid "DEVICE            -REPAIR TIMES-"
 msgstr "??????????        -????? ???????-"
 
-#: src/reports.c:166
+#: src/reports.c:167
 msgid "                IN FLIGHT   DOCKED"
 msgstr "                ? ??????    ????????????"
 
-#: src/reports.c:175
+#: src/reports.c:176
 msgid "All devices functional."
 msgstr "??? ?????????? ? ???????."
 
-#: src/reports.c:202
+#: src/reports.c:203
 msgid "Spock-  \"I revised the Star Chart from the starbase's records.\""
 msgstr "????- \"? ??????? ???????? ????? ?? ??????? ? ????.\""
 
-#: src/reports.c:206
+#: src/reports.c:207
 msgid "       STAR CHART FOR THE KNOWN GALAXY"
 msgstr "       ???????? ????? ????????????? ????????"
 
-#: src/reports.c:208
+#: src/reports.c:209
 #, c-format
 msgid "(Last surveillance update %d stardates ago)."
 msgstr "(????????? ?????????? ???? %d ???? ?????)."
 
-#: src/reports.c:268
+#: src/reports.c:269
+msgid "Stardate"
+msgstr "?????"
+
+#: src/reports.c:269
 #, c-format
-msgid "Stardate      %.1f, Time Left %.2f"
-msgstr "?????       %.1f, ???????? %.2f"
+msgid "%.1f, Time Left %.2f"
+msgstr "%.1f, ???????? %.2f"
 
-#: src/reports.c:273
+#: src/reports.c:275
 msgid "RED"
 msgstr "???????"
 
-#: src/reports.c:274
+#: src/reports.c:276
 msgid "GREEN"
 msgstr "???????"
 
-#: src/reports.c:275
+#: src/reports.c:277
 msgid "YELLOW"
 msgstr "??????"
 
-#: src/reports.c:276
+#: src/reports.c:278
 msgid "DOCKED"
 msgstr "????????"
 
-#: src/reports.c:277
+#: src/reports.c:279
 msgid "DEAD"
 msgstr "?????"
 
-#: src/reports.c:282
-#, c-format
-msgid "Condition     %s, %i DAMAGES"
-msgstr "?????????     %s, %i ???????????"
+#: src/reports.c:284
+msgid "Condition"
+msgstr "?????????"
 
-#: src/reports.c:285
+#: src/reports.c:284
 #, c-format
-msgid "Position      %d - %d , %d - %d"
-msgstr "?????????      %d - %d , %d - %d"
+msgid "%s, %i DAMAGES"
+msgstr "%s, %i ???????????"
 
-#: src/reports.c:289
-msgid "Life Support  "
-msgstr "????????????????  "
+#: src/reports.c:288
+msgid "Position"
+msgstr "?????????"
 
-#: src/reports.c:292
+#: src/reports.c:295
+#, c-format
 msgid "DAMAGED, Base provides"
 msgstr "???????, ???? ????????????"
 
-#: src/reports.c:294
+#: src/reports.c:297
 #, c-format
 msgid "DAMAGED, reserves=%4.2f"
 msgstr "???????, ????????=%4.2f"
 
-#: src/reports.c:297
+#: src/reports.c:300
+#, c-format
 msgid "ACTIVE"
 msgstr "????????"
 
-#: src/reports.c:300
-#, c-format
-msgid "Warp Factor   %.1f"
-msgstr "????????    %.1f"
+#: src/reports.c:301 src/setup.c:160
+msgid "Life Support"
+msgstr "??????????"
 
-#: src/reports.c:303
-#, c-format
-msgid "Energy        %.2f"
-msgstr "???????        %.2f"
-
 #: src/reports.c:305
-msgid " (have crystals)"
-msgstr " (???? ?????????)"
+msgid "Warp Factor"
+msgstr "????????"
 
-#: src/reports.c:308
-#, c-format
-msgid "Torpedoes     %d"
-msgstr "???????      %d"
+#: src/reports.c:309
+msgid "Energy"
+msgstr ""
 
 #: src/reports.c:311
-msgid "Shields       "
-msgstr "??????        "
+msgid " (have crystals)"
+msgstr " (???? ?????????)"
 
-#: src/reports.c:313
+#: src/reports.c:315
+msgid "Torpedoes"
+msgstr "???????"
+
+#: src/reports.c:320
 msgid "DAMAGED,"
 msgstr "???????,"
 
-#: src/reports.c:315
+#: src/reports.c:322
 msgid "UP,"
 msgstr "???????,"
 
-#: src/reports.c:317
+#: src/reports.c:324
 msgid "DOWN,"
 msgstr "?????,"
 
-#: src/reports.c:318
+#: src/reports.c:325
 #, c-format
 msgid " %d%% %.1f units"
 msgstr " %d%% %.1f ??????"
 
-#: src/reports.c:322
-#, c-format
-msgid "Klingons Left %d"
-msgstr "???????? %d ?????????"
+#: src/reports.c:327 src/setup.c:163
+msgid "Shields"
+msgstr "??????"
 
-#: src/reports.c:328
-#, c-format
-msgid "Major system  %s"
-msgstr "???????? ???????  %s"
+#: src/reports.c:331
+msgid "Klingons Left"
+msgstr "?????????"
 
-#: src/reports.c:330
+#: src/reports.c:338
+msgid "Major system"
+msgstr "???????? ????"
+
+#: src/reports.c:340
 msgid "Sector is uninhabited"
 msgstr "?????? ?????????"
 
-#: src/reports.c:354
+#: src/reports.c:358
+msgid "Information desired? "
+msgstr "????? ?????????? ???????? "
+
+#: src/reports.c:364
+msgid "UNRECOGNIZED REQUEST. Legal requests are:"
+msgstr "?????? ?? ????. ????????? ???????:"
+
+#: src/reports.c:380
 msgid "   S.R. SENSORS DAMAGED!"
 msgstr "   ??????? ?.?. ???????!"
 
-#: src/reports.c:358
+#: src/reports.c:384
 msgid "  [Using Base's sensors]"
 msgstr "  [???????????? ??????? ????]"
 
-#: src/reports.c:360
+#: src/reports.c:386
 msgid "     Short-range scan"
 msgstr "     ??????? ?????"
 
-#: src/reports.c:375
-msgid "Information desired? "
-msgstr "????? ?????????? ???????? "
-
-#: src/reports.c:381
-msgid "UNRECOGNIZED REQUEST. Legal requests are:"
-msgstr "?????? ?? ????. ????????? ???????:"
-
-#: src/reports.c:422
+#: src/reports.c:412
 msgid "COMPUTER DAMAGED, USE A POCKET CALCULATOR."
 msgstr "?????????? ??????, ?????????????? ?????????????."
 
-#: src/reports.c:429
+#: src/reports.c:419
 msgid "Destination quadrant and/or sector? "
 msgstr "???????? ?????????? ?/??? ??????? "
 
-#: src/reports.c:464
+#: src/reports.c:454
 msgid "Answer \"no\" if you don't know the value:"
 msgstr "????????? \"no\" ???? ?? ??????:"
 
-#: src/reports.c:467
+#: src/reports.c:457
 msgid "Time or arrival date? "
 msgstr "????? ?????????"
 
-#: src/reports.c:473
+#: src/reports.c:463
 msgid "We'll never make it, sir."
 msgstr "?? ??? ?? ?????????, ???."
 
-#: src/reports.c:481
+#: src/reports.c:471
 msgid "Warp factor? "
 msgstr "????????? "
 
-#: src/reports.c:491
+#: src/reports.c:481
 msgid "Captain, certainly you can give me one of these."
 msgstr "???????, ?? ????? ????? ??????? ???? ?? ????????."
 
-#: src/reports.c:498
+#: src/reports.c:488
 msgid "Insufficient energy, sir."
 msgstr "?? ??????? ???????, ???."
 
-#: src/reports.c:501 src/reports.c:543
+#: src/reports.c:491 src/reports.c:533
 msgid "New warp factor to try? "
 msgstr "??????????? ?????? ????????? "
 
-#: src/reports.c:517
+#: src/reports.c:507
 msgid "But if you lower your shields,"
 msgstr "?? ???? ?? ??????? ??????,"
 
-#: src/reports.c:518
+#: src/reports.c:508
 msgid "remaining"
 msgstr "???????"
 
-#: src/reports.c:522
+#: src/reports.c:512
 msgid "Remaining"
 msgstr "???????"
 
-#: src/reports.c:523
+#: src/reports.c:513
 #, c-format
 msgid " energy will be %.2f."
 msgstr " ??????? ????? %.2f."
 
-#: src/reports.c:525
+#: src/reports.c:515
 #, c-format
 msgid "And we will arrive at stardate %.2f."
 msgstr "? ?? ???????? %.2f ?????."
 
-#: src/reports.c:529
+#: src/reports.c:519
 msgid "Any warp speed is adequate."
 msgstr "?? ????? ???????? ??????."
 
-#: src/reports.c:531
+#: src/reports.c:521
 #, c-format
 msgid "Minimum warp needed is %.2f,"
 msgstr "??????????? ??????????? ???????? - %.2f,"
 
-#: src/reports.c:532
+#: src/reports.c:522
 #, c-format
 msgid "and we will arrive at stardate %.2f."
 msgstr "? ?? ???????? %.2f ?????."
 
-#: src/reports.c:536
+#: src/reports.c:526
 msgid "Unfortunately, the Federation will be destroyed by then."
 msgstr "? ?????????, ????????? ? ???? ??????? ????? ??? ??????????."
 
-#: src/reports.c:538
+#: src/reports.c:528
 msgid "You'll be taking risks at that speed, Captain"
 msgstr "?? ????? ???????? ?????? ?????????, ???????"
 
-#: src/reports.c:542
+#: src/reports.c:532
 msgid "The starbase there will be destroyed by then."
 msgstr "???? ? ???? ??????? ??? ????? ??????????."
 
-#: src/reports.c:594
+#: src/reports.c:584
 msgid "Direction? "
 msgstr "???????????? "
 
@@ -3007,10 +3013,6 @@
 msgid "Photon Tubes"
 msgstr "???????? ?????"
 
-#: src/setup.c:160
-msgid "Life Support"
-msgstr "????????????????"
-
 #: src/setup.c:161
 msgid "Warp Engines"
 msgstr "??????????????????? ?????????"
@@ -3019,10 +3021,6 @@
 msgid "Impulse Engines"
 msgstr "?????????? ?????????"
 
-#: src/setup.c:163
-msgid "Shields"
-msgstr "??????"
-
 #: src/setup.c:164
 msgid "Subspace Radio"
 msgstr "??????????????????? ?????"
@@ -3055,104 +3053,104 @@
 msgid "D. S. Probe"
 msgstr "?. ?. ??????"
 
-#: src/setup.c:374
+#: src/setup.c:375
 #, c-format
 msgid "It is stardate %d. The Federation is being attacked by"
 msgstr "??????? %d ?????. ????????? ?????????"
 
-#: src/setup.c:376
+#: src/setup.c:377
 msgid "a deadly Klingon invasion force. As captain of the United"
 msgstr "???????????? ???????????? ??????????. ??? ???????"
 
-#: src/setup.c:377
+#: src/setup.c:378
 msgid "Starship U.S.S. Enterprise, it is your mission to seek out"
 msgstr "?????????? ??????????, ?? ?????? ?????"
 
-#: src/setup.c:378
+#: src/setup.c:379
 #, c-format
 msgid "and destroy this invasion force of %d battle cruisers."
 msgstr "? ?????????? ??? ?????????? ?????? ? ??????? %d ?????? ?????????."
 
-#: src/setup.c:380
+#: src/setup.c:381
 #, c-format
 msgid "You have an initial allotment of %d stardates to complete"
 msgstr "? ??? ???? %d ???? ????? ?????????"
 
-#: src/setup.c:381
+#: src/setup.c:382
 msgid "your mission.  As you proceed you may be given more time."
 msgstr "??? ??????.  ?? ???? ???? ??? ????? ???? ??? ???????."
 
-#: src/setup.c:383
+#: src/setup.c:384
 #, c-format
 msgid "You will have %d supporting starbases."
 msgstr "? ??? ????? %d ???."
 
-#: src/setup.c:384
+#: src/setup.c:385
 msgid "Starbase locations-  "
 msgstr "?????????? ???-  "
 
-#: src/setup.c:387
+#: src/setup.c:388
 #, c-format
 msgid "Stardate %d."
 msgstr "????? %d."
 
-#: src/setup.c:389
+#: src/setup.c:390
 #, c-format
 msgid "%d Klingons."
 msgstr "%d ?????????."
 
-#: src/setup.c:390
+#: src/setup.c:391
 msgid "An unknown number of Romulans."
 msgstr "????????? ???????."
 
-#: src/setup.c:391
+#: src/setup.c:392
 msgid "And one (GULP) Super-Commander."
 msgstr "? ???? (??!) ????-??? ?????????."
 
-#: src/setup.c:392
+#: src/setup.c:393
 #, c-format
 msgid "%d stardates."
 msgstr "%d ????."
 
-#: src/setup.c:393
+#: src/setup.c:394
 #, c-format
 msgid "%d starbases in "
 msgstr "%d ??? ? "
 
-#: src/setup.c:400
+#: src/setup.c:401
 msgid "The Enterprise is currently in "
 msgstr "?????????? ?????? ? "
 
-#: src/setup.c:405
+#: src/setup.c:406
 msgid "Good Luck!"
 msgstr "?????!"
 
-#: src/setup.c:406
+#: src/setup.c:407
 msgid "  YOU'LL NEED IT."
 msgstr "  ??? ??? ???????????."
 
-#: src/setup.c:422
+#: src/setup.c:423
 msgid "Would you like a regular, tournament, or saved game? "
 msgstr "?????? ??????? (r), ????????? (t), ??? ??????????? (s) ????? "
 
-#: src/setup.c:427
+#: src/setup.c:428
 msgid "Type in tournament number-"
 msgstr "??????? ????? ???????-"
 
-#: src/setup.c:448 src/setup.c:464 src/setup.c:494
+#: src/setup.c:449 src/setup.c:465 src/setup.c:495
 msgid "What is \""
 msgstr "??? ?? \""
 
-#: src/setup.c:471
+#: src/setup.c:472
 msgid "Would you like a Short, Medium, or Long game? "
 msgstr "?????? ???????? (s), ??????? (m), ??? ??????? (l) ????? "
 
-#: src/setup.c:472
+#: src/setup.c:473
 msgid "Are you a Novice, Fair, Good, Expert, or Emeritus player? "
 msgstr ""
 "?? ??????? (n), ??????? (f), ?????? (g), ?????????? (e), ??? ????????? (em)? "
 
-#: src/setup.c:478
+#: src/setup.c:479
 msgid "Choose your game style (or just press enter): "
 msgstr "???????? ????? ???? (??? ??????? ????): "
 
@@ -3180,9 +3178,9 @@
 msgid "    Please examine your short-range scan.\""
 msgstr "    ?????????? ?????????? ?????????? ???????? ????????????.\""
 
-#: src/setup.c:767
-msgid "Please type in a secret password-"
-msgstr "?????????? ???????? ??????-"
+#: src/setup.c:764
+msgid "Please type in a secret password- "
+msgstr "?????????? ???????? ??????- "
 
 #: src/sst.c:292
 msgid "LEGAL COMMANDS ARE:"
@@ -3216,94 +3214,94 @@
 msgid "Spock- \"Captain, I've found the following information:\""
 msgstr "????- \"???????, ? ????? ???-????? ??????????:\""
 
-#: src/sst.c:547
+#: src/sst.c:541
 msgid "WARNING--Saved games produce no plaques!"
 msgstr "??????????????--??????????? ???? ?? ???? ???????!"
 
-#: src/sst.c:670
+#: src/sst.c:664
 msgid "Do you want your score recorded?"
 msgstr "?????? ???????? ???? ????? "
 
-#: src/sst.c:676
+#: src/sst.c:670
 msgid "Do you want to play again? "
 msgstr "?????? ??????? ?????? "
 
-#: src/sst.c:680
+#: src/sst.c:674
 msgid "May the Great Bird of the Galaxy roost upon your home planet."
 msgstr "? ????? ??????? ????? ????????? ??????? ?? ???? ???????."
 
-#: src/sst.c:692
+#: src/sst.c:686
 msgid "Romulan"
 msgstr "???????"
 
-#: src/sst.c:693
+#: src/sst.c:687
 msgid "Klingon"
 msgstr "???????"
 
-#: src/sst.c:694
+#: src/sst.c:688
 msgid "Commander"
 msgstr "????????"
 
-#: src/sst.c:695
+#: src/sst.c:689
 msgid "Super-commander"
 msgstr "????-???"
 
-#: src/sst.c:696
+#: src/sst.c:690
 msgid "Star"
 msgstr "??????"
 
-#: src/sst.c:697
+#: src/sst.c:691
 msgid "Planet"
 msgstr "???????"
 
-#: src/sst.c:698
+#: src/sst.c:692
 msgid "Starbase"
 msgstr "????"
 
-#: src/sst.c:699
+#: src/sst.c:693
 msgid "Black hole"
 msgstr "?????? ????"
 
-#: src/sst.c:700
+#: src/sst.c:694
 msgid "Tholian"
 msgstr "??????"
 
-#: src/sst.c:701
+#: src/sst.c:695
 msgid "Tholian web"
 msgstr "?????????? ????"
 
-#: src/sst.c:702
+#: src/sst.c:696
 msgid "Stranger"
 msgstr "????????"
 
-#: src/sst.c:703
+#: src/sst.c:697
 msgid "Inhabited World"
 msgstr "????????? ???"
 
-#: src/sst.c:714
+#: src/sst.c:708
 msgid "Quadrant "
 msgstr "???????? "
 
-#: src/sst.c:715
+#: src/sst.c:709
 msgid "Sector "
 msgstr "?????? "
 
-#: src/sst.c:725
+#: src/sst.c:719
 msgid " at "
 msgstr " ? "
 
-#: src/sst.c:734
+#: src/sst.c:728
 msgid "Enterprise"
 msgstr "??????????"
 
-#: src/sst.c:735
+#: src/sst.c:729
 msgid "Faerie Queene"
 msgstr "????????? ????????"
 
-#: src/sst.c:844
+#: src/sst.c:838
 msgid "Please answer with \"y\" or \"n\": "
 msgstr "?????????? ????????? ?? (\"y\") ??? ??? (\"n\"): "
 
-#: src/sst.c:853
+#: src/sst.c:847
 msgid "Beg your pardon, Captain?"
 msgstr "????? ????????, ????????"

Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-22 16:18:30 UTC (rev 628)
+++ trunk/src/ai.c	2006-09-22 17:09:23 UTC (rev 629)
@@ -231,7 +231,7 @@
 	
     }
     if (idebug)
-	prout("");
+	skip(1);
     /* Put commander in place within same quadrant */
     game.quad[com.x][com.y] = IHDOT;
     game.quad[next.x][next.y] = ienm;

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-22 16:18:30 UTC (rev 628)
+++ trunk/src/battle.c	2006-09-22 17:09:23 UTC (rev 629)
@@ -276,7 +276,8 @@
 	if (iquad==IHDOT) continue;
 	/* hit something */
 	setwnd(message_window);
-	skip(1);	/* start new line after text track */
+	if (damaged(DSRSENS) && !game.condition==docked)
+	    skip(1);	/* start new line after text track */
 	switch(iquad) {
 	case IHE: /* Hit our ship */
 	case IHF:
@@ -703,7 +704,6 @@
     /* Added mv to allow enemy to "move" before dying */
     int i,j;
 
-    skip(1);
     crmena(true, type, sector, mv);
     /* Decide what kind of enemy it is and update appropriately */
     if (type == IHR) {
@@ -1098,7 +1098,7 @@
 	}
 	if (key != IHREAL && game.nenhere != 0) {
 	    prout(_("Phasers locked on target. Energy available: %.2f"),
-		  ifast?game.energy-200.0:game.energy,1,2);
+		  ifast?game.energy-200.0:game.energy);
 	}
 	irec=0;
 	do {
@@ -1169,7 +1169,7 @@
 	chew();
 	key = IHEOL;
 	if (damaged(DCOMPTR))
-	    prout(_("Battle computer damaged, manual file only."));
+	    prout(_("Battle computer damaged, manual fire only."));
 	else {
 	    skip(1);
 	    prouts(_("---WORKING---"));
@@ -1326,7 +1326,7 @@
 	else /* decide whether or not to emasculate klingon */
 	    if (kpow > 0 && Rand() >= 0.9 &&
 		kpow <= ((0.4 + 0.4*Rand())*kpini)) {
-		prout(_("***Mr. Spock-  \"Captain, the vessel at "),
+		prout(_("***Mr. Spock-  \"Captain, the vessel at %s"),
 		      cramlc(sector, w));
 		prout(_("   has just lost its firepower.\""));
 		game.kpower[kk] = -kpow;

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-22 16:18:30 UTC (rev 628)
+++ trunk/src/events.c	2006-09-22 17:09:23 UTC (rev 629)
@@ -850,7 +850,7 @@
 	skip(1);
 	prouts(_("***RED ALERT!  RED ALERT!"));
 	skip(1);
-	prout(_("***Incipient supernova detected at "), cramlc(sector, ns));
+	prout(_("***Incipient supernova detected at %s"), cramlc(sector, ns));
 	if (square(ns.x-game.sector.x) + square(ns.y-game.sector.y) <= 2.1) {
 	    proutn(_("Emergency override attempts t"));
 	    prouts("***************");

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-09-22 16:18:30 UTC (rev 628)
+++ trunk/src/io.c	2006-09-22 17:09:23 UTC (rev 629)
@@ -1,5 +1,6 @@
 #include <stdio.h>
 #include <unistd.h>
+#include <wchar.h>
 
 #include "config.h"
 #include "sst.h"
@@ -11,6 +12,7 @@
 WINDOW *fullscreen_window;
 WINDOW *srscan_window;
 WINDOW *report_window;
+WINDOW *status_window;
 WINDOW *lrscan_window;
 WINDOW *message_window;
 WINDOW *prompt_window;
@@ -42,7 +44,8 @@
 	exit(1);
     }
     if (!(game.options & OPTION_CURSES)) {
-	rows = atoi(getenv("LINES"));
+	char *ln_env = getenv("LINES");
+	rows = ln_env ? atoi(ln_env) : 25;
     } else {
 	(void)initscr();
 #ifdef KEY_MIN
@@ -67,7 +70,8 @@
 	//(void)noecho();
 	fullscreen_window = stdscr;
 	srscan_window     = newwin(12, 25, 0,       0);
-	report_window     = newwin(10, 0,  1,       25);
+	report_window     = newwin(11, 0,  1,       25);
+	status_window     = newwin(10, 0,  1,       39);
 	lrscan_window     = newwin(10, 0,  0,       64); 
 	message_window    = newwin(0,  0,  12,      0);
 	prompt_window     = newwin(1,  0,  LINES-2, 0); 
@@ -129,13 +133,11 @@
 {
     while (i-- > 0) {
 	if (game.options & OPTION_CURSES) {
-	    if (curwnd == message_window && linecount >= getmaxy(curwnd) - 3) {
+	    if (curwnd == message_window && getcury(curwnd) >= getmaxy(curwnd) - 3) {
 		pause_game(false);
 		clrscr();
 	    } else {
 		proutn("\n");
-		if (curwnd == message_window)
-		    linecount++;
 	    }
 	} else {
 	    linecount++;
@@ -147,7 +149,7 @@
     }
 }
 
-static void vproutn(char *fmt, va_list ap) 
+static void vproutn(const char *fmt, va_list ap) 
 {
     if (game.options & OPTION_CURSES) {
 	vwprintw(curwnd, fmt, ap);
@@ -157,7 +159,7 @@
 	vprintf(fmt, ap);
 }
 
-void proutn(char *fmt, ...) 
+void proutn(const char *fmt, ...) 
 {
     va_list ap;
     va_start(ap, fmt);
@@ -165,7 +167,7 @@
     va_end(ap);
 }
 
-void prout(char *fmt, ...) 
+void prout(const char *fmt, ...) 
 {
     va_list ap;
     va_start(ap, fmt);
@@ -174,25 +176,32 @@
     skip(1);
 }
 
-void prouts(char *fmt, ...) 
+void prouts(const char *fmt, ...) 
 /* print slowly! */
 {
-    char *s, buf[BUFSIZ];
+    char buf[BUFSIZ];
+    wchar_t *s, mbuf[BUFSIZ];
     va_list ap;
     va_start(ap, fmt);
     vsprintf(buf, fmt, ap);
     va_end(ap);
-    for (s = buf; *s; s++) {
+    mbstowcs(mbuf, buf, BUFSIZ);
+    for (s = mbuf; *s; s++) {
+	/* HOW to convince ncurses to use wchar_t?? */
+	/* WHY putwchar() doesn't work?? */
+	/* OK then, convert back to mbs... */
+	char c[MB_CUR_MAX*2];
+	int n;
+	n = wctomb(c, *s);
+	c[n] = 0;
 	delay(30);
-	if (game.options & OPTION_CURSES) {
-	    waddch(curwnd, *s);
+	proutn(c);
+	if (game.options & OPTION_CURSES)
 	    wrefresh(curwnd);
-	}
-	else {
-	    putchar(*s);
+	else
 	    fflush(stdout);
-	}
     }
+    delay(300);
 }
 
 void cgetline(char *line, int max)
@@ -221,7 +230,7 @@
     }
 }
 
-void clreol (void)
+void clreol(void)
 /* clear to end of line -- can be a no-op in tty mode */
 {
    if (game.options & OPTION_CURSES) {
@@ -230,7 +239,7 @@
    }
 }
 
-void clrscr (void)
+void clrscr(void)
 /* clear screen -- can be a no-op in tty mode */
 {
    if (game.options & OPTION_CURSES) {
@@ -241,7 +250,7 @@
    linecount = 0;
 }
 
-void textcolor (int color)
+void textcolor(int color)
 {
 #ifdef A_COLOR
     if (game.options & OPTION_CURSES) {
@@ -302,7 +311,7 @@
 #endif /* A_COLOR */
 }
 
-void highvideo (void)
+void highvideo(void)
 {
     if (game.options & OPTION_CURSES) {
 	wattron(curwnd, A_REVERSE);
@@ -324,17 +333,18 @@
 	    sensor();
         setwnd(srscan_window);
         wmove(curwnd, 0, 0);
-        enqueue("no");
-        srscan(SCAN_FULL);
+        srscan();
 	if (mode != 2) {
+	    setwnd(status_window);
+	    wclear(status_window);
+	    wmove(status_window, 0, 0);
 	    setwnd(report_window);
 	    wclear(report_window);
 	    wmove(report_window, 0, 0);
-	    srscan(SCAN_NO_LEFTSIDE);
+	    status(0);
 	    setwnd(lrscan_window);
 	    wclear(lrscan_window);
 	    wmove(lrscan_window, 0, 0);
-	    enqueue("l");
 	    lrscan();
 	}
     }
@@ -429,6 +439,31 @@
     if (game.options & OPTION_CURSES) {
 	setwnd(message_window);
 	wclear(message_window);
-	chart(false);
     }
+    chart();
+    if (game.options & OPTION_TTY) {
+	skip(1);
+    }
 }
+
+void prstat(const char *txt, const char *fmt, ...)
+{
+#define NSYM 14
+    int i;
+    va_list args;
+    proutn(txt);
+    if (game.options & OPTION_CURSES) {
+	skip(1);
+    } else  {
+	for (i = mblen(txt, strlen(txt)); i < NSYM; i++)
+	    proutn(" ");
+    }
+    if (game.options & OPTION_CURSES)
+	setwnd(status_window);
+    va_start(args, fmt);
+    vproutn(fmt, args);
+    va_end(args);
+    skip(1);
+    if (game.options & OPTION_CURSES)
+	setwnd(report_window);
+}

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-22 16:18:30 UTC (rev 628)
+++ trunk/src/moving.c	2006-09-22 17:09:23 UTC (rev 629)
@@ -973,7 +973,6 @@
     /* dematerialize starship */
     game.quad[game.sector.x][game.sector.y]=IHDOT;
     proutn(_("Starbase in %s responds--"), cramlc(quadrant, game.quadrant));
-    proutn("");
     crmshp();
     prout(_(" dematerializes."));
     game.sector.x=0;
@@ -1083,7 +1082,7 @@
 	    return;
 	}
 	if (game.landed) {
-	    prout(_("You must be aboard the Enterprise."));
+	    prout(_("You must be aboard the ship."));
 	    return;
 	}
 	if (game.iscraft != onship) {
@@ -1111,7 +1110,8 @@
 	    prout(_("Remainder of ship's complement beam down"));
 	    prout(_("to %s."), systnames[q->planet]);
 	} else {
-	    prout(_("Entire crew of %d left to die in outer space."));
+	    prout(_("Entire crew of %d left to die in outer space."),
+		    game.state.crew);
 	    game.casual += game.state.crew;
 	    game.abandoned += game.state.crew;
 	}

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-22 16:18:30 UTC (rev 628)
+++ trunk/src/reports.c	2006-09-22 17:09:23 UTC (rev 629)
@@ -13,11 +13,13 @@
 	    prout(_("It can hold out until Stardate %d."),
 		  (int)scheduled(FCDBAS));
 	}
-	if (game.isatb == 1) {
+	else if (game.isatb == 1) {
 	    prout(_("Starbase in %s is under Super-commander attack."),
 		  cramlc(quadrant, game.state.kscmdr));
 	    prout(_("It can hold out until Stardate %d."),
 		  (int)scheduled(FSCDBAS));
+	} else {
+	    prout(_("No Starbase is currently under attack."));
 	}
     } else {
         if (is_scheduled(FCDBAS))
@@ -50,7 +52,7 @@
     case SKILL_EMERITUS: s3=_("emeritus"); break;
     default: s3=_("skilled"); break;
     }
-    prout("");
+    skip(1);
     prout(_("You %s a %s%s %s game."),
 	  game.alldone? _("were playing") : _("are playing"), s1, s2, s3);
     if (game.skill>SKILL_GOOD && game.thawed && !game.alldone) prout(_("No plaque is allowed."));
@@ -119,7 +121,6 @@
 /* long-range sensor scan */
 {
     int x, y;
-    chew();
     if (damaged(DLRSENS)) {
 	/* Now allow base's sensors if docked */
 	if (game.condition != docked) {
@@ -189,7 +190,7 @@
 	    }
 }
 
-void chart(bool title)
+void chart(void)
 /* display the star chart */ 
 {
     int i,j;
@@ -203,7 +204,7 @@
 	rechart();
     }
 
-    if (!title) prout(_("       STAR CHART FOR THE KNOWN GALAXY"));
+    prout(_("       STAR CHART FOR THE KNOWN GALAXY"));
     if (game.state.date > game.lastchart)
 	prout(_("(Last surveillance update %d stardates ago)."),
 	      (int)(game.state.date-game.lastchart));
@@ -233,7 +234,6 @@
 	proutn("  |");
 	if (i<GALSIZE) skip(1);
     }
-    prout("");
 }
 
 static void sectscan(int goodScan, int i, int j) 
@@ -258,157 +258,147 @@
 	proutn("- ");
 }
 
-static void status(int req)
+void status(int req)
 /* print status report lines */
 {
-    char *cp = NULL;
+#define RQ(n, a) if (!req || req == n) do { a } while(0)
+    char *cp = NULL, s[256];
     int t, dam = 0;
-    switch (req) {
-    case 1:
-	proutn(_("Stardate      %.1f, Time Left %.2f"), game.state.date, game.state.remtime);
-	break;
-    case 2:
+
+    RQ(1,
+	prstat(_("Stardate"), _("%.1f, Time Left %.2f"), game.state.date, game.state.remtime);
+    );
+
+    RQ(2,
 	if (game.condition != docked) newcnd();
 	switch (game.condition) {
-	case red: cp = _("RED"); break;
-	case green: cp = _("GREEN"); break;
-	case yellow: cp = _("YELLOW"); break;
-	case docked: cp = _("DOCKED"); break;
-	case dead: cp = _("DEAD"); break;
+	    case red: cp = _("RED"); break;
+	    case green: cp = _("GREEN"); break;
+	    case yellow: cp = _("YELLOW"); break;
+	    case docked: cp = _("DOCKED"); break;
+	    case dead: cp = _("DEAD"); break;
 	}
 	for (t=0;t<NDEVICES;t++)
 	    if (game.damage[t]>0) 
 		dam++;
-	proutn(_("Condition     %s, %i DAMAGES"), cp, dam);
-	break;
-    case 3:
-	proutn(_("Position      %d - %d , %d - %d"),
-	       game.quadrant.x, game.quadrant.y, game.sector.x, game.sector.y);
-	break;
-    case 4:
-	proutn(_("Life Support  "));
+	prstat(_("Condition"), _("%s, %i DAMAGES"), cp, dam);
+    );
+
+    RQ(3,
+	prstat(_("Position"), "%d - %d , %d - %d",
+	      game.quadrant.x, game.quadrant.y, game.sector.x, game.sector.y);
+    );
+
+    RQ(4,
 	if (damaged(DLIFSUP)) {
 	    if (game.condition == docked)
-		proutn(_("DAMAGED, Base provides"));
+		sprintf(s, _("DAMAGED, Base provides"));
 	    else
-		proutn(_("DAMAGED, reserves=%4.2f"), game.lsupres);
+		sprintf(s, _("DAMAGED, reserves=%4.2f"), game.lsupres);
 	}
 	else
-	    proutn(_("ACTIVE"));
-	break;
-    case 5:
-	proutn(_("Warp Factor   %.1f"), game.warpfac);
-	break;
-    case 6:
-	proutn(_("Energy        %.2f"), game.energy);
-	if (game.icrystl && (game.options & OPTION_SHOWME))	/* ESR */
-	    proutn(_(" (have crystals)"));
-	break;
-    case 7:
-	proutn(_("Torpedoes     %d"), game.torps);
-	break;
-    case 8:
-	proutn(_("Shields       "));
+	    sprintf(s, _("ACTIVE"));
+	prstat(_("Life Support"), s);
+    );
+
+    RQ(5,
+	prstat(_("Warp Factor"), "%.1f", game.warpfac);
+    );
+
+    RQ(6,
+	prstat(_("Energy"), "%.2f%s", game.energy,
+		(game.icrystl && (game.options & OPTION_SHOWME)) ? /* ESR */
+		_(" (have crystals)") : "");
+    );
+
+    RQ(7,
+	prstat(_("Torpedoes"), "%d", game.torps);
+    );
+
+    RQ(8,
 	if (damaged(DSHIELD))
-	    proutn(_("DAMAGED,"));
+	    strcpy(s, _("DAMAGED,"));
 	else if (game.shldup)
-	    proutn(_("UP,"));
+	    strcpy(s, _("UP,"));
 	else
-	    proutn(_("DOWN,"));
-	proutn(_(" %d%% %.1f units"),
+	    strcpy(s, _("DOWN,"));
+	sprintf(s + strlen(s), _(" %d%% %.1f units"),
 	       (int)((100.0*game.shield)/game.inshld + 0.5), game.shield);
-	break;
-    case 9:
-	proutn(_("Klingons Left %d"), KLINGREM);
-	break;
-    case 10:
+	prstat(_("Shields"), s);
+    );
+
+    RQ(9,
+        prstat(_("Klingons Left"), "%d", KLINGREM);
+    );
+
+    RQ(10,
 	if (game.options & OPTION_WORLDS) {
 	    int plnet = game.state.galaxy[game.quadrant.x][game.quadrant.y].planet;
 	    if (plnet != NOPLANET && game.state.plnets[plnet].inhabited != UNINHABITED)
-		proutn(_("Major system  %s"), systnames[plnet]);
+		prstat(_("Major system"), "%s", systnames[plnet]);
 	    else
-		proutn(_("Sector is uninhabited"));
+		prout(_("Sector is uninhabited"));
 	}
+    );
 
-	break;
-    case 11:
-	attakreport(true);
-	break;
+    RQ(11,
+	attakreport(!req);
+    );
+
+#undef RQ
+}
+
+void request(void)
+{
+    int req;
+    static char requests[][3] =
+	{"da","co","po","ls","wa","en","to","sh","kl","sy", "ti"};
+
+    while (scan() == IHEOL)
+	proutn(_("Information desired? "));
+    chew();
+    for (req = 0; req < ARRAY_SIZE(requests); req++)
+	if (strncmp(citem, requests[req], min(2,strlen(citem)))==0)
+	    break;
+    if (req >= ARRAY_SIZE(requests)) {
+	prout(_("UNRECOGNIZED REQUEST. Legal requests are:"));
+	prout(("  date, condition, position, lsupport, warpfactor,"));
+	prout(("  energy, torpedoes, shields, klingons, system, time."));
+	return;
     }
+    status(req + 1);
 }
 		
-void srscan(scantype type)
+void srscan(void)
 /* short-range scan */
 {
-    /* the "sy" request is undocumented */
-    static char requests[][3] =
-	{"","da","co","po","ls","wa","en","to","sh","kl","sy", "ti"};
-    
-    int i, j, jj, req=0;
-    int goodScan=true, leftside=true, rightside=true, title=false; 
-    switch (type) {
-    case SCAN_FULL: // SRSCAN
-	if (damaged(DSRSENS)) {
-	    /* Allow base's sensors if docked */
-	    if (game.condition != docked) {
-		prout(_("   S.R. SENSORS DAMAGED!"));
-		goodScan=false;
-	    }
-	    else
-		prout(_("  [Using Base's sensors]"));
+    int i, j;
+    int goodScan=true;
+    if (damaged(DSRSENS)) {
+	/* Allow base's sensors if docked */
+	if (game.condition != docked) {
+	    prout(_("   S.R. SENSORS DAMAGED!"));
+	    goodScan=false;
 	}
-	else prout(_("     Short-range scan"));
-	if (goodScan && !damaged(DRADIO)) { 
-	    game.state.chart[game.quadrant.x][game.quadrant.y].klingons = game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons;
-	    game.state.chart[game.quadrant.x][game.quadrant.y].starbase = game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase;
-	    game.state.chart[game.quadrant.x][game.quadrant.y].stars = game.state.galaxy[game.quadrant.x][game.quadrant.y].stars;
-	    game.state.galaxy[game.quadrant.x][game.quadrant.y].charted = true;
-	}
-	scan();
-	if (isit("chart")) title = true;
-	if (isit("no")) rightside = false;
-	chew();
-	prout("    1 2 3 4 5 6 7 8 9 10");
-	break;
-    case SCAN_REQUEST:
-	while (scan() == IHEOL)
-	    proutn(_("Information desired? "));
-	chew();
-	for (req = 1; req <= sizeof(requests)/sizeof(requests[0]); req++)
-	    if (strncmp(citem,requests[req],min(2,strlen(citem)))==0)
-		break;
-	if (req > sizeof(requests)/sizeof(requests[0])) {
-	    prout(_("UNRECOGNIZED REQUEST. Legal requests are:"));
-	    prout(("  date, condition, position, lsupport, warpfactor,"));
-	    prout(("  energy, torpedoes, shields, klingons, time, system, bases."));
-	    return;
-	}
-	// no break
-    case SCAN_STATUS: // STATUS
-	chew();
-	leftside = false;
-	skip(1);
-	// no break
-    case SCAN_NO_LEFTSIDE: // REQUEST
-	leftside=false;
-	break;
+	else
+	    prout(_("  [Using Base's sensors]"));
     }
+    else prout(_("     Short-range scan"));
+    if (goodScan && !damaged(DRADIO)) { 
+	game.state.chart[game.quadrant.x][game.quadrant.y].klingons = game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons;
+	game.state.chart[game.quadrant.x][game.quadrant.y].starbase = game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase;
+	game.state.chart[game.quadrant.x][game.quadrant.y].stars = game.state.galaxy[game.quadrant.x][game.quadrant.y].stars;
+	game.state.galaxy[game.quadrant.x][game.quadrant.y].charted = true;
+    }
+    prout("    1 2 3 4 5 6 7 8 9 10");
     if (game.condition != docked) newcnd();
-    for (i = 1; i <= max(QUADSIZE, sizeof(requests)/sizeof(requests[0])); i++) {
-	jj = (req!=0 ? req : i);
-	if (leftside && i <= QUADSIZE) {
-	    proutn("%2d  ", i);
-	    for_sectors(j) {
-		sectscan(goodScan, i, j);
-	    }
+    for (i = 1; i <= QUADSIZE; i++) {
+	proutn("%2d  ", i);
+	for_sectors(j) {
+	    sectscan(goodScan, i, j);
 	}
-	if (rightside)
-	    status(jj);
-	if (i<sizeof(requests)/sizeof(requests[0])) skip(1);
-	if (req!=0) return;
+	skip(1);
     }
-    prout("");
-    if (title) chart(true);
 }
 			
 			

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-22 16:18:30 UTC (rev 628)
+++ trunk/src/setup.c	2006-09-22 17:09:23 UTC (rev 629)
@@ -380,13 +380,13 @@
 	      INKLINGTOT);
 	prout(_("You have an initial allotment of %d stardates to complete"), (int)game.intime);
 	prout(_("your mission.  As you proceed you may be given more time."));
-	prout("");
+	skip(1);
 	prout(_("You will have %d supporting starbases."), game.inbase);
 	proutn(_("Starbase locations-  "));
     }
     else {
 	prout(_("Stardate %d."), (int)game.state.date);
-	prout("");
+	skip(1);
 	prout(_("%d Klingons."), INKLINGTOT);
 	prout(_("An unknown number of Romulans."));
 	if (game.state.nscrem) prout(_("And one (GULP) Super-Commander."));
@@ -758,13 +758,13 @@
 void setpassword(void)
 /* set the self-destruct password */
 {
-    if (!(game.options & OPTION_CURSES)) {
+    if (game.options & OPTION_PLAIN) {
 	while (TRUE) {
+	    chew();
+	    proutn(_("Please type in a secret password- "));
 	    scan();
 	    strcpy(game.passwd, citem);
-	    chew();
 	    if (*game.passwd != 0) break;
-	    proutn(_("Please type in a secret password-"));
 	}
     } else {
 	int i;

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-22 16:18:30 UTC (rev 628)
+++ trunk/src/sst.c	2006-09-22 17:09:23 UTC (rev 629)
@@ -282,7 +282,7 @@
 #endif
 };
 
-#define NUMCOMMANDS	sizeof(commands)/sizeof(commands[0])
+#define NUMCOMMANDS	ARRAY_SIZE(commands)
 #define ACCEPT(i)	(!commands[i].option || (commands[i].option & game.options))
 
 static void listCommands(void) 
@@ -387,13 +387,6 @@
     fclose(fp);
 }
 
-void enqueue(char *s)
-/* enqueue input for the command parser */
-{
-    chew();
-    strcpy(line, s);
-}
-
 static void makemoves(void)
 /* command-interpretation loop */
 {
@@ -413,7 +406,8 @@
 	    clrscr();
 	    proutn("COMMAND> ");
 	    if (scan() == IHEOL) {
-		makechart();
+		if (game.options & OPTION_CURSES)
+		    makechart();
 		continue;
 	    }
 	    game.ididit = false;
@@ -439,13 +433,13 @@
 	commandhook(commands[i].name, true);
 	switch (v) { /* command switch */
 	case SRSCAN:                 // srscan
-	    srscan(SCAN_FULL);
+	    srscan();
 	    break;
 	case STATUS:                 // status
-	    srscan(SCAN_STATUS);
+	    status(0);
 	    break;
 	case REQUEST:			// status request 
-	    srscan(SCAN_REQUEST);
+	    request();
 	    break;
 	case LRSCAN:			// lrscan
 	    lrscan();
@@ -476,7 +470,7 @@
 	    dreprt();
 	    break;
 	case CHART:			// chart
-	    chart(false);
+	    makechart();
 	    break;
 	case IMPULSE:			// impulse
 	    impuls();

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-22 16:18:30 UTC (rev 628)
+++ trunk/src/sst.h	2006-09-22 17:09:23 UTC (rev 629)
@@ -341,13 +341,6 @@
 
 enum loctype {neither, quadrant, sector};
 
-typedef enum {
-    SCAN_FULL,
-    SCAN_REQUEST,
-    SCAN_STATUS,
-    SCAN_NO_LEFTSIDE,
-} scantype;
-
 /* Function prototypes */
 void prelim(void);
 void attack(bool);
@@ -355,7 +348,7 @@
 void setup(bool);
 void score(void);
 void atover(bool);
-void srscan(scantype);
+void srscan(void);
 void lrscan(void);
 void phasers(void);
 void photon(void);
@@ -363,7 +356,7 @@
 void doshield(bool);
 void dock(bool);
 void dreprt(void);
-void chart(bool);
+void chart(void);
 void rechart(void);
 void impuls(void);
 void wait(void);
@@ -380,14 +373,19 @@
 bool thaw(void);
 void plaque(void);
 int scan(void);
+void status(int req);
+void request(void);
 #define IHEOL (0)
 #define IHALPHA (1)
 #define IHREAL (2)
 void chew(void);
 void chew2(void);
 void skip(int);
-void prout(char *, ...);
-void proutn(char *, ...);
+void prout(const char *, ...) __attribute__((format(printf, 1, 2)));
+void proutn(const char *, ...) __attribute__((format(printf, 1, 2)));
+void prouts(const char *, ...) __attribute__((format(printf, 1, 2)));
+void prstat(const char *txt, const char *fmt, ...)
+	__attribute__((format(printf, 2, 3)));
 void stars(void);
 void newqad(bool);
 bool ja(void);
@@ -413,7 +411,6 @@
 void snova(bool, coord *);
 void scom(bool *);
 void hittem(double *);
-void prouts(char *, ...);
 bool isit(char *);
 void preport(void);
 void orbit(void);
@@ -438,7 +435,6 @@
 void setpassword(void);
 void commandhook(char *, bool);
 void makechart(void);
-void enqueue(char *);
 coord newkling(int);
 #if BSD_BUG_FOR_BUG
 void visual(void);

Modified: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-09-22 16:18:30 UTC (rev 628)
+++ trunk/src/xio.c	2006-09-22 17:09:23 UTC (rev 629)
@@ -180,7 +180,7 @@
     misclabel  = XtVaCreateManagedWidget("misclabel", 
 					 labelWidgetClass, misc,
 					 NULL); 
-    for (cp = commands; cp < commands + sizeof(commands)/sizeof(commands[0]); cp++) {
+    for (cp = commands; cp < commands + ARRAY_SIZE(commands); cp++) {
 	cp->widget = XtVaCreateManagedWidget(cp->name, 
 					     commandWidgetClass, 
 					     *cp->parent, 



From esr at mail.berlios.de  Sun Sep 24 13:04:29 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sun, 24 Sep 2006 13:04:29 +0200
Subject: [Sst-commit-watch] r630 - trunk/src
Message-ID: <200609241104.k8OB4TIU025818@sheep.berlios.de>

Author: esr
Date: 2006-09-24 13:04:28 +0200 (Sun, 24 Sep 2006)
New Revision: 630

Modified:
   trunk/src/sst.py
Log:
Trial Python now incorporates ai.c


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-09-22 17:09:23 UTC (rev 629)
+++ trunk/src/sst.py	2006-09-24 11:04:28 UTC (rev 630)
@@ -15,21 +15,8 @@
 MAXKLQUAD	= 9
 FOREVER 	= 1e30
 
-# Feature vakues
-IHR = 'R',
-IHK = 'K',
-IHC = 'C',
-IHS = 'S',
-IHSTAR = '*',
-IHP = 'P',
-IHW = '@',
-IHB = 'B',
-IHBLANK = ' ',
-IHDOT = '.',
+# These types have not been dealt with yet 
 IHQUEST = '?',
-IHE = 'E',
-IHF = 'F',
-IHT = 'T',
 IHWEB = '#',
 IHMATER0 = '-',
 IHMATER1 = 'o',
@@ -45,16 +32,98 @@
         return self.x != None and self.y != None
     def __eq__(self, other):
         return self.x == other.y and self.x == other.y
+    def __add__(self, other):
+        return coord(self.x+self.x, self.y+self.y)
+    def __sub__(self, other):
+        return coord(self.x-self.x, self.y-self.y)
     def distance(self, other):
         return math.sqrt((self.x - other.x)**2 + (self.y - other.y)**2)
+    def sgn(self):
+        return coord(self.x / abs(x), self.y / abs(y));
+    def __hash__(self):
+        return hash((x, y))
+    def __str__(self):
+        return "%d - %d" % (self.x, self.y)
 
-class planet:
+class feature:
+    "A feature in the current quadrant (ship, star, black hole, etc)." 
+    def __init__(self):
+        self.type = None	# name of feature type
+        self.location = None	# location
+    def distance(self):
+        return self.location.distance(game.sector)
+    def __str__(self):
+        return self.name[0]
+
+empty = None	# Value of empty space in game.quad
+
+class ship(feature):
+    "An enemy ship in the current quadrant." 
+    def __init__(self):
+        feature.__init__(self)
+        self.type = None	# klingon, romulan, commander,
+        			# supercommander, tholian
+        self.power = None	# power
+        if self.type in ("Klingon", "Commander", "Super-Commander"):
+            game.remkl += 1
+        elif self.type == "Romulan":
+            game.romrem += 1
+    def __del__(self):
+        if self.type in ("Klingon", "Commander", "Super-Commander"):
+            game.remkl -= 1
+        elif self.type == "Romulan":
+            game.romrem -= 1
+    def sectormove(self, dest):
+        "Move this ship within the current quadrant." 
+        if self.location:
+            game.quad[self.location] = None
+        game.quad[dest] = self
+        self.location = dest
+
+class planet(feature):
+    "A planet.  May be inhabited or not, may hold dilithium crystals or not."
     def __init(self):
-        self.w = coord()
+        feature.__init__(self)
         self.name = None
         self.crystals = None	# "absent", "present", or "mined"
+        self.inhabited = False
         self.known = "unknown"	# Other values: "known" and "shuttle down"
+    def __str__(self):
+        if self.inhabited:
+            return '@'
+        else:
+            return 'P'
 
+class star(feature):
+    "A star.  Has no state, just knows how to identify iself."
+    def __init(self):
+        feature.__init__(self)
+    def __str__(self):
+        return '*'
+
+class web(feature):
+    "A bit of Tholian web.  Has no state, just knows how to identify iself."
+    def __init(self):
+        feature.__init__(self)
+    def __str__(self):
+        return '*'
+
+class blackhole(feature):
+    "A black hole.  Has no hair, just knows how to identify iself."
+    def __init(self):
+        feature.__init__(self)
+    def __str__(self):
+        return '*'
+
+class starbase(feature):
+    "Starbases also have no features."
+    def __init(self):
+        feature.__init__(self)
+    def __del__(self):
+        game.state.bases.remove(self.location)
+    def __str__(self):
+        return 'B'
+
 class quadrant:
     def __init__(self):
         self.stars = None
@@ -65,6 +134,15 @@
         self.supernova = None
         self.charted = None
         self.status = "secure"	# Other valuues: "distressed", "enslaved"
+    def enemies(self):
+        "List enemies in this quadrant."
+        lst = []
+        for feature in self.quad.values:
+            if not isinstance(feature, ship):
+                continue
+            if feature.name not in ("Enterprise", "Faerie Queene"):
+                lst.append(feature)
+        return lst
 
 class page:
     "A chart page.  The starchart is a 2D array of these."
@@ -116,7 +194,7 @@
         self.future = []		# future events
         self.passwd = None		# Self Destruct password
         # Coordinate members start here
-	self.ks = {}			# enemy sector locations
+	self.enemies = {}			# enemy sector locations
 	self.quadrant = None		# where we are
         self.sector = None
 	self.tholian = None		# coordinates of Tholian
@@ -170,7 +248,6 @@
 	self.nkinks = None		# count of energy-barrier crossings
 	self.iplnet = None		# planet # in quadrant
 	self.inplan = None		# initial planets
-	self.nenhere = None		# number of enemies in quadrant
 	self.irhere = None		# Romulans in quadrant
 	self.isatb = None		# =1 if super commander is attacking base
 	self.tourn = None		# tournament number
@@ -201,4 +278,463 @@
 	self.probeiny = None		#
 	self.height = None		# height of orbit around planet
 
+def communicating():
+    "Are we in communication with Starfleet Command?"
+    return (not damaged("DRADIO")) or game.condition == docked
 
+# Code corresponding to ai.c begins here
+
+def tryexit(look, ship, irun):
+    # a bad guy attempts to bug out of the quadrant
+    iq = coord()
+    iq.x = game.quadrant.x+(look.x+(QUADSIZE-1))/QUADSIZE - 1
+    iq.y = game.quadrant.y+(look.y+(QUADSIZE-1))/QUADSIZE - 1
+    if not valid_quadrant(iq) or \
+	game.state.galaxy[iq].supernova or \
+        game.state.galaxy[iq].klingons > 8:
+	return False;	# no can do -- neg energy, supernovae, or >8 Klingons
+    if ship.type == "Romulan":
+        return False	# Romulans cannot escape
+    if not irun:
+	# avoid intruding on another commander's territory
+        if ship.type == "Commander":
+            if iq in gamestate.kcmdr:
+                return False
+	    # refuse to leave if currently attacking starbase:
+            if game.battle == game.quadrant:
+                return False;
+	# don't leave if over 1000 units of energy
+        if ship.power > 1000.0:
+            return false;
+    # Print escape message and move out of quadrant.
+    # We know this if either short or long range sensors are working
+    if not damaged("DSRSENS") or not damaged("DLRSENS") or game.condition=="docked":
+	crmena(True, "sector", ship)
+	prout(" escapes to quadrant %s (and regains strength)." % iq)
+    # handle local matters related to escape
+    game.quad[ship.location] = None;
+    if game.condition != "docked":
+        newcnd()
+    # Handle global matters related to escape
+    game.state.galaxy[game.quadrant].klingons -= 1
+    game.state.galaxy[iq].klingons += 1
+    if ship.type == "Super-Commander":
+	game.ishere = False
+	game.iscate = False
+	game.ientesc = False
+	game.isatb = 0
+	schedule("FSCMOVE", 0.2777)
+	unschedule("FSCDBAS")
+	game.state.kscmdr = iq
+    else:
+        for (n, cmdr) in enumerate(game.state.kcmdr):
+            if cmdr == game.quadrant:
+		game.state.kcmdr[n] = iq
+		break
+	game.comhere = False
+    return True		# successful exit
+
+def sgn(n): n / abs(n)
+
+'''
+Algorithm for moving bad guys:
+
+ * Enterprise has "force" based on condition of phaser and photon torpedoes.
+ If both are operating full strength, force is 1000. If both are damaged,
+ force is -1000. Having shields down subtracts an additional 1000.
+
+ * Enemy has forces equal to the energy of the attacker plus
+ 100*(K+R) + 500*(C+S) - 400 for novice through good levels OR
+ 346*K + 400*R + 500*(C+S) - 400 for expert and emeritus.
+
+ Attacker Initial energy levels (nominal):
+ Klingon   Romulan   Commander   Super-Commander
+ Novice    400        700        1200        
+ Fair      425        750        1250
+ Good      450        800        1300        1750
+ Expert    475        850        1350        1875
+ Emeritus  500        900        1400        2000
+ VARIANCE   75        200         200         200
+
+ Enemy vessels only move prior to their attack. In Novice - Good games
+ only commanders move. In Expert games, all enemy vessels move if there
+ is a commander present. In Emeritus games all enemy vessels move.
+
+ *  If Enterprise is not docked, an agressive action is taken if enemy
+ forces are 1000 greater than Enterprise.
+
+ Agressive action on average cuts the distance between the ship and
+ the enemy to 1/4 the original.
+
+ *  At lower energy advantage, movement units are proportional to the
+ advantage with a 650 advantage being to hold ground, 800 to move forward
+ 1, 950 for two, 150 for back 4, etc. Variance of 100.
+
+ If docked, is reduced by roughly 1.75*game.skill, generally forcing a
+ retreat, especially at high skill levels.
+
+ *  Motion is limited to skill level, except for SC hi-tailing it out.
+'''
+
+def movebaddy(ship):
+    # tactical movement for the bad guys
+    bugout = False
+    # This should probably be just game.comhere + game.ishere
+    if game.skill >= SKILL_EXPERT:
+        nbaddys = int((game.comhere*2 + game.ishere*2+game.klhere*1.23+game.irhere*1.5)/2.0)
+    else:
+	nbaddys = game.comhere + game.ishere
+    dist1 = ship.distance()
+    mdist = round(dist1 + 0.5)		# Nearest integer distance
+    # If SC, check with spy to see if should high-tail it
+    if ship.type == "Super-Commander" and \
+           (ship.power <= 500.0 or (game.condition==docked and not damaged("DPHOTON"))):
+	bugout = True;
+	motion = -QUADSIZE;
+    else:
+	# decide whether to advance, retreat, or hold position
+	forces = ship.power + 100.0*len(game.quad.enemies()) + 400*(nbaddys-1)
+        if not game.shldup:
+            forces += 1000.0 		# Good for enemy if shield is down!
+        if not damaged("DPHASER") or not damaged("DPHOTON"):
+            if damaged(DPHASER):
+		forces += 300.0
+	    else:
+		forces -= 0.2*(game.energy - 2500.0);
+	    if damaged("DPHOTON"):
+		forces += 300.0
+	    else:
+		forces -= 50.0*game.torps
+	else:
+	    # phasers and photon tubes both out!
+	    forces += 1000.0
+	motion = 0;
+        if forces <= 1000.0 and game.condition != "docked":	# Typical case
+	    motion = ((forces+200.0*Rand())/150.0) - 5.0
+	else:
+            if forces > 1000.0:	# Very strong -- move in for kill
+		motion = (1.0-square(Rand()))*dist1 + 1.0
+	    if game.condition == "docked" and "base" in game.options:
+                 # protected by base -- back off !
+		motion -= game.skill * (2.0-Rand()**2)
+	if idebug:
+	    proutn("=== MOTION = %1.2f, FORCES = %1.2f, ", motion, forces)
+	# don't move if no motion
+        if motion == 0:
+            return
+	# Limit motion according to skill
+        if abs(motion) > game.skill:
+            if motion < 0:
+                motion = -game.kill
+            else:
+                motion = game.skill
+    # calculate preferred number of steps
+    nsteps = abs(motion)
+    if motion > 0 and nsteps > mdist: # don't overshoot
+        nsteps = mdist
+    if nsteps > QUADSIZE: # This shouldn't be necessary
+        nsteps = QUADSIZE
+    if nsteps < 1:  # This shouldn't be necessary
+        nsteps = 1
+    if idebug:
+	proutn("NSTEPS = %d:", nsteps)
+    # Compute preferred values of delta X and Y
+    me = game.sector - com;
+    if 2.0 * abs(me.x) < abs(me.y):
+        me.x = 0;
+    if 2.0 * abs(me.y) < abs(game.sector.x-com.x):
+        me.y = 0;
+    if me.x != 0: me.x = sgn(me.x*motion)
+    if me.y != 0: me.y = sgn(me.y*motion)
+    next = com;
+    # main move loop
+    for ll in range(nsteps):
+        if idebug:
+	    proutn(" %d", ll+1)
+	# Check if preferred position available
+	look = next + me
+	krawl = me.sgn()
+	success = False
+	attempts = 0 # Settle meysterious hang problem
+        while attempts < 20 and not success:
+            attempts += 1
+            if look.x < 1 or look.x > QUADSIZE:
+                if motion < 0 and tryexit(look, ship, bugout):
+		    return
+                if krawl.x == me.x or me.y == 0:
+                    break
+		look.x = next.x + krawl.x
+		krawl.x = -krawl.x
+	    elif look.y < 1 or look.y > QUADSIZE:
+                if motion < 0 and tryexit(look, ship, bugout):
+                    return
+                if krawl.y == me.y or me.x == 0:
+                    break
+                look.y = next.y + krawl.y
+                krawl.y = -krawl.y
+	    elif "ramming" in game.options and game.quad[look] != IHDOT:
+		# See if we should ram ship
+                if game.quad[look] == game.ship and ienm in (IHC, IHS):
+		    ram(true, ienm, com)
+		    return
+                if krawl.x != me.x and me.y != 0:
+		    look.x = next.x + krawlx
+		    krawl.x = -krawl.x
+		elif krawly != me.y and me.x != 0:
+		    look.y = next.y + krawly
+		    krawl.y = -krawl.y
+		else:
+                    break # we have failed
+	    else:
+                success = True
+        if success:
+	    next = look
+            if idebug:
+		proutn(str(next))
+	else:
+            break # done early
+    if idebug:
+	prout("")
+    # Put ship in place within same quadrant
+    if next != ship.location:
+	# it moved
+        if not damaged("DSRSENS") or game.condition == "docked":
+	    proutn("*** %s from sector %s" % (ship, ship.location))
+            if ship.distance() < dist1:
+                prout(" advances to sector %s" % ship.location)
+            else:
+                proutn(" retreats to sector %s" % ship.location)
+        ship.sectormove(next)
+
+def movcom(): 
+    "Allow enemies to move."
+    for enemy in self.quad.enemies():
+        if enemy.type == "Commander":
+            movebaddy(enemy)
+            break
+    for enemy in self.quad.enemies():
+        if enemy.type == "Super-Commander":
+            movebaddy(enemy)
+            break
+    # Ff skill level is high, move other Klingons and Romulans too!
+    # Move these last so they can base their actions on what the
+    # commander(s) do.
+    if game.skill >= SKILL_EXPERT and "movebaddy" in game.options: 
+        for enemy in self.quad.enemies():
+            if enemy.type in ("Klingon", "Romulan"):
+                movebaddy(enemy)
+                break
+
+def movescom(ship, avoid):
+    # commander movement helper
+    global ipage
+    if game.state.kscmdr == game.quadrant or \
+	game.state.galaxy[iq].supernova or \
+        game.state.galaxy[iq].klingons > 8: 
+	return True
+    if avoid:
+	# Avoid quadrants with bases if we want to avoid Enterprise
+        for base in game.state.starbases:
+            if base.location == ship.location:
+		return True
+    if game.justin and not game.iscate:
+        return True
+    # Super-Commander has scooted, Remove him from current quadrant.
+    if game.state.kscmdr == game.quadrant:
+	game.iscate = False
+	game.isatb = 0
+	game.ientesc = False
+	unschedule("FSCDBAS")
+        if game.condition != "docked":
+            newcnd()
+        ship.sectormove(None)
+    # do the actual move
+    game.state.galaxy[game.state.kscmdr].klingons -= 1
+    game.state.kscmdr = iq
+    game.state.galaxy[game.state.kscmdr].klingons += 1
+    # check for a helpful planet in the destination quadrant
+    for planet in game.state.plnets:
+	if planet.location == game.state.kscmdr and planet.crystals=="present":
+	    # destroy the planet
+	    game.state.plnets.remove(planet)
+            if communicating():
+                if not ipage:
+                    pause_game(True)
+		ipage = true
+		prout("Lt. Uhura-  \"Captain, Starfleet Intelligence reports")
+		proutn(_("   a planet in "))
+		proutn(cramlc(quadrant, game.state.kscmdr))
+		prout(" has been destroyed")
+		prout("   by the Super-commander.\"")
+	    break
+    return False # looks good!
+			
+def scom():
+    # move the Super Commander
+    if (idebug):
+        prout("== SCOM")
+
+    # Decide on being active or passive
+    passive = ((NKILLC+NKILLK)/(game.state.date+0.01-game.indate) < 0.1*game.skill*(game.skill+1.0) \
+               or (game.state.date-game.indate) < 3.0)
+    if not game.iscate and passive:
+	# compute move away from Enterprise
+	idelta = game.state.kscmdr - game.quadrant
+        if distance(game.state.kscmdr) > 2.0:
+	    # circulate in space
+	    idelta,x = game.state.kscmdr.y-game.quadrant.y
+	    idelta,y = game.quadrant.x-game.state.kscmdr.x
+    else:
+        if len(game.state.bases):
+            unschedule("FSCMOVE")
+	    return
+	sc = game.state.kscmdr
+	# compute distances to starbases
+        game.starbases.sort(lambda x, y: cmp(distance(x, game.quadrant), distance(y, game.quadrant)))
+	# look for nearest base without a commander, no Enterprise, and
+	# without too many Klingons, and not already under attack.
+        nearest = filter(game.starbases,
+                         lambda x: game.state.galaxy[x].supernova \
+                         and game.state.galaxy[x].klingons <= 8)
+        if game.quadrant in nearest:
+            nearest.remove(game.quadrant)
+        if game.battle in nearest:
+            nearest.remove(game.battle)
+        # if there is a commander, and no other base is appropriate,
+        # we will take the one with the commander
+        nocmd = filter(lambda x: x.location not in game.state.kcmdr, nearest)
+        if len(nocmd):
+            nearest = nocmd
+        ibq = nearest[0]
+        if len(nearest) == 0:
+            return	# Nothing suitable -- wait until next time
+	# decide how to move toward base
+	idelta = ibq - game.state.kscmdr
+    # maximum movement is 1 quadrant in either or both axis
+    delta = delta.sgn()
+    # try moving in both x and y directions
+    iq = game.state.kscmdr + idelta
+    if movescom(iq, passive):
+	# failed -- try some other maneuvers
+        if ideltax==0 or ideltay==0:
+	    # attempt angle move
+            if ideltax != 0:
+		iq.y = game.state.kscmdr.y + 1
+                if movescom(iq, passive):
+		    iq.y = game.state.kscmdr.y - 1
+		    movescom(iq, passive)
+	    else:
+		iq.x = game.state.kscmdr.x + 1
+                if movescom(iq, passive):
+		    iq.x = game.state.kscmdr.x - 1
+		    movescom(iq, passive)
+	else:
+	    # try moving just in x or y
+	    iq.y = game.state.kscmdr.y
+            if movescom(iq, passive):
+		iq.y = game.state.kscmdr.y + ideltay
+		iq.x = game.state.kscmdr.x
+		movescom(iq, passive)
+    # check for a base
+    if game.state.rembase == 0:
+	unschedule("FSCMOVE")
+    else:
+        for ibq in game.bases:
+            if ibq == game.state.kscmdr and game.state.kscmdr == game.battle:
+                # attack the base
+                if passive:
+                    return # no, don't attack base!
+                game.iseenit = false
+                game.isatb = 1
+                schedule("FSCDBAS", 1.0 +2.0*Rand())
+                if is_scheduled("FCDBAS"):
+                    postpone("FSCDBAS", scheduled("FCDBAS")-game.state.date)
+                if not communicating():
+                    return # no warning
+                game.iseenit = True
+                if not ipage:
+                    pause_game(true)
+                ipage = True
+                proutn(_("Lt. Uhura-  \"Captain, the starbase in "))
+                proutn(cramlc(quadrant, game.state.kscmdr))
+                skip(1)
+                prout("   reports that it is under attack from the Klingon Super-commander.")
+                proutn("   It can survive until stardate %d.\"",
+                       int(scheduled(FSCDBAS)))
+                if not game.resting:
+                    return
+                prout("Mr. Spock-  \"Captain, shall we cancel the rest period?\"")
+                if ja() == false:
+                    return
+                game.resting = False
+                game.optime = 0.0 # actually finished
+                return
+    # Check for intelligence report
+    if (Rand() > 0.2 or not communicating() or
+        not game.state.galaxy[game.state.kscmdr].charted):
+	return
+    if ipage:
+        pause_game(true)
+        ipage = true
+    prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"))
+    proutn(_("   the Super-commander is in "))
+    proutn(cramlc(quadrant, game.state.kscmdr))
+    prout(".\"")
+    return
+
+def movetho(void):
+    "Move the Tholian (an instance of ship type pointed at by game.tholian)." 
+    if not game.tholian or game.justin:
+        return
+    next = coord()
+    if game.tholian.location.x == 1 and game.tholian.location.y == 1:
+	next.x = 1
+        next.y = QUADSIZE
+    elif game.tholian.location.x == 1 and game.tholian.location.y == QUADSIZE:
+	next.x = next.y = QUADSIZE
+    elif game.tholian.location.x == QUADSIZE and game.tholian.location.y == QUADSIZE:
+	next.x = QUADSIZE
+        next.y = 1
+    elif game.tholian.location.x == QUADSIZE and game.tholian.location.y == 1:
+	next.x = next.y = 1
+    else:
+	# something is wrong!
+	game.tholian = None
+	return
+    # Do nothing if we are blocked
+    if game.quad[next] != empty and not isinstance(game.quad[next]. web):
+        return
+    # Now place some web
+    im = (next - game.tholian.location).sgn()
+    if game.tholian.x != next.x:
+	# move in x axis
+	while game.tholian.location.x != next.x:
+	    game.tholian.location.x += im.x
+            if game.quad[game.tholian.location] == empty:
+                game.quad[game.tholian.location] = web()
+    elif game.tholian.y != next.y:
+	# move in y axis
+	while game.tholian.y != next.y:
+	    game.tholian.y += im.y
+            if game.quad[game.tholian.location] == empty:
+                game.quad[game.tholian.location] = web()
+    # web is done, move ship
+    game.tholian.movesector(next)
+    # check to see if all holes plugged
+    for i in range(1, QUADSIZE+1):
+	if (not isinstance(game.quad[(1,i)],web)) and game.quad[(1,i)]!=game.tholian:
+            return
+        if (not isinstance(game.quad[(QUADSIZE,i)],web)) and game.quad[(QUADSIZE,i)]!=game.tholian:
+            return
+        if (not isinstance(game.quad[(i,1)],web)) and game.quad[(i,1)]!=game.tholian:
+            return
+        if (not isinstance(game.quad[(i.QUADSIZE)],web)) and game.quad[(i,QUADSIZE)]!=game.tholian:
+            return
+    # All plugged up -- Tholian splits
+    game.quad[game.tholian] = web()
+    ship.movesector(None)
+    crmena(True, IHT, sector, game.tholian)
+    prout(" completes web.")
+    game.tholian = None
+    return
+



From stsp at mail.berlios.de  Sun Sep 24 16:20:15 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Sun, 24 Sep 2006 16:20:15 +0200
Subject: [Sst-commit-watch] r631 - trunk/doc
Message-ID: <200609241420.k8OEKFXa031545@sheep.berlios.de>

Author: stsp
Date: 2006-09-24 16:20:15 +0200 (Sun, 24 Sep 2006)
New Revision: 631

Modified:
   trunk/doc/Makefile.am
   trunk/doc/Makefile.in
Log:
fix makehelp.py invocation

Modified: trunk/doc/Makefile.am
===================================================================
--- trunk/doc/Makefile.am	2006-09-24 11:04:28 UTC (rev 630)
+++ trunk/doc/Makefile.am	2006-09-24 14:20:15 UTC (rev 631)
@@ -9,7 +9,7 @@
 sst-doc.txt: sst-doc.xml
 	xmlto -m sst-layer.xsl txt sst-doc.xml
 sst.doc: sst-doc.txt
-	makehelp.py >sst.doc
+	./makehelp.py >sst.doc
 
 sst-doc.html: sst-doc.xml
 	xmlto xhtml-nochunks sst-doc.xml

Modified: trunk/doc/Makefile.in
===================================================================
--- trunk/doc/Makefile.in	2006-09-24 11:04:28 UTC (rev 630)
+++ trunk/doc/Makefile.in	2006-09-24 14:20:15 UTC (rev 631)
@@ -391,7 +391,7 @@
 sst-doc.txt: sst-doc.xml
 	xmlto -m sst-layer.xsl txt sst-doc.xml
 sst.doc: sst-doc.txt
-	makehelp.py >sst.doc
+	./makehelp.py >sst.doc
 
 sst-doc.html: sst-doc.xml
 	xmlto xhtml-nochunks sst-doc.xml



From stsp at mail.berlios.de  Mon Sep 25 18:53:12 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Mon, 25 Sep 2006 18:53:12 +0200
Subject: [Sst-commit-watch] r632 - in trunk: po src
Message-ID: <200609251653.k8PGrCgl001302@sheep.berlios.de>

Author: stsp
Date: 2006-09-25 18:53:11 +0200 (Mon, 25 Sep 2006)
New Revision: 632

Modified:
   trunk/po/ru.po
   trunk/src/io.c
   trunk/src/reports.c
   trunk/src/sst.c
   trunk/src/sst.py
   trunk/src/sstlinux.h
Log:
few assorted adjustments and a fix for #8883

Modified: trunk/po/ru.po
===================================================================
--- trunk/po/ru.po	2006-09-24 14:20:15 UTC (rev 631)
+++ trunk/po/ru.po	2006-09-25 16:53:11 UTC (rev 632)
@@ -11,7 +11,7 @@
 msgstr ""
 "Project-Id-Version: sst 2.0\n"
 "Report-Msgid-Bugs-To: stsp\n"
-"POT-Creation-Date: 2006-09-22 20:54+0400\n"
+"POT-Creation-Date: 2006-09-25 10:36+0400\n"
 "PO-Revision-Date: 2006-09-15 11:01+0400\n"
 "Last-Translator: Stas Sergeev <stsp at aknet.ru>\n"
 "Language-Team: Russian <ru at li.org>\n"
@@ -567,13 +567,12 @@
 msgstr "????? ?????? ???? ?? "
 
 #: src/battle.c:1329
-#, fuzzy, c-format
 msgid "***Mr. Spock-  \"Captain, the vessel at %s"
-msgstr "***?????? ????- \"???????, ??????? ?? "
+msgstr "***?????? ????- \"???????, ???????? ? %s "
 
 #: src/battle.c:1331
 msgid "   has just lost its firepower.\""
-msgstr "   ??????? ??????????????.\""
+msgstr "   ???????? ??????????????.\""
 
 #: src/events.c:141
 msgid "Lt. Uhura- \"Captain, the sub-space radio is working and"
@@ -716,9 +715,9 @@
 msgstr "     ????? ?????????? ? %s; ?????????? ????????????."
 
 #: src/events.c:853
-#, fuzzy, c-format
+#, c-format
 msgid "***Incipient supernova detected at %s"
-msgstr "***???????????????? ????????? ?????????? ? "
+msgstr "***??????????????? ????? ?????????? ? %s"
 
 #: src/events.c:855
 msgid "Emergency override attempts t"
@@ -2588,7 +2587,7 @@
 
 #: src/reports.c:207
 msgid "       STAR CHART FOR THE KNOWN GALAXY"
-msgstr "       ???????? ????? ????????????? ????????"
+msgstr "     ???????? ????? ????????????? ????????"
 
 #: src/reports.c:209
 #, c-format
@@ -2723,11 +2722,11 @@
 
 #: src/reports.c:386
 msgid "     Short-range scan"
-msgstr "     ??????? ?????"
+msgstr "       ??????? ?????"
 
 #: src/reports.c:412
 msgid "COMPUTER DAMAGED, USE A POCKET CALCULATOR."
-msgstr "?????????? ??????, ?????????????? ?????????????."
+msgstr "????????? ??????, ?????????????? ?????????????."
 
 #: src/reports.c:419
 msgid "Destination quadrant and/or sector? "
@@ -3218,90 +3217,90 @@
 msgid "WARNING--Saved games produce no plaques!"
 msgstr "??????????????--??????????? ???? ?? ???? ???????!"
 
-#: src/sst.c:664
+#: src/sst.c:666
 msgid "Do you want your score recorded?"
 msgstr "?????? ???????? ???? ????? "
 
-#: src/sst.c:670
+#: src/sst.c:672
 msgid "Do you want to play again? "
 msgstr "?????? ??????? ?????? "
 
-#: src/sst.c:674
+#: src/sst.c:676
 msgid "May the Great Bird of the Galaxy roost upon your home planet."
 msgstr "? ????? ??????? ????? ????????? ??????? ?? ???? ???????."
 
-#: src/sst.c:686
+#: src/sst.c:688
 msgid "Romulan"
 msgstr "???????"
 
-#: src/sst.c:687
+#: src/sst.c:689
 msgid "Klingon"
 msgstr "???????"
 
-#: src/sst.c:688
+#: src/sst.c:690
 msgid "Commander"
 msgstr "????????"
 
-#: src/sst.c:689
+#: src/sst.c:691
 msgid "Super-commander"
 msgstr "????-???"
 
-#: src/sst.c:690
+#: src/sst.c:692
 msgid "Star"
 msgstr "??????"
 
-#: src/sst.c:691
+#: src/sst.c:693
 msgid "Planet"
 msgstr "???????"
 
-#: src/sst.c:692
+#: src/sst.c:694
 msgid "Starbase"
 msgstr "????"
 
-#: src/sst.c:693
+#: src/sst.c:695
 msgid "Black hole"
 msgstr "?????? ????"
 
-#: src/sst.c:694
+#: src/sst.c:696
 msgid "Tholian"
 msgstr "??????"
 
-#: src/sst.c:695
+#: src/sst.c:697
 msgid "Tholian web"
 msgstr "?????????? ????"
 
-#: src/sst.c:696
+#: src/sst.c:698
 msgid "Stranger"
 msgstr "????????"
 
-#: src/sst.c:697
+#: src/sst.c:699
 msgid "Inhabited World"
 msgstr "????????? ???"
 
-#: src/sst.c:708
+#: src/sst.c:710
 msgid "Quadrant "
 msgstr "???????? "
 
-#: src/sst.c:709
+#: src/sst.c:711
 msgid "Sector "
 msgstr "?????? "
 
-#: src/sst.c:719
+#: src/sst.c:721
 msgid " at "
 msgstr " ? "
 
-#: src/sst.c:728
+#: src/sst.c:730
 msgid "Enterprise"
 msgstr "??????????"
 
-#: src/sst.c:729
+#: src/sst.c:731
 msgid "Faerie Queene"
 msgstr "????????? ????????"
 
-#: src/sst.c:838
+#: src/sst.c:840
 msgid "Please answer with \"y\" or \"n\": "
 msgstr "?????????? ????????? ?? (\"y\") ??? ??? (\"n\"): "
 
-#: src/sst.c:847
+#: src/sst.c:849
 msgid "Beg your pardon, Captain?"
 msgstr "????? ????????, ????????"

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-09-24 14:20:15 UTC (rev 631)
+++ trunk/src/io.c	2006-09-25 16:53:11 UTC (rev 632)
@@ -47,13 +47,13 @@
 	char *ln_env = getenv("LINES");
 	rows = ln_env ? atoi(ln_env) : 25;
     } else {
-	(void)initscr();
+	initscr();
 #ifdef KEY_MIN
 	keypad(stdscr, TRUE);
 #endif /* KEY_MIN */
-	(void)saveterm();
-	(void)nonl();
-	(void)cbreak();
+	saveterm();
+	nonl();
+	cbreak();
 #ifdef A_COLOR
 	{
 	    start_color();
@@ -67,7 +67,7 @@
 	    init_pair(COLOR_YELLOW, COLOR_YELLOW, COLOR_BLACK);
 	}
 #endif /* A_COLOR */
-	//(void)noecho();
+	//noecho();
 	fullscreen_window = stdscr;
 	srscan_window     = newwin(12, 25, 0,       0);
 	report_window     = newwin(11, 0,  1,       25);

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-24 14:20:15 UTC (rev 631)
+++ trunk/src/reports.c	2006-09-25 16:53:11 UTC (rev 632)
@@ -26,8 +26,8 @@
 	    proutn(_("Base in %i - %i attacked by C. Alive until %.1f"), game.battle.x, game.battle.y, scheduled(FCDBAS));
         if (game.isatb)
 	    proutn(_("Base in %i - %i attacked by S. Alive until %.1f"), game.state.kscmdr.x, game.state.kscmdr.y, scheduled(FSCDBAS));
+	clreol();
     }
-    clreol();
 }
 	
 

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-24 14:20:15 UTC (rev 631)
+++ trunk/src/sst.c	2006-09-25 16:53:11 UTC (rev 632)
@@ -634,11 +634,12 @@
     }
     /* where to save the input in case of bugs */
     logfp = fopen("/usr/tmp/sst-input.log", "w");
-    setlinebuf(logfp);
-    fprintf(logfp, "seed %d\n", seed);
+    if (logfp) {
+	setlinebuf(logfp);
+	fprintf(logfp, "seed %d\n", seed);
+    }
     srand(seed);
 
-    srand(seed);
     iostart();
 
     line[0] = '\0';

Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-09-24 14:20:15 UTC (rev 631)
+++ trunk/src/sst.py	2006-09-25 16:53:11 UTC (rev 632)
@@ -503,7 +503,7 @@
             if ship.distance() < dist1:
                 prout(" advances to sector %s" % ship.location)
             else:
-                proutn(" retreats to sector %s" % ship.location)
+                prout(" retreats to sector %s" % ship.location)
         ship.sectormove(next)
 
 def movcom(): 

Modified: trunk/src/sstlinux.h
===================================================================
--- trunk/src/sstlinux.h	2006-09-24 14:20:15 UTC (rev 631)
+++ trunk/src/sstlinux.h	2006-09-25 16:53:11 UTC (rev 632)
@@ -5,6 +5,5 @@
 void nosound(void);
 
 #define delay(x) usleep(x*1000)
-#define randomize() srand((unsigned)time(NULL))
 
 #endif



From stsp at mail.berlios.de  Tue Sep 26 19:27:52 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Tue, 26 Sep 2006 19:27:52 +0200
Subject: [Sst-commit-watch] r633 - in trunk: po src
Message-ID: <200609261727.k8QHRqsL032218@sheep.berlios.de>

Author: stsp
Date: 2006-09-26 19:27:51 +0200 (Tue, 26 Sep 2006)
New Revision: 633

Modified:
   trunk/po/ru.po
   trunk/src/battle.c
   trunk/src/io.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/sst.h
Log:
- proper localization of dreprt()
- fixed preport() which didn't work at all
- fixed a nasty bug in photon() which caused a misfired torpedo to proceed
- fixed a very nasty bug in is_valid()
- many translation fixes

Modified: trunk/po/ru.po
===================================================================
--- trunk/po/ru.po	2006-09-25 16:53:11 UTC (rev 632)
+++ trunk/po/ru.po	2006-09-26 17:27:51 UTC (rev 633)
@@ -11,7 +11,7 @@
 msgstr ""
 "Project-Id-Version: sst 2.0\n"
 "Report-Msgid-Bugs-To: stsp\n"
-"POT-Creation-Date: 2006-09-25 10:36+0400\n"
+"POT-Creation-Date: 2006-09-26 18:26+0400\n"
 "PO-Revision-Date: 2006-09-15 11:01+0400\n"
 "Last-Translator: Stas Sergeev <stsp at aknet.ru>\n"
 "Language-Team: Russian <ru at li.org>\n"
@@ -104,7 +104,7 @@
 msgid "Shields already up."
 msgstr "?????? ? ??? ??? ???????."
 
-#: src/battle.c:67 src/battle.c:1282
+#: src/battle.c:67 src/battle.c:1279
 msgid "Shields raised."
 msgstr "?????? ???????."
 
@@ -116,7 +116,7 @@
 msgid "Shields already down."
 msgstr "?????? ? ??? ??? ?????."
 
-#: src/battle.c:83 src/battle.c:960
+#: src/battle.c:83 src/battle.c:957
 msgid "Shields lowered."
 msgstr "?????? ?????."
 
@@ -158,9 +158,9 @@
 
 #: src/battle.c:126
 msgid "Draining energy from shields.\""
-msgstr "???????? ??????? ?? ??????.\""
+msgstr "??????? ??????? ?? ??????.\""
 
-#: src/battle.c:195 src/battle.c:964 src/events.c:851 src/moving.c:140
+#: src/battle.c:195 src/battle.c:961 src/events.c:851 src/moving.c:140
 #: src/moving.c:724 src/planets.c:458
 msgid "***RED ALERT!  RED ALERT!"
 msgstr "***???????!  ???????!"
@@ -175,11 +175,11 @@
 
 #: src/battle.c:209
 msgid " rams "
-msgstr " ?????????? "
+msgstr " ??????? "
 
 #: src/battle.c:211
 msgid " (original position)"
-msgstr " (?????????????? ?????????)"
+msgstr " (???????? ?????????)"
 
 #: src/battle.c:216
 msgid " heavily damaged."
@@ -368,209 +368,210 @@
 msgid "  the Captain's psychological profile.\""
 msgstr "  ??????????????? ????????? ????????.\""
 
-#: src/battle.c:820
+#: src/battle.c:819
 msgid "Photon tubes damaged."
 msgstr "???????? ????? ???????."
 
-#: src/battle.c:825
+#: src/battle.c:824
 msgid "No torpedoes left."
 msgstr "?????? ?????? ?? ????????."
 
-#: src/battle.c:836
+#: src/battle.c:835
 #, c-format
 msgid "%d torpedoes left."
 msgstr "???????? %d ??????."
 
-#: src/battle.c:837
+#: src/battle.c:836
 msgid "Number of torpedoes to fire- "
 msgstr "????? ?????? ?? ???????- "
 
-#: src/battle.c:848
+#: src/battle.c:847
 msgid "Maximum of 3 torpedoes per burst."
 msgstr "???????? 3 ??????? ?? ????."
 
-#: src/battle.c:889
+#: src/battle.c:888
 #, c-format
 msgid "Target sector for torpedo number %d- "
 msgstr "?????? ?????????? ??? ??????? ????? %d- "
 
-#: src/battle.c:916
+#: src/battle.c:914
 #, c-format
 msgid "***TORPEDO NUMBER %d MISFIRES"
 msgstr "***??????? ????? %d ?? ?????"
 
-#: src/battle.c:918
+#: src/battle.c:916
 msgid "***TORPEDO MISFIRES."
 msgstr "***??????? ?? ?????."
 
-#: src/battle.c:921
+#: src/battle.c:919
 msgid "  Remainder of burst aborted."
 msgstr "  ??????? ????? ???????."
 
-#: src/battle.c:924
+#: src/battle.c:921
 msgid "***Photon tubes damaged by misfire."
 msgstr "***???????? ????? ????????? ??? ??????."
 
-#: src/battle.c:946
+#: src/battle.c:943
 msgid "Weapons officer Sulu-  \"Phasers overheated, sir.\""
 msgstr "???????? ????- \"?????? ??????????, ???.\""
 
-#: src/battle.c:970
+#: src/battle.c:967
 msgid "Sulu-  \"Captain! Shield malf***********************\""
 msgstr "????- \"???????! ?????? ?? ????*********************\""
 
-#: src/battle.c:976
+#: src/battle.c:973
 msgid "Sulu-  \"Captain! Shield malfunction! Phaser fire contained!\""
 msgstr ""
 "????- \"???????! ?????? ?? ?????????! ??????? ??????? ????????? ??????!\""
 
-#: src/battle.c:978
+#: src/battle.c:975
 msgid "Lt. Uhura-  \"Sir, all decks reporting damage.\""
 msgstr "??. ?????- \"???, ??? ?????? ???????? ? ???????????.\""
 
-#: src/battle.c:984
+#: src/battle.c:981
 msgid "McCoy to bridge- \"Severe radiation burns, Jim."
 msgstr "?????? ???????- \"?????????? ???????????? ?????, ????."
 
-#: src/battle.c:985
+#: src/battle.c:982
 #, c-format
 msgid "  %d casualties so far.\""
 msgstr "  ????-??? %d ????????????.\""
 
-#: src/battle.c:990
+#: src/battle.c:987
 msgid "Phaser energy dispersed by shields."
 msgstr "??????? ??????? ???????? ???????? ?????."
 
-#: src/battle.c:991
+#: src/battle.c:988
 msgid "Enemy unaffected."
 msgstr "???? ?? ?????????."
 
-#: src/battle.c:1011
+#: src/battle.c:1008
 msgid "Phasers can't be fired through base shields."
 msgstr "?????? ?? ????? ???????? ????? ?????? ????."
 
-#: src/battle.c:1016
+#: src/battle.c:1013
 msgid "Phaser control damaged."
 msgstr "?????????? ???????? ?? ????????."
 
-#: src/battle.c:1022
+#: src/battle.c:1019
 msgid "High speed shield control damaged."
 msgstr "???????????????? ?????????? ??????? ?? ????????."
 
-#: src/battle.c:1027
+#: src/battle.c:1024
 msgid "Insufficient energy to activate high-speed shield control."
 msgstr "???????????? ??????? ??? ????????????????? ?????????? ???????."
 
-#: src/battle.c:1031
+#: src/battle.c:1028
 msgid "Weapons Officer Sulu-  \"High-speed shield control enabled, sir.\""
 msgstr "???????? ????- \"???????????????? ?????????? ??????? ????????, ???.\""
 
-#: src/battle.c:1041
+#: src/battle.c:1038
 msgid "There is no enemy present to select."
 msgstr "????? ??? ??????."
 
-#: src/battle.c:1057 src/battle.c:1072 src/battle.c:1083
+#: src/battle.c:1054 src/battle.c:1069 src/battle.c:1080
 msgid "Energy will be expended into space."
 msgstr "??????? ????? ? ???????."
 
-#: src/battle.c:1089
+#: src/battle.c:1086
 msgid "Manual or automatic? "
 msgstr "?????? ??? ??????????????? "
 
-#: src/battle.c:1100
+#: src/battle.c:1097
 #, c-format
 msgid "Phasers locked on target. Energy available: %.2f"
 msgstr "?????? ???????? ?? ????. ????????? ???????: %.2f"
 
-#: src/battle.c:1110
+#: src/battle.c:1107
 #, c-format
 msgid "%d units required. "
 msgstr "?????????? %d ??????. "
 
-#: src/battle.c:1112
+#: src/battle.c:1109
 msgid "Units to fire= "
 msgstr "??????? ?? ???????= "
 
-#: src/battle.c:1117 src/battle.c:1188
+#: src/battle.c:1114 src/battle.c:1185
 #, c-format
 msgid "Energy available= %.2f"
 msgstr "????????? ???????= %.2f"
 
-#: src/battle.c:1158
+#: src/battle.c:1155
 msgid "*** Tholian web absorbs "
 msgstr "*** ?????????? ???? ????????? "
 
-#: src/battle.c:1159
+#: src/battle.c:1156
 msgid "excess "
 msgstr "?????????? "
 
-#: src/battle.c:1160
+#: src/battle.c:1157
 msgid "phaser energy."
 msgstr "??????? ???????."
 
-#: src/battle.c:1163
+#: src/battle.c:1160
 #, c-format
 msgid "%d expended on empty space."
 msgstr "%d ???? ? ???????."
 
-#: src/battle.c:1172
+#: src/battle.c:1169
 msgid "Battle computer damaged, manual fire only."
 msgstr "???????? ????????? ??????, ??????????? ?????? ?????????."
 
-#: src/battle.c:1175 src/finish.c:14
+#: src/battle.c:1172 src/finish.c:14
 msgid "---WORKING---"
 msgstr "---??????---"
 
-#: src/battle.c:1177
+#: src/battle.c:1174
 msgid "Short-range-sensors-damaged"
 msgstr "???????-????????-??????-???????"
 
-#: src/battle.c:1178
+#: src/battle.c:1175
 msgid "Insufficient-data-for-automatic-phaser-fire"
 msgstr "????????????-??????-???-???????????????-?????????-???????"
 
-#: src/battle.c:1179
+#: src/battle.c:1176
 msgid "Manual-fire-must-be-used"
 msgstr "???????????-??????-?????????"
 
-#: src/battle.c:1197
+#: src/battle.c:1194
 msgid " can't be located without short range scan."
 msgstr " ?? ????? ???? ????????? ??? ???????? ????????????."
 
-#: src/battle.c:1214
+#: src/battle.c:1211
 msgid "units to fire at "
 msgstr "??????? ?? ??????? ?? "
 
-#: src/battle.c:1244
+#: src/battle.c:1241
 msgid "Available energy exceeded -- try again."
 msgstr "????????? ??????? ?? ??????? -- ?????????? ?????."
 
-#: src/battle.c:1276
+#: src/battle.c:1273
 msgid "Sulu-  \"Sir, the high-speed shield control has malfunctioned . . ."
 msgstr "????- \"???, ???????????????? ?????????? ??????? ?? ????????? . . ."
 
-#: src/battle.c:1277
+#: src/battle.c:1274
 msgid "         CLICK   CLICK   POP  . . ."
 msgstr "         ????   ????   ????  . . ."
 
-#: src/battle.c:1278
+#: src/battle.c:1275
 msgid " No response, sir!"
 msgstr " ??? ???????, ???!"
 
-#: src/battle.c:1312
+#: src/battle.c:1309
 #, c-format
 msgid "%d unit hit on "
 msgstr "%d ?????? ??????? ??????? ?? "
 
-#: src/battle.c:1315
+#: src/battle.c:1312
 msgid "Very small hit on "
 msgstr "????? ?????? ???? ?? "
 
-#: src/battle.c:1329
+#: src/battle.c:1326
+#, c-format
 msgid "***Mr. Spock-  \"Captain, the vessel at %s"
 msgstr "***?????? ????- \"???????, ???????? ? %s "
 
-#: src/battle.c:1331
+#: src/battle.c:1328
 msgid "   has just lost its firepower.\""
 msgstr "   ???????? ??????????????.\""
 
@@ -698,7 +699,7 @@
 
 #: src/events.c:759
 msgid ", buffeted to "
-msgstr " ??????? ? ?????? ????."
+msgstr " ??????? ? "
 
 #: src/events.c:786
 msgid "Force of nova displaces starship."
@@ -1472,7 +1473,7 @@
 
 #: src/moving.c:442 src/moving.c:502
 msgid "Engineer Scott- \"The impulse engines are damaged, Sir.\""
-msgstr "??????? ????- \"?????????? ????????? ??????????, ???.\""
+msgstr "??????? ?????- \"?????????? ????????? ??????????, ???.\""
 
 #: src/moving.c:457
 msgid "First Officer Spock- \"Captain, the impulse engines"
@@ -1509,7 +1510,7 @@
 
 #: src/moving.c:508
 msgid "Engineer Scott- \"Sorry, Captain. Until this damage"
-msgstr "??????? ????- \"????????, ???????. ???? ??? ????????????? ??"
+msgstr "??????? ?????- \"????????, ???????. ???? ??? ????????????? ??"
 
 #: src/moving.c:509
 msgid "  is repaired, I can only give you warp 4.\""
@@ -1551,7 +1552,7 @@
 
 #: src/moving.c:617
 msgid "  Scott here.  The warp engines are damaged."
-msgstr "  ???? ?? ?????.  ??????????????????? ????????? ???????."
+msgstr "  ????? ?? ?????.  ??????????????????? ????????? ???????."
 
 #: src/moving.c:618
 msgid "  We'll have to reduce speed to warp 4."
@@ -1567,11 +1568,11 @@
 
 #: src/moving.c:646
 msgid "Engineer Scott- \"I'm doing my best, Captain,"
-msgstr "??????? ????- \"? ????? ??? ??? ????, ???????,"
+msgstr "??????? ?????- \"? ????? ??? ??? ????, ???????,"
 
 #: src/moving.c:647
 msgid "  but right now we can only go warp 4.\""
-msgstr "  ?? ?????? ?? ????? ???? ?????? ???????? 4."
+msgstr "  ?? ?????? ?? ????? ???? ?????? ???????? 4.\""
 
 #: src/moving.c:651
 msgid "Helmsman Sulu- \"Our top speed is warp 10, Captain.\""
@@ -1588,19 +1589,19 @@
 
 #: src/moving.c:667
 msgid "Engineer Scott- \"Aye, but our maximum safe speed is warp 6.\""
-msgstr "??????? ????- \"???, ???? ?????????? ?????????? ???????? - 6.\""
+msgstr "??????? ?????- \"???, ???? ?????????? ?????????? ???????? - 6.\""
 
 #: src/moving.c:671
 msgid "Engineer Scott- \"Aye, Captain, we'll try it.\""
-msgstr "??????? ????- \"??? ???????, ?????????.\""
+msgstr "??????? ?????- \"??? ???????, ?????????.\""
 
 #: src/moving.c:674
 msgid "Engineer Scott- \"Aye, Captain, but our engines may not take it.\""
-msgstr "??????? ????- \"??? ???????, ?? ???? ?????? ????? ?? ??????????.\""
+msgstr "??????? ?????- \"??? ???????, ?? ???? ?????? ????? ?? ??????????.\""
 
 #: src/moving.c:690
 msgid "Scotty rushes to the transporter controls."
-msgstr "????? ????????? ? ?????????? ?????????????."
+msgstr "?????? ????????? ? ?????????? ?????????????."
 
 #: src/moving.c:692
 msgid "But with the shields up it's hopeless."
@@ -1628,7 +1629,7 @@
 
 #: src/moving.c:709
 msgid "saved."
-msgstr "???????????."
+msgstr "???????."
 
 #: src/moving.c:728
 msgid " has stopped in a quadrant containing"
@@ -1688,7 +1689,7 @@
 #: src/moving.c:844
 msgid "Engineer Scott- \"We have no more deep space probes, Sir.\""
 msgstr ""
-"??????? ????- \"? ??? ?????? ??? ???????????? ??????????? ?????, ???.\""
+"??????? ?????- \"? ??? ?????? ??? ???????????? ??????????? ?????, ???.\""
 
 #: src/moving.c:846
 msgid "Ye Faerie Queene has no deep space probes."
@@ -1696,11 +1697,11 @@
 
 #: src/moving.c:852
 msgid "Engineer Scott- \"The probe launcher is damaged, Sir.\""
-msgstr "??????? ????- \"???????? ??????? ??????, ???.\""
+msgstr "??????? ?????- \"???????? ??????? ??????, ???.\""
 
 #: src/moving.c:859
 msgid "Spock-  \"Records show the previous probe has not yet"
-msgstr "????- \"??????? ? ?????????? ?????? ??????? ? ???, ??? ??? ??? ??"
+msgstr "?????- \"??????? ? ?????????? ?????? ??????? ? ???, ??? ??? ??? ??"
 
 #: src/moving.c:860
 msgid "   reached its destination.\""
@@ -1708,17 +1709,17 @@
 
 #: src/moving.c:863
 msgid "Uhura- \"The previous probe is still reporting data, Sir.\""
-msgstr "?????- \"?????????? ?????? ??? ??? ???????? ???????, ???.\""
+msgstr "?????- \"?????????? ?????? ??? ??? ???????? ???????, ???.\""
 
 #: src/moving.c:870
 #, c-format
 msgid "%d probe left."
-msgstr "???????? %d ???????."
+msgstr "???????? %d ??????."
 
 #: src/moving.c:870
 #, c-format
 msgid "%d probes left."
-msgstr "???????? %d ??????."
+msgstr "???????? %d ?????."
 
 #: src/moving.c:871
 msgid "Are you sure you want to fire a probe? "
@@ -1752,7 +1753,7 @@
 #: src/moving.c:975
 #, c-format
 msgid "Starbase in %s responds--"
-msgstr "???? ?? %s ????????--"
+msgstr "???? ?? %s ????????????--"
 
 #: src/moving.c:977
 msgid " dematerializes."
@@ -1824,7 +1825,7 @@
 
 #: src/moving.c:1107 src/moving.c:1110
 msgid "Remainder of ship's complement beam down"
-msgstr "??????? ??????? ??????? ?????????????????"
+msgstr "??????? ??????? ?????????????????"
 
 #: src/moving.c:1108
 msgid "to nearest habitable planet."
@@ -1838,15 +1839,15 @@
 #: src/moving.c:1113
 #, c-format
 msgid "Entire crew of %d left to die in outer space."
-msgstr "???? ?????? ? ??????? %d ??????? ????? ? ???????? ???????."
+msgstr "???? ?????? ? ??????? %d ??????? ??????? ???????? ? ???????? ???????."
 
 #: src/moving.c:1123
 msgid "You are captured by Klingons and released to"
-msgstr "???????? ??????? ??? ?"
+msgstr "???????? ??????? ??? ? ????????"
 
 #: src/moving.c:1124
 msgid "the Federation in a prisoner-of-war exchange."
-msgstr "???????? ????? ?????????????? ? ??????????."
+msgstr "????????? ??? ?????? ??????????????."
 
 #: src/moving.c:1150
 msgid "Starfleet puts you in command of another ship,"
@@ -1890,7 +1891,7 @@
 
 #: src/planets.c:51
 msgid "Already in standard orbit."
-msgstr "? ??? ??? ?? ??????.\""
+msgstr "? ??? ??? ?? ??????."
 
 #: src/planets.c:55
 msgid "Both warp and impulse engines damaged."
@@ -1907,7 +1908,7 @@
 #: src/planets.c:69
 #, c-format
 msgid "Sulu-  \"Entered orbit at altitude %.2f kilometers.\""
-msgstr "????- \"????? ?? ?????? ?? ?????? %.2f kilometers.\""
+msgstr "????- \"????? ?? ?????? ?? ?????? %.2f ??????????.\""
 
 #: src/planets.c:80
 msgid "Short range sensors damaged."
@@ -1985,7 +1986,7 @@
 
 #: src/planets.c:143
 msgid "Kirk whips out communicator..."
-msgstr "???? ???????? ????????????..."
+msgstr "???? ??????? ????????????..."
 
 #: src/planets.c:144
 msgid "BEEP  BEEP  BEEP"
@@ -2009,7 +2010,7 @@
 
 #: src/planets.c:159
 msgid "Scotty-  \"Transporter room ready, Sir.\""
-msgstr "?????- \"??????????? ?????, ???.\""
+msgstr "??????- \"??????????? ?????, ???.\""
 
 #: src/planets.c:161
 msgid "Kirk and landing party prepare to beam down to planet surface."
@@ -2021,7 +2022,7 @@
 
 #: src/planets.c:172
 msgid "Scotty-  \"Oh my God!  I've lost them.\""
-msgstr "?????- \"? ???!  ? ?? ???????.\""
+msgstr "??????- \"? ???!  ? ?? ???????.\""
 
 #: src/planets.c:178
 msgid "Transport complete."
@@ -2029,7 +2030,7 @@
 
 #: src/planets.c:181
 msgid "The shuttle craft Galileo is here!"
-msgstr "?????? ??????? ?????!"
+msgstr "????? ?????? ???????!"
 
 #: src/planets.c:197
 msgid "Mining party not on planet."
@@ -2085,7 +2086,7 @@
 
 #: src/planets.c:250
 msgid "Engineering Officer Scott-  \"(GULP) Aye Sir."
-msgstr "???????-??????? ????- \"(?????? ??????) ??? ???."
+msgstr "???????-??????? ?????- \"(?????? ??????) ??? ???."
 
 #: src/planets.c:251
 msgid "  Mr. Spock and I will try it.\""
@@ -2101,11 +2102,11 @@
 
 #: src/planets.c:256
 msgid "Scotty-  \"Keep your fingers crossed, Sir!\""
-msgstr "?????-  \"????????? ??????, ???!\""
+msgstr "??????-  \"????????? ??????, ???!\""
 
 #: src/planets.c:259
 msgid "  \"Activating now! - - No good!  It's***"
-msgstr "  \"??? ????????! - - ?????!  ???***"
+msgstr "  \"??? ????????! - - ?????!  ??***"
 
 #: src/planets.c:261 src/planets.c:462
 msgid "***RED ALERT!  RED A*L********************************"
@@ -2133,7 +2134,7 @@
 
 #: src/planets.c:286
 msgid "Ye Faerie Queene has no shuttle craft bay to dock it at."
-msgstr "?? ????????? ???????? ??? ????????? ??? ???????? ? ????????."
+msgstr "?? ????????? ???????? ??? ?????? ??? ???????? ? ????????."
 
 #: src/planets.c:288
 msgid "Ye Faerie Queene had no shuttle craft."
@@ -2192,7 +2193,7 @@
 msgid " boards Galileo and swoops toward planet surface."
 msgstr " ??????? ? ??????? ? ???????????? ? ??????????? ???????."
 
-#: src/planets.c:350 src/planets.c:371
+#: src/planets.c:350 src/planets.c:371 src/planets.c:389
 msgid "Trip complete."
 msgstr "????? ???????."
 
@@ -2202,7 +2203,7 @@
 
 #: src/planets.c:356
 msgid "shuttle craft for the trip back to the Enterprise."
-msgstr "?????? ??? ?????? ? ???????????."
+msgstr "?????? ????? ?????? ?? ??????????."
 
 #: src/planets.c:358
 msgid "The short hop begins . . ."
@@ -2210,7 +2211,7 @@
 
 #: src/planets.c:378
 msgid "Mining party assembles in the hangar deck,"
-msgstr "?????? ?????????? ????????? ? ?????? ??????,"
+msgstr "?????? ?????????? ????????? ? ??????,"
 
 #: src/planets.c:379
 msgid "ready to board the shuttle craft \"Galileo\"."
@@ -2220,10 +2221,6 @@
 msgid "The hangar doors open; the trip begins."
 msgstr "????? ?????? ???????; ????? ???????."
 
-#: src/planets.c:389
-msgid "Trip complete"
-msgstr "????? ???????"
-
 #: src/planets.c:403
 msgid "Ye Faerie Queene has no death ray."
 msgstr "?? ????????? ???????? ??? ???? ??????."
@@ -2250,7 +2247,7 @@
 
 #: src/planets.c:418
 msgid "Spock-  \"Acknowledged.\""
-msgstr "????- \"????.\""
+msgstr "????- \"??? ?????.\""
 
 #: src/planets.c:421
 msgid "WHOOEE ... WHOOEE ... WHOOEE ... WHOOEE"
@@ -2262,11 +2259,11 @@
 
 #: src/planets.c:424
 msgid "Spock and Scotty ready the death ray and"
-msgstr "???? ? ????? ???????? ??? ?????? ?"
+msgstr "???? ? ?????? ???????? ??? ?????? ?"
 
 #: src/planets.c:425
 msgid "prepare to channel all ship's power to the device."
-msgstr "? ?????? ? ???????? ???? ??????? ??????? ?? ?????????."
+msgstr "?????? ? ?????? ???? ??????? ??????? ?? ?????????."
 
 #: src/planets.c:427
 msgid "Spock-  \"Preparations complete, sir.\""
@@ -2322,7 +2319,7 @@
 
 #: src/planets.c:477
 msgid "  Vulcans do not seem to be affected."
-msgstr "  ????????? ??????, ??????, ?? ??????????."
+msgstr "  ?????????, ??????, ?????? ?? ??????????."
 
 #: src/planets.c:479
 msgid "Kirk-  \"Raauch!  Raauch!\""
@@ -2330,7 +2327,7 @@
 
 #: src/planets.c:485
 msgid "Sulu- \"Captain!  It's   --WHAT?!?!\""
-msgstr "????- \"???????!  ???   --??????!\""
+msgstr "????- \"???????!  ??   --??????!\""
 
 #: src/planets.c:487
 msgid "Spock-  \"I believe the word is"
@@ -2362,7 +2359,7 @@
 
 #: src/planets.c:501
 msgid "Scotty-  \"There are so many tribbles down here"
-msgstr "?????-  \"??? ??????? ???? ???????? ??????"
+msgstr "??????-  \"??? ??????? ???? ???????? ??????"
 
 #: src/planets.c:502
 msgid "  in Engineering, we can't move for 'em, Captain.\""
@@ -2541,12 +2538,12 @@
 msgstr " ???????????? ??????????? ??????"
 
 #: src/reports.c:97
-msgid "An armed deep space probe is in"
-msgstr "???????????? ??????????? ?????? ? ??????? ??????? ?????? ?"
+msgid "An armed deep space probe is in "
+msgstr "???????????? ??????????? ?????? ? ??????? ??????? ?????? ? "
 
 #: src/reports.c:99
-msgid "A deep space probe is in"
-msgstr "???????????? ??????????? ?????? ?????? ?"
+msgid "A deep space probe is in "
+msgstr "???????????? ??????????? ?????? ?????? ? "
 
 #: src/reports.c:105
 msgid "Dilithium crystals aboard ship... not yet used."
@@ -2570,12 +2567,12 @@
 msgstr "??????? ?????"
 
 #: src/reports.c:166
-msgid "DEVICE            -REPAIR TIMES-"
-msgstr "??????????        -????? ???????-"
+msgid "\tDEVICE\t\t\t-REPAIR TIMES-"
+msgstr "\t??????????\t\t-????? ???????-"
 
 #: src/reports.c:167
-msgid "                IN FLIGHT   DOCKED"
-msgstr "                ? ??????    ????????????"
+msgid "\t\t\tIN FLIGHT\t\tDOCKED"
+msgstr "\t\t\t? ??????\t\t? ?????"
 
 #: src/reports.c:176
 msgid "All devices functional."
@@ -3014,15 +3011,15 @@
 
 #: src/setup.c:161
 msgid "Warp Engines"
-msgstr "??????????????????? ?????????"
+msgstr "????????? ????"
 
 #: src/setup.c:162
 msgid "Impulse Engines"
-msgstr "?????????? ?????????"
+msgstr "?????????? ????"
 
 #: src/setup.c:164
 msgid "Subspace Radio"
-msgstr "??????????????????? ?????"
+msgstr "????????? ?????"
 
 #: src/setup.c:165
 msgid "Shuttle Craft"
@@ -3034,7 +3031,7 @@
 
 #: src/setup.c:167
 msgid "Navigation System"
-msgstr "????????????? ???????"
+msgstr "???? ?????????"
 
 #: src/setup.c:168
 msgid "Transporter"
@@ -3042,7 +3039,7 @@
 
 #: src/setup.c:169
 msgid "Shield Control"
-msgstr "?????????? ???????"
+msgstr "?????? ???????"
 
 #: src/setup.c:170
 msgid "Death Ray"
@@ -3217,90 +3214,90 @@
 msgid "WARNING--Saved games produce no plaques!"
 msgstr "??????????????--??????????? ???? ?? ???? ???????!"
 
-#: src/sst.c:666
+#: src/sst.c:665
 msgid "Do you want your score recorded?"
 msgstr "?????? ???????? ???? ????? "
 
-#: src/sst.c:672
+#: src/sst.c:671
 msgid "Do you want to play again? "
 msgstr "?????? ??????? ?????? "
 
-#: src/sst.c:676
+#: src/sst.c:675
 msgid "May the Great Bird of the Galaxy roost upon your home planet."
 msgstr "? ????? ??????? ????? ????????? ??????? ?? ???? ???????."
 
-#: src/sst.c:688
+#: src/sst.c:687
 msgid "Romulan"
 msgstr "???????"
 
-#: src/sst.c:689
+#: src/sst.c:688
 msgid "Klingon"
 msgstr "???????"
 
-#: src/sst.c:690
+#: src/sst.c:689
 msgid "Commander"
 msgstr "????????"
 
-#: src/sst.c:691
+#: src/sst.c:690
 msgid "Super-commander"
 msgstr "????-???"
 
-#: src/sst.c:692
+#: src/sst.c:691
 msgid "Star"
 msgstr "??????"
 
-#: src/sst.c:693
+#: src/sst.c:692
 msgid "Planet"
 msgstr "???????"
 
-#: src/sst.c:694
+#: src/sst.c:693
 msgid "Starbase"
 msgstr "????"
 
-#: src/sst.c:695
+#: src/sst.c:694
 msgid "Black hole"
 msgstr "?????? ????"
 
-#: src/sst.c:696
+#: src/sst.c:695
 msgid "Tholian"
 msgstr "??????"
 
-#: src/sst.c:697
+#: src/sst.c:696
 msgid "Tholian web"
 msgstr "?????????? ????"
 
-#: src/sst.c:698
+#: src/sst.c:697
 msgid "Stranger"
 msgstr "????????"
 
-#: src/sst.c:699
+#: src/sst.c:698
 msgid "Inhabited World"
 msgstr "????????? ???"
 
-#: src/sst.c:710
+#: src/sst.c:709
 msgid "Quadrant "
 msgstr "???????? "
 
-#: src/sst.c:711
+#: src/sst.c:710
 msgid "Sector "
 msgstr "?????? "
 
-#: src/sst.c:721
+#: src/sst.c:720
 msgid " at "
 msgstr " ? "
 
-#: src/sst.c:730
+#: src/sst.c:729
 msgid "Enterprise"
 msgstr "??????????"
 
-#: src/sst.c:731
+#: src/sst.c:730
 msgid "Faerie Queene"
 msgstr "????????? ????????"
 
-#: src/sst.c:840
+#: src/sst.c:839
 msgid "Please answer with \"y\" or \"n\": "
 msgstr "?????????? ????????? ?? (\"y\") ??? ??? (\"n\"): "
 
-#: src/sst.c:849
+#: src/sst.c:848
 msgid "Beg your pardon, Captain?"
 msgstr "????? ????????, ????????"

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-25 16:53:11 UTC (rev 632)
+++ trunk/src/battle.c	2006-09-26 17:27:51 UTC (rev 633)
@@ -812,7 +812,6 @@
     double targ[4][3], course[4];
     double r, dummy;
     int key, n, i;
-    bool osuabor;
 
     game.ididit = false;
 
@@ -905,8 +904,7 @@
     }
     game.ididit = true;
     /* Loop for moving <n> torpedoes */
-    osuabor = false;
-    for (i = 1; i <= n && !osuabor; i++) {
+    for (i = 1; i <= n; i++) {
 	if (game.condition != docked) game.torps--;
 	r = (Rand()+Rand())*0.5 -0.5;
 	if (fabs(r) >= 0.47) {
@@ -919,12 +917,11 @@
 	    skip(1);
 	    if (i < n)
 		prout(_("  Remainder of burst aborted."));
-	    osuabor = true;
 	    if (Rand() <= 0.2) {
 		prout(_("***Photon tubes damaged by misfire."));
 		game.damage[DPHOTON] = game.damfac*(1.0+2.0*Rand());
-		break;
 	    }
+	    break;
 	}
 	if (game.shldup || game.condition == docked) 
 	    r *= 1.0 + 0.0001*game.shield;

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-09-25 16:53:11 UTC (rev 632)
+++ trunk/src/io.c	2006-09-26 17:27:51 UTC (rev 633)
@@ -72,7 +72,7 @@
 	srscan_window     = newwin(12, 25, 0,       0);
 	report_window     = newwin(11, 0,  1,       25);
 	status_window     = newwin(10, 0,  1,       39);
-	lrscan_window     = newwin(10, 0,  0,       64); 
+	lrscan_window     = newwin(5,  0,  0,       64); 
 	message_window    = newwin(0,  0,  12,      0);
 	prompt_window     = newwin(1,  0,  LINES-2, 0); 
 	scrollok(message_window, TRUE);

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-25 16:53:11 UTC (rev 632)
+++ trunk/src/planets.c	2006-09-26 17:27:51 UTC (rev 633)
@@ -23,7 +23,7 @@
     skip(1);
     for (i = 0; i < game.inplan; i++) {
 	if ((game.state.plnets[i].known != unknown
-	    && game.state.plnets[i].crystals != absent)
+	    && game.state.plnets[i].inhabited == UNINHABITED)
 	    || (idebug && game.state.plnets[i].w.x !=0)
 	    ) {
 	    iknow = true;
@@ -386,7 +386,7 @@
 	game.state.plnets[game.iplnet].known = shuttle_down;
 	game.landed = true;
 	game.icraft = false;
-	prout(_("Trip complete"));
+	prout(_("Trip complete."));
 	return;
     }
 }

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-25 16:53:11 UTC (rev 632)
+++ trunk/src/reports.c	2006-09-26 17:27:51 UTC (rev 633)
@@ -94,9 +94,9 @@
     if ((!damaged(DRADIO) || game.condition == docked)
 		&& is_scheduled(FDSPROB)) {
 	if (game.isarmed) 
-	    proutn(_("An armed deep space probe is in"));
+	    proutn(_("An armed deep space probe is in "));
 	else
-	    proutn(_("A deep space probe is in"));
+	    proutn(_("A deep space probe is in "));
 	proutn(cramlc(quadrant, game.probec));
 	prout(".");
     }
@@ -163,11 +163,11 @@
     for (i = 0; i < NDEVICES; i++) {
 	if (damaged(i)) {
 	    if (!jdam) {
-		prout(_("DEVICE            -REPAIR TIMES-"));
-		prout(_("                IN FLIGHT   DOCKED"));
+		prout(_("\tDEVICE\t\t\t-REPAIR TIMES-"));
+		prout(_("\t\t\tIN FLIGHT\t\tDOCKED"));
 		jdam = true;
 	    }
-	    prout("  %16s %8.2f  %8.2f", 
+	    prout("  %-26s\t%8.2f\t\t%8.2f", 
 		  device[i],
 		  game.damage[i]+0.05,
 		  game.docfac*game.damage[i]+0.005);

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-25 16:53:11 UTC (rev 632)
+++ trunk/src/sst.h	2006-09-26 17:27:51 UTC (rev 633)
@@ -46,7 +46,7 @@
 #define same(c1, c2)		((c1.x == c2.x) && (c1.y == c2.y))
 #define distance(c1, c2)	sqrt(square(c1.x - c2.x) + square(c1.y - c2.y))
 #define invalidate(w)		w.x = w.y = 0
-#define is_valid(w)		(w.x == 0 || w.y == 0)
+#define is_valid(w)		(w.x != 0 || w.y != 0)
 
 typedef struct {
     coord w;



From stsp at mail.berlios.de  Tue Sep 26 19:46:58 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Tue, 26 Sep 2006 19:46:58 +0200
Subject: [Sst-commit-watch] r634 - trunk/src
Message-ID: <200609261746.k8QHkwXA001249@sheep.berlios.de>

Author: stsp
Date: 2006-09-26 19:46:57 +0200 (Tue, 26 Sep 2006)
New Revision: 634

Modified:
   trunk/src/sst.h
Log:
better fix for is_valid()

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-26 17:27:51 UTC (rev 633)
+++ trunk/src/sst.h	2006-09-26 17:46:57 UTC (rev 634)
@@ -46,7 +46,7 @@
 #define same(c1, c2)		((c1.x == c2.x) && (c1.y == c2.y))
 #define distance(c1, c2)	sqrt(square(c1.x - c2.x) + square(c1.y - c2.y))
 #define invalidate(w)		w.x = w.y = 0
-#define is_valid(w)		(w.x != 0 || w.y != 0)
+#define is_valid(w)		(w.x != 0 && w.y != 0)
 
 typedef struct {
     coord w;



From stsp at mail.berlios.de  Wed Sep 27 18:27:50 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Wed, 27 Sep 2006 18:27:50 +0200
Subject: [Sst-commit-watch] r635 - in trunk: po src
Message-ID: <200609271627.k8RGRoxK008171@sheep.berlios.de>

Author: stsp
Date: 2006-09-27 18:27:49 +0200 (Wed, 27 Sep 2006)
New Revision: 635

Modified:
   trunk/po/ru.po
   trunk/src/battle.c
Log:
bugfix in fry() and translation

Modified: trunk/po/ru.po
===================================================================
--- trunk/po/ru.po	2006-09-26 17:46:57 UTC (rev 634)
+++ trunk/po/ru.po	2006-09-27 16:27:49 UTC (rev 635)
@@ -2658,7 +2658,7 @@
 
 #: src/reports.c:309
 msgid "Energy"
-msgstr ""
+msgstr "???????"
 
 #: src/reports.c:311
 msgid " (have crystals)"

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-26 17:46:57 UTC (rev 634)
+++ trunk/src/battle.c	2006-09-27 16:27:49 UTC (rev 635)
@@ -520,8 +520,8 @@
 	extradm = (hit*game.damfac)/(ncrit*(75.0+25.0*Rand()));
 	game.damage[j] += extradm;
 	if (loop1 > 0) {
-	    for (loop2=2; loop2<=loop1 && j != cdam[loop2-1]; loop2++) ;
-	    if (loop2<=loop1) continue;
+	    for (loop2 = 0; loop2 < loop1 && j != cdam[loop2]; loop2++) ;
+	    if (loop2 < loop1) continue;
 	    ktr += 1;
 	    if (ktr==3) skip(1);
 	    proutn(_(" and "));



From esr at mail.berlios.de  Wed Sep 27 23:46:36 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 27 Sep 2006 23:46:36 +0200
Subject: [Sst-commit-watch] r636 - trunk/src
Message-ID: <200609272146.k8RLkat2010312@sheep.berlios.de>

Author: esr
Date: 2006-09-27 23:46:35 +0200 (Wed, 27 Sep 2006)
New Revision: 636

Modified:
   trunk/src/ai.c
   trunk/src/finish.c
   trunk/src/sst.py
Log:
Parallel cleanups in the C and scratch Python code.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-27 16:27:49 UTC (rev 635)
+++ trunk/src/ai.c	2006-09-27 21:46:35 UTC (rev 636)
@@ -10,8 +10,8 @@
     iq.y = game.quadrant.y+(look.y+(QUADSIZE-1))/QUADSIZE - 1;
     if (!VALID_QUADRANT(iq.x,iq.y) ||
 	game.state.galaxy[iq.x][iq.y].supernova ||
-	game.state.galaxy[iq.x][iq.y].klingons > 8)
-	return false; /* no can do -- neg energy, supernovae, or >8 Klingons */
+	game.state.galaxy[iq.x][iq.y].klingons > MAXKLQUAD-1)
+	return false; /* no can do -- neg energy, supernovae, or >MAXKLQUAD-1 Klingons */
     if (ienm == IHR) return false; /* Romulans cannot escape! */
     if (!irun) {
 	/* avoid intruding on another commander's territory */
@@ -155,7 +155,7 @@
 		motion -= game.skill*(2.0-square(Rand()));
 	}
 	if (idebug)
-	    proutn("=== MOTION = %1.2f, FORCES = %1.2f, ", motion, forces);
+	    proutn("=== MOTION = %d, FORCES = %1.2f, ", motion, forces);
 	/* don't move if no motion */
 	if (motion==0) return;
 	/* Limit motion according to skill */
@@ -296,7 +296,7 @@
 
     if (same(iq, game.quadrant) || !VALID_QUADRANT(iq.x, iq.y) ||
 	game.state.galaxy[iq.x][iq.y].supernova ||
-	game.state.galaxy[iq.x][iq.y].klingons > 8) 
+	game.state.galaxy[iq.x][iq.y].klingons > MAXKLQUAD-1) 
 	return 1;
     if (flag) {
 	/* Avoid quadrants with bases if we want to avoid Enterprise */
@@ -413,7 +413,7 @@
 	    ibq = game.state.baseq[i];
 	    if (same(ibq, game.quadrant) || same(ibq, game.battle) ||
 		game.state.galaxy[ibq.x][ibq.y].supernova ||
-		game.state.galaxy[ibq.x][ibq.y].klingons > 8) 
+		game.state.galaxy[ibq.x][ibq.y].klingons > MAXKLQUAD-1) 
 		continue;
 	    /* if there is a commander, an no other base is appropriate,
 	       we will take the one with the commander */

Modified: trunk/src/finish.c
===================================================================
--- trunk/src/finish.c	2006-09-27 16:27:49 UTC (rev 635)
+++ trunk/src/finish.c	2006-09-27 21:46:35 UTC (rev 636)
@@ -219,7 +219,7 @@
 	break;
     case FMATERIALIZE:
 	prout(_("Starbase was unable to re-materialize your starship."));
-	prout(_("Sic transit gloria muntdi"));
+	prout(_("Sic transit gloria mundi"));
 	break;
     case FPHASER:
 	proutn(_("The "));

Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-09-27 16:27:49 UTC (rev 635)
+++ trunk/src/sst.py	2006-09-27 21:46:35 UTC (rev 636)
@@ -1,5 +1,15 @@
 """
 sst.py =-- Super Star Trek in Python
+
+Control flow of this translation is pretty much identical to the C version
+(and thus like the ancestral FORTRAN) but the data structures are
+radically different -- the Python code makes heavy use of objects.
+
+Note that the game.quad, game.snap.galaxy and game.snap.chart members
+are not actually arrays but dictioaries indixed by coord tuples.  Be setting
+the hash of a coord exual to the hash of a literal tuple containing its
+coordinate data, we ensure these can be indexed both ways.
+
 """
 import math
 
@@ -15,6 +25,11 @@
 MAXKLQUAD	= 9
 FOREVER 	= 1e30
 
+# These macros hide the difference between 0-origin and 1-origin addressing.
+# They're a step towards de-FORTRANizing the code.
+def VALID_QUADRANT(x,y): ((x)>=1 and (x)<=GALSIZE and (y)>=1 and (y)<=GALSIZE)
+def VALID_SECTOR(x, y):	((x)>=1 and (x)<=QUADSIZE and (y)>=1 and (y)<=QUADSIZE)
+
 # These types have not been dealt with yet 
 IHQUEST = '?',
 IHWEB = '#',
@@ -49,11 +64,17 @@
     "A feature in the current quadrant (ship, star, black hole, etc)." 
     def __init__(self):
         self.type = None	# name of feature type
-        self.location = None	# location
+        self.sector = None	# sector location
     def distance(self):
-        return self.location.distance(game.sector)
+        return self.sector.distance(game.sector)
     def __str__(self):
         return self.name[0]
+    def sectormove(self, dest):
+        "Move this feature within the current quadrant." 
+        if self.sector:
+            game.quad[self.sector] = None
+        game.quad[dest] = self
+        self.sector = dest
 
 empty = None	# Value of empty space in game.quad
 
@@ -73,12 +94,6 @@
             game.remkl -= 1
         elif self.type == "Romulan":
             game.romrem -= 1
-    def sectormove(self, dest):
-        "Move this ship within the current quadrant." 
-        if self.location:
-            game.quad[self.location] = None
-        game.quad[dest] = self
-        self.location = dest
 
 class planet(feature):
     "A planet.  May be inhabited or not, may hold dilithium crystals or not."
@@ -116,13 +131,17 @@
         return '*'
 
 class starbase(feature):
-    "Starbases also have no features."
-    def __init(self):
+    "Starbases also have no features, just a location."
+    def __init(self, quadrant):
         feature.__init__(self)
+        self.quadrant = quadrant
+        game.state.bases.append(self)
     def __del__(self):
-        game.state.bases.remove(self.location)
+        game.state.bases.remove(self)
     def __str__(self):
         return 'B'
+    def __del__(self):
+        feature.__del__(self)
 
 class quadrant:
     def __init__(self):
@@ -158,7 +177,6 @@
 	self.remkl = None	# remaining klingons
 	self.remcom = None	# remaining commanders
 	self.nscrem = None	# remaining super commanders
-	self.rembase = None	# remaining bases
 	self.starkl = None	# destroyed stars
 	self.basekl = None	# destroyed bases
 	self.nromrem = None	# Romulans remaining
@@ -291,8 +309,8 @@
     iq.y = game.quadrant.y+(look.y+(QUADSIZE-1))/QUADSIZE - 1
     if not valid_quadrant(iq) or \
 	game.state.galaxy[iq].supernova or \
-        game.state.galaxy[iq].klingons > 8:
-	return False;	# no can do -- neg energy, supernovae, or >8 Klingons
+        game.state.galaxy[iq].klingons > MAXKLQUAD-1:
+	return False;	# no can do -- neg energy, supernovae, or >MAXKLQUAD-1 Klingons
     if ship.type == "Romulan":
         return False	# Romulans cannot escape
     if not irun:
@@ -530,7 +548,7 @@
     global ipage
     if game.state.kscmdr == game.quadrant or \
 	game.state.galaxy[iq].supernova or \
-        game.state.galaxy[iq].klingons > 8: 
+        game.state.galaxy[iq].klingons > MAXKLQUAD-1: 
 	return True
     if avoid:
 	# Avoid quadrants with bases if we want to avoid Enterprise
@@ -595,7 +613,7 @@
 	# without too many Klingons, and not already under attack.
         nearest = filter(game.starbases,
                          lambda x: game.state.galaxy[x].supernova \
-                         and game.state.galaxy[x].klingons <= 8)
+                         and game.state.galaxy[x].klingons <= MAXKLQUAD-1)
         if game.quadrant in nearest:
             nearest.remove(game.quadrant)
         if game.battle in nearest:
@@ -636,7 +654,7 @@
 		iq.x = game.state.kscmdr.x
 		movescom(iq, passive)
     # check for a base
-    if game.state.rembase == 0:
+    if len(game.state.bases) == 0:
 	unschedule("FSCMOVE")
     else:
         for ibq in game.bases:



From esr at mail.berlios.de  Thu Sep 28 10:01:47 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 28 Sep 2006 10:01:47 +0200
Subject: [Sst-commit-watch] r637 - trunk/src
Message-ID: <200609280801.k8S81laO014314@sheep.berlios.de>

Author: esr
Date: 2006-09-28 10:01:45 +0200 (Thu, 28 Sep 2006)
New Revision: 637

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/finish.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.py
   trunk/src/sstlinux.c
Log:
Clean up nasty FORTRAN-style if statements with the body on the
same line as the guard.  They're bad style and make the code hard to 
read, and I got fed up,


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-27 21:46:35 UTC (rev 636)
+++ trunk/src/ai.c	2006-09-28 08:01:45 UTC (rev 637)
@@ -17,12 +17,15 @@
 	/* avoid intruding on another commander's territory */
 	if (ienm == IHC) {
 	    for_commanders(n)
-		if (same(game.state.kcmdr[n],iq)) return false;
+		if (same(game.state.kcmdr[n],iq))
+		    return false;
 	    /* refuse to leave if currently attacking starbase */
-	    if (same(game.battle, game.quadrant)) return false;
+	    if (same(game.battle, game.quadrant))
+		return false;
 	}
 	/* don't leave if over 1000 units of energy */
-	if (game.kpower[loccom] > 1000.) return false;
+	if (game.kpower[loccom] > 1000.0)
+	    return false;
     }
     /* print escape message and move out of quadrant.
        We know this if either short or long range sensors are working */
@@ -40,7 +43,8 @@
     game.kdist[loccom] = game.kdist[game.nenhere];
     game.klhere--;
     game.nenhere--;
-    if (game.condition != docked) newcnd();
+    if (game.condition != docked)
+	newcnd();
     /* Handle global matters related to escape */
     game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons--;
     game.state.galaxy[iq.x][iq.y].klingons++;
@@ -157,9 +161,11 @@
 	if (idebug)
 	    proutn("=== MOTION = %d, FORCES = %1.2f, ", motion, forces);
 	/* don't move if no motion */
-	if (motion==0) return;
+	if (motion==0)
+	    return;
 	/* Limit motion according to skill */
-	if (abs(motion) > game.skill) motion = (motion < 0) ? -game.skill : game.skill;
+	if (abs(motion) > game.skill)
+	    motion = (motion < 0) ? -game.skill : game.skill;
     }
     /* calculate preferred number of steps */
     nsteps = motion < 0 ? -motion : motion;
@@ -172,10 +178,14 @@
     /* Compute preferred values of delta X and Y */
     mx = game.sector.x - com.x;
     my = game.sector.y - com.y;
-    if (2.0 * abs(mx) < abs(my)) mx = 0;
-    if (2.0 * abs(my) < abs(game.sector.x-com.x)) my = 0;
-    if (mx != 0) mx = mx*motion < 0 ? -1 : 1;
-    if (my != 0) my = my*motion < 0 ? -1 : 1;
+    if (2.0 * abs(mx) < abs(my))
+	mx = 0;
+    if (2.0 * abs(my) < abs(game.sector.x-com.x))
+	my = 0;
+    if (mx != 0)
+	mx = mx*motion < 0 ? -1 : 1;
+    if (my != 0)
+	my = my*motion < 0 ? -1 : 1;
     next = com;
     /* main move loop */
     for (ll = 0; ll < nsteps; ll++) {
@@ -192,14 +202,16 @@
 	    if (look.x < 1 || look.x > QUADSIZE) {
 		if (motion < 0 && tryexit(look, ienm, loccom, irun))
 		    return;
-		if (krawlx == mx || my == 0) break;
+		if (krawlx == mx || my == 0)
+		    break;
 		look.x = next.x + krawlx;
 		krawlx = -krawlx;
 	    }
 	    else if (look.y < 1 || look.y > QUADSIZE) {
 		if (motion < 0 && tryexit(look, ienm, loccom, irun))
 		    return;
-		if (krawly == my || mx == 0) break;
+		if (krawly == my || mx == 0)
+		    break;
 		look.y = next.y + krawly;
 		krawly = -krawly;
 	    }
@@ -218,16 +230,19 @@
 		    look.y = next.y + krawly;
 		    krawly = -krawly;
 		}
-		else break; /* we have failed */
+		else
+		    break; /* we have failed */
 	    }
-	    else success = true;
+	    else
+		success = true;
 	}
 	if (success) {
 	    next = look;
 	    if (idebug)
 		proutn(cramlc(neither, next));
 	}
-	else break; /* done early */
+	else
+	    break; /* done early */
 	
     }
     if (idebug)
@@ -243,8 +258,10 @@
 	    proutn("***");
 	    cramen(ienm);
 	    proutn(_(" from %s"), cramlc(2, com));
-	    if (game.kdist[loccom] < dist1) proutn(_(" advances to "));
-	    else proutn(_(" retreats to "));
+	    if (game.kdist[loccom] < dist1)
+		proutn(_(" advances to "));
+	    else
+		proutn(_(" retreats to "));
 	    prout(cramlc(sector, next));
 	}
     }
@@ -256,7 +273,8 @@
     coord w; 
     int i;
 
-    if (idebug) prout("== MOVCOM");
+    if (idebug)
+	prout("== MOVCOM");
 
     /* Figure out which Klingon is the commander (or Supercommander)
        and do move */
@@ -304,7 +322,8 @@
 	    if (same(game.state.baseq[i], iq)) 
 		return true;
     }
-    if (game.justin && !game.iscate) return true;
+    if (game.justin && !game.iscate)
+	return true;
     /* do the move */
     game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].klingons--;
     game.state.kscmdr = iq;
@@ -317,7 +336,8 @@
 	game.ientesc = false;
 	unschedule(FSCDBAS);
 	for_local_enemies(i) 
-	    if (game.quad[game.ks[i].x][game.ks[i].y] == IHS) break;
+	    if (game.quad[game.ks[i].x][game.ks[i].y] == IHS)
+		break;
 	game.quad[game.ks[i].x][game.ks[i].y] = IHDOT;
 	game.ks[i] = game.ks[game.nenhere];
 	game.kdist[i] = game.kdist[game.nenhere];
@@ -325,7 +345,8 @@
 	game.kpower[i] = game.kpower[game.nenhere];
 	game.klhere--;
 	game.nenhere--;
-	if (game.condition!=docked) newcnd();
+	if (game.condition!=docked)
+	    newcnd();
 	sortkl();
     }
     /* check for a helpful planet */
@@ -336,7 +357,8 @@
 	    DESTROY(&game.state.plnets[i]);
 	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = NOPLANET;
 	    if (!damaged(DRADIO) || game.condition == docked) {
-		if (!*ipage) pause_game(true);
+		if (!*ipage)
+		    pause_game(true);
 		*ipage = true;
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"));
 		proutn(_("   a planet in "));
@@ -359,7 +381,8 @@
     double bdist[BASEMAX+1];
     bool flag;
 
-    if (idebug) prout("== SCOM");
+    if (idebug)
+	prout("== SCOM");
 
     /* Decide on being active or passive */
     flag = ((NKILLC+NKILLK)/(game.state.date+0.01-game.indate) < 0.1*game.skill*(game.skill+1.0) ||
@@ -437,10 +460,14 @@
 	ideltay = ibq.y - game.state.kscmdr.y;
     }
     /* Maximum movement is 1 quadrant in either or both axis */
-    if (ideltax > 1) ideltax = 1;
-    if (ideltax < -1) ideltax = -1;
-    if (ideltay > 1) ideltay = 1;
-    if (ideltay < -1) ideltay = -1;
+    if (ideltax > 1)
+	ideltax = 1;
+    if (ideltax < -1)
+	ideltax = -1;
+    if (ideltay > 1)
+	ideltay = 1;
+    if (ideltay < -1)
+	ideltay = -1;
 
     /* try moving in both x and y directions */
     iq.x = game.state.kscmdr.x + ideltax;
@@ -491,7 +518,8 @@
 	    if (damaged(DRADIO) && game.condition != docked)
 		return; /* no warning */
 	    game.iseenit = true;
-	    if (!*ipage)  pause_game(true);
+	    if (!*ipage)
+		pause_game(true);
 	    *ipage = true;
 	    proutn(_("Lt. Uhura-  \"Captain, the starbase in "));
 	    proutn(cramlc(quadrant, game.state.kscmdr));
@@ -499,9 +527,11 @@
 	    prout(_("   reports that it is under attack from the Klingon Super-commander."));
 	    proutn(_("   It can survive until stardate %d.\""),
 		   (int)scheduled(FSCDBAS));
-	    if (!game.resting) return;
+	    if (!game.resting)
+		return;
 	    prout(_("Mr. Spock-  \"Captain, shall we cancel the rest period?\""));
-	    if (ja() == false) return;
+	    if (ja() == false)
+		return;
 	    game.resting = false;
 	    game.optime = 0.0; /* actually finished */
 	    return;
@@ -514,7 +544,8 @@
 	 (damaged(DRADIO) && game.condition != docked) ||
 	 !game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].charted))
 	return;
-    if (!*ipage) pause_game(true);
+    if (!*ipage)
+	pause_game(true);
     *ipage = true;
     prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"));
     proutn(_("   the Super-commander is in "));
@@ -528,7 +559,8 @@
 {
     int idx, idy, im, i;
     /* Move the Tholian */
-    if (!game.ithere || game.justin) return;
+    if (!game.ithere || game.justin)
+	return;
 
     if (game.tholian.x == 1 && game.tholian.y == 1) {
 	idx = 1; idy = QUADSIZE;
@@ -549,7 +581,8 @@
     }
 
     /* Do nothing if we are blocked */
-    if (game.quad[idx][idy]!= IHDOT && game.quad[idx][idy]!= IHWEB) return;
+    if (game.quad[idx][idy]!= IHDOT && game.quad[idx][idy]!= IHWEB)
+	return;
     game.quad[game.tholian.x][game.tholian.y] = IHWEB;
 
     if (game.tholian.x != idx) {
@@ -557,7 +590,8 @@
 	im = fabs((double)idx - game.tholian.x)/((double)idx - game.tholian.x);
 	while (game.tholian.x != idx) {
 	    game.tholian.x += im;
-	    if (game.quad[game.tholian.x][game.tholian.y]==IHDOT) game.quad[game.tholian.x][game.tholian.y] = IHWEB;
+	    if (game.quad[game.tholian.x][game.tholian.y]==IHDOT)
+		game.quad[game.tholian.x][game.tholian.y] = IHWEB;
 	}
     }
     else if (game.tholian.y != idy) {
@@ -565,7 +599,8 @@
 	im = fabs((double)idy - game.tholian.y)/((double)idy - game.tholian.y);
 	while (game.tholian.y != idy) {
 	    game.tholian.y += im;
-	    if (game.quad[game.tholian.x][game.tholian.y]==IHDOT) game.quad[game.tholian.x][game.tholian.y] = IHWEB;
+	    if (game.quad[game.tholian.x][game.tholian.y]==IHDOT)
+		game.quad[game.tholian.x][game.tholian.y] = IHWEB;
 	}
     }
     game.quad[game.tholian.x][game.tholian.y] = IHT;
@@ -573,10 +608,14 @@
 
     /* check to see if all holes plugged */
     for_sectors(i) {
-	if (game.quad[1][i]!=IHWEB && game.quad[1][i]!=IHT) return;
-	if (game.quad[QUADSIZE][i]!=IHWEB && game.quad[QUADSIZE][i]!=IHT) return;
-	if (game.quad[i][1]!=IHWEB && game.quad[i][1]!=IHT) return;
-	if (game.quad[i][QUADSIZE]!=IHWEB && game.quad[i][QUADSIZE]!=IHT) return;
+	if (game.quad[1][i]!=IHWEB && game.quad[1][i]!=IHT)
+	    return;
+	if (game.quad[QUADSIZE][i]!=IHWEB && game.quad[QUADSIZE][i]!=IHT)
+	    return;
+	if (game.quad[i][1]!=IHWEB && game.quad[i][1]!=IHT)
+	    return;
+	if (game.quad[i][QUADSIZE]!=IHWEB && game.quad[i][QUADSIZE]!=IHT)
+	    return;
     }
     /* All plugged up -- Tholian splits */
     game.quad[game.tholian.x][game.tholian.y]=IHWEB;

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-27 21:46:35 UTC (rev 636)
+++ trunk/src/battle.c	2006-09-28 08:01:45 UTC (rev 637)
@@ -39,7 +39,8 @@
 	    }
 	    else if (game.shldup) {
 		proutn(_("Shields are up. Do you want them down? "));
-		if (ja() == true) action = SHDN;
+		if (ja() == true)
+		    action = SHDN;
 		else {
 		    chew();
 		    return;
@@ -47,7 +48,8 @@
 	    }
 	    else {
 		proutn(_("Shields are down. Do you want them up? "));
-		if (ja() == true) action = SHUP;
+		if (ja() == true)
+		    action = SHUP;
 		else {
 		    chew();
 		    return;
@@ -63,7 +65,8 @@
 	}
 	game.shldup = true;
 	game.shldchg = true;
-	if (game.condition != docked) game.energy -= 50.0;
+	if (game.condition != docked)
+	    game.energy -= 50.0;
 	prout(_("Shields raised."));
 	if (game.energy <= 0) {
 	    skip(1);
@@ -89,7 +92,8 @@
 	    proutn(_("Energy to transfer to shields- "));
 	}
 	chew();
-	if (aaitem==0) return;
+	if (aaitem==0)
+	    return;
 	if (aaitem > game.energy) {
 	    prout(_("Insufficient ship energy."));
 	    return;
@@ -208,7 +212,8 @@
     }
     proutn(ibumpd ? _(" rammed by ") : _(" rams "));
     crmena(false, ienm, sector, w);
-    if (ibumpd) proutn(_(" (original position)"));
+    if (ibumpd)
+	proutn(_(" (original position)"));
     skip(1);
     deadkl(w, ienm, game.sector);
     proutn("***");
@@ -238,7 +243,8 @@
 	pause_game(true);
 	dreprt();
     }
-    else finish(FWON);
+    else
+	finish(FWON);
     return;
 }
 
@@ -257,7 +263,8 @@
 
     w.x = w.y = jw.x = jw.y = 0;
     bigger = fabs(deltax);
-    if (fabs(deltay) > bigger) bigger = fabs(deltay);
+    if (fabs(deltay) > bigger)
+	bigger = fabs(deltay);
     deltax /= bigger;
     deltay /= bigger;
     if (!damaged(DSRSENS) || game.condition==docked) 
@@ -270,10 +277,12 @@
 	w.x = x + 0.5;
 	y += deltay;
 	w.y = y + 0.5;
-	if (!VALID_SECTOR(w.x, w.y)) break;
+	if (!VALID_SECTOR(w.x, w.y))
+	    break;
 	iquad=game.quad[w.x][w.y];
 	tracktorpedo(w, l, i, n, iquad);
-	if (iquad==IHDOT) continue;
+	if (iquad==IHDOT)
+	    continue;
 	/* hit something */
 	setwnd(message_window);
 	if (damaged(DSRSENS) && !game.condition==docked)
@@ -294,12 +303,14 @@
 		return; /* Cheat if on a planet */
 	    ang = angle + 2.5*(Rand()-0.5);
 	    temp = fabs(sin(ang));
-	    if (fabs(cos(ang)) > temp) temp = fabs(cos(ang));
+	    if (fabs(cos(ang)) > temp)
+		temp = fabs(cos(ang));
 	    xx = -sin(ang)/temp;
 	    yy = cos(ang)/temp;
 	    jw.x=w.x+xx+0.5;
 	    jw.y=w.y+yy+0.5;
-	    if (!VALID_SECTOR(jw.x, jw.y)) return;
+	    if (!VALID_SECTOR(jw.x, jw.y))
+		return;
 	    if (game.quad[jw.x][jw.y]==IHBLANK) {
 		finish(FHOLE);
 		return;
@@ -331,7 +342,8 @@
 	    h1 = 700.0 + 100.0*Rand() -
 		1000.0 * distance(w, in) * fabs(sin(bullseye-angle));
 	    h1 = fabs(h1);
-	    if (kp < h1) h1 = kp;
+	    if (kp < h1)
+		h1 = kp;
 	    game.kpower[ll] -= (game.kpower[ll]<0 ? -h1 : h1);
 	    if (game.kpower[ll] == 0) {
 		deadkl(w, iquad, w);
@@ -341,7 +353,8 @@
 	    /* If enemy damaged but not destroyed, try to displace */
 	    ang = angle + 2.5*(Rand()-0.5);
 	    temp = fabs(sin(ang));
-	    if (fabs(cos(ang)) > temp) temp = fabs(cos(ang));
+	    if (fabs(cos(ang)) > temp)
+		temp = fabs(cos(ang));
 	    xx = -sin(ang)/temp;
 	    yy = cos(ang)/temp;
 	    jw.x=w.x+xx+0.5;
@@ -505,7 +518,8 @@
     int ktr=1, loop1, loop2, j, cdam[NDEVICES];
 
     /* a critical hit occured */
-    if (hit < (275.0-25.0*game.skill)*(1.0+0.5*Rand())) return;
+    if (hit < (275.0-25.0*game.skill)*(1.0+0.5*Rand()))
+	return;
 
     ncrit = 1.0 + hit/(500.0+100.0*Rand());
     proutn(_("***CRITICAL HIT--"));
@@ -521,7 +535,8 @@
 	game.damage[j] += extradm;
 	if (loop1 > 0) {
 	    for (loop2 = 0; loop2 < loop1 && j != cdam[loop2]; loop2++) ;
-	    if (loop2 < loop1) continue;
+	    if (loop2 < loop1)
+		continue;
 	    ktr += 1;
 	    if (ktr==3) skip(1);
 	    proutn(_(" and "));
@@ -572,7 +587,8 @@
 
     /* set up partial hits if attack happens during shield status change */
     pfac = 1.0/game.inshld;
-    if (game.shldchg) chgfac = 0.25+0.5*Rand();
+    if (game.shldchg)
+	chgfac = 0.25+0.5*Rand();
 
     skip(1);
 
@@ -585,11 +601,14 @@
 	/* compute hit strength and diminish shield power */
 	r = Rand();
 	/* Increase chance of photon torpedos if docked or enemy energy low */
-	if (game.condition == docked) r *= 0.25;
-	if (game.kpower[loop] < 500) r *= 0.25; 
+	if (game.condition == docked)
+	    r *= 0.25;
+	if (game.kpower[loop] < 500)
+	    r *= 0.25; 
 	jay = game.ks[loop];
 	iquad = game.quad[jay.x][jay.y];
-	if (iquad==IHT || (iquad==IHQUEST && !iqengry)) continue;
+	if (iquad==IHT || (iquad==IHQUEST && !iqengry))
+	    continue;
 	/* different enemies have different probabilities of throwing a torp */
 	usephasers = !torps_ok || \
 	    (iquad == IHK && r > 0.0005) || 
@@ -621,16 +640,19 @@
 		finish(FWON); /* Klingons did themselves in! */
 	    if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova || game.alldone) 
 		return; /* Supernova or finished */
-	    if (hit == 0) continue;
+	    if (hit == 0)
+		continue;
 	}
 	/* incoming phaser or torpedo, shields may dissipate it */
 	if (game.shldup || game.shldchg || game.condition==docked) {
 	    /* shields will take hits */
 	    double absorb, hitsh, propor = pfac*game.shield*(game.condition==docked ? 2.1 : 1.0);
-	    if (propor < 0.1) propor = 0.1;
+	    if (propor < 0.1)
+		propor = 0.1;
 	    hitsh = propor*chgfac*hit+1.0;
 	    absorb = 0.8*hitsh;
-	    if (absorb > game.shield) absorb = game.shield;
+	    if (absorb > game.shield)
+		absorb = game.shield;
 	    game.shield -= absorb;
 	    hit -= hitsh;
 	    /* taking a hit blasts us out of a starbase dock */
@@ -653,7 +675,8 @@
 	}
 	skip(1);
 	/* Decide if hit is critical */
-	if (hit > hitmax) hitmax = hit;
+	if (hit > hitmax)
+	    hitmax = hit;
 	hittot += hit;
 	fry(hit);
 	game.energy -= hit;
@@ -665,7 +688,8 @@
     }
     if (!attempt && game.condition == docked)
 	prout(_("***Enemies decide against attacking your ship."));
-    if (!atackd) return;
+    if (!atackd)
+	return;
     percent = 100.0*pfac*game.shield+0.5;
     if (!ihurt) {
 	/* Shields fully protect ship */
@@ -675,9 +699,12 @@
 	/* Print message if starship suffered hit(s) */
 	skip(1);
 	proutn(_("Energy left %2d    shields "), (int)game.energy);
-	if (game.shldup) proutn(_("up "));
-	else if (!damaged(DSHIELD)) proutn(_("down "));
-	else proutn(_("damaged, "));
+	if (game.shldup)
+	    proutn(_("up "));
+	else if (!damaged(DSHIELD))
+	    proutn(_("down "));
+	else
+	    proutn(_("damaged, "));
     }
     prout(_("%d%%,   torpedoes left %d"), percent, game.torps);
     /* Check if anyone was hurt */
@@ -759,7 +786,8 @@
     /* For each kind of enemy, finish message to player */
     prout(_(" destroyed."));
     game.quad[w.x][w.y] = IHDOT;
-    if (KLINGREM==0) return;
+    if (KLINGREM==0)
+	return;
 
     game.state.remtime = game.state.remres/(game.state.remkl + 4*game.state.remcom);
 
@@ -767,7 +795,8 @@
     if (is_scheduled(FCDBAS) && same(game.battle, game.quadrant) && type==IHC)
 	unschedule(FCDBAS);
     for_local_enemies(i)
-	if (same(game.ks[i], w)) break;
+	if (same(game.ks[i], w))
+	    break;
     game.nenhere--;
     if (i <= game.nenhere)  {
 	for (j=i; j<=game.nenhere; j++) {
@@ -848,7 +877,8 @@
 		key = IHEOL;
 		return;
 	    }
-	    if (n <= game.torps) break;
+	    if (n <= game.torps)
+		break;
 	    chew();
 	    key = IHEOL;
 	}
@@ -879,7 +909,8 @@
 	    return;
 	}
 	targ[i][2] = aaitem;
-	if (targetcheck(targ[i][1], targ[i][2], &course[i])) return;
+	if (targetcheck(targ[i][1], targ[i][2], &course[i]))
+	    return;
     }
     chew();
     if (i == 1 && key == IHEOL) {
@@ -899,13 +930,15 @@
 	    }
 	    targ[i][2] = aaitem;
 	    chew();
-	    if (targetcheck(targ[i][1], targ[i][2], &course[i])) return;
+	    if (targetcheck(targ[i][1], targ[i][2], &course[i]))
+		return;
 	}
     }
     game.ididit = true;
     /* Loop for moving <n> torpedoes */
     for (i = 1; i <= n; i++) {
-	if (game.condition != docked) game.torps--;
+	if (game.condition != docked)
+	    game.torps--;
 	r = (Rand()+Rand())*0.5 -0.5;
 	if (fabs(r) >= 0.47) {
 	    /* misfire! */
@@ -913,7 +946,8 @@
 	    if (n>1) {
 		prouts(_("***TORPEDO NUMBER %d MISFIRES"), i);
 	    }
-	    else prouts(_("***TORPEDO MISFIRES."));
+	    else
+		prouts(_("***TORPEDO MISFIRES."));
 	    skip(1);
 	    if (i < n)
 		prout(_("  Remainder of burst aborted."));
@@ -929,7 +963,8 @@
 	if (game.alldone || game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova)
 	    return;
     }
-    if (KLINGREM==0) finish(FWON);
+    if (KLINGREM==0)
+	finish(FWON);
 }
 
 	
@@ -1108,7 +1143,8 @@
 	    chew();
 	    proutn(_("Units to fire= "));
 	    key = scan();
-	    if (key!=IHREAL) return;
+	    if (key!=IHREAL)
+		return;
 	    rpow = aaitem;
 	    if (rpow > (ifast?game.energy-200:game.energy)) {
 		proutn(_("Energy available= %.2f"),
@@ -1127,7 +1163,8 @@
 	}
 	if (ifast) {
 	    game.energy -= 200; /* Go and do it! */
-	    if (checkshctrl(rpow)) return;
+	    if (checkshctrl(rpow))
+		return;
 	}
 	chew();
 	game.energy -= rpow;
@@ -1137,23 +1174,28 @@
 	    powrem = rpow;
 	    for_local_enemies(i) {
 		hits[i] = 0.0;
-		if (powrem <= 0) continue;
+		if (powrem <= 0)
+		    continue;
 		hits[i] = fabs(game.kpower[i])/(PHASEFAC*pow(0.90,game.kdist[i]));
 		over = (0.01 + 0.05*Rand())*hits[i];
 		temp = powrem;
 		powrem -= hits[i] + over;
-		if (powrem <= 0 && temp < hits[i]) hits[i] = temp;
-		if (powrem <= 0) over = 0.0;
+		if (powrem <= 0 && temp < hits[i])
+		    hits[i] = temp;
+		if (powrem <= 0)
+		    over = 0.0;
 		extra += over;
 	    }
-	    if (powrem > 0.0) extra += powrem;
+	    if (powrem > 0.0)
+		extra += powrem;
 	    hittem(hits);
 	    game.ididit = true;
 	}
 	if (extra > 0 && !game.alldone) {
 	    if (game.ithere) {
 		proutn(_("*** Tholian web absorbs "));
-		if (game.nenhere>0) proutn(_("excess "));
+		if (game.nenhere>0)
+		    proutn(_("excess "));
 		prout(_("phaser energy."));
 	    }
 	    else {
@@ -1205,8 +1247,10 @@
 			(1.01+0.05*Rand()) + 1.0;
 		kz = k;
 		proutn("(");
-		if (!damaged(DCOMPTR)) proutn("%d", irec);
-		else proutn("??");
+		if (!damaged(DCOMPTR))
+		    proutn("%d", irec);
+		else
+		    proutn("??");
 		proutn(")  ");
 		proutn(_("units to fire at "));
 		crmena(false, ienm, sector, aim);
@@ -1257,7 +1301,8 @@
 	chew();
 	if (ifast) {
 	    game.energy -= 200.0;
-	    if (checkshctrl(rpow)) return;
+	    if (checkshctrl(rpow))
+		return;
 	}
 	hittem(hits);
 	game.ididit = true;
@@ -1294,12 +1339,14 @@
     skip(1);
 
     for (; k <= nenhr2; k++, kk++) {
-	if ((wham = hits[k])==0) continue;
+	if ((wham = hits[k])==0)
+	    continue;
 	dustfac = 0.9 + 0.01*Rand();
 	hit = wham*pow(dustfac,game.kdist[kk]);
 	kpini = game.kpower[kk];
 	kp = fabs(kpini);
-	if (PHASEFAC*hit < kp) kp = PHASEFAC*hit;
+	if (PHASEFAC*hit < kp)
+	    kp = PHASEFAC*hit;
 	game.kpower[kk] -= (game.kpower[kk] < 0 ? -kp: kp);
 	kpow = game.kpower[kk];
 	w = game.ks[kk];
@@ -1311,13 +1358,16 @@
 	else
 	    proutn(_("Very small hit on "));
 	ienm = game.quad[w.x][w.y];
-	if (ienm==IHQUEST) iqengry = true;
+	if (ienm==IHQUEST)
+	    iqengry = true;
 	crmena(false,ienm,sector,w);
 	skip(1);
 	if (kpow == 0) {
 	    deadkl(w, ienm, w);
-	    if (KLINGREM==0) finish(FWON);
-	    if (game.alldone) return;
+	    if (KLINGREM==0)
+		finish(FWON);		
+	    if (game.alldone)
+		return;
 	    kk--; /* don't do the increment */
 	}
 	else /* decide whether or not to emasculate klingon */

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-27 21:46:35 UTC (rev 636)
+++ trunk/src/events.c	2006-09-28 08:01:45 UTC (rev 637)
@@ -97,7 +97,8 @@
     for (;;) {
 	/* Select earliest extraneous event, evcode==0 if no events */
 	evcode = FSPY;
-	if (game.alldone) return;
+	if (game.alldone)
+	    return;
 	datemin = fintim;
 	for (l = 1; l < NEVENTS; l++)
 	    if (game.future[l].date < datemin) {
@@ -127,11 +128,13 @@
 		return;
 	    }
 	    game.lsupres -= xtime;
-	    if (game.damage[DLIFSUP] <= xtime) game.lsupres = game.inlsr;
+	    if (game.damage[DLIFSUP] <= xtime)
+		game.lsupres = game.inlsr;
 	}
 	/* Fix devices */
 	repair = xtime;
-	if (game.condition == docked) repair /= game.docfac;
+	if (game.condition == docked)
+	    repair /= game.docfac;
 	/* Don't fix Deathray here */
 	for (l=0; l<NDEVICES; l++)
 	    if (game.damage[l] > 0.0 && l != DDRAY)
@@ -153,11 +156,13 @@
 	game.optime -= xtime;
 	switch (evcode) {
 	case FSNOVA: /* Supernova */
-	    if (!ipage) pause_game(true);
+	    if (!ipage)
+		pause_game(true);
 	    ipage=true;
 	    snova(false, NULL);
 	    schedule(FSNOVA, expran(0.5*game.intime));
-	    if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova) return;
+	    if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova)
+		return;
 	    break;
 	case FSPY: /* Check with spy to see if S.C. should tractor beam */
 	    if (game.state.nscrem == 0 ||
@@ -174,7 +179,8 @@
 		yank = distance(game.state.kscmdr, game.quadrant);
 		/********* fall through to FTBEAM code ***********/
 	    }
-	    else return;
+	    else
+		return;
 	case FTBEAM: /* Tractor beam */
 	    if (evcode==FTBEAM) {
 		if (game.state.remcom == 0) {
@@ -192,7 +198,8 @@
 	    }
 	    /* tractor beaming cases merge here */
 	    yank = sqrt(yank);
-	    if (!ipage) pause_game(true);
+	    if (!ipage)
+		pause_game(true);
 	    ipage=true;
 	    game.optime = (10.0/(7.5*7.5))*yank; /* 7.5 is yank rate (warp 7.5) */
 	    ictbeam = true;
@@ -202,7 +209,8 @@
 	    prout(_(" caught in long range tractor beam--"));
 	    /* If Kirk & Co. screwing around on planet, handle */
 	    atover(true); /* atover(true) is Grab */
-	    if (game.alldone) return;
+	    if (game.alldone)
+		return;
 	    if (game.icraft) { /* Caught in Galileo? */
 		finish(FSTRACTOR);
 		return;
@@ -239,14 +247,17 @@
 		    doshield(true); /* raise shields */
 		    game.shldchg=false;
 		}
-		else prout(_("(Shields not currently useable.)"));
+		else
+		    prout(_("(Shields not currently useable.)"));
 	    }
 	    newqad(false);
 	    /* Adjust finish time to time of tractor beaming */
 	    fintim = game.state.date+game.optime;
 	    attack(false);
-	    if (game.state.remcom <= 0) unschedule(FTBEAM);
-	    else schedule(FTBEAM, game.optime+expran(1.5*game.intime/game.state.remcom));
+	    if (game.state.remcom <= 0)
+		unschedule(FTBEAM);
+	    else 
+		schedule(FTBEAM, game.optime+expran(1.5*game.intime/game.state.remcom));
 	    break;
 	case FSNAP: /* Snapshot of the universe (for time warp) */
 	    game.snapsht = game.state;
@@ -269,7 +280,8 @@
 			i = 1;
 			break;
 		    }
-		if (i == 1) break;
+		if (i == 1)
+		    break;
 	    }
 	    if (j>game.state.rembase) {
 		/* no match found -- try later */
@@ -287,7 +299,8 @@
 	    if (!damaged(DRADIO) && game.condition != docked) 
 		break; /* No warning :-( */
 	    game.iseenit = true;
-	    if (!ipage) pause_game(true);
+	    if (!ipage)
+		pause_game(true);
 	    ipage = true;
 	    skip(1);
 	    proutn(_("Lt. Uhura-  \"Captain, the starbase in "));
@@ -335,7 +348,8 @@
 	    else if (game.state.rembase != 1 &&
 		     (!damaged(DRADIO) || game.condition == docked)) {
 		/* Get word via subspace radio */
-		if (!ipage) pause_game(true);
+		if (!ipage)
+		    pause_game(true);		    
 		ipage = true;
 		skip(1);
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Command reports that"));
@@ -344,7 +358,8 @@
 		prout(_(" has been destroyed by"));
 		if (game.isatb == 2) 
 		    prout(_("the Klingon Super-Commander"));
-		else prout(_("a Klingon Commander"));
+		else
+		    prout(_("a Klingon Commander"));
 		game.state.chart[game.battle.x][game.battle.y].starbase = false;
 	    }
 	    /* Remove Starbase from galaxy */
@@ -380,7 +395,8 @@
 		    game.state.galaxy[game.probec.x][game.probec.y].supernova) {
 		    // Left galaxy or ran into supernova
 		    if (!damaged(DRADIO) || game.condition == docked) {
-			if (!ipage) pause_game(true);
+			if (!ipage)
+			    pause_game(true);
 			ipage = true;
 			skip(1);
 			proutn(_("Lt. Uhura-  \"The deep space probe "));
@@ -394,7 +410,8 @@
 		    break;
 		}
 		if (!damaged(DRADIO) || game.condition == docked) {
-		    if (!ipage) pause_game(true);
+		    if (!ipage)
+			pause_game(true);
 		    ipage = true;
 		    skip(1);
 		    proutn(_("Lt. Uhura-  \"The deep space probe is now in "));
@@ -553,7 +570,8 @@
     game.ididit = false;
     for (;;) {
 	key = scan();
-	if (key  != IHEOL) break;
+	if (key  != IHEOL)
+	    break;
 	proutn(_("How long? "));
     }
     chew();
@@ -562,17 +580,20 @@
 	return;
     }
     origTime = delay = aaitem;
-    if (delay <= 0.0) return;
+    if (delay <= 0.0)
+	return;
     if (delay >= game.state.remtime || game.nenhere != 0) {
 	proutn(_("Are you sure? "));
-	if (ja() == false) return;
+	if (ja() == false)
+	    return;
     }
 
     /* Alternate resting periods (events) with attacks */
 
     game.resting = true;
     do {
-	if (delay <= 0) game.resting = false;
+	if (delay <= 0)
+	    game.resting = false;
 	if (!game.resting) {
 	    prout(_("%d stardates left."), (int)game.state.remtime);
 	    return;
@@ -581,14 +602,18 @@
 
 	if (game.nenhere) {
 	    double rtime = 1.0 + Rand();
-	    if (rtime < temp) temp = rtime;
+	    if (rtime < temp)
+		temp = rtime;
 	    game.optime = temp;
 	}
-	if (game.optime < delay) attack(false);
-	if (game.alldone) return;
+	if (game.optime < delay)
+	    attack(false);
+	if (game.alldone)
+	    return;
 	events();
 	game.ididit = true;
-	if (game.alldone) return;
+	if (game.alldone)
+	    return;
 	delay -= temp;
 	/* Repair Deathray if long rest at starbase */
 	if (origTime-delay >= 9.99 && game.condition == docked)
@@ -641,10 +666,12 @@
 	for (mm = bot; mm <= top; mm++) 
 	    for (nn = 1; nn <= 3; nn++)  /* nn,j represents coordinates around current */
 		for (j = 1; j <= 3; j++) {
-		    if (j==2 && nn== 2) continue;
+		    if (j==2 && nn== 2)
+			continue;
 		    scratch.x = hits[mm][1]+nn-2;
 		    scratch.y = hits[mm][2]+j-2;
-		    if (!VALID_SECTOR(scratch.y, scratch.x)) continue;
+		    if (!VALID_SECTOR(scratch.y, scratch.x))
+			continue;
 		    iquad = game.quad[scratch.x][scratch.y];
 		    switch (iquad) {
 		    // case IHDOT:	/* Empty space ends reaction
@@ -701,7 +728,8 @@
 		    case IHF:
 			prout(_("***Starship buffeted by nova."));
 			if (game.shldup) {
-			    if (game.shield >= 2000.0) game.shield -= 2000.0;
+			    if (game.shield >= 2000.0)
+				game.shield -= 2000.0;
 			    else {
 				double diff = 2000.0 - game.shield;
 				game.energy -= diff;
@@ -711,7 +739,8 @@
 				game.damage[DSHIELD] += 0.005*game.damfac*Rand()*diff;
 			    }
 			}
-			else game.energy -= 2000.0;
+			else
+			    game.energy -= 2000.0;
 			if (game.energy <= 0) {
 			    finish(FNOVA);
 			    return;
@@ -728,7 +757,8 @@
 		    case IHS:
 		    case IHR:
 			for_local_enemies(ll)
-			    if (same(game.ks[ll], scratch)) break;
+			    if (same(game.ks[ll], scratch))
+				break;
 			game.kpower[ll] -= 800.0; /* If firepower is lost, die */
 			if (game.kpower[ll] <= 0.0) {
 			    deadkl(scratch, iquad, scratch);
@@ -776,11 +806,15 @@
 
     /* Starship affected by nova -- kick it away. */
     game.dist = kount*0.1;
-    if (icx) icx = (icx < 0 ? -1 : 1);
-    if (icy) icy = (icy < 0 ? -1 : 1);
+    if (icx)
+	icx = (icx < 0 ? -1 : 1);
+    if (icy)
+	icy = (icy < 0 ? -1 : 1);
     game.direc = course[3*(icx+1)+icy+2];
-    if (game.direc == 0.0) game.dist = 0.0;
-    if (game.dist == 0.0) return;
+    if (game.direc == 0.0)
+	game.dist = 0.0;
+    if (game.dist == 0.0)
+	return;
     game.optime = 10.0*game.dist/16.0;
     skip(1);
     prout(_("Force of nova displaces starship."));
@@ -813,9 +847,11 @@
 	for_quadrants(nq.x) {
 	    for_quadrants(nq.y) {
 		num -= game.state.galaxy[nq.x][nq.y].stars;
-		if (num <= 0) break;
+		if (num <= 0)
+		    break;
 	    }
-	    if (num <=0) break;
+	    if (num <=0)
+		break;
 	}
 	if (idebug) {
 	    proutn("=== Super nova here?");
@@ -841,10 +877,12 @@
 	    for_sectors(ns.y) {
 		if (game.quad[ns.x][ns.y]==IHSTAR) {
 		    num--;
-		    if (num==0) break;
+		    if (num==0)
+			break;
 		}
 	    }
-	    if (num==0) break;
+	    if (num==0)
+		break;
 	}
 
 	skip(1);
@@ -878,7 +916,8 @@
 		invalidate(game.state.kcmdr[game.state.remcom]);
 		game.state.remcom--;
 		kldead--;
-		if (game.state.remcom==0) unschedule(FTBEAM);
+		if (game.state.remcom==0)
+		    unschedule(FTBEAM);
 		break;
 	    }
 	}
@@ -919,13 +958,15 @@
     /* If supernova destroys last Klingons give special message */
     if (KLINGREM==0 && !same(nq, game.quadrant)) {
 	skip(2);
-	if (!induced) prout(_("Lucky you!"));
+	if (!induced)
+	    prout(_("Lucky you!"));
 	proutn(_("A supernova in %s has just destroyed the last Klingons."),
 	       cramlc(quadrant, nq));
 	finish(FWON);
 	return;
     }
     /* if some Klingons remain, continue or die in supernova */
-    if (game.alldone) finish(FSNOVAED);
+    if (game.alldone)
+	finish(FSNOVAED);
     return;
 }

Modified: trunk/src/finish.c
===================================================================
--- trunk/src/finish.c	2006-09-27 21:46:35 UTC (rev 636)
+++ trunk/src/finish.c	2006-09-28 08:01:45 UTC (rev 637)
@@ -50,7 +50,8 @@
 void kaboom(void) 
 {
     stars();
-    if (game.ship==IHE) prouts("***");
+    if (game.ship==IHE)
+	prouts("***");
     prouts(_("********* Entropy of "));
     crmshp();
     prouts(_(" maximized *********"));
@@ -91,9 +92,12 @@
 	    double badpt;
 	    badpt = 5.0*game.state.starkl + game.casual + 10.0*game.state.nplankl +
 		45.*game.nhelp+100.*game.state.basekl+3.*game.abandoned;
-	    if (game.ship == IHF) badpt += 100.0;
-	    else if (game.ship == 0) badpt += 200.0;
-	    if (badpt < 100.0) badpt = 0.0;	// Close enough!
+	    if (game.ship == IHF)
+		badpt += 100.0;
+	    else if (game.ship == 0)
+		badpt += 200.0;
+	    if (badpt < 100.0)
+		badpt = 0.0;	// Close enough!
 	    if (game.state.date-game.indate < 5.0 ||
 		// killsPerDate >= RateMax
 		KLINGKILLED/(game.state.date-game.indate) >=
@@ -154,7 +158,8 @@
 	    prout(_("LIVE LONG AND PROSPER."));
 	}
 	score();
-	if (igotit) plaque();
+	if (igotit)
+	    plaque();	    
 	return;
     case FDEPLETE: // Federation Resources Depleted
 	prout(_("Your time has run out and the Federation has been"));
@@ -286,8 +291,10 @@
 	prout(_("Your last crew member has died."));
 	break;
     }
-    if (game.ship==IHF) game.ship= 0;
-    else if (game.ship == IHE) game.ship = IHF;
+    if (game.ship==IHF)
+	game.ship= 0;
+    else if (game.ship == IHE)
+	game.ship = IHF;
     game.alive = false;
     if (KLINGREM != 0) {
 	double goodies = game.state.remres/game.inresor;
@@ -323,19 +330,26 @@
     int ithperd, iwon, klship;
 
     iskill = game.skill;
-    if ((timused == 0 || KLINGREM != 0) && timused < 5.0) timused = 5.0;
+    if ((timused == 0 || KLINGREM != 0) && timused < 5.0)
+	timused = 5.0;
     perdate = KLINGKILLED/timused;
     ithperd = 500*perdate + 0.5;
     iwon = 0;
-    if (game.gamewon) iwon = 100*game.skill;
-    if (game.ship == IHE) klship = 0;
-    else if (game.ship == IHF) klship = 1;
-    else klship = 2;
-    if (!game.gamewon) game.state.nromrem = 0; // None captured if no win
+    if (game.gamewon)
+	iwon = 100*game.skill;
+    if (game.ship == IHE) 
+	klship = 0;
+    else if (game.ship == IHF) 
+	klship = 1;
+    else
+	klship = 2;
+    if (!game.gamewon)
+	game.state.nromrem = 0; // None captured if no win
     iscore = 10*NKILLK + 50*NKILLC + ithperd + iwon
 	- 100*game.state.basekl - 100*klship - 45*game.nhelp -5*game.state.starkl - game.casual
 	+ 20*NKILLROM + 200*NKILLSC - 10*game.state.nplankl - 300*game.state.nworldkl + game.state.nromrem;
-    if (!game.alive) iscore -= 200;
+    if (!game.alive)
+	iscore -= 200;
     skip(2);
     prout(_("Your score --"));
     if (NKILLROM)
@@ -408,7 +422,6 @@
 	char winner[128];
 
 	skip(2);
-	
 	while (fp == NULL) {
                 proutn(_("File or device name for your plaque: "));
                 cgetline(winner, sizeof(winner));

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-27 21:46:35 UTC (rev 636)
+++ trunk/src/moving.c	2006-09-28 08:01:45 UTC (rev 637)
@@ -64,7 +64,8 @@
 		     */
 		    if (game.skill > SKILL_GOOD && game.klhere > 0 && !game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova)
 			attack(false);
-		    if (game.alldone) return;
+		    if (game.alldone)
+			return;
 		}
 		/* compute final position -- new quadrant and sector */
 		x = QUADSIZE*(game.quadrant.x-1)+game.sector.x;
@@ -91,7 +92,8 @@
 			w.y = (GALSIZE*QUADSIZE*2)+1 - w.y;
 			kink = 1;
 		    }
-		    if (kink) kinks = 1;
+		    if (kink)
+			kinks = 1;
 		} while (kink);
 
 		if (kinks) {
@@ -116,7 +118,8 @@
 		prout(_("Entering %s."), cramlc(quadrant, game.quadrant));
 		game.quad[game.sector.x][game.sector.y] = game.ship;
 		newqad(false);
-		if (game.skill>SKILL_NOVICE) attack(false);
+		if (game.skill>SKILL_NOVICE)
+		    attack(false);  
 		return;
 	    }
 	    iquad = game.quad[w.x][w.y];
@@ -225,9 +228,11 @@
 	return;
     }
     game.condition = docked;
-    if (verbose) prout(_("Docked."));
+    if (verbose)
+	prout(_("Docked."));
     game.ididit = true;
-    if (game.energy < game.inenrg) game.energy = game.inenrg;
+    if (game.energy < game.inenrg)
+	game.energy = game.inenrg;
     game.shield = game.inshld;
     game.torps = game.intorps;
     game.lsupres = game.inlsr;
@@ -387,7 +392,8 @@
 			  cramlc(sector, incr));
 		}
 	    }
-	    else prout(_("Ensign Chekov- \"Course laid in, Captain.\""));
+	    else
+		prout(_("Ensign Chekov- \"Course laid in, Captain.\""));
 	}
 	deltax = icolq - game.quadrant.y + 0.1*(incr.x-game.sector.y);
 	deltay = game.quadrant.x - irowq + 0.1*(game.sector.x-incr.y);
@@ -423,7 +429,8 @@
     }
     game.dist = sqrt(deltax*deltax + deltay*deltay);
     game.direc = atan2(deltax, deltay)*1.90985932;
-    if (game.direc < 0.0) game.direc += 12.0;
+    if (game.direc < 0.0)
+	game.direc += 12.0;
     chew();
     return;
 }
@@ -445,7 +452,8 @@
 
     if (game.energy > 30.0) {
 	getcd(false, 0);
-	if (game.direc == -1.0) return;
+	if (game.direc == -1.0)
+	    return;
 	power = 20.0 + 100.0*game.dist;
     }
     else
@@ -473,16 +481,19 @@
 	prout(_("First Officer Spock- \"Captain, our speed under impulse"));
 	prout(_("power is only 0.95 sectors per stardate. Are you sure"));
 	proutn(_("we dare spend the time?\" "));
-	if (ja() == false) return;
+	if (ja() == false)
+	    return;
     }
     /* Activate impulse engines and pay the cost */
     imove(false);
     game.ididit = true;
-    if (game.alldone) return;
+    if (game.alldone)
+	return;
     power = 20.0 + 100.0*game.dist;
     game.energy -= power;
     game.optime = game.dist/0.095;
-    if (game.energy <= 0) finish(FNRG);
+    if (game.energy <= 0)
+	finish(FNRG);
     return;
 }
 
@@ -512,7 +523,8 @@
 			
 	/* Read in course and distance */
 	getcd(false, 0);
-	if (game.direc == -1.0) return;
+	if (game.direc == -1.0)
+	    return;
 
 	/* Make sure starship has enough energy for the trip */
 	power = (game.dist+0.05)*game.warpfac*game.warpfac*game.warpfac*(game.shldup+1);
@@ -564,11 +576,13 @@
 	    game.dist = Rand()*game.dist;
 	}
 	/* Decide if time warp will occur */
-	if (0.5*game.dist*pow(7.0,game.warpfac-10.0) > Rand()) twarp = true;
+	if (0.5*game.dist*pow(7.0,game.warpfac-10.0) > Rand())
+	    twarp = true;
 	if (idebug && game.warpfac==10 && !twarp) {
 	    blooey = false;
 	    proutn("=== Force time warp? ");
-	    if (ja() == true) twarp = true;
+	    if (ja() == true)
+		twarp = true;
 	}
 	if (blooey || twarp) {
 	    /* If time warp or engine damage, check path */
@@ -593,7 +607,8 @@
 		ix = x + 0.5;
 		y += deltay;
 		iy = y +0.5;
-		if (!VALID_SECTOR(ix, iy)) break;
+		if (!VALID_SECTOR(ix, iy))
+		    break;
 		if (game.quad[ix][iy] != IHDOT) {
 		    blooey = false;
 		    twarp = false;
@@ -605,11 +620,14 @@
 
     /* Activate Warp Engines and pay the cost */
     imove(false);
-    if (game.alldone) return;
+    if (game.alldone)
+	return;
     game.energy -= game.dist*game.warpfac*game.warpfac*game.warpfac*(game.shldup+1);
-    if (game.energy <= 0) finish(FNRG);
+    if (game.energy <= 0)
+	finish(FNRG);
     game.optime = 10.0*game.dist/game.wfacsq;
-    if (twarp) timwrp();
+    if (twarp)
+	timwrp();
     if (blooey) {
 	game.damage[DWARPEN] = game.damfac*(3.0*Rand()+1.0);
 	skip(1);
@@ -711,11 +729,14 @@
 	    }
 	}
     }
-    if (igrab) return;
+    if (igrab)
+	return;
 
     /* Check to see if captain in shuttle craft */
-    if (game.icraft) finish(FSTRACTOR);
-    if (game.alldone) return;
+    if (game.icraft)
+	finish(FSTRACTOR);
+    if (game.alldone)
+	return;
 
     /* Inform captain of attempt to reach safety */
     skip(1);
@@ -748,7 +769,8 @@
 	power = 0.75*game.energy;
 	game.dist = power/(game.warpfac*game.warpfac*game.warpfac*(game.shldup+1));
 	distreq = 1.4142+Rand();
-	if (distreq < game.dist) game.dist = distreq;
+	if (distreq < game.dist)
+	    game.dist = distreq;
 	game.optime = 10.0*game.dist/game.wfacsq;
 	game.direc = 12.0*Rand();	/* How dumb! */
 	game.justin = false;
@@ -756,7 +778,8 @@
 	warp(true);
 	if (!game.justin) {
 	    /* This is bad news, we didn't leave quadrant. */
-	    if (game.alldone) return;
+	    if (game.alldone)
+		return;
 	    skip(1);
 	    prout(_("Insufficient energy to leave quadrant."));
 	    finish(FSNOVAED);
@@ -789,7 +812,8 @@
 	/* next snapshot will be sooner */
 	schedule(FSNAP, expran(0.25*game.state.remtime));
 				
-	if (game.state.nscrem) schedule(FSCMOVE, 0.2777);
+	if (game.state.nscrem)
+	    schedule(FSCMOVE, 0.2777);	    
 	game.isatb = 0;
 	unschedule(FCDBAS);
 	unschedule(FSCDBAS);
@@ -869,7 +893,8 @@
 	/* slow mode, so let Kirk know how many probes there are left */
 	prout(game.nprobes==1 ? _("%d probe left.") : _("%d probes left."), game.nprobes);
 	proutn(_("Are you sure you want to fire a probe? "));
-	if (ja() == false) return;
+	if (ja() == false)
+	    return;
     }
 
     game.isarmed = false;
@@ -882,7 +907,8 @@
 	game.isarmed = ja();
     }
     getcd(true, key);
-    if (game.direc == -1.0) return;
+    if (game.direc == -1.0)
+	return;
     game.nprobes--;
     angle = ((15.0 - game.direc) * 0.5235988);
     game.probeinx = -sin(angle);
@@ -1011,7 +1037,8 @@
 	}
 	textcolor(RED);
 	warble();
-	if (Rand() > probf) break;
+	if (Rand() > probf)
+	    break;
 	prout(_("fails."));
 	delay(500);
 	textcolor(DEFAULT);
@@ -1150,7 +1177,8 @@
     prout(_("Starfleet puts you in command of another ship,"));
     prout(_("the Faerie Queene, which is antiquated but,"));
     prout(_("still useable."));
-    if (game.icrystl) prout(_("The dilithium crystals have been moved."));
+    if (game.icrystl)
+	prout(_("The dilithium crystals have been moved."));
     game.imine = false;
     game.iscraft = offship; /* Galileo disappears */
     /* Resupply ship */

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-27 21:46:35 UTC (rev 636)
+++ trunk/src/planets.c	2006-09-28 08:01:45 UTC (rev 637)
@@ -33,13 +33,15 @@
 	    proutn(_("   class "));
 	    proutn(classes[game.state.plnets[i].pclass]);
 	    proutn("   ");
-	    if (game.state.plnets[i].crystals != present) proutn(_("no "));
+	    if (game.state.plnets[i].crystals != present)
+		proutn(_("no "));
 	    prout(_("dilithium crystals present."));
 	    if (game.state.plnets[i].known==shuttle_down) 
 		prout(_("    Shuttle Craft Galileo on surface."));
 	}
     }
-    if (!iknow) prout(_("No information available."));
+    if (!iknow)
+	prout(_("No information available."));
 }
 
 void orbit(void)
@@ -64,7 +66,8 @@
     game.optime = 0.02+0.03*Rand();
     prout(_("Helmsman Sulu-  \"Entering standard orbit, Sir.\""));
     newcnd();
-    if (consumeTime()) return;
+    if (consumeTime())
+	return;
     game.height = (1400.0+7200.0*Rand());
     prout(_("Sulu-  \"Entered orbit at altitude %.2f kilometers.\""), game.height);
     game.inorbit = true;
@@ -93,9 +96,11 @@
 	if (game.state.plnets[game.iplnet].known==shuttle_down) 
 	    prout(_("         Sensors show Galileo still on surface."));
 	proutn(_("         Readings indicate"));
-	if (game.state.plnets[game.iplnet].crystals != present) proutn(_(" no"));
+	if (game.state.plnets[game.iplnet].crystals != present)
+	    proutn(_(" no"));
 	prout(_(" dilithium crystals present.\""));
-	if (game.state.plnets[game.iplnet].known == unknown) game.state.plnets[game.iplnet].known = known;
+	if (game.state.plnets[game.iplnet].known == unknown)
+	    game.state.plnets[game.iplnet].known = known;
     }
 }
 
@@ -109,7 +114,8 @@
 	if (!damaged(DSHUTTL) && (game.state.plnets[game.iplnet].known==shuttle_down || game.iscraft == onship)) {
 	    skip(1);
 	    proutn(_("Spock-  \"May I suggest the shuttle craft, Sir?\" "));
-	    if (ja() == true) shuttle();
+	    if (ja() == true)
+		shuttle();
 	}
 	return;
     }
@@ -217,7 +223,8 @@
 	return;
     }
     game.optime = (0.1+0.2*Rand())*game.state.plnets[game.iplnet].pclass;
-    if (consumeTime()) return;
+    if (consumeTime())
+	return;
     prout(_("Mining operation complete."));
     game.state.plnets[game.iplnet].crystals = mined;
     game.imine = game.ididit = true;
@@ -345,7 +352,8 @@
 	    prout(_(" boards Galileo and swoops toward planet surface."));
 	    game.iscraft = offship;
 	    skip(1);
-	    if (consumeTime()) return;
+	    if (consumeTime())
+		return;
 	    game.state.plnets[game.iplnet].known=shuttle_down;
 	    prout(_("Trip complete."));
 	    return;
@@ -360,7 +368,8 @@
 	    game.icraft = true;
 	    skip(1);
 	    game.landed = false;
-	    if (consumeTime()) return;
+	    if (consumeTime())
+		return;
 	    game.iscraft = onship;
 	    game.icraft = false;
 	    if (game.imine) {
@@ -382,7 +391,8 @@
 	skip(1);
 	game.icraft = true;
 	game.iscraft = offship;
-	if (consumeTime()) return;
+	if (consumeTime())
+	    return;
 	game.state.plnets[game.iplnet].known = shuttle_down;
 	game.landed = true;
 	game.icraft = false;
@@ -414,7 +424,8 @@
     prout(_("Spock-  \"Captain, the 'Experimental Death Ray'"));
     prout(_("  is highly unpredictible.  Considering the alternatives,"));
     proutn(_("  are you sure this is wise?\" "));
-    if (ja() == false) return;
+    if (ja() == false)
+	return;
     prout(_("Spock-  \"Acknowledged.\""));
     skip(1);
     game.ididit = true;
@@ -438,7 +449,8 @@
 	while (game.nenhere > 0)
 	    deadkl(game.ks[1], game.quad[game.ks[1].x][game.ks[1].y],game.ks[1]);
 	prout(_("Ensign Chekov-  \"Congratulations, Captain!\""));
-	if (KLINGREM == 0) finish(FWON);
+	if (KLINGREM == 0)
+	    finish(FWON);    
 	if ((game.options & OPTION_PLAIN) == 0) {
 	    prout(_("Spock-  \"Captain, I believe the `Experimental Death Ray'"));
 	    if (Rand() <= 0.05) {
@@ -489,7 +501,8 @@
 	prout(_(" Mr. Sulu."));
 	for_sectors(i)
 	    for_sectors(j)
-		if (game.quad[i][j] == IHDOT) game.quad[i][j] = IHQUEST;
+		if (game.quad[i][j] == IHDOT)
+		    game.quad[i][j] = IHQUEST;
 	prout(_("  Captain, our quadrant is now infested with"));
 	prouts(_(" - - - - - -  *THINGS*."));
 	skip(1);

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-27 21:46:35 UTC (rev 636)
+++ trunk/src/reports.c	2006-09-28 08:01:45 UTC (rev 637)
@@ -55,40 +55,53 @@
     skip(1);
     prout(_("You %s a %s%s %s game."),
 	  game.alldone? _("were playing") : _("are playing"), s1, s2, s3);
-    if (game.skill>SKILL_GOOD && game.thawed && !game.alldone) prout(_("No plaque is allowed."));
-    if (game.tourn) prout(_("This is tournament game %d."), game.tourn);
+    if (game.skill>SKILL_GOOD && game.thawed && !game.alldone)
+	prout(_("No plaque is allowed."));
+    if (game.tourn)
+	prout(_("This is tournament game %d."), game.tourn);
     prout(_("Your secret password is \"%s\""),game.passwd);
     proutn(_("%d of %d Klingons have been killed"), KLINGKILLED, INKLINGTOT);
-    if (NKILLC) prout(_(", including %d Commander%s."), NKILLC, NKILLC==1?"":_("s"));
-    else if (NKILLK + NKILLSC > 0) prout(_(", but no Commanders."));
-    else prout(".");
-    if (game.skill > SKILL_FAIR) prout(_("The Super Commander has %sbeen destroyed."),
-				  game.state.nscrem?_("not "):"");
+    if (NKILLC)
+	prout(_(", including %d Commander%s."), NKILLC, NKILLC==1?"":_("s"));
+    else if (NKILLK + NKILLSC > 0)
+	prout(_(", but no Commanders."));
+    else
+	prout(".");
+    if (game.skill > SKILL_FAIR)
+	prout(_("The Super Commander has %sbeen destroyed."),
+	      game.state.nscrem?_("not "):"");
     if (game.state.rembase != game.inbase) {
 	proutn(_("There "));
-	if (game.inbase-game.state.rembase==1) proutn(_("has been 1 base"));
+	if (game.inbase-game.state.rembase==1)
+	    proutn(_("has been 1 base"));
 	else {
 	    proutn(_("have been %d bases"), game.inbase-game.state.rembase);
 	}
 	prout(_(" destroyed, %d remaining."), game.state.rembase);
     }
-    else prout(_("There are %d bases."), game.inbase);
+    else
+	prout(_("There are %d bases."), game.inbase);
     if (!damaged(DRADIO) || game.condition == docked || game.iseenit) {
 	/* Don't report this if not seen and
 	   either the radio is dead or not at base! */
 	attakreport(false);
 	game.iseenit = true;
     }
-    if (game.casual) prout(_("%d casualt%s suffered so far."),
-		      game.casual, game.casual==1? "y" : "ies");
-    if (game.nhelp) prout(_("There were %d call%s for help."),
-		     game.nhelp, game.nhelp==1 ? "" : _("s"));
+    if (game.casual) 
+	prout(_("%d casualt%s suffered so far."),
+	      game.casual, game.casual==1? "y" : "ies");
+    if (game.nhelp)
+	prout(_("There were %d call%s for help."),
+	      game.nhelp, game.nhelp==1 ? "" : _("s"));
     if (game.ship == IHE) {
 	proutn(_("You have "));
-	if (game.nprobes) proutn("%d", game.nprobes);
-	else proutn(_("no"));
+	if (game.nprobes)
+	    proutn("%d", game.nprobes);
+	else
+	    proutn(_("no"));
 	proutn(_(" deep space probe"));
-	if (game.nprobes!=1) proutn(_("s"));
+	if (game.nprobes!=1)
+	    proutn(_("s"));
 	prout(".");
     }
     if ((!damaged(DRADIO) || game.condition == docked)
@@ -173,7 +186,8 @@
 		  game.docfac*game.damage[i]+0.005);
 	}
     }
-    if (!jdam) prout(_("All devices functional."));
+    if (!jdam)
+	prout(_("All devices functional."));
 }
 
 void rechart(void)
@@ -232,7 +246,8 @@
 		proutn(" ");
 	}
 	proutn("  |");
-	if (i<GALSIZE) skip(1);
+	if (i<GALSIZE)
+	    skip(1);
     }
 }
 
@@ -270,7 +285,8 @@
     );
 
     RQ(2,
-	if (game.condition != docked) newcnd();
+	if (game.condition != docked)
+	    newcnd();
 	switch (game.condition) {
 	    case red: cp = _("RED"); break;
 	    case green: cp = _("GREEN"); break;
@@ -383,7 +399,8 @@
 	else
 	    prout(_("  [Using Base's sensors]"));
     }
-    else prout(_("     Short-range scan"));
+    else
+	prout(_("     Short-range scan"));
     if (goodScan && !damaged(DRADIO)) { 
 	game.state.chart[game.quadrant.x][game.quadrant.y].klingons = game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons;
 	game.state.chart[game.quadrant.x][game.quadrant.y].starbase = game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase;
@@ -391,7 +408,8 @@
 	game.state.galaxy[game.quadrant.x][game.quadrant.y].charted = true;
     }
     prout("    1 2 3 4 5 6 7 8 9 10");
-    if (game.condition != docked) newcnd();
+    if (game.condition != docked)
+	newcnd();
     for (i = 1; i <= QUADSIZE; i++) {
 	proutn("%2d  ", i);
 	for_sectors(j) {
@@ -437,10 +455,14 @@
 	w2.x = aaitem + 0.5;
     }
     else {
-	if (game.quadrant.y>w1.x) w2.x = 1;
-	else w2.x=QUADSIZE;
-	if (game.quadrant.x>w1.y) w2.y = 1;
-	else w2.y=QUADSIZE;
+	if (game.quadrant.y>w1.x)
+	    w2.x = 1;
+	else
+	    w2.x=QUADSIZE;
+	if (game.quadrant.x>w1.y)
+	    w2.y = 1;
+	else
+	    w2.y=QUADSIZE;
     }
 
     if (!VALID_QUADRANT(w1.x, w1.y) || !VALID_SECTOR(w2.x, w2.y)) {
@@ -451,7 +473,8 @@
 		square(w1.x-game.quadrant.x+0.1*(w2.x-game.sector.x)));
     wfl = false;
 
-    if (prompt) prout(_("Answer \"no\" if you don't know the value:"));
+    if (prompt)
+	prout(_("Answer \"no\" if you don't know the value:"));
     for (;;) {
 	chew();
 	proutn(_("Time or arrival date? "));
@@ -464,7 +487,8 @@
 		chew();
 		return;
 	    }
-	    if (twarp < 1.0) twarp = 1.0;
+	    if (twarp < 1.0)
+		twarp = 1.0;
 	    break;
 	}
 	chew();
@@ -487,7 +511,8 @@
 	if (tpower >= game.energy) {
 	    prout(_("Insufficient energy, sir."));
 	    if (!game.shldup || tpower > game.energy*2.0) {
-		if (!wfl) return;
+		if (!wfl)
+		    return;
 		proutn(_("New warp factor to try? "));
 		if (scan() == IHREAL) {
 		    wfl = true;

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-27 21:46:35 UTC (rev 636)
+++ trunk/src/setup.c	2006-09-28 08:01:45 UTC (rev 637)
@@ -296,7 +296,8 @@
     do {
 	double r = Rand();
 	int klump = (1.0 - r*r)*klumper;
-	if (klump > krem) klump = krem;
+	if (klump > krem)
+	    klump = krem;
 	krem -= klump;
 	do w = randplace(GALSIZE);
 	while (game.state.galaxy[w.x][w.y].supernova ||
@@ -389,7 +390,8 @@
 	skip(1);
 	prout(_("%d Klingons."), INKLINGTOT);
 	prout(_("An unknown number of Romulans."));
-	if (game.state.nscrem) prout(_("And one (GULP) Super-Commander."));
+	if (game.state.nscrem)
+	    prout(_("And one (GULP) Super-Commander."));
 	prout(_("%d stardates."),(int)game.intime);
 	proutn(_("%d starbases in "), game.inbase);
     }
@@ -404,11 +406,14 @@
     proutn(cramlc(sector, game.sector));
     skip(2);
     prout(_("Good Luck!"));
-    if (game.state.nscrem) prout(_("  YOU'LL NEED IT."));
+    if (game.state.nscrem)
+	prout(_("  YOU'LL NEED IT."));
     waitfor();
     newqad(false);
-    if (game.nenhere-iqhere-game.ithere) game.shldup = true;
-    if (game.neutz) attack(false);	// bad luck to start in a Romulan Neutral Zone
+    if (game.nenhere-iqhere-game.ithere)
+	game.shldup = true;
+    if (game.neutz)	// bad luck to start in a Romulan Neutral Zone
+	attack(false);
 }
 
 bool choose(bool needprompt) 
@@ -437,15 +442,19 @@
 	    break;
 	}
 	if (isit("saved") || isit("frozen")) {
-	    if (thaw()) continue;
+	    if (thaw())
+		continue;
 	    chew();
-	    if (*game.passwd==0) continue;
-	    if (!game.alldone) game.thawed = 1; // No plaque if not finished
+	    if (*game.passwd==0)
+		continue;
+	    if (!game.alldone)
+		game.thawed = true; // No plaque if not finished
 	    report();
 	    waitfor();
 	    return true;
 	}
-	if (isit("regular")) break;
+	if (isit("regular"))
+	    break;
 	proutn(_("What is \""));
 	proutn(citem);
 	prout("\"?");
@@ -453,14 +462,22 @@
     }
     while (game.length==0 || game.skill==SKILL_NONE) {
 	if (scan() == IHALPHA) {
-	    if (isit("short")) game.length = 1;
-	    else if (isit("medium")) game.length = 2;
-	    else if (isit("long")) game.length = 4;
-	    else if (isit("novice")) game.skill = SKILL_NOVICE;
-	    else if (isit("fair")) game.skill = SKILL_FAIR;
-	    else if (isit("good")) game.skill = SKILL_GOOD;
-	    else if (isit("expert")) game.skill = SKILL_EXPERT;
-	    else if (isit("emeritus")) game.skill = SKILL_EMERITUS;
+	    if (isit("short"))
+		game.length = 1;
+	    else if (isit("medium"))
+		game.length = 2;
+	    else if (isit("long"))
+		game.length = 4;
+	    else if (isit("novice"))
+		game.skill = SKILL_NOVICE;
+	    else if (isit("fair"))
+		game.skill = SKILL_FAIR;
+	    else if (isit("good"))
+		game.skill = SKILL_GOOD;
+	    else if (isit("expert"))
+		game.skill = SKILL_EXPERT;
+	    else if (isit("emeritus"))
+		game.skill = SKILL_EMERITUS;
 	    else {
 		proutn(_("What is \""));
 		proutn(citem);
@@ -469,8 +486,10 @@
 	}
 	else {
 	    chew();
-	    if (game.length==0) proutn(_("Would you like a Short, Medium, or Long game? "));
-	    else if (game.skill == SKILL_NONE) proutn(_("Are you a Novice, Fair, Good, Expert, or Emeritus player? "));
+	    if (game.length==0)
+		proutn(_("Would you like a Short, Medium, or Long game? "));
+	    else if (game.skill == SKILL_NONE)
+		proutn(_("Are you a Novice, Fair, Good, Expert, or Emeritus player? "));
 	}
     }
     // Choose game options -- added by ESR for SST2K
@@ -538,10 +557,12 @@
 /* update our alert status */
 {
     game.condition = green;
-    if (game.energy < 1000.0) game.condition = yellow;
+    if (game.energy < 1000.0)
+	game.condition = yellow;
     if (game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons || game.state.galaxy[game.quadrant.x][game.quadrant.y].romulans)
 	game.condition = red;
-    if (!game.alive) game.condition=dead;
+    if (!game.alive)
+	game.condition=dead;
 }
 
 coord newkling(int i)
@@ -697,10 +718,14 @@
 		distance(game.sector, game.tholian);
 	    game.kpower[game.nenhere] = Rand()*400.0 +100.0 +25.0*game.skill;
 	    /* Reserve unocupied corners */
-	    if (game.quad[1][1]==IHDOT) game.quad[1][1] = 'X';
-	    if (game.quad[1][QUADSIZE]==IHDOT) game.quad[1][QUADSIZE] = 'X';
-	    if (game.quad[QUADSIZE][1]==IHDOT) game.quad[QUADSIZE][1] = 'X';
-	    if (game.quad[QUADSIZE][QUADSIZE]==IHDOT) game.quad[QUADSIZE][QUADSIZE] = 'X';
+	    if (game.quad[1][1]==IHDOT)
+		game.quad[1][1] = 'X';
+	    if (game.quad[1][QUADSIZE]==IHDOT)
+		game.quad[1][QUADSIZE] = 'X';
+	    if (game.quad[QUADSIZE][1]==IHDOT)
+		game.quad[QUADSIZE][1] = 'X';
+	    if (game.quad[QUADSIZE][QUADSIZE]==IHDOT)
+		game.quad[QUADSIZE][QUADSIZE] = 'X';
 	}
     }
 
@@ -713,10 +738,14 @@
 
     // Take out X's in corners if Tholian present
     if (game.ithere) {
-	if (game.quad[1][1]=='X') game.quad[1][1] = IHDOT;
-	if (game.quad[1][QUADSIZE]=='X') game.quad[1][QUADSIZE] = IHDOT;
-	if (game.quad[QUADSIZE][1]=='X') game.quad[QUADSIZE][1] = IHDOT;
-	if (game.quad[QUADSIZE][QUADSIZE]=='X') game.quad[QUADSIZE][QUADSIZE] = IHDOT;
+	if (game.quad[1][1]=='X')
+	    game.quad[1][1] = IHDOT;
+	if (game.quad[1][QUADSIZE]=='X')
+	    game.quad[1][QUADSIZE] = IHDOT;
+	if (game.quad[QUADSIZE][1]=='X')
+	    game.quad[QUADSIZE][1] = IHDOT;
+	if (game.quad[QUADSIZE][QUADSIZE]=='X')
+	    game.quad[QUADSIZE][QUADSIZE] = IHDOT;
     }		
 }
 
@@ -729,7 +758,8 @@
 
     // The author liked bubble sort. So we will use it. :-(
 
-    if (game.nenhere-iqhere-game.ithere < 2) return;
+    if (game.nenhere-iqhere-game.ithere < 2)
+	return;
 
     do {
 	sw = false;
@@ -764,11 +794,13 @@
 	    proutn(_("Please type in a secret password- "));
 	    scan();
 	    strcpy(game.passwd, citem);
-	    if (*game.passwd != 0) break;
+	    if (*game.passwd != 0)
+		break;
 	}
     } else {
 	int i;
-        for(i=0;i<3;i++) game.passwd[i]=(char)(97+(int)(Rand()*25));
+        for(i=0;i<3;i++)
+	    game.passwd[i]=(char)(97+(int)(Rand()*25));
         game.passwd[3]=0;
     }
 }

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-27 21:46:35 UTC (rev 636)
+++ trunk/src/sst.c	2006-09-28 08:01:45 UTC (rev 637)
@@ -318,14 +318,16 @@
 	    key = scan();
 	}
 	setwnd(message_window);
-	if (key == IHEOL) return;
+	if (key == IHEOL)
+	    return;
 	for (i = 0; i < NUMCOMMANDS; i++) {
 	    if (ACCEPT(i) && strcasecmp(commands[i].name, citem)==0) {
 		i = commands[i].value;
 		break;
 	    }
 	}
-	if (i != NUMCOMMANDS) break;
+	if (i != NUMCOMMANDS)
+	    break;
 	skip(1);
 	listCommands();
 	key = IHEOL;
@@ -446,11 +448,13 @@
 	    break;
 	case PHASERS:			// phasers
 	    phasers();
-	    if (game.ididit) hitme = true;
+	    if (game.ididit)
+		hitme = true;
 	    break;
 	case TORPEDO:			// photons
 	    photon();
-	    if (game.ididit) hitme = true;
+	    if (game.ididit)
+		hitme = true;
 	    break;
 	case MOVE:			// move
 	    warp(false);
@@ -464,7 +468,8 @@
 	    break;
 	case DOCK:			// dock
 	    dock(true);
-	    if (game.ididit) attack(false);
+	    if (game.ididit)
+		attack(false);		
 	    break;
 	case DAMAGES:			// damages
 	    dreprt();
@@ -477,7 +482,8 @@
 	    break;
 	case REST:			// rest
 	    wait();
-	    if (game.ididit) hitme = true;
+	    if (game.ididit)
+		hitme = true;
 	    break;
 	case WARP:			// warp
 	    setwrp();
@@ -490,22 +496,26 @@
 	    break;
 	case ORBIT:			// orbit
 	    orbit();
-	    if (game.ididit) hitme = true;
+	    if (game.ididit)
+		hitme = true;
 	    break;
 	case TRANSPORT:			// transport "beam"
 	    beam();
 	    break;
 	case MINE:			// mine
 	    mine();
-	    if (game.ididit) hitme = true;
+	    if (game.ididit)
+		hitme = true;
 	    break;
 	case CRYSTALS:			// crystals
 	    usecrystals();
-	    if (game.ididit) hitme = true;
+	    if (game.ididit)
+		hitme = true;
 	    break;
 	case SHUTTLE:			// shuttle
 	    shuttle();
-	    if (game.ididit) hitme = true;
+	    if (game.ididit)
+		hitme = true;
 	    break;
 	case PLANETS:			// Planet list
 	    preport();
@@ -526,7 +536,8 @@
 	    break;
 	case PROBE:
 	    probe();			// Launch probe
-	    if (game.ididit) hitme = true;
+	    if (game.ididit)
+		hitme = true;
 	    break;
 	case ABANDON:			// Abandon Ship
 	    abandn();
@@ -542,14 +553,16 @@
 	    break;
 	case DEATHRAY:			// Try a desparation measure
 	    deathray();
-	    if (game.ididit) hitme = true;
+	    if (game.ididit)
+		hitme = true;
 	    break;
 	case DEBUGCMD:			// What do we want for debug???
 	    debugme();
 	    break;
 	case MAYDAY:			// Call for help
 	    mayday();
-	    if (game.ididit) hitme = true;
+	    if (game.ididit)
+		hitme = true;
 	    break;
 	case QUIT:
 	    game.alldone = true;		// quit the game
@@ -581,7 +594,8 @@
 	    }
 	    if (hitme && !game.justin) {
 		attack(true);
-		if (game.alldone) break;
+		if (game.alldone)
+		    break;
 		if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova) {	// went NOVA! 
 		    atover(false);
 		    hitme = true;
@@ -590,9 +604,11 @@
 	    }
 	    break;
 	}
-	if (game.alldone) break;
+	if (game.alldone)
+	    break;
     }
-    if (idebug) prout("=== Ending");
+    if (idebug)
+	prout("=== Ending");
 }
 
 
@@ -613,11 +629,11 @@
 	    replayfp = fopen(optarg, "r");
 	    if (replayfp == NULL) {
 		fprintf(stderr, "sst: can't open replay file %s\n", optarg);
-		exit(1);	
+		exit(1);
 	    }
 	    if (fscanf(replayfp, "seed %d\n", &seed) != 1) {
 		fprintf(stderr, "sst: replay file %s is ill-formed\n", optarg);
-		exit(1);	
+		exit(1);
 	    }
 	    /* FALL THROUGH */
 	case 't':
@@ -656,7 +672,8 @@
 	    score();
 	    game.alldone = false;
 	}
-	else makemoves();
+	else
+	    makemoves();
 	skip(1);
 	stars();
 	skip(1);
@@ -669,7 +686,8 @@
 	    }
 	}
 	proutn(_("Do you want to play again? "));
-	if (!ja()) break;
+	if (!ja())
+	    break;
     }
     skip(1);
     prout(_("May the Great Bird of the Galaxy roost upon your home planet."));
@@ -706,8 +724,10 @@
 {
     static char buf[32];
     buf[0] = '\0';
-    if (key == quadrant) strcpy(buf, _("Quadrant "));
-    else if (key == sector) strcpy(buf, _("Sector "));
+    if (key == quadrant)
+	strcpy(buf, _("Quadrant "));
+    else if (key == sector)
+	strcpy(buf, _("Sector "));
     sprintf(buf+strlen(buf), "%d - %d", w.x, w.y);
     return buf;
 }
@@ -715,7 +735,8 @@
 void crmena(bool stars, feature enemy, enum loctype key, coord w) 
 /* print an enemy and his location */
 {
-    if (stars) proutn("***");
+    if (stars)
+	proutn("***");
     cramen(enemy);
     proutn(_(" at "));
     proutn(cramlc(key, w));
@@ -820,7 +841,8 @@
     // Treat as alpha
     cp = citem;
     while (*linep && *linep!=' ') {
-	if ((cp - citem) < 9) *cp++ = tolower(*linep);
+	if ((cp - citem) < 9)
+	    *cp++ = tolower(*linep);
 	linep++;
     }
     *cp = 0;
@@ -834,8 +856,10 @@
     for(;;) {
 	scan();
 	chew();
-	if (*citem == 'y') return true;
-	if (*citem == 'n') return false;
+	if (*citem == 'y')
+	    return true;
+	if (*citem == 'n')
+	    return false;
 	proutn(_("Please answer with \"y\" or \"n\": "));
     }
 }
@@ -859,7 +883,8 @@
 {
     proutn("Reset levels? ");
     if (ja() == true) {
-	if (game.energy < game.inenrg) game.energy = game.inenrg;
+	if (game.energy < game.inenrg)
+	    game.energy = game.inenrg;
 	game.shield = game.inshld;
 	game.torps = game.intorps;
 	game.lsupres = game.inlsr;
@@ -874,8 +899,10 @@
     proutn("Toggle debug flag? ");
     if (ja() == true) {
 	idebug = !idebug;
-	if (idebug) prout("Debug output ON");
-	else prout("Debug output OFF");
+	if (idebug)
+	    prout("Debug output ON");	    
+	else
+	    prout("Debug output OFF");
     }
     proutn("Cause selective damage? ");
     if (ja() == true) {

Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-09-27 21:46:35 UTC (rev 636)
+++ trunk/src/sst.py	2006-09-28 08:01:45 UTC (rev 637)
@@ -7,7 +7,7 @@
 
 Note that the game.quad, game.snap.galaxy and game.snap.chart members
 are not actually arrays but dictioaries indixed by coord tuples.  Be setting
-the hash of a coord exual to the hash of a literal tuple containing its
+the hash of a coord equal to the hash of a literal tuple containing its
 coordinate data, we ensure these can be indexed both ways.
 
 """
@@ -61,13 +61,14 @@
         return "%d - %d" % (self.x, self.y)
 
 class feature:
-    "A feature in the current quadrant (ship, star, black hole, etc)." 
+    "A feature in the current quadrant (ship, star, black hole, base, etc)." 
     def __init__(self):
         self.type = None	# name of feature type
         self.sector = None	# sector location
     def distance(self):
         return self.sector.distance(game.sector)
     def __str__(self):
+        "This will be overridden by subclasses."
         return self.name[0]
     def sectormove(self, dest):
         "Move this feature within the current quadrant." 
@@ -76,15 +77,14 @@
         game.quad[dest] = self
         self.sector = dest
 
-empty = None	# Value of empty space in game.quad
-
 class ship(feature):
-    "An enemy ship in the current quadrant." 
-    def __init__(self):
+    "A starship, frindly or enemy." 
+    def __init__(self, type, power):
         feature.__init__(self)
-        self.type = None	# klingon, romulan, commander,
-        			# supercommander, tholian
-        self.power = None	# power
+        self.type = type	# klingon, romulan, commander,
+        			# supercommander, tholian,
+                                # enterprise, faerie queene.
+        self.power = power	# power
         if self.type in ("Klingon", "Commander", "Super-Commander"):
             game.remkl += 1
         elif self.type == "Romulan":
@@ -95,6 +95,16 @@
         elif self.type == "Romulan":
             game.romrem -= 1
 
+class space(feature):
+    "Empty space.  Has no state, just knows how to identify iself."
+    def __str__(self):
+        return '*'
+
+class star(feature):
+    "A star.  Has no state, just knows how to identify iself."
+    def __str__(self):
+        return '*'
+
 class planet(feature):
     "A planet.  May be inhabited or not, may hold dilithium crystals or not."
     def __init(self):
@@ -103,32 +113,24 @@
         self.crystals = None	# "absent", "present", or "mined"
         self.inhabited = False
         self.known = "unknown"	# Other values: "known" and "shuttle down"
+        game.state.planets.append(self)
+    def __del__(self):
+        game.state.planets.remove(self)
     def __str__(self):
         if self.inhabited:
             return '@'
         else:
             return 'P'
 
-class star(feature):
-    "A star.  Has no state, just knows how to identify iself."
-    def __init(self):
-        feature.__init__(self)
-    def __str__(self):
-        return '*'
-
 class web(feature):
     "A bit of Tholian web.  Has no state, just knows how to identify iself."
-    def __init(self):
-        feature.__init__(self)
     def __str__(self):
         return '*'
 
 class blackhole(feature):
     "A black hole.  Has no hair, just knows how to identify iself."
-    def __init(self):
-        feature.__init__(self)
     def __str__(self):
-        return '*'
+        return ' '
 
 class starbase(feature):
     "Starbases also have no features, just a location."
@@ -140,8 +142,6 @@
         game.state.bases.remove(self)
     def __str__(self):
         return 'B'
-    def __del__(self):
-        feature.__del__(self)
 
 class quadrant:
     def __init__(self):
@@ -180,9 +180,8 @@
 	self.starkl = None	# destroyed stars
 	self.basekl = None	# destroyed bases
 	self.nromrem = None	# Romulans remaining
-	self.nplankl = None	# destroyed uninhabited planets
-	self.nworldkl = None	# destroyed inhabited planets
-        self.plnets = [];	# List of planets known
+	self.nplankl = None	# destroyed uninhabited planets self.nworldkl = None	# destroyed inhabited planets
+        self.planets = [];	# List of planets known
         self.date = None	# stardate
 	self.remres = None	# remaining resources
 	self. remtime = None	# remaining time
@@ -571,10 +570,10 @@
     game.state.kscmdr = iq
     game.state.galaxy[game.state.kscmdr].klingons += 1
     # check for a helpful planet in the destination quadrant
-    for planet in game.state.plnets:
+    for planet in game.state.planets:
 	if planet.location == game.state.kscmdr and planet.crystals=="present":
 	    # destroy the planet
-	    game.state.plnets.remove(planet)
+	    del planet
             if communicating():
                 if not ipage:
                     pause_game(True)
@@ -596,12 +595,12 @@
     passive = ((NKILLC+NKILLK)/(game.state.date+0.01-game.indate) < 0.1*game.skill*(game.skill+1.0) \
                or (game.state.date-game.indate) < 3.0)
     if not game.iscate and passive:
-	# compute move away from Enterprise
-	idelta = game.state.kscmdr - game.quadrant
+	# coxmpute move away from Enterprise
+	delta = game.state.kscmdr - game.quadrant
         if distance(game.state.kscmdr) > 2.0:
 	    # circulate in space
-	    idelta,x = game.state.kscmdr.y-game.quadrant.y
-	    idelta,y = game.quadrant.x-game.state.kscmdr.x
+	    delta.x = game.state.kscmdr.y-game.quadrant.y
+	    delta.y = game.quadrant.x-game.state.kscmdr.x
     else:
         if len(game.state.bases):
             unschedule("FSCMOVE")
@@ -627,16 +626,16 @@
         if len(nearest) == 0:
             return	# Nothing suitable -- wait until next time
 	# decide how to move toward base
-	idelta = ibq - game.state.kscmdr
+	delta = ibq - game.state.kscmdr
     # maximum movement is 1 quadrant in either or both axis
     delta = delta.sgn()
     # try moving in both x and y directions
-    iq = game.state.kscmdr + idelta
+    iq = game.state.kscmdr + delta
     if movescom(iq, passive):
 	# failed -- try some other maneuvers
-        if ideltax==0 or ideltay==0:
+        if delta.x==0 or delta.y==0:
 	    # attempt angle move
-            if ideltax != 0:
+            if delta.x != 0:
 		iq.y = game.state.kscmdr.y + 1
                 if movescom(iq, passive):
 		    iq.y = game.state.kscmdr.y - 1
@@ -650,7 +649,7 @@
 	    # try moving just in x or y
 	    iq.y = game.state.kscmdr.y
             if movescom(iq, passive):
-		iq.y = game.state.kscmdr.y + ideltay
+		iq.y = game.state.kscmdr.y + delta.y
 		iq.x = game.state.kscmdr.x
 		movescom(iq, passive)
     # check for a base
@@ -720,7 +719,7 @@
 	game.tholian = None
 	return
     # Do nothing if we are blocked
-    if game.quad[next] != empty and not isinstance(game.quad[next]. web):
+    if not (isinstance(game.quad[next], space) or isinstance(game.quad[next], web)):
         return
     # Now place some web
     im = (next - game.tholian.location).sgn()
@@ -728,13 +727,13 @@
 	# move in x axis
 	while game.tholian.location.x != next.x:
 	    game.tholian.location.x += im.x
-            if game.quad[game.tholian.location] == empty:
+            if isinstance(game.quad[game.tholian.location], space):
                 game.quad[game.tholian.location] = web()
     elif game.tholian.y != next.y:
 	# move in y axis
 	while game.tholian.y != next.y:
 	    game.tholian.y += im.y
-            if game.quad[game.tholian.location] == empty:
+            if isinstance(game.quad[game.tholian.location], space):
                 game.quad[game.tholian.location] = web()
     # web is done, move ship
     game.tholian.movesector(next)

Modified: trunk/src/sstlinux.c
===================================================================
--- trunk/src/sstlinux.c	2006-09-27 21:46:35 UTC (rev 636)
+++ trunk/src/sstlinux.c	2006-09-28 08:01:45 UTC (rev 637)
@@ -14,14 +14,17 @@
 void sound(unsigned int freq)
 {
 #ifdef HAVE_LINUX_KD_H
-    if(fd==0) fd=open("/dev/console", O_RDONLY);
-    if(fd>0) ioctl(fd, KDMKTONE, 1193180/freq + (0xFFFF<<16));
+    if (fd==0)
+	fd=open("/dev/console", O_RDONLY);
+    if (fd>0)
+	ioctl(fd, KDMKTONE, 1193180/freq + (0xFFFF<<16));
 #endif
 }
 
 void nosound(void)
 {
 #ifdef HAVE_LINUX_KD_H
-    if(fd>0) ioctl(fd, KDMKTONE, 0);
+    if(fd>0)
+	ioctl(fd, KDMKTONE, 0);
 #endif
 }



From esr at mail.berlios.de  Thu Sep 28 10:20:53 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 28 Sep 2006 10:20:53 +0200
Subject: [Sst-commit-watch] r638 - trunk/src
Message-ID: <200609280820.k8S8Krm5015383@sheep.berlios.de>

Author: esr
Date: 2006-09-28 10:20:52 +0200 (Thu, 28 Sep 2006)
New Revision: 638

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.h
   trunk/src/sst.py
Log:
Change some ugly and misleading names.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-28 08:01:45 UTC (rev 637)
+++ trunk/src/ai.c	2006-09-28 08:20:52 UTC (rev 638)
@@ -267,7 +267,7 @@
     }
 }
 
-void movcom(void) 
+void moveklings(void) 
 /* move a commander */
 {
     coord w; 
@@ -351,10 +351,10 @@
     }
     /* check for a helpful planet */
     for (i = 0; i < game.inplan; i++) {
-	if (same(game.state.plnets[i].w, game.state.kscmdr) &&
-	    game.state.plnets[i].crystals == present) {
+	if (same(game.state.planets[i].w, game.state.kscmdr) &&
+	    game.state.planets[i].crystals == present) {
 	    /* destroy the planet */
-	    DESTROY(&game.state.plnets[i]);
+	    DESTROY(&game.state.planets[i]);
 	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = NOPLANET;
 	    if (!damaged(DRADIO) || game.condition == docked) {
 		if (!*ipage)

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-28 08:01:45 UTC (rev 637)
+++ trunk/src/battle.c	2006-09-28 08:20:52 UTC (rev 638)
@@ -399,7 +399,7 @@
 	    prout(_(" destroyed."));
 	    game.state.nplankl++;
 	    q->planet = NOPLANET;
-	    DESTROY(&game.state.plnets[game.iplnet]);
+	    DESTROY(&game.state.planets[game.iplnet]);
 	    game.iplnet = 0;
 	    invalidate(game.plnet);
 	    game.quad[w.x][w.y] = IHDOT;
@@ -413,7 +413,7 @@
 	    prout(_(" destroyed."));
 	    game.state.nworldkl++;
 	    q->planet = NOPLANET;
-	    DESTROY(&game.state.plnets[game.iplnet]);
+	    DESTROY(&game.state.planets[game.iplnet]);
 	    game.iplnet = 0;
 	    invalidate(game.plnet);
 	    game.quad[w.x][w.y] = IHDOT;
@@ -579,7 +579,7 @@
 
     /* commanders get a chance to tac-move towards you */
     if ((((game.comhere || game.ishere) && !game.justin) || game.skill == SKILL_EMERITUS) && torps_ok) 
-	movcom();
+	moveklings();
 
     /* if no enemies remain after movement, we're done */
     if (game.nenhere==0 || (game.nenhere==1 && iqhere && !iqengry)) 

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-28 08:01:45 UTC (rev 637)
+++ trunk/src/events.c	2006-09-28 08:20:52 UTC (rev 638)
@@ -701,7 +701,7 @@
 			game.state.nplankl++;
 			crmena(true, IHP, sector, scratch);
 			prout(_(" destroyed."));
-			DESTROY(&game.state.plnets[game.iplnet]);
+			DESTROY(&game.state.planets[game.iplnet]);
 			game.iplnet = 0;
 			invalidate(game.plnet);
 			if (game.landed) {
@@ -931,8 +931,8 @@
     if (npdead) {
 	int loop;
 	for (loop = 0; loop < game.inplan; loop++)
-	    if (same(game.state.plnets[loop].w, nq)) {
-		DESTROY(&game.state.plnets[loop]);
+	    if (same(game.state.planets[loop].w, nq)) {
+		DESTROY(&game.state.planets[loop]);
 	    }
     }
     /* Destroy any base in supernovaed quadrant */

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-28 08:01:45 UTC (rev 637)
+++ trunk/src/moving.c	2006-09-28 08:20:52 UTC (rev 638)
@@ -823,7 +823,7 @@
 	   when on planet, which would give us two Galileos! */
 	gotit = false;
 	for (l = 0; l < game.inplan; l++) {
-	    if (game.state.plnets[l].known == shuttle_down) {
+	    if (game.state.planets[l].known == shuttle_down) {
 		gotit = true;
 		if (game.iscraft == onship && game.ship==IHE) {
 		    prout(_("Checkov-  \"Security reports the Galileo has disappeared, Sir!"));

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-28 08:01:45 UTC (rev 637)
+++ trunk/src/planets.c	2006-09-28 08:20:52 UTC (rev 638)
@@ -22,21 +22,21 @@
     prout(_("Spock-  \"Planet report follows, Captain.\""));
     skip(1);
     for (i = 0; i < game.inplan; i++) {
-	if ((game.state.plnets[i].known != unknown
-	    && game.state.plnets[i].inhabited == UNINHABITED)
-	    || (idebug && game.state.plnets[i].w.x !=0)
+	if ((game.state.planets[i].known != unknown
+	    && game.state.planets[i].inhabited == UNINHABITED)
+	    || (idebug && game.state.planets[i].w.x !=0)
 	    ) {
 	    iknow = true;
-	    if (idebug && game.state.plnets[i].known==unknown)
+	    if (idebug && game.state.planets[i].known==unknown)
 		proutn("(Unknown) ");
-	    proutn(cramlc(quadrant, game.state.plnets[i].w));
+	    proutn(cramlc(quadrant, game.state.planets[i].w));
 	    proutn(_("   class "));
-	    proutn(classes[game.state.plnets[i].pclass]);
+	    proutn(classes[game.state.planets[i].pclass]);
 	    proutn("   ");
-	    if (game.state.plnets[i].crystals != present)
+	    if (game.state.planets[i].crystals != present)
 		proutn(_("no "));
 	    prout(_("dilithium crystals present."));
-	    if (game.state.plnets[i].known==shuttle_down) 
+	    if (game.state.planets[i].known==shuttle_down) 
 		prout(_("    Shuttle Craft Galileo on surface."));
 	}
     }
@@ -87,20 +87,20 @@
 	prout(_("Spock- \"No planet in this quadrant, Captain.\""));
 	return;
     }
-    if ((game.plnet.x != 0)&& (game.state.plnets[game.iplnet].known == unknown)) {
+    if ((game.plnet.x != 0)&& (game.state.planets[game.iplnet].known == unknown)) {
 	prout(_("Spock-  \"Sensor scan for %s-"), cramlc(quadrant, game.quadrant));
 	skip(1);
 	prout(_("         Planet at %s is of class %s."),
 	      cramlc(sector,game.plnet),
-	      classes[game.state.plnets[game.iplnet].pclass]);
-	if (game.state.plnets[game.iplnet].known==shuttle_down) 
+	      classes[game.state.planets[game.iplnet].pclass]);
+	if (game.state.planets[game.iplnet].known==shuttle_down) 
 	    prout(_("         Sensors show Galileo still on surface."));
 	proutn(_("         Readings indicate"));
-	if (game.state.plnets[game.iplnet].crystals != present)
+	if (game.state.planets[game.iplnet].crystals != present)
 	    proutn(_(" no"));
 	prout(_(" dilithium crystals present.\""));
-	if (game.state.plnets[game.iplnet].known == unknown)
-	    game.state.plnets[game.iplnet].known = known;
+	if (game.state.planets[game.iplnet].known == unknown)
+	    game.state.planets[game.iplnet].known = known;
     }
 }
 
@@ -111,7 +111,7 @@
     skip(1);
     if (damaged(DTRANSP)) {
 	prout(_("Transporter damaged."));
-	if (!damaged(DSHUTTL) && (game.state.plnets[game.iplnet].known==shuttle_down || game.iscraft == onship)) {
+	if (!damaged(DSHUTTL) && (game.state.planets[game.iplnet].known==shuttle_down || game.iscraft == onship)) {
 	    skip(1);
 	    proutn(_("Spock-  \"May I suggest the shuttle craft, Sir?\" "));
 	    if (ja() == true)
@@ -128,7 +128,7 @@
 	prout(_("Impossible to transport through shields."));
 	return;
     }
-    if (game.state.plnets[game.iplnet].known==unknown) {
+    if (game.state.planets[game.iplnet].known==unknown) {
 	prout(_("Spock-  \"Captain, we have no information on this planet"));
 	prout(_("  and Starfleet Regulations clearly state that in this situation"));
 	prout(_("  you may not go down.\""));
@@ -136,7 +136,7 @@
     }
     if (game.landed) {
 	/* Coming from planet */
-	if (game.state.plnets[game.iplnet].known==shuttle_down) {
+	if (game.state.planets[game.iplnet].known==shuttle_down) {
 	    proutn(_("Spock-  \"Wouldn't you rather take the Galileo?\" "));
 	    if (ja() == true) {
 		chew();
@@ -153,7 +153,7 @@
     }
     else {
 	/* Going to planet */
-	if (game.state.plnets[game.iplnet].crystals==absent) {
+	if (game.state.planets[game.iplnet].crystals==absent) {
 	    prout(_("Spock-  \"Captain, I fail to see the logic in"));
 	    prout(_("  exploring a planet with no dilithium crystals."));
 	    proutn(_("  Are you sure this is wise?\" "));
@@ -183,7 +183,7 @@
     skip(2);
     prout(_("Transport complete."));
     game.landed = !game.landed;
-    if (game.landed && game.state.plnets[game.iplnet].known==shuttle_down) {
+    if (game.landed && game.state.planets[game.iplnet].known==shuttle_down) {
 	prout(_("The shuttle craft Galileo is here!"));
     }
     if (!game.landed && game.imine) {
@@ -203,11 +203,11 @@
 	prout(_("Mining party not on planet."));
 	return;
     }
-    if (game.state.plnets[game.iplnet].crystals == mined) {
+    if (game.state.planets[game.iplnet].crystals == mined) {
 	prout(_("This planet has already been strip-mined for dilithium."));
 	return;
     }
-    else if (game.state.plnets[game.iplnet].crystals == absent) {
+    else if (game.state.planets[game.iplnet].crystals == absent) {
 	prout(_("No dilithium crystals on this planet."));
 	return;
     }
@@ -222,11 +222,11 @@
 	prout(_("there's no reason to mine more at this time."));
 	return;
     }
-    game.optime = (0.1+0.2*Rand())*game.state.plnets[game.iplnet].pclass;
+    game.optime = (0.1+0.2*Rand())*game.state.planets[game.iplnet].pclass;
     if (consumeTime())
 	return;
     prout(_("Mining operation complete."));
-    game.state.plnets[game.iplnet].crystals = mined;
+    game.state.planets[game.iplnet].crystals = mined;
     game.imine = game.ididit = true;
 }
 
@@ -289,7 +289,7 @@
     skip(1);
     if(damaged(DSHUTTL)) {
 	if (game.damage[DSHUTTL] == -1.0) {
-	    if (game.inorbit && game.state.plnets[game.iplnet].known == shuttle_down)
+	    if (game.inorbit && game.state.planets[game.iplnet].known == shuttle_down)
 		prout(_("Ye Faerie Queene has no shuttle craft bay to dock it at."));
 	    else
 		prout(_("Ye Faerie Queene had no shuttle craft."));
@@ -305,11 +305,11 @@
 	prout(_(" not in standard orbit."));
 	return;
     }
-    if ((game.state.plnets[game.iplnet].known != shuttle_down) && game.iscraft != onship) {
+    if ((game.state.planets[game.iplnet].known != shuttle_down) && game.iscraft != onship) {
 	prout(_("Shuttle craft not currently available."));
 	return;
     }
-    if (!game.landed && game.state.plnets[game.iplnet].known==shuttle_down) {
+    if (!game.landed && game.state.planets[game.iplnet].known==shuttle_down) {
 	prout(_("You will have to beam down to retrieve the shuttle craft."));
 	return;
     }
@@ -317,7 +317,7 @@
 	prout(_("Shuttle craft cannot pass through shields."));
 	return;
     }
-    if (game.state.plnets[game.iplnet].known==unknown) {
+    if (game.state.planets[game.iplnet].known==unknown) {
 	prout(_("Spock-  \"Captain, we have no information on this planet"));
 	prout(_("  and Starfleet Regulations clearly state that in this situation"));
 	prout(_("  you may not fly down.\""));
@@ -354,7 +354,7 @@
 	    skip(1);
 	    if (consumeTime())
 		return;
-	    game.state.plnets[game.iplnet].known=shuttle_down;
+	    game.state.planets[game.iplnet].known=shuttle_down;
 	    prout(_("Trip complete."));
 	    return;
 	}
@@ -364,7 +364,7 @@
 	    prout(_("shuttle craft for the trip back to the Enterprise."));
 	    skip(1);
 	    prout(_("The short hop begins . . ."));
-	    game.state.plnets[game.iplnet].known=known;
+	    game.state.planets[game.iplnet].known=known;
 	    game.icraft = true;
 	    skip(1);
 	    game.landed = false;
@@ -393,7 +393,7 @@
 	game.iscraft = offship;
 	if (consumeTime())
 	    return;
-	game.state.plnets[game.iplnet].known = shuttle_down;
+	game.state.planets[game.iplnet].known = shuttle_down;
 	game.landed = true;
 	game.icraft = false;
 	prout(_("Trip complete."));

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-28 08:01:45 UTC (rev 637)
+++ trunk/src/reports.c	2006-09-28 08:20:52 UTC (rev 638)
@@ -350,7 +350,7 @@
     RQ(10,
 	if (game.options & OPTION_WORLDS) {
 	    int plnet = game.state.galaxy[game.quadrant.x][game.quadrant.y].planet;
-	    if (plnet != NOPLANET && game.state.plnets[plnet].inhabited != UNINHABITED)
+	    if (plnet != NOPLANET && game.state.planets[plnet].inhabited != UNINHABITED)
 		prstat(_("Major system"), "%s", systnames[plnet]);
 	    else
 		prout(_("Sector is uninhabited"));

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-28 08:01:45 UTC (rev 637)
+++ trunk/src/setup.c	2006-09-28 08:20:52 UTC (rev 638)
@@ -335,17 +335,17 @@
     for (i = 0; i < game.inplan; i++) {
 	do w = randplace(GALSIZE); 
 	while (game.state.galaxy[w.x][w.y].planet != NOPLANET);
-	game.state.plnets[i].w = w;
+	game.state.planets[i].w = w;
 	if (i < NINHAB) {
-	    game.state.plnets[i].pclass = M;	// All inhabited planets are class M
-	    game.state.plnets[i].crystals = absent;
-	    game.state.plnets[i].known = known;
-	    game.state.plnets[i].inhabited = i;
+	    game.state.planets[i].pclass = M;	// All inhabited planets are class M
+	    game.state.planets[i].crystals = absent;
+	    game.state.planets[i].known = known;
+	    game.state.planets[i].inhabited = i;
 	} else {
-	    game.state.plnets[i].pclass = Rand()*3.0; // Planet class M N or O
-	    game.state.plnets[i].crystals = Rand()*1.5;		// 1 in 3 chance of crystals
-	    game.state.plnets[i].known = unknown;
-	    game.state.plnets[i].inhabited = UNINHABITED;
+	    game.state.planets[i].pclass = Rand()*3.0; // Planet class M N or O
+	    game.state.planets[i].crystals = Rand()*1.5;		// 1 in 3 chance of crystals
+	    game.state.planets[i].known = unknown;
+	    game.state.planets[i].inhabited = UNINHABITED;
 	}
 	if ((game.options & OPTION_WORLDS) || i >= NINHAB)
 	    game.state.galaxy[w.x][w.y].planet = i;
@@ -657,7 +657,7 @@
     // If quadrant needs a planet, put it in
     if (q->planet != NOPLANET) {
 	game.iplnet = q->planet;
-	if (game.state.plnets[q->planet].inhabited == UNINHABITED)
+	if (game.state.planets[q->planet].inhabited == UNINHABITED)
 	    game.plnet = dropin(IHP);
 	else
 	    game.plnet = dropin(IHW);
@@ -669,7 +669,7 @@
 	dropin(IHSTAR);
 
     // Check for RNZ
-    if (game.irhere > 0 && game.klhere == 0 && (q->planet == NOPLANET || game.state.plnets[q->planet].inhabited == UNINHABITED)) {
+    if (game.irhere > 0 && game.klhere == 0 && (q->planet == NOPLANET || game.state.planets[q->planet].inhabited == UNINHABITED)) {
 	game.neutz = true;
 	if (!damaged(DRADIO)) {
 	    skip(1);

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-28 08:01:45 UTC (rev 637)
+++ trunk/src/sst.h	2006-09-28 08:20:52 UTC (rev 638)
@@ -81,8 +81,8 @@
 } feature;
 
 typedef struct {
-    bool snap;		// snapshot taken
-    int crew,		// crew complement
+    bool snap;			// snapshot taken
+    int crew,			// crew complement
 #define FULLCREW	428	/* BSD Trek was 387, that's wrong */
 	remkl,			// remaining klingons
 	remcom,			// remaining commanders
@@ -93,9 +93,9 @@
 	nromrem,		// Romulans remaining
 	nplankl,		// destroyed uninhabited planets
 	nworldkl;		// destroyed inhabited planets
-    planet plnets[PLNETMAX];  // Planet information
+    planet planets[PLNETMAX];	// Planet information
     double date,		// stardate
-	remres,		// remaining resources
+	remres,			// remaining resources
 	remtime;		// remaining time
     coord baseq[BASEMAX+1];	// Base quadrant coordinates
     coord kcmdr[QUADSIZE+1];	// Commander quadrant coordinates
@@ -403,7 +403,7 @@
 void crmena(bool, feature, enum loctype, coord w);
 void deadkl(coord, feature, coord);
 void timwrp(void);
-void movcom(void);
+void moveklings(void);
 void torpedo(double, double, coord, double *, int, int);
 void huh(void);
 void pause_game(bool);

Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-09-28 08:01:45 UTC (rev 637)
+++ trunk/src/sst.py	2006-09-28 08:20:52 UTC (rev 638)
@@ -297,7 +297,7 @@
 
 def communicating():
     "Are we in communication with Starfleet Command?"
-    return (not damaged("DRADIO")) or game.condition == docked
+    return (not damaged("DRADIO")) or game.condition == "docked"
 
 # Code corresponding to ai.c begins here
 
@@ -523,7 +523,7 @@
                 prout(" retreats to sector %s" % ship.location)
         ship.sectormove(next)
 
-def movcom(): 
+def moveklings(): 
     "Allow enemies to move."
     for enemy in self.quad.enemies():
         if enemy.type == "Commander":



From esr at mail.berlios.de  Thu Sep 28 11:19:17 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 28 Sep 2006 11:19:17 +0200
Subject: [Sst-commit-watch] r639 - trunk/src
Message-ID: <200609280919.k8S9JHwO019434@sheep.berlios.de>

Author: esr
Date: 2006-09-28 11:19:16 +0200 (Thu, 28 Sep 2006)
New Revision: 639

Modified:
   trunk/src/ai.c
   trunk/src/events.c
   trunk/src/io.c
   trunk/src/sst.h
   trunk/src/sst.py
Log:
Get rid of obnoxioous visible "have we paused?" state.  This change shouldn't
make any behavioral difference, but it simplifies the call sequence and code 
of a couple of functions.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-28 08:20:52 UTC (rev 638)
+++ trunk/src/ai.c	2006-09-28 09:19:16 UTC (rev 639)
@@ -307,7 +307,7 @@
     sortkl();
 }
 
-static bool movescom(coord iq, bool flag, bool *ipage) 
+static bool movescom(coord iq, bool flag) 
 /* commander movement helper */
 {
     int i;
@@ -357,9 +357,7 @@
 	    DESTROY(&game.state.planets[i]);
 	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = NOPLANET;
 	    if (!damaged(DRADIO) || game.condition == docked) {
-		if (!*ipage)
-		    pause_game(true);
-		*ipage = true;
+		pause_game(true);
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"));
 		proutn(_("   a planet in "));
 		proutn(cramlc(quadrant, game.state.kscmdr));
@@ -372,7 +370,7 @@
     return false; /* looks good! */
 }
 			
-void scom(bool *ipage)
+void scom(void)
 /* move the Super Commander */
 {
     int i, i2, j, ideltax, ideltay, ifindit, iwhichb;
@@ -472,32 +470,32 @@
     /* try moving in both x and y directions */
     iq.x = game.state.kscmdr.x + ideltax;
     iq.y = game.state.kscmdr.y + ideltax;
-    if (movescom(iq, flag, ipage)) {
+    if (movescom(iq, flag)) {
 	/* failed -- try some other maneuvers */
 	if (ideltax==0 || ideltay==0) {
 	    /* attempt angle move */
 	    if (ideltax != 0) {
 		iq.y = game.state.kscmdr.y + 1;
-		if (movescom(iq, flag, ipage)) {
+		if (movescom(iq, flag)) {
 		    iq.y = game.state.kscmdr.y - 1;
-		    movescom(iq, flag, ipage);
+		    movescom(iq, flag);
 		}
 	    }
 	    else {
 		iq.x = game.state.kscmdr.x + 1;
-		if (movescom(iq, flag, ipage)) {
+		if (movescom(iq, flag)) {
 		    iq.x = game.state.kscmdr.x - 1;
-		    movescom(iq, flag, ipage);
+		    movescom(iq, flag);
 		}
 	    }
 	}
 	else {
 	    /* try moving just in x or y */
 	    iq.y = game.state.kscmdr.y;
-	    if (movescom(iq, flag, ipage)) {
+	    if (movescom(iq, flag)) {
 		iq.y = game.state.kscmdr.y + ideltay;
 		iq.x = game.state.kscmdr.x;
-		movescom(iq, flag, ipage);
+		movescom(iq, flag);
 	    }
 	}
     }
@@ -518,9 +516,7 @@
 	    if (damaged(DRADIO) && game.condition != docked)
 		return; /* no warning */
 	    game.iseenit = true;
-	    if (!*ipage)
-		pause_game(true);
-	    *ipage = true;
+	    pause_game(true);
 	    proutn(_("Lt. Uhura-  \"Captain, the starbase in "));
 	    proutn(cramlc(quadrant, game.state.kscmdr));
 	    skip(1);
@@ -544,9 +540,7 @@
 	 (damaged(DRADIO) && game.condition != docked) ||
 	 !game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].charted))
 	return;
-    if (!*ipage)
-	pause_game(true);
-    *ipage = true;
+    pause_game(true);
     prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"));
     proutn(_("   the Super-commander is in "));
     proutn(cramlc(quadrant, game.state.kscmdr));

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-28 08:20:52 UTC (rev 638)
+++ trunk/src/events.c	2006-09-28 09:19:16 UTC (rev 639)
@@ -62,11 +62,13 @@
 {
     int evcode, i=0, j, k, l;
     double fintim = game.state.date + game.optime, datemin, xtime, repair, yank=0;
-    bool radio_was_broken, ictbeam = false, ipage = false, istract = false;
+    bool radio_was_broken, ictbeam = false, istract = false;
     struct quadrant *pdest, *q;
     coord w, hold;
     event *ev, *ev2;
 
+    pause_reset();
+
     if (idebug) {
 	prout("=== EVENTS from %.2f to %.2f:", game.state.date, fintim);
 	for (i = 1; i < NEVENTS; i++) {
@@ -156,9 +158,7 @@
 	game.optime -= xtime;
 	switch (evcode) {
 	case FSNOVA: /* Supernova */
-	    if (!ipage)
-		pause_game(true);
-	    ipage=true;
+	    pause_game(true);
 	    snova(false, NULL);
 	    schedule(FSNOVA, expran(0.5*game.intime));
 	    if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova)
@@ -198,9 +198,7 @@
 	    }
 	    /* tractor beaming cases merge here */
 	    yank = sqrt(yank);
-	    if (!ipage)
-		pause_game(true);
-	    ipage=true;
+	    pause_game(true);
 	    game.optime = (10.0/(7.5*7.5))*yank; /* 7.5 is yank rate (warp 7.5) */
 	    ictbeam = true;
 	    skip(1);
@@ -299,9 +297,7 @@
 	    if (!damaged(DRADIO) && game.condition != docked) 
 		break; /* No warning :-( */
 	    game.iseenit = true;
-	    if (!ipage)
-		pause_game(true);
-	    ipage = true;
+	    pause_game(true);
 	    skip(1);
 	    proutn(_("Lt. Uhura-  \"Captain, the starbase in "));
 	    prout(cramlc(quadrant, game.battle));
@@ -348,9 +344,7 @@
 	    else if (game.state.rembase != 1 &&
 		     (!damaged(DRADIO) || game.condition == docked)) {
 		/* Get word via subspace radio */
-		if (!ipage)
-		    pause_game(true);		    
-		ipage = true;
+		pause_game(true);		    
 		skip(1);
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Command reports that"));
 		proutn(_("   the starbase in "));
@@ -380,7 +374,7 @@
 	    schedule(FSCMOVE, 0.2777);
 	    if (!game.ientesc && !istract && game.isatb != 1 &&
 			(!game.iscate || !game.justin)) 
-		scom(&ipage);
+		scom();
 	    break;
 	case FDSPROB: /* Move deep space probe */
 	    schedule(FDSPROB, 0.01);
@@ -395,9 +389,7 @@
 		    game.state.galaxy[game.probec.x][game.probec.y].supernova) {
 		    // Left galaxy or ran into supernova
 		    if (!damaged(DRADIO) || game.condition == docked) {
-			if (!ipage)
-			    pause_game(true);
-			ipage = true;
+			pause_game(true);
 			skip(1);
 			proutn(_("Lt. Uhura-  \"The deep space probe "));
 			if (!VALID_QUADRANT(j, i))
@@ -410,9 +402,7 @@
 		    break;
 		}
 		if (!damaged(DRADIO) || game.condition == docked) {
-		    if (!ipage)
-			pause_game(true);
-		    ipage = true;
+		    pause_game(true);
 		    skip(1);
 		    proutn(_("Lt. Uhura-  \"The deep space probe is now in "));
 		    proutn(cramlc(quadrant, game.probec));

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-09-28 08:20:52 UTC (rev 638)
+++ trunk/src/io.c	2006-09-28 09:19:16 UTC (rev 639)
@@ -7,6 +7,7 @@
 #include "sstlinux.h"
 
 static int rows, linecount;	/* for paging */
+static bool pause_latch;
 
 WINDOW *curwnd;
 WINDOW *fullscreen_window;
@@ -89,42 +90,52 @@
 	getch();
 }
 
+void pause_reset(void)
+{
+    pause_latch = false;
+}
+
 void pause_game(bool announcement) 
 {
-    char *prompt;
-    char buf[BUFSIZ];
-    if (announcement) {
-	if (game.skill > SKILL_FAIR)
-	    prompt = _("[ANOUNCEMENT ARRIVING...]");
-	else
-	    prompt = _("[IMPORTANT ANNOUNCEMENT ARRIVING -- PRESS ENTER TO CONTINUE]");
-    }
+    if (pause_latch)
+	return;
     else {
-	if (game.skill > SKILL_FAIR)
-	    prompt = _("[CONTINUE?]");
-	else
-	    prompt = _("[PRESS ENTER TO CONTINUE]");
-
-    }
-    if (game.options & OPTION_CURSES) {
-	drawmaps(0);
-	setwnd(prompt_window);
-	wclear(prompt_window);
-	waddstr(prompt_window, prompt);
-	wgetnstr(prompt_window, buf, sizeof(buf));
-	wclear(prompt_window);
-	wrefresh(prompt_window);
-	setwnd(message_window);
-    } else {
-	putchar('\n');
-	proutn(prompt);
-	fgets(buf, sizeof(buf), stdin);
+	char *prompt;
+	char buf[BUFSIZ];
 	if (announcement) {
-	    int j;
-	    for (j = 0; j < rows; j++)
-		putchar('\n');
+	    if (game.skill > SKILL_FAIR)
+		prompt = _("[ANOUNCEMENT ARRIVING...]");
+	    else
+		prompt = _("[IMPORTANT ANNOUNCEMENT ARRIVING -- PRESS ENTER TO CONTINUE]");
 	}
-	linecount = 0;
+	else {
+	    if (game.skill > SKILL_FAIR)
+		prompt = _("[CONTINUE?]");
+	    else
+		prompt = _("[PRESS ENTER TO CONTINUE]");
+
+	}
+	if (game.options & OPTION_CURSES) {
+	    drawmaps(0);
+	    setwnd(prompt_window);
+	    wclear(prompt_window);
+	    waddstr(prompt_window, prompt);
+	    wgetnstr(prompt_window, buf, sizeof(buf));
+	    wclear(prompt_window);
+	    wrefresh(prompt_window);
+	    setwnd(message_window);
+	} else {
+	    putchar('\n');
+	    proutn(prompt);
+	    fgets(buf, sizeof(buf), stdin);
+	    if (announcement) {
+		int j;
+		for (j = 0; j < rows; j++)
+		    putchar('\n');
+	    }
+	    linecount = 0;
+	}
+	pause_latch = true;
     }
 }
 

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-28 08:20:52 UTC (rev 638)
+++ trunk/src/sst.h	2006-09-28 09:19:16 UTC (rev 639)
@@ -406,10 +406,11 @@
 void moveklings(void);
 void torpedo(double, double, coord, double *, int, int);
 void huh(void);
+void pause_reset(void);
 void pause_game(bool);
 void nova(coord);
 void snova(bool, coord *);
-void scom(bool *);
+void scom(void);
 void hittem(double *);
 bool isit(char *);
 void preport(void);

Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-09-28 08:20:52 UTC (rev 638)
+++ trunk/src/sst.py	2006-09-28 09:19:16 UTC (rev 639)
@@ -544,7 +544,6 @@
 
 def movescom(ship, avoid):
     # commander movement helper
-    global ipage
     if game.state.kscmdr == game.quadrant or \
 	game.state.galaxy[iq].supernova or \
         game.state.galaxy[iq].klingons > MAXKLQUAD-1: 
@@ -575,9 +574,7 @@
 	    # destroy the planet
 	    del planet
             if communicating():
-                if not ipage:
                     pause_game(True)
-		ipage = true
 		prout("Lt. Uhura-  \"Captain, Starfleet Intelligence reports")
 		proutn(_("   a planet in "))
 		proutn(cramlc(quadrant, game.state.kscmdr))
@@ -669,9 +666,7 @@
                 if not communicating():
                     return # no warning
                 game.iseenit = True
-                if not ipage:
-                    pause_game(true)
-                ipage = True
+                pause_game(true)
                 proutn(_("Lt. Uhura-  \"Captain, the starbase in "))
                 proutn(cramlc(quadrant, game.state.kscmdr))
                 skip(1)
@@ -690,9 +685,7 @@
     if (Rand() > 0.2 or not communicating() or
         not game.state.galaxy[game.state.kscmdr].charted):
 	return
-    if ipage:
-        pause_game(true)
-        ipage = true
+    pause_game(true)
     prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"))
     proutn(_("   the Super-commander is in "))
     proutn(cramlc(quadrant, game.state.kscmdr))



From esr at mail.berlios.de  Thu Sep 28 11:34:55 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 28 Sep 2006 11:34:55 +0200
Subject: [Sst-commit-watch] r640 - trunk/src
Message-ID: <200609280934.k8S9Yt7P020508@sheep.berlios.de>

Author: esr
Date: 2006-09-28 11:34:55 +0200 (Thu, 28 Sep 2006)
New Revision: 640

Modified:
   trunk/src/sst.py
Log:
Reset the translation, we're going to redo it with ctopy.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-09-28 09:19:16 UTC (rev 639)
+++ trunk/src/sst.py	2006-09-28 09:34:55 UTC (rev 640)
@@ -248,7 +248,7 @@
         self.skill = None		# levels: none, novice, fair, good,
         				# expert, emeritus
         # Integer nembers sart here
-	self.inkling = None		# initial number of klingons
+x	self.inkling = None		# initial number of klingons
 	self.inbase = None		# initial number of bases
 	self.incom = None		# initial number of commanders
 	self.inscom = None		# initial number of commanders
@@ -295,456 +295,4 @@
 	self.probeiny = None		#
 	self.height = None		# height of orbit around planet
 
-def communicating():
-    "Are we in communication with Starfleet Command?"
-    return (not damaged("DRADIO")) or game.condition == "docked"
 
-# Code corresponding to ai.c begins here
-
-def tryexit(look, ship, irun):
-    # a bad guy attempts to bug out of the quadrant
-    iq = coord()
-    iq.x = game.quadrant.x+(look.x+(QUADSIZE-1))/QUADSIZE - 1
-    iq.y = game.quadrant.y+(look.y+(QUADSIZE-1))/QUADSIZE - 1
-    if not valid_quadrant(iq) or \
-	game.state.galaxy[iq].supernova or \
-        game.state.galaxy[iq].klingons > MAXKLQUAD-1:
-	return False;	# no can do -- neg energy, supernovae, or >MAXKLQUAD-1 Klingons
-    if ship.type == "Romulan":
-        return False	# Romulans cannot escape
-    if not irun:
-	# avoid intruding on another commander's territory
-        if ship.type == "Commander":
-            if iq in gamestate.kcmdr:
-                return False
-	    # refuse to leave if currently attacking starbase:
-            if game.battle == game.quadrant:
-                return False;
-	# don't leave if over 1000 units of energy
-        if ship.power > 1000.0:
-            return false;
-    # Print escape message and move out of quadrant.
-    # We know this if either short or long range sensors are working
-    if not damaged("DSRSENS") or not damaged("DLRSENS") or game.condition=="docked":
-	crmena(True, "sector", ship)
-	prout(" escapes to quadrant %s (and regains strength)." % iq)
-    # handle local matters related to escape
-    game.quad[ship.location] = None;
-    if game.condition != "docked":
-        newcnd()
-    # Handle global matters related to escape
-    game.state.galaxy[game.quadrant].klingons -= 1
-    game.state.galaxy[iq].klingons += 1
-    if ship.type == "Super-Commander":
-	game.ishere = False
-	game.iscate = False
-	game.ientesc = False
-	game.isatb = 0
-	schedule("FSCMOVE", 0.2777)
-	unschedule("FSCDBAS")
-	game.state.kscmdr = iq
-    else:
-        for (n, cmdr) in enumerate(game.state.kcmdr):
-            if cmdr == game.quadrant:
-		game.state.kcmdr[n] = iq
-		break
-	game.comhere = False
-    return True		# successful exit
-
-def sgn(n): n / abs(n)
-
-'''
-Algorithm for moving bad guys:
-
- * Enterprise has "force" based on condition of phaser and photon torpedoes.
- If both are operating full strength, force is 1000. If both are damaged,
- force is -1000. Having shields down subtracts an additional 1000.
-
- * Enemy has forces equal to the energy of the attacker plus
- 100*(K+R) + 500*(C+S) - 400 for novice through good levels OR
- 346*K + 400*R + 500*(C+S) - 400 for expert and emeritus.
-
- Attacker Initial energy levels (nominal):
- Klingon   Romulan   Commander   Super-Commander
- Novice    400        700        1200        
- Fair      425        750        1250
- Good      450        800        1300        1750
- Expert    475        850        1350        1875
- Emeritus  500        900        1400        2000
- VARIANCE   75        200         200         200
-
- Enemy vessels only move prior to their attack. In Novice - Good games
- only commanders move. In Expert games, all enemy vessels move if there
- is a commander present. In Emeritus games all enemy vessels move.
-
- *  If Enterprise is not docked, an agressive action is taken if enemy
- forces are 1000 greater than Enterprise.
-
- Agressive action on average cuts the distance between the ship and
- the enemy to 1/4 the original.
-
- *  At lower energy advantage, movement units are proportional to the
- advantage with a 650 advantage being to hold ground, 800 to move forward
- 1, 950 for two, 150 for back 4, etc. Variance of 100.
-
- If docked, is reduced by roughly 1.75*game.skill, generally forcing a
- retreat, especially at high skill levels.
-
- *  Motion is limited to skill level, except for SC hi-tailing it out.
-'''
-
-def movebaddy(ship):
-    # tactical movement for the bad guys
-    bugout = False
-    # This should probably be just game.comhere + game.ishere
-    if game.skill >= SKILL_EXPERT:
-        nbaddys = int((game.comhere*2 + game.ishere*2+game.klhere*1.23+game.irhere*1.5)/2.0)
-    else:
-	nbaddys = game.comhere + game.ishere
-    dist1 = ship.distance()
-    mdist = round(dist1 + 0.5)		# Nearest integer distance
-    # If SC, check with spy to see if should high-tail it
-    if ship.type == "Super-Commander" and \
-           (ship.power <= 500.0 or (game.condition==docked and not damaged("DPHOTON"))):
-	bugout = True;
-	motion = -QUADSIZE;
-    else:
-	# decide whether to advance, retreat, or hold position
-	forces = ship.power + 100.0*len(game.quad.enemies()) + 400*(nbaddys-1)
-        if not game.shldup:
-            forces += 1000.0 		# Good for enemy if shield is down!
-        if not damaged("DPHASER") or not damaged("DPHOTON"):
-            if damaged(DPHASER):
-		forces += 300.0
-	    else:
-		forces -= 0.2*(game.energy - 2500.0);
-	    if damaged("DPHOTON"):
-		forces += 300.0
-	    else:
-		forces -= 50.0*game.torps
-	else:
-	    # phasers and photon tubes both out!
-	    forces += 1000.0
-	motion = 0;
-        if forces <= 1000.0 and game.condition != "docked":	# Typical case
-	    motion = ((forces+200.0*Rand())/150.0) - 5.0
-	else:
-            if forces > 1000.0:	# Very strong -- move in for kill
-		motion = (1.0-square(Rand()))*dist1 + 1.0
-	    if game.condition == "docked" and "base" in game.options:
-                 # protected by base -- back off !
-		motion -= game.skill * (2.0-Rand()**2)
-	if idebug:
-	    proutn("=== MOTION = %1.2f, FORCES = %1.2f, ", motion, forces)
-	# don't move if no motion
-        if motion == 0:
-            return
-	# Limit motion according to skill
-        if abs(motion) > game.skill:
-            if motion < 0:
-                motion = -game.kill
-            else:
-                motion = game.skill
-    # calculate preferred number of steps
-    nsteps = abs(motion)
-    if motion > 0 and nsteps > mdist: # don't overshoot
-        nsteps = mdist
-    if nsteps > QUADSIZE: # This shouldn't be necessary
-        nsteps = QUADSIZE
-    if nsteps < 1:  # This shouldn't be necessary
-        nsteps = 1
-    if idebug:
-	proutn("NSTEPS = %d:", nsteps)
-    # Compute preferred values of delta X and Y
-    me = game.sector - com;
-    if 2.0 * abs(me.x) < abs(me.y):
-        me.x = 0;
-    if 2.0 * abs(me.y) < abs(game.sector.x-com.x):
-        me.y = 0;
-    if me.x != 0: me.x = sgn(me.x*motion)
-    if me.y != 0: me.y = sgn(me.y*motion)
-    next = com;
-    # main move loop
-    for ll in range(nsteps):
-        if idebug:
-	    proutn(" %d", ll+1)
-	# Check if preferred position available
-	look = next + me
-	krawl = me.sgn()
-	success = False
-	attempts = 0 # Settle meysterious hang problem
-        while attempts < 20 and not success:
-            attempts += 1
-            if look.x < 1 or look.x > QUADSIZE:
-                if motion < 0 and tryexit(look, ship, bugout):
-		    return
-                if krawl.x == me.x or me.y == 0:
-                    break
-		look.x = next.x + krawl.x
-		krawl.x = -krawl.x
-	    elif look.y < 1 or look.y > QUADSIZE:
-                if motion < 0 and tryexit(look, ship, bugout):
-                    return
-                if krawl.y == me.y or me.x == 0:
-                    break
-                look.y = next.y + krawl.y
-                krawl.y = -krawl.y
-	    elif "ramming" in game.options and game.quad[look] != IHDOT:
-		# See if we should ram ship
-                if game.quad[look] == game.ship and ienm in (IHC, IHS):
-		    ram(true, ienm, com)
-		    return
-                if krawl.x != me.x and me.y != 0:
-		    look.x = next.x + krawlx
-		    krawl.x = -krawl.x
-		elif krawly != me.y and me.x != 0:
-		    look.y = next.y + krawly
-		    krawl.y = -krawl.y
-		else:
-                    break # we have failed
-	    else:
-                success = True
-        if success:
-	    next = look
-            if idebug:
-		proutn(str(next))
-	else:
-            break # done early
-    if idebug:
-	prout("")
-    # Put ship in place within same quadrant
-    if next != ship.location:
-	# it moved
-        if not damaged("DSRSENS") or game.condition == "docked":
-	    proutn("*** %s from sector %s" % (ship, ship.location))
-            if ship.distance() < dist1:
-                prout(" advances to sector %s" % ship.location)
-            else:
-                prout(" retreats to sector %s" % ship.location)
-        ship.sectormove(next)
-
-def moveklings(): 
-    "Allow enemies to move."
-    for enemy in self.quad.enemies():
-        if enemy.type == "Commander":
-            movebaddy(enemy)
-            break
-    for enemy in self.quad.enemies():
-        if enemy.type == "Super-Commander":
-            movebaddy(enemy)
-            break
-    # Ff skill level is high, move other Klingons and Romulans too!
-    # Move these last so they can base their actions on what the
-    # commander(s) do.
-    if game.skill >= SKILL_EXPERT and "movebaddy" in game.options: 
-        for enemy in self.quad.enemies():
-            if enemy.type in ("Klingon", "Romulan"):
-                movebaddy(enemy)
-                break
-
-def movescom(ship, avoid):
-    # commander movement helper
-    if game.state.kscmdr == game.quadrant or \
-	game.state.galaxy[iq].supernova or \
-        game.state.galaxy[iq].klingons > MAXKLQUAD-1: 
-	return True
-    if avoid:
-	# Avoid quadrants with bases if we want to avoid Enterprise
-        for base in game.state.starbases:
-            if base.location == ship.location:
-		return True
-    if game.justin and not game.iscate:
-        return True
-    # Super-Commander has scooted, Remove him from current quadrant.
-    if game.state.kscmdr == game.quadrant:
-	game.iscate = False
-	game.isatb = 0
-	game.ientesc = False
-	unschedule("FSCDBAS")
-        if game.condition != "docked":
-            newcnd()
-        ship.sectormove(None)
-    # do the actual move
-    game.state.galaxy[game.state.kscmdr].klingons -= 1
-    game.state.kscmdr = iq
-    game.state.galaxy[game.state.kscmdr].klingons += 1
-    # check for a helpful planet in the destination quadrant
-    for planet in game.state.planets:
-	if planet.location == game.state.kscmdr and planet.crystals=="present":
-	    # destroy the planet
-	    del planet
-            if communicating():
-                    pause_game(True)
-		prout("Lt. Uhura-  \"Captain, Starfleet Intelligence reports")
-		proutn(_("   a planet in "))
-		proutn(cramlc(quadrant, game.state.kscmdr))
-		prout(" has been destroyed")
-		prout("   by the Super-commander.\"")
-	    break
-    return False # looks good!
-			
-def scom():
-    # move the Super Commander
-    if (idebug):
-        prout("== SCOM")
-
-    # Decide on being active or passive
-    passive = ((NKILLC+NKILLK)/(game.state.date+0.01-game.indate) < 0.1*game.skill*(game.skill+1.0) \
-               or (game.state.date-game.indate) < 3.0)
-    if not game.iscate and passive:
-	# coxmpute move away from Enterprise
-	delta = game.state.kscmdr - game.quadrant
-        if distance(game.state.kscmdr) > 2.0:
-	    # circulate in space
-	    delta.x = game.state.kscmdr.y-game.quadrant.y
-	    delta.y = game.quadrant.x-game.state.kscmdr.x
-    else:
-        if len(game.state.bases):
-            unschedule("FSCMOVE")
-	    return
-	sc = game.state.kscmdr
-	# compute distances to starbases
-        game.starbases.sort(lambda x, y: cmp(distance(x, game.quadrant), distance(y, game.quadrant)))
-	# look for nearest base without a commander, no Enterprise, and
-	# without too many Klingons, and not already under attack.
-        nearest = filter(game.starbases,
-                         lambda x: game.state.galaxy[x].supernova \
-                         and game.state.galaxy[x].klingons <= MAXKLQUAD-1)
-        if game.quadrant in nearest:
-            nearest.remove(game.quadrant)
-        if game.battle in nearest:
-            nearest.remove(game.battle)
-        # if there is a commander, and no other base is appropriate,
-        # we will take the one with the commander
-        nocmd = filter(lambda x: x.location not in game.state.kcmdr, nearest)
-        if len(nocmd):
-            nearest = nocmd
-        ibq = nearest[0]
-        if len(nearest) == 0:
-            return	# Nothing suitable -- wait until next time
-	# decide how to move toward base
-	delta = ibq - game.state.kscmdr
-    # maximum movement is 1 quadrant in either or both axis
-    delta = delta.sgn()
-    # try moving in both x and y directions
-    iq = game.state.kscmdr + delta
-    if movescom(iq, passive):
-	# failed -- try some other maneuvers
-        if delta.x==0 or delta.y==0:
-	    # attempt angle move
-            if delta.x != 0:
-		iq.y = game.state.kscmdr.y + 1
-                if movescom(iq, passive):
-		    iq.y = game.state.kscmdr.y - 1
-		    movescom(iq, passive)
-	    else:
-		iq.x = game.state.kscmdr.x + 1
-                if movescom(iq, passive):
-		    iq.x = game.state.kscmdr.x - 1
-		    movescom(iq, passive)
-	else:
-	    # try moving just in x or y
-	    iq.y = game.state.kscmdr.y
-            if movescom(iq, passive):
-		iq.y = game.state.kscmdr.y + delta.y
-		iq.x = game.state.kscmdr.x
-		movescom(iq, passive)
-    # check for a base
-    if len(game.state.bases) == 0:
-	unschedule("FSCMOVE")
-    else:
-        for ibq in game.bases:
-            if ibq == game.state.kscmdr and game.state.kscmdr == game.battle:
-                # attack the base
-                if passive:
-                    return # no, don't attack base!
-                game.iseenit = false
-                game.isatb = 1
-                schedule("FSCDBAS", 1.0 +2.0*Rand())
-                if is_scheduled("FCDBAS"):
-                    postpone("FSCDBAS", scheduled("FCDBAS")-game.state.date)
-                if not communicating():
-                    return # no warning
-                game.iseenit = True
-                pause_game(true)
-                proutn(_("Lt. Uhura-  \"Captain, the starbase in "))
-                proutn(cramlc(quadrant, game.state.kscmdr))
-                skip(1)
-                prout("   reports that it is under attack from the Klingon Super-commander.")
-                proutn("   It can survive until stardate %d.\"",
-                       int(scheduled(FSCDBAS)))
-                if not game.resting:
-                    return
-                prout("Mr. Spock-  \"Captain, shall we cancel the rest period?\"")
-                if ja() == false:
-                    return
-                game.resting = False
-                game.optime = 0.0 # actually finished
-                return
-    # Check for intelligence report
-    if (Rand() > 0.2 or not communicating() or
-        not game.state.galaxy[game.state.kscmdr].charted):
-	return
-    pause_game(true)
-    prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"))
-    proutn(_("   the Super-commander is in "))
-    proutn(cramlc(quadrant, game.state.kscmdr))
-    prout(".\"")
-    return
-
-def movetho(void):
-    "Move the Tholian (an instance of ship type pointed at by game.tholian)." 
-    if not game.tholian or game.justin:
-        return
-    next = coord()
-    if game.tholian.location.x == 1 and game.tholian.location.y == 1:
-	next.x = 1
-        next.y = QUADSIZE
-    elif game.tholian.location.x == 1 and game.tholian.location.y == QUADSIZE:
-	next.x = next.y = QUADSIZE
-    elif game.tholian.location.x == QUADSIZE and game.tholian.location.y == QUADSIZE:
-	next.x = QUADSIZE
-        next.y = 1
-    elif game.tholian.location.x == QUADSIZE and game.tholian.location.y == 1:
-	next.x = next.y = 1
-    else:
-	# something is wrong!
-	game.tholian = None
-	return
-    # Do nothing if we are blocked
-    if not (isinstance(game.quad[next], space) or isinstance(game.quad[next], web)):
-        return
-    # Now place some web
-    im = (next - game.tholian.location).sgn()
-    if game.tholian.x != next.x:
-	# move in x axis
-	while game.tholian.location.x != next.x:
-	    game.tholian.location.x += im.x
-            if isinstance(game.quad[game.tholian.location], space):
-                game.quad[game.tholian.location] = web()
-    elif game.tholian.y != next.y:
-	# move in y axis
-	while game.tholian.y != next.y:
-	    game.tholian.y += im.y
-            if isinstance(game.quad[game.tholian.location], space):
-                game.quad[game.tholian.location] = web()
-    # web is done, move ship
-    game.tholian.movesector(next)
-    # check to see if all holes plugged
-    for i in range(1, QUADSIZE+1):
-	if (not isinstance(game.quad[(1,i)],web)) and game.quad[(1,i)]!=game.tholian:
-            return
-        if (not isinstance(game.quad[(QUADSIZE,i)],web)) and game.quad[(QUADSIZE,i)]!=game.tholian:
-            return
-        if (not isinstance(game.quad[(i,1)],web)) and game.quad[(i,1)]!=game.tholian:
-            return
-        if (not isinstance(game.quad[(i.QUADSIZE)],web)) and game.quad[(i,QUADSIZE)]!=game.tholian:
-            return
-    # All plugged up -- Tholian splits
-    game.quad[game.tholian] = web()
-    ship.movesector(None)
-    crmena(True, IHT, sector, game.tholian)
-    prout(" completes web.")
-    game.tholian = None
-    return
-



From esr at mail.berlios.de  Thu Sep 28 11:48:31 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 28 Sep 2006 11:48:31 +0200
Subject: [Sst-commit-watch] r641 - trunk/src
Message-ID: <200609280948.k8S9mVEk021353@sheep.berlios.de>

Author: esr
Date: 2006-09-28 11:48:31 +0200 (Thu, 28 Sep 2006)
New Revision: 641

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/moving.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
More elimination of FORTAN-style if statements.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-28 09:34:55 UTC (rev 640)
+++ trunk/src/ai.c	2006-09-28 09:48:31 UTC (rev 641)
@@ -12,7 +12,8 @@
 	game.state.galaxy[iq.x][iq.y].supernova ||
 	game.state.galaxy[iq.x][iq.y].klingons > MAXKLQUAD-1)
 	return false; /* no can do -- neg energy, supernovae, or >MAXKLQUAD-1 Klingons */
-    if (ienm == IHR) return false; /* Romulans cannot escape! */
+    if (ienm == IHR)
+	return false; /* Romulans cannot escape! */
     if (!irun) {
 	/* avoid intruding on another commander's territory */
 	if (ienm == IHC) {
@@ -134,7 +135,8 @@
  */
 
 	forces = game.kpower[loccom]+100.0*game.nenhere+400*(nbaddys-1);
-	if (!game.shldup) forces += 1000; /* Good for enemy if shield is down! */
+	if (!game.shldup)
+	    forces += 1000; /* Good for enemy if shield is down! */
 	if (!damaged(DPHASER) || !damaged(DPHOTON)) {
 	    if (damaged(DPHASER)) /* phasers damaged */
 		forces += 300.0;
@@ -169,9 +171,12 @@
     }
     /* calculate preferred number of steps */
     nsteps = motion < 0 ? -motion : motion;
-    if (motion > 0 && nsteps > mdist) nsteps = mdist; /* don't overshoot */
-    if (nsteps > QUADSIZE) nsteps = QUADSIZE; /* This shouldn't be necessary */
-    if (nsteps < 1) nsteps = 1; /* This shouldn't be necessary */
+    if (motion > 0 && nsteps > mdist)
+	nsteps = mdist; /* don't overshoot */
+    if (nsteps > QUADSIZE)
+	nsteps = QUADSIZE; /* This shouldn't be necessary */
+    if (nsteps < 1)
+	nsteps = 1; /* This shouldn't be necessary */
     if (idebug) {
 	proutn("NSTEPS = %d:", nsteps);
     }
@@ -451,7 +456,8 @@
 		break;
 	    }
 	}
-	if (ifindit==0) return; /* Nothing suitable -- wait until next time*/
+	if (ifindit==0)
+	    return; /* Nothing suitable -- wait until next time*/
 	ibq = game.state.baseq[iwhichb];
 	/* decide how to move toward base */
 	ideltax = ibq.x - game.state.kscmdr.x;
@@ -507,7 +513,8 @@
 	ibq = game.state.baseq[i];
 	if (same(ibq, game.state.kscmdr) && same(game.state.kscmdr, game.battle)) {
 	    /* attack the base */
-	    if (flag) return; /* no, don't attack base! */
+	    if (flag)
+		return; /* no, don't attack base! */
 	    game.iseenit = false;
 	    game.isatb = 1;
 	    schedule(FSCDBAS, 1.0 +2.0*Rand());

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-28 09:34:55 UTC (rev 640)
+++ trunk/src/battle.c	2006-09-28 09:48:31 UTC (rev 641)
@@ -538,7 +538,8 @@
 	    if (loop2 < loop1)
 		continue;
 	    ktr += 1;
-	    if (ktr==3) skip(1);
+	    if (ktr==3)
+		skip(1);
 	    proutn(_(" and "));
 	}
 	proutn(device[j]);
@@ -597,7 +598,8 @@
 	where = sector;
 
     for_local_enemies(loop) {
-	if (game.kpower[loop] < 0) continue;	/* too weak to attack */
+	if (game.kpower[loop] < 0)
+	    continue;	/* too weak to attack */
 	/* compute hit strength and diminish shield power */
 	r = Rand();
 	/* Increase chance of photon torpedos if docked or enemy energy low */
@@ -617,7 +619,8 @@
 	    (iquad==IHS && r > 0.07) ||
 	    (iquad==IHQUEST && r > 0.05);
 	if (usephasers) {	    /* Enemy uses phasers */
-	    if (game.condition == docked) continue; /* Don't waste the effort! */
+	    if (game.condition == docked)
+		continue; /* Don't waste the effort! */
 	    attempt = true; /* Attempt to attack */
 	    dustfac = 0.8+0.05*Rand();
 	    hit = game.kpower[loop]*pow(dustfac,game.kavgd[loop]);

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-28 09:34:55 UTC (rev 640)
+++ trunk/src/events.c	2006-09-28 09:48:31 UTC (rev 641)
@@ -832,7 +832,8 @@
 		stars += game.state.galaxy[nq.x][nq.y].stars;
 	    }
 	}
-	if (stars == 0) return; /* nothing to supernova exists */
+	if (stars == 0)
+	    return; /* nothing to supernova exists */
 	num = Rand()*stars + 1;
 	for_quadrants(nq.x) {
 	    for_quadrants(nq.y) {

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-28 09:34:55 UTC (rev 640)
+++ trunk/src/moving.c	2006-09-28 09:48:31 UTC (rev 641)
@@ -109,7 +109,8 @@
 		    prout(_("YOU WILL BE DESTROYED."));
 		}
 		/* Compute final position in new quadrant */
-		if (trbeam) return; /* Don't bother if we are to be beamed */
+		if (trbeam) /* Don't bother if we are to be beamed */
+		    return;
 		game.quadrant.x = (w.x+(QUADSIZE-1))/QUADSIZE;
 		game.quadrant.y = (w.y+(QUADSIZE-1))/QUADSIZE;
 		game.sector.x = w.x - QUADSIZE*(game.quadrant.x-1);
@@ -564,7 +565,11 @@
 		   100.0*game.optime/game.state.remtime);
 	    prout(_(" percent of our"));
 	    proutn(_("  remaining time.  Are you sure this is wise?\" "));
-	    if (ja() == false) { game.ididit = false; game.optime=0; return;}
+	    if (ja() == false) {
+		game.ididit = false;
+		game.optime=0; 
+		return;
+	    }
 	}
     }
     /* Entry WARPX */
@@ -1165,7 +1170,8 @@
 		if (VALID_SECTOR(game.sector.x, game.sector.y) &&
 		    game.quad[game.sector.x][game.sector.y] == IHDOT) break;
 	    }
-	    if (l < QUADSIZE+1) break; /* found a spot */
+	    if (l < QUADSIZE+1)
+		break; /* found a spot */
 	    game.sector.x=QUADSIZE/2;
 	    game.sector.y=QUADSIZE/2;
 	    newqad(true);

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-28 09:34:55 UTC (rev 640)
+++ trunk/src/reports.c	2006-09-28 09:48:31 UTC (rev 641)
@@ -480,7 +480,8 @@
 	proutn(_("Time or arrival date? "));
 	if (scan()==IHREAL) {
 	    ttime = aaitem;
-	    if (ttime > game.state.date) ttime -= game.state.date; // Actually a star date
+	    if (ttime > game.state.date)
+		ttime -= game.state.date; // Actually a star date
 	    if (ttime <= 1e-10 ||
 		(twarp=(floor(sqrt((10.0*game.dist)/ttime)*10.0)+1.0)/10.0) > 10) {
 		prout(_("We'll never make it, sir."));

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-28 09:34:55 UTC (rev 640)
+++ trunk/src/setup.c	2006-09-28 09:48:31 UTC (rev 641)
@@ -192,7 +192,8 @@
     setup_names();
 
     //  Decide how many of everything
-    if (choose(needprompt)) return; // frozen game
+    if (choose(needprompt))
+	return; // frozen game
     // Prepare the Enterprise
     game.alldone = game.gamewon = false;
     game.ship = IHE;
@@ -427,7 +428,8 @@
 	if (needprompt) /* Can start with command line options */
 	    proutn(_("Would you like a regular, tournament, or saved game? "));
 	scan();
-	if (strlen(citem)==0) continue; // Try again
+	if (strlen(citem)==0) // Try again
+	    continue;
 	if (isit("tournament")) {
 	    while (scan() == IHEOL) {
 		proutn(_("Type in tournament number-"));

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-28 09:34:55 UTC (rev 640)
+++ trunk/src/sst.c	2006-09-28 09:48:31 UTC (rev 641)
@@ -583,10 +583,12 @@
 	}
 	commandhook(commands[i].name, false);
 	for (;;) {
-	    if (game.alldone) break;		// Game has ended
+	    if (game.alldone)
+		break;		// Game has ended
 	    if (game.optime != 0.0) {
 		events();
-		if (game.alldone) break;	// Events did us in
+		if (game.alldone)
+		    break;	// Events did us in
 	    }
 	    if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova) { // Galaxy went Nova!
 		atover(false);

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-28 09:34:55 UTC (rev 640)
+++ trunk/src/sst.h	2006-09-28 09:48:31 UTC (rev 641)
@@ -342,103 +342,103 @@
 enum loctype {neither, quadrant, sector};
 
 /* Function prototypes */
-void prelim(void);
-void attack(bool);
-bool choose(bool);
-void setup(bool);
-void score(void);
-void atover(bool);
-void srscan(void);
-void lrscan(void);
-void phasers(void);
-void photon(void);
-void warp(bool);
-void doshield(bool);
-void dock(bool);
-void dreprt(void);
-void chart(void);
-void rechart(void);
-void impuls(void);
-void wait(void);
-void setwrp(void);
-void events(void);
-void report(void);
-void eta(void);
-void mayday(void);
-void abandn(void);
-void finish(FINTYPE);
-void selfdestruct(void);
-void kaboom(void);
-void freeze(bool);
-bool thaw(void);
-void plaque(void);
-int scan(void);
-void status(int req);
-void request(void);
+extern void prelim(void);
+extern void attack(bool);
+extern bool choose(bool);
+extern void setup(bool);
+extern void score(void);
+extern void atover(bool);
+extern void srscan(void);
+extern void lrscan(void);
+extern void phasers(void);
+extern void photon(void);
+extern void warp(bool);
+extern void doshield(bool);
+extern void dock(bool);
+extern void dreprt(void);
+extern void chart(void);
+extern void rechart(void);
+extern void impuls(void);
+extern void wait(void);
+extern void setwrp(void);
+extern void events(void);
+extern void report(void);
+extern void eta(void);
+extern void mayday(void);
+extern void abandn(void);
+extern void finish(FINTYPE);
+extern void selfdestruct(void);
+extern void kaboom(void);
+extern void freeze(bool);
+extern bool thaw(void);
+extern void plaque(void);
+extern int scan(void);
+extern void status(int req);
+extern void request(void);
 #define IHEOL (0)
 #define IHALPHA (1)
 #define IHREAL (2)
-void chew(void);
-void chew2(void);
-void skip(int);
-void prout(const char *, ...) __attribute__((format(printf, 1, 2)));
-void proutn(const char *, ...) __attribute__((format(printf, 1, 2)));
-void prouts(const char *, ...) __attribute__((format(printf, 1, 2)));
-void prstat(const char *txt, const char *fmt, ...)
+extern void chew(void);
+extern void chew2(void);
+extern void skip(int);
+extern void prout(const char *, ...) __attribute__((format(printf, 1, 2)));
+extern void proutn(const char *, ...) __attribute__((format(printf, 1, 2)));
+extern void prouts(const char *, ...) __attribute__((format(printf, 1, 2)));
+extern void prstat(const char *txt, const char *fmt, ...)
 	__attribute__((format(printf, 2, 3)));
-void stars(void);
-void newqad(bool);
-bool ja(void);
-void cramen(feature);
-void crmshp(void);
-char *cramlc(enum loctype, coord w);
-double expran(double);
-double Rand(void);
-coord randplace(int);
-coord dropin(feature);
-void newcnd(void);
-void sortkl(void);
-void imove(bool);
-void ram(bool, feature, coord);
-void crmena(bool, feature, enum loctype, coord w);
-void deadkl(coord, feature, coord);
-void timwrp(void);
-void moveklings(void);
-void torpedo(double, double, coord, double *, int, int);
-void huh(void);
-void pause_reset(void);
-void pause_game(bool);
-void nova(coord);
-void snova(bool, coord *);
-void scom(void);
-void hittem(double *);
-bool isit(char *);
-void preport(void);
-void orbit(void);
-void sensor(void);
-void drawmaps(int);
-void beam(void);
-void mine(void);
-void usecrystals(void);
-void shuttle(void);
-void deathray(void);
-void debugme(void);
-void attakreport(bool);
-void movetho(void);
-void probe(void);
-void iostart(void);
-void setwnd(WINDOW *);
-void warble(void);
-void boom(coord);
-void tracktorpedo(coord, int, int, int, int);
-void cgetline(char *, int);
-void waitfor(void);
-void setpassword(void);
-void commandhook(char *, bool);
-void makechart(void);
-coord newkling(int);
+extern void stars(void);
+extern void newqad(bool);
+extern bool ja(void);
+extern void cramen(feature);
+extern void crmshp(void);
+extern char *cramlc(enum loctype, coord w);
+extern double expran(double);
+extern double Rand(void);
+extern coord randplace(int);
+extern coord dropin(feature);
+extern void newcnd(void);
+extern void sortkl(void);
+extern void imove(bool);
+extern void ram(bool, feature, coord);
+extern void crmena(bool, feature, enum loctype, coord w);
+extern void deadkl(coord, feature, coord);
+extern void timwrp(void);
+extern void moveklings(void);
+extern void torpedo(double, double, coord, double *, int, int);
+extern void huh(void);
+extern void pause_reset(void);
+extern void pause_game(bool);
+extern void nova(coord);
+extern void snova(bool, coord *);
+extern void scom(void);
+extern void hittem(double *);
+extern bool isit(char *);
+extern void preport(void);
+extern void orbit(void);
+extern void sensor(void);
+extern void drawmaps(int);
+extern void beam(void);
+extern void mine(void);
+extern void usecrystals(void);
+extern void shuttle(void);
+extern void deathray(void);
+extern void debugme(void);
+extern void attakreport(bool);
+extern void movetho(void);
+extern void probe(void);
+extern void iostart(void);
+extern void setwnd(WINDOW *);
+extern void warble(void);
+extern void boom(coord);
+extern void tracktorpedo(coord, int, int, int, int);
+extern void cgetline(char *, int);
+extern void waitfor(void);
+extern void setpassword(void);
+extern void commandhook(char *, bool);
+extern void makechart(void);
+extern coord newkling(int);
 #if BSD_BUG_FOR_BUG
-void visual(void);
+extern void visual(void);
 #endif
 
 extern WINDOW *curwnd;



From esr at mail.berlios.de  Thu Sep 28 12:18:52 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 28 Sep 2006 12:18:52 +0200
Subject: [Sst-commit-watch] r642 - trunk/src
Message-ID: <200609281018.k8SAIqqZ025926@sheep.berlios.de>

Author: esr
Date: 2006-09-28 12:18:52 +0200 (Thu, 28 Sep 2006)
New Revision: 642

Modified:
   trunk/src/sst.h
Log:
More cleanup towards automated Python translation.


Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-28 09:48:31 UTC (rev 641)
+++ trunk/src/sst.h	2006-09-28 10:18:52 UTC (rev 642)
@@ -20,13 +20,15 @@
 #define min(x, y)	((x)<(y)?(x):(y))
 #define max(x, y)	((x)>(y)?(x):(y))
 
-#define PHASEFAC (2.0)
-#define GALSIZE	(8)
-#define NINHAB (GALSIZE * GALSIZE / 2)
-#define MAXUNINHAB (10)
-#define PLNETMAX (NINHAB + MAXUNINHAB)
-#define QUADSIZE (10)
-#define BASEMAX	(5)
+#define PHASEFAC	2.0
+#define GALSIZE		8
+#define NINHAB		(GALSIZE * GALSIZE / 2)
+#define MAXUNINHAB	10
+#define PLNETMAX	(NINHAB + MAXUNINHAB)
+#define QUADSIZE	10
+#define BASEMAX		(GALSIZE * GALSIZE / 12)
+#define MAXKLGAME	127
+#define MAXKLQUAD	9
 
 /*
  * These macros hide the difference between 0-origin and 1-origin addressing.
@@ -118,9 +120,6 @@
     } chart[GALSIZE+1][GALSIZE+1]; 	// the starchart (subscript 0 not used)
 } snapshot;				// Data that is snapshot
 
-#define MAXKLGAME	127
-#define MAXKLQUAD	9
-
 #define NKILLK (game.inkling - game.state.remkl)
 #define NKILLC (game.incom - game.state.remcom)
 #define NKILLSC (game.inscom - game.state.nscrem)



From esr at mail.berlios.de  Thu Sep 28 12:52:09 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 28 Sep 2006 12:52:09 +0200
Subject: [Sst-commit-watch] r643 - trunk/src
Message-ID: <200609281052.k8SAq9Sh005929@sheep.berlios.de>

Author: esr
Date: 2006-09-28 12:52:08 +0200 (Thu, 28 Sep 2006)
New Revision: 643

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
Clean up uglyFORTRANISH names.  It's been years since C public names had a 
6-character significance limit.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-28 10:18:52 UTC (rev 642)
+++ trunk/src/ai.c	2006-09-28 10:52:08 UTC (rev 643)
@@ -273,7 +273,7 @@
 }
 
 void moveklings(void) 
-/* move a commander */
+/* Klingon tactical movement */
 {
     coord w; 
     int i;
@@ -309,7 +309,7 @@
 		movebaddy(w, i, game.quad[w.x][w.y]);
 	}
 
-    sortkl();
+    sortklings();
 }
 
 static bool movescom(coord iq, bool flag) 
@@ -352,7 +352,7 @@
 	game.nenhere--;
 	if (game.condition!=docked)
 	    newcnd();
-	sortkl();
+	sortklings();
     }
     /* check for a helpful planet */
     for (i = 0; i < game.inplan; i++) {
@@ -375,7 +375,7 @@
     return false; /* looks good! */
 }
 			
-void scom(void)
+void supercommander(void)
 /* move the Super Commander */
 {
     int i, i2, j, ideltax, ideltay, ifindit, iwhichb;
@@ -385,7 +385,7 @@
     bool flag;
 
     if (idebug)
-	prout("== SCOM");
+	prout("== SUPERCOMMANDER");
 
     /* Decide on being active or passive */
     flag = ((NKILLC+NKILLK)/(game.state.date+0.01-game.indate) < 0.1*game.skill*(game.skill+1.0) ||
@@ -555,11 +555,10 @@
     return;
 }
 
-void movetho(void)
+void movetholian(void)
 /* move the Tholian */
 {
     int idx, idy, im, i;
-    /* Move the Tholian */
     if (!game.ithere || game.justin)
 	return;
 

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-28 10:18:52 UTC (rev 642)
+++ trunk/src/battle.c	2006-09-28 10:52:08 UTC (rev 643)
@@ -241,7 +241,7 @@
     prout(_("***Shields are down."));
     if (KLINGREM) {
 	pause_game(true);
-	dreprt();
+	damagereport();
     }
     else
 	finish(FWON);
@@ -503,7 +503,7 @@
 	prout(_(" displaced by blast to %s "), cramlc(sector, jw));
 	for_local_enemies(ll)
 	    game.kdist[ll] = game.kavgd[ll] = distance(game.sector,game.ks[ll]);
-	sortkl();
+	sortklings();
 	return;
     }
     skip(1);
@@ -570,7 +570,7 @@
 
     /* Tholian gewts to move before attacking */
     if (game.ithere) 
-	movetho();
+	movetholian();
 
     /* if you have just entered the RNZ, you'll get a warning */
     if (game.neutz) { /* The one chance not to be attacked */
@@ -724,7 +724,7 @@
     /* After attack, reset average distance to enemies */
     for_local_enemies(loop)
 	game.kavgd[loop] = game.kdist[loop];
-    sortkl();
+    sortklings();
     return;
 }
 		

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-28 10:18:52 UTC (rev 642)
+++ trunk/src/events.c	2006-09-28 10:52:08 UTC (rev 643)
@@ -147,7 +147,7 @@
 	    prout(_("   surveillance reports are coming in."));
 	    skip(1);
 	    if (!game.iseenit) {
-		attakreport(false);
+		attackreport(false);
 		game.iseenit = true;
 	    }
 	    rechart();
@@ -159,7 +159,7 @@
 	switch (evcode) {
 	case FSNOVA: /* Supernova */
 	    pause_game(true);
-	    snova(false, NULL);
+	    supernova(false, NULL);
 	    schedule(FSNOVA, expran(0.5*game.intime));
 	    if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova)
 		return;
@@ -374,7 +374,7 @@
 	    schedule(FSCMOVE, 0.2777);
 	    if (!game.ientesc && !istract && game.isatb != 1 &&
 			(!game.iscate || !game.justin)) 
-		scom();
+		supercommander();
 	    break;
 	case FDSPROB: /* Move deep space probe */
 	    schedule(FDSPROB, 0.01);
@@ -423,7 +423,7 @@
 	    game.proben--; // One less to travel
 	    if (game.proben == 0 && game.isarmed && pdest->stars) {
 		/* lets blow the sucker! */
-		snova(true, &game.probec);
+		supernova(true, &game.probec);
 		unschedule(FDSPROB);
 		if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova) 
 		    return;
@@ -635,7 +635,7 @@
 
     if (Rand() < 0.05) {
 	/* Wow! We've supernova'ed */
-	snova(false, &nov);
+	supernova(false, &nov);
 	return;
     }
 
@@ -674,7 +674,7 @@
 		    case IHSTAR: /* Affect another star */
 			if (Rand() < 0.05) {
 			    /* This star supernovas */
-			    snova(false, &scratch);
+			    supernova(false, &scratch);
 			    return;
 			}
 			top2++;
@@ -814,7 +814,7 @@
 }
 	
 	
-void snova(bool induced, coord *w) 
+void supernova(bool induced, coord *w) 
 /* star goes supernova */
 {
     int num = 0, nrmdead, npdead, kldead;

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-28 10:18:52 UTC (rev 642)
+++ trunk/src/moving.c	2006-09-28 10:52:08 UTC (rev 643)
@@ -200,7 +200,7 @@
 	    game.kavgd[m] = 0.5 * (finald+game.kdist[m]);
 	    game.kdist[m] = finald;
 	}
-	sortkl();
+	sortklings();
 	if (!game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova)
 	    attack(false);
 	for_local_enemies(m) game.kavgd[m] = game.kdist[m];
@@ -242,7 +242,7 @@
 	(is_scheduled(FCDBAS) || game.isatb == 1) && !game.iseenit) {
 	/* get attack report from base */
 	prout(_("Lt. Uhura- \"Captain, an important message from the starbase:\""));
-	attakreport(false);
+	attackreport(false);
 	game.iseenit = true;
     }
 }
@@ -438,7 +438,7 @@
 		
 
 
-void impuls(void) 
+void impulse(void) 
 /* move under impulse power */
 {
     double power;
@@ -646,7 +646,7 @@
 
 
 
-void setwrp(void) 
+void setwarp(void) 
 /* change the warp factor */
 {
     int key;
@@ -1086,7 +1086,7 @@
 **
 */
 
-void abandn(void) 
+void abandon(void) 
 /* abandon ship */
 {
     int nb, l;

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-28 10:18:52 UTC (rev 642)
+++ trunk/src/planets.c	2006-09-28 10:52:08 UTC (rev 643)
@@ -12,7 +12,7 @@
     return false;
 }
 
-void preport(void) 
+void survey(void) 
 /* report on (uninhabited) planets in the galaxy */
 {
     bool iknow = false;

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-28 10:18:52 UTC (rev 642)
+++ trunk/src/reports.c	2006-09-28 10:52:08 UTC (rev 643)
@@ -3,7 +3,7 @@
 #include <stdlib.h>
 #include <string.h>
 
-void attakreport(bool curt)
+void attackreport(bool curt)
 /* report status of bases under attack */
 {
     if (!curt) {
@@ -84,7 +84,7 @@
     if (!damaged(DRADIO) || game.condition == docked || game.iseenit) {
 	/* Don't report this if not seen and
 	   either the radio is dead or not at base! */
-	attakreport(false);
+	attackreport(false);
 	game.iseenit = true;
     }
     if (game.casual) 
@@ -166,7 +166,7 @@
     }
 }
 
-void dreprt(void) 
+void damagereport(void) 
 /* damage report */
 {
     bool jdam = false;
@@ -358,7 +358,7 @@
     );
 
     RQ(11,
-	attakreport(!req);
+	attackreport(!req);
     );
 
 #undef RQ

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-28 10:18:52 UTC (rev 642)
+++ trunk/src/setup.c	2006-09-28 10:52:08 UTC (rev 643)
@@ -731,7 +731,7 @@
 	}
     }
 
-    sortkl();
+    sortklings();
 
     // Put in a few black holes
     for (i = 1; i <= 3; i++)
@@ -751,7 +751,7 @@
     }		
 }
 
-void sortkl(void) 
+void sortklings(void) 
 /* sort Klingons by distance from us */
 {
     double t;

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-09-28 10:18:52 UTC (rev 642)
+++ trunk/src/sst.c	2006-09-28 10:52:08 UTC (rev 643)
@@ -472,13 +472,13 @@
 		attack(false);		
 	    break;
 	case DAMAGES:			// damages
-	    dreprt();
+	    damagereport();
 	    break;
 	case CHART:			// chart
 	    makechart();
 	    break;
 	case IMPULSE:			// impulse
-	    impuls();
+	    impulse();
 	    break;
 	case REST:			// rest
 	    wait();
@@ -486,7 +486,7 @@
 		hitme = true;
 	    break;
 	case WARP:			// warp
-	    setwrp();
+	    setwarp();
 	    break;
 	case SCORE:           	 	// score
 	    score();
@@ -518,7 +518,7 @@
 		hitme = true;
 	    break;
 	case PLANETS:			// Planet list
-	    preport();
+	    survey();
 	    break;
 	case REPORT:			// Game Report 
 	    report();
@@ -540,7 +540,7 @@
 		hitme = true;
 	    break;
 	case ABANDON:			// Abandon Ship
-	    abandn();
+	    abandon();
 	    break;
 	case DESTRUCT:			// Self Destruct
 	    selfdestruct();

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-28 10:18:52 UTC (rev 642)
+++ trunk/src/sst.h	2006-09-28 10:52:08 UTC (rev 643)
@@ -354,17 +354,17 @@
 extern void warp(bool);
 extern void doshield(bool);
 extern void dock(bool);
-extern void dreprt(void);
+extern void damagereport(void);
 extern void chart(void);
 extern void rechart(void);
-extern void impuls(void);
+extern void impulse(void);
 extern void wait(void);
-extern void setwrp(void);
+extern void setwarp(void);
 extern void events(void);
 extern void report(void);
 extern void eta(void);
 extern void mayday(void);
-extern void abandn(void);
+extern void abandon(void);
 extern void finish(FINTYPE);
 extern void selfdestruct(void);
 extern void kaboom(void);
@@ -396,7 +396,7 @@
 extern coord randplace(int);
 extern coord dropin(feature);
 extern void newcnd(void);
-extern void sortkl(void);
+extern void sortklings(void);
 extern void imove(bool);
 extern void ram(bool, feature, coord);
 extern void crmena(bool, feature, enum loctype, coord w);
@@ -408,11 +408,11 @@
 extern void pause_reset(void);
 extern void pause_game(bool);
 extern void nova(coord);
-extern void snova(bool, coord *);
-extern void scom(void);
+extern void supernova(bool, coord *);
+extern void supercommander(void);
 extern void hittem(double *);
 extern bool isit(char *);
-extern void preport(void);
+extern void survey(void);
 extern void orbit(void);
 extern void sensor(void);
 extern void drawmaps(int);
@@ -422,8 +422,8 @@
 extern void shuttle(void);
 extern void deathray(void);
 extern void debugme(void);
-extern void attakreport(bool);
-extern void movetho(void);
+extern void attackreport(bool);
+extern void movetholian(void);
 extern void probe(void);
 extern void iostart(void);
 extern void setwnd(WINDOW *);



From esr at mail.berlios.de  Thu Sep 28 23:21:34 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 28 Sep 2006 23:21:34 +0200
Subject: [Sst-commit-watch] r644 - trunk/src
Message-ID: <200609282121.k8SLLYq7026842@sheep.berlios.de>

Author: esr
Date: 2006-09-28 23:21:33 +0200 (Thu, 28 Sep 2006)
New Revision: 644

Modified:
   trunk/src/ai.c
   trunk/src/events.c
   trunk/src/moving.c
   trunk/src/reports.c
Log:
Hack boxed xcomments so they're easier for a mechanical translator 
to recognize.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-28 10:52:08 UTC (rev 643)
+++ trunk/src/ai.c	2006-09-28 21:21:33 UTC (rev 644)
@@ -28,8 +28,8 @@
 	if (game.kpower[loccom] > 1000.0)
 	    return false;
     }
-    /* print escape message and move out of quadrant.
-       We know this if either short or long range sensors are working */
+    // print escape message and move out of quadrant.
+    // We know this if either short or long range sensors are working
     if (!damaged(DSRSENS) || !damaged(DLRSENS) ||
 	game.condition == docked) {
 	crmena(true, ienm, sector, game.ks[loccom]);
@@ -70,7 +70,46 @@
     return true; /* success */
 }
 
+/*************************************************************************
+The bad-guy movement algorithm:
 
+1. Enterprise has "force" based on condition of phaser and photon torpedoes.
+If both are operating full strength, force is 1000. If both are damaged,
+force is -1000. Having shields down subtracts an additional 1000.
+
+2. Enemy has forces equal to the energy of the attacker plus
+100*(K+R) + 500*(C+S) - 400 for novice through good levels OR
+346*K + 400*R + 500*(C+S) - 400 for expert and emeritus.
+
+Attacker Initial energy levels (nominal):
+Klingon   Romulan   Commander   Super-Commander
+Novice    400        700        1200        
+Fair      425        750        1250
+Good      450        800        1300        1750
+Expert    475        850        1350        1875
+Emeritus  500        900        1400        2000
+VARIANCE   75        200         200         200
+
+Enemy vessels only move prior to their attack. In Novice - Good games
+only commanders move. In Expert games, all enemy vessels move if there
+is a commander present. In Emeritus games all enemy vessels move.
+
+3. If Enterprise is not docked, an agressive action is taken if enemy
+forces are 1000 greater than Enterprise.
+
+Agressive action on average cuts the distance between the ship and
+the enemy to 1/4 the original.
+
+4.  At lower energy advantage, movement units are proportional to the
+advantage with a 650 advantage being to hold ground, 800 to move forward
+1, 950 for two, 150 for back 4, etc. Variance of 100.
+
+If docked, is reduced by roughly 1.75*game.skill, generally forcing a
+retreat, especially at high skill levels.
+
+5.  Motion is limited to skill level, except for SC hi-tailing it out.
+**************************************************************************/
+
 static void movebaddy(coord com, int loccom, feature ienm)
 /* tactical movement for the bad guys */
 {
@@ -96,44 +135,6 @@
     }
     else {
 	/* decide whether to advance, retreat, or hold position */
-/* Algorithm:
- * Enterprise has "force" based on condition of phaser and photon torpedoes.
- If both are operating full strength, force is 1000. If both are damaged,
- force is -1000. Having shields down subtracts an additional 1000.
-
- * Enemy has forces equal to the energy of the attacker plus
- 100*(K+R) + 500*(C+S) - 400 for novice through good levels OR
- 346*K + 400*R + 500*(C+S) - 400 for expert and emeritus.
-
- Attacker Initial energy levels (nominal):
- Klingon   Romulan   Commander   Super-Commander
- Novice    400        700        1200        
- Fair      425        750        1250
- Good      450        800        1300        1750
- Expert    475        850        1350        1875
- Emeritus  500        900        1400        2000
- VARIANCE   75        200         200         200
-
- Enemy vessels only move prior to their attack. In Novice - Good games
- only commanders move. In Expert games, all enemy vessels move if there
- is a commander present. In Emeritus games all enemy vessels move.
-
- *  If Enterprise is not docked, an agressive action is taken if enemy
- forces are 1000 greater than Enterprise.
-
- Agressive action on average cuts the distance between the ship and
- the enemy to 1/4 the original.
-
- *  At lower energy advantage, movement units are proportional to the
- advantage with a 650 advantage being to hold ground, 800 to move forward
- 1, 950 for two, 150 for back 4, etc. Variance of 100.
-
- If docked, is reduced by roughly 1.75*game.skill, generally forcing a
- retreat, especially at high skill levels.
-
- *  Motion is limited to skill level, except for SC hi-tailing it out.
- */
-
 	forces = game.kpower[loccom]+100.0*game.nenhere+400*(nbaddys-1);
 	if (!game.shldup)
 	    forces += 1000; /* Good for enemy if shield is down! */
@@ -281,8 +282,8 @@
     if (idebug)
 	prout("== MOVCOM");
 
-    /* Figure out which Klingon is the commander (or Supercommander)
-       and do move */
+    // Figure out which Klingon is the commander (or Supercommander)
+    //   and do move
     if (game.comhere) 
 	for_local_enemies(i) {
 	    w = game.ks[i];
@@ -299,9 +300,9 @@
 		break;
 	    }
 	}
-    /* if skill level is high, move other Klingons and Romulans too!
-       Move these last so they can base their actions on what the
-       commander(s) do. */
+    // if skill level is high, move other Klingons and Romulans too!
+    // Move these last so they can base their actions on what the
+    // commander(s) do.
     if (game.skill >= SKILL_EXPERT && (game.options & OPTION_MVBADDY)) 
 	for_local_enemies(i) {
 	    w = game.ks[i];
@@ -312,7 +313,7 @@
     sortklings();
 }
 
-static bool movescom(coord iq, bool flag) 
+static bool movescom(coord iq, bool avoid) 
 /* commander movement helper */
 {
     int i;
@@ -321,7 +322,7 @@
 	game.state.galaxy[iq.x][iq.y].supernova ||
 	game.state.galaxy[iq.x][iq.y].klingons > MAXKLQUAD-1) 
 	return 1;
-    if (flag) {
+    if (avoid) {
 	/* Avoid quadrants with bases if we want to avoid Enterprise */
 	for_starbases(i)
 	    if (same(game.state.baseq[i], iq)) 
@@ -382,15 +383,15 @@
     coord iq, sc, ibq;
     int basetbl[BASEMAX+1];
     double bdist[BASEMAX+1];
-    bool flag;
+    bool avoid;
 
     if (idebug)
 	prout("== SUPERCOMMANDER");
 
     /* Decide on being active or passive */
-    flag = ((NKILLC+NKILLK)/(game.state.date+0.01-game.indate) < 0.1*game.skill*(game.skill+1.0) ||
+    avoid = ((NKILLC+NKILLK)/(game.state.date+0.01-game.indate) < 0.1*game.skill*(game.skill+1.0) ||
 	    (game.state.date-game.indate) < 3.0);
-    if (!game.iscate && flag) {
+    if (!game.iscate && avoid) {
 	/* compute move away from Enterprise */
 	ideltax = game.state.kscmdr.x-game.quadrant.x;
 	ideltay = game.state.kscmdr.y-game.quadrant.y;
@@ -441,7 +442,7 @@
 		game.state.galaxy[ibq.x][ibq.y].supernova ||
 		game.state.galaxy[ibq.x][ibq.y].klingons > MAXKLQUAD-1) 
 		continue;
-	    /* if there is a commander, an no other base is appropriate,
+	    /* if there is a commander, and no other base is appropriate,
 	       we will take the one with the commander */
 	    for_commanders (j) {
 		if (same(ibq, game.state.kcmdr[j]) && ifindit!= 2) {
@@ -476,32 +477,32 @@
     /* try moving in both x and y directions */
     iq.x = game.state.kscmdr.x + ideltax;
     iq.y = game.state.kscmdr.y + ideltax;
-    if (movescom(iq, flag)) {
+    if (movescom(iq, avoid)) {
 	/* failed -- try some other maneuvers */
 	if (ideltax==0 || ideltay==0) {
 	    /* attempt angle move */
 	    if (ideltax != 0) {
 		iq.y = game.state.kscmdr.y + 1;
-		if (movescom(iq, flag)) {
+		if (movescom(iq, avoid)) {
 		    iq.y = game.state.kscmdr.y - 1;
-		    movescom(iq, flag);
+		    movescom(iq, avoid);
 		}
 	    }
 	    else {
 		iq.x = game.state.kscmdr.x + 1;
-		if (movescom(iq, flag)) {
+		if (movescom(iq, avoid)) {
 		    iq.x = game.state.kscmdr.x - 1;
-		    movescom(iq, flag);
+		    movescom(iq, avoid);
 		}
 	    }
 	}
 	else {
 	    /* try moving just in x or y */
 	    iq.y = game.state.kscmdr.y;
-	    if (movescom(iq, flag)) {
+	    if (movescom(iq, avoid)) {
 		iq.y = game.state.kscmdr.y + ideltay;
 		iq.x = game.state.kscmdr.x;
-		movescom(iq, flag);
+		movescom(iq, avoid);
 	    }
 	}
     }
@@ -513,7 +514,7 @@
 	ibq = game.state.baseq[i];
 	if (same(ibq, game.state.kscmdr) && same(game.state.kscmdr, game.battle)) {
 	    /* attack the base */
-	    if (flag)
+	    if (avoid)
 		return; /* no, don't attack base! */
 	    game.iseenit = false;
 	    game.isatb = 1;
@@ -580,7 +581,7 @@
 	return;
     }
 
-    /* Do nothing if we are blocked */
+    /* do nothing if we are blocked */
     if (game.quad[idx][idy]!= IHDOT && game.quad[idx][idy]!= IHWEB)
 	return;
     game.quad[game.tholian.x][game.tholian.y] = IHWEB;

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-28 10:52:08 UTC (rev 643)
+++ trunk/src/events.c	2006-09-28 21:21:33 UTC (rev 644)
@@ -434,10 +434,10 @@
 	    /* try a whole bunch of times to find something suitable */
 	    i = 100;
 	    do {
-		/* need a quadrant which is not the current one,
-		   which has some stars which are inhabited and
-		   not already under attack, which is not
-		   supernova'ed, and which has some Klingons in it */
+		// need a quadrant which is not the current one,
+		// which has some stars which are inhabited and
+		// not already under attack, which is not
+		// supernova'ed, and which has some Klingons in it
 		w = randplace(GALSIZE);
 		q = &game.state.galaxy[w.x][w.y];
 	    } while (--i &&
@@ -488,10 +488,8 @@
 	    }
 	    break;
 	case FREPRO:		/* Klingon reproduces */
-	    /*
-	     * If we ever switch to a real event queue, we'll need to
-	     * explicitly retrieve and restore the x and y.
-	     */
+	    // If we ever switch to a real event queue, we'll need to
+	    // explicitly retrieve and restore the x and y.
 	    ev = schedule(FREPRO, expran(1.0 * game.intime));
 	    /* see if current distress call still active */
 	    q = &game.state.galaxy[ev->quadrant.x][ev->quadrant.y];

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-28 10:52:08 UTC (rev 643)
+++ trunk/src/moving.c	2006-09-28 21:21:33 UTC (rev 644)
@@ -250,7 +250,7 @@
 /* 
  * This program originally required input in terms of a (clock)
  * direction and distance. Somewhere in history, it was changed to
- * cartesian coordinates. So we need to convert. I think
+ * cartesian coordinates. So we need to convert.  Probably
  * "manual" input should still be done this way -- it's a real
  * pain if the computer isn't working! Manual mode is still confusing
  * because it involves giving x and y motions, yet the coordinates
@@ -268,9 +268,8 @@
     coord incr;
     bool iprompt = false;
 
-    /* Get course direction and distance. If user types bad values, return
-       with DIREC = -1.0. */
-
+    // Get course direction and distance. If user types bad values, return
+    // with DIREC = -1.0.
     game.direc = -1.0;
 	
     if (game.landed && !isprobe) {
@@ -836,8 +835,8 @@
 		}
 	    }
 	}
-	/* Likewise, if in the original time the Galileo was abandoned, but
-	   was on ship earlier, it would have vanished -- lets restore it */
+	// Likewise, if in the original time the Galileo was abandoned, but
+	// was on ship earlier, it would have vanished -- let's restore it.
 	if (game.iscraft == offship && !gotit && game.damage[DSHUTTL] >= 0.0) {
 	    prout(_("Checkov-  \"Security reports the Galileo has reappeared in the dock!\""));
 	    game.iscraft = onship;
@@ -1066,25 +1065,25 @@
 }
 
 /*
-**  Abandon Ship
-**
-**	The ship is abandoned.  If your current ship is the Faire
-**	Queene, or if your shuttlecraft is dead, you're out of
-**	luck.  You need the shuttlecraft in order for the captain
-**	(that's you!!) to escape.
-**
-**	Your crew can beam to an inhabited starsystem in the
-**	quadrant, if there is one and if the transporter is working.
-**	If there is no inhabited starsystem, or if the transporter
-**	is out, they are left to die in outer space.
-**
-**	If there are no starbases left, you are captured by the
-**	Klingons, who torture you mercilessly.  However, if there
-**	is at least one starbase, you are returned to the
-**	Federation in a prisoner of war exchange.  Of course, this
-**	can't happen unless you have taken some prisoners.
-**
-*/
+ *  Abandon Ship
+ *
+ *	The ship is abandoned.  If your current ship is the Faire
+ *	Queene, or if your shuttlecraft is dead, you're out of
+ *	luck.  You need the shuttlecraft in order for the captain
+ *	(that's you!!) to escape.
+ *
+ *	Your crew can beam to an inhabited starsystem in the
+ *	quadrant, if there is one and if the transporter is working.
+ *	If there is no inhabited starsystem, or if the transporter
+ *	is out, they are left to die in outer space.
+ *
+ *	If there are no starbases left, you are captured by the
+ *	Klingons, who torture you mercilessly.  However, if there
+ *	is at least one starbase, you are returned to the
+ *	Federation in a prisoner of war exchange.  Of course, this
+ *	can't happen unless you have taken some prisoners.
+ *
+ */
 
 void abandon(void) 
 /* abandon ship */

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-28 10:52:08 UTC (rev 643)
+++ trunk/src/reports.c	2006-09-28 21:21:33 UTC (rev 644)
@@ -82,8 +82,8 @@
     else
 	prout(_("There are %d bases."), game.inbase);
     if (!damaged(DRADIO) || game.condition == docked || game.iseenit) {
-	/* Don't report this if not seen and
-	   either the radio is dead or not at base! */
+	// Don't report this if not seen and
+	// either the radio is dead or not at base!
 	attackreport(false);
 	game.iseenit = true;
     }



From esr at mail.berlios.de  Fri Sep 29 09:41:43 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 29 Sep 2006 09:41:43 +0200
Subject: [Sst-commit-watch] r645 - trunk/src
Message-ID: <200609290741.k8T7fhVo012845@sheep.berlios.de>

Author: esr
Date: 2006-09-29 09:41:43 +0200 (Fri, 29 Sep 2006)
New Revision: 645

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.h
Log:
Get rfid of the iterator macros I wrote.  They interfere with
mechaniucal translation.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-28 21:21:33 UTC (rev 644)
+++ trunk/src/ai.c	2006-09-29 07:41:43 UTC (rev 645)
@@ -17,7 +17,7 @@
     if (!irun) {
 	/* avoid intruding on another commander's territory */
 	if (ienm == IHC) {
-	    for_commanders(n)
+	    for (n = 1; n <= game.state.remcom; n++)
 		if (same(game.state.kcmdr[n],iq))
 		    return false;
 	    /* refuse to leave if currently attacking starbase */
@@ -59,7 +59,7 @@
 	game.state.kscmdr=iq;
     }
     else {
-	for_commanders(n) {
+	for (n = 1; n <= game.state.remcom; n++) {
 	    if (same(game.state.kcmdr[n], game.quadrant)) {
 		game.state.kcmdr[n]=iq;
 		break;
@@ -285,7 +285,7 @@
     // Figure out which Klingon is the commander (or Supercommander)
     //   and do move
     if (game.comhere) 
-	for_local_enemies(i) {
+	for (i = 1; i <= game.nenhere; i++) {
 	    w = game.ks[i];
 	    if (game.quad[w.x][w.y] == IHC) {
 		movebaddy(w, i, IHC);
@@ -293,7 +293,7 @@
 	    }
 	}
     if (game.ishere) 
-	for_local_enemies(i) {
+	for (i = 1; i <= game.nenhere; i++) {
 	    w = game.ks[i];
 	    if (game.quad[w.x][w.y] == IHS) {
 		movebaddy(w, i, IHS);
@@ -304,7 +304,7 @@
     // Move these last so they can base their actions on what the
     // commander(s) do.
     if (game.skill >= SKILL_EXPERT && (game.options & OPTION_MVBADDY)) 
-	for_local_enemies(i) {
+	for (i = 1; i <= game.nenhere; i++) {
 	    w = game.ks[i];
 	    if (game.quad[w.x][w.y] == IHK || game.quad[w.x][w.y] == IHR)
 		movebaddy(w, i, game.quad[w.x][w.y]);
@@ -324,7 +324,7 @@
 	return 1;
     if (avoid) {
 	/* Avoid quadrants with bases if we want to avoid Enterprise */
-	for_starbases(i)
+	for (i = 1; i <= game.state.rembase; i++)
 	    if (same(game.state.baseq[i], iq)) 
 		return true;
     }
@@ -341,7 +341,7 @@
 	game.ishere = false;
 	game.ientesc = false;
 	unschedule(FSCDBAS);
-	for_local_enemies(i) 
+	for (i = 1; i <= game.nenhere; i++) 
 	    if (game.quad[game.ks[i].x][game.ks[i].y] == IHS)
 		break;
 	game.quad[game.ks[i].x][game.ks[i].y] = IHDOT;
@@ -409,7 +409,7 @@
 	    return;
 	}
 	sc = game.state.kscmdr;
-	for_starbases(i) {
+	for (i = 1; i <= game.state.rembase; i++) {
 	    basetbl[i] = i;
 	    bdist[i] = distance(game.state.baseq[i], sc);
 	}
@@ -435,16 +435,16 @@
 	   without too many Klingons, and not already under attack. */
 	ifindit = iwhichb = 0;
 
-	for_starbases(i2) {
+	for (i2 = 1; i2 <= game.state.rembase; i2++) {
 	    i = basetbl[i2];	/* bug in original had it not finding nearest*/
 	    ibq = game.state.baseq[i];
 	    if (same(ibq, game.quadrant) || same(ibq, game.battle) ||
 		game.state.galaxy[ibq.x][ibq.y].supernova ||
 		game.state.galaxy[ibq.x][ibq.y].klingons > MAXKLQUAD-1) 
 		continue;
-	    /* if there is a commander, and no other base is appropriate,
-	       we will take the one with the commander */
-	    for_commanders (j) {
+	    // if there is a commander, and no other base is appropriate,
+	    //   we will take the one with the commander
+	    for (j = 1; j <= game.state.remcom; j++) {
 		if (same(ibq, game.state.kcmdr[j]) && ifindit!= 2) {
 		    ifindit = 2;
 		    iwhichb = i;
@@ -510,35 +510,37 @@
     if (game.state.rembase == 0) {
 	unschedule(FSCMOVE);
     }
-    else for_starbases(i) {
-	ibq = game.state.baseq[i];
-	if (same(ibq, game.state.kscmdr) && same(game.state.kscmdr, game.battle)) {
-	    /* attack the base */
-	    if (avoid)
-		return; /* no, don't attack base! */
-	    game.iseenit = false;
-	    game.isatb = 1;
-	    schedule(FSCDBAS, 1.0 +2.0*Rand());
-	    if (is_scheduled(FCDBAS)) 
-		postpone(FSCDBAS, scheduled(FCDBAS)-game.state.date);
-	    if (damaged(DRADIO) && game.condition != docked)
-		return; /* no warning */
-	    game.iseenit = true;
-	    pause_game(true);
-	    proutn(_("Lt. Uhura-  \"Captain, the starbase in "));
-	    proutn(cramlc(quadrant, game.state.kscmdr));
-	    skip(1);
-	    prout(_("   reports that it is under attack from the Klingon Super-commander."));
-	    proutn(_("   It can survive until stardate %d.\""),
-		   (int)scheduled(FSCDBAS));
-	    if (!game.resting)
+    else {
+	for (i = 1; i <= game.state.rembase; i++) {
+	    ibq = game.state.baseq[i];
+	    if (same(ibq, game.state.kscmdr) && same(game.state.kscmdr, game.battle)) {
+		/* attack the base */
+		if (avoid)
+		    return; /* no, don't attack base! */
+		game.iseenit = false;
+		game.isatb = 1;
+		schedule(FSCDBAS, 1.0 +2.0*Rand());
+		if (is_scheduled(FCDBAS)) 
+		    postpone(FSCDBAS, scheduled(FCDBAS)-game.state.date);
+		if (damaged(DRADIO) && game.condition != docked)
+		    return; /* no warning */
+		game.iseenit = true;
+		pause_game(true);
+		proutn(_("Lt. Uhura-  \"Captain, the starbase in "));
+		proutn(cramlc(quadrant, game.state.kscmdr));
+		skip(1);
+		prout(_("   reports that it is under attack from the Klingon Super-commander."));
+		proutn(_("   It can survive until stardate %d.\""),
+		       (int)scheduled(FSCDBAS));
+		if (!game.resting)
+		    return;
+		prout(_("Mr. Spock-  \"Captain, shall we cancel the rest period?\""));
+		if (ja() == false)
+		    return;
+		game.resting = false;
+		game.optime = 0.0; /* actually finished */
 		return;
-	    prout(_("Mr. Spock-  \"Captain, shall we cancel the rest period?\""));
-	    if (ja() == false)
-		return;
-	    game.resting = false;
-	    game.optime = 0.0; /* actually finished */
-	    return;
+	    }
 	}
     }
     /* Check for intelligence report */
@@ -608,7 +610,7 @@
     game.ks[game.nenhere] = game.tholian;
 
     /* check to see if all holes plugged */
-    for_sectors(i) {
+    for (i = 1; i <= QUADSIZE; i++) {
 	if (game.quad[1][i]!=IHWEB && game.quad[1][i]!=IHT)
 	    return;
 	if (game.quad[QUADSIZE][i]!=IHWEB && game.quad[QUADSIZE][i]!=IHT)

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-28 21:21:33 UTC (rev 644)
+++ trunk/src/battle.c	2006-09-29 07:41:43 UTC (rev 645)
@@ -335,7 +335,7 @@
 	case IHR: /* Hit a regular enemy */
 	case IHK:
 	    /* find the enemy */
-	    for_local_enemies(ll)
+	    for (ll = 1; ll <= game.nenhere; ll++)
 		if (same(w, game.ks[ll]))
 		    break;
 	    kp = fabs(game.kpower[ll]);
@@ -380,7 +380,7 @@
 	case IHB: /* Hit a base */
 	    skip(1);
 	    prout(_("***STARBASE DESTROYED.."));
-	    for_starbases(ll) {
+	    for (ll = 1; ll <= game.state.rembase; ll++) {
 		if (same(game.state.baseq[ll], game.quadrant)) {
 		    game.state.baseq[ll]=game.state.baseq[game.state.rembase];
 		    break;
@@ -501,7 +501,7 @@
 	game.quad[w.x][w.y]=IHDOT;
 	game.quad[jw.x][jw.y]=iquad;
 	prout(_(" displaced by blast to %s "), cramlc(sector, jw));
-	for_local_enemies(ll)
+	for (ll = 1; ll <= game.nenhere; ll++)
 	    game.kdist[ll] = game.kavgd[ll] = distance(game.sector,game.ks[ll]);
 	sortklings();
 	return;
@@ -597,7 +597,7 @@
     if (game.skill <= SKILL_FAIR) 
 	where = sector;
 
-    for_local_enemies(loop) {
+    for (loop = 1; loop <= game.nenhere; loop++) {
 	if (game.kpower[loop] < 0)
 	    continue;	/* too weak to attack */
 	/* compute hit strength and diminish shield power */
@@ -722,7 +722,7 @@
 	}
     }
     /* After attack, reset average distance to enemies */
-    for_local_enemies(loop)
+    for (loop = 1; loop <= game.nenhere; loop++)
 	game.kavgd[loop] = game.kdist[loop];
     sortklings();
     return;
@@ -758,7 +758,7 @@
 	switch (type) {
 	case IHC:
 	    game.comhere = false;
-	    for_commanders (i)
+	    for (i = 1; i <= game.state.remcom; i++)
 		if (same(game.state.kcmdr[i], game.quadrant)) 
 		    break;
 	    game.state.kcmdr[i] = game.state.kcmdr[game.state.remcom];
@@ -797,7 +797,7 @@
     /* Remove enemy ship from arrays describing local conditions */
     if (is_scheduled(FCDBAS) && same(game.battle, game.quadrant) && type==IHC)
 	unschedule(FCDBAS);
-    for_local_enemies(i)
+    for (i = 1; i <= game.nenhere; i++)
 	if (same(game.ks[i], w))
 	    break;
     game.nenhere--;
@@ -1138,9 +1138,10 @@
 	irec=0;
 	do {
 	    chew();
-	    if (!kz) for_local_enemies(i)
-		irec+=fabs(game.kpower[i])/(PHASEFAC*pow(0.90,game.kdist[i]))*
-		    (1.01+0.05*Rand()) + 1.0;
+	    if (!kz)
+		for (i = 1; i <= game.nenhere; i++)
+		    irec += fabs(game.kpower[i])/(PHASEFAC*pow(0.90,game.kdist[i]))*
+			(1.01+0.05*Rand()) + 1.0;
 	    kz=1;
 	    proutn(_("%d units required. "), irec);
 	    chew();
@@ -1175,7 +1176,7 @@
 	if (game.nenhere) {
 	    extra = 0.0;
 	    powrem = rpow;
-	    for_local_enemies(i) {
+	    for (i = 1; i <= game.nenhere; i++) {
 		hits[i] = 0.0;
 		if (powrem <= 0)
 		    continue;

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-28 21:21:33 UTC (rev 644)
+++ trunk/src/events.c	2006-09-29 07:41:43 UTC (rev 645)
@@ -270,8 +270,8 @@
 		break;
 	    }
 	    i = 0;
-	    for_starbases(j) {
-		for_commanders(k)
+	    for (j = 1; j <= game.state.rembase; j++) {
+		for (k = 1; k <= game.state.remcom; k++)
 		    if (same(game.state.baseq[j], game.state.kcmdr[k]) &&
 			!same(game.state.baseq[j], game.quadrant) &&
 			!same(game.state.baseq[j], game.state.kscmdr)) {
@@ -320,7 +320,7 @@
 	    if (evcode==FCDBAS) {
 		unschedule(FCDBAS);
 		/* find the lucky pair */
-		for_commanders(i)
+		for (i = 1; i <= game.state.remcom; i++)
 		    if (same(game.state.kcmdr[i], game.battle)) 
 			break;
 		if (i > game.state.remcom || game.state.rembase == 0 ||
@@ -358,7 +358,7 @@
 	    }
 	    /* Remove Starbase from galaxy */
 	    game.state.galaxy[game.battle.x][game.battle.y].starbase = false;
-	    for_starbases(i)
+	    for (i = 1; i <= game.state.rembase; i++)
 		if (same(game.state.baseq[i], game.battle))
 		    game.state.baseq[i] = game.state.baseq[game.state.rembase];
 	    game.state.rembase--;
@@ -700,7 +700,7 @@
 			break;
 		    case IHB: /* Destroy base */
 			game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase = false;
-			for_starbases(i)
+			for (i = 1; i <= game.state.rembase; i++)
 			    if (same(game.state.baseq[i], game.quadrant)) 
 				break;
 			game.state.baseq[i] = game.state.baseq[game.state.rembase];
@@ -744,7 +744,7 @@
 		    case IHC: /* Damage/destroy big enemies */
 		    case IHS:
 		    case IHR:
-			for_local_enemies(ll)
+			for (ll = 1; ll <= game.nenhere; ll++)
 			    if (same(game.ks[ll], scratch))
 				break;
 			game.kpower[ll] -= 800.0; /* If firepower is lost, die */
@@ -825,16 +825,14 @@
 	/* Scheduled supernova -- select star */
 	/* logic changed here so that we won't favor quadrants in top
 	   left of universe */
-	for_quadrants(nq.x) {
-	    for_quadrants(nq.y) {
+	for (nq.x = 1; nq.x <= GALSIZE; nq.x++)
+	    for (nq.y = 1; nq.y <= GALSIZE; nq.y++)
 		stars += game.state.galaxy[nq.x][nq.y].stars;
-	    }
-	}
 	if (stars == 0)
 	    return; /* nothing to supernova exists */
 	num = Rand()*stars + 1;
-	for_quadrants(nq.x) {
-	    for_quadrants(nq.y) {
+	for (nq.x = 1; nq.x <= GALSIZE; nq.x++) {
+	    for (nq.y = 1; nq.y <= GALSIZE; nq.y++) {
 		num -= game.state.galaxy[nq.x][nq.y].stars;
 		if (num <= 0)
 		    break;
@@ -862,8 +860,8 @@
 	coord ns;
 	/* we are in the quadrant! */
 	num = Rand()* game.state.galaxy[nq.x][nq.y].stars + 1;
-	for_sectors(ns.x) {
-	    for_sectors(ns.y) {
+	for (ns.x = 1; ns.x <= QUADSIZE; ns.x++) {
+	    for (ns.y = 1; ns.y <= QUADSIZE; ns.y++) {
 		if (game.quad[ns.x][ns.y]==IHSTAR) {
 		    num--;
 		    if (num==0)

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-28 21:21:33 UTC (rev 644)
+++ trunk/src/moving.c	2006-09-29 07:41:43 UTC (rev 645)
@@ -53,7 +53,7 @@
 		/* Don't do it if being pushed by Nova */
 		if (game.nenhere != 0 && !novapush) {
 		    newcnd();
-		    for_local_enemies(m) {
+		    for (m = 1; m <= game.nenhere; m++) {
 			finald = distance(w, game.ks[m]);
 			game.kavgd[m] = 0.5 * (finald + game.kdist[m]);
 		    }
@@ -195,7 +195,7 @@
     /* No quadrant change -- compute new avg enemy distances */
     game.quad[game.sector.x][game.sector.y] = game.ship;
     if (game.nenhere) {
-	for_local_enemies(m) {
+	for (m = 1; m <= game.nenhere; m++) {
 	    finald = distance(w, game.ks[m]);
 	    game.kavgd[m] = 0.5 * (finald+game.kdist[m]);
 	    game.kdist[m] = finald;
@@ -203,7 +203,8 @@
 	sortklings();
 	if (!game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova)
 	    attack(false);
-	for_local_enemies(m) game.kavgd[m] = game.kdist[m];
+	for (m = 1; m <= game.nenhere; m++)
+	    game.kavgd[m] = game.kdist[m];
     }
     newcnd();
     drawmaps(0);
@@ -989,7 +990,7 @@
     }
     else {
 	ddist = FOREVER;
-	for_starbases(m) {
+	for (m = 1; m <= game.state.rembase; m++) {
 	    xdist = QUADSIZE * distance(game.state.baseq[m], game.quadrant);
 	    if (xdist < ddist) {
 		ddist = xdist;
@@ -1163,7 +1164,7 @@
 	for (;;) {
 	    /* position next to base by trial and error */
 	    game.quad[game.sector.x][game.sector.y] = IHDOT;
-	    for_sectors(l) {
+	    for (l = 1; l <= QUADSIZE; l++) {
 		game.sector.x = 3.0*Rand() - 1.0 + game.base.x;
 		game.sector.y = 3.0*Rand() - 1.0 + game.base.y;
 		if (VALID_SECTOR(game.sector.x, game.sector.y) &&

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-28 21:21:33 UTC (rev 644)
+++ trunk/src/planets.c	2006-09-29 07:41:43 UTC (rev 645)
@@ -499,8 +499,8 @@
 	proutn(_("Spock-  \"I believe the word is"));
 	prouts(_(" *ASTONISHING*"));
 	prout(_(" Mr. Sulu."));
-	for_sectors(i)
-	    for_sectors(j)
+	for (i = 1; i <= QUADSIZE; i++)
+	    for (j = 1; j <= QUADSIZE; j++)
 		if (game.quad[i][j] == IHDOT)
 		    game.quad[i][j] = IHQUEST;
 	prout(_("  Captain, our quadrant is now infested with"));

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-28 21:21:33 UTC (rev 644)
+++ trunk/src/reports.c	2006-09-29 07:41:43 UTC (rev 645)
@@ -195,8 +195,8 @@
 {
     int i, j;
     game.lastchart = game.state.date;
-    for_quadrants(i)
-	for_quadrants(j) 
+    for (i = 1; i <= GALSIZE; i++)
+	for (j = 1; j <= GALSIZE; j++)
 	    if (game.state.galaxy[i][j].charted) {
 		game.state.chart[i][j].klingons = game.state.galaxy[i][j].klingons;
 		game.state.chart[i][j].starbase = game.state.galaxy[i][j].starbase;
@@ -223,9 +223,9 @@
 	prout(_("(Last surveillance update %d stardates ago)."),
 	      (int)(game.state.date-game.lastchart));
     prout("      1    2    3    4    5    6    7    8");
-    for_quadrants(i) {
+    for (i = 1; i <= GALSIZE; i++) {
 	proutn("%d |", i);
-	for_quadrants(j) {
+	for (j = 1; j <= GALSIZE; j++) {
 	    char buf[4];
 	    if ((game.options & OPTION_SHOWME) && i == game.quadrant.x && j == game.quadrant.y)
 		proutn("<");
@@ -412,7 +412,7 @@
 	newcnd();
     for (i = 1; i <= QUADSIZE; i++) {
 	proutn("%2d  ", i);
-	for_sectors(j) {
+	for (j = 1; j <= QUADSIZE; j++) {
 	    sectscan(goodScan, i, j);
 	}
 	skip(1);

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-28 21:21:33 UTC (rev 644)
+++ trunk/src/setup.c	2006-09-29 07:41:43 UTC (rev 645)
@@ -223,9 +223,9 @@
     game.landed = false;
     game.alive = true;
     game.docfac = 0.25;
-    for_quadrants(i)
-	for_quadrants(j) {
-	struct quadrant *quad = &game.state.galaxy[i][j];
+    for (i = 1; i <= GALSIZE; i++)
+	for (j = 1; j <= GALSIZE; j++) {
+	    struct quadrant *quad = &game.state.galaxy[i][j];
 	    quad->charted = 0;
 	    quad->planet = NOPLANET;
 	    quad->romulans = 0;
@@ -256,8 +256,8 @@
     game.lastchart = FOREVER;
     // Put stars in the galaxy
     game.instar = 0;
-    for_quadrants(i)
-	for_quadrants(j) {
+    for (i = 1; i <= GALSIZE; i++)
+	for (j = 1; j <= GALSIZE; j++) {
 	    int k = Rand()*9.0 + 1.0;
 	    game.instar += k;
 	    game.state.galaxy[i][j].stars = k;
@@ -607,8 +607,8 @@
 	game.ientesc = true;
     }
     // Clear quadrant
-    for_sectors(i)
-	for_sectors(j) 
+    for (i = 1; i <= QUADSIZE; i++)
+	for (j = 1; j <= QUADSIZE; j++)
 	    game.quad[i][j] = IHDOT;
     q = &game.state.galaxy[game.quadrant.x][game.quadrant.y];
     // cope with supernova
@@ -627,7 +627,7 @@
 	for (i = 1; i <= game.klhere; i++)
 	    w = newkling(i);
 	// If we need a commander, promote a Klingon
-	for_commanders(i)
+	for (i = 1; i <= game.state.remcom; i++)
 	    if (same(game.state.kcmdr[i], game.quadrant))
 		break;
 			

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-28 21:21:33 UTC (rev 644)
+++ trunk/src/sst.h	2006-09-29 07:41:43 UTC (rev 645)
@@ -36,11 +36,6 @@
  */
 #define VALID_QUADRANT(x, y)	((x)>=1 && (x)<=GALSIZE && (y)>=1 && (y)<=GALSIZE)
 #define VALID_SECTOR(x, y)	((x)>=1 && (x)<=QUADSIZE && (y)>=1 && (y)<=QUADSIZE)
-#define for_quadrants(i)	for (i = 1; i <= GALSIZE; i++)
-#define for_sectors(i)		for (i = 1; i <= QUADSIZE; i++)
-#define for_commanders(i)	for (i = 1; i <= game.state.remcom; i++)
-#define for_local_enemies(i)	for (i = 1; i <= game.nenhere; i++)
-#define for_starbases(i)	for (i = 1; i <= game.state.rembase; i++)
 
 typedef struct {int x; int y;} coord;
 



From esr at mail.berlios.de  Fri Sep 29 09:59:46 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 29 Sep 2006 09:59:46 +0200
Subject: [Sst-commit-watch] r646 - trunk/src
Message-ID: <200609290759.k8T7xkE7014103@sheep.berlios.de>

Author: esr
Date: 2006-09-29 09:59:45 +0200 (Fri, 29 Sep 2006)
New Revision: 646

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/planets.c
   trunk/src/sst.h
Log:
Get rid of DESTROY macro.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-29 07:41:43 UTC (rev 645)
+++ trunk/src/ai.c	2006-09-29 07:59:45 UTC (rev 646)
@@ -360,7 +360,7 @@
 	if (same(game.state.planets[i].w, game.state.kscmdr) &&
 	    game.state.planets[i].crystals == present) {
 	    /* destroy the planet */
-	    DESTROY(&game.state.planets[i]);
+	    game.state.planets[i].pclass = destroyed;
 	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = NOPLANET;
 	    if (!damaged(DRADIO) || game.condition == docked) {
 		pause_game(true);

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-29 07:41:43 UTC (rev 645)
+++ trunk/src/battle.c	2006-09-29 07:59:45 UTC (rev 646)
@@ -399,7 +399,7 @@
 	    prout(_(" destroyed."));
 	    game.state.nplankl++;
 	    q->planet = NOPLANET;
-	    DESTROY(&game.state.planets[game.iplnet]);
+	    game.state.planets[game.iplnet].pclass = destroyed;
 	    game.iplnet = 0;
 	    invalidate(game.plnet);
 	    game.quad[w.x][w.y] = IHDOT;
@@ -413,7 +413,7 @@
 	    prout(_(" destroyed."));
 	    game.state.nworldkl++;
 	    q->planet = NOPLANET;
-	    DESTROY(&game.state.planets[game.iplnet]);
+	    game.state.planets[game.iplnet].pclass = destroyed;
 	    game.iplnet = 0;
 	    invalidate(game.plnet);
 	    game.quad[w.x][w.y] = IHDOT;

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-29 07:41:43 UTC (rev 645)
+++ trunk/src/events.c	2006-09-29 07:59:45 UTC (rev 646)
@@ -689,7 +689,7 @@
 			game.state.nplankl++;
 			crmena(true, IHP, sector, scratch);
 			prout(_(" destroyed."));
-			DESTROY(&game.state.planets[game.iplnet]);
+			game.state.planets[game.iplnet].pclass = destroyed;
 			game.iplnet = 0;
 			invalidate(game.plnet);
 			if (game.landed) {
@@ -919,7 +919,7 @@
 	int loop;
 	for (loop = 0; loop < game.inplan; loop++)
 	    if (same(game.state.planets[loop].w, nq)) {
-		DESTROY(&game.state.planets[loop]);
+		game.state.planets[loop].pclass = destroyed;
 	    }
     }
     /* Destroy any base in supernovaed quadrant */

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-29 07:41:43 UTC (rev 645)
+++ trunk/src/planets.c	2006-09-29 07:59:45 UTC (rev 646)
@@ -22,10 +22,11 @@
     prout(_("Spock-  \"Planet report follows, Captain.\""));
     skip(1);
     for (i = 0; i < game.inplan; i++) {
+	if (game.state.planets[i].pclass == destroyed)
+	    continue;
 	if ((game.state.planets[i].known != unknown
-	    && game.state.planets[i].inhabited == UNINHABITED)
-	    || (idebug && game.state.planets[i].w.x !=0)
-	    ) {
+	     && game.state.planets[i].inhabited == UNINHABITED)
+	    || idebug) {
 	    iknow = true;
 	    if (idebug && game.state.planets[i].known==unknown)
 		proutn("(Unknown) ");

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-29 07:41:43 UTC (rev 645)
+++ trunk/src/sst.h	2006-09-29 07:59:45 UTC (rev 646)
@@ -47,15 +47,13 @@
 
 typedef struct {
     coord w;
-    enum {M=0, N=1, O=2} pclass;
+    enum {destroyed= -1, M=0, N=1, O=2} pclass;
     int inhabited;	/* if NZ, an index into a name array */
 #define UNINHABITED	-1
     enum {mined=-1, present=0, absent=1} crystals; /* has crystals */
     enum {unknown, known, shuttle_down} known;
 } planet;
 
-#define DESTROY(pl)	memset(pl, '\0', sizeof(planet))
-
 typedef enum {
     IHR = 'R',
     IHK = 'K',



From esr at mail.berlios.de  Fri Sep 29 11:21:09 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 29 Sep 2006 11:21:09 +0200
Subject: [Sst-commit-watch] r647 - trunk/src
Message-ID: <200609290921.k8T9L9cB020191@sheep.berlios.de>

Author: esr
Date: 2006-09-29 11:21:09 +0200 (Fri, 29 Sep 2006)
New Revision: 647

Modified:
   trunk/src/sst.py
Log:
Reset all structures for stupid literal translation of the game.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-09-29 07:59:45 UTC (rev 646)
+++ trunk/src/sst.py	2006-09-29 09:21:09 UTC (rev 647)
@@ -1,41 +1,34 @@
 """
 sst.py =-- Super Star Trek in Python
 
-Control flow of this translation is pretty much identical to the C version
-(and thus like the ancestral FORTRAN) but the data structures are
-radically different -- the Python code makes heavy use of objects.
+"""
+import os, sys, math, curses
 
-Note that the game.quad, game.snap.galaxy and game.snap.chart members
-are not actually arrays but dictioaries indixed by coord tuples.  Be setting
-the hash of a coord equal to the hash of a literal tuple containing its
-coordinate data, we ensure these can be indexed both ways.
+SSTDOC = "/usr/share/doc/sst/sst.doc"
 
-"""
-import math
+# Stub to be replaced
+def _(str): return str
 
 PHASEFAC	= 2.0
 GALSIZE 	= 8
-NINHAB  	= GALSIZE * GALSIZE / 2
+NINHAB  	= (GALSIZE * GALSIZE / 2)
 MAXUNINHAB	= 10
-PLNETMAB	= NINHAB + MAXUNINHAB
+PLNETMAX	= (NINHAB + MAXUNINHAB)
 QUADSIZE	= 10
-BASEMAX 	= 5
-FULLCREW	= 428	 # BSD Trek was 387, that's wrong
+BASEMAX 	= (GALSIZE * GALSIZE / 12)
 MAXKLGAME	= 127
 MAXKLQUAD	= 9
+FULLCREW	= 428	# BSD Trek was 387, that's wrong 
 FOREVER 	= 1e30
 
-# These macros hide the difference between 0-origin and 1-origin addressing.
-# They're a step towards de-FORTRANizing the code.
-def VALID_QUADRANT(x,y): ((x)>=1 and (x)<=GALSIZE and (y)>=1 and (y)<=GALSIZE)
-def VALID_SECTOR(x, y):	((x)>=1 and (x)<=QUADSIZE and (y)>=1 and (y)<=QUADSIZE)
+# These functions hide the difference between 0-origin and 1-origin addressing.
+def VALID_QUADRANT(x, y):	return ((x)>=1 and (x)<=GALSIZE and (y)>=1 and (y)<=GALSIZE)
+def VALID_SECTOR(x, y):	return ((x)>=1 and (x)<=QUADSIZE and (y)>=1 and (y)<=QUADSIZE)
 
-# These types have not been dealt with yet 
-IHQUEST = '?',
-IHWEB = '#',
-IHMATER0 = '-',
-IHMATER1 = 'o',
-IHMATER2 = '0',
+def square(i):		return ((i)*(i))
+def distance(c1, c2):	return math.sqrt(square(c1.x - c2.x) + square(c1.y - c2.y))
+def invalidate(w):	w.x = w.y = 0
+def is_valid(w):	return (w.x != 0 and w.y != 0)
 
 class coord:
     def __init(self, x=None, y=None):
@@ -60,239 +53,225 @@
     def __str__(self):
         return "%d - %d" % (self.x, self.y)
 
-class feature:
-    "A feature in the current quadrant (ship, star, black hole, base, etc)." 
-    def __init__(self):
-        self.type = None	# name of feature type
-        self.sector = None	# sector location
-    def distance(self):
-        return self.sector.distance(game.sector)
-    def __str__(self):
-        "This will be overridden by subclasses."
-        return self.name[0]
-    def sectormove(self, dest):
-        "Move this feature within the current quadrant." 
-        if self.sector:
-            game.quad[self.sector] = None
-        game.quad[dest] = self
-        self.sector = dest
-
-class ship(feature):
-    "A starship, frindly or enemy." 
-    def __init__(self, type, power):
-        feature.__init__(self)
-        self.type = type	# klingon, romulan, commander,
-        			# supercommander, tholian,
-                                # enterprise, faerie queene.
-        self.power = power	# power
-        if self.type in ("Klingon", "Commander", "Super-Commander"):
-            game.remkl += 1
-        elif self.type == "Romulan":
-            game.romrem += 1
-    def __del__(self):
-        if self.type in ("Klingon", "Commander", "Super-Commander"):
-            game.remkl -= 1
-        elif self.type == "Romulan":
-            game.romrem -= 1
-
-class space(feature):
-    "Empty space.  Has no state, just knows how to identify iself."
-    def __str__(self):
-        return '*'
-
-class star(feature):
-    "A star.  Has no state, just knows how to identify iself."
-    def __str__(self):
-        return '*'
-
-class planet(feature):
-    "A planet.  May be inhabited or not, may hold dilithium crystals or not."
+class planet:
     def __init(self):
-        feature.__init__(self)
-        self.name = None
-        self.crystals = None	# "absent", "present", or "mined"
-        self.inhabited = False
-        self.known = "unknown"	# Other values: "known" and "shuttle down"
-        game.state.planets.append(self)
-    def __del__(self):
-        game.state.planets.remove(self)
-    def __str__(self):
-        if self.inhabited:
-            return '@'
-        else:
-            return 'P'
+        self.name = None	# String-valued if inhabited
+        self.w = None
+        self.pclass = None	# could be ""M", "N", "O", or "destroyed"
+        self.crystals = None	# could be "mined", "present", "absent"
+        self.known = None	# could be "unknown", "known", "shuttle_down"
 
-class web(feature):
-    "A bit of Tholian web.  Has no state, just knows how to identify iself."
-    def __str__(self):
-        return '*'
+# How to represent features
+IHR = 'R',
+IHK = 'K',
+IHC = 'C',
+IHS = 'S',
+IHSTAR = '*',
+IHP = 'P',
+IHW = '@',
+IHB = 'B',
+IHBLANK = ' ',
+IHDOT = '.',
+IHQUEST = '?',
+IHE = 'E',
+IHF = 'F',
+IHT = 'T',
+IHWEB = '#',
+IHMATER0 = '-',
+IHMATER1 = 'o',
+IHMATER2 = '0'
 
-class blackhole(feature):
-    "A black hole.  Has no hair, just knows how to identify iself."
-    def __str__(self):
-        return ' '
-
-class starbase(feature):
-    "Starbases also have no features, just a location."
-    def __init(self, quadrant):
-        feature.__init__(self)
-        self.quadrant = quadrant
-        game.state.bases.append(self)
-    def __del__(self):
-        game.state.bases.remove(self)
-    def __str__(self):
-        return 'B'
-
+NOPLANET = None
 class quadrant:
-    def __init__(self):
+    def __init(self):
         self.stars = None
         self.planet = None
-        self.starbase = None
-        self.klingons = None
-        self.romulans = None
-        self.supernova = None
-        self.charted = None
-        self.status = "secure"	# Other valuues: "distressed", "enslaved"
-    def enemies(self):
-        "List enemies in this quadrant."
-        lst = []
-        for feature in self.quad.values:
-            if not isinstance(feature, ship):
-                continue
-            if feature.name not in ("Enterprise", "Faerie Queene"):
-                lst.append(feature)
-        return lst
+	self.starbase = None
+	self.klingons = None
+	self.romulans = None
+	self.supernova = None
+	self.charted = None
+        self.status = None	# Could be "secure", "distressed", "enslaved"
 
-class page:
-    "A chart page.  The starchart is a 2D array of these."
-    def __init__(self):
-	self.stars = None	# Will hold a number
-	self.starbase = None	# Will hold a bool
-	self.klingons = None	# Will hold a number
-
 class snapshot:
-    "State of the universe.  The galaxy is a 2D array of these."
-    def __init__(self):
+    def __init(self):
+        self.snap = False	# snapshot taken
         self.crew = None	# crew complement
 	self.remkl = None	# remaining klingons
 	self.remcom = None	# remaining commanders
 	self.nscrem = None	# remaining super commanders
+	self.rembase = None	# remaining bases
 	self.starkl = None	# destroyed stars
 	self.basekl = None	# destroyed bases
 	self.nromrem = None	# Romulans remaining
-	self.nplankl = None	# destroyed uninhabited planets self.nworldkl = None	# destroyed inhabited planets
-        self.planets = [];	# List of planets known
+	self.nplankl = None	# destroyed uninhabited planets
+	self.nworldkl = None	# destroyed inhabited planets
+        self.planets = []	# Planet information
         self.date = None	# stardate
 	self.remres = None	# remaining resources
-	self. remtime = None	# remaining time
-        self.bases = [] 	# Base quadrant coordinates
+	self.remtime = None	# remaining time
+        self.baseq = [] 	# Base quadrant coordinates
         self.kcmdr = [] 	# Commander quadrant coordinates
-        self.kscmdr = None	# Supercommander quadrant coordinates
-        self.galaxy = {}	# Dictionary of quadrant objects
-        self.chart = {}		# Dictionary of page objects
+	self.kscmdr = None	# Supercommander quadrant coordinates
+        self.galaxy = None 	# The Galaxy (subscript 0 not used)
+    	self.chart = None 	# the starchart (subscript 0 not used)
 
-def damaged(dev):
-    return game.damage[dev] != 0.0
-
 class event:
     def __init__(self):
-        self.date = None	# The only mandatory attribute
+        self.date = None	# A real number
+        self.quadrant = None	# A coord structure
 
-class game:
+# game options 
+OPTION_ALL	= 0xffffffff
+OPTION_TTY	= 0x00000001	# old interface 
+OPTION_CURSES	= 0x00000002	# new interface 
+OPTION_IOMODES	= 0x00000003	# cover both interfaces 
+OPTION_PLANETS	= 0x00000004	# planets and mining 
+OPTION_THOLIAN	= 0x00000008	# Tholians and their webs 
+OPTION_THINGY	= 0x00000010	# Space Thingy can shoot back 
+OPTION_PROBE	= 0x00000020	# deep-space probes 
+OPTION_SHOWME	= 0x00000040	# bracket Enterprise in chart 
+OPTION_RAMMING	= 0x00000080	# enemies may ram Enterprise 
+OPTION_MVBADDY	= 0x00000100	# more enemies can move 
+OPTION_BLKHOLE	= 0x00000200	# black hole may timewarp you 
+OPTION_BASE	= 0x00000400	# bases have good shields 
+OPTION_WORLDS	= 0x00000800	# logic for inhabited worlds 
+OPTION_PLAIN	= 0x01000000	# user chose plain game 
+OPTION_ALMY	= 0x02000000	# user chose Almy variant 
+
+# Define devices 
+DSRSENS	= 0
+DLRSENS	= 1
+DPHASER	= 2
+DPHOTON	= 3
+DLIFSUP	= 4
+DWARPEN	= 5
+DIMPULS	= 6
+DSHIELD	= 7
+DRADIO	= 0
+DSHUTTL = 9
+DCOMPTR = 10
+DNAVSYS	= 11
+DTRANSP = 12
+DSHCTRL	= 13
+DDRAY	= 14
+DDSP	= 15
+NDEVICES= 16	# Number of devices
+
+def damaged(dev):	return (game.damage[dev] != 0.0)
+
+# Define future events 
+FSPY	= 0	# Spy event happens always (no future[] entry)
+		# can cause SC to tractor beam Enterprise
+FSNOVA  = 1	# Supernova
+FTBEAM  = 2	# Commander tractor beams Enterprise
+FSNAP   = 3	# Snapshot for time warp
+FBATTAK = 4	# Commander attacks base
+FCDBAS  = 5	# Commander destroys base
+FSCMOVE = 6	# Supercommander moves (might attack base)
+FSCDBAS = 7	# Supercommander destroys base
+FDSPROB = 8	# Move deep space probe
+FDISTR	= 9	# Emit distress call from an inhabited world 
+FENSLV	= 10	# Inhabited word is enslaved */
+FREPRO	= 11	# Klingons build a ship in an enslaved system
+NEVENTS	= 12
+
+#
+# abstract out the event handling -- underlying data structures will change
+# when we implement stateful events
+# 
+def findevent(evtype):	return game.future[evtype]
+
+class gamestate:
     def __init__(self):
-        self.options = []		# List of option strings
-        self.state = snapshot()		# State of the universe
-        self.snapsht = snapshot()	# For backwards timetravel
-        self.quad = {}			# contents of our quadrant
-        self.kpower = {}		# enemy energy levels
-        self.kdist = {}			# enemy distances
-        self.kavgd = {}			# average distances
-        self.damage = {}		# damage encountered
-        self.future = []		# future events
-        self.passwd = None		# Self Destruct password
-        # Coordinate members start here
-	self.enemies = {}			# enemy sector locations
-	self.quadrant = None		# where we are
-        self.sector = None
-	self.tholian = None		# coordinates of Tholian
-	self.base = None		# position of base in current quadrant
-	self.battle = None		# base coordinates being attacked
-	self.plnet = None		# location of planet in quadrant
-	self.probec = None		# current probe quadrant
-        # Flag members start here
-	self.gamewon = None		# Finished!
-	self.ididit = None		# action taken -- allows enemy to attack
-	self.alive = None		# we are alive (not killed)
-	self.justin = None		# just entered quadrant
-	self.shldup = None		# shields are up
-	self.shldchg = None		# shield changing (affects efficiency)
-	self.comhere = None		# commander here
-	self.ishere = None		# super-commander in quadrant
-	self.iscate = None		# super commander is here
-	self.ientesc = None		# attempted escape from supercommander
-	self.ithere = None		# Tholian is here 
-	self.resting = None		# rest time
-	self.icraft = None		# Kirk in Galileo
-	self.landed = None		# party on planet or on ship
-	self.alldone = None		# game is now finished
-	self.neutz = None		# Romulan Neutral Zone
-	self.isarmed = None		# probe is armed
-	self.inorbit = None		# orbiting a planet
-	self.imine = None		# mining
-	self.icrystl = None		# dilithium crystals aboard
-	self.iseenit = None		# seen base attack report
-	self.thawed = None		# thawed game
-        # String members start here
-        self.condition = None		# green, yellow, red, docked, dead,
-        self.iscraft = None		# onship, offship, removed
-        self.skill = None		# levels: none, novice, fair, good,
-        				# expert, emeritus
-        # Integer nembers sart here
-x	self.inkling = None		# initial number of klingons
-	self.inbase = None		# initial number of bases
-	self.incom = None		# initial number of commanders
-	self.inscom = None		# initial number of commanders
-	self.inrom = None		# initial number of commanders
-	self.instar = None		# initial stars
-	self.intorps = None		# initial/max torpedoes
-	self.torps = None		# number of torpedoes
-	self.ship = None		# ship type -- 'E' is Enterprise
-	self.abandoned = None		# count of crew abandoned in space
-	self.length = None		# length of game
-	self.klhere = None		# klingons here
-	self.casual = None		# causalties
-	self.nhelp = None		# calls for help
-	self.nkinks = None		# count of energy-barrier crossings
-	self.iplnet = None		# planet # in quadrant
-	self.inplan = None		# initial planets
-	self.irhere = None		# Romulans in quadrant
-	self.isatb = None		# =1 if super commander is attacking base
-	self.tourn = None		# tournament number
-	self.proben = None		# number of moves for probe
-	self.nprobes = None		# number of probes available
-        # Float members start here
-	self.inresor = None		# initial resources
-	self.intime = None		# initial time
-	self.inenrg = None		# initial/max energy
-	self.inshld = None		# initial/max shield
-	self.inlsr = None		# initial life support resources
-	self.indate = None		# initial date
-	self.energy = None		# energy level
-	self.shield = None		# shield level
-	self.warpfac = None		# warp speed
-	self.wfacsq = None		# squared warp factor
-	self.lsupres = None		# life support reserves
-	self.dist = None		# movement distance
-	self.direc = None		# movement direction
-	self.optime = None		# time taken by current operation
-	self.docfac = None		# repair factor when docking (constant?)
-	self.damfac = None		# damage factor
-	self.lastchart = None		# time star chart was last updated
-	self.cryprob = None		# probability that crystal will work
-	self.probex = None		# location of probe
-	self.probey = None		#
-	self.probeinx = None		# probe x,y increment
-	self.probeiny = None		#
-	self.height = None		# height of orbit around planet
+        self.options = None	# Game options
+        self.state = None	# A snapshot structure
+        self.snapsht = None	# Last snapshot taken for time-travel purposes
+        self.quad = [[IHDOT * (QUADSIZE+1)] * (QUADSIZE+1)]	# contents of our quadrant
+        self.kpower = [[0 * (QUADSIZE+1)] * (QUADSIZE+1)]	# enemy energy levels
+        self.kdist = [[0 * (QUADSIZE+1)] * (QUADSIZE+1)]	# enemy distances
+        self.kavgd = [[0 * (QUADSIZE+1)] * (QUADSIZE+1)]	# average distances
+        self.damage = [0] * NDEVICES	# damage encountered
+        self.future = [None] * NEVENTS	# future events
+        self.passwd  = None;		# Self Destruct password
+        self.ks = [[None * (QUADSIZE+1)] * (QUADSIZE+1)]	# enemy sector locations
+        self.quadrant = None	# where we are in the large
+        self.sector = None	# where we are in the small
+        self.tholian = None	# coordinates of Tholian
+        self.base = None	# position of base in current quadrant
+        self.battle = None	# base coordinates being attacked
+        self.plnet = None	# location of planet in quadrant
+        self.probec = None	# current probe quadrant
+        self.gamewon = False	# Finished!
+        self.ididit = False	# action taken -- allows enemy to attack
+        self.alive = False	# we are alive (not killed)
+        self.justin = False	# just entered quadrant
+        self.shldup = False	# shields are up
+        self.shldchg = False	# shield is changing (affects efficiency)
+        self.comhere = False	# commander here
+        self.ishere = False	# super-commander in quadrant
+        self.iscate = False	# super commander is here
+        self.ientesc = False	# attempted escape from supercommander
+        self.ithere = False	# Tholian is here 
+        self.resting = False	# rest time
+        self.icraft = False	# Kirk in Galileo
+        self.landed = False	# party on planet (true), on ship (false)
+        self.alldone = False	# game is now finished
+        self.neutz = False	# Romulan Neutral Zone
+        self.isarmed = False	# probe is armed
+        self.inorbit = False	# orbiting a planet
+        self.imine = False	# mining
+        self.icrystl = False	# dilithium crystals aboard
+        self.iseenit = False	# seen base attack report
+        self.thawed = False	# thawed game
+        self.condition = None	# "green", "yellow", "red", "docked", "dead"
+        self.iscraft = None	# "onship", "offship", "removed"
+        self.skill = None	# Player skill level
+        self.inkling = 0	# initial number of klingons
+        self.inbase = 0		# initial number of bases
+        self.incom = 0		# initial number of commanders
+        self.inscom = 0		# initial number of commanders
+        self.inrom = 0		# initial number of commanders
+        self.instar = 0		# initial stars
+        self.intorps = 0	# initial/max torpedoes
+        self.torps = 0		# number of torpedoes
+        self.ship = 0		# ship type -- 'E' is Enterprise
+        self.abandoned = 0	# count of crew abandoned in space
+        self.length = 0		# length of game
+        self.klhere = 0		# klingons here
+        self.casual = 0		# causalties
+        self.nhelp = 0		# calls for help
+        self.nkinks = 0		# count of energy-barrier crossings
+        self.iplnet = 0		# planet # in quadrant
+        self.inplan = 0		# initial planets
+        self.nenhere = 0	# number of enemies in quadrant
+        self.irhere = 0		# Romulans in quadrant
+        self.isatb = 0		# =1 if super commander is attacking base
+        self.tourn = 0		# tournament number
+        self.proben = 0		# number of moves for probe
+        self.nprobes = 0	# number of probes available
+        self.inresor = 0.0	# initial resources
+        self.intime = 0.0	# initial time
+        self.inenrg = 0.0	# initial/max energy
+        self.inshld = 0.0	# initial/max shield
+        self.inlsr = 0.0	# initial life support resources
+        self.indate = 0.0	# initial date
+        self.energy = 0.0	# energy level
+        self.shield = 0.0	# shield level
+        self.warpfac = 0.0	# warp speed
+        self.wfacsq = 0.0	# squared warp factor
+        self.lsupres = 0.0	# life support reserves
+        self.dist = 0.0		# movement distance
+        self.direc = 0.0	# movement direction
+        self.optime = 0.0	# time taken by current operation
+        self.docfac = 0.0	# repair factor when docking (constant?)
+        self.damfac = 0.0	# damage factor
+        self.lastchart = 0.0	# time star chart was last updated
+        self.cryprob = 0.0	# probability that crystal will work
+        self.probex = 0.0	# location of probe
+        self.probey = 0.0	#
+        self.probeinx = 0.0	# probe x,y increment
+        self.probeiny = 0.0	#
+        self.height = 0.0	# height of orbit around planet
 
 



From esr at mail.berlios.de  Fri Sep 29 11:39:24 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 29 Sep 2006 11:39:24 +0200
Subject: [Sst-commit-watch] r648 - trunk/src
Message-ID: <200609290939.k8T9dOx3021281@sheep.berlios.de>

Author: esr
Date: 2006-09-29 11:39:24 +0200 (Fri, 29 Sep 2006)
New Revision: 648

Modified:
   trunk/src/sst.py
Log:
Create blank objects in all arrays during Python game state initialization.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-09-29 09:21:09 UTC (rev 647)
+++ trunk/src/sst.py	2006-09-29 09:39:24 UTC (rev 648)
@@ -55,8 +55,8 @@
 
 class planet:
     def __init(self):
-        self.name = None	# String-valued if inhabited
-        self.w = None
+        self.name = None	# string-valued if inhabited
+        self.w = coord()	# quadrant located
         self.pclass = None	# could be ""M", "N", "O", or "destroyed"
         self.crystals = None	# could be "mined", "present", "absent"
         self.known = None	# could be "unknown", "known", "shuttle_down"
@@ -93,6 +93,12 @@
 	self.charted = None
         self.status = None	# Could be "secure", "distressed", "enslaved"
 
+class page:
+    def __init(self):
+	self.stars = None
+	self.starbase = None
+	self.klingons = None
+
 class snapshot:
     def __init(self):
         self.snap = False	# snapshot taken
@@ -107,14 +113,28 @@
 	self.nplankl = None	# destroyed uninhabited planets
 	self.nworldkl = None	# destroyed inhabited planets
         self.planets = []	# Planet information
+        for i in range(PLNETMAX):
+            self.planets.append(planet())
         self.date = None	# stardate
 	self.remres = None	# remaining resources
 	self.remtime = None	# remaining time
         self.baseq = [] 	# Base quadrant coordinates
+        for i in range(BASEMAX+1):
+            self.baseq.append(coord())
         self.kcmdr = [] 	# Commander quadrant coordinates
-	self.kscmdr = None	# Supercommander quadrant coordinates
-        self.galaxy = None 	# The Galaxy (subscript 0 not used)
-    	self.chart = None 	# the starchart (subscript 0 not used)
+        for i in range(QUADSIZE+1):
+            self.kcmdr.append(coord())
+	self.kscmdr = coord()	# Supercommander quadrant coordinates
+        self.galaxy = [] 	# The Galaxy (subscript 0 not used)
+        for i in range(GALSIZE+1):
+            self.chart.append([])
+            for j in range(GALSIZE+1):
+                self.galaxy[i].append(quadrant())
+    	self.chart = [] 	# the starchart (subscript 0 not used)
+        for i in range(GALSIZE+1):
+            self.chart.append([])
+            for j in range(GALSIZE+1):
+                self.chart[i].append(page())
 
 class event:
     def __init__(self):
@@ -192,7 +212,9 @@
         self.kdist = [[0 * (QUADSIZE+1)] * (QUADSIZE+1)]	# enemy distances
         self.kavgd = [[0 * (QUADSIZE+1)] * (QUADSIZE+1)]	# average distances
         self.damage = [0] * NDEVICES	# damage encountered
-        self.future = [None] * NEVENTS	# future events
+        self.future = [0.0] * NEVENTS	# future events
+        for i in range(NEVENTS):
+            self.future.append(event())
         self.passwd  = None;		# Self Destruct password
         self.ks = [[None * (QUADSIZE+1)] * (QUADSIZE+1)]	# enemy sector locations
         self.quadrant = None	# where we are in the large
@@ -274,4 +296,3 @@
         self.probeiny = 0.0	#
         self.height = 0.0	# height of orbit around planet
 
-



From esr at mail.berlios.de  Sat Sep 30 11:00:50 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sat, 30 Sep 2006 11:00:50 +0200
Subject: [Sst-commit-watch] r649 - trunk/src
Message-ID: <200609300900.k8U90o2j003803@sheep.berlios.de>

Author: esr
Date: 2006-09-30 11:00:49 +0200 (Sat, 30 Sep 2006)
New Revision: 649

Modified:
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/finish.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.h
Log:
Get rid of some macros that block mechanical translation.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-09-29 09:39:24 UTC (rev 648)
+++ trunk/src/ai.c	2006-09-30 09:00:49 UTC (rev 649)
@@ -389,7 +389,7 @@
 	prout("== SUPERCOMMANDER");
 
     /* Decide on being active or passive */
-    avoid = ((NKILLC+NKILLK)/(game.state.date+0.01-game.indate) < 0.1*game.skill*(game.skill+1.0) ||
+    avoid = ((game.incom - game.state.remcom + game.inkling - game.state.remkl)/(game.state.date+0.01-game.indate) < 0.1*game.skill*(game.skill+1.0) ||
 	    (game.state.date-game.indate) < 3.0);
     if (!game.iscate && avoid) {
 	/* compute move away from Enterprise */

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-09-29 09:39:24 UTC (rev 648)
+++ trunk/src/battle.c	2006-09-30 09:00:49 UTC (rev 649)
@@ -239,7 +239,7 @@
     }
     game.shldup = false;
     prout(_("***Shields are down."));
-    if (KLINGREM) {
+    if (game.state.remkl + game.state.remcom + game.state.nscrem) {
 	pause_game(true);
 	damagereport();
     }
@@ -639,7 +639,7 @@
 	    r = (Rand()+Rand())*0.5 -0.5;
 	    r += 0.002*game.kpower[loop]*r;
 	    torpedo(course, r, jay, &hit, 1, 1);
-	    if (KLINGREM==0) 
+	    if ((game.state.remkl + game.state.remcom + game.state.nscrem)==0) 
 		finish(FWON); /* Klingons did themselves in! */
 	    if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova || game.alldone) 
 		return; /* Supernova or finished */
@@ -789,7 +789,7 @@
     /* For each kind of enemy, finish message to player */
     prout(_(" destroyed."));
     game.quad[w.x][w.y] = IHDOT;
-    if (KLINGREM==0)
+    if ((game.state.remkl + game.state.remcom + game.state.nscrem)==0)
 	return;
 
     game.state.remtime = game.state.remres/(game.state.remkl + 4*game.state.remcom);
@@ -966,7 +966,7 @@
 	if (game.alldone || game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova)
 	    return;
     }
-    if (KLINGREM==0)
+    if ((game.state.remkl + game.state.remcom + game.state.nscrem)==0)
 	finish(FWON);
 }
 
@@ -1368,7 +1368,7 @@
 	skip(1);
 	if (kpow == 0) {
 	    deadkl(w, ienm, w);
-	    if (KLINGREM==0)
+	    if ((game.state.remkl + game.state.remcom + game.state.nscrem)==0)
 		finish(FWON);		
 	    if (game.alldone)
 		return;

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-09-29 09:39:24 UTC (rev 648)
+++ trunk/src/events.c	2006-09-30 09:00:49 UTC (rev 649)
@@ -943,7 +943,7 @@
     if (same(game.quadrant, nq) || !damaged(DRADIO) || game.condition == docked)
 	game.state.galaxy[nq.x][nq.y].supernova = true;
     /* If supernova destroys last Klingons give special message */
-    if (KLINGREM==0 && !same(nq, game.quadrant)) {
+    if ((game.state.remkl + game.state.remcom + game.state.nscrem)==0 && !same(nq, game.quadrant)) {
 	skip(2);
 	if (!induced)
 	    prout(_("Lucky you!"));

Modified: trunk/src/finish.c
===================================================================
--- trunk/src/finish.c	2006-09-29 09:39:24 UTC (rev 648)
+++ trunk/src/finish.c	2006-09-30 09:00:49 UTC (rev 649)
@@ -100,7 +100,7 @@
 		badpt = 0.0;	// Close enough!
 	    if (game.state.date-game.indate < 5.0 ||
 		// killsPerDate >= RateMax
-		KLINGKILLED/(game.state.date-game.indate) >=
+		((game.inkling + game.incom + game.inscom) - (game.state.remkl + game.state.remcom + game.state.nscrem))/(game.state.date-game.indate) >=
 		0.1*game.skill*(game.skill+1.0) + 0.1 + 0.008*badpt) {
 		skip(1);
 		prout(_("In fact, you have done so well that Starfleet Command"));
@@ -166,7 +166,7 @@
 	prout(_("conquered.  Your starship is now Klingon property,"));
 	prout(_("and you are put on trial as a war criminal.  On the"));
 	proutn(_("basis of your record, you are "));
-	if (KLINGREM*3.0 > INKLINGTOT) {
+	if ((game.state.remkl + game.state.remcom + game.state.nscrem)*3.0 > (game.inkling + game.incom + game.inscom)) {
 	    prout(_("acquitted."));
 	    skip(1);
 	    prout(_("LIVE LONG AND PROSPER."));
@@ -296,7 +296,7 @@
     else if (game.ship == IHE)
 	game.ship = IHF;
     game.alive = false;
-    if (KLINGREM != 0) {
+    if ((game.state.remkl + game.state.remcom + game.state.nscrem) != 0) {
 	double goodies = game.state.remres/game.inresor;
 	double baddies = (game.state.remkl + 2.0*game.state.remcom)/(game.inkling+2.0*game.incom);
 	if (goodies/baddies >= 1.0+0.5*Rand()) {
@@ -330,9 +330,9 @@
     int ithperd, iwon, klship;
 
     iskill = game.skill;
-    if ((timused == 0 || KLINGREM != 0) && timused < 5.0)
+    if ((timused == 0 || (game.state.remkl + game.state.remcom + game.state.nscrem) != 0) && timused < 5.0)
 	timused = 5.0;
-    perdate = KLINGKILLED/timused;
+    perdate = ((game.inkling + game.incom + game.inscom) - (game.state.remkl + game.state.remcom + game.state.nscrem))/timused;
     ithperd = 500*perdate + 0.5;
     iwon = 0;
     if (game.gamewon)
@@ -345,28 +345,28 @@
 	klship = 2;
     if (!game.gamewon)
 	game.state.nromrem = 0; // None captured if no win
-    iscore = 10*NKILLK + 50*NKILLC + ithperd + iwon
+    iscore = 10*(game.inkling - game.state.remkl) + 50*(game.incom - game.state.remcom) + ithperd + iwon
 	- 100*game.state.basekl - 100*klship - 45*game.nhelp -5*game.state.starkl - game.casual
-	+ 20*NKILLROM + 200*NKILLSC - 10*game.state.nplankl - 300*game.state.nworldkl + game.state.nromrem;
+	+ 20*(game.inrom - game.state.nromrem) + 200*(game.inscom - game.state.nscrem) - 10*game.state.nplankl - 300*game.state.nworldkl + game.state.nromrem;
     if (!game.alive)
 	iscore -= 200;
     skip(2);
     prout(_("Your score --"));
-    if (NKILLROM)
+    if (game.inrom - game.state.nromrem)
 	prout(_("%6d Romulans destroyed                 %5d"),
-	      NKILLROM,20*NKILLROM);
+	      game.inrom - game.state.nromrem, 20*(game.inrom - game.state.nromrem));
     if (game.state.nromrem)
 	prout(_("%6d Romulans captured                  %5d"),
 	      game.state.nromrem, game.state.nromrem);
-    if (NKILLK)
+    if (game.inkling - game.state.remkl)
 	prout(_("%6d ordinary Klingons destroyed        %5d"),
-	      NKILLK, 10*NKILLK);
-    if (NKILLC)
+	      game.inkling - game.state.remkl, 10*(game.inkling - game.state.remkl));
+    if (game.incom - game.state.remcom)
 	prout(_("%6d Klingon commanders destroyed       %5d"),
-	      NKILLC, 50*NKILLC);
-    if (NKILLSC)
+	      game.incom - game.state.remcom, 50*(game.incom - game.state.remcom));
+    if (game.inscom - game.state.nscrem)
 	prout(_("%6d Super-Commander destroyed          %5d"),
-	      NKILLSC, 200*NKILLSC);
+	      game.inscom - game.state.nscrem, 200*(game.inscom - game.state.nscrem));
     if (ithperd)
 	prout(_("%6.2f Klingons per stardate              %5d"),
 	      perdate, ithperd);

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-09-29 09:39:24 UTC (rev 648)
+++ trunk/src/moving.c	2006-09-30 09:00:49 UTC (rev 649)
@@ -793,7 +793,7 @@
     } while 
 	/* Repeat if another snova */
 	(game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova);
-    if (KLINGREM==0) 
+    if ((game.state.remkl + game.state.remcom + game.state.nscrem)==0) 
 	finish(FWON); /* Snova killed remaining enemy. */
 }
 

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-09-29 09:39:24 UTC (rev 648)
+++ trunk/src/planets.c	2006-09-30 09:00:49 UTC (rev 649)
@@ -450,7 +450,7 @@
 	while (game.nenhere > 0)
 	    deadkl(game.ks[1], game.quad[game.ks[1].x][game.ks[1].y],game.ks[1]);
 	prout(_("Ensign Chekov-  \"Congratulations, Captain!\""));
-	if (KLINGREM == 0)
+	if ((game.state.remkl + game.state.remcom + game.state.nscrem) == 0)
 	    finish(FWON);    
 	if ((game.options & OPTION_PLAIN) == 0) {
 	    prout(_("Spock-  \"Captain, I believe the `Experimental Death Ray'"));

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-09-29 09:39:24 UTC (rev 648)
+++ trunk/src/reports.c	2006-09-30 09:00:49 UTC (rev 649)
@@ -60,10 +60,12 @@
     if (game.tourn)
 	prout(_("This is tournament game %d."), game.tourn);
     prout(_("Your secret password is \"%s\""),game.passwd);
-    proutn(_("%d of %d Klingons have been killed"), KLINGKILLED, INKLINGTOT);
-    if (NKILLC)
-	prout(_(", including %d Commander%s."), NKILLC, NKILLC==1?"":_("s"));
-    else if (NKILLK + NKILLSC > 0)
+    proutn(_("%d of %d Klingons have been killed"), 
+	   ((game.inkling + game.incom + game.inscom) - (game.state.remkl + game.state.remcom + game.state.nscrem)), 
+	   (game.inkling + game.incom + game.inscom));
+    if (game.incom - game.state.remcom)
+	prout(_(", including %d Commander%s."), game.incom - game.state.remcom, (game.incom - game.state.remcom)==1?"":_("s"));
+    else if (game.inkling - game.state.remkl + (game.inscom - game.state.nscrem) > 0)
 	prout(_(", but no Commanders."));
     else
 	prout(".");
@@ -344,7 +346,7 @@
     );
 
     RQ(9,
-        prstat(_("Klingons Left"), "%d", KLINGREM);
+        prstat(_("Klingons Left"), "%d", game.state.remkl + game.state.remcom + game.state.nscrem);
     );
 
     RQ(10,

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-09-29 09:39:24 UTC (rev 648)
+++ trunk/src/setup.c	2006-09-30 09:00:49 UTC (rev 649)
@@ -379,7 +379,7 @@
 	prout(_("a deadly Klingon invasion force. As captain of the United"));
 	prout(_("Starship U.S.S. Enterprise, it is your mission to seek out"));
 	prout(_("and destroy this invasion force of %d battle cruisers."),
-	      INKLINGTOT);
+	      (game.inkling + game.incom + game.inscom));
 	prout(_("You have an initial allotment of %d stardates to complete"), (int)game.intime);
 	prout(_("your mission.  As you proceed you may be given more time."));
 	skip(1);
@@ -389,7 +389,7 @@
     else {
 	prout(_("Stardate %d."), (int)game.state.date);
 	skip(1);
-	prout(_("%d Klingons."), INKLINGTOT);
+	prout(_("%d Klingons."), game.inkling + game.incom + game.inscom);
 	prout(_("An unknown number of Romulans."));
 	if (game.state.nscrem)
 	    prout(_("And one (GULP) Super-Commander."));

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-09-29 09:39:24 UTC (rev 648)
+++ trunk/src/sst.h	2006-09-30 09:00:49 UTC (rev 649)
@@ -113,14 +113,6 @@
     } chart[GALSIZE+1][GALSIZE+1]; 	// the starchart (subscript 0 not used)
 } snapshot;				// Data that is snapshot
 
-#define NKILLK (game.inkling - game.state.remkl)
-#define NKILLC (game.incom - game.state.remcom)
-#define NKILLSC (game.inscom - game.state.nscrem)
-#define NKILLROM (game.inrom - game.state.nromrem)
-#define KLINGREM (game.state.remkl + game.state.remcom + game.state.nscrem)
-#define INKLINGTOT (game.inkling + game.incom + game.inscom)
-#define KLINGKILLED (INKLINGTOT - KLINGREM)
-
 /* game options */
 #define OPTION_ALL	0xffffffff
 #define OPTION_TTY	0x00000001	/* old interface */



