From esr at mail.berlios.de  Mon Oct  2 16:47:34 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 2 Oct 2006 16:47:34 +0200
Subject: [Sst-commit-watch] r650 - trunk/src
Message-ID: <200610021447.k92ElYLr031250@sheep.berlios.de>

Author: esr
Date: 2006-10-02 16:47:33 +0200 (Mon, 02 Oct 2006)
New Revision: 650

Modified:
   trunk/src/sst.py
Log:
Python translation now includes ai.c.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-09-30 09:00:49 UTC (rev 649)
+++ trunk/src/sst.py	2006-10-02 14:47:33 UTC (rev 650)
@@ -296,3 +296,611 @@
         self.probeiny = 0.0	#
         self.height = 0.0	# height of orbit around planet
 
+# From enumerated type 'feature'
+IHR = 'R'
+IHK = 'K'
+IHC = 'C'
+IHS = 'S'
+IHSTAR = '*'
+IHP = 'P'
+IHW = '@'
+IHB = 'B'
+IHBLANK = ' '
+IHDOT = '.'
+IHQUEST = '?'
+IHE = 'E'
+IHF = 'F'
+IHT = 'T'
+IHWEB = '#'
+IHMATER0 = '-'
+IHMATER1 = 'o'
+IHMATER2 = '0'
+
+
+# From enumerated type 'FINTYPE'
+FWON = 0
+FDEPLETE = 1
+FLIFESUP = 2
+FNRG = 3
+FBATTLE = 4
+FNEG3 = 5
+FNOVA = 6
+FSNOVAED = 7
+FABANDN = 8
+FDILITHIUM = 9
+FMATERIALIZE = 10
+FPHASER = 11
+FLOST = 12
+FMINING = 13
+FDPLANET = 14
+FPNOVA = 15
+FSSC = 16
+FSTRACTOR = 17
+FDRAY = 18
+FTRIBBLE = 19
+FHOLE = 20
+FCREW = 21
+
+# From enumerated type 'COLORS'
+DEFAULT = 0
+BLACK = 1
+BLUE = 2
+GREEN = 3
+CYAN = 4
+RED = 5
+MAGENTA = 6
+BROWN = 7
+LIGHTGRAY = 8
+DARKGRAY = 9
+LIGHTBLUE = 10
+LIGHTGREEN = 11
+LIGHTCYAN = 12
+LIGHTRED = 13
+LIGHTMAGENTA = 14
+YELLOW = 15
+WHITE = 16
+
+# Code from ai.c begins here
+
+def tryexit(look, ienm, loccom, irun):
+    # a bad guy attempts to bug out 
+    iq = coord()
+
+    iq.x = game.quadrant.x+(look.x+(QUADSIZE-1))/QUADSIZE - 1
+    iq.y = game.quadrant.y+(look.y+(QUADSIZE-1))/QUADSIZE - 1
+    if not VALID_QUADRANT(iq.x,iq.y) or \
+	game.state.galaxy[iq.x][iq.y].supernova or \
+	game.state.galaxy[iq.x][iq.y].klingons > MAXKLQUAD-1:
+	return False; # no can do -- neg energy, supernovae, or >MAXKLQUAD-1 Klingons 
+    if ienm == IHR:
+	return False; # Romulans cannot escape! 
+    if not irun:
+	# avoid intruding on another commander's territory 
+	if ienm == IHC:
+	    for n in range(1, game.state.remcom+1):
+		if same(game.state.kcmdr[n],iq):
+		    return False
+	    # refuse to leave if currently attacking starbase 
+	    if same(game.battle, game.quadrant):
+		return False
+	# don't leave if over 1000 units of energy 
+	if game.kpower[loccom] > 1000.0:
+	    return False
+    # print escape message and move out of quadrant.
+    # We know this if either short or long range sensors are working
+    if not damaged(DSRSENS) or not damaged(DLRSENS) or \
+	game.condition == docked:
+	crmena(True, ienm, sector, game.ks[loccom])
+	prout(_(" escapes to %s (and regains strength)."),
+	      cramlc(quadrant, iq))
+    # handle local matters related to escape 
+    game.quad[game.ks[loccom].x][game.ks[loccom].y] = IHDOT
+    game.ks[loccom] = game.ks[game.nenhere]
+    game.kavgd[loccom] = game.kavgd[game.nenhere]
+    game.kpower[loccom] = game.kpower[game.nenhere]
+    game.kdist[loccom] = game.kdist[game.nenhere]
+    game.klhere -= 1
+    game.nenhere -= 1
+    if game.condition != docked:
+	newcnd()
+    # Handle global matters related to escape 
+    game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons -= 1
+    game.state.galaxy[iq.x][iq.y].klingons += 1
+    if ienm==IHS:
+	game.ishere = False
+	game.iscate = False
+	game.ientesc = False
+	game.isatb = 0
+	schedule(FSCMOVE, 0.2777)
+	unschedule(FSCDBAS)
+	game.state.kscmdr=iq
+    else:
+	for n in range(1, game.state.remcom+1):
+	    if same(game.state.kcmdr[n], game.quadrant):
+		game.state.kcmdr[n]=iq
+		break
+	game.comhere = False
+    return True; # success 
+
+#
+# The bad-guy movement algorithm:
+# 
+# 1. Enterprise has "force" based on condition of phaser and photon torpedoes.
+# If both are operating full strength, force is 1000. If both are damaged,
+# force is -1000. Having shields down subtracts an additional 1000.
+# 
+# 2. Enemy has forces equal to the energy of the attacker plus
+# 100*(K+R) + 500*(C+S) - 400 for novice through good levels OR
+# 346*K + 400*R + 500*(C+S) - 400 for expert and emeritus.
+# 
+# Attacker Initial energy levels (nominal):
+# Klingon   Romulan   Commander   Super-Commander
+# Novice    400        700        1200        
+# Fair      425        750        1250
+# Good      450        800        1300        1750
+# Expert    475        850        1350        1875
+# Emeritus  500        900        1400        2000
+# VARIANCE   75        200         200         200
+# 
+# Enemy vessels only move prior to their attack. In Novice - Good games
+# only commanders move. In Expert games, all enemy vessels move if there
+# is a commander present. In Emeritus games all enemy vessels move.
+# 
+# 3. If Enterprise is not docked, an agressive action is taken if enemy
+# forces are 1000 greater than Enterprise.
+# 
+# Agressive action on average cuts the distance between the ship and
+# the enemy to 1/4 the original.
+# 
+# 4.  At lower energy advantage, movement units are proportional to the
+# advantage with a 650 advantage being to hold ground, 800 to move forward
+# 1, 950 for two, 150 for back 4, etc. Variance of 100.
+# 
+# If docked, is reduced by roughly 1.75*game.skill, generally forcing a
+# retreat, especially at high skill levels.
+# 
+# 5.  Motion is limited to skill level, except for SC hi-tailing it out.
+# 
+
+def movebaddy(com, loccom, ienm):
+    # tactical movement for the bad guys 
+    next = coord(); look = coord()
+    irun = False
+    # This should probably be just game.comhere + game.ishere 
+    if game.skill >= SKILL_EXPERT:
+	nbaddys = ((game.comhere*2 + game.ishere*2+game.klhere*1.23+game.irhere*1.5)/2.0)
+    else:
+	nbaddys = game.comhere + game.ishere
+
+    dist1 = game.kdist[loccom]
+    mdist = dist1 + 0.5; # Nearest integer distance 
+
+    # If SC, check with spy to see if should hi-tail it 
+    if ienm==IHS and \
+	(game.kpower[loccom] <= 500.0 or (game.condition==docked and not damaged(DPHOTON))):
+	irun = True
+	motion = -QUADSIZE
+    else:
+	# decide whether to advance, retreat, or hold position 
+	forces = game.kpower[loccom]+100.0*game.nenhere+400*(nbaddys-1)
+	if not game.shldup:
+	    forces += 1000; # Good for enemy if shield is down! 
+	if not damaged(DPHASER) or not damaged(DPHOTON):
+            if damaged(DPHASER): # phasers damaged 
+		forces += 300.0
+	    else:
+		forces -= 0.2*(game.energy - 2500.0)
+	    if damaged(DPHOTON): # photon torpedoes damaged 
+		forces += 300.0
+	    else:
+		forces -= 50.0*game.torps
+	else:
+	    # phasers and photon tubes both out! 
+	    forces += 1000.0
+	motion = 0
+        if forces <= 1000.0 and game.condition != docked: # Typical situation 
+	    motion = ((forces+200.0*Rand())/150.0) - 5.0
+	else:
+            if forces > 1000.0: # Very strong -- move in for kill 
+		motion = (1.0-square(Rand()))*dist1 + 1.0
+	    if game.condition=="docked" and (game.options & OPTION_BASE): # protected by base -- back off ! 
+		motion -= game.skill*(2.0-square(Rand()))
+	if idebug:
+	    proutn("=== MOTION = %d, FORCES = %1.2f, ", motion, forces)
+	# don't move if no motion 
+	if motion==0:
+	    return
+	# Limit motion according to skill 
+	if abs(motion) > game.skill:
+            if motion < 0:
+                motion = -game.skill
+            else:
+                motion = game.skill
+    # calculate preferred number of steps 
+    if motion < 0:
+        msteps = -motion
+    else:
+        msteps = motion
+    if motion > 0 and nsteps > mdist:
+	nsteps = mdist; # don't overshoot 
+    if nsteps > QUADSIZE:
+	nsteps = QUADSIZE; # This shouldn't be necessary 
+    if nsteps < 1:
+	nsteps = 1; # This shouldn't be necessary 
+    if idebug:
+	proutn("NSTEPS = %d:", nsteps)
+    # Compute preferred values of delta X and Y 
+    mx = game.sector.x - com.x
+    my = game.sector.y - com.y
+    if 2.0 * abs(mx) < abs(my):
+	mx = 0
+    if 2.0 * abs(my) < abs(game.sector.x-com.x):
+	my = 0
+    if mx != 0:
+        if mx*motion < 0:
+            mx = -1
+        else:
+            mx = 1
+    if my != 0:
+        if my*motion < 0:
+            my = -1
+        else:
+            my = 1
+    next = com
+    # main move loop 
+    for ll in range(nsteps):
+	if idebug:
+	    proutn(" %d", ll+1)
+	# Check if preferred position available 
+	look.x = next.x + mx
+	look.y = next.y + my
+        if mx < 0:
+            krawlx = 1
+        else:
+            krawlx = -1
+        if my < 0:
+            krawly = 1
+        else:
+            krawly = -1
+	success = False
+	attempts = 0; # Settle mysterious hang problem 
+	while attempts < 20 and not success:
+            attempts += 1
+	    if look.x < 1 or look.x > QUADSIZE:
+		if motion < 0 and tryexit(look, ienm, loccom, irun):
+		    return
+		if krawlx == mx or my == 0:
+		    break
+		look.x = next.x + krawlx
+		krawlx = -krawlx
+	    elif look.y < 1 or look.y > QUADSIZE:
+		if motion < 0 and tryexit(look, ienm, loccom, irun):
+		    return
+		if krawly == my or mx == 0:
+		    break
+		look.y = next.y + krawly
+		krawly = -krawly
+	    elif (game.options & OPTION_RAMMING) and game.quad[look.x][look.y] != IHDOT:
+		# See if we should ram ship 
+		if game.quad[look.x][look.y] == game.ship and \
+		    (ienm == IHC or ienm == IHS):
+		    ram(True, ienm, com)
+		    return
+		if krawlx != mx and my != 0:
+		    look.x = next.x + krawlx
+		    krawlx = -krawlx
+		elif krawly != my and mx != 0:
+		    look.y = next.y + krawly
+		    krawly = -krawly
+		else:
+		    break; # we have failed 
+	    else:
+		success = True
+	if success:
+	    next = look
+	    if idebug:
+		proutn(cramlc(neither, next))
+	else:
+	    break; # done early 
+	
+    if idebug:
+	skip(1)
+    # Put commander in place within same quadrant 
+    game.quad[com.x][com.y] = IHDOT
+    game.quad[next.x][next.y] = ienm
+    if not same(next, com):
+	# it moved 
+	game.ks[loccom] = next
+	game.kdist[loccom] = game.kavgd[loccom] = distance(game.sector, next)
+	if not damaged(DSRSENS) or game.condition == docked:
+	    proutn("***")
+	    cramen(ienm)
+	    proutn(_(" from %s"), cramlc(2, com))
+	    if game.kdist[loccom] < dist1:
+		proutn(_(" advances to "))
+	    else:
+		proutn(_(" retreats to "))
+	    prout(cramlc(sector, next))
+
+def moveklings():
+    # Klingon tactical movement 
+    w = coord(); 
+
+    if idebug:
+	prout("== MOVCOM")
+
+    # Figure out which Klingon is the commander (or Supercommander)
+    #   and do move
+    if game.comhere:
+	for i in range(1, game.nenhere+1):
+	    w = game.ks[i]
+	    if game.quad[w.x][w.y] == IHC:
+		movebaddy(w, i, IHC)
+		break
+    if game.ishere:
+	for i in range(1, game.nenhere+1):
+	    w = game.ks[i]
+	    if game.quad[w.x][w.y] == IHS:
+		movebaddy(w, i, IHS)
+		break
+    # if skill level is high, move other Klingons and Romulans too!
+    # Move these last so they can base their actions on what the
+    # commander(s) do.
+    if game.skill >= SKILL_EXPERT and (game.options & OPTION_MVBADDY):
+	for i in range(1, game.nenhere+1):
+	    w = game.ks[i]
+	    if game.quad[w.x][w.y] == IHK or game.quad[w.x][w.y] == IHR:
+		movebaddy(w, i, game.quad[w.x][w.y])
+    sortklings();
+
+def movescom(iq, avoid):
+    # commander movement helper 
+
+    if same(iq, game.quadrant) or not VALID_QUADRANT(iq.x, iq.y) or \
+	game.state.galaxy[iq.x][iq.y].supernova or \
+	game.state.galaxy[iq.x][iq.y].klingons > MAXKLQUAD-1:
+	return 1
+    if avoid:
+	# Avoid quadrants with bases if we want to avoid Enterprise 
+	for i in range(1, game.state.rembase+1):
+	    if same(game.state.baseq[i], iq):
+		return True
+    if game.justin and not game.iscate:
+	return True
+    # do the move 
+    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].klingons -= 1
+    game.state.kscmdr = iq
+    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].klingons += 1
+    if game.ishere:
+	# SC has scooted, Remove him from current quadrant 
+	game.iscate=False
+	game.isatb=0
+	game.ishere = False
+	game.ientesc = False
+	unschedule(FSCDBAS)
+	for i in range(1, game.nenhere+1):
+	    if game.quad[game.ks[i].x][game.ks[i].y] == IHS:
+		break
+	game.quad[game.ks[i].x][game.ks[i].y] = IHDOT
+	game.ks[i] = game.ks[game.nenhere]
+	game.kdist[i] = game.kdist[game.nenhere]
+	game.kavgd[i] = game.kavgd[game.nenhere]
+	game.kpower[i] = game.kpower[game.nenhere]
+	game.klhere -= 1
+	game.nenhere -= 1
+	if game.condition!=docked:
+	    newcnd()
+	sortklings()
+    # check for a helpful planet 
+    for i in range(game.inplan):
+	if same(game.state.planets[i].w, game.state.kscmdr) and \
+	    game.state.planets[i].crystals == present:
+	    # destroy the planet 
+	    game.state.planets[i].pclass = destroyed
+	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = NOPLANET
+	    if not damaged(DRADIO) or game.condition == docked:
+		pause_game(True)
+		prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"))
+		proutn(_("   a planet in "))
+		proutn(cramlc(quadrant, game.state.kscmdr))
+		prout(_(" has been destroyed"))
+		prout(_("   by the Super-commander.\""))
+	    break
+    return False; # looks good! 
+			
+def supercommander():
+    # move the Super Commander 
+    iq = coord(); sc = coord(); ibq = coord()
+    basetbl = []
+
+    if idebug:
+	prout("== SUPERCOMMANDER")
+
+    # Decide on being active or passive 
+    avoid = ((game.incom - game.state.remcom + game.inkling - game.state.remkl)/(game.state.date+0.01-game.indate) < 0.1*game.skill*(game.skill+1.0) or \
+	    (game.state.date-game.indate) < 3.0)
+    if not game.iscate and avoid:
+	# compute move away from Enterprise 
+	ideltax = game.state.kscmdr.x-game.quadrant.x
+	ideltay = game.state.kscmdr.y-game.quadrant.y
+	if math.sqrt(ideltax*ideltax+ideltay*ideltay) > 2.0:
+	    # circulate in space 
+	    ideltax = game.state.kscmdr.y-game.quadrant.y
+	    ideltay = game.quadrant.x-game.state.kscmdr.x
+    else:
+	# compute distances to starbases 
+	if game.state.rembase <= 0:
+	    # nothing left to do 
+	    unschedule(FSCMOVE)
+	    return
+	sc = game.state.kscmdr
+	for i in range(1, game.state.rembase+1):
+	    basetbl.append((i, distance(game.state.baseq[i], sc)))
+	if game.state.rembase > 1:
+            basetbl.sort(lambda x, y: cmp(x[1]. y[1]))
+	# look for nearest base without a commander, no Enterprise, and
+        # without too many Klingons, and not already under attack. 
+	ifindit = iwhichb = 0
+
+	for i2 in range(1, game.state.rembase+1):
+	    i = basetbl[i2][0];	# bug in original had it not finding nearest
+	    ibq = game.state.baseq[i]
+	    if same(ibq, game.quadrant) or same(ibq, game.battle) or \
+		game.state.galaxy[ibq.x][ibq.y].supernova or \
+		game.state.galaxy[ibq.x][ibq.y].klingons > MAXKLQUAD-1:
+		continue
+	    # if there is a commander, and no other base is appropriate,
+	    #   we will take the one with the commander
+	    for j in range(1, game.state.remcom+1):
+		if same(ibq, game.state.kcmdr[j]) and ifindit!= 2:
+		    ifindit = 2
+		    iwhichb = i
+		    break
+	    if j > game.state.remcom: # no commander -- use this one 
+		ifindit = 1
+		iwhichb = i
+		break
+	if ifindit==0:
+	    return; # Nothing suitable -- wait until next time
+	ibq = game.state.baseq[iwhichb]
+	# decide how to move toward base 
+	ideltax = ibq.x - game.state.kscmdr.x
+	ideltay = ibq.y - game.state.kscmdr.y
+    # Maximum movement is 1 quadrant in either or both axis 
+    if ideltax > 1:
+	ideltax = 1
+    if ideltax < -1:
+	ideltax = -1
+    if ideltay > 1:
+	ideltay = 1
+    if ideltay < -1:
+	ideltay = -1
+
+    # try moving in both x and y directions 
+    iq.x = game.state.kscmdr.x + ideltax
+    iq.y = game.state.kscmdr.y + ideltax
+    if movescom(iq, avoid):
+	# failed -- try some other maneuvers 
+	if ideltax==0 or ideltay==0:
+	    # attempt angle move 
+	    if ideltax != 0:
+		iq.y = game.state.kscmdr.y + 1
+		if movescom(iq, avoid):
+		    iq.y = game.state.kscmdr.y - 1
+		    movescom(iq, avoid)
+	    else:
+		iq.x = game.state.kscmdr.x + 1
+		if movescom(iq, avoid):
+		    iq.x = game.state.kscmdr.x - 1
+		    movescom(iq, avoid)
+	else:
+	    # try moving just in x or y 
+	    iq.y = game.state.kscmdr.y
+	    if movescom(iq, avoid):
+		iq.y = game.state.kscmdr.y + ideltay
+		iq.x = game.state.kscmdr.x
+		movescom(iq, avoid)
+    # check for a base 
+    if game.state.rembase == 0:
+	unschedule(FSCMOVE)
+    else:
+	for i in range(1, game.state.rembase+1):
+	    ibq = game.state.baseq[i]
+	    if same(ibq, game.state.kscmdr) and same(game.state.kscmdr, game.battle):
+		# attack the base 
+		if avoid:
+		    return; # no, don't attack base! 
+		game.iseenit = False
+		game.isatb = 1
+		schedule(FSCDBAS, 1.0 +2.0*Rand())
+		if is_scheduled(FCDBAS):
+		    postpone(FSCDBAS, scheduled(FCDBAS)-game.state.date)
+		if damaged(DRADIO) and game.condition != docked:
+		    return; # no warning 
+		game.iseenit = True
+		pause_game(True)
+		proutn(_("Lt. Uhura-  \"Captain, the starbase in "))
+		proutn(cramlc(quadrant, game.state.kscmdr))
+		skip(1)
+		prout(_("   reports that it is under attack from the Klingon Super-commander."))
+		proutn(_("   It can survive until stardate %d.\""),
+		       int(scheduled(FSCDBAS)))
+		if not game.resting:
+		    return
+		prout(_("Mr. Spock-  \"Captain, shall we cancel the rest period?\""))
+		if ja() == False:
+		    return
+		game.resting = False
+		game.optime = 0.0; # actually finished 
+		return
+    # Check for intelligence report 
+    if not idebug and \
+	(Rand() > 0.2 or \
+	 (damaged(DRADIO) and game.condition != docked) or \
+	 not game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].charted):
+	return
+    pause_game(True)
+    prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"))
+    proutn(_("   the Super-commander is in "))
+    proutn(cramlc(quadrant, game.state.kscmdr))
+    prout(".\"")
+    return;
+
+def movetholian():
+    # move the Tholian 
+    if not game.ithere or game.justin:
+	return
+
+    if game.tholian.x == 1 and game.tholian.y == 1:
+	idx = 1; idy = QUADSIZE
+    elif game.tholian.x == 1 and game.tholian.y == QUADSIZE:
+	idx = QUADSIZE; idy = QUADSIZE
+    elif game.tholian.x == QUADSIZE and game.tholian.y == QUADSIZE:
+	idx = QUADSIZE; idy = 1
+    elif game.tholian.x == QUADSIZE and game.tholian.y == 1:
+	idx = 1; idy = 1
+    else:
+	# something is wrong! 
+	game.ithere = False
+	return
+
+    # do nothing if we are blocked 
+    if game.quad[idx][idy]!= IHDOT and game.quad[idx][idy]!= IHWEB:
+	return
+    game.quad[game.tholian.x][game.tholian.y] = IHWEB
+
+    if game.tholian.x != idx:
+	# move in x axis 
+	im = math.fabs(idx - game.tholian.x)*1.0/(idx - game.tholian.x)
+	while game.tholian.x != idx:
+	    game.tholian.x += im
+	    if game.quad[game.tholian.x][game.tholian.y]==IHDOT:
+		game.quad[game.tholian.x][game.tholian.y] = IHWEB
+    elif game.tholian.y != idy:
+	# move in y axis 
+	im = math.fabs(idy - game.tholian.y)*1.0/(idy - game.tholian.y)
+	while game.tholian.y != idy:
+	    game.tholian.y += im
+	    if game.quad[game.tholian.x][game.tholian.y]==IHDOT:
+		game.quad[game.tholian.x][game.tholian.y] = IHWEB
+    game.quad[game.tholian.x][game.tholian.y] = IHT
+    game.ks[game.nenhere] = game.tholian
+
+    # check to see if all holes plugged 
+    for i in range(1, QUADSIZE+1):
+	if game.quad[1][i]!=IHWEB and game.quad[1][i]!=IHT:
+	    return
+	if game.quad[QUADSIZE][i]!=IHWEB and game.quad[QUADSIZE][i]!=IHT:
+	    return
+	if game.quad[i][1]!=IHWEB and game.quad[i][1]!=IHT:
+	    return
+	if game.quad[i][QUADSIZE]!=IHWEB and game.quad[i][QUADSIZE]!=IHT:
+	    return
+    # All plugged up -- Tholian splits 
+    game.quad[game.tholian.x][game.tholian.y]=IHWEB
+    dropin(IHBLANK)
+    crmena(True, IHT, sector, game.tholian)
+    prout(_(" completes web."))
+    game.ithere = False
+    game.nenhere -= 1
+    return



From stsp at mail.berlios.de  Mon Oct  2 19:13:04 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Mon, 2 Oct 2006 19:13:04 +0200
Subject: [Sst-commit-watch] r651 - in trunk: . po src
Message-ID: <200610021713.k92HD46p023223@sheep.berlios.de>

Author: stsp
Date: 2006-10-02 19:13:02 +0200 (Mon, 02 Oct 2006)
New Revision: 651

Modified:
   trunk/Makefile.am
   trunk/Makefile.in
   trunk/TODO
   trunk/po/ru.po
   trunk/src/Makefile.am
   trunk/src/Makefile.in
   trunk/src/ai.c
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/io.c
   trunk/src/moving.c
   trunk/src/planets.c
   trunk/src/reports.c
   trunk/src/setup.c
   trunk/src/sst.c
   trunk/src/sst.h
Log:
- Enabled more gcc warnings
- Fixed -Wundef warnings
- Fixes to inhabited-worlds code, the attempt to enslave the
  uninhabited planet is no longer made.
- Replaced pause_game(true) with announce() and killed the pause_latch()
  trick as it leaded to the lost scroll-pauses
- Fixed calculation of destroyed planets
- Made scan() locale-safe
- Translation updates

Gameplay changes:
- Removed the Romulans-guarding-inhabited-worlds behaviour that probably
  came from bsd-trek. Frankly, I find it much more annoying than enjoying.
- Added the behaveour of transporteer consuming the ship's energy - inspired
  by Star Control 2's landing habit. If someone finds this too harsh -
  feel free to remove, but I personally find that logical. (!OPTION_PLAIN)

Modified: trunk/Makefile.am
===================================================================
--- trunk/Makefile.am	2006-10-02 14:47:33 UTC (rev 650)
+++ trunk/Makefile.am	2006-10-02 17:13:02 UTC (rev 651)
@@ -12,6 +12,9 @@
 	rm -f `find . -name *~`
 	rm -f src/include/config.h.in
 
+distclean-local:
+	rm -rf autom4te*.cache
+
 clean-local:
 	rm -rf autom4te*.cache
 

Modified: trunk/Makefile.in
===================================================================
--- trunk/Makefile.in	2006-10-02 14:47:33 UTC (rev 650)
+++ trunk/Makefile.in	2006-10-02 17:13:02 UTC (rev 651)
@@ -526,7 +526,8 @@
 distclean: distclean-recursive
 	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
 	-rm -f Makefile
-distclean-am: clean-am distclean-generic distclean-tags
+distclean-am: clean-am distclean-generic distclean-local \
+	distclean-tags
 
 dvi: dvi-recursive
 
@@ -575,15 +576,16 @@
 	check-am clean clean-generic clean-local clean-recursive ctags \
 	ctags-recursive dist dist-all dist-bzip2 dist-gzip dist-shar \
 	dist-tarZ dist-zip distcheck distclean distclean-generic \
-	distclean-recursive distclean-tags distcleancheck distdir \
-	distuninstallcheck dvi dvi-am html html-am info info-am \
-	install install-am install-data install-data-am install-exec \
-	install-exec-am install-info install-info-am install-man \
-	install-strip installcheck installcheck-am installdirs \
-	installdirs-am maintainer-clean maintainer-clean-generic \
-	maintainer-clean-local maintainer-clean-recursive mostlyclean \
-	mostlyclean-generic mostlyclean-recursive pdf pdf-am ps ps-am \
-	tags tags-recursive uninstall uninstall-am uninstall-info-am
+	distclean-local distclean-recursive distclean-tags \
+	distcleancheck distdir distuninstallcheck dvi dvi-am html \
+	html-am info info-am install install-am install-data \
+	install-data-am install-exec install-exec-am install-info \
+	install-info-am install-man install-strip installcheck \
+	installcheck-am installdirs installdirs-am maintainer-clean \
+	maintainer-clean-generic maintainer-clean-local \
+	maintainer-clean-recursive mostlyclean mostlyclean-generic \
+	mostlyclean-recursive pdf pdf-am ps ps-am tags tags-recursive \
+	uninstall uninstall-am uninstall-info-am
 
 
 maintainer-clean-local:
@@ -593,6 +595,9 @@
 	rm -f `find . -name *~`
 	rm -f src/include/config.h.in
 
+distclean-local:
+	rm -rf autom4te*.cache
+
 clean-local:
 	rm -rf autom4te*.cache
 # Tell versions [3.59,3.63) of GNU make to not export all variables.

Modified: trunk/TODO
===================================================================
--- trunk/TODO	2006-10-02 14:47:33 UTC (rev 650)
+++ trunk/TODO	2006-10-02 17:13:02 UTC (rev 651)
@@ -7,7 +7,9 @@
 * Complete, polish, improve, complete, polish, improve the
   gettextization and the translation! Right now it just sucks.
 
+* Add the attacked inhabited planets to the report
 
+
 Long-term items:
 
 * Wrap a GUI around it.

Modified: trunk/po/ru.po
===================================================================
--- trunk/po/ru.po	2006-10-02 14:47:33 UTC (rev 650)
+++ trunk/po/ru.po	2006-10-02 17:13:02 UTC (rev 651)
@@ -11,7 +11,7 @@
 msgstr ""
 "Project-Id-Version: sst 2.0\n"
 "Report-Msgid-Bugs-To: stsp\n"
-"POT-Creation-Date: 2006-09-26 18:26+0400\n"
+"POT-Creation-Date: 2006-10-02 16:06+0400\n"
 "PO-Revision-Date: 2006-09-15 11:01+0400\n"
 "Last-Translator: Stas Sergeev <stsp at aknet.ru>\n"
 "Language-Team: Russian <ru at li.org>\n"
@@ -21,62 +21,62 @@
 "Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%"
 "10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
 
-#: src/ai.c:32
+#: src/ai.c:36
 #, c-format
 msgid " escapes to %s (and regains strength)."
 msgstr " ??????? ? %s (? ??????????????? ???????)"
 
-#: src/ai.c:245
+#: src/ai.c:266
 #, c-format
 msgid " from %s"
 msgstr " ?? %s"
 
-#: src/ai.c:246
+#: src/ai.c:268
 msgid " advances to "
 msgstr " ????????? ? "
 
-#: src/ai.c:247
+#: src/ai.c:270
 msgid " retreats to "
 msgstr " ????????? ? "
 
-#: src/ai.c:341 src/ai.c:519
+#: src/ai.c:367 src/ai.c:554
 msgid "Lt. Uhura-  \"Captain, Starfleet Intelligence reports"
 msgstr "??. ?????- \"???????, ???????? ????????? ????? ???????????"
 
-#: src/ai.c:342
+#: src/ai.c:368
 msgid "   a planet in "
 msgstr "   ??????? ? "
 
-#: src/ai.c:344
+#: src/ai.c:370
 msgid " has been destroyed"
 msgstr " ??????????"
 
-#: src/ai.c:345
+#: src/ai.c:371
 msgid "   by the Super-commander.\""
 msgstr "   ????-?????."
 
-#: src/ai.c:496 src/events.c:293
+#: src/ai.c:529 src/events.c:300
 msgid "Lt. Uhura-  \"Captain, the starbase in "
 msgstr "??. ?????- \"???????, ???? ? "
 
-#: src/ai.c:499
+#: src/ai.c:532
 msgid "   reports that it is under attack from the Klingon Super-commander."
 msgstr "   ????????, ??? ??? ????????? ????-????? ?????????."
 
-#: src/ai.c:500
+#: src/ai.c:533
 #, c-format
 msgid "   It can survive until stardate %d.\""
 msgstr "   ??? ?????? ???????????? ?? ???? %d.\""
 
-#: src/ai.c:503 src/events.c:49
+#: src/ai.c:537 src/events.c:49
 msgid "Mr. Spock-  \"Captain, shall we cancel the rest period?\""
 msgstr "?????? ????- \"???????, ??? ???????? ??????\""
 
-#: src/ai.c:520
+#: src/ai.c:555
 msgid "   the Super-commander is in "
 msgstr "   ????-??? ????????? ? "
 
-#: src/ai.c:585
+#: src/ai.c:627
 msgid " completes web."
 msgstr " ??????? ????."
 
@@ -88,7 +88,7 @@
 msgid "Do you wish to change shield energy? "
 msgstr "?? ?????? ???????? ??????? ??????? "
 
-#: src/battle.c:33 src/battle.c:89
+#: src/battle.c:33 src/battle.c:92
 msgid "Energy to transfer to shields- "
 msgstr "??????? ??? ????????? ????- "
 
@@ -96,639 +96,677 @@
 msgid "Shields are up. Do you want them down? "
 msgstr "?????? ???????. ?? ?????? ?? ?????? "
 
-#: src/battle.c:49
+#: src/battle.c:50
 msgid "Shields are down. Do you want them up? "
 msgstr "?????? ?????. ?? ?????? ?? ???????? "
 
-#: src/battle.c:61
+#: src/battle.c:63
 msgid "Shields already up."
 msgstr "?????? ? ??? ??? ???????."
 
-#: src/battle.c:67 src/battle.c:1279
+#: src/battle.c:70 src/battle.c:1328
 msgid "Shields raised."
 msgstr "?????? ???????."
 
-#: src/battle.c:70
+#: src/battle.c:73
 msgid "Shields raising uses up last of energy."
 msgstr "???????? ?????? ????????? ???? ??????? ???????."
 
-#: src/battle.c:78
+#: src/battle.c:81
 msgid "Shields already down."
 msgstr "?????? ? ??? ??? ?????."
 
-#: src/battle.c:83 src/battle.c:957
+#: src/battle.c:86 src/battle.c:995
 msgid "Shields lowered."
 msgstr "?????? ?????."
 
-#: src/battle.c:94
+#: src/battle.c:98
 msgid "Insufficient ship energy."
 msgstr "??????? ??????? ????????????."
 
-#: src/battle.c:99
+#: src/battle.c:103
 msgid "Shield energy maximized."
 msgstr "??????? ?????? ???????? ?????????."
 
-#: src/battle.c:101
+#: src/battle.c:105
 msgid "Excess energy requested returned to ship energy"
 msgstr "?????? ??????? ????????? ???????"
 
-#: src/battle.c:110 src/moving.c:525 src/moving.c:616
+#: src/battle.c:114 src/moving.c:538 src/moving.c:639 src/planets.c:149
+#: src/planets.c:154
 msgid "Engineering to bridge--"
 msgstr "?????????? ????? ???????--"
 
-#: src/battle.c:111
+#: src/battle.c:115
 msgid "  Scott here. Power circuit problem, Captain."
 msgstr "  ??? ?????. ??? ???????? ? ?????????????? ????????, ???????."
 
-#: src/battle.c:112
+#: src/battle.c:116
 msgid "  I can't drain the shields."
 msgstr "  ? ?? ???? ???????? ??????? ?? ???????? ?????."
 
-#: src/battle.c:117
+#: src/battle.c:121
 msgid "All shield energy transferred to ship."
 msgstr "??? ??????? ?????? ???????????? ?? ???????."
 
-#: src/battle.c:122
+#: src/battle.c:126
 msgid "Scotty- \""
 msgstr "??????- \""
 
-#: src/battle.c:124
+#: src/battle.c:128
 msgid "Transferring energy to shields.\""
 msgstr "???????? ??????? ?? ??????.\""
 
-#: src/battle.c:126
+#: src/battle.c:130
 msgid "Draining energy from shields.\""
 msgstr "??????? ??????? ?? ??????.\""
 
-#: src/battle.c:195 src/battle.c:961 src/events.c:851 src/moving.c:140
-#: src/moving.c:724 src/planets.c:458
+#: src/battle.c:199 src/battle.c:999 src/events.c:875 src/moving.c:144
+#: src/moving.c:750 src/planets.c:491
 msgid "***RED ALERT!  RED ALERT!"
 msgstr "***???????!  ???????!"
 
-#: src/battle.c:197
+#: src/battle.c:201
 msgid "***COLLISION IMMINENT."
 msgstr "***????????? ????????????."
 
-#: src/battle.c:209
+#: src/battle.c:213
 msgid " rammed by "
 msgstr " ?????????? "
 
-#: src/battle.c:209
+#: src/battle.c:213
 msgid " rams "
 msgstr " ??????? "
 
-#: src/battle.c:211
+#: src/battle.c:216
 msgid " (original position)"
 msgstr " (???????? ?????????)"
 
-#: src/battle.c:216
+#: src/battle.c:221
 msgid " heavily damaged."
 msgstr " ???????? ?????????."
 
-#: src/battle.c:218
+#: src/battle.c:223
 #, c-format
 msgid "***Sickbay reports %d casualties"
 msgstr "***?? ???????? ??????????? ? %d ????????????"
 
-#: src/battle.c:236
+#: src/battle.c:241
 msgid "***Shields are down."
 msgstr "***?????? ?????."
 
-#: src/battle.c:285
+#: src/battle.c:294
 msgid "Torpedo hits "
 msgstr "??????? ?????? ? ????: "
 
-#: src/battle.c:320
+#: src/battle.c:331
 msgid " uses anti-photon device;"
 msgstr " ?????????? ??????????????? ?????????;"
 
-#: src/battle.c:321
+#: src/battle.c:332
 msgid "   torpedo neutralized."
 msgstr "   ??????? ??????????????."
 
-#: src/battle.c:350 src/battle.c:360
+#: src/battle.c:363 src/battle.c:373
 msgid " damaged but not destroyed."
 msgstr " ?????????, ?? ?? ?????????."
 
-#: src/battle.c:354
+#: src/battle.c:367
 msgid " buffeted into black hole."
 msgstr " ??????? ? ?????? ????."
 
-#: src/battle.c:363
+#: src/battle.c:376
 msgid " damaged--"
 msgstr " ?????????--"
 
-#: src/battle.c:369
+#: src/battle.c:382
 msgid "***STARBASE DESTROYED.."
 msgstr "***???? ??????????.."
 
-#: src/battle.c:386 src/battle.c:400 src/battle.c:760 src/events.c:676
-#: src/events.c:697
+#: src/battle.c:399 src/battle.c:413 src/battle.c:790 src/events.c:690
+#: src/events.c:711
 msgid " destroyed."
 msgstr " ?????????."
 
-#: src/battle.c:411
+#: src/battle.c:424
 msgid "You have just destroyed an inhabited planet."
 msgstr "?? ?????? ??? ?????????? ????????? ???????."
 
-#: src/battle.c:412
+#: src/battle.c:425
 msgid "Celebratory rallies are being held on the Klingon homeworld."
 msgstr "?? ??????? ????????? ?????? ??????????? ???????."
 
-#: src/battle.c:420
+#: src/battle.c:433
 msgid " unaffected by photon blast."
 msgstr " ?? ????????? ???????? ???????."
 
-#: src/battle.c:425
+#: src/battle.c:438
 msgid "AAAAIIIIEEEEEEEEAAAAAAAAUUUUUGGGGGHHHHHHHHHHHH!!!"
 msgstr "?????????????????????????????????????????????????????!!!"
 
-#: src/battle.c:427
+#: src/battle.c:440
 msgid "    HACK!     HACK!    HACK!        *CHOKE!*  "
 msgstr ""
 
-#: src/battle.c:429
+#: src/battle.c:442
 msgid "Mr. Spock-"
 msgstr "?????? ????-"
 
-#: src/battle.c:430
+#: src/battle.c:443
 msgid "  \"Fascinating!\""
 msgstr "  \"??????????!\""
 
-#: src/battle.c:446
+#: src/battle.c:459
 msgid " swallows torpedo."
 msgstr " ????????? ???????."
 
-#: src/battle.c:450
+#: src/battle.c:463
 msgid "***Torpedo absorbed by Tholian web."
 msgstr "***?????????? ???? ????????? ???????."
 
-#: src/battle.c:465
+#: src/battle.c:478
 msgid " survives photon blast."
 msgstr " ???????? ???????? ?????."
 
-#: src/battle.c:468
+#: src/battle.c:481
 msgid " disappears."
 msgstr " ?????."
 
-#: src/battle.c:490
+#: src/battle.c:503
 #, c-format
 msgid " displaced by blast to %s "
 msgstr " ????????? ??????? ? %s "
 
-#: src/battle.c:497
+#: src/battle.c:510
 msgid "Torpedo missed."
 msgstr "??????? ?????????."
 
-#: src/battle.c:511
+#: src/battle.c:525
 msgid "***CRITICAL HIT--"
 msgstr "***??????????? ????--"
 
-#: src/battle.c:527
+#: src/battle.c:543
 msgid " and "
 msgstr " ? "
 
-#: src/battle.c:531
+#: src/battle.c:547
 msgid " damaged."
 msgstr " ?????????."
 
-#: src/battle.c:533
+#: src/battle.c:549
 msgid "***Shields knocked down."
 msgstr "***?????? ?????."
 
-#: src/battle.c:610
+#: src/battle.c:632
 msgid "***TORPEDO INCOMING"
 msgstr "***??????? ????????????"
 
-#: src/battle.c:612
+#: src/battle.c:634
 msgid " From "
 msgstr " ?? "
 
-#: src/battle.c:645
+#: src/battle.c:670
 #, c-format
 msgid "%d unit hit"
 msgstr "???? ?? %d ??????"
 
-#: src/battle.c:647
+#: src/battle.c:672
 msgid " on the "
 msgstr " ?? "
 
-#: src/battle.c:651
+#: src/battle.c:676
 msgid " from "
 msgstr " ?? "
 
-#: src/battle.c:667
+#: src/battle.c:693
 msgid "***Enemies decide against attacking your ship."
 msgstr "***????? ?????? ?? ????????? ??? ???????."
 
-#: src/battle.c:672
+#: src/battle.c:699
 msgid "Enemy attack reduces shield strength to "
 msgstr "????????? ????? ????????? ???? ?????? ?? "
 
-#: src/battle.c:677
+#: src/battle.c:704
 #, c-format
 msgid "Energy left %2d    shields "
 msgstr "??????? ???????: %2d    ?????? "
 
-#: src/battle.c:678
+#: src/battle.c:706
 msgid "up "
 msgstr "??????? "
 
-#: src/battle.c:679
+#: src/battle.c:708
 msgid "down "
 msgstr "????? "
 
-#: src/battle.c:680
+#: src/battle.c:710
 msgid "damaged, "
 msgstr "???????, "
 
-#: src/battle.c:682
+#: src/battle.c:712
 #, c-format
 msgid "%d%%,   torpedoes left %d"
 msgstr "%d%%,   ???????? %d ??????"
 
-#: src/battle.c:688
+#: src/battle.c:718
 #, c-format
 msgid "Mc Coy-  \"Sickbay to bridge.  We suffered %d casualties"
 msgstr "??????- \"??????? ???????.  ? ??? ????????? %d ????????????"
 
-#: src/battle.c:689
+#: src/battle.c:719
 msgid "   in that last attack.\""
 msgstr "   ?? ????????? ?????.\""
 
-#: src/battle.c:799
+#: src/battle.c:831
 msgid "Spock-  \"Bridge to sickbay.  Dr. McCoy,"
 msgstr "????- \"?????? ????????.  ?????? ??????,"
 
-#: src/battle.c:800
+#: src/battle.c:832
 msgid "  I recommend an immediate review of"
 msgstr "  ?????????? ?????????? ?????????"
 
-#: src/battle.c:801
+#: src/battle.c:833
 msgid "  the Captain's psychological profile.\""
 msgstr "  ??????????????? ????????? ????????.\""
 
-#: src/battle.c:819
+#: src/battle.c:851
 msgid "Photon tubes damaged."
 msgstr "???????? ????? ???????."
 
-#: src/battle.c:824
+#: src/battle.c:856
 msgid "No torpedoes left."
 msgstr "?????? ?????? ?? ????????."
 
-#: src/battle.c:835
+#: src/battle.c:867
 #, c-format
 msgid "%d torpedoes left."
 msgstr "???????? %d ??????."
 
-#: src/battle.c:836
+#: src/battle.c:868
 msgid "Number of torpedoes to fire- "
 msgstr "????? ?????? ?? ???????- "
 
-#: src/battle.c:847
+#: src/battle.c:879
 msgid "Maximum of 3 torpedoes per burst."
 msgstr "???????? 3 ??????? ?? ????."
 
-#: src/battle.c:888
+#: src/battle.c:922
 #, c-format
 msgid "Target sector for torpedo number %d- "
 msgstr "?????? ?????????? ??? ??????? ????? %d- "
 
-#: src/battle.c:914
+#: src/battle.c:950
 #, c-format
 msgid "***TORPEDO NUMBER %d MISFIRES"
 msgstr "***??????? ????? %d ?? ?????"
 
-#: src/battle.c:916
+#: src/battle.c:953
 msgid "***TORPEDO MISFIRES."
 msgstr "***??????? ?? ?????."
 
-#: src/battle.c:919
+#: src/battle.c:956
 msgid "  Remainder of burst aborted."
 msgstr "  ??????? ????? ???????."
 
-#: src/battle.c:921
+#: src/battle.c:958
 msgid "***Photon tubes damaged by misfire."
 msgstr "***???????? ????? ????????? ??? ??????."
 
-#: src/battle.c:943
+#: src/battle.c:981
 msgid "Weapons officer Sulu-  \"Phasers overheated, sir.\""
 msgstr "???????? ????- \"?????? ??????????, ???.\""
 
-#: src/battle.c:967
+#: src/battle.c:1005
 msgid "Sulu-  \"Captain! Shield malf***********************\""
 msgstr "????- \"???????! ?????? ?? ????*********************\""
 
-#: src/battle.c:973
+#: src/battle.c:1011
 msgid "Sulu-  \"Captain! Shield malfunction! Phaser fire contained!\""
 msgstr ""
 "????- \"???????! ?????? ?? ?????????! ??????? ??????? ????????? ??????!\""
 
-#: src/battle.c:975
+#: src/battle.c:1013
 msgid "Lt. Uhura-  \"Sir, all decks reporting damage.\""
 msgstr "??. ?????- \"???, ??? ?????? ???????? ? ???????????.\""
 
-#: src/battle.c:981
+#: src/battle.c:1019
 msgid "McCoy to bridge- \"Severe radiation burns, Jim."
 msgstr "?????? ???????- \"?????????? ???????????? ?????, ????."
 
-#: src/battle.c:982
+#: src/battle.c:1020
 #, c-format
 msgid "  %d casualties so far.\""
 msgstr "  ????-??? %d ????????????.\""
 
-#: src/battle.c:987
+#: src/battle.c:1025
 msgid "Phaser energy dispersed by shields."
 msgstr "??????? ??????? ???????? ???????? ?????."
 
-#: src/battle.c:988
+#: src/battle.c:1026
 msgid "Enemy unaffected."
 msgstr "???? ?? ?????????."
 
-#: src/battle.c:1008
+#: src/battle.c:1046
 msgid "Phasers can't be fired through base shields."
 msgstr "?????? ?? ????? ???????? ????? ?????? ????."
 
-#: src/battle.c:1013
+#: src/battle.c:1051
 msgid "Phaser control damaged."
 msgstr "?????????? ???????? ?? ????????."
 
-#: src/battle.c:1019
+#: src/battle.c:1057
 msgid "High speed shield control damaged."
 msgstr "???????????????? ?????????? ??????? ?? ????????."
 
-#: src/battle.c:1024
+#: src/battle.c:1062
 msgid "Insufficient energy to activate high-speed shield control."
 msgstr "???????????? ??????? ??? ????????????????? ?????????? ???????."
 
-#: src/battle.c:1028
+#: src/battle.c:1066
 msgid "Weapons Officer Sulu-  \"High-speed shield control enabled, sir.\""
 msgstr "???????? ????- \"???????????????? ?????????? ??????? ????????, ???.\""
 
-#: src/battle.c:1038
+#: src/battle.c:1076
 msgid "There is no enemy present to select."
 msgstr "????? ??? ??????."
 
-#: src/battle.c:1054 src/battle.c:1069 src/battle.c:1080
+#: src/battle.c:1092 src/battle.c:1107 src/battle.c:1118
 msgid "Energy will be expended into space."
 msgstr "??????? ????? ? ???????."
 
-#: src/battle.c:1086
+#: src/battle.c:1124
 msgid "Manual or automatic? "
 msgstr "?????? ??? ??????????????? "
 
-#: src/battle.c:1097
+#: src/battle.c:1135
 #, c-format
 msgid "Phasers locked on target. Energy available: %.2f"
 msgstr "?????? ???????? ?? ????. ????????? ???????: %.2f"
 
-#: src/battle.c:1107
+#: src/battle.c:1146
 #, c-format
 msgid "%d units required. "
 msgstr "?????????? %d ??????. "
 
-#: src/battle.c:1109
+#: src/battle.c:1148
 msgid "Units to fire= "
 msgstr "??????? ?? ???????= "
 
-#: src/battle.c:1114 src/battle.c:1185
+#: src/battle.c:1154 src/battle.c:1231
 #, c-format
 msgid "Energy available= %.2f"
 msgstr "????????? ???????= %.2f"
 
-#: src/battle.c:1155
+#: src/battle.c:1200
 msgid "*** Tholian web absorbs "
 msgstr "*** ?????????? ???? ????????? "
 
-#: src/battle.c:1156
+#: src/battle.c:1202
 msgid "excess "
 msgstr "?????????? "
 
-#: src/battle.c:1157
+#: src/battle.c:1203
 msgid "phaser energy."
 msgstr "??????? ???????."
 
-#: src/battle.c:1160
+#: src/battle.c:1206
 #, c-format
 msgid "%d expended on empty space."
 msgstr "%d ???? ? ???????."
 
-#: src/battle.c:1169
+#: src/battle.c:1215
 msgid "Battle computer damaged, manual fire only."
 msgstr "???????? ????????? ??????, ??????????? ?????? ?????????."
 
-#: src/battle.c:1172 src/finish.c:14
+#: src/battle.c:1218 src/finish.c:14
 msgid "---WORKING---"
 msgstr "---??????---"
 
-#: src/battle.c:1174
+#: src/battle.c:1220
 msgid "Short-range-sensors-damaged"
 msgstr "???????-????????-??????-???????"
 
-#: src/battle.c:1175
+#: src/battle.c:1221
 msgid "Insufficient-data-for-automatic-phaser-fire"
 msgstr "????????????-??????-???-???????????????-?????????-???????"
 
-#: src/battle.c:1176
+#: src/battle.c:1222
 msgid "Manual-fire-must-be-used"
 msgstr "???????????-??????-?????????"
 
-#: src/battle.c:1194
+#: src/battle.c:1240
 msgid " can't be located without short range scan."
 msgstr " ?? ????? ???? ????????? ??? ???????? ????????????."
 
-#: src/battle.c:1211
+#: src/battle.c:1259
 msgid "units to fire at "
 msgstr "??????? ?? ??????? ?? "
 
-#: src/battle.c:1241
+#: src/battle.c:1289
 msgid "Available energy exceeded -- try again."
 msgstr "????????? ??????? ?? ??????? -- ?????????? ?????."
 
-#: src/battle.c:1273
+#: src/battle.c:1322
 msgid "Sulu-  \"Sir, the high-speed shield control has malfunctioned . . ."
 msgstr "????- \"???, ???????????????? ?????????? ??????? ?? ????????? . . ."
 
-#: src/battle.c:1274
+#: src/battle.c:1323
 msgid "         CLICK   CLICK   POP  . . ."
 msgstr "         ????   ????   ????  . . ."
 
-#: src/battle.c:1275
+#: src/battle.c:1324
 msgid " No response, sir!"
 msgstr " ??? ???????, ???!"
 
-#: src/battle.c:1309
+#: src/battle.c:1360
 #, c-format
 msgid "%d unit hit on "
 msgstr "%d ?????? ??????? ??????? ?? "
 
-#: src/battle.c:1312
+#: src/battle.c:1363
 msgid "Very small hit on "
 msgstr "????? ?????? ???? ?? "
 
-#: src/battle.c:1326
+#: src/battle.c:1380
 #, c-format
 msgid "***Mr. Spock-  \"Captain, the vessel at %s"
 msgstr "***?????? ????- \"???????, ???????? ? %s "
 
-#: src/battle.c:1328
+#: src/battle.c:1382
 msgid "   has just lost its firepower.\""
 msgstr "   ???????? ??????????????.\""
 
-#: src/events.c:141
+#: src/events.c:144
 msgid "Lt. Uhura- \"Captain, the sub-space radio is working and"
 msgstr "??. ?????- \"???????, ??????????? ????? ???????? ?"
 
-#: src/events.c:142
+#: src/events.c:145
 msgid "   surveillance reports are coming in."
 msgstr "   ????????? ?????????? ?? ?????? ??????????."
 
-#: src/events.c:149
+#: src/events.c:152
 msgid "   The star chart is now up to date.\""
 msgstr "   ???????? ????? ?????????."
 
-#: src/events.c:202
+#: src/events.c:205
 msgid " caught in long range tractor beam--"
 msgstr " ?????? ???????????? ????????? ?????--"
 
-#: src/events.c:214
+#: src/events.c:218
 msgid "Galileo, left on the planet surface, is captured"
 msgstr "???????, ?????????? ?? ???????, ???????"
 
-#: src/events.c:215
+#: src/events.c:219
 msgid "by aliens and made into a flying McDonald's."
 msgstr "?????????????? ? ????????? ? ??????????? ???????????."
 
-#: src/events.c:220
+#: src/events.c:224
 msgid "Galileo, left on the planet surface, is well hidden."
 msgstr "???????, ?????????? ?? ???????, ?????? ???????."
 
-#: src/events.c:229
+#: src/events.c:233
 msgid " is pulled to "
 msgstr " ??????? ? "
 
-#: src/events.c:234
+#: src/events.c:238
 msgid "(Remainder of rest/repair period cancelled.)"
 msgstr "(??????? ??????? ??????/??????? ???????.)"
 
-#: src/events.c:242
+#: src/events.c:247
 msgid "(Shields not currently useable.)"
 msgstr "(?????? ? ????????? ?????????.)"
 
-#: src/events.c:295
+#: src/events.c:302
 msgid "   reports that it is under attack and that it can"
 msgstr "   ????????, ??? ??? ????????? ? ??????"
 
-#: src/events.c:296
+#: src/events.c:303
 #, c-format
 msgid "   hold out only until stardate %d"
 msgstr "   ???????????? ?? ???? %d.\""
 
-#: src/events.c:333
+#: src/events.c:340
 msgid "Spock-  \"Captain, I believe the starbase has been destroyed.\""
 msgstr "????- \"???????, ? ????????, ??? ???? ??????????.\""
 
-#: src/events.c:341
+#: src/events.c:347
 msgid "Lt. Uhura-  \"Captain, Starfleet Command reports that"
 msgstr "??. ?????- \"???????, ???? ????????? ????? ????????"
 
-#: src/events.c:342
+#: src/events.c:348
 msgid "   the starbase in "
 msgstr "   ???? ? "
 
-#: src/events.c:344
+#: src/events.c:350
 msgid " has been destroyed by"
 msgstr " ??????????"
 
-#: src/events.c:346
+#: src/events.c:352
 msgid "the Klingon Super-Commander"
 msgstr "????-????? ?????????"
 
-#: src/events.c:347
+#: src/events.c:354
 msgid "a Klingon Commander"
 msgstr "?????????? ?????????"
 
-#: src/events.c:386
+#: src/events.c:392
 msgid "Lt. Uhura-  \"The deep space probe "
 msgstr "??. ?????- \"???????????? ??????????? ?????? "
 
-#: src/events.c:388
+#: src/events.c:394
 msgid "has left the galaxy"
 msgstr "???????? ?????????"
 
-#: src/events.c:390
+#: src/events.c:396
 msgid "is no longer transmitting"
 msgstr "?????? ?? ????????"
 
-#: src/events.c:400
+#: src/events.c:405
 msgid "Lt. Uhura-  \"The deep space probe is now in "
 msgstr "??. ?????- \"???????????? ??????????? ?????? ?????? ? "
 
-#: src/events.c:557
+#: src/events.c:460
+#, c-format
+msgid "Uhura- Captain, %s in %s reports it is under attack"
+msgstr "?????- ???????, %s ?? %s ????????, ??? ??? ??????????? ?????"
+
+#: src/events.c:462
+msgid "by a Klingon invasion fleet."
+msgstr "??????????????? ????? ?????????."
+
+#: src/events.c:484
+#, c-format
+msgid "Uhura- We've lost contact with starsystem %s"
+msgstr "?????- ?? ???????? ??????? ? ???????? %s"
+
+#: src/events.c:486 src/events.c:542
+#, c-format
+msgid "in %s.\n"
+msgstr "? %s.\n"
+
+#: src/events.c:536
+msgid "Spock- sensors indicate the Klingons have"
+msgstr "????- ???? ?? ?????????? ????????, ????????"
+
+#: src/events.c:537
+#, c-format
+msgid "launched a warship from %s."
+msgstr "????????? ??????? ??????? ? %s."
+
+#: src/events.c:539
+msgid "Uhura- Starfleet reports increased Klingon activity"
+msgstr "?????- ???????? ???? ???????? ?? ??????????? ?????????? ?????????"
+
+#: src/events.c:541
+#, c-format
+msgid "near %s"
+msgstr "????? %s."
+
+#: src/events.c:562
 msgid "How long? "
 msgstr "????? ????? "
 
-#: src/events.c:567
+#: src/events.c:573
 msgid "Are you sure? "
 msgstr "?? ???????? "
 
-#: src/events.c:577
+#: src/events.c:585
 #, c-format
 msgid "%d stardates left."
 msgstr "???????? %d ????."
 
-#: src/events.c:630 src/events.c:669
+#: src/events.c:642 src/events.c:683
 msgid " novas."
 msgstr " ??????????."
 
-#: src/events.c:702
+#: src/events.c:716
 msgid "***Starship buffeted by nova."
 msgstr "***????????? ????????? ??????? ??????."
 
-#: src/events.c:710
+#: src/events.c:725
 msgid "***Shields knocked out."
 msgstr "***?????? ???????."
 
-#: src/events.c:740
+#: src/events.c:757
 msgid " damaged"
 msgstr " ?????????"
 
-#: src/events.c:748
+#: src/events.c:765
 msgid ", blasted into "
 msgstr ", ?????????? ? "
 
-#: src/events.c:759
+#: src/events.c:776
 msgid ", buffeted to "
 msgstr " ??????? ? "
 
-#: src/events.c:786
+#: src/events.c:807
 msgid "Force of nova displaces starship."
 msgstr "????? ?????? ??????? ?????????."
 
-#: src/events.c:831
+#: src/events.c:853
 #, c-format
 msgid "Message from Starfleet Command       Stardate %.2f"
 msgstr "????????? ?? ????? ????????? ?????       ???? %.2f"
 
-#: src/events.c:832
+#: src/events.c:854
 #, c-format
 msgid "     Supernova in %s; caution advised."
 msgstr "     ????? ?????????? ? %s; ?????????? ????????????."
 
-#: src/events.c:853
+#: src/events.c:877
 #, c-format
 msgid "***Incipient supernova detected at %s"
 msgstr "***??????????????? ????? ?????????? ? %s"
 
-#: src/events.c:855
+#: src/events.c:879
 msgid "Emergency override attempts t"
 msgstr "????????? ???????? ?"
 
-#: src/events.c:922
+#: src/events.c:948
 msgid "Lucky you!"
 msgstr "???????!"
 
-#: src/events.c:923
+#: src/events.c:949
 #, c-format
 msgid "A supernova in %s has just destroyed the last Klingons."
 msgstr "?????????? ? %s ??? ??? ?????????? ????????? ?????????."
@@ -769,485 +807,485 @@
 msgid "GOODBYE-CRUEL-WORLD"
 msgstr "??????-????????-???"
 
-#: src/finish.c:54
+#: src/finish.c:55
 msgid "********* Entropy of "
 msgstr "********* ???????? ??????? "
 
-#: src/finish.c:56
+#: src/finish.c:57
 msgid " maximized *********"
 msgstr " ???????? *********"
 
-#: src/finish.c:79
+#: src/finish.c:80
 #, c-format
 msgid "It is stardate %.1f."
 msgstr "??????? %.1f ?????."
 
-#: src/finish.c:84
+#: src/finish.c:85
 #, c-format
 msgid "The remaining %d Romulans surrender to Starfleet Command."
 msgstr "?????????? %d ??????? ??????? ????????? ?????."
 
-#: src/finish.c:87
+#: src/finish.c:88
 msgid "You have smashed the Klingon invasion fleet and saved"
 msgstr "?? ????????? ???? ????????????? ??????????? ? ??????"
 
-#: src/finish.c:88
+#: src/finish.c:89
 msgid "the Federation."
 msgstr "?????????."
 
-#: src/finish.c:102
+#: src/finish.c:106
 msgid "In fact, you have done so well that Starfleet Command"
 msgstr "?? ?????? ??????, ?? ??????????? ??? ?????, ??? ???? ????????? ?????"
 
-#: src/finish.c:107
+#: src/finish.c:111
 msgid "promotes you one step in rank from \"Novice\" to \"Fair\"."
 msgstr "???????? ??? ???? ?? ??????? ?? ????????."
 
-#: src/finish.c:110
+#: src/finish.c:114
 msgid "promotes you one step in rank from \"Fair\" to \"Good\"."
 msgstr "???????? ??? ???? ?? ???????? ?? ???????."
 
-#: src/finish.c:113
+#: src/finish.c:117
 msgid "promotes you one step in rank from \"Good\" to \"Expert\"."
 msgstr "???????? ??? ???? ?? ??????? ?? ???????????."
 
-#: src/finish.c:116
+#: src/finish.c:120
 msgid "promotes you to Commodore Emeritus."
 msgstr "???????? ??? ?? ????????? ?????????? ????????."
 
-#: src/finish.c:118
+#: src/finish.c:122
 msgid "Now that you think you're really good, try playing"
 msgstr "??????, ????? ?? ???????? ???? ??????? ???????, ??????????? ???????"
 
-#: src/finish.c:119
+#: src/finish.c:123
 msgid "the \"Emeritus\" game. It will splatter your ego."
 msgstr "?? \"Emeritus\". ??? ??????? ??? ???."
 
-#: src/finish.c:123
+#: src/finish.c:127
 msgid "Computer-  "
 msgstr "?????????-  "
 
-#: src/finish.c:124
+#: src/finish.c:128
 msgid "ERROR-ERROR-ERROR-ERROR"
 msgstr "????-????-????-??????"
 
-#: src/finish.c:126
+#: src/finish.c:130
 msgid "  YOUR-SKILL-HAS-EXCEEDED-THE-CAPACITY-OF-THIS-PROGRAM"
 msgstr "  ????-??????????-????????????-????-?????????"
 
-#: src/finish.c:128 src/finish.c:130 src/finish.c:132
+#: src/finish.c:132 src/finish.c:134 src/finish.c:136
 msgid "  THIS-PROGRAM-MUST-SURVIVE"
 msgstr ""
 
-#: src/finish.c:134
+#: src/finish.c:138
 msgid "  THIS-PROGRAM-MUST?- MUST ? - SUR? ? -?  VI"
 msgstr ""
 
-#: src/finish.c:136
+#: src/finish.c:140
 msgid "Now you can retire and write your own Star Trek game!"
 msgstr "?????? ?? ?????? ???? ?? ?????? ? ???????? ???? ???? Star Trek!"
 
-#: src/finish.c:142
+#: src/finish.c:146
 msgid "You cannot get a citation, so..."
 msgstr "??? ?? ???????? ???????, ??? ???..."
 
-#: src/finish.c:144
+#: src/finish.c:148
 msgid "Do you want your Commodore Emeritus Citation printed? "
 msgstr "?????? ??????????? ???? ??????? ?????????? ????????? "
 
-#: src/finish.c:154 src/finish.c:167
+#: src/finish.c:158 src/finish.c:172
 msgid "LIVE LONG AND PROSPER."
 msgstr "?????? ????? ? ?????????."
 
-#: src/finish.c:160
+#: src/finish.c:165
 msgid "Your time has run out and the Federation has been"
 msgstr "???? ????? ??????? ? ????????? ????"
 
-#: src/finish.c:161
+#: src/finish.c:166
 msgid "conquered.  Your starship is now Klingon property,"
 msgstr "?????????.  ??? ????????? ???? ?????????????? ?????????,"
 
-#: src/finish.c:162
+#: src/finish.c:167
 msgid "and you are put on trial as a war criminal.  On the"
 msgstr "? ?? ?????? ?? ?????? ?????????? ??? ??????? ??????????.  ??????????"
 
-#: src/finish.c:163
+#: src/finish.c:168
 msgid "basis of your record, you are "
 msgstr "????????? ????, ??? "
 
-#: src/finish.c:165
+#: src/finish.c:170
 msgid "acquitted."
 msgstr "??????????."
 
-#: src/finish.c:170
+#: src/finish.c:175
 msgid "found guilty and"
 msgstr "???????? ???????? ?"
 
-#: src/finish.c:171
+#: src/finish.c:176
 msgid "sentenced to death by slow torture."
 msgstr "??????????? ? ?????? ?? ????????? ????."
 
-#: src/finish.c:177
+#: src/finish.c:182
 msgid "Your life support reserves have run out, and"
 msgstr "??????? ???????????????? ??????? ?"
 
-#: src/finish.c:178
+#: src/finish.c:183
 msgid "you die of thirst, starvation, and asphyxiation."
 msgstr "?? ??????? ?? ?????, ?????? ? ??????."
 
-#: src/finish.c:179 src/finish.c:184 src/finish.c:279
+#: src/finish.c:184 src/finish.c:189 src/finish.c:284
 msgid "Your starship is a derelict in space."
 msgstr "??? ????????? ???? ??????????? ???????."
 
-#: src/finish.c:182
+#: src/finish.c:187
 msgid "Your energy supply is exhausted."
 msgstr "????????? ??????? ???????."
 
-#: src/finish.c:187 src/finish.c:206 src/finish.c:225 src/moving.c:726
+#: src/finish.c:192 src/finish.c:211 src/finish.c:230 src/moving.c:752
 msgid "The "
 msgstr " "
 
-#: src/finish.c:189
+#: src/finish.c:194
 msgid "has been destroyed in battle."
 msgstr " ??? ????????? ? ???."
 
-#: src/finish.c:191
+#: src/finish.c:196
 msgid "Dulce et decorum est pro patria mori."
 msgstr ""
 
-#: src/finish.c:194
+#: src/finish.c:199
 msgid "You have made three attempts to cross the negative energy"
 msgstr "?? ??? ???? ???????? ???????? ?????????? ??????????????"
 
-#: src/finish.c:195
+#: src/finish.c:200
 msgid "barrier which surrounds the galaxy."
 msgstr "??????, ?????????? ?????????."
 
-#: src/finish.c:197
+#: src/finish.c:202
 msgid "Your navigation is abominable."
 msgstr "?? ?? ?????? ????????? ????????."
 
-#: src/finish.c:201
+#: src/finish.c:206
 msgid "Your starship has been destroyed by a nova."
 msgstr "??? ????????? ????????? ??????? ??????."
 
-#: src/finish.c:202 src/finish.c:246
+#: src/finish.c:207 src/finish.c:251
 msgid "That was a great shot."
 msgstr "??? ??? ???????? ???????."
 
-#: src/finish.c:208
+#: src/finish.c:213
 msgid " has been fried by a supernova."
 msgstr " ??? ???????? ??????? ??????????."
 
-#: src/finish.c:209
+#: src/finish.c:214
 msgid "...Not even cinders remain..."
 msgstr "...? ????????-?? ?? ????????..."
 
-#: src/finish.c:212
+#: src/finish.c:217
 msgid "You have been captured by the Klingons. If you still"
 msgstr "??? ????????? ????????. ???? ? ???"
 
-#: src/finish.c:213
+#: src/finish.c:218
 msgid "had a starbase to be returned to, you would have been"
 msgstr "???? ?? ????, ??? ?? ?????"
 
-#: src/finish.c:214
+#: src/finish.c:219
 msgid "repatriated and given another chance. Since you have"
 msgstr "?????? ? ???? ??? ????. ? ??? -"
 
-#: src/finish.c:215
+#: src/finish.c:220
 msgid "no starbases, you will be mercilessly tortured to death."
 msgstr "??? ??????????? ???????? ? ??????."
 
-#: src/finish.c:218
+#: src/finish.c:223
 msgid "Your starship is now an expanding cloud of subatomic particles"
 msgstr "??? ????????? ???? ??????? ?????????? ??????"
 
-#: src/finish.c:221
+#: src/finish.c:226
 msgid "Starbase was unable to re-materialize your starship."
 msgstr "???? ?? ?????? ??????????????? ??? ?????????."
 
-#: src/finish.c:222
-msgid "Sic transit gloria muntdi"
+#: src/finish.c:227
+msgid "Sic transit gloria mundi"
 msgstr ""
 
-#: src/finish.c:227
+#: src/finish.c:232
 msgid " has been cremated by its own phasers."
 msgstr " ?????? ???????????? ????????."
 
-#: src/finish.c:230
+#: src/finish.c:235
 msgid "You and your landing party have been"
 msgstr "?? ? ??? ?????"
 
-#: src/finish.c:231
+#: src/finish.c:236
 msgid "converted to energy, disipating through space."
 msgstr "???????????? ? ???????, ???????????? ? ????????????."
 
-#: src/finish.c:234
+#: src/finish.c:239
 msgid "You are left with your landing party on"
 msgstr "?? ? ??????? ???????? ??"
 
-#: src/finish.c:235
+#: src/finish.c:240
 msgid "a wild jungle planet inhabited by primitive cannibals."
 msgstr "??????? ????? ????????, ?????????? ???????????? ?????????."
 
-#: src/finish.c:237
+#: src/finish.c:242
 msgid "They are very fond of \"Captain Kirk\" soup."
 msgstr "?? ????? ?????????? \"???????????\" ???."
 
-#: src/finish.c:239 src/finish.c:265
+#: src/finish.c:244 src/finish.c:270
 msgid "Without your leadership, the "
 msgstr "??? ?????? ???????????, "
 
-#: src/finish.c:241 src/finish.c:267
+#: src/finish.c:246 src/finish.c:272
 msgid " is destroyed."
 msgstr " ?????????."
 
-#: src/finish.c:244
+#: src/finish.c:249
 msgid "You and your mining party perish."
 msgstr "?? ? ??? ????? ??????."
 
-#: src/finish.c:250
+#: src/finish.c:255
 msgid "The Galileo is instantly annihilated by the supernova."
 msgstr "??????? ????????? ????????? ?? ?????? ??????????."
 
-#: src/finish.c:253
+#: src/finish.c:258
 msgid "You and your mining party are atomized."
 msgstr "?? ? ????? ??????? ????????? ?? ?????."
 
-#: src/finish.c:255
+#: src/finish.c:260
 msgid "Mr. Spock takes command of the "
 msgstr "?????? ???? ????????? ???????????? "
 
-#: src/finish.c:257
+#: src/finish.c:262
 msgid " and"
 msgstr " ? "
 
-#: src/finish.c:258
+#: src/finish.c:263
 msgid "joins the Romulans, reigning terror on the Federation."
 msgstr "?????????????? ? ?????????, ???????? ?????? ?????????."
 
-#: src/finish.c:261
+#: src/finish.c:266
 msgid "The shuttle craft Galileo is also caught,"
 msgstr "?????? ??????? ???? ???????"
 
-#: src/finish.c:262
+#: src/finish.c:267
 msgid "and breaks up under the strain."
 msgstr "? ?????????? ?? ????????."
 
-#: src/finish.c:264
+#: src/finish.c:269
 msgid "Your debris is scattered for millions of miles."
 msgstr "???? ????? ??????????? ?? ???????? ????."
 
-#: src/finish.c:270
+#: src/finish.c:275
 msgid "The mutants attack and kill Spock."
 msgstr "??????? ?????? ??????? ? ????? ?????."
 
-#: src/finish.c:271
+#: src/finish.c:276
 msgid "Your ship is captured by Klingons, and"
 msgstr "??? ????????? ?????? ?????????? ?"
 
-#: src/finish.c:272
+#: src/finish.c:277
 msgid "your crew is put on display in a Klingon zoo."
 msgstr "??? ?????? ????????? ?? ????? ? ????????."
 
-#: src/finish.c:275
+#: src/finish.c:280
 msgid "Tribbles consume all remaining water,"
 msgstr "??????? ?????? ??? ?????????? ????,"
 
-#: src/finish.c:276
+#: src/finish.c:281
 msgid "food, and oxygen on your ship."
 msgstr "???? ? ???????? ?? ???????."
 
-#: src/finish.c:278
+#: src/finish.c:283
 msgid "You die of thirst, starvation, and asphyxiation."
 msgstr "?? ?????? ?? ?????, ?????? ? ??????."
 
-#: src/finish.c:282
+#: src/finish.c:287
 msgid "Your ship is drawn to the center of the black hole."
 msgstr "??? ??????? ??????? ????? ? ????? ?????? ????."
 
-#: src/finish.c:283
+#: src/finish.c:288
 msgid "You are crushed into extremely dense matter."
 msgstr "??? ?????????? ?? ????????? ????????????? ????????."
 
-#: src/finish.c:286
+#: src/finish.c:291
 msgid "Your last crew member has died."
 msgstr "????????? ???? ????? ??????? ?????."
 
-#: src/finish.c:296
+#: src/finish.c:303
 msgid "As a result of your actions, a treaty with the Klingon"
 msgstr "? ?????????? ????? ????????, ? ???????? ?????????"
 
-#: src/finish.c:297
+#: src/finish.c:304
 msgid "Empire has been signed. The terms of the treaty are"
 msgstr "??????? ????????? ???????. ??????? ????? ????????"
 
-#: src/finish.c:299
+#: src/finish.c:306
 msgid "favorable to the Federation."
 msgstr "??????? ??? ?????????."
 
-#: src/finish.c:301
+#: src/finish.c:308
 msgid "Congratulations!"
 msgstr "???????????!"
 
-#: src/finish.c:304
+#: src/finish.c:311
 msgid "highly unfavorable to the Federation."
 msgstr "?????? ?? ??????? ??? ?????????."
 
-#: src/finish.c:307
+#: src/finish.c:314
 msgid "The Federation will be destroyed."
 msgstr "????????? ????????."
 
-#: src/finish.c:310
+#: src/finish.c:317
 msgid "Since you took the last Klingon with you, you are a"
 msgstr "????????? ?? ??????? ?? ??? ???? ?????????? ????????, ?? ??????"
 
-#: src/finish.c:311
+#: src/finish.c:318
 msgid "martyr and a hero. Someday maybe they'll erect a"
 msgstr "??????? ? ?????. ???????? ??????? ???? ????????"
 
-#: src/finish.c:312
+#: src/finish.c:319
 msgid "statue in your memory. Rest in peace, and try not"
 msgstr "?????? ? ???? ?????. ????????? ? ????? ? ???????????? ??"
 
-#: src/finish.c:313
+#: src/finish.c:320
 msgid "to think about pigeons."
 msgstr "?????? ? ???????."
 
-#: src/finish.c:340
+#: src/finish.c:354
 msgid "Your score --"
 msgstr "??? ???? --"
 
-#: src/finish.c:342
+#: src/finish.c:356
 #, c-format
 msgid "%6d Romulans destroyed                 %5d"
 msgstr "%6d ??????? ??????????                 %5d"
 
-#: src/finish.c:345
+#: src/finish.c:359
 #, c-format
 msgid "%6d Romulans captured                  %5d"
 msgstr "%6d ??????? ?????????                  %5d"
 
-#: src/finish.c:348
+#: src/finish.c:362
 #, c-format
 msgid "%6d ordinary Klingons destroyed        %5d"
 msgstr "%6d ??????? ????????? ??????????        %5d"
 
-#: src/finish.c:351
+#: src/finish.c:365
 #, c-format
 msgid "%6d Klingon commanders destroyed       %5d"
 msgstr "%6d ????????????? ?????????? ??????????       %5d"
 
-#: src/finish.c:354
+#: src/finish.c:368
 #, c-format
 msgid "%6d Super-Commander destroyed          %5d"
 msgstr "%6d ????-????? ??????????          %5d"
 
-#: src/finish.c:357
+#: src/finish.c:371
 #, c-format
 msgid "%6.2f Klingons per stardate              %5d"
 msgstr "%6.2f ????????? ? ????              %5d"
 
-#: src/finish.c:360
+#: src/finish.c:374
 #, c-format
 msgid "%6d stars destroyed by your action     %5d"
 msgstr "%6d ????? ??????????     %5d"
 
-#: src/finish.c:363
+#: src/finish.c:377
 #, c-format
 msgid "%6d planets destroyed by your action   %5d"
 msgstr "%6d ?????? ??????????   %5d"
 
-#: src/finish.c:366
+#: src/finish.c:380
 #, c-format
 msgid "%6d inhabited planets destroyed by your action   %5d"
 msgstr "%6d ????????? ?????? ??????????   %5d"
 
-#: src/finish.c:369
+#: src/finish.c:383
 #, c-format
 msgid "%6d bases destroyed by your action     %5d"
 msgstr "%6d ??? ??????????     %5d"
 
-#: src/finish.c:372
+#: src/finish.c:386
 #, c-format
 msgid "%6d calls for help from starbase       %5d"
 msgstr "%6d ????????? ?? ??????? ? ????       %5d"
 
-#: src/finish.c:375
+#: src/finish.c:389
 #, c-format
 msgid "%6d casualties incurred                %5d"
 msgstr "%6d ??????? ??????????                %5d"
 
-#: src/finish.c:378
+#: src/finish.c:392
 #, c-format
 msgid "%6d crew abandoned in space            %5d"
 msgstr "%6d ??????? ???????? ? ???????        %5d"
 
-#: src/finish.c:381
+#: src/finish.c:395
 #, c-format
 msgid "%6d ship(s) lost or destroyed          %5d"
 msgstr "%6d ???????(??) ????????          %5d"
 
-#: src/finish.c:384
+#: src/finish.c:398
 msgid "Penalty for getting yourself killed        -200"
 msgstr "???????? ?? ??????????? ??????        -200"
 
-#: src/finish.c:386
+#: src/finish.c:400
 msgid "Bonus for winning "
 msgstr "??????? ?? ?????? ? "
 
-#: src/finish.c:389
+#: src/finish.c:403
 msgid "Novice game  "
 msgstr "???? ???????  "
 
-#: src/finish.c:390
+#: src/finish.c:404
 msgid "Fair game    "
 msgstr "???? ????????    "
 
-#: src/finish.c:391
+#: src/finish.c:405
 msgid "Good game    "
 msgstr "???? ???????    "
 
-#: src/finish.c:392
+#: src/finish.c:406
 msgid "Expert game  "
 msgstr "???? ???????????  "
 
-#: src/finish.c:393
+#: src/finish.c:407
 msgid "Emeritus game"
 msgstr "???? ?????????? ????????"
 
-#: src/finish.c:398
+#: src/finish.c:412
 #, c-format
 msgid "TOTAL SCORE                               %5d"
 msgstr "????? ????                               %5d"
 
-#: src/finish.c:413
+#: src/finish.c:426
 msgid "File or device name for your plaque: "
 msgstr "??? ????? ??? ?????????? ??? ???????: "
 
-#: src/finish.c:417
+#: src/finish.c:430
 msgid "Invalid name."
 msgstr "???????????? ???."
 
-#: src/finish.c:421
+#: src/finish.c:434
 msgid "Enter name to go on plaque (up to 30 characters): "
 msgstr "??????? ???? ??? ??? ??????? (?? 30 ??????): "
 
-#: src/finish.c:445
+#: src/finish.c:458
 #, c-format
 msgid ""
 "                                                       U. S. S. ENTERPRISE\n"
 msgstr "                                                       ??????????\n"
 
-#: src/finish.c:447
+#: src/finish.c:460
 #, c-format
 msgid ""
 "                                  For demonstrating outstanding ability as a "
 "starship captain\n"
 msgstr "                                  ?? ??????????? ???????\n"
 
-#: src/finish.c:449
+#: src/finish.c:462
 #, c-format
 msgid ""
 "                                                Starfleet Command bestows to "
@@ -1256,7 +1294,7 @@
 "                                                ???? ????????? ????? "
 "??????????? ???\n"
 
-#: src/finish.c:452
+#: src/finish.c:465
 #, c-format
 msgid ""
 "                                                           the rank of\n"
@@ -1265,7 +1303,7 @@
 "                                                           ??????\n"
 "\n"
 
-#: src/finish.c:453
+#: src/finish.c:466
 #, c-format
 msgid ""
 "                                                       \"Commodore Emeritus"
@@ -1276,7 +1314,7 @@
 "\"\n"
 "\n"
 
-#: src/finish.c:456
+#: src/finish.c:469
 #, c-format
 msgid ""
 " Expert level\n"
@@ -1285,7 +1323,7 @@
 " ??????? ???????????\n"
 "\n"
 
-#: src/finish.c:457
+#: src/finish.c:470
 #, c-format
 msgid ""
 "Emeritus level\n"
@@ -1294,7 +1332,7 @@
 "??????? ??????????\n"
 "\n"
 
-#: src/finish.c:458
+#: src/finish.c:471
 #, c-format
 msgid ""
 " Cheat level\n"
@@ -1303,7 +1341,7 @@
 " ??????? ?????????\n"
 "\n"
 
-#: src/finish.c:462
+#: src/finish.c:475
 #, c-format
 msgid ""
 "                                                 This day of %.6s %.4s, "
@@ -1314,7 +1352,7 @@
 "%.8s\n"
 "\n"
 
-#: src/finish.c:464
+#: src/finish.c:477
 #, c-format
 msgid ""
 "                                                        Your score:  %d\n"
@@ -1323,7 +1361,7 @@
 "                                                        ??? ????:  %d\n"
 "\n"
 
-#: src/finish.c:465
+#: src/finish.c:478
 #, c-format
 msgid ""
 "                                                    Klingons per stardate:  "
@@ -1331,19 +1369,19 @@
 msgstr ""
 "                                                    ????????? ? ????:  %.2f\n"
 
-#: src/io.c:98
+#: src/io.c:96
 msgid "[ANOUNCEMENT ARRIVING...]"
 msgstr "[????????? ?????????...]"
 
-#: src/io.c:100
+#: src/io.c:98
 msgid "[IMPORTANT ANNOUNCEMENT ARRIVING -- PRESS ENTER TO CONTINUE]"
 msgstr "[????????? ?????? ????????? -- ??????? ???? ??? ???????????]"
 
-#: src/io.c:104
+#: src/io.c:107
 msgid "[CONTINUE?]"
 msgstr "[???????????]"
 
-#: src/io.c:106
+#: src/io.c:109
 msgid "[PRESS ENTER TO CONTINUE]"
 msgstr "[??????? ???? ??? ???????????]"
 
@@ -1360,508 +1398,508 @@
 msgid "Helmsman Sulu- \"Leaving standard orbit.\""
 msgstr "??????? ????- \"?????? ? ??????.\""
 
-#: src/moving.c:105
+#: src/moving.c:107
 msgid "YOU HAVE ATTEMPTED TO CROSS THE NEGATIVE ENERGY BARRIER"
 msgstr "?? ????????? ???????? ????????????? ?????????????? ??????"
 
-#: src/moving.c:106
+#: src/moving.c:108
 msgid "AT THE EDGE OF THE GALAXY.  THE THIRD TIME YOU TRY THIS,"
 msgstr "?? ??????? ?????????.  ??? ???? ??? ??? ????????,"
 
-#: src/moving.c:107
+#: src/moving.c:109
 msgid "YOU WILL BE DESTROYED."
 msgstr "? ??????? ?? ????."
 
-#: src/moving.c:116
+#: src/moving.c:119
 #, c-format
 msgid "Entering %s."
 msgstr "?????? ? %s."
 
-#: src/moving.c:144
+#: src/moving.c:148
 msgid " pulled into black hole at "
 msgstr " ??????? ? ?????? ???? ? "
 
-#: src/moving.c:166
+#: src/moving.c:170
 msgid " encounters Tholian web at "
 msgstr " ????????? ?????????? ???? ? "
 
-#: src/moving.c:168
+#: src/moving.c:172
 msgid " blocked by object at "
 msgstr " ?????????? ???????? ? "
 
-#: src/moving.c:171
+#: src/moving.c:175
 msgid "Emergency stop required "
 msgstr "?????????? ????????? ??????????? "
 
-#: src/moving.c:172
+#: src/moving.c:176
 #, c-format
 msgid "%2d units of energy."
 msgstr "%2d ?????? ???????."
 
-#: src/moving.c:215
+#: src/moving.c:220
 msgid "Already docked."
 msgstr "? ??? ??? ????????????."
 
-#: src/moving.c:219
+#: src/moving.c:224
 msgid "You must first leave standard orbit."
 msgstr "??????? ?? ?????? ???? ? ??????."
 
-#: src/moving.c:224
+#: src/moving.c:229
 msgid " not adjacent to base."
 msgstr " ??? ???????????? ????."
 
-#: src/moving.c:228
+#: src/moving.c:234
 msgid "Docked."
 msgstr "????????????."
 
-#: src/moving.c:238
+#: src/moving.c:245
 msgid "Lt. Uhura- \"Captain, an important message from the starbase:\""
 msgstr "??. ?????- \"???????, ??? ?????? ????????? ? ????:\""
 
-#: src/moving.c:271
+#: src/moving.c:277
 msgid "Dummy! You can't leave standard orbit until you"
 msgstr "?????! ?? ?? ?????? ???? ? ?????? ???? ?? ??"
 
-#: src/moving.c:272
+#: src/moving.c:278
 msgid "are back aboard the ship."
 msgstr "????????? ?? ???? ???????."
 
-#: src/moving.c:279
+#: src/moving.c:285
 msgid "Computer damaged; manual navigation only"
 msgstr "????????? ??????; ?????? ?????? ?????????? ????????"
 
-#: src/moving.c:281
+#: src/moving.c:287
 msgid "Computer damaged; manual movement only"
 msgstr "????????? ??????; ????????? ??????????? ???????"
 
-#: src/moving.c:296
+#: src/moving.c:302
 msgid "Manual or automatic- "
 msgstr "?????? ??? ??????????????- "
 
-#: src/moving.c:319
+#: src/moving.c:325
 msgid "(Manual navigation assumed.)"
 msgstr "(???????????? ?????? ??????????.)"
 
-#: src/moving.c:321
+#: src/moving.c:327
 msgid "(Manual movement assumed.)"
 msgstr "(???????????? ?????? ?????????.)"
 
-#: src/moving.c:330
+#: src/moving.c:336
 msgid "Target quadrant or quadrant&sector- "
 msgstr "???????? ?????????? ??? ????????&??????- "
 
-#: src/moving.c:332
+#: src/moving.c:338
 msgid "Destination sector or quadrant&sector- "
 msgstr "?????? ?????????? ??? ????????&??????- "
 
-#: src/moving.c:386
+#: src/moving.c:392
 #, c-format
 msgid "Helmsman Sulu- \"Course locked in for %s.\""
 msgstr "??????? ????- \"???? ???? ?? %s.\""
 
-#: src/moving.c:390
+#: src/moving.c:397
 msgid "Ensign Chekov- \"Course laid in, Captain.\""
 msgstr "????????? ?????- \"???? ????, ???????.\""
 
-#: src/moving.c:397
+#: src/moving.c:404
 msgid "X and Y displacements- "
 msgstr "?????????? ?? X ? Y- "
 
-#: src/moving.c:422
+#: src/moving.c:429
 msgid "Helmsman Sulu- \"Aye, Sir.\""
 msgstr "??????? ????- \"???, ???.\""
 
-#: src/moving.c:442 src/moving.c:502
+#: src/moving.c:450 src/moving.c:514
 msgid "Engineer Scott- \"The impulse engines are damaged, Sir.\""
 msgstr "??????? ?????- \"?????????? ????????? ??????????, ???.\""
 
-#: src/moving.c:457
+#: src/moving.c:466
 msgid "First Officer Spock- \"Captain, the impulse engines"
 msgstr "?????? ?????? ????- \"???????, ?????????? ?????????"
 
-#: src/moving.c:458
+#: src/moving.c:467
 msgid "require 20.0 units to engage, plus 100.0 units per"
 msgstr "??????? 20.0 ?????? ??????? ??? ???????, ???? 100.0 ?????? ??"
 
-#: src/moving.c:460
+#: src/moving.c:469
 #, c-format
 msgid "quadrant.  We can go, therefore, a maximum of %d"
 msgstr "????????.  ?????????????, ?? ???????? ???????? %d"
 
-#: src/moving.c:462
+#: src/moving.c:471
 msgid " quadrants.\""
 msgstr " ??????????.\""
 
-#: src/moving.c:465
+#: src/moving.c:474
 msgid "quadrant.  They are, therefore, useless.\""
 msgstr "????????.  ????? ??????? ??? ??????????.\""
 
-#: src/moving.c:473
+#: src/moving.c:482
 msgid "First Officer Spock- \"Captain, our speed under impulse"
 msgstr "?????? ?????? ????- \"???????, ???? ???????? ?? ??????????"
 
-#: src/moving.c:474
+#: src/moving.c:483
 msgid "power is only 0.95 sectors per stardate. Are you sure"
 msgstr "???? ????? 0.95 ???????? ? ????. ?? ???????,"
 
-#: src/moving.c:475
+#: src/moving.c:484
 msgid "we dare spend the time?\" "
 msgstr "??? ?? ????? ??????? ??????? ????????\" "
 
-#: src/moving.c:508
+#: src/moving.c:520
 msgid "Engineer Scott- \"Sorry, Captain. Until this damage"
 msgstr "??????? ?????- \"????????, ???????. ???? ??? ????????????? ??"
 
-#: src/moving.c:509
+#: src/moving.c:521
 msgid "  is repaired, I can only give you warp 4.\""
 msgstr "  ?????????, ? ???? ?????? ?????????? ??? ???????? 4.\""
 
-#: src/moving.c:529
+#: src/moving.c:542
 msgid "We can't do it, Captain. We don't have enough energy."
 msgstr "?? ??????, ???????. ? ??? ?? ?????? ???????."
 
-#: src/moving.c:532
+#: src/moving.c:545
 #, c-format
 msgid "We don't have enough energy, but we could do it at warp %d"
 msgstr "? ??? ?? ?????????? ???????, ?? ?? ????? ?? ??????? ?? ??? ???????? %d"
 
-#: src/moving.c:535
+#: src/moving.c:548
 msgid "if you'll lower the shields."
 msgstr ", ???? ?????? ?? ???????? ??????."
 
-#: src/moving.c:542
+#: src/moving.c:555
 msgid "We haven't the energy to go that far with the shields up."
 msgstr "? ??? ??? ??????? ????? ?????? ??? ?????? ? ???????? ???????."
 
-#: src/moving.c:550
+#: src/moving.c:563
 msgid "First Officer Spock- \"Captain, I compute that such"
 msgstr "?????? ?????? ????- \"???????, ? ?????? ??? ?????"
 
-#: src/moving.c:551
+#: src/moving.c:564
 #, c-format
 msgid "  a trip would require approximately %2.0f"
 msgstr "  ????? ????????? ???????? %2.0f"
 
-#: src/moving.c:553
+#: src/moving.c:566
 msgid " percent of our"
 msgstr " ?????????"
 
-#: src/moving.c:554
+#: src/moving.c:567
 msgid "  remaining time.  Are you sure this is wise?\" "
 msgstr " ??????????? ???????.  ?? ??????? ??? ??? ????????\" "
 
-#: src/moving.c:617
+#: src/moving.c:640
 msgid "  Scott here.  The warp engines are damaged."
 msgstr "  ????? ?? ?????.  ??????????????????? ????????? ???????."
 
-#: src/moving.c:618
+#: src/moving.c:641
 msgid "  We'll have to reduce speed to warp 4."
 msgstr "  ???????? ??????? ???????? ?? 4."
 
-#: src/moving.c:634
+#: src/moving.c:657
 msgid "Warp factor- "
 msgstr "????????- "
 
-#: src/moving.c:642
+#: src/moving.c:665
 msgid "Warp engines inoperative."
 msgstr "??????????????????? ????????? ?? ????????."
 
-#: src/moving.c:646
+#: src/moving.c:669
 msgid "Engineer Scott- \"I'm doing my best, Captain,"
 msgstr "??????? ?????- \"? ????? ??? ??? ????, ???????,"
 
-#: src/moving.c:647
+#: src/moving.c:670
 msgid "  but right now we can only go warp 4.\""
 msgstr "  ?? ?????? ?? ????? ???? ?????? ???????? 4.\""
 
-#: src/moving.c:651
+#: src/moving.c:674
 msgid "Helmsman Sulu- \"Our top speed is warp 10, Captain.\""
 msgstr "????????? ????- \"???? ???????????? ???????? - 10, ???????.\""
 
-#: src/moving.c:655
+#: src/moving.c:678
 msgid "Helmsman Sulu- \"We can't go below warp 1, Captain.\""
 msgstr "????????? ????- \"?? ?? ????? ?????????? ???????? ???? 1, ???????.\""
 
-#: src/moving.c:662
+#: src/moving.c:685
 #, c-format
 msgid "Helmsman Sulu- \"Warp factor %d, Captain.\""
 msgstr "????????? ????- \"???????? %d, ???????.\""
 
-#: src/moving.c:667
+#: src/moving.c:690
 msgid "Engineer Scott- \"Aye, but our maximum safe speed is warp 6.\""
 msgstr "??????? ?????- \"???, ???? ?????????? ?????????? ???????? - 6.\""
 
-#: src/moving.c:671
+#: src/moving.c:694
 msgid "Engineer Scott- \"Aye, Captain, we'll try it.\""
 msgstr "??????? ?????- \"??? ???????, ?????????.\""
 
-#: src/moving.c:674
+#: src/moving.c:697
 msgid "Engineer Scott- \"Aye, Captain, but our engines may not take it.\""
 msgstr "??????? ?????- \"??? ???????, ?? ???? ?????? ????? ?? ??????????.\""
 
-#: src/moving.c:690
+#: src/moving.c:713
 msgid "Scotty rushes to the transporter controls."
 msgstr "?????? ????????? ? ?????????? ?????????????."
 
-#: src/moving.c:692
+#: src/moving.c:715
 msgid "But with the shields up it's hopeless."
 msgstr "?? ? ???????? ??????? ??? ??????????."
 
-#: src/moving.c:695
+#: src/moving.c:718
 msgid "His desperate attempt to rescue you . . ."
 msgstr "??? ????????? ??????? ?????? ??? . . ."
 
-#: src/moving.c:697 src/moving.c:1015
+#: src/moving.c:720 src/moving.c:1047
 msgid "fails."
 msgstr "???????????."
 
-#: src/moving.c:701
+#: src/moving.c:724
 msgid "SUCCEEDS!"
 msgstr "?????????? ???????!"
 
-#: src/moving.c:704
+#: src/moving.c:727
 msgid "The crystals mined were "
 msgstr "????????? ????????? "
 
-#: src/moving.c:706
+#: src/moving.c:729
 msgid "lost."
 msgstr "???????."
 
-#: src/moving.c:709
+#: src/moving.c:732
 msgid "saved."
 msgstr "???????."
 
-#: src/moving.c:728
+#: src/moving.c:754
 msgid " has stopped in a quadrant containing"
 msgstr " ??????????? ? ????????? ??"
 
-#: src/moving.c:729
+#: src/moving.c:755
 msgid "   a supernova."
 msgstr "   ??????????."
 
-#: src/moving.c:732
+#: src/moving.c:758
 msgid "***Emergency automatic override attempts to hurl "
 msgstr "***????????? ???????? ??????? "
 
-#: src/moving.c:735
+#: src/moving.c:761
 msgid "safely out of quadrant."
 msgstr "?? ?????????."
 
-#: src/moving.c:741
+#: src/moving.c:767
 msgid "Warp engines damaged."
 msgstr "??????????????????? ????????? ??????????."
 
-#: src/moving.c:747
+#: src/moving.c:773
 #, c-format
 msgid "Warp factor set to %d"
 msgstr "???????? ??????????? ?? %d"
 
-#: src/moving.c:761
+#: src/moving.c:789
 msgid "Insufficient energy to leave quadrant."
 msgstr "???????????? ??????? ????? ???????? ????????."
 
-#: src/moving.c:777
+#: src/moving.c:805
 msgid "***TIME WARP ENTERED."
 msgstr "***??????????? ?????????? ??????????."
 
-#: src/moving.c:780
+#: src/moving.c:808
 #, c-format
 msgid "You are traveling backwards in time %d stardates."
 msgstr "?? ????????????? ????? ?? ??????? ?? %d ????."
 
-#: src/moving.c:805
+#: src/moving.c:834
 msgid "Checkov-  \"Security reports the Galileo has disappeared, Sir!"
 msgstr "?????- \"?????? ??????????? ? ??????? ???????, ???!"
 
-#: src/moving.c:813
+#: src/moving.c:842
 msgid "Checkov-  \"Security reports the Galileo has reappeared in the dock!\""
 msgstr "?????- \"?????? ?????????? ? ????????? ??????? ? ????!\""
 
-#: src/moving.c:820
+#: src/moving.c:849
 msgid "Spock has reconstructed a correct star chart from memory"
 msgstr "???? ??????????? ???????? ????? ?? ??????"
 
-#: src/moving.c:825
+#: src/moving.c:854
 #, c-format
 msgid "You are traveling forward in time %d stardates."
 msgstr "?? ????????????? ?????? ?? ??????? ?? %d ????."
 
-#: src/moving.c:844
+#: src/moving.c:873
 msgid "Engineer Scott- \"We have no more deep space probes, Sir.\""
 msgstr ""
 "??????? ?????- \"? ??? ?????? ??? ???????????? ??????????? ?????, ???.\""
 
-#: src/moving.c:846
+#: src/moving.c:875
 msgid "Ye Faerie Queene has no deep space probes."
 msgstr "?? ????????? ???????? ??? ???????????? ??????????? ?????."
 
-#: src/moving.c:852
+#: src/moving.c:881
 msgid "Engineer Scott- \"The probe launcher is damaged, Sir.\""
 msgstr "??????? ?????- \"???????? ??????? ??????, ???.\""
 
-#: src/moving.c:859
+#: src/moving.c:888
 msgid "Spock-  \"Records show the previous probe has not yet"
 msgstr "?????- \"??????? ? ?????????? ?????? ??????? ? ???, ??? ??? ??? ??"
 
-#: src/moving.c:860
+#: src/moving.c:889
 msgid "   reached its destination.\""
 msgstr "   ???????? ?????? ??????????.\""
 
-#: src/moving.c:863
+#: src/moving.c:892
 msgid "Uhura- \"The previous probe is still reporting data, Sir.\""
 msgstr "?????- \"?????????? ?????? ??? ??? ???????? ???????, ???.\""
 
-#: src/moving.c:870
+#: src/moving.c:899
 #, c-format
 msgid "%d probe left."
 msgstr "???????? %d ??????."
 
-#: src/moving.c:870
+#: src/moving.c:899
 #, c-format
 msgid "%d probes left."
 msgstr "???????? %d ?????."
 
-#: src/moving.c:871
+#: src/moving.c:900
 msgid "Are you sure you want to fire a probe? "
 msgstr "?? ???????, ??? ?????? ????????? ??????? "
 
-#: src/moving.c:881
+#: src/moving.c:911
 msgid "Arm NOVAMAX warhead? "
 msgstr "????????? ??????? ???????????? "
 
-#: src/moving.c:902
+#: src/moving.c:933
 msgid "Ensign Chekov-  \"The deep space probe is launched, Captain.\""
 msgstr ""
 "????????? ?????- \"???????????? ??????????? ?????? ????????, ???????.\""
 
-#: src/moving.c:937
+#: src/moving.c:968
 msgid "Lt. Uhura-  \"But Captain, we're already docked.\""
 msgstr "??. ?????- \"?? ???????, ?? ???? ??? ???????????????.\""
 
-#: src/moving.c:941
+#: src/moving.c:972
 msgid "Subspace radio damaged."
 msgstr "??????????????????? ????? ??????????."
 
-#: src/moving.c:945
+#: src/moving.c:976
 msgid "Lt. Uhura-  \"Captain, I'm not getting any response from Starbase.\""
 msgstr "??. ?????- \"???????, ? ?? ??????? ??????? ???????? ?? ????.\""
 
-#: src/moving.c:949
+#: src/moving.c:980
 msgid "You must be aboard the "
 msgstr "?? ?????? ???? ?? ????? ??????? "
 
-#: src/moving.c:975
+#: src/moving.c:1006
 #, c-format
 msgid "Starbase in %s responds--"
 msgstr "???? ?? %s ????????????--"
 
-#: src/moving.c:977
+#: src/moving.c:1008
 msgid " dematerializes."
 msgstr " ??????????????????."
 
-#: src/moving.c:990
+#: src/moving.c:1021
 msgid "You have been lost in space..."
 msgstr "?? ??????? ? ??????????? ???????..."
 
-#: src/moving.c:998
+#: src/moving.c:1029
 msgid "1st"
 msgstr "1-??"
 
-#: src/moving.c:999
+#: src/moving.c:1030
 msgid "2nd"
 msgstr "2-??"
 
-#: src/moving.c:1000
+#: src/moving.c:1031
 msgid "3rd"
 msgstr "3-?"
 
-#: src/moving.c:1002
+#: src/moving.c:1033
 msgid " attempt to re-materialize "
 msgstr " ??????? ?????????????? "
 
-#: src/moving.c:1029
+#: src/moving.c:1061
 msgid "succeeds."
 msgstr "?????????? ???????."
 
-#: src/moving.c:1033
+#: src/moving.c:1065
 msgid "Lt. Uhura-  \"Captain, we made it!\""
 msgstr "??. ?????- \"???????, ?????????!\""
 
-#: src/moving.c:1066
+#: src/moving.c:1098
 msgid "You cannot abandon Ye Faerie Queene."
 msgstr "?? ?? ?????? ???????? ????????? ????????."
 
-#: src/moving.c:1073
+#: src/moving.c:1105
 msgid "Ye Faerie Queene has no shuttle craft."
 msgstr "?? ????????? ???????? ??? ???????."
 
-#: src/moving.c:1077
+#: src/moving.c:1109
 msgid "Shuttle craft now serving Big Macs."
 msgstr "?????? ???????????? ??? ???????? ??? ?????."
 
-#: src/moving.c:1081
+#: src/moving.c:1113
 msgid "Shuttle craft damaged."
 msgstr "?????? ?????????."
 
-#: src/moving.c:1085
+#: src/moving.c:1117
 msgid "You must be aboard the ship."
 msgstr "?? ?????? ???? ?? ????? ???????."
 
-#: src/moving.c:1089 src/planets.c:302
+#: src/moving.c:1121 src/planets.c:330
 msgid "Shuttle craft not currently available."
 msgstr "?????? ?????? ??????????."
 
-#: src/moving.c:1094
+#: src/moving.c:1126
 msgid "***ABANDON SHIP!  ABANDON SHIP!"
 msgstr "***???????? ???????!  ???????? ???????!"
 
-#: src/moving.c:1096
+#: src/moving.c:1128
 msgid "***ALL HANDS ABANDON SHIP!"
 msgstr "***????? ????????? ???????? ???????!"
 
-#: src/moving.c:1098
+#: src/moving.c:1130
 msgid "Captain and crew escape in shuttle craft."
 msgstr "??????? ? ???????? ?????? ?? ???????."
 
-#: src/moving.c:1107 src/moving.c:1110
+#: src/moving.c:1139
 msgid "Remainder of ship's complement beam down"
 msgstr "??????? ??????? ?????????????????"
 
-#: src/moving.c:1108
+#: src/moving.c:1140
 msgid "to nearest habitable planet."
 msgstr "?? ????????? ????????? ??? ????? ???????."
 
-#: src/moving.c:1111
+#: src/moving.c:1142
 #, c-format
-msgid "to %s."
-msgstr "? %s."
+msgid "Remainder of ship's complement beam down to %s."
+msgstr "??????? ??????? ????????????????? ?? %s."
 
-#: src/moving.c:1113
+#: src/moving.c:1145
 #, c-format
 msgid "Entire crew of %d left to die in outer space."
 msgstr "???? ?????? ? ??????? %d ??????? ??????? ???????? ? ???????? ???????."
 
-#: src/moving.c:1123
+#: src/moving.c:1155
 msgid "You are captured by Klingons and released to"
 msgstr "???????? ??????? ??? ? ????????"
 
-#: src/moving.c:1124
+#: src/moving.c:1156
 msgid "the Federation in a prisoner-of-war exchange."
 msgstr "????????? ??? ?????? ??????????????."
 
-#: src/moving.c:1150
+#: src/moving.c:1183
 msgid "Starfleet puts you in command of another ship,"
 msgstr "???????? ???? ??????? ??? ???????????? ??? ????? ????????,"
 
-#: src/moving.c:1151
+#: src/moving.c:1184
 msgid "the Faerie Queene, which is antiquated but,"
 msgstr "????????? ????????, ??????? ??????? ???????, ??"
 
-#: src/moving.c:1152
+#: src/moving.c:1185
 msgid "still useable."
 msgstr "??? ??? ????????."
 
-#: src/moving.c:1153
+#: src/moving.c:1187
 msgid "The dilithium crystals have been moved."
 msgstr "????????? ??????? ????? ? ?????."
 
@@ -1869,499 +1907,515 @@
 msgid "Spock-  \"Planet report follows, Captain.\""
 msgstr "????- \"??? ?????????? ? ???????, ???????.\""
 
-#: src/planets.c:33
+#: src/planets.c:34
 msgid "   class "
 msgstr "   ????? "
 
-#: src/planets.c:36
+#: src/planets.c:38
 msgid "no "
 msgstr "??????????? "
 
-#: src/planets.c:37
+#: src/planets.c:39
 msgid "dilithium crystals present."
 msgstr "???????? ?????????? ???????."
 
-#: src/planets.c:39
+#: src/planets.c:41
 msgid "    Shuttle Craft Galileo on surface."
 msgstr "    ?????? ??????? ?? ???????????."
 
-#: src/planets.c:42
+#: src/planets.c:45
 msgid "No information available."
 msgstr "??? ??????????."
 
-#: src/planets.c:51
+#: src/planets.c:54
 msgid "Already in standard orbit."
 msgstr "? ??? ??? ?? ??????."
 
-#: src/planets.c:55
+#: src/planets.c:58
 msgid "Both warp and impulse engines damaged."
 msgstr "??????????????????? ????????? ???????, ????? ??? ? ??????????."
 
-#: src/planets.c:60
+#: src/planets.c:63
 msgid " not adjacent to planet."
 msgstr " ??????? ?????? ?? ???????."
 
-#: src/planets.c:65
+#: src/planets.c:68
 msgid "Helmsman Sulu-  \"Entering standard orbit, Sir.\""
 msgstr "??????? ????- \"??????? ?? ??????, ???.\""
 
-#: src/planets.c:69
+#: src/planets.c:73
 #, c-format
 msgid "Sulu-  \"Entered orbit at altitude %.2f kilometers.\""
 msgstr "????- \"????? ?? ?????? ?? ?????? %.2f ??????????.\""
 
-#: src/planets.c:80
+#: src/planets.c:82
 msgid "Short range sensors damaged."
 msgstr "??????? ???????? ?????? ???????."
 
-#: src/planets.c:84
+#: src/planets.c:86
 msgid "Spock- \"No planet in this quadrant, Captain.\""
 msgstr "????- \"? ???? ????????? ??? ??????, ???????.\""
 
-#: src/planets.c:88
+#: src/planets.c:90
 #, c-format
 msgid "Spock-  \"Sensor scan for %s-"
 msgstr "????- \"???????????? %s-"
 
-#: src/planets.c:90
+#: src/planets.c:92
 #, c-format
 msgid "         Planet at %s is of class %s."
 msgstr "         ??????? ?? %s ?????? %s."
 
-#: src/planets.c:94
+#: src/planets.c:96
 msgid "         Sensors show Galileo still on surface."
 msgstr "         ??????? ??????????, ??? ??????? ??? ??? ?? ???????????."
 
-#: src/planets.c:95
+#: src/planets.c:97
 msgid "         Readings indicate"
 msgstr "         ????????????"
 
-#: src/planets.c:96
+#: src/planets.c:99
 msgid " no"
 msgstr " ??"
 
-#: src/planets.c:97
+#: src/planets.c:100
 msgid " dilithium crystals present.\""
 msgstr " ?????????? ???????? ?????????? ???????."
 
-#: src/planets.c:108
+#: src/planets.c:113
 msgid "Transporter damaged."
 msgstr "??????????? ?? ????????."
 
-#: src/planets.c:111
+#: src/planets.c:116
 msgid "Spock-  \"May I suggest the shuttle craft, Sir?\" "
 msgstr "????- \"???? ? ???????????? ??????, ????\""
 
-#: src/planets.c:118 src/planets.c:298
+#: src/planets.c:124 src/planets.c:326
 msgid " not in standard orbit."
 msgstr " ?? ?? ??????."
 
-#: src/planets.c:122
+#: src/planets.c:128
 msgid "Impossible to transport through shields."
 msgstr "?????????? ???????????????? ????? ???????? ????."
 
-#: src/planets.c:126 src/planets.c:314
+#: src/planets.c:132 src/planets.c:342
 msgid "Spock-  \"Captain, we have no information on this planet"
 msgstr "????- \"???????, ? ??? ??? ?????????? ?? ???? ???????"
 
-#: src/planets.c:127 src/planets.c:315
+#: src/planets.c:133 src/planets.c:343
 msgid "  and Starfleet Regulations clearly state that in this situation"
 msgstr " ? ?????????? ????????? ????? ????? ???????????? ? ????? ????????"
 
-#: src/planets.c:128
+#: src/planets.c:134
 msgid "  you may not go down.\""
 msgstr " ?? ?????????? ?? ???????????.\""
 
-#: src/planets.c:134
+#: src/planets.c:138
+msgid "Spock-  \"Captain, I fail to see the logic in"
+msgstr "????- \"???????, ? ?? ???? ??????"
+
+#: src/planets.c:139
+msgid "  exploring a planet with no dilithium crystals."
+msgstr "  ??????????? ???????, ?? ??????? ??? ?????????? ???????."
+
+#: src/planets.c:140 src/planets.c:159 src/planets.c:272
+msgid "  Are you sure this is wise?\" "
+msgstr "  ?? ??????? ??? ??? ????????\" "
+
+#: src/planets.c:150
+msgid "  Captain, we don't have enough energy for transportation."
+msgstr "  ???????, ??? ??????????????? ???????????? ???????."
+
+#: src/planets.c:155
+msgid "  Captain, we have enough energy only to transport you down to"
+msgstr "  ???????, ? ??? ?????? ??????? ?????? ??? ??????????????? ??"
+
+#: src/planets.c:156
+msgid "  the planet, but there wouldn't be an energy for the trip back."
+msgstr "  ???????, ?? ?? ???????? ???? ?????? ?? ?????????."
+
+#: src/planets.c:158
+msgid "  However, the Galileo shuttle craft may still be on a surface."
+msgstr "  ???? ?????? ??????? ????? ???? ??? ??? ?? ???????????."
+
+#: src/planets.c:169
 msgid "Spock-  \"Wouldn't you rather take the Galileo?\" "
 msgstr "????- \"????? ?? ??? ?? ??????????? ????????\""
 
-#: src/planets.c:139
+#: src/planets.c:174
 msgid "Your crew hides the Galileo to prevent capture by aliens."
 msgstr "???? ??????? ?????? ???????, ????? ?? ?? ???????? ?????????????."
 
-#: src/planets.c:141
+#: src/planets.c:176
 msgid "Landing party assembled, ready to beam up."
 msgstr "????????? ????? ??????, ?????? ? ????????????."
 
-#: src/planets.c:143
+#: src/planets.c:178
 msgid "Kirk whips out communicator..."
 msgstr "???? ??????? ????????????..."
 
-#: src/planets.c:144
+#: src/planets.c:179
 msgid "BEEP  BEEP  BEEP"
 msgstr "???  ???  ???"
 
-#: src/planets.c:146
+#: src/planets.c:181
 msgid "\"Kirk to enterprise-  Lock on coordinates...energize.\""
 msgstr "\"???? ???????????- ?????????? ??????????...???????.\""
 
-#: src/planets.c:151
-msgid "Spock-  \"Captain, I fail to see the logic in"
-msgstr "????- \"???????, ? ?? ???? ??????"
-
-#: src/planets.c:152
-msgid "  exploring a planet with no dilithium crystals."
-msgstr " ??????????? ???????, ?? ??????? ??? ?????????? ???????."
-
-#: src/planets.c:153 src/planets.c:244
-msgid "  Are you sure this is wise?\" "
-msgstr "  ?? ??????? ??? ??? ????????\" "
-
-#: src/planets.c:159
+#: src/planets.c:185
 msgid "Scotty-  \"Transporter room ready, Sir.\""
 msgstr "??????- \"??????????? ?????, ???.\""
 
-#: src/planets.c:161
+#: src/planets.c:187
 msgid "Kirk and landing party prepare to beam down to planet surface."
 msgstr "???? ? ????????? ????? ????????? ? ???????????? ?? ???????."
 
-#: src/planets.c:163
+#: src/planets.c:189
 msgid "Kirk-  \"Energize.\""
 msgstr "????- \"???????.\""
 
-#: src/planets.c:172
+#: src/planets.c:198
 msgid "Scotty-  \"Oh my God!  I've lost them.\""
 msgstr "??????- \"? ???!  ? ?? ???????.\""
 
-#: src/planets.c:178
+#: src/planets.c:206
 msgid "Transport complete."
 msgstr "??????????????? ?????????."
 
-#: src/planets.c:181
+#: src/planets.c:208
 msgid "The shuttle craft Galileo is here!"
 msgstr "????? ?????? ???????!"
 
-#: src/planets.c:197
+#: src/planets.c:224
 msgid "Mining party not on planet."
 msgstr "?????????? ?? ??????? ???."
 
-#: src/planets.c:201
+#: src/planets.c:228
 msgid "This planet has already been strip-mined for dilithium."
 msgstr "??? ??????? ??? ???????? ?? ?????; ??????? ??? ?????? ???."
 
-#: src/planets.c:205
+#: src/planets.c:232
 msgid "No dilithium crystals on this planet."
 msgstr "?? ???? ??????? ??????? ???."
 
-#: src/planets.c:209
+#: src/planets.c:236
 msgid "You've already mined enough crystals for this trip."
 msgstr "?? ??????? ??? ?????????? ?????????? ?? ??? ???????."
 
-#: src/planets.c:213
+#: src/planets.c:240
 msgid "With all those fresh crystals aboard the "
 msgstr "? ??? ??? ????? ?????????? ?? ?????, ???"
 
-#: src/planets.c:216
+#: src/planets.c:243
 msgid "there's no reason to mine more at this time."
 msgstr "??? ?????? ???????? ???."
 
-#: src/planets.c:221
+#: src/planets.c:249
 msgid "Mining operation complete."
 msgstr "?????? ?????????? ?????????."
 
-#: src/planets.c:233
+#: src/planets.c:261
 msgid "No dilithium crystals available."
 msgstr "??? ?????????? ???????."
 
-#: src/planets.c:237
+#: src/planets.c:265
 msgid "Spock-  \"Captain, Starfleet Regulations prohibit such an operation"
 msgstr "????- \"???????, ?????????? ????????? ????? ????????? ??? ????????,"
 
-#: src/planets.c:238
+#: src/planets.c:266
 msgid "  except when Condition Yellow exists."
 msgstr " ????? ??????? ??????? ?????????."
 
-#: src/planets.c:241
+#: src/planets.c:269
 msgid "Spock- \"Captain, I must warn you that loading"
 msgstr "????- \"???????, ? ?????? ???????????? ???, ??? ??????"
 
-#: src/planets.c:242
+#: src/planets.c:270
 msgid "  raw dilithium crystals into the ship's power"
 msgstr " ?????????????? ????????? ??????? ? ??????????????"
 
-#: src/planets.c:243
+#: src/planets.c:271
 msgid "  system may risk a severe explosion."
 msgstr " ??????? ??????? ??????, ? ????? ???????? ? ???????? ??????."
 
-#: src/planets.c:250
+#: src/planets.c:278
 msgid "Engineering Officer Scott-  \"(GULP) Aye Sir."
 msgstr "???????-??????? ?????- \"(?????? ??????) ??? ???."
 
-#: src/planets.c:251
+#: src/planets.c:279
 msgid "  Mr. Spock and I will try it.\""
 msgstr "  ?? ? ???????? ?????? ?????????.\""
 
-#: src/planets.c:253
+#: src/planets.c:281
 msgid "Spock-  \"Crystals in place, Sir."
 msgstr "????- \"????????? ?? ?????, ???."
 
-#: src/planets.c:254
+#: src/planets.c:282
 msgid "  Ready to activate circuit.\""
 msgstr "  ????? ???????? ????.\""
 
-#: src/planets.c:256
+#: src/planets.c:284
 msgid "Scotty-  \"Keep your fingers crossed, Sir!\""
 msgstr "??????-  \"????????? ??????, ???!\""
 
-#: src/planets.c:259
+#: src/planets.c:287
 msgid "  \"Activating now! - - No good!  It's***"
 msgstr "  \"??? ????????! - - ?????!  ??***"
 
-#: src/planets.c:261 src/planets.c:462
+#: src/planets.c:289 src/planets.c:495
 msgid "***RED ALERT!  RED A*L********************************"
 msgstr "***???????! ???*??***********************************"
 
-#: src/planets.c:264 src/planets.c:465
+#: src/planets.c:292 src/planets.c:498
 msgid "******************   KA-BOOM!!!!   *******************"
 msgstr "******************   ??-???!!!!    ********************"
 
-#: src/planets.c:270
+#: src/planets.c:298
 msgid "  \"Activating now! - - "
 msgstr "  \"??? ????????! - - "
 
-#: src/planets.c:271
+#: src/planets.c:299
 msgid "The instruments"
 msgstr "????????"
 
-#: src/planets.c:272
+#: src/planets.c:300
 msgid "   are going crazy, but I think it's"
 msgstr "   ????? ? ???, ?? ? ?????, ??? ???"
 
-#: src/planets.c:273
+#: src/planets.c:301
 msgid "   going to work!!  Congratulations, Sir!\""
 msgstr "   ?????? ????????!!  ??????????, ???!\""
 
-#: src/planets.c:286
+#: src/planets.c:314
 msgid "Ye Faerie Queene has no shuttle craft bay to dock it at."
 msgstr "?? ????????? ???????? ??? ?????? ??? ???????? ? ????????."
 
-#: src/planets.c:288
+#: src/planets.c:316
 msgid "Ye Faerie Queene had no shuttle craft."
 msgstr "?? ????????? ???????? ??? ???????."
 
-#: src/planets.c:291
+#: src/planets.c:319
 msgid "The Galileo is damaged."
 msgstr "??????? ?????????."
 
-#: src/planets.c:293
+#: src/planets.c:321
 msgid "Shuttle craft is now serving Big Macs."
 msgstr "?????? ???????????? ??? ???????? ??? ?????."
 
-#: src/planets.c:306
+#: src/planets.c:334
 msgid "You will have to beam down to retrieve the shuttle craft."
 msgstr "??? ???????? ?????????? ?? ??????????? ????? ??????? ??????."
 
-#: src/planets.c:310
+#: src/planets.c:338
 msgid "Shuttle craft cannot pass through shields."
 msgstr "?????? ?? ????? ????????? ????? ??????."
 
-#: src/planets.c:316
+#: src/planets.c:344
 msgid "  you may not fly down.\""
 msgstr " ??? ?? ??????? ??????? ????.\""
 
-#: src/planets.c:321
+#: src/planets.c:349
 msgid "First Officer Spock-  \"Captain, I compute that such"
 msgstr "?????? ?????? ????- \"???????, ? ?????? ??? ?????"
 
-#: src/planets.c:322
+#: src/planets.c:350
 #, c-format
 msgid "  a maneuver would require approximately %2d%% of our"
 msgstr "  ?????? ????????? ???????? %2d%%"
 
-#: src/planets.c:324
+#: src/planets.c:352
 msgid "remaining time."
 msgstr "??????????? ???????."
 
-#: src/planets.c:325
+#: src/planets.c:353
 msgid "Are you sure this is wise?\" "
 msgstr "?? ??????? ??? ??? ????????\" "
 
-#: src/planets.c:336
+#: src/planets.c:364
 msgid "Spock-  \"Would you rather use the transporter?\" "
 msgstr "????- \"?? ????? ?? ??? ??????????????? ??????????????\" "
 
-#: src/planets.c:341
+#: src/planets.c:369
 msgid "Shuttle crew"
 msgstr "?????? ???????"
 
-#: src/planets.c:344
+#: src/planets.c:372
 msgid "Rescue party"
 msgstr "???????????? ???????"
 
-#: src/planets.c:345
+#: src/planets.c:373
 msgid " boards Galileo and swoops toward planet surface."
 msgstr " ??????? ? ??????? ? ???????????? ? ??????????? ???????."
 
-#: src/planets.c:350 src/planets.c:371 src/planets.c:389
+#: src/planets.c:379 src/planets.c:401 src/planets.c:420
 msgid "Trip complete."
 msgstr "????? ???????."
 
-#: src/planets.c:355
+#: src/planets.c:384
 msgid "You and your mining party board the"
 msgstr "?? ? ??? ????? ??????? ?"
 
-#: src/planets.c:356
+#: src/planets.c:385
 msgid "shuttle craft for the trip back to the Enterprise."
 msgstr "?????? ????? ?????? ?? ??????????."
 
-#: src/planets.c:358
+#: src/planets.c:387
 msgid "The short hop begins . . ."
 msgstr "??????? ???????? ??????? . . ."
 
-#: src/planets.c:378
+#: src/planets.c:408
 msgid "Mining party assembles in the hangar deck,"
 msgstr "?????? ?????????? ????????? ? ??????,"
 
-#: src/planets.c:379
+#: src/planets.c:409
 msgid "ready to board the shuttle craft \"Galileo\"."
 msgstr "??? ?????? ??????? ? ?????? \"???????\"."
 
-#: src/planets.c:381
+#: src/planets.c:411
 msgid "The hangar doors open; the trip begins."
 msgstr "????? ?????? ???????; ????? ???????."
 
-#: src/planets.c:403
+#: src/planets.c:434
 msgid "Ye Faerie Queene has no death ray."
 msgstr "?? ????????? ???????? ??? ???? ??????."
 
-#: src/planets.c:407
+#: src/planets.c:438
 msgid "Sulu-  \"But Sir, there are no enemies in this quadrant.\""
 msgstr "????- \"?? ???, ? ???? ????????? ??? ??????.\""
 
-#: src/planets.c:411
+#: src/planets.c:442
 msgid "Death Ray is damaged."
 msgstr "??? ?????? ?????????."
 
-#: src/planets.c:414
+#: src/planets.c:445
 msgid "Spock-  \"Captain, the 'Experimental Death Ray'"
 msgstr "????- \"???????, '????????????????? ??? ??????'"
 
-#: src/planets.c:415
+#: src/planets.c:446
 msgid "  is highly unpredictible.  Considering the alternatives,"
 msgstr "  ???????? ?????????????.  ??????? ??? ????????????,"
 
-#: src/planets.c:416
+#: src/planets.c:447
 msgid "  are you sure this is wise?\" "
 msgstr " ?? ??????? ??? ??? ????????\" "
 
-#: src/planets.c:418
+#: src/planets.c:450
 msgid "Spock-  \"Acknowledged.\""
 msgstr "????- \"??? ?????.\""
 
-#: src/planets.c:421
+#: src/planets.c:453
 msgid "WHOOEE ... WHOOEE ... WHOOEE ... WHOOEE"
 msgstr ""
 
-#: src/planets.c:423
+#: src/planets.c:455
 msgid "Crew scrambles in emergency preparation."
 msgstr "??????? ???????????, ???????? ??????? ?????????????."
 
-#: src/planets.c:424
+#: src/planets.c:456
 msgid "Spock and Scotty ready the death ray and"
 msgstr "???? ? ?????? ???????? ??? ?????? ?"
 
-#: src/planets.c:425
+#: src/planets.c:457
 msgid "prepare to channel all ship's power to the device."
 msgstr "?????? ? ?????? ???? ??????? ??????? ?? ?????????."
 
-#: src/planets.c:427
+#: src/planets.c:459
 msgid "Spock-  \"Preparations complete, sir.\""
 msgstr "????- \"????????????? ????????, ???.\""
 
-#: src/planets.c:428
+#: src/planets.c:460
 msgid "Kirk-  \"Engage!\""
 msgstr "????- \"???!\""
 
-#: src/planets.c:430
+#: src/planets.c:462
 msgid "WHIRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"
 msgstr ""
 
-#: src/planets.c:436 src/planets.c:456
+#: src/planets.c:468 src/planets.c:489
 msgid "Sulu- \"Captain!  It's working!\""
 msgstr "????- \"???????!  ?? ????????!\""
 
-#: src/planets.c:440
+#: src/planets.c:472
 msgid "Ensign Chekov-  \"Congratulations, Captain!\""
 msgstr "????????? ?????- \"??????????, ???????.\""
 
-#: src/planets.c:443
+#: src/planets.c:476
 msgid "Spock-  \"Captain, I believe the `Experimental Death Ray'"
 msgstr "????- \"???????, ? ????????, ??? '????????????????? ??? ??????'"
 
-#: src/planets.c:445
+#: src/planets.c:478
 msgid "   is still operational.\""
 msgstr "   ??? ??? ????????.\""
 
-#: src/planets.c:448
+#: src/planets.c:481
 msgid "   has been rendered nonfunctional.\""
 msgstr "   ?????? ? ??????????.\""
 
-#: src/planets.c:460
+#: src/planets.c:493
 msgid "***MATTER-ANTIMATTER IMPLOSION IMMINENT!"
 msgstr "***???????? ??????? ??????? ? ????????????!"
 
-#: src/planets.c:471
+#: src/planets.c:504
 msgid "Sulu- \"Captain!  Yagabandaghangrapl, brachriigringlanbla!\""
 msgstr "????- \"???????!  ?????????, ????????, ???????-?????????!\""
 
-#: src/planets.c:473
+#: src/planets.c:506
 msgid "Lt. Uhura-  \"Graaeek!  Graaeek!\""
 msgstr "??. ?????- \"??????!  ????!\""
 
-#: src/planets.c:475
+#: src/planets.c:508
 msgid "Spock-  \"Fascinating!  . . . All humans aboard"
 msgstr "????- \"??????????!  . . . ??? ???? ?? ?????"
 
-#: src/planets.c:476
+#: src/planets.c:509
 msgid "  have apparently been transformed into strange mutations."
 msgstr "  ???? ??????????? ?????-?? ???????? ???????."
 
-#: src/planets.c:477
+#: src/planets.c:510
 msgid "  Vulcans do not seem to be affected."
 msgstr "  ?????????, ??????, ?????? ?? ??????????."
 
-#: src/planets.c:479
+#: src/planets.c:512
 msgid "Kirk-  \"Raauch!  Raauch!\""
 msgstr "????- \"???! ???! ???-??!"
 
-#: src/planets.c:485
+#: src/planets.c:518
 msgid "Sulu- \"Captain!  It's   --WHAT?!?!\""
 msgstr "????- \"???????!  ??   --??????!\""
 
-#: src/planets.c:487
+#: src/planets.c:520
 msgid "Spock-  \"I believe the word is"
 msgstr "????- \"??????, ?????"
 
-#: src/planets.c:488
+#: src/planets.c:521
 msgid " *ASTONISHING*"
 msgstr " *???????????*"
 
-#: src/planets.c:489
+#: src/planets.c:522
 msgid " Mr. Sulu."
 msgstr " ?????? ????."
 
-#: src/planets.c:493
+#: src/planets.c:527
 msgid "  Captain, our quadrant is now infested with"
 msgstr "  ???????, ??? ???????? ?????? ???? ?????"
 
-#: src/planets.c:494
+#: src/planets.c:528
 msgid " - - - - - -  *THINGS*."
 msgstr " - - - - - -  *??????*."
 
-#: src/planets.c:496
+#: src/planets.c:530
 msgid "  I have no logical explanation.\""
 msgstr "  ? ???? ??? ????????? ??????????.\""
 
-#: src/planets.c:499
+#: src/planets.c:533
 msgid "Sulu- \"Captain!  The Death Ray is creating tribbles!\""
 msgstr "????- \"???????!   ??? ?????? ?????-?? ??????? ????????!\""
 
-#: src/planets.c:501
+#: src/planets.c:535
 msgid "Scotty-  \"There are so many tribbles down here"
 msgstr "??????-  \"??? ??????? ???? ???????? ??????"
 
-#: src/planets.c:502
+#: src/planets.c:536
 msgid "  in Engineering, we can't move for 'em, Captain.\""
 msgstr "  ? ??????????? ??????, ??? ?? ?? ????? ? ???? ???????????, ???????.\""
 
@@ -2451,361 +2505,361 @@
 msgid "are playing"
 msgstr "???????"
 
-#: src/reports.c:58
+#: src/reports.c:59
 msgid "No plaque is allowed."
 msgstr "??????? ?? ?????."
 
-#: src/reports.c:59
+#: src/reports.c:61
 #, c-format
 msgid "This is tournament game %d."
 msgstr "??? ????????? ???? ????? %d."
 
-#: src/reports.c:60
+#: src/reports.c:62
 #, c-format
 msgid "Your secret password is \"%s\""
 msgstr "??? ?????? \"%s\""
 
-#: src/reports.c:61
+#: src/reports.c:63
 #, c-format
 msgid "%d of %d Klingons have been killed"
 msgstr "%d ?? %d ????????? ?????"
 
-#: src/reports.c:62
+#: src/reports.c:67
 #, c-format
 msgid ", including %d Commander%s."
 msgstr ", ??????? %d ?????????%s."
 
-#: src/reports.c:62 src/reports.c:85 src/reports.c:91 src/reports.c:114
+#: src/reports.c:67 src/reports.c:97 src/reports.c:106 src/reports.c:129
 msgid "s"
 msgstr "(??)"
 
-#: src/reports.c:63
+#: src/reports.c:69
 msgid ", but no Commanders."
 msgstr ", ?? ??? ??????????."
 
-#: src/reports.c:65
+#: src/reports.c:73
 #, c-format
 msgid "The Super Commander has %sbeen destroyed."
 msgstr "????-??? %s??? ?????????."
 
-#: src/reports.c:66
+#: src/reports.c:74
 msgid "not "
 msgstr "?? "
 
-#: src/reports.c:68
+#: src/reports.c:76
 msgid "There "
 msgstr " "
 
-#: src/reports.c:69
+#: src/reports.c:78
 msgid "has been 1 base"
 msgstr "1 ???"
 
-#: src/reports.c:71
+#: src/reports.c:80
 #, c-format
 msgid "have been %d bases"
 msgstr "%d ???"
 
-#: src/reports.c:73
+#: src/reports.c:82
 #, c-format
 msgid " destroyed, %d remaining."
 msgstr " ??????????, %d ????????."
 
-#: src/reports.c:75
+#: src/reports.c:85
 #, c-format
 msgid "There are %d bases."
 msgstr "???????? %d ???."
 
-#: src/reports.c:82
+#: src/reports.c:93
 #, c-format
 msgid "%d casualt%s suffered so far."
 msgstr "%d ????????????%s ??? ??????.\""
 
-#: src/reports.c:84
+#: src/reports.c:96
 #, c-format
 msgid "There were %d call%s for help."
 msgstr "?? ??????? %d ?????%s ????."
 
-#: src/reports.c:87
+#: src/reports.c:99
 msgid "You have "
 msgstr "? ??? "
 
-#: src/reports.c:89
+#: src/reports.c:103
 msgid "no"
 msgstr "???????????"
 
-#: src/reports.c:90
+#: src/reports.c:104
 msgid " deep space probe"
 msgstr " ???????????? ??????????? ??????"
 
-#: src/reports.c:97
+#: src/reports.c:112
 msgid "An armed deep space probe is in "
 msgstr "???????????? ??????????? ?????? ? ??????? ??????? ?????? ? "
 
-#: src/reports.c:99
+#: src/reports.c:114
 msgid "A deep space probe is in "
 msgstr "???????????? ??????????? ?????? ?????? ? "
 
-#: src/reports.c:105
+#: src/reports.c:120
 msgid "Dilithium crystals aboard ship... not yet used."
 msgstr "????????? ??????? ?? ?????... ???? ?? ??????????????."
 
-#: src/reports.c:113
+#: src/reports.c:128
 #, c-format
 msgid "Dilithium crystals have been used %d time%s."
 msgstr "????????? ??????? ?????????????? %d ???%s."
 
-#: src/reports.c:127
+#: src/reports.c:142
 msgid "LONG-RANGE SENSORS DAMAGED."
 msgstr "??????? ???????? ?????? ???????."
 
-#: src/reports.c:130
+#: src/reports.c:145
 msgid "Starbase's long-range scan"
 msgstr "??????? ????? ? ????"
 
-#: src/reports.c:133
+#: src/reports.c:148
 msgid "Long-range scan"
 msgstr "??????? ?????"
 
-#: src/reports.c:166
+#: src/reports.c:181
 msgid "\tDEVICE\t\t\t-REPAIR TIMES-"
 msgstr "\t??????????\t\t-????? ???????-"
 
-#: src/reports.c:167
+#: src/reports.c:182
 msgid "\t\t\tIN FLIGHT\t\tDOCKED"
 msgstr "\t\t\t? ??????\t\t? ?????"
 
-#: src/reports.c:176
+#: src/reports.c:192
 msgid "All devices functional."
 msgstr "??? ?????????? ? ???????."
 
-#: src/reports.c:203
+#: src/reports.c:219
 msgid "Spock-  \"I revised the Star Chart from the starbase's records.\""
 msgstr "????- \"? ??????? ???????? ????? ?? ??????? ? ????.\""
 
-#: src/reports.c:207
+#: src/reports.c:223
 msgid "       STAR CHART FOR THE KNOWN GALAXY"
 msgstr "     ???????? ????? ????????????? ????????"
 
-#: src/reports.c:209
+#: src/reports.c:225
 #, c-format
 msgid "(Last surveillance update %d stardates ago)."
 msgstr "(????????? ?????????? ???? %d ???? ?????)."
 
-#: src/reports.c:269
+#: src/reports.c:286
 msgid "Stardate"
 msgstr "?????"
 
-#: src/reports.c:269
+#: src/reports.c:286
 #, c-format
 msgid "%.1f, Time Left %.2f"
 msgstr "%.1f, ???????? %.2f"
 
-#: src/reports.c:275
+#: src/reports.c:293
 msgid "RED"
 msgstr "???????"
 
-#: src/reports.c:276
+#: src/reports.c:294
 msgid "GREEN"
 msgstr "???????"
 
-#: src/reports.c:277
+#: src/reports.c:295
 msgid "YELLOW"
 msgstr "??????"
 
-#: src/reports.c:278
+#: src/reports.c:296
 msgid "DOCKED"
 msgstr "????????"
 
-#: src/reports.c:279
+#: src/reports.c:297
 msgid "DEAD"
 msgstr "?????"
 
-#: src/reports.c:284
+#: src/reports.c:302
 msgid "Condition"
 msgstr "?????????"
 
-#: src/reports.c:284
+#: src/reports.c:302
 #, c-format
 msgid "%s, %i DAMAGES"
 msgstr "%s, %i ???????????"
 
-#: src/reports.c:288
+#: src/reports.c:306
 msgid "Position"
 msgstr "?????????"
 
-#: src/reports.c:295
+#: src/reports.c:313
 #, c-format
 msgid "DAMAGED, Base provides"
 msgstr "???????, ???? ????????????"
 
-#: src/reports.c:297
+#: src/reports.c:315
 #, c-format
 msgid "DAMAGED, reserves=%4.2f"
 msgstr "???????, ????????=%4.2f"
 
-#: src/reports.c:300
+#: src/reports.c:318
 #, c-format
 msgid "ACTIVE"
 msgstr "????????"
 
-#: src/reports.c:301 src/setup.c:160
+#: src/reports.c:319 src/setup.c:160
 msgid "Life Support"
 msgstr "??????????"
 
-#: src/reports.c:305
+#: src/reports.c:323
 msgid "Warp Factor"
 msgstr "????????"
 
-#: src/reports.c:309
+#: src/reports.c:327
 msgid "Energy"
 msgstr "???????"
 
-#: src/reports.c:311
+#: src/reports.c:329
 msgid " (have crystals)"
 msgstr " (???? ?????????)"
 
-#: src/reports.c:315
+#: src/reports.c:333
 msgid "Torpedoes"
 msgstr "???????"
 
-#: src/reports.c:320
+#: src/reports.c:338
 msgid "DAMAGED,"
 msgstr "???????,"
 
-#: src/reports.c:322
+#: src/reports.c:340
 msgid "UP,"
 msgstr "???????,"
 
-#: src/reports.c:324
+#: src/reports.c:342
 msgid "DOWN,"
 msgstr "?????,"
 
-#: src/reports.c:325
+#: src/reports.c:343
 #, c-format
 msgid " %d%% %.1f units"
 msgstr " %d%% %.1f ??????"
 
-#: src/reports.c:327 src/setup.c:163
+#: src/reports.c:345 src/setup.c:163
 msgid "Shields"
 msgstr "??????"
 
-#: src/reports.c:331
+#: src/reports.c:349
 msgid "Klingons Left"
 msgstr "?????????"
 
-#: src/reports.c:338
+#: src/reports.c:356
 msgid "Major system"
 msgstr "???????? ????"
 
-#: src/reports.c:340
+#: src/reports.c:358
 msgid "Sector is uninhabited"
 msgstr "?????? ?????????"
 
-#: src/reports.c:358
+#: src/reports.c:376
 msgid "Information desired? "
 msgstr "????? ?????????? ???????? "
 
-#: src/reports.c:364
+#: src/reports.c:382
 msgid "UNRECOGNIZED REQUEST. Legal requests are:"
 msgstr "?????? ?? ????. ????????? ???????:"
 
-#: src/reports.c:380
+#: src/reports.c:398
 msgid "   S.R. SENSORS DAMAGED!"
 msgstr "   ??????? ?.?. ???????!"
 
-#: src/reports.c:384
+#: src/reports.c:402
 msgid "  [Using Base's sensors]"
 msgstr "  [???????????? ??????? ????]"
 
-#: src/reports.c:386
+#: src/reports.c:405
 msgid "     Short-range scan"
 msgstr "       ??????? ?????"
 
-#: src/reports.c:412
+#: src/reports.c:432
 msgid "COMPUTER DAMAGED, USE A POCKET CALCULATOR."
 msgstr "????????? ??????, ?????????????? ?????????????."
 
-#: src/reports.c:419
+#: src/reports.c:439
 msgid "Destination quadrant and/or sector? "
 msgstr "???????? ?????????? ?/??? ??????? "
 
-#: src/reports.c:454
+#: src/reports.c:479
 msgid "Answer \"no\" if you don't know the value:"
 msgstr "????????? \"no\" ???? ?? ??????:"
 
-#: src/reports.c:457
+#: src/reports.c:482
 msgid "Time or arrival date? "
 msgstr "????? ?????????"
 
-#: src/reports.c:463
+#: src/reports.c:489
 msgid "We'll never make it, sir."
 msgstr "?? ??? ?? ?????????, ???."
 
-#: src/reports.c:471
+#: src/reports.c:498
 msgid "Warp factor? "
 msgstr "????????? "
 
-#: src/reports.c:481
+#: src/reports.c:508
 msgid "Captain, certainly you can give me one of these."
 msgstr "???????, ?? ????? ????? ??????? ???? ?? ????????."
 
-#: src/reports.c:488
+#: src/reports.c:515
 msgid "Insufficient energy, sir."
 msgstr "?? ??????? ???????, ???."
 
-#: src/reports.c:491 src/reports.c:533
+#: src/reports.c:519 src/reports.c:561
 msgid "New warp factor to try? "
 msgstr "??????????? ?????? ????????? "
 
-#: src/reports.c:507
+#: src/reports.c:535
 msgid "But if you lower your shields,"
 msgstr "?? ???? ?? ??????? ??????,"
 
-#: src/reports.c:508
+#: src/reports.c:536
 msgid "remaining"
 msgstr "???????"
 
-#: src/reports.c:512
+#: src/reports.c:540
 msgid "Remaining"
 msgstr "???????"
 
-#: src/reports.c:513
+#: src/reports.c:541
 #, c-format
 msgid " energy will be %.2f."
 msgstr " ??????? ????? %.2f."
 
-#: src/reports.c:515
+#: src/reports.c:543
 #, c-format
 msgid "And we will arrive at stardate %.2f."
 msgstr "? ?? ???????? %.2f ?????."
 
-#: src/reports.c:519
+#: src/reports.c:547
 msgid "Any warp speed is adequate."
 msgstr "?? ????? ???????? ??????."
 
-#: src/reports.c:521
+#: src/reports.c:549
 #, c-format
 msgid "Minimum warp needed is %.2f,"
 msgstr "??????????? ??????????? ???????? - %.2f,"
 
-#: src/reports.c:522
+#: src/reports.c:550
 #, c-format
 msgid "and we will arrive at stardate %.2f."
 msgstr "? ?? ???????? %.2f ?????."
 
-#: src/reports.c:526
+#: src/reports.c:554
 msgid "Unfortunately, the Federation will be destroyed by then."
 msgstr "? ?????????, ????????? ? ???? ??????? ????? ??? ??????????."
 
-#: src/reports.c:528
+#: src/reports.c:556
 msgid "You'll be taking risks at that speed, Captain"
 msgstr "?? ????? ???????? ?????? ?????????, ???????"
 
-#: src/reports.c:532
+#: src/reports.c:560
 msgid "The starbase there will be destroyed by then."
 msgstr "???? ? ???? ??????? ??? ????? ??????????."
 
-#: src/reports.c:584
+#: src/reports.c:612
 msgid "Direction? "
 msgstr "???????????? "
 
@@ -3049,132 +3103,132 @@
 msgid "D. S. Probe"
 msgstr "?. ?. ??????"
 
-#: src/setup.c:375
+#: src/setup.c:376
 #, c-format
 msgid "It is stardate %d. The Federation is being attacked by"
 msgstr "??????? %d ?????. ????????? ?????????"
 
-#: src/setup.c:377
+#: src/setup.c:378
 msgid "a deadly Klingon invasion force. As captain of the United"
 msgstr "???????????? ???????????? ??????????. ??? ???????"
 
-#: src/setup.c:378
+#: src/setup.c:379
 msgid "Starship U.S.S. Enterprise, it is your mission to seek out"
 msgstr "?????????? ??????????, ?? ?????? ?????"
 
-#: src/setup.c:379
+#: src/setup.c:380
 #, c-format
 msgid "and destroy this invasion force of %d battle cruisers."
 msgstr "? ?????????? ??? ?????????? ?????? ? ??????? %d ?????? ?????????."
 
-#: src/setup.c:381
+#: src/setup.c:382
 #, c-format
 msgid "You have an initial allotment of %d stardates to complete"
 msgstr "? ??? ???? %d ???? ????? ?????????"
 
-#: src/setup.c:382
+#: src/setup.c:383
 msgid "your mission.  As you proceed you may be given more time."
 msgstr "??? ??????.  ?? ???? ???? ??? ????? ???? ??? ???????."
 
-#: src/setup.c:384
+#: src/setup.c:385
 #, c-format
 msgid "You will have %d supporting starbases."
 msgstr "? ??? ????? %d ???."
 
-#: src/setup.c:385
+#: src/setup.c:386
 msgid "Starbase locations-  "
 msgstr "?????????? ???-  "
 
-#: src/setup.c:388
+#: src/setup.c:389
 #, c-format
 msgid "Stardate %d."
 msgstr "????? %d."
 
-#: src/setup.c:390
+#: src/setup.c:391
 #, c-format
 msgid "%d Klingons."
 msgstr "%d ?????????."
 
-#: src/setup.c:391
+#: src/setup.c:392
 msgid "An unknown number of Romulans."
 msgstr "????????? ???????."
 
-#: src/setup.c:392
+#: src/setup.c:394
 msgid "And one (GULP) Super-Commander."
 msgstr "? ???? (??!) ????-??? ?????????."
 
-#: src/setup.c:393
+#: src/setup.c:395
 #, c-format
 msgid "%d stardates."
 msgstr "%d ????."
 
-#: src/setup.c:394
+#: src/setup.c:396
 #, c-format
 msgid "%d starbases in "
 msgstr "%d ??? ? "
 
-#: src/setup.c:401
+#: src/setup.c:403
 msgid "The Enterprise is currently in "
 msgstr "?????????? ?????? ? "
 
-#: src/setup.c:406
+#: src/setup.c:408
 msgid "Good Luck!"
 msgstr "?????!"
 
-#: src/setup.c:407
+#: src/setup.c:410
 msgid "  YOU'LL NEED IT."
 msgstr "  ??? ??? ???????????."
 
-#: src/setup.c:423
+#: src/setup.c:428
 msgid "Would you like a regular, tournament, or saved game? "
 msgstr "?????? ??????? (r), ????????? (t), ??? ??????????? (s) ????? "
 
-#: src/setup.c:428
+#: src/setup.c:434
 msgid "Type in tournament number-"
 msgstr "??????? ????? ???????-"
 
-#: src/setup.c:449 src/setup.c:465 src/setup.c:495
+#: src/setup.c:459 src/setup.c:483 src/setup.c:515
 msgid "What is \""
 msgstr "??? ?? \""
 
-#: src/setup.c:472
+#: src/setup.c:491
 msgid "Would you like a Short, Medium, or Long game? "
 msgstr "?????? ???????? (s), ??????? (m), ??? ??????? (l) ????? "
 
-#: src/setup.c:473
+#: src/setup.c:493
 msgid "Are you a Novice, Fair, Good, Expert, or Emeritus player? "
 msgstr ""
 "?? ??????? (n), ??????? (f), ?????? (g), ?????????? (e), ??? ????????? (em)? "
 
-#: src/setup.c:479
+#: src/setup.c:499
 msgid "Choose your game style (or just press enter): "
 msgstr "???????? ????? ???? (??? ??????? ????): "
 
-#: src/setup.c:655
+#: src/setup.c:680
 msgid "LT. Uhura- \"Captain, an urgent message."
 msgstr "??. ?????- \"???????, ??????? ?????????."
 
-#: src/setup.c:656
+#: src/setup.c:681
 msgid "  I'll put it on audio.\"  CLICK"
 msgstr "  ? ?????? ??? ?? ????????????????.\"  ????"
 
-#: src/setup.c:658
+#: src/setup.c:683
 msgid "INTRUDER! YOU HAVE VIOLATED THE ROMULAN NEUTRAL ZONE."
 msgstr "?????! ?? ??????? ??????? ?????????? ???????."
 
-#: src/setup.c:659
+#: src/setup.c:684
 msgid "LEAVE AT ONCE, OR YOU WILL BE DESTROYED!"
 msgstr "?????? ??????????, ??? ?????? ?????????!"
 
-#: src/setup.c:676
+#: src/setup.c:701
 msgid "Mr. Spock- \"Captain, this is most unusual."
 msgstr "?????? ????- \"???????, ??? ???-?? ????? ?????????."
 
-#: src/setup.c:677
+#: src/setup.c:702
 msgid "    Please examine your short-range scan.\""
 msgstr "    ?????????? ?????????? ?????????? ???????? ????????????.\""
 
-#: src/setup.c:764
+#: src/setup.c:798
 msgid "Please type in a secret password- "
 msgstr "?????????? ???????? ??????- "
 
@@ -3186,118 +3240,118 @@
 msgid "Help on what command? "
 msgstr "??????? ?? ????? ???????? "
 
-#: src/sst.c:347
+#: src/sst.c:349
 msgid "Spock-  \"Captain, that information is missing from the"
 msgstr "????- \"???????, ????? ?????????? ??? ?"
 
-#: src/sst.c:348
+#: src/sst.c:350
 msgid "   computer. You need to find "
 msgstr "   ??????????. ??? ???? ????? "
 
-#: src/sst.c:350
+#: src/sst.c:352
 msgid " and put it in the"
 msgstr "? ????????? ??? ?"
 
-#: src/sst.c:351
+#: src/sst.c:353
 msgid "   current directory or to "
 msgstr "   ??????? ??????? ??? ? "
 
-#: src/sst.c:362
+#: src/sst.c:364
 msgid "Spock- \"Captain, there is no information on that command.\""
 msgstr "????- \"???????, ?? ??? ??????? ??? ??????????.\""
 
-#: src/sst.c:376
+#: src/sst.c:378
 msgid "Spock- \"Captain, I've found the following information:\""
 msgstr "????- \"???????, ? ????? ???-????? ??????????:\""
 
-#: src/sst.c:541
+#: src/sst.c:552
 msgid "WARNING--Saved games produce no plaques!"
 msgstr "??????????????--??????????? ???? ?? ???? ???????!"
 
-#: src/sst.c:665
+#: src/sst.c:684
 msgid "Do you want your score recorded?"
 msgstr "?????? ???????? ???? ????? "
 
-#: src/sst.c:671
+#: src/sst.c:690
 msgid "Do you want to play again? "
 msgstr "?????? ??????? ?????? "
 
-#: src/sst.c:675
+#: src/sst.c:695
 msgid "May the Great Bird of the Galaxy roost upon your home planet."
 msgstr "? ????? ??????? ????? ????????? ??????? ?? ???? ???????."
 
-#: src/sst.c:687
+#: src/sst.c:707
 msgid "Romulan"
 msgstr "???????"
 
-#: src/sst.c:688
+#: src/sst.c:708
 msgid "Klingon"
 msgstr "???????"
 
-#: src/sst.c:689
+#: src/sst.c:709
 msgid "Commander"
 msgstr "????????"
 
-#: src/sst.c:690
+#: src/sst.c:710
 msgid "Super-commander"
 msgstr "????-???"
 
-#: src/sst.c:691
+#: src/sst.c:711
 msgid "Star"
 msgstr "??????"
 
-#: src/sst.c:692
+#: src/sst.c:712
 msgid "Planet"
 msgstr "???????"
 
-#: src/sst.c:693
+#: src/sst.c:713
 msgid "Starbase"
 msgstr "????"
 
-#: src/sst.c:694
+#: src/sst.c:714
 msgid "Black hole"
 msgstr "?????? ????"
 
-#: src/sst.c:695
+#: src/sst.c:715
 msgid "Tholian"
 msgstr "??????"
 
-#: src/sst.c:696
+#: src/sst.c:716
 msgid "Tholian web"
 msgstr "?????????? ????"
 
-#: src/sst.c:697
+#: src/sst.c:717
 msgid "Stranger"
 msgstr "????????"
 
-#: src/sst.c:698
+#: src/sst.c:718
 msgid "Inhabited World"
 msgstr "????????? ???"
 
-#: src/sst.c:709
+#: src/sst.c:730
 msgid "Quadrant "
 msgstr "???????? "
 
-#: src/sst.c:710
+#: src/sst.c:732
 msgid "Sector "
 msgstr "?????? "
 
-#: src/sst.c:720
+#: src/sst.c:743
 msgid " at "
 msgstr " ? "
 
-#: src/sst.c:729
+#: src/sst.c:752
 msgid "Enterprise"
 msgstr "??????????"
 
-#: src/sst.c:730
+#: src/sst.c:753
 msgid "Faerie Queene"
 msgstr "????????? ????????"
 
-#: src/sst.c:839
+#: src/sst.c:858
 msgid "Please answer with \"y\" or \"n\": "
 msgstr "?????????? ????????? ?? (\"y\") ??? ??? (\"n\"): "
 
-#: src/sst.c:848
+#: src/sst.c:867
 msgid "Beg your pardon, Captain?"
 msgstr "????? ????????, ????????"

Modified: trunk/src/Makefile.am
===================================================================
--- trunk/src/Makefile.am	2006-10-02 14:47:33 UTC (rev 650)
+++ trunk/src/Makefile.am	2006-10-02 17:13:02 UTC (rev 651)
@@ -1,5 +1,6 @@
-AM_CFLAGS = -Wall -Wimplicit -Wunused -Wmissing-prototypes \
-    -Wuninitialized -fno-inline -O1 -DDATA_DIR=\"$(pkgdatadir)\" \
+AM_CFLAGS = -Wall -Wimplicit -Wunused -Wmissing-prototypes -Wundef \
+    -Wuninitialized -Wdeclaration-after-statement \
+    -fno-inline -O1 -DDATA_DIR=\"$(pkgdatadir)\" \
     -DLOCALEDIR=\"$(datadir)/locale\" \
     @CFLAGS@
 

Modified: trunk/src/Makefile.in
===================================================================
--- trunk/src/Makefile.in	2006-10-02 14:47:33 UTC (rev 650)
+++ trunk/src/Makefile.in	2006-10-02 17:13:02 UTC (rev 651)
@@ -169,8 +169,9 @@
 sharedstatedir = @sharedstatedir@
 sysconfdir = @sysconfdir@
 target_alias = @target_alias@
-AM_CFLAGS = -Wall -Wimplicit -Wunused -Wmissing-prototypes \
-    -Wuninitialized -fno-inline -O1 -DDATA_DIR=\"$(pkgdatadir)\" \
+AM_CFLAGS = -Wall -Wimplicit -Wunused -Wmissing-prototypes -Wundef \
+    -Wuninitialized -Wdeclaration-after-statement \
+    -fno-inline -O1 -DDATA_DIR=\"$(pkgdatadir)\" \
     -DLOCALEDIR=\"$(datadir)/locale\" \
     @CFLAGS@
 

Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-10-02 14:47:33 UTC (rev 650)
+++ trunk/src/ai.c	2006-10-02 17:13:02 UTC (rev 651)
@@ -363,7 +363,7 @@
 	    game.state.planets[i].pclass = destroyed;
 	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = NOPLANET;
 	    if (!damaged(DRADIO) || game.condition == docked) {
-		pause_game(true);
+		announce();
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"));
 		proutn(_("   a planet in "));
 		proutn(cramlc(quadrant, game.state.kscmdr));
@@ -525,7 +525,7 @@
 		if (damaged(DRADIO) && game.condition != docked)
 		    return; /* no warning */
 		game.iseenit = true;
-		pause_game(true);
+		announce();
 		proutn(_("Lt. Uhura-  \"Captain, the starbase in "));
 		proutn(cramlc(quadrant, game.state.kscmdr));
 		skip(1);
@@ -550,7 +550,7 @@
 	 (damaged(DRADIO) && game.condition != docked) ||
 	 !game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].charted))
 	return;
-    pause_game(true);
+    announce();
     prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"));
     proutn(_("   the Super-commander is in "));
     proutn(cramlc(quadrant, game.state.kscmdr));

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-10-02 14:47:33 UTC (rev 650)
+++ trunk/src/battle.c	2006-10-02 17:13:02 UTC (rev 651)
@@ -240,7 +240,7 @@
     game.shldup = false;
     prout(_("***Shields are down."));
     if (game.state.remkl + game.state.remcom + game.state.nscrem) {
-	pause_game(true);
+	announce();
 	damagereport();
     }
     else

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-10-02 14:47:33 UTC (rev 650)
+++ trunk/src/events.c	2006-10-02 17:13:02 UTC (rev 651)
@@ -67,8 +67,6 @@
     coord w, hold;
     event *ev, *ev2;
 
-    pause_reset();
-
     if (idebug) {
 	prout("=== EVENTS from %.2f to %.2f:", game.state.date, fintim);
 	for (i = 1; i < NEVENTS; i++) {
@@ -158,7 +156,7 @@
 	game.optime -= xtime;
 	switch (evcode) {
 	case FSNOVA: /* Supernova */
-	    pause_game(true);
+	    announce();
 	    supernova(false, NULL);
 	    schedule(FSNOVA, expran(0.5*game.intime));
 	    if (game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova)
@@ -198,7 +196,7 @@
 	    }
 	    /* tractor beaming cases merge here */
 	    yank = sqrt(yank);
-	    pause_game(true);
+	    announce();
 	    game.optime = (10.0/(7.5*7.5))*yank; /* 7.5 is yank rate (warp 7.5) */
 	    ictbeam = true;
 	    skip(1);
@@ -297,7 +295,7 @@
 	    if (!damaged(DRADIO) && game.condition != docked) 
 		break; /* No warning :-( */
 	    game.iseenit = true;
-	    pause_game(true);
+	    announce();
 	    skip(1);
 	    proutn(_("Lt. Uhura-  \"Captain, the starbase in "));
 	    prout(cramlc(quadrant, game.battle));
@@ -344,7 +342,7 @@
 	    else if (game.state.rembase != 1 &&
 		     (!damaged(DRADIO) || game.condition == docked)) {
 		/* Get word via subspace radio */
-		pause_game(true);		    
+		announce();
 		skip(1);
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Command reports that"));
 		proutn(_("   the starbase in "));
@@ -389,7 +387,7 @@
 		    game.state.galaxy[game.probec.x][game.probec.y].supernova) {
 		    // Left galaxy or ran into supernova
 		    if (!damaged(DRADIO) || game.condition == docked) {
-			pause_game(true);
+			announce();
 			skip(1);
 			proutn(_("Lt. Uhura-  \"The deep space probe "));
 			if (!VALID_QUADRANT(j, i))
@@ -402,7 +400,7 @@
 		    break;
 		}
 		if (!damaged(DRADIO) || game.condition == docked) {
-		    pause_game(true);
+		    announce();
 		    skip(1);
 		    proutn(_("Lt. Uhura-  \"The deep space probe is now in "));
 		    proutn(cramlc(quadrant, game.probec));
@@ -442,6 +440,7 @@
 		q = &game.state.galaxy[w.x][w.y];
 	    } while (--i &&
 		     (same(game.quadrant, w) || q->planet == NOPLANET ||
+		      game.state.planets[q->planet].inhabited == UNINHABITED ||
 		      q->supernova || q->status!=secure || q->klingons<=0));
 	    if (i == 0) {
 		/* can't seem to find one; ignore this call */
@@ -458,9 +457,9 @@
 	    /* tell the captain about it if we can */
 	    if (!damaged(DRADIO) || game.condition == docked)
 	    {
-		prout("Uhura- Captain, %s in %s reports it is under attack",
+		prout(_("Uhura- Captain, %s in %s reports it is under attack"),
 		      systnames[q->planet], cramlc(quadrant, w));
-		prout("by a Klingon invasion fleet.");
+		prout(_("by a Klingon invasion fleet."));
 		if (cancelrest())
 		    return;
 	    }
@@ -482,9 +481,9 @@
 	    /* report the disaster if we can */
 	    if (!damaged(DRADIO) || game.condition == docked)
 	    {
-		prout("Uhura- We've lost contact with starsystem %s",
+		prout(_("Uhura- We've lost contact with starsystem %s"),
 		      systnames[q->planet]);
-		prout("in %s.\n", cramlc(quadrant, ev->quadrant));
+		prout(_("in %s.\n"), cramlc(quadrant, ev->quadrant));
 	    }
 	    break;
 	case FREPRO:		/* Klingon reproduces */
@@ -534,13 +533,13 @@
 	    if (!damaged(DRADIO) || game.condition == docked)
 	    {
 		if (same(game.quadrant, w)) {
-		    prout("Spock- sensors indicate the Klingons have");
-		    prout("launched a warship from %s.", systnames[q->planet]);
+		    prout(_("Spock- sensors indicate the Klingons have"));
+		    prout(_("launched a warship from %s."), systnames[q->planet]);
 		} else {
-		    prout("Uhura- Starfleet reports increased Klingon activity");
+		    prout(_("Uhura- Starfleet reports increased Klingon activity"));
 		    if (q->planet != NOPLANET)
-			proutn("near %s", systnames[q->planet]);
-		    prout("in %s.\n", cramlc(quadrant, w));
+			proutn(_("near %s"), systnames[q->planet]);
+		    prout(_("in %s.\n"), cramlc(quadrant, w));
 		}
 	    }
 	    break;
@@ -815,7 +814,7 @@
 void supernova(bool induced, coord *w) 
 /* star goes supernova */
 {
-    int num = 0, nrmdead, npdead, kldead;
+    int num = 0, nrmdead, npdead = 0, kldead, loop;
     coord nq;
 
     if (w != NULL) 
@@ -914,13 +913,12 @@
     nrmdead = game.state.galaxy[nq.x][nq.y].romulans;
     game.state.galaxy[nq.x][nq.y].romulans = 0;
     game.state.nromrem -= nrmdead;
-    npdead = num - nrmdead*10;
-    if (npdead) {
-	int loop;
-	for (loop = 0; loop < game.inplan; loop++)
-	    if (same(game.state.planets[loop].w, nq)) {
-		game.state.planets[loop].pclass = destroyed;
-	    }
+    /* Destroy planets */
+    for (loop = 0; loop < game.inplan; loop++) {
+	if (same(game.state.planets[loop].w, nq)) {
+	    game.state.planets[loop].pclass = destroyed;
+	    npdead++;
+	}
     }
     /* Destroy any base in supernovaed quadrant */
     if (game.state.rembase) {

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-10-02 14:47:33 UTC (rev 650)
+++ trunk/src/io.c	2006-10-02 17:13:02 UTC (rev 651)
@@ -7,7 +7,6 @@
 #include "sstlinux.h"
 
 static int rows, linecount;	/* for paging */
-static bool pause_latch;
 
 WINDOW *curwnd;
 WINDOW *fullscreen_window;
@@ -90,31 +89,25 @@
 	getch();
 }
 
-void pause_reset(void)
+void announce(void)
 {
-    pause_latch = false;
+    skip(1);
+    if (game.skill > SKILL_FAIR)
+	prouts(_("[ANOUNCEMENT ARRIVING...]"));
+    else
+	prouts(_("[IMPORTANT ANNOUNCEMENT ARRIVING -- PRESS ENTER TO CONTINUE]"));
+    skip(1);
 }
 
-void pause_game(bool announcement) 
+static void pause_game(void)
 {
-    if (pause_latch)
-	return;
-    else {
 	char *prompt;
 	char buf[BUFSIZ];
-	if (announcement) {
-	    if (game.skill > SKILL_FAIR)
-		prompt = _("[ANOUNCEMENT ARRIVING...]");
-	    else
-		prompt = _("[IMPORTANT ANNOUNCEMENT ARRIVING -- PRESS ENTER TO CONTINUE]");
-	}
-	else {
-	    if (game.skill > SKILL_FAIR)
-		prompt = _("[CONTINUE?]");
-	    else
-		prompt = _("[PRESS ENTER TO CONTINUE]");
+        if (game.skill > SKILL_FAIR)
+	    prompt = _("[CONTINUE?]");
+	else
+	    prompt = _("[PRESS ENTER TO CONTINUE]");
 
-	}
 	if (game.options & OPTION_CURSES) {
 	    drawmaps(0);
 	    setwnd(prompt_window);
@@ -125,18 +118,14 @@
 	    wrefresh(prompt_window);
 	    setwnd(message_window);
 	} else {
+	    int j;
 	    putchar('\n');
 	    proutn(prompt);
 	    fgets(buf, sizeof(buf), stdin);
-	    if (announcement) {
-		int j;
-		for (j = 0; j < rows; j++)
-		    putchar('\n');
-	    }
+	    for (j = 0; j < rows; j++)
+		putchar('\n');
 	    linecount = 0;
 	}
-	pause_latch = true;
-    }
 }
 
 
@@ -145,7 +134,7 @@
     while (i-- > 0) {
 	if (game.options & OPTION_CURSES) {
 	    if (curwnd == message_window && getcury(curwnd) >= getmaxy(curwnd) - 3) {
-		pause_game(false);
+		pause_game();
 		clrscr();
 	    } else {
 		proutn("\n");
@@ -153,7 +142,7 @@
 	} else {
 	    linecount++;
 	    if (linecount >= rows)
-		pause_game(false);
+		pause_game();
 	    else
 		putchar('\n');
 	}

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-10-02 14:47:33 UTC (rev 650)
+++ trunk/src/moving.c	2006-10-02 17:13:02 UTC (rev 651)
@@ -1139,8 +1139,8 @@
 	    prout(_("Remainder of ship's complement beam down"));
 	    prout(_("to nearest habitable planet."));
 	} else if (q->planet != NOPLANET && !damaged(DTRANSP)) {
-	    prout(_("Remainder of ship's complement beam down"));
-	    prout(_("to %s."), systnames[q->planet]);
+	    prout(_("Remainder of ship's complement beam down to %s."),
+		    systnames[q->planet]);
 	} else {
 	    prout(_("Entire crew of %d left to die in outer space."),
 		    game.state.crew);

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-10-02 14:47:33 UTC (rev 650)
+++ trunk/src/planets.c	2006-10-02 17:13:02 UTC (rev 651)
@@ -78,17 +78,15 @@
 void sensor(void)
 /* examine planets in this quadrant */
 {
-    skip(1);
-    chew();
     if (damaged(DSRSENS)) {
 	prout(_("Short range sensors damaged."));
 	return;
     }
-    if (!game.plnet.x && (game.options & OPTION_TTY)) {
+    if (!is_valid(game.plnet) && (game.options & OPTION_TTY)) {
 	prout(_("Spock- \"No planet in this quadrant, Captain.\""));
 	return;
     }
-    if ((game.plnet.x != 0)&& (game.state.planets[game.iplnet].known == unknown)) {
+    if (is_valid(game.plnet) && (game.state.planets[game.iplnet].known == unknown)) {
 	prout(_("Spock-  \"Sensor scan for %s-"), cramlc(quadrant, game.quadrant));
 	skip(1);
 	prout(_("         Planet at %s is of class %s."),
@@ -108,6 +106,7 @@
 void beam(void) 
 /* use the transporter */
 {
+    double nrgneed = 0;
     chew();
     skip(1);
     if (damaged(DTRANSP)) {
@@ -135,6 +134,35 @@
 	prout(_("  you may not go down.\""));
 	return;
     }
+    if (!game.landed && game.state.planets[game.iplnet].crystals==absent) {
+	prout(_("Spock-  \"Captain, I fail to see the logic in"));
+	prout(_("  exploring a planet with no dilithium crystals."));
+	proutn(_("  Are you sure this is wise?\" "));
+	if (ja() == false) {
+	    chew();
+	    return;
+	}
+    }
+    if (!(game.options & OPTION_PLAIN)) {
+	nrgneed = 50 * game.skill + game.height / 100.0;
+	if (nrgneed > game.energy) {
+    	    prout(_("Engineering to bridge--"));
+	    prout(_("  Captain, we don't have enough energy for transportation."));
+	    return;
+	}
+	if (!game.landed && nrgneed * 2 > game.energy) {
+    	    prout(_("Engineering to bridge--"));
+	    prout(_("  Captain, we have enough energy only to transport you down to"));
+	    prout(_("  the planet, but there wouldn't be an energy for the trip back."));
+	    if (game.state.planets[game.iplnet].known == shuttle_down)
+		prout(_("  However, the Galileo shuttle craft may still be on a surface."));
+	    proutn(_("  Are you sure this is wise?\" "));
+	    if (ja() == false) {
+		chew();
+		return;
+	    }
+	}
+    }
     if (game.landed) {
 	/* Coming from planet */
 	if (game.state.planets[game.iplnet].known==shuttle_down) {
@@ -154,15 +182,6 @@
     }
     else {
 	/* Going to planet */
-	if (game.state.planets[game.iplnet].crystals==absent) {
-	    prout(_("Spock-  \"Captain, I fail to see the logic in"));
-	    prout(_("  exploring a planet with no dilithium crystals."));
-	    proutn(_("  Are you sure this is wise?\" "));
-	    if (ja() == false) {
-		chew();
-		return;
-	    }
-	}
 	prout(_("Scotty-  \"Transporter room ready, Sir.\""));
 	skip(1);
 	prout(_("Kirk and landing party prepare to beam down to planet surface."));
@@ -181,9 +200,10 @@
 	return;
     }
     prouts(".    .   .  .  .  .  .E.E.EEEERRRRRIIIIIOOOHWW");
+    game.landed = !game.landed;
+    game.energy -= nrgneed;
     skip(2);
     prout(_("Transport complete."));
-    game.landed = !game.landed;
     if (game.landed && game.state.planets[game.iplnet].known==shuttle_down) {
 	prout(_("The shuttle craft Galileo is here!"));
     }
@@ -364,7 +384,8 @@
 	    prout(_("You and your mining party board the"));
 	    prout(_("shuttle craft for the trip back to the Enterprise."));
 	    skip(1);
-	    prout(_("The short hop begins . . ."));
+	    prouts(_("The short hop begins . . ."));
+	    skip(1);
 	    game.state.planets[game.iplnet].known=known;
 	    game.icraft = true;
 	    skip(1);

Modified: trunk/src/reports.c
===================================================================
--- trunk/src/reports.c	2006-10-02 14:47:33 UTC (rev 650)
+++ trunk/src/reports.c	2006-10-02 17:13:02 UTC (rev 651)
@@ -576,7 +576,7 @@
 			
 }
 
-#if BSD_BUG_FOR_BUG
+#ifdef BSD_BUG_FOR_BUG
 /*
  *	A visual scan is made in a particular direction of three sectors
  *	in the general direction specified.  This takes time, and

Modified: trunk/src/setup.c
===================================================================
--- trunk/src/setup.c	2006-10-02 14:47:33 UTC (rev 650)
+++ trunk/src/setup.c	2006-10-02 17:13:02 UTC (rev 651)
@@ -104,7 +104,6 @@
 	 * Some planets marked Class G and P here will be displayed as class M \
 	 * because of the way planets are generated. This is a known bug. \
 	 */ \
-	"ERROR", \
 	/* Federation Worlds */ \
 	_("Andoria (Fesoan)"),	/* several episodes */ \
 	_("Tellar Prime (Miracht)"),	/* TOS: "Journey to Babel" */ \
@@ -337,7 +336,7 @@
 	do w = randplace(GALSIZE); 
 	while (game.state.galaxy[w.x][w.y].planet != NOPLANET);
 	game.state.planets[i].w = w;
-	if (i < NINHAB) {
+	if ((game.options & OPTION_WORLDS) && i < NINHAB) {
 	    game.state.planets[i].pclass = M;	// All inhabited planets are class M
 	    game.state.planets[i].crystals = absent;
 	    game.state.planets[i].known = known;
@@ -348,8 +347,7 @@
 	    game.state.planets[i].known = unknown;
 	    game.state.planets[i].inhabited = UNINHABITED;
 	}
-	if ((game.options & OPTION_WORLDS) || i >= NINHAB)
-	    game.state.galaxy[w.x][w.y].planet = i;
+	game.state.galaxy[w.x][w.y].planet = i;
     }
     // Locate Romulans
     for (i = 1; i <= game.state.nromrem; i++) {
@@ -527,8 +525,11 @@
     game.damfac = 0.5 * game.skill;
     game.state.rembase = 2.0 + Rand()*(BASEMAX-2.0);
     game.inbase = game.state.rembase;
+    game.inplan = 0;
     if (game.options & OPTION_PLANETS)
-	game.inplan = NINHAB + (MAXUNINHAB/2) + (MAXUNINHAB/2+1)*Rand();
+	game.inplan += (MAXUNINHAB/2) + (MAXUNINHAB/2+1)*Rand();
+    if (game.options & OPTION_WORLDS)
+	game.inplan += NINHAB;
     game.state.nromrem = game.inrom = (2.0+Rand())*game.skill;
     game.state.nscrem = game.inscom = (game.skill > SKILL_FAIR ? 1 : 0);
     game.state.remtime = 7.0 * game.length;
@@ -671,7 +672,7 @@
 	dropin(IHSTAR);
 
     // Check for RNZ
-    if (game.irhere > 0 && game.klhere == 0 && (q->planet == NOPLANET || game.state.planets[q->planet].inhabited == UNINHABITED)) {
+    if (game.irhere > 0 && game.klhere == 0) {
 	game.neutz = true;
 	if (!damaged(DRADIO)) {
 	    skip(1);

Modified: trunk/src/sst.c
===================================================================
--- trunk/src/sst.c	2006-10-02 14:47:33 UTC (rev 650)
+++ trunk/src/sst.c	2006-10-02 17:13:02 UTC (rev 651)
@@ -189,7 +189,7 @@
 bool idebug;		// debug mode
 FILE *logfp, *replayfp;
 
-char *systnames[NINHAB + 1];
+char *systnames[NINHAB];
 char *device[NDEVICES];
 
 static struct 
@@ -276,7 +276,7 @@
 	{"HELP",	HELP,		0},
 #define SEED	37
 	{"SEED",	SEED,		0},
-#if BSD_BUG_FOR_BUG
+#ifdef BSD_BUG_FOR_BUG
 #define VISUAL	38
 	{"VISUAL",	VISUAL,		0},
 #endif
@@ -575,7 +575,7 @@
 	    if (key == IHREAL)
 		seed = (int)aaitem;
 	    break;
-#if BSD_BUG_FOR_BUG
+#ifdef BSD_BUG_FOR_BUG
 	case VISUAL:
 	    visual();			// perform visual scan
 	    break;
@@ -826,19 +826,12 @@
 	chew();
 	return IHEOL;
     }
-    if (isdigit(*linep) || *linep=='+' || *linep=='-' || *linep=='.') {
-	// treat as a number
-	i = 0;
-	if (sscanf(linep, "%lf%n", &aaitem, &i) < 1) {
-	    linep = line; // Invalid numbers are ignored
-	    *linep = 0;
-	    return IHEOL;
-	}
-	else {
-	    // skip to end
-	    linep += i;
-	    return IHREAL;
-	}
+    i = 0;
+    // try a number
+    if (sscanf(linep, "%lf%n", &aaitem, &i) > 0) {
+	// skip to end
+	linep += i;
+	return IHREAL;
     }
     // Treat as alpha
     cp = citem;

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-10-02 14:47:33 UTC (rev 650)
+++ trunk/src/sst.h	2006-10-02 17:13:02 UTC (rev 651)
@@ -302,7 +302,7 @@
 
 /* the following global state doesn't need to be saved */
 extern char *device[NDEVICES];
-extern char *systnames[NINHAB + 1];
+extern char *systnames[NINHAB];
 extern int iscore, iskill; // Common PLAQ
 extern double perdate;
 extern double aaitem;
@@ -390,8 +390,7 @@
 extern void moveklings(void);
 extern void torpedo(double, double, coord, double *, int, int);
 extern void huh(void);
-extern void pause_reset(void);
-extern void pause_game(bool);
+extern void announce(void);
 extern void nova(coord);
 extern void supernova(bool, coord *);
 extern void supercommander(void);
@@ -421,7 +420,7 @@
 extern void commandhook(char *, bool);
 extern void makechart(void);
 extern coord newkling(int);
-#if BSD_BUG_FOR_BUG
+#ifdef BSD_BUG_FOR_BUG
 extern void visual(void);
 #endif
 



From stsp at mail.berlios.de  Mon Oct  2 19:16:20 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Mon, 2 Oct 2006 19:16:20 +0200
Subject: [Sst-commit-watch] r652 - trunk
Message-ID: <200610021716.k92HGKhZ023489@sheep.berlios.de>

Author: stsp
Date: 2006-10-02 19:16:19 +0200 (Mon, 02 Oct 2006)
New Revision: 652

Modified:
   trunk/Makefile.am
   trunk/Makefile.in
Log:
oops, revert ocasional change

Modified: trunk/Makefile.am
===================================================================
--- trunk/Makefile.am	2006-10-02 17:13:02 UTC (rev 651)
+++ trunk/Makefile.am	2006-10-02 17:16:19 UTC (rev 652)
@@ -12,9 +12,6 @@
 	rm -f `find . -name *~`
 	rm -f src/include/config.h.in
 
-distclean-local:
-	rm -rf autom4te*.cache
-
 clean-local:
 	rm -rf autom4te*.cache
 

Modified: trunk/Makefile.in
===================================================================
--- trunk/Makefile.in	2006-10-02 17:13:02 UTC (rev 651)
+++ trunk/Makefile.in	2006-10-02 17:16:19 UTC (rev 652)
@@ -526,8 +526,7 @@
 distclean: distclean-recursive
 	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
 	-rm -f Makefile
-distclean-am: clean-am distclean-generic distclean-local \
-	distclean-tags
+distclean-am: clean-am distclean-generic distclean-tags
 
 dvi: dvi-recursive
 
@@ -576,16 +575,15 @@
 	check-am clean clean-generic clean-local clean-recursive ctags \
 	ctags-recursive dist dist-all dist-bzip2 dist-gzip dist-shar \
 	dist-tarZ dist-zip distcheck distclean distclean-generic \
-	distclean-local distclean-recursive distclean-tags \
-	distcleancheck distdir distuninstallcheck dvi dvi-am html \
-	html-am info info-am install install-am install-data \
-	install-data-am install-exec install-exec-am install-info \
-	install-info-am install-man install-strip installcheck \
-	installcheck-am installdirs installdirs-am maintainer-clean \
-	maintainer-clean-generic maintainer-clean-local \
-	maintainer-clean-recursive mostlyclean mostlyclean-generic \
-	mostlyclean-recursive pdf pdf-am ps ps-am tags tags-recursive \
-	uninstall uninstall-am uninstall-info-am
+	distclean-recursive distclean-tags distcleancheck distdir \
+	distuninstallcheck dvi dvi-am html html-am info info-am \
+	install install-am install-data install-data-am install-exec \
+	install-exec-am install-info install-info-am install-man \
+	install-strip installcheck installcheck-am installdirs \
+	installdirs-am maintainer-clean maintainer-clean-generic \
+	maintainer-clean-local maintainer-clean-recursive mostlyclean \
+	mostlyclean-generic mostlyclean-recursive pdf pdf-am ps ps-am \
+	tags tags-recursive uninstall uninstall-am uninstall-info-am
 
 
 maintainer-clean-local:
@@ -595,9 +593,6 @@
 	rm -f `find . -name *~`
 	rm -f src/include/config.h.in
 
-distclean-local:
-	rm -rf autom4te*.cache
-
 clean-local:
 	rm -rf autom4te*.cache
 # Tell versions [3.59,3.63) of GNU make to not export all variables.



From esr at mail.berlios.de  Mon Oct  2 19:17:05 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 2 Oct 2006 19:17:05 +0200
Subject: [Sst-commit-watch] r653 - trunk/src
Message-ID: <200610021717.k92HH5vg023587@sheep.berlios.de>

Author: esr
Date: 2006-10-02 19:17:04 +0200 (Mon, 02 Oct 2006)
New Revision: 653

Modified:
   trunk/src/sst.py
Log:
Eliminate uses of cramlc().


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-02 17:16:19 UTC (rev 652)
+++ trunk/src/sst.py	2006-10-02 17:17:04 UTC (rev 653)
@@ -365,7 +365,6 @@
 def tryexit(look, ienm, loccom, irun):
     # a bad guy attempts to bug out 
     iq = coord()
-
     iq.x = game.quadrant.x+(look.x+(QUADSIZE-1))/QUADSIZE - 1
     iq.y = game.quadrant.y+(look.y+(QUADSIZE-1))/QUADSIZE - 1
     if not VALID_QUADRANT(iq.x,iq.y) or \
@@ -387,12 +386,11 @@
 	if game.kpower[loccom] > 1000.0:
 	    return False
     # print escape message and move out of quadrant.
-    # We know this if either short or long range sensors are working
+    # we know this if either short or long range sensors are working
     if not damaged(DSRSENS) or not damaged(DLRSENS) or \
 	game.condition == docked:
-	crmena(True, ienm, sector, game.ks[loccom])
-	prout(_(" escapes to %s (and regains strength)."),
-	      cramlc(quadrant, iq))
+	crmena(True, ienm, "sector", game.ks[loccom])
+	prout(_(" escapes to Quadrant %s (and regains strength).") % q)
     # handle local matters related to escape 
     game.quad[game.ks[loccom].x][game.ks[loccom].y] = IHDOT
     game.ks[loccom] = game.ks[game.nenhere]
@@ -446,7 +444,7 @@
 # only commanders move. In Expert games, all enemy vessels move if there
 # is a commander present. In Emeritus games all enemy vessels move.
 # 
-# 3. If Enterprise is not docked, an agressive action is taken if enemy
+# 3. If Enterprise is not docked, an aggressive action is taken if enemy
 # forces are 1000 greater than Enterprise.
 # 
 # Agressive action on average cuts the distance between the ship and
@@ -473,11 +471,11 @@
 	nbaddys = game.comhere + game.ishere
 
     dist1 = game.kdist[loccom]
-    mdist = dist1 + 0.5; # Nearest integer distance 
+    mdist = int(dist1 + 0.5); # Nearest integer distance 
 
     # If SC, check with spy to see if should hi-tail it 
     if ienm==IHS and \
-	(game.kpower[loccom] <= 500.0 or (game.condition==docked and not damaged(DPHOTON))):
+	(game.kpower[loccom] <= 500.0 or (game.condition=="docked" and not damaged(DPHOTON))):
 	irun = True
 	motion = -QUADSIZE
     else:
@@ -498,7 +496,7 @@
 	    # phasers and photon tubes both out! 
 	    forces += 1000.0
 	motion = 0
-        if forces <= 1000.0 and game.condition != docked: # Typical situation 
+        if forces <= 1000.0 and game.condition != "docked": # Typical situation 
 	    motion = ((forces+200.0*Rand())/150.0) - 5.0
 	else:
             if forces > 1000.0: # Very strong -- move in for kill 
@@ -506,7 +504,7 @@
 	    if game.condition=="docked" and (game.options & OPTION_BASE): # protected by base -- back off ! 
 		motion -= game.skill*(2.0-square(Rand()))
 	if idebug:
-	    proutn("=== MOTION = %d, FORCES = %1.2f, ", motion, forces)
+	    proutn("=== MOTION = %d, FORCES = %1.2f, " % (motion, forces))
 	# don't move if no motion 
 	if motion==0:
 	    return
@@ -528,7 +526,7 @@
     if nsteps < 1:
 	nsteps = 1; # This shouldn't be necessary 
     if idebug:
-	proutn("NSTEPS = %d:", nsteps)
+	proutn("NSTEPS = %d:" % nsteps)
     # Compute preferred values of delta X and Y 
     mx = game.sector.x - com.x
     my = game.sector.y - com.y
@@ -550,7 +548,7 @@
     # main move loop 
     for ll in range(nsteps):
 	if idebug:
-	    proutn(" %d", ll+1)
+	    proutn(" %d" % (ll+1))
 	# Check if preferred position available 
 	look.x = next.x + mx
 	look.y = next.y + my
@@ -599,7 +597,7 @@
 	if success:
 	    next = look
 	    if idebug:
-		proutn(cramlc(neither, next))
+		proutn(`next`)
 	else:
 	    break; # done early 
 	
@@ -615,22 +613,19 @@
 	if not damaged(DSRSENS) or game.condition == docked:
 	    proutn("***")
 	    cramen(ienm)
-	    proutn(_(" from %s"), cramlc(2, com))
+	    proutn(_(" from Sector %s") % com)
 	    if game.kdist[loccom] < dist1:
 		proutn(_(" advances to "))
 	    else:
 		proutn(_(" retreats to "))
-	    prout(cramlc(sector, next))
+	    prout("Sector %s." % next)
 
 def moveklings():
     # Klingon tactical movement 
-    w = coord(); 
-
     if idebug:
 	prout("== MOVCOM")
-
     # Figure out which Klingon is the commander (or Supercommander)
-    #   and do move
+    # and do move
     if game.comhere:
 	for i in range(1, game.nenhere+1):
 	    w = game.ks[i]
@@ -643,7 +638,7 @@
 	    if game.quad[w.x][w.y] == IHS:
 		movebaddy(w, i, IHS)
 		break
-    # if skill level is high, move other Klingons and Romulans too!
+    # If skill level is high, move other Klingons and Romulans too!
     # Move these last so they can base their actions on what the
     # commander(s) do.
     if game.skill >= SKILL_EXPERT and (game.options & OPTION_MVBADDY):
@@ -655,7 +650,6 @@
 
 def movescom(iq, avoid):
     # commander movement helper 
-
     if same(iq, game.quadrant) or not VALID_QUADRANT(iq.x, iq.y) or \
 	game.state.galaxy[iq.x][iq.y].supernova or \
 	game.state.galaxy[iq.x][iq.y].klingons > MAXKLQUAD-1:
@@ -701,32 +695,27 @@
 	    if not damaged(DRADIO) or game.condition == docked:
 		pause_game(True)
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"))
-		proutn(_("   a planet in "))
-		proutn(cramlc(quadrant, game.state.kscmdr))
-		prout(_(" has been destroyed"))
+		proutn(_("   a planet in Quadrant %s has been destroyed") % game.state.kscmdr)
 		prout(_("   by the Super-commander.\""))
 	    break
     return False; # looks good! 
 			
 def supercommander():
     # move the Super Commander 
-    iq = coord(); sc = coord(); ibq = coord()
+    iq = coord(); sc = coord(); ibq = coord(); idelta = coord()
     basetbl = []
-
     if idebug:
 	prout("== SUPERCOMMANDER")
-
     # Decide on being active or passive 
     avoid = ((game.incom - game.state.remcom + game.inkling - game.state.remkl)/(game.state.date+0.01-game.indate) < 0.1*game.skill*(game.skill+1.0) or \
 	    (game.state.date-game.indate) < 3.0)
     if not game.iscate and avoid:
 	# compute move away from Enterprise 
-	ideltax = game.state.kscmdr.x-game.quadrant.x
-	ideltay = game.state.kscmdr.y-game.quadrant.y
-	if math.sqrt(ideltax*ideltax+ideltay*ideltay) > 2.0:
+	idelta = game.state.kscmdr-game.quadrant
+	if math.sqrt(idelta.x*idelta.x+idelta.y*idelta.y) > 2.0:
 	    # circulate in space 
-	    ideltax = game.state.kscmdr.y-game.quadrant.y
-	    ideltay = game.quadrant.x-game.state.kscmdr.x
+	    idelta.x = game.state.kscmdr.y-game.quadrant.y
+	    idelta.y = game.quadrant.x-game.state.kscmdr.x
     else:
 	# compute distances to starbases 
 	if game.state.rembase <= 0:
@@ -741,7 +730,6 @@
 	# look for nearest base without a commander, no Enterprise, and
         # without too many Klingons, and not already under attack. 
 	ifindit = iwhichb = 0
-
 	for i2 in range(1, game.state.rembase+1):
 	    i = basetbl[i2][0];	# bug in original had it not finding nearest
 	    ibq = game.state.baseq[i]
@@ -764,26 +752,18 @@
 	    return; # Nothing suitable -- wait until next time
 	ibq = game.state.baseq[iwhichb]
 	# decide how to move toward base 
-	ideltax = ibq.x - game.state.kscmdr.x
-	ideltay = ibq.y - game.state.kscmdr.y
-    # Maximum movement is 1 quadrant in either or both axis 
-    if ideltax > 1:
-	ideltax = 1
-    if ideltax < -1:
-	ideltax = -1
-    if ideltay > 1:
-	ideltay = 1
-    if ideltay < -1:
-	ideltay = -1
-
-    # try moving in both x and y directions 
-    iq.x = game.state.kscmdr.x + ideltax
-    iq.y = game.state.kscmdr.y + ideltax
+	idelta = ibq - game.state.kscmdr
+    # Maximum movement is 1 quadrant in either or both axes 
+    idelta = idelta.sgn()
+    # try moving in both x and y directions
+    # there was what looked like a bug in the Almy C code here,
+    # but it might be this translation is just wrong.
+    iq = game.state.kscmdr + idelta
     if movescom(iq, avoid):
 	# failed -- try some other maneuvers 
-	if ideltax==0 or ideltay==0:
+	if idelta.x==0 or idelta.y==0:
 	    # attempt angle move 
-	    if ideltax != 0:
+	    if idelta.x != 0:
 		iq.y = game.state.kscmdr.y + 1
 		if movescom(iq, avoid):
 		    iq.y = game.state.kscmdr.y - 1
@@ -797,7 +777,7 @@
 	    # try moving just in x or y 
 	    iq.y = game.state.kscmdr.y
 	    if movescom(iq, avoid):
-		iq.y = game.state.kscmdr.y + ideltay
+		iq.y = game.state.kscmdr.y + idelta.y
 		iq.x = game.state.kscmdr.x
 		movescom(iq, avoid)
     # check for a base 
@@ -819,12 +799,11 @@
 		    return; # no warning 
 		game.iseenit = True
 		pause_game(True)
-		proutn(_("Lt. Uhura-  \"Captain, the starbase in "))
-		proutn(cramlc(quadrant, game.state.kscmdr))
-		skip(1)
+		prout(_("Lt. Uhura-  \"Captain, the starbase in Quadrant %s") \
+                      % game.state.kscmdr)
 		prout(_("   reports that it is under attack from the Klingon Super-commander."))
-		proutn(_("   It can survive until stardate %d.\""),
-		       int(scheduled(FSCDBAS)))
+		proutn(_("   It can survive until stardate %d.\"") \
+                       % int(scheduled(FSCDBAS)))
 		if not game.resting:
 		    return
 		prout(_("Mr. Spock-  \"Captain, shall we cancel the rest period?\""))
@@ -841,9 +820,7 @@
 	return
     pause_game(True)
     prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"))
-    proutn(_("   the Super-commander is in "))
-    proutn(cramlc(quadrant, game.state.kscmdr))
-    prout(".\"")
+    proutn(_("   the Super-commander is in Quadrant %s,") % game.state.kscmdr)
     return;
 
 def movetholian():
@@ -899,7 +876,7 @@
     # All plugged up -- Tholian splits 
     game.quad[game.tholian.x][game.tholian.y]=IHWEB
     dropin(IHBLANK)
-    crmena(True, IHT, sector, game.tholian)
+    crmena(True, IHT, "sector", game.tholian)
     prout(_(" completes web."))
     game.ithere = False
     game.nenhere -= 1



From stsp at mail.berlios.de  Mon Oct  2 21:03:33 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Mon, 2 Oct 2006 21:03:33 +0200
Subject: [Sst-commit-watch] r654 - in trunk: . po src
Message-ID: <200610021903.k92J3X7T008328@sheep.berlios.de>

Author: stsp
Date: 2006-10-02 21:03:33 +0200 (Mon, 02 Oct 2006)
New Revision: 654

Modified:
   trunk/TODO
   trunk/po/ru.po
   trunk/src/planets.c
Log:
adjustments

Modified: trunk/TODO
===================================================================
--- trunk/TODO	2006-10-02 17:17:04 UTC (rev 653)
+++ trunk/TODO	2006-10-02 19:03:33 UTC (rev 654)
@@ -7,7 +7,7 @@
 * Complete, polish, improve, complete, polish, improve the
   gettextization and the translation! Right now it just sucks.
 
-* Add the attacked inhabited planets to the report
+* Add the attacked inhabited planets to the status report
 
 
 Long-term items:

Modified: trunk/po/ru.po
===================================================================
--- trunk/po/ru.po	2006-10-02 17:17:04 UTC (rev 653)
+++ trunk/po/ru.po	2006-10-02 19:03:33 UTC (rev 654)
@@ -11,7 +11,7 @@
 msgstr ""
 "Project-Id-Version: sst 2.0\n"
 "Report-Msgid-Bugs-To: stsp\n"
-"POT-Creation-Date: 2006-10-02 16:06+0400\n"
+"POT-Creation-Date: 2006-10-02 23:04+0400\n"
 "PO-Revision-Date: 2006-09-15 11:01+0400\n"
 "Last-Translator: Stas Sergeev <stsp at aknet.ru>\n"
 "Language-Team: Russian <ru at li.org>\n"
@@ -162,7 +162,7 @@
 msgstr "??????? ??????? ?? ??????.\""
 
 #: src/battle.c:199 src/battle.c:999 src/events.c:875 src/moving.c:144
-#: src/moving.c:750 src/planets.c:491
+#: src/moving.c:750 src/planets.c:492
 msgid "***RED ALERT!  RED ALERT!"
 msgstr "***???????!  ???????!"
 
@@ -762,11 +762,11 @@
 msgid "Emergency override attempts t"
 msgstr "????????? ???????? ?"
 
-#: src/events.c:948
+#: src/events.c:947
 msgid "Lucky you!"
 msgstr "???????!"
 
-#: src/events.c:949
+#: src/events.c:948
 #, c-format
 msgid "A supernova in %s has just destroyed the last Klingons."
 msgstr "?????????? ? %s ??? ??? ?????????? ????????? ?????????."
@@ -2035,7 +2035,7 @@
 msgstr "  ???????, ?? ?? ???????? ???? ?????? ?? ?????????."
 
 #: src/planets.c:158
-msgid "  However, the Galileo shuttle craft may still be on a surface."
+msgid "  Although the Galileo shuttle craft may still be on a surface."
 msgstr "  ???? ?????? ??????? ????? ???? ??? ??? ?? ???????????."
 
 #: src/planets.c:169
@@ -2162,11 +2162,11 @@
 msgid "  \"Activating now! - - No good!  It's***"
 msgstr "  \"??? ????????! - - ?????!  ??***"
 
-#: src/planets.c:289 src/planets.c:495
+#: src/planets.c:289 src/planets.c:496
 msgid "***RED ALERT!  RED A*L********************************"
 msgstr "***???????! ???*??***********************************"
 
-#: src/planets.c:292 src/planets.c:498
+#: src/planets.c:292 src/planets.c:499
 msgid "******************   KA-BOOM!!!!   *******************"
 msgstr "******************   ??-???!!!!    ********************"
 
@@ -2247,7 +2247,7 @@
 msgid " boards Galileo and swoops toward planet surface."
 msgstr " ??????? ? ??????? ? ???????????? ? ??????????? ???????."
 
-#: src/planets.c:379 src/planets.c:401 src/planets.c:420
+#: src/planets.c:379 src/planets.c:402 src/planets.c:421
 msgid "Trip complete."
 msgstr "????? ???????."
 
@@ -2263,159 +2263,159 @@
 msgid "The short hop begins . . ."
 msgstr "??????? ???????? ??????? . . ."
 
-#: src/planets.c:408
+#: src/planets.c:409
 msgid "Mining party assembles in the hangar deck,"
 msgstr "?????? ?????????? ????????? ? ??????,"
 
-#: src/planets.c:409
+#: src/planets.c:410
 msgid "ready to board the shuttle craft \"Galileo\"."
 msgstr "??? ?????? ??????? ? ?????? \"???????\"."
 
-#: src/planets.c:411
+#: src/planets.c:412
 msgid "The hangar doors open; the trip begins."
 msgstr "????? ?????? ???????; ????? ???????."
 
-#: src/planets.c:434
+#: src/planets.c:435
 msgid "Ye Faerie Queene has no death ray."
 msgstr "?? ????????? ???????? ??? ???? ??????."
 
-#: src/planets.c:438
+#: src/planets.c:439
 msgid "Sulu-  \"But Sir, there are no enemies in this quadrant.\""
 msgstr "????- \"?? ???, ? ???? ????????? ??? ??????.\""
 
-#: src/planets.c:442
+#: src/planets.c:443
 msgid "Death Ray is damaged."
 msgstr "??? ?????? ?????????."
 
-#: src/planets.c:445
+#: src/planets.c:446
 msgid "Spock-  \"Captain, the 'Experimental Death Ray'"
 msgstr "????- \"???????, '????????????????? ??? ??????'"
 
-#: src/planets.c:446
+#: src/planets.c:447
 msgid "  is highly unpredictible.  Considering the alternatives,"
 msgstr "  ???????? ?????????????.  ??????? ??? ????????????,"
 
-#: src/planets.c:447
+#: src/planets.c:448
 msgid "  are you sure this is wise?\" "
 msgstr " ?? ??????? ??? ??? ????????\" "
 
-#: src/planets.c:450
+#: src/planets.c:451
 msgid "Spock-  \"Acknowledged.\""
 msgstr "????- \"??? ?????.\""
 
-#: src/planets.c:453
+#: src/planets.c:454
 msgid "WHOOEE ... WHOOEE ... WHOOEE ... WHOOEE"
 msgstr ""
 
-#: src/planets.c:455
+#: src/planets.c:456
 msgid "Crew scrambles in emergency preparation."
 msgstr "??????? ???????????, ???????? ??????? ?????????????."
 
-#: src/planets.c:456
+#: src/planets.c:457
 msgid "Spock and Scotty ready the death ray and"
 msgstr "???? ? ?????? ???????? ??? ?????? ?"
 
-#: src/planets.c:457
+#: src/planets.c:458
 msgid "prepare to channel all ship's power to the device."
 msgstr "?????? ? ?????? ???? ??????? ??????? ?? ?????????."
 
-#: src/planets.c:459
+#: src/planets.c:460
 msgid "Spock-  \"Preparations complete, sir.\""
 msgstr "????- \"????????????? ????????, ???.\""
 
-#: src/planets.c:460
+#: src/planets.c:461
 msgid "Kirk-  \"Engage!\""
 msgstr "????- \"???!\""
 
-#: src/planets.c:462
+#: src/planets.c:463
 msgid "WHIRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"
 msgstr ""
 
-#: src/planets.c:468 src/planets.c:489
+#: src/planets.c:469 src/planets.c:490
 msgid "Sulu- \"Captain!  It's working!\""
 msgstr "????- \"???????!  ?? ????????!\""
 
-#: src/planets.c:472
+#: src/planets.c:473
 msgid "Ensign Chekov-  \"Congratulations, Captain!\""
 msgstr "????????? ?????- \"??????????, ???????.\""
 
-#: src/planets.c:476
+#: src/planets.c:477
 msgid "Spock-  \"Captain, I believe the `Experimental Death Ray'"
 msgstr "????- \"???????, ? ????????, ??? '????????????????? ??? ??????'"
 
-#: src/planets.c:478
+#: src/planets.c:479
 msgid "   is still operational.\""
 msgstr "   ??? ??? ????????.\""
 
-#: src/planets.c:481
+#: src/planets.c:482
 msgid "   has been rendered nonfunctional.\""
 msgstr "   ?????? ? ??????????.\""
 
-#: src/planets.c:493
+#: src/planets.c:494
 msgid "***MATTER-ANTIMATTER IMPLOSION IMMINENT!"
 msgstr "***???????? ??????? ??????? ? ????????????!"
 
-#: src/planets.c:504
+#: src/planets.c:505
 msgid "Sulu- \"Captain!  Yagabandaghangrapl, brachriigringlanbla!\""
 msgstr "????- \"???????!  ?????????, ????????, ???????-?????????!\""
 
-#: src/planets.c:506
+#: src/planets.c:507
 msgid "Lt. Uhura-  \"Graaeek!  Graaeek!\""
 msgstr "??. ?????- \"??????!  ????!\""
 
-#: src/planets.c:508
+#: src/planets.c:509
 msgid "Spock-  \"Fascinating!  . . . All humans aboard"
 msgstr "????- \"??????????!  . . . ??? ???? ?? ?????"
 
-#: src/planets.c:509
+#: src/planets.c:510
 msgid "  have apparently been transformed into strange mutations."
 msgstr "  ???? ??????????? ?????-?? ???????? ???????."
 
-#: src/planets.c:510
+#: src/planets.c:511
 msgid "  Vulcans do not seem to be affected."
 msgstr "  ?????????, ??????, ?????? ?? ??????????."
 
-#: src/planets.c:512
+#: src/planets.c:513
 msgid "Kirk-  \"Raauch!  Raauch!\""
 msgstr "????- \"???! ???! ???-??!"
 
-#: src/planets.c:518
+#: src/planets.c:519
 msgid "Sulu- \"Captain!  It's   --WHAT?!?!\""
 msgstr "????- \"???????!  ??   --??????!\""
 
-#: src/planets.c:520
+#: src/planets.c:521
 msgid "Spock-  \"I believe the word is"
 msgstr "????- \"??????, ?????"
 
-#: src/planets.c:521
+#: src/planets.c:522
 msgid " *ASTONISHING*"
 msgstr " *???????????*"
 
-#: src/planets.c:522
+#: src/planets.c:523
 msgid " Mr. Sulu."
 msgstr " ?????? ????."
 
-#: src/planets.c:527
+#: src/planets.c:528
 msgid "  Captain, our quadrant is now infested with"
 msgstr "  ???????, ??? ???????? ?????? ???? ?????"
 
-#: src/planets.c:528
+#: src/planets.c:529
 msgid " - - - - - -  *THINGS*."
 msgstr " - - - - - -  *??????*."
 
-#: src/planets.c:530
+#: src/planets.c:531
 msgid "  I have no logical explanation.\""
 msgstr "  ? ???? ??? ????????? ??????????.\""
 
-#: src/planets.c:533
+#: src/planets.c:534
 msgid "Sulu- \"Captain!  The Death Ray is creating tribbles!\""
 msgstr "????- \"???????!   ??? ?????? ?????-?? ??????? ????????!\""
 
-#: src/planets.c:535
+#: src/planets.c:536
 msgid "Scotty-  \"There are so many tribbles down here"
 msgstr "??????-  \"??? ??????? ???? ???????? ??????"
 
-#: src/planets.c:536
+#: src/planets.c:537
 msgid "  in Engineering, we can't move for 'em, Captain.\""
 msgstr "  ? ??????????? ??????, ??? ?? ?? ????? ? ???? ???????????, ???????.\""
 
@@ -2702,7 +2702,7 @@
 msgid "ACTIVE"
 msgstr "????????"
 
-#: src/reports.c:319 src/setup.c:160
+#: src/reports.c:319 src/setup.c:159
 msgid "Life Support"
 msgstr "??????????"
 
@@ -2739,7 +2739,7 @@
 msgid " %d%% %.1f units"
 msgstr " %d%% %.1f ??????"
 
-#: src/reports.c:345 src/setup.c:163
+#: src/reports.c:345 src/setup.c:162
 msgid "Shields"
 msgstr "??????"
 
@@ -2887,348 +2887,348 @@
 msgid "Game file format is bad, should begin with "
 msgstr "???? ? ????? ????????, ?? ?????? ??? ?????????? ? "
 
-#: src/setup.c:109
+#: src/setup.c:108
 msgid "Andoria (Fesoan)"
 msgstr ""
 
-#: src/setup.c:110
+#: src/setup.c:109
 msgid "Tellar Prime (Miracht)"
 msgstr ""
 
-#: src/setup.c:111
+#: src/setup.c:110
 msgid "Vulcan (T'Khasi)"
 msgstr ""
 
-#: src/setup.c:112
+#: src/setup.c:111
 msgid "Medusa"
 msgstr "??????"
 
-#: src/setup.c:113
+#: src/setup.c:112
 msgid "Argelius II (Nelphia)"
 msgstr ""
 
-#: src/setup.c:114
+#: src/setup.c:113
 msgid "Ardana"
 msgstr "??????"
 
-#: src/setup.c:115
+#: src/setup.c:114
 msgid "Catulla (Cendo-Prae)"
 msgstr ""
 
-#: src/setup.c:116
+#: src/setup.c:115
 msgid "Gideon"
 msgstr "??????"
 
-#: src/setup.c:117
+#: src/setup.c:116
 msgid "Aldebaran III"
 msgstr "?????????? 3"
 
-#: src/setup.c:118
+#: src/setup.c:117
 msgid "Alpha Majoris I"
 msgstr ""
 
-#: src/setup.c:119
+#: src/setup.c:118
 msgid "Altair IV"
 msgstr "??????? 4"
 
-#: src/setup.c:120
+#: src/setup.c:119
 msgid "Ariannus"
 msgstr ""
 
-#: src/setup.c:121
+#: src/setup.c:120
 msgid "Benecia"
 msgstr ""
 
-#: src/setup.c:122
+#: src/setup.c:121
 msgid "Beta Niobe I (Sarpeidon)"
 msgstr ""
 
-#: src/setup.c:123
+#: src/setup.c:122
 msgid "Alpha Carinae II"
 msgstr ""
 
-#: src/setup.c:124
+#: src/setup.c:123
 msgid "Capella IV (Kohath)"
 msgstr ""
 
-#: src/setup.c:125
+#: src/setup.c:124
 msgid "Daran V"
 msgstr ""
 
-#: src/setup.c:126
+#: src/setup.c:125
 msgid "Deneb II"
 msgstr ""
 
-#: src/setup.c:127
+#: src/setup.c:126
 msgid "Eminiar VII"
 msgstr ""
 
-#: src/setup.c:128
+#: src/setup.c:127
 msgid "Gamma Canaris IV"
 msgstr ""
 
-#: src/setup.c:129
+#: src/setup.c:128
 msgid "Gamma Tranguli VI (Vaalel)"
 msgstr ""
 
-#: src/setup.c:130
+#: src/setup.c:129
 msgid "Ingraham B"
 msgstr ""
 
-#: src/setup.c:131
+#: src/setup.c:130
 msgid "Janus IV"
 msgstr ""
 
-#: src/setup.c:132
+#: src/setup.c:131
 msgid "Makus III"
 msgstr ""
 
-#: src/setup.c:133
+#: src/setup.c:132
 msgid "Marcos XII"
 msgstr ""
 
-#: src/setup.c:134
+#: src/setup.c:133
 msgid "Omega IV"
 msgstr "????? 4"
 
-#: src/setup.c:135
+#: src/setup.c:134
 msgid "Regulus V"
 msgstr ""
 
-#: src/setup.c:136
+#: src/setup.c:135
 msgid "Deneva"
 msgstr ""
 
-#: src/setup.c:138
+#: src/setup.c:137
 msgid "Rigel II"
 msgstr ""
 
-#: src/setup.c:139
+#: src/setup.c:138
 msgid "Beta III"
 msgstr "???? 3"
 
-#: src/setup.c:140
+#: src/setup.c:139
 msgid "Triacus"
 msgstr ""
 
-#: src/setup.c:141
+#: src/setup.c:140
 msgid "Exo III"
 msgstr ""
 
-#: src/setup.c:144
+#: src/setup.c:143
 msgid "Hansen's Planet"
 msgstr ""
 
-#: src/setup.c:145
+#: src/setup.c:144
 msgid "Taurus IV"
 msgstr ""
 
-#: src/setup.c:146
+#: src/setup.c:145
 msgid "Antos IV (Doraphane)"
 msgstr ""
 
-#: src/setup.c:147
+#: src/setup.c:146
 msgid "Izar"
 msgstr ""
 
-#: src/setup.c:148
+#: src/setup.c:147
 msgid "Tiburon"
 msgstr ""
 
-#: src/setup.c:149
+#: src/setup.c:148
 msgid "Merak II"
 msgstr ""
 
-#: src/setup.c:150
+#: src/setup.c:149
 msgid "Coridan (Desotriana)"
 msgstr ""
 
-#: src/setup.c:151
+#: src/setup.c:150
 msgid "Iotia"
 msgstr "?????"
 
-#: src/setup.c:156
+#: src/setup.c:155
 msgid "S. R. Sensors"
 msgstr "??????? ?. ?."
 
-#: src/setup.c:157
+#: src/setup.c:156
 msgid "L. R. Sensors"
 msgstr "??????? ?. ?."
 
-#: src/setup.c:158
+#: src/setup.c:157
 msgid "Phasers"
 msgstr "??????"
 
-#: src/setup.c:159
+#: src/setup.c:158
 msgid "Photon Tubes"
 msgstr "???????? ?????"
 
-#: src/setup.c:161
+#: src/setup.c:160
 msgid "Warp Engines"
 msgstr "????????? ????"
 
-#: src/setup.c:162
+#: src/setup.c:161
 msgid "Impulse Engines"
 msgstr "?????????? ????"
 
-#: src/setup.c:164
+#: src/setup.c:163
 msgid "Subspace Radio"
 msgstr "????????? ?????"
 
-#: src/setup.c:165
+#: src/setup.c:164
 msgid "Shuttle Craft"
 msgstr "??????"
 
-#: src/setup.c:166
+#: src/setup.c:165
 msgid "Computer"
 msgstr "?????????"
 
-#: src/setup.c:167
+#: src/setup.c:166
 msgid "Navigation System"
 msgstr "???? ?????????"
 
-#: src/setup.c:168
+#: src/setup.c:167
 msgid "Transporter"
 msgstr "???????????"
 
-#: src/setup.c:169
+#: src/setup.c:168
 msgid "Shield Control"
 msgstr "?????? ???????"
 
-#: src/setup.c:170
+#: src/setup.c:169
 msgid "Death Ray"
 msgstr "??? ??????"
 
-#: src/setup.c:171
+#: src/setup.c:170
 msgid "D. S. Probe"
 msgstr "?. ?. ??????"
 
-#: src/setup.c:376
+#: src/setup.c:375
 #, c-format
 msgid "It is stardate %d. The Federation is being attacked by"
 msgstr "??????? %d ?????. ????????? ?????????"
 
-#: src/setup.c:378
+#: src/setup.c:377
 msgid "a deadly Klingon invasion force. As captain of the United"
 msgstr "???????????? ???????????? ??????????. ??? ???????"
 
-#: src/setup.c:379
+#: src/setup.c:378
 msgid "Starship U.S.S. Enterprise, it is your mission to seek out"
 msgstr "?????????? ??????????, ?? ?????? ?????"
 
-#: src/setup.c:380
+#: src/setup.c:379
 #, c-format
 msgid "and destroy this invasion force of %d battle cruisers."
 msgstr "? ?????????? ??? ?????????? ?????? ? ??????? %d ?????? ?????????."
 
-#: src/setup.c:382
+#: src/setup.c:381
 #, c-format
 msgid "You have an initial allotment of %d stardates to complete"
 msgstr "? ??? ???? %d ???? ????? ?????????"
 
-#: src/setup.c:383
+#: src/setup.c:382
 msgid "your mission.  As you proceed you may be given more time."
 msgstr "??? ??????.  ?? ???? ???? ??? ????? ???? ??? ???????."
 
-#: src/setup.c:385
+#: src/setup.c:384
 #, c-format
 msgid "You will have %d supporting starbases."
 msgstr "? ??? ????? %d ???."
 
-#: src/setup.c:386
+#: src/setup.c:385
 msgid "Starbase locations-  "
 msgstr "?????????? ???-  "
 
-#: src/setup.c:389
+#: src/setup.c:388
 #, c-format
 msgid "Stardate %d."
 msgstr "????? %d."
 
-#: src/setup.c:391
+#: src/setup.c:390
 #, c-format
 msgid "%d Klingons."
 msgstr "%d ?????????."
 
-#: src/setup.c:392
+#: src/setup.c:391
 msgid "An unknown number of Romulans."
 msgstr "????????? ???????."
 
-#: src/setup.c:394
+#: src/setup.c:393
 msgid "And one (GULP) Super-Commander."
 msgstr "? ???? (??!) ????-??? ?????????."
 
-#: src/setup.c:395
+#: src/setup.c:394
 #, c-format
 msgid "%d stardates."
 msgstr "%d ????."
 
-#: src/setup.c:396
+#: src/setup.c:395
 #, c-format
 msgid "%d starbases in "
 msgstr "%d ??? ? "
 
-#: src/setup.c:403
+#: src/setup.c:402
 msgid "The Enterprise is currently in "
 msgstr "?????????? ?????? ? "
 
-#: src/setup.c:408
+#: src/setup.c:407
 msgid "Good Luck!"
 msgstr "?????!"
 
-#: src/setup.c:410
+#: src/setup.c:409
 msgid "  YOU'LL NEED IT."
 msgstr "  ??? ??? ???????????."
 
-#: src/setup.c:428
+#: src/setup.c:427
 msgid "Would you like a regular, tournament, or saved game? "
 msgstr "?????? ??????? (r), ????????? (t), ??? ??????????? (s) ????? "
 
-#: src/setup.c:434
+#: src/setup.c:433
 msgid "Type in tournament number-"
 msgstr "??????? ????? ???????-"
 
-#: src/setup.c:459 src/setup.c:483 src/setup.c:515
+#: src/setup.c:458 src/setup.c:482 src/setup.c:514
 msgid "What is \""
 msgstr "??? ?? \""
 
-#: src/setup.c:491
+#: src/setup.c:490
 msgid "Would you like a Short, Medium, or Long game? "
 msgstr "?????? ???????? (s), ??????? (m), ??? ??????? (l) ????? "
 
-#: src/setup.c:493
+#: src/setup.c:492
 msgid "Are you a Novice, Fair, Good, Expert, or Emeritus player? "
 msgstr ""
 "?? ??????? (n), ??????? (f), ?????? (g), ?????????? (e), ??? ????????? (em)? "
 
-#: src/setup.c:499
+#: src/setup.c:498
 msgid "Choose your game style (or just press enter): "
 msgstr "???????? ????? ???? (??? ??????? ????): "
 
-#: src/setup.c:680
+#: src/setup.c:679
 msgid "LT. Uhura- \"Captain, an urgent message."
 msgstr "??. ?????- \"???????, ??????? ?????????."
 
-#: src/setup.c:681
+#: src/setup.c:680
 msgid "  I'll put it on audio.\"  CLICK"
 msgstr "  ? ?????? ??? ?? ????????????????.\"  ????"
 
-#: src/setup.c:683
+#: src/setup.c:682
 msgid "INTRUDER! YOU HAVE VIOLATED THE ROMULAN NEUTRAL ZONE."
 msgstr "?????! ?? ??????? ??????? ?????????? ???????."
 
-#: src/setup.c:684
+#: src/setup.c:683
 msgid "LEAVE AT ONCE, OR YOU WILL BE DESTROYED!"
 msgstr "?????? ??????????, ??? ?????? ?????????!"
 
-#: src/setup.c:701
+#: src/setup.c:700
 msgid "Mr. Spock- \"Captain, this is most unusual."
 msgstr "?????? ????- \"???????, ??? ???-?? ????? ?????????."
 
-#: src/setup.c:702
+#: src/setup.c:701
 msgid "    Please examine your short-range scan.\""
 msgstr "    ?????????? ?????????? ?????????? ???????? ????????????.\""
 
-#: src/setup.c:798
+#: src/setup.c:797
 msgid "Please type in a secret password- "
 msgstr "?????????? ???????? ??????- "
 

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-10-02 17:17:04 UTC (rev 653)
+++ trunk/src/planets.c	2006-10-02 19:03:33 UTC (rev 654)
@@ -155,7 +155,7 @@
 	    prout(_("  Captain, we have enough energy only to transport you down to"));
 	    prout(_("  the planet, but there wouldn't be an energy for the trip back."));
 	    if (game.state.planets[game.iplnet].known == shuttle_down)
-		prout(_("  However, the Galileo shuttle craft may still be on a surface."));
+		prout(_("  Although the Galileo shuttle craft may still be on a surface."));
 	    proutn(_("  Are you sure this is wise?\" "));
 	    if (ja() == false) {
 		chew();



From esr at mail.berlios.de  Tue Oct  3 02:19:54 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 3 Oct 2006 02:19:54 +0200
Subject: [Sst-commit-watch] r655 - trunk/src
Message-ID: <200610030019.k930Jsag027151@sheep.berlios.de>

Author: esr
Date: 2006-10-03 02:19:52 +0200 (Tue, 03 Oct 2006)
New Revision: 655

Modified:
   trunk/src/sst.py
Log:
battle.c incorporated into Python translation.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-02 19:03:33 UTC (rev 654)
+++ trunk/src/sst.py	2006-10-03 00:19:52 UTC (rev 655)
@@ -881,3 +881,1182 @@
     game.ithere = False
     game.nenhere -= 1
     return
+
+# Code from battle.c begins here
+
+def doshield(shraise):
+    # change shield status 
+    action = "NONE"
+    game.ididit = False
+    if shraise:
+	action = "SHUP"
+    else:
+	key = scan()
+	if key == IHALPHA:
+	    if isit("transfer"):
+		action = "NRG"
+	    else:
+		chew()
+		if damaged(DSHIELD):
+		    prout(_("Shields damaged and down."))
+		    return
+		if isit("up"):
+		    action = "SHUP"
+		elif isit("down"):
+		    action = "SHDN"
+	if action=="NONE":
+	    proutn(_("Do you wish to change shield energy? "))
+	    if ja() == True:
+		proutn(_("Energy to transfer to shields- "))
+		action = "NRG"
+	    elif damaged(DSHIELD):
+		prout(_("Shields damaged and down."))
+		return
+	    elif game.shldup:
+		proutn(_("Shields are up. Do you want them down? "))
+		if ja() == True:
+		    action = "SHDN"
+		else:
+		    chew()
+		    return
+	    else:
+		proutn(_("Shields are down. Do you want them up? "))
+		if ja() == True:
+		    action = "SHUP"
+		else:
+		    chew()
+		    return    
+    if action == "SHUP": # raise shields 
+	if game.shldup:
+	    prout(_("Shields already up."))
+	    return
+	game.shldup = True
+	game.shldchg = True
+	if game.condition != "docked":
+	    game.energy -= 50.0
+	prout(_("Shields raised."))
+	if game.energy <= 0:
+	    skip(1)
+	    prout(_("Shields raising uses up last of energy."))
+	    finish(FNRG)
+	    return
+	game.ididit=True
+	return
+    elif action == "SHDN":
+	if not game.shldup:
+	    prout(_("Shields already down."))
+	    return
+	game.shldup=False
+	game.shldchg=True
+	prout(_("Shields lowered."))
+	game.ididit = True
+	return
+    elif action == "NRG":
+	while scan() != IHREAL:
+	    chew()
+	    proutn(_("Energy to transfer to shields- "))
+	chew()
+	if aaitem==0:
+	    return
+	if aaitem > game.energy:
+	    prout(_("Insufficient ship energy."))
+	    return
+	game.ididit = True
+	if game.shield+aaitem >= game.inshld:
+	    prout(_("Shield energy maximized."))
+	    if game.shield+aaitem > game.inshld:
+		prout(_("Excess energy requested returned to ship energy"))
+	    game.energy -= game.inshld-game.shield
+	    game.shield = game.inshld
+	    return
+	if aaitem < 0.0 and game.energy-aaitem > game.inenrg:
+	    # Prevent shield drain loophole 
+	    skip(1)
+	    prout(_("Engineering to bridge--"))
+	    prout(_("  Scott here. Power circuit problem, Captain."))
+	    prout(_("  I can't drain the shields."))
+	    game.ididit = False
+	    return
+	if game.shield+aaitem < 0:
+	    prout(_("All shield energy transferred to ship."))
+	    game.energy += game.shield
+	    game.shield = 0.0
+	    return
+	proutn(_("Scotty- \""))
+	if aaitem > 0:
+	    prout(_("Transferring energy to shields.\""))
+	else:
+	    prout(_("Draining energy from shields.\""))
+	game.shield += aaitem
+	game.energy -= aaitem
+	return
+
+def randdevice():
+    # choose a device to damage, at random. 
+    #
+    # Quoth Eric Allman in the code of BSD-Trek:
+    # "Under certain conditions you can get a critical hit.  This
+    # sort of hit damages devices.  The probability that a given
+    # device is damaged depends on the device.  Well protected
+    # devices (such as the computer, which is in the core of the
+    # ship and has considerable redundancy) almost never get
+    # damaged, whereas devices which are exposed (such as the
+    # warp engines) or which are particularly delicate (such as
+    # the transporter) have a much higher probability of being
+    # damaged."
+    # 
+    # This is one place where OPTION_PLAIN does not restore the
+    # original behavior, which was equiprobable damage across
+    # all devices.  If we wanted that, we'd return NDEVICES*Rand()
+    # and have done with it.  Also, in the original game, DNAVYS
+    # and DCOMPTR were the same device. 
+    # 
+    # Instead, we use a table of weights similar to the one from BSD Trek.
+    # BSD doesn't have the shuttle, shield controller, death ray, or probes. 
+    # We don't have a cloaking device.  The shuttle got the allocation
+    # for the cloaking device, then we shaved a half-percent off
+    # everything to have some weight to give DSHCTRL/DDRAY/DDSP.
+    # 
+    weights = (
+	105,	# DSRSENS: short range scanners	10.5% 
+	105,	# DLRSENS: long range scanners		10.5% 
+	120,	# DPHASER: phasers			12.0% 
+	120,	# DPHOTON: photon torpedoes		12.0% 
+	25,	# DLIFSUP: life support		 2.5% 
+	65,	# DWARPEN: warp drive			 6.5% 
+	70,	# DIMPULS: impulse engines		 6.5% 
+	145,	# DSHIELD: deflector shields		14.5% 
+	30,	# DRADIO:  subspace radio		 3.0% 
+	45,	# DSHUTTL: shuttle			 4.5% 
+	15,	# DCOMPTR: computer			 1.5% 
+	20,	# NAVCOMP: navigation system		 2.0% 
+	75,	# DTRANSP: transporter			 7.5% 
+	20,	# DSHCTRL: high-speed shield controller 2.0% 
+	10,	# DDRAY: death ray			 1.0% 
+	30,	# DDSP: deep-space probes		 3.0% 
+    )
+    idx = Rand() * 1000.0	# weights must sum to 1000 
+    sum = 0
+    for (i, w) in enumerate(weights):
+	sum += w
+	if idx < sum:
+	    return i
+    return None;	# we should never get here
+
+def ram(ibumpd, ienm, w):
+    # make our ship ram something 
+    prouts(_("***RED ALERT!  RED ALERT!"))
+    skip(1)
+    prout(_("***COLLISION IMMINENT."))
+    skip(2)
+    proutn("***")
+    crmshp()
+    hardness = {IHR:1.5, IHC:2.0, IHS:2.5, IHT:0.5, IHQUEST:4.0}.get(ienm, 1.0)
+    if ibumpd:
+        proutn(_(" rammed by "))
+    else:
+        proutn(_(" rams "))
+    crmena(False, ienm, sector, w)
+    if ibumpd:
+	proutn(_(" (original position)"))
+    skip(1)
+    deadkl(w, ienm, game.sector)
+    proutn("***")
+    crmshp()
+    prout(_(" heavily damaged."))
+    icas = 10.0+20.0*Rand()
+    prout(_("***Sickbay reports %d casualties"), icas)
+    game.casual += icas
+    game.state.crew -= icas
+    #
+    # In the pre-SST2K version, all devices got equiprobably damaged,
+    # which was silly.  Instead, pick up to half the devices at
+    # random according to our weighting table,
+    # 
+    ncrits = Rand() * (NDEVICES/2)
+    for m in range(ncrits):
+	dev = randdevice()
+	if game.damage[dev] < 0:
+	    continue
+	extradm = (10.0*hardness*Rand()+1.0)*game.damfac
+	# Damage for at least time of travel! 
+	game.damage[dev] += game.optime + extradm
+    game.shldup = False
+    prout(_("***Shields are down."))
+    if game.state.remkl + game.state.remcom + game.state.nscrem:
+	pause_game(True)
+	damagereport()
+    else:
+	finish(FWON)
+    return;
+
+def torpedo(course, r, incoming, i, n):
+    # let a photon torpedo fly 
+    iquad = 0
+    shoved = False
+    ac = course + 0.25*r
+    angle = (15.0-ac)*0.5235988
+    bullseye = (15.0 - course)*0.5235988
+    deltax = -math.sin(angle);
+    deltay = math.cos(angle);
+    x = incoming.x; y = incoming.y
+    w = coord(); jw = coord()
+    w.x = w.y = jw.x = jw.y = 0
+    bigger = max(math.fabs(deltax), math.fabs(deltay))
+    deltax /= bigger
+    deltay /= bigger
+    if not damaged(DSRSENS) or game.condition=="docked":
+	setwnd(srscan_window)
+    else: 
+	setwnd(message_window)
+    # Loop to move a single torpedo 
+    for l in range(1, 15+1):
+	x += deltax
+	w.x = x + 0.5
+	y += deltay
+	w.y = y + 0.5
+	if not VALID_SECTOR(w.x, w.y):
+	    break
+	iquad=game.quad[w.x][w.y]
+	tracktorpedo(w, l, i, n, iquad)
+	if iquad==IHDOT:
+	    continue
+	# hit something 
+	setwnd(message_window)
+	if damaged(DSRSENS) and not game.condition=="docked":
+	    skip(1);	# start new line after text track 
+	if iquad in (IHE, IHF): # Hit our ship 
+	    skip(1)
+	    proutn(_("Torpedo hits "))
+	    crmshp()
+	    prout(".")
+	    hit = 700.0 + 100.0*Rand() - \
+		1000.0 * distance(w, incoming) * math.fabs(math.sin(bullseye-angle))
+	    newcnd(); # we're blown out of dock 
+	    # We may be displaced. 
+	    if game.landed or game.condition=="docked":
+		return hit # Cheat if on a planet 
+	    ang = angle + 2.5*(Rand()-0.5)
+	    temp = math.fabs(math.sin(ang))
+	    if math.fabs(math.cos(ang)) > temp:
+		temp = math.fabs(math.cos(ang))
+	    xx = -math.sin(ang)/temp
+	    yy = math.cos(ang)/temp
+	    jw.x=w.x+xx+0.5
+	    jw.y=w.y+yy+0.5
+	    if not VALID_SECTOR(jw.x, jw.y):
+		return hit
+	    if game.quad[jw.x][jw.y]==IHBLANK:
+		finish(FHOLE)
+		return hit
+	    if game.quad[jw.x][jw.y]!=IHDOT:
+		# can't move into object 
+		return hit
+	    game.sector = jw
+	    crmshp()
+	    shoved = True
+	elif iquad in (IHC, IHS): # Hit a commander 
+	    if Rand() <= 0.05:
+		crmena(True, iquad, sector, w)
+		prout(_(" uses anti-photon device;"))
+		prout(_("   torpedo neutralized."))
+		return None
+	elif iquad in (IHR, IHK): # Hit a regular enemy 
+	    # find the enemy 
+	    for ll in range(1, game.nenhere+1):
+		if same(w, game.ks[ll]):
+		    break
+	    kp = math.fabs(game.kpower[ll])
+	    h1 = 700.0 + 100.0*Rand() - \
+		1000.0 * distance(w, incoming) * math.fabs(math.sin(bullseye-angle))
+	    h1 = math.fabs(h1)
+	    if kp < h1:
+		h1 = kp
+            if game.kpower[ll] < 0:
+                game.kpower[ll] -= -h1
+            else:
+                game.kpower[ll] -= h1
+	    if game.kpower[ll] == 0:
+		deadkl(w, iquad, w)
+		return None
+	    crmena(True, iquad, "sector", w)
+	    # If enemy damaged but not destroyed, try to displace 
+	    ang = angle + 2.5*(Rand()-0.5)
+	    temp = math.fabs(math.sin(ang))
+	    if math.fabs(math.cos(ang)) > temp:
+		temp = math.fabs(math.cos(ang))
+	    xx = -math.sin(ang)/temp
+	    yy = math.cos(ang)/temp
+	    jw.x=w.x+xx+0.5
+	    jw.y=w.y+yy+0.5
+	    if not VALID_SECTOR(jw.x, jw.y):
+		prout(_(" damaged but not destroyed."))
+		return
+	    if game.quad[jw.x][jw.y]==IHBLANK:
+		prout(_(" buffeted into black hole."))
+		deadkl(w, iquad, jw)
+		return None
+	    if game.quad[jw.x][jw.y]!=IHDOT:
+		# can't move into object 
+		prout(_(" damaged but not destroyed."))
+		return None
+	    proutn(_(" damaged--"))
+	    game.ks[ll] = jw
+	    shoved = True
+	    break
+	elif iquad == IHB: # Hit a base 
+	    skip(1)
+	    prout(_("***STARBASE DESTROYED.."))
+	    for ll in range(1, game.state.rembase+1):
+		if same(game.state.baseq[ll], game.quadrant):
+		    game.state.baseq[ll]=game.state.baseq[game.state.rembase]
+		    break
+	    game.quad[w.x][w.y]=IHDOT
+	    game.state.rembase -= 1
+	    game.base.x=game.base.y=0
+	    game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase -= 1
+	    game.state.chart[game.quadrant.x][game.quadrant.y].starbase -= 1
+	    game.state.basekl += 1
+	    newcnd()
+	    return None
+	elif iquad == IHP: # Hit a planet 
+	    crmena(True, iquad, sector, w)
+	    prout(_(" destroyed."))
+	    game.state.nplankl += 1
+	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = NOPLANET
+	    game.state.planets[game.iplnet].pclass = destroyed
+	    game.iplnet = 0
+	    invalidate(game.plnet)
+	    game.quad[w.x][w.y] = IHDOT
+	    if game.landed:
+		# captain perishes on planet 
+		finish(FDPLANET)
+	    return None
+	elif iquad == IHW: # Hit an inhabited world -- very bad! 
+	    crmena(True, iquad, sector, w)
+	    prout(_(" destroyed."))
+	    game.state.nworldkl += 1
+	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = NOPLANET
+	    game.state.planets[game.iplnet].pclass = destroyed
+	    game.iplnet = 0
+	    invalidate(game.plnet)
+	    game.quad[w.x][w.y] = IHDOT
+	    if game.landed:
+		# captain perishes on planet 
+		finish(FDPLANET)
+	    prout(_("You have just destroyed an inhabited planet."))
+	    prout(_("Celebratory rallies are being held on the Klingon homeworld."))
+	    return None
+	elif iquad == IHSTAR: # Hit a star 
+	    if Rand() > 0.10:
+		nova(w)
+		return None
+	    crmena(True, IHSTAR, sector, w)
+	    prout(_(" unaffected by photon blast."))
+	    return None
+	elif iquad == IHQUEST: # Hit a thingy 
+	    if not (game.options & OPTION_THINGY) or Rand()>0.7:
+		skip(1)
+		prouts(_("AAAAIIIIEEEEEEEEAAAAAAAAUUUUUGGGGGHHHHHHHHHHHH!!!"))
+		skip(1)
+		prouts(_("    HACK!     HACK!    HACK!        *CHOKE!*  "))
+		skip(1)
+		proutn(_("Mr. Spock-"))
+		prouts(_("  \"Fascinating!\""))
+		skip(1)
+		deadkl(w, iquad, w)
+	    else:
+		#
+		# Stas Sergeev added the possibility that
+		# you can shove the Thingy and piss it off.
+		# It then becomes an enemy and may fire at you.
+		# 
+		iqengry = True
+		shoved = True
+	    return None
+	elif iquad == IHBLANK: # Black hole 
+	    skip(1)
+	    crmena(True, IHBLANK, sector, w)
+	    prout(_(" swallows torpedo."))
+	    return None
+	elif iquad == IHWEB: # hit the web 
+	    skip(1)
+	    prout(_("***Torpedo absorbed by Tholian web."))
+	    return None
+	elif iquad == IHT:  # Hit a Tholian 
+	    h1 = 700.0 + 100.0*Rand() - \
+		1000.0 * distance(w, incoming) * math.fabs(math.sin(bullseye-angle))
+	    h1 = math.fabs(h1)
+	    if h1 >= 600:
+		game.quad[w.x][w.y] = IHDOT
+		game.ithere = False
+		deadkl(w, iquad, w)
+		return None
+	    skip(1)
+	    crmena(True, IHT, sector, w)
+	    if Rand() > 0.05:
+		prout(_(" survives photon blast."))
+		return None
+	    prout(_(" disappears."))
+	    game.quad[w.x][w.y] = IHWEB
+	    game.ithere = False
+	    game.nenhere -= 1
+	    dropin(IHBLANK)
+	    return None
+        else: # Problem!
+	    skip(1)
+	    proutn("Don't know how to handle torpedo collision with ")
+	    crmena(True, iquad, sector, w)
+	    skip(1)
+	    return None
+	break
+    if curwnd!=message_window:
+	setwnd(message_window)
+    if shoved:
+	game.quad[w.x][w.y]=IHDOT
+	game.quad[jw.x][jw.y]=iquad
+	prout(_(" displaced by blast to %s "), cramlc(sector, jw))
+	for ll in range(1, game.nenhere+1):
+	    game.kdist[ll] = game.kavgd[ll] = distance(game.sector,game.ks[ll])
+	sortklings()
+	return None
+    skip(1)
+    prout(_("Torpedo missed."))
+    return None;
+
+def fry(hit):
+    # critical-hit resolution 
+    ktr=1
+    # a critical hit occured 
+    if hit < (275.0-25.0*game.skill)*(1.0+0.5*Rand()):
+	return
+
+    ncrit = 1.0 + hit/(500.0+100.0*Rand())
+    proutn(_("***CRITICAL HIT--"))
+    # Select devices and cause damage
+    cdam = []
+    for loop1 in range(ncrit):
+        while True:
+	    j = randdevice()
+	    # Cheat to prevent shuttle damage unless on ship 
+            if not (game.damage[j]<0.0 or (j==DSHUTTL and game.iscraft != "onship")):
+                break
+	cdam.append(j)
+	extradm = (hit*game.damfac)/(ncrit*(75.0+25.0*Rand()))
+	game.damage[j] += extradm
+	if loop1 > 0:
+            for loop2 in range(loop1):
+                if j == cdam[loop2]:
+                    break
+	    if loop2 < loop1:
+		continue
+	    ktr += 1
+	    if ktr==3:
+		skip(1)
+	    proutn(_(" and "))
+	proutn(device[j])
+    prout(_(" damaged."))
+    if damaged(DSHIELD) and game.shldup:
+	prout(_("***Shields knocked down."))
+	game.shldup=False
+
+def attack(torps_ok):
+    # bad guy attacks us 
+    # torps_ok == false forces use of phasers in an attack 
+    atackd = False; attempt = False; ihurt = False;
+    hitmax=0.0; hittot=0.0; chgfac=1.0
+    jay = coord()
+    where = "neither"
+
+    # game could be over at this point, check 
+    if game.alldone:
+	return
+
+    if idebug:
+	prout("=== ATTACK!")
+
+    # Tholian gewts to move before attacking 
+    if game.ithere:
+	movetholian()
+
+    # if you have just entered the RNZ, you'll get a warning 
+    if game.neutz: # The one chance not to be attacked 
+	game.neutz = False
+	return
+
+    # commanders get a chance to tac-move towards you 
+    if (((game.comhere or game.ishere) and not game.justin) or game.skill == SKILL_EMERITUS) and torps_ok:
+	moveklings()
+
+    # if no enemies remain after movement, we're done 
+    if game.nenhere==0 or (game.nenhere==1 and iqhere and not iqengry):
+	return
+
+    # set up partial hits if attack happens during shield status change 
+    pfac = 1.0/game.inshld
+    if game.shldchg:
+	chgfac = 0.25+0.5*Rand()
+
+    skip(1)
+
+    # message verbosity control 
+    if game.skill <= SKILL_FAIR:
+	where = "sector"
+
+    for loop in range(1, game.nenhere+1):
+	if game.kpower[loop] < 0:
+	    continue;	# too weak to attack 
+	# compute hit strength and diminish shield power 
+	r = Rand()
+	# Increase chance of photon torpedos if docked or enemy energy low 
+	if game.condition == "docked":
+	    r *= 0.25
+	if game.kpower[loop] < 500:
+	    r *= 0.25; 
+	jay = game.ks[loop]
+	iquad = game.quad[jay.x][jay.y]
+	if iquad==IHT or (iquad==IHQUEST and not iqengry):
+	    continue
+	# different enemies have different probabilities of throwing a torp 
+	usephasers = not torps_ok or \
+	    (iquad == IHK and r > 0.0005) or \
+	    (iquad==IHC and r > 0.015) or \
+	    (iquad==IHR and r > 0.3) or \
+	    (iquad==IHS and r > 0.07) or \
+	    (iquad==IHQUEST and r > 0.05)
+	if usephasers:	    # Enemy uses phasers 
+	    if game.condition == "docked":
+		continue; # Don't waste the effort! 
+	    attempt = True; # Attempt to attack 
+	    dustfac = 0.8+0.05*Rand()
+	    hit = game.kpower[loop]*math.pow(dustfac,game.kavgd[loop])
+	    game.kpower[loop] *= 0.75
+	else: # Enemy uses photon torpedo 
+	    course = 1.90985*math.atan2(game.sector.y-jay.y, jay.x-game.sector.x)
+	    hit = 0
+	    proutn(_("***TORPEDO INCOMING"))
+	    if not damaged(DSRSENS):
+		proutn(_(" From "))
+		crmena(False, iquad, where, jay)
+	    attempt = True
+	    prout("  ")
+	    r = (Rand()+Rand())*0.5 -0.5
+	    r += 0.002*game.kpower[loop]*r
+	    hit = torpedo(course, r, jay, 1, 1)
+	    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
+		finish(FWON); # Klingons did themselves in! 
+	    if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova or game.alldone:
+		return; # Supernova or finished 
+	    if hit == None:
+		continue
+	# incoming phaser or torpedo, shields may dissipate it 
+	if game.shldup or game.shldchg or game.condition=="docked":
+	    # shields will take hits 
+	    propor = pfac * game.shield
+            if game.condition =="docked":
+                propr *= 2.1
+	    if propor < 0.1:
+		propor = 0.1
+	    hitsh = propor*chgfac*hit+1.0
+	    absorb = 0.8*hitsh
+	    if absorb > game.shield:
+		absorb = game.shield
+	    game.shield -= absorb
+	    hit -= hitsh
+	    # taking a hit blasts us out of a starbase dock 
+	    if game.condition == "docked":
+		dock(False)
+	    # but the shields may take care of it 
+	    if propor > 0.1 and hit < 0.005*game.energy:
+		continue
+	# hit from this opponent got through shields, so take damage 
+	ihurt = True
+	proutn(_("%d unit hit") % int(hit))
+	if (damaged(DSRSENS) and usephasers) or game.skill<=SKILL_FAIR:
+	    proutn(_(" on the "))
+	    crmshp()
+	if not damaged(DSRSENS) and usephasers:
+	    proutn(_(" from "))
+	    crmena(False, iquad, where, jay)
+	skip(1)
+	# Decide if hit is critical 
+	if hit > hitmax:
+	    hitmax = hit
+	hittot += hit
+	fry(hit)
+	game.energy -= hit
+    if game.energy <= 0:
+	# Returning home upon your shield, not with it... 
+	finish(FBATTLE)
+	return
+    if not attempt and game.condition == "docked":
+	prout(_("***Enemies decide against attacking your ship."))
+    if not atackd:
+	return
+    percent = 100.0*pfac*game.shield+0.5
+    if not ihurt:
+	# Shields fully protect ship 
+	proutn(_("Enemy attack reduces shield strength to "))
+    else:
+	# Print message if starship suffered hit(s) 
+	skip(1)
+	proutn(_("Energy left %2d    shields ") % int(game.energy))
+	if game.shldup:
+	    proutn(_("up "))
+	elif not damaged(DSHIELD):
+	    proutn(_("down "))
+	else:
+	    proutn(_("damaged, "))
+    prout(_("%d%%,   torpedoes left %d"), percent, game.torps)
+    # Check if anyone was hurt 
+    if hitmax >= 200 or hittot >= 500:
+	icas= hittot*Rand()*0.015
+	if icas >= 2:
+	    skip(1)
+	    prout(_("Mc Coy-  \"Sickbay to bridge.  We suffered %d casualties") % icas)
+	    prout(_("   in that last attack.\""))
+	    game.casual += icas
+	    game.state.crew -= icas
+    # After attack, reset average distance to enemies 
+    for loop in range(1, game.nenhere+1):
+	game.kavgd[loop] = game.kdist[loop]
+    sortklings()
+    return;
+		
+def deadkl(w, type, mv):
+    # kill a Klingon, Tholian, Romulan, or Thingy 
+    # Added mv to allow enemy to "move" before dying 
+
+    crmena(True, type, sector, mv)
+    # Decide what kind of enemy it is and update appropriately 
+    if type == IHR:
+	# chalk up a Romulan 
+	game.state.galaxy[game.quadrant.x][game.quadrant.y].romulans -= 1
+	game.irhere -= 1
+	game.state.nromrem -= 1
+    elif type == IHT:
+	# Killed a Tholian 
+	game.ithere = False
+    elif type == IHQUEST:
+	# Killed a Thingy 
+	iqhere = iqengry = False
+	invalidate(thing)
+    else:
+	# Some type of a Klingon 
+	game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons -= 1
+	game.klhere -= 1
+	if type == IHC:
+	    game.comhere = False
+	    for i in range(1, game.state.remcom+1):
+		if same(game.state.kcmdr[i], game.quadrant):
+		    break
+	    game.state.kcmdr[i] = game.state.kcmdr[game.state.remcom]
+	    game.state.kcmdr[game.state.remcom].x = 0
+	    game.state.kcmdr[game.state.remcom].y = 0
+	    game.state.remcom -= 1
+	    unschedule(FTBEAM)
+	    if game.state.remcom != 0:
+		schedule(FTBEAM, expran(1.0*game.incom/game.state.remcom))
+	elif type ==  IHK:
+	    game.state.remkl -= 1
+	elif type ==  IHS:
+	    game.state.nscrem -= 1
+	    game.ishere = False
+	    game.state.kscmdr.x = game.state.kscmdr.y = game.isatb = 0
+	    game.iscate = False
+	    unschedule(FSCMOVE)
+	    unschedule(FSCDBAS)
+	else:
+	    prout("*** Internal error, deadkl() called on %s\n" % type)
+
+    # For each kind of enemy, finish message to player 
+    prout(_(" destroyed."))
+    game.quad[w.x][w.y] = IHDOT
+    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
+	return
+
+    game.state.remtime = game.state.remres/(game.state.remkl + 4*game.state.remcom)
+
+    # Remove enemy ship from arrays describing local conditions 
+    if is_scheduled(FCDBAS) and same(game.battle, game.quadrant) and type==IHC:
+	unschedule(FCDBAS)
+    for i in range(1, game.nenhere+1):
+	if same(game.ks[i], w):
+	    break
+    game.nenhere -= 1
+    if i <= game.nenhere:
+        for j in range(i, game.nenhere+1):
+	    game.ks[j] = game.ks[j+1]
+	    game.kpower[j] = game.kpower[j+1]
+	    game.kavgd[j] = game.kdist[j] = game.kdist[j+1]
+    game.ks[game.nenhere+1].x = 0
+    game.ks[game.nenhere+1].x = 0
+    game.kdist[game.nenhere+1] = 0
+    game.kavgd[game.nenhere+1] = 0
+    game.kpower[game.nenhere+1] = 0
+    return;
+
+def targetcheck(x, y):
+    # Return None if target is invalid 
+    if not VALID_SECTOR(x, y):
+	huh()
+	return None
+    deltx = 0.1*(y - game.sector.y)
+    delty = 0.1*(x - game.sector.x)
+    if deltx==0 and delty== 0:
+	skip(1)
+	prout(_("Spock-  \"Bridge to sickbay.  Dr. McCoy,"))
+	prout(_("  I recommend an immediate review of"))
+	prout(_("  the Captain's psychological profile.\""))
+	chew()
+	return None
+    return 1.90985932*math.atan2(deltx, delty)
+
+def photon():
+    # launch photon torpedo 
+    game.ididit = False
+    if damaged(DPHOTON):
+	prout(_("Photon tubes damaged."))
+	chew()
+	return
+    if game.torps == 0:
+	prout(_("No torpedoes left."))
+	chew()
+	return
+    key = scan()
+    while True:
+	if key == IHALPHA:
+	    huh()
+	    return
+	elif key == IHEOL:
+	    prout(_("%d torpedoes left."), game.torps)
+	    proutn(_("Number of torpedoes to fire- "))
+	    key = scan()
+	else: # key == IHREAL  {
+	    n = aaitem + 0.5
+	    if n <= 0: # abort command 
+		chew()
+		return
+	    if n > 3:
+		chew()
+		prout(_("Maximum of 3 torpedoes per burst."))
+		key = IHEOL
+		return
+	    if n <= game.torps:
+		break
+	    chew()
+	    key = IHEOL
+    for i in range(1, n+1):
+	key = scan()
+	if i==1 and key == IHEOL:
+	    break;	# we will try prompting 
+	if i==2 and key == IHEOL:
+	    # direct all torpedoes at one target 
+	    while i <= n:
+		targ[i][1] = targ[1][1]
+		targ[i][2] = targ[1][2]
+		course[i] = course[1]
+		i += 1
+	    break
+	if key != IHREAL:
+	    huh()
+	    return
+	targ[i][1] = aaitem
+	key = scan()
+	if key != IHREAL:
+	    huh()
+	    return
+	targ[i][2] = aaitem
+	course[i] = targetcheck(targ[i][1], targ[i][2])
+        if course[i] == None:
+	    return
+    chew()
+    if i == 1 and key == IHEOL:
+	# prompt for each one 
+	for i in range(1, n+1):
+	    proutn(_("Target sector for torpedo number %d- "), i)
+	    key = scan()
+	    if key != IHREAL:
+		huh()
+		return
+	    targ[i][1] = aaitem
+	    key = scan()
+	    if key != IHREAL:
+		huh()
+		return
+	    targ[i][2] = aaitem
+	    chew()
+            course[i] = targetcheck(targ[i][1], targ[i][2])
+            if course[i] == None:
+                return
+    game.ididit = True
+    # Loop for moving <n> torpedoes 
+    for i in range(1, n+1):
+	if game.condition != "docked":
+	    game.torps -= 1
+	r = (Rand()+Rand())*0.5 -0.5
+	if math.fabs(r) >= 0.47:
+	    # misfire! 
+	    r = (Rand()+1.2) * r
+	    if n>1:
+		prouts(_("***TORPEDO NUMBER %d MISFIRES"), i)
+	    else:
+		prouts(_("***TORPEDO MISFIRES."))
+	    skip(1)
+	    if i < n:
+		prout(_("  Remainder of burst aborted."))
+	    if Rand() <= 0.2:
+		prout(_("***Photon tubes damaged by misfire."))
+		game.damage[DPHOTON] = game.damfac*(1.0+2.0*Rand())
+	    break
+	if game.shldup or game.condition == "docked":
+	    r *= 1.0 + 0.0001*game.shield
+	torpedo(course[i], r, game.sector, i, n)
+	if game.alldone or game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
+	    return
+    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
+	finish(FWON);
+
+def overheat(rpow):
+    # check for phasers overheating 
+    if rpow > 1500:
+	chekbrn = (rpow-1500.)*0.00038
+	if Rand() <= chekbrn:
+	    prout(_("Weapons officer Sulu-  \"Phasers overheated, sir.\""))
+	    game.damage[DPHASER] = game.damfac*(1.0 + Rand()) * (1.0+chekbrn)
+
+def checkshctrl(rpow):
+    # check shield control 
+	
+    skip(1)
+    if Rand() < 0.998:
+	prout(_("Shields lowered."))
+	return False
+    # Something bad has happened 
+    prouts(_("***RED ALERT!  RED ALERT!"))
+    skip(2)
+    hit = rpow*game.shield/game.inshld
+    game.energy -= rpow+hit*0.8
+    game.shield -= hit*0.2
+    if game.energy <= 0.0:
+	prouts(_("Sulu-  \"Captain! Shield malf***********************\""))
+	skip(1)
+	stars()
+	finish(FPHASER)
+	return True
+    prouts(_("Sulu-  \"Captain! Shield malfunction! Phaser fire contained!\""))
+    skip(2)
+    prout(_("Lt. Uhura-  \"Sir, all decks reporting damage.\""))
+    icas = hit*Rand()*0.012
+    skip(1)
+    fry(0.8*hit)
+    if icas:
+	skip(1)
+	prout(_("McCoy to bridge- \"Severe radiation burns, Jim."))
+	prout(_("  %d casualties so far.\""), icas)
+	game.casual += icas
+	game.state.crew -= icas
+    skip(1)
+    prout(_("Phaser energy dispersed by shields."))
+    prout(_("Enemy unaffected."))
+    overheat(rpow)
+    return True;
+
+def hittem(doublehits):
+    # register a phaser hit on Klingons and Romulans 
+    nenhr2=game.nenhere; kk=1
+    w = coord()
+    skip(1)
+    for k in range(1, nenhr2+1):
+        wham = hits[k]
+	if wham==0:
+	    continue
+	dustfac = 0.9 + 0.01*Rand()
+	hit = wham*math.pow(dustfac,game.kdist[kk])
+	kpini = game.kpower[kk]
+	kp = math.fabs(kpini)
+	if PHASEFAC*hit < kp:
+	    kp = PHASEFAC*hit
+        if game.kpower[kk] < 0:
+            game.kpower[kk] -= -kp
+        else:
+            game.kpower[kk] -= kp
+	kpow = game.kpower[kk]
+	w = game.ks[kk]
+	if hit > 0.005:
+	    if not damaged(DSRSENS):
+		boom(w)
+	    proutn(_("%d unit hit on ") % int(hit))
+	else:
+	    proutn(_("Very small hit on "))
+	ienm = game.quad[w.x][w.y]
+	if ienm==IHQUEST:
+	    iqengry = True
+	crmena(False, ienm, "sector", w)
+	skip(1)
+	if kpow == 0:
+	    deadkl(w, ienm, w)
+	    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
+		finish(FWON);		
+	    if game.alldone:
+		return
+	    kk -= 1; # don't do the increment 
+	else: # decide whether or not to emasculate klingon 
+	    if kpow > 0 and Rand() >= 0.9 and \
+		kpow <= ((0.4 + 0.4*Rand())*kpini):
+		prout(_("***Mr. Spock-  \"Captain, the vessel at %s"),
+		      cramlc(sector, w))
+		prout(_("   has just lost its firepower.\""))
+		game.kpower[kk] = -kpow
+        kk += 1
+    return;
+
+def phasers():
+    # fire phasers 
+    hits = []; rpow=0
+    kz = 0; k = 1; irec=0 # Cheating inhibitor 
+    ifast = False; no = False; itarg = True; msgflag = True
+    automode = "NOTSET"
+    key=0
+
+    skip(1)
+    # SR sensors and Computer are needed fopr automode 
+    if damaged(DSRSENS) or damaged(DCOMPTR):
+	itarg = False
+    if game.condition == "docked":
+	prout(_("Phasers can't be fired through base shields."))
+	chew()
+	return
+    if damaged(DPHASER):
+	prout(_("Phaser control damaged."))
+	chew()
+	return
+    if game.shldup:
+	if damaged(DSHCTRL):
+	    prout(_("High speed shield control damaged."))
+	    chew()
+	    return
+	if game.energy <= 200.0:
+	    prout(_("Insufficient energy to activate high-speed shield control."))
+	    chew()
+	    return
+	prout(_("Weapons Officer Sulu-  \"High-speed shield control enabled, sir.\""))
+	ifast = True
+		
+    # Original code so convoluted, I re-did it all 
+    while automode=="NOTSET":
+	key=scan()
+	if key == IHALPHA:
+	    if isit("manual"):
+		if game.nenhere==0:
+		    prout(_("There is no enemy present to select."))
+		    chew()
+		    key = IHEOL
+		    automode="AUTOMATIC"
+		else:
+		    automode = "MANUAL"
+		    key = scan()
+	    elif isit("automatic"):
+		if (not itarg) and game.nenhere != 0:
+		    automode = "FORCEMAN"
+		else:
+		    if game.nenhere==0:
+			prout(_("Energy will be expended into space."))
+		    automode = "AUTOMATIC"
+		    key = scan()
+	    elif isit("no"):
+		no = True
+	    else:
+		huh()
+		return
+	elif key == IHREAL:
+	    if game.nenhere==0:
+		prout(_("Energy will be expended into space."))
+		automode = "AUTOMATIC"
+	    elif not itarg:
+		automode = "FORCEMAN"
+	    else:
+		automode = "AUTOMATIC"
+	else:
+	    # IHEOL 
+	    if game.nenhere==0:
+		prout(_("Energy will be expended into space."))
+		automode = "AUTOMATIC"
+	    elif not itarg:
+		automode = "FORCEMAN"
+	    else: 
+		proutn(_("Manual or automatic? "))			
+    avail = game.energy
+    if ifast:
+        avail -= 200.0
+    if automode == "AUTOMATIC":
+	if key == IHALPHA and isit("no"):
+	    no = True
+	    key = scan()
+	if key != IHREAL and game.nenhere != 0:
+	    prout(_("Phasers locked on target. Energy available: %.2f"),
+		  avail)
+	irec=0
+        while True:
+	    chew()
+	    if not kz:
+		for i in range(1, game.nenhere+1):
+		    irec += math.fabs(game.kpower[i])/(PHASEFAC*math.pow(0.90,game.kdist[i]))*(1.01+0.05*Rand()) + 1.0
+	    kz=1
+	    proutn(_("%d units required. "), irec)
+	    chew()
+	    proutn(_("Units to fire= "))
+	    key = scan()
+	    if key!=IHREAL:
+		return
+	    rpow = aaitem
+	    if rpow > avail:
+		proutn(_("Energy available= %.2f") % avail)
+		skip(1)
+		key = IHEOL
+            if not rpow > avail:
+                break
+	if rpow<=0:
+	    # chicken out 
+	    chew()
+	    return
+        key=scan()
+	if key == IHALPHA and isit("no"):
+	    no = True
+	if ifast:
+	    game.energy -= 200; # Go and do it! 
+	    if checkshctrl(rpow):
+		return
+	chew()
+	game.energy -= rpow
+	extra = rpow
+	if game.nenhere:
+	    extra = 0.0
+	    powrem = rpow
+	    for i in range(1, game.nenhere+1):
+		hits[i] = 0.0
+		if powrem <= 0:
+		    continue
+		hits[i] = math.fabs(game.kpower[i])/(PHASEFAC*math.pow(0.90,game.kdist[i]))
+		over = (0.01 + 0.05*Rand())*hits[i]
+		temp = powrem
+		powrem -= hits[i] + over
+		if powrem <= 0 and temp < hits[i]:
+		    hits[i] = temp
+		if powrem <= 0:
+		    over = 0.0
+		extra += over
+	    if powrem > 0.0:
+		extra += powrem
+	    hittem(hits)
+	    game.ididit = True
+	if extra > 0 and not game.alldone:
+	    if game.ithere:
+		proutn(_("*** Tholian web absorbs "))
+		if game.nenhere>0:
+		    proutn(_("excess "))
+		prout(_("phaser energy."))
+	    else:
+		prout(_("%d expended on empty space."), int(extra))
+    elif automode == "FORCEMAN":
+	chew()
+	key = IHEOL
+	if damaged(DCOMPTR):
+	    prout(_("Battle computer damaged, manual fire only."))
+	else:
+	    skip(1)
+	    prouts(_("---WORKING---"))
+	    skip(1)
+	    prout(_("Short-range-sensors-damaged"))
+	    prout(_("Insufficient-data-for-automatic-phaser-fire"))
+	    prout(_("Manual-fire-must-be-used"))
+	    skip(1)
+    elif automode == "MANUAL":
+	rpow = 0.0
+        for k in range(1, game.nenhere+1):
+	    aim = game.ks[k]
+	    ienm = game.quad[aim.x][aim.y]
+	    if msgflag:
+		proutn(_("Energy available= %.2f") % avail-0.006)
+		skip(1)
+		msgflag = False
+		rpow = 0.0
+	    if damaged(DSRSENS) and not (abs(game.sector.x-aim.x) < 2 and abs(game.sector.y-aim.y) < 2) and \
+		(ienm == IHC or ienm == IHS):
+		cramen(ienm)
+		prout(_(" can't be located without short range scan."))
+		chew()
+		key = IHEOL
+		hits[k] = 0; # prevent overflow -- thanks to Alexei Voitenko 
+		k += 1
+		continue
+	    if key == IHEOL:
+		chew()
+		if itarg and k > kz:
+		    irec=(abs(game.kpower[k])/(PHASEFAC*math.pow(0.9,game.kdist[k]))) *	(1.01+0.05*Rand()) + 1.0
+		kz = k
+		proutn("(")
+		if not damaged(DCOMPTR):
+		    proutn("%d", irec)
+		else:
+		    proutn("??")
+		proutn(")  ")
+		proutn(_("units to fire at "))
+		crmena(False, ienm, sector, aim)
+		proutn("-  ")
+		key = scan()
+	    if key == IHALPHA and isit("no"):
+		no = True
+		key = scan()
+		continue
+	    if key == IHALPHA:
+		huh()
+		return
+	    if key == IHEOL:
+		if k==1: # Let me say I'm baffled by this 
+		    msgflag = True
+		continue
+	    if aaitem < 0:
+		# abort out 
+		chew()
+		return
+	    hits[k] = aaitem
+	    rpow += aaitem
+	    # If total requested is too much, inform and start over 
+            if rpow > avail:
+		prout(_("Available energy exceeded -- try again."))
+		chew()
+		return
+	    key = scan(); # scan for next value 
+	    k += 1
+	if rpow == 0.0:
+	    # zero energy -- abort 
+	    chew()
+	    return
+	if key == IHALPHA and isit("no"):
+	    no = True
+	game.energy -= rpow
+	chew()
+	if ifast:
+	    game.energy -= 200.0
+	    if checkshctrl(rpow):
+		return
+	hittem(hits)
+	game.ididit = True
+     # Say shield raised or malfunction, if necessary 
+    if game.alldone:
+	return
+    if ifast:
+	skip(1)
+	if no == 0:
+	    if Rand() >= 0.99:
+		prout(_("Sulu-  \"Sir, the high-speed shield control has malfunctioned . . ."))
+		prouts(_("         CLICK   CLICK   POP  . . ."))
+		prout(_(" No response, sir!"))
+		game.shldup = False
+	    else:
+		prout(_("Shields raised."))
+	else:
+	    game.shldup = False
+    overheat(rpow);
+



From stsp at mail.berlios.de  Tue Oct  3 19:20:00 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Tue, 3 Oct 2006 19:20:00 +0200
Subject: [Sst-commit-watch] r656 - in trunk: po src
Message-ID: <200610031720.k93HK025008872@sheep.berlios.de>

Author: stsp
Date: 2006-10-03 19:19:58 +0200 (Tue, 03 Oct 2006)
New Revision: 656

Modified:
   trunk/po/ru.po
   trunk/src/battle.c
   trunk/src/events.c
   trunk/src/moving.c
   trunk/src/planets.c
Log:
- fixed manual moving
- quick hack to avoid division by zero when calculating game.state.remtime
- fixed some problems with sensors() on ncurses
- small translation fixes

Modified: trunk/po/ru.po
===================================================================
--- trunk/po/ru.po	2006-10-03 00:19:52 UTC (rev 655)
+++ trunk/po/ru.po	2006-10-03 17:19:58 UTC (rev 656)
@@ -2789,11 +2789,11 @@
 
 #: src/reports.c:482
 msgid "Time or arrival date? "
-msgstr "????? ?????????"
+msgstr "????? ????????? "
 
 #: src/reports.c:489
 msgid "We'll never make it, sir."
-msgstr "?? ??? ?? ?????????, ???."
+msgstr "????? ?? ?????????, ???."
 
 #: src/reports.c:498
 msgid "Warp factor? "

Modified: trunk/src/battle.c
===================================================================
--- trunk/src/battle.c	2006-10-03 00:19:52 UTC (rev 655)
+++ trunk/src/battle.c	2006-10-03 17:19:58 UTC (rev 656)
@@ -792,7 +792,8 @@
     if ((game.state.remkl + game.state.remcom + game.state.nscrem)==0)
 	return;
 
-    game.state.remtime = game.state.remres/(game.state.remkl + 4*game.state.remcom);
+    game.state.remtime = game.state.remkl + game.state.remcom > 0 ?
+	    game.state.remres/(game.state.remkl + 4*game.state.remcom) : 99;
 
     /* Remove enemy ship from arrays describing local conditions */
     if (is_scheduled(FCDBAS) && same(game.battle, game.quadrant) && type==IHC)

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-10-03 00:19:52 UTC (rev 655)
+++ trunk/src/events.c	2006-10-03 17:19:58 UTC (rev 656)
@@ -111,7 +111,8 @@
 	game.state.date = datemin;
 	/* Decrement Federation resources and recompute remaining time */
 	game.state.remres -= (game.state.remkl+4*game.state.remcom)*xtime;
-	game.state.remtime = game.state.remres/(game.state.remkl+4*game.state.remcom);
+	game.state.remtime = game.state.remkl + game.state.remcom > 0 ?
+		game.state.remres/(game.state.remkl + 4*game.state.remcom) : 99;
 	if (game.state.remtime <=0) {
 	    finish(FDEPLETE);
 	    return;
@@ -528,7 +529,8 @@
 		newkling(++game.klhere);
 
 	    /* recompute time left */
-	    game.state.remtime = game.state.remres/(game.state.remkl+4*game.state.remcom);
+	    game.state.remtime = game.state.remkl + game.state.remcom > 0 ?
+		    game.state.remres/(game.state.remkl + 4*game.state.remcom) : 99;
 	    /* report the disaster if we can */
 	    if (!damaged(DRADIO) || game.condition == docked)
 	    {

Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-10-03 00:19:52 UTC (rev 655)
+++ trunk/src/moving.c	2006-10-03 17:19:58 UTC (rev 656)
@@ -325,7 +325,7 @@
 		prout(_("(Manual navigation assumed.)"));
 	    else
 		prout(_("(Manual movement assumed.)"));
-	    navmode = automatic;
+	    navmode = manual;
 	    break;
 	}
     }

Modified: trunk/src/planets.c
===================================================================
--- trunk/src/planets.c	2006-10-03 00:19:52 UTC (rev 655)
+++ trunk/src/planets.c	2006-10-03 17:19:58 UTC (rev 656)
@@ -79,14 +79,16 @@
 /* examine planets in this quadrant */
 {
     if (damaged(DSRSENS)) {
-	prout(_("Short range sensors damaged."));
+	if (game.options & OPTION_TTY)
+	    prout(_("Short range sensors damaged."));
 	return;
     }
-    if (!is_valid(game.plnet) && (game.options & OPTION_TTY)) {
-	prout(_("Spock- \"No planet in this quadrant, Captain.\""));
+    if (!is_valid(game.plnet)) {
+	if (game.options & OPTION_TTY)
+	    prout(_("Spock- \"No planet in this quadrant, Captain.\""));
 	return;
     }
-    if (is_valid(game.plnet) && (game.state.planets[game.iplnet].known == unknown)) {
+    if (game.state.planets[game.iplnet].known == unknown) {
 	prout(_("Spock-  \"Sensor scan for %s-"), cramlc(quadrant, game.quadrant));
 	skip(1);
 	prout(_("         Planet at %s is of class %s."),



From esr at mail.berlios.de  Tue Oct  3 20:19:40 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 3 Oct 2006 20:19:40 +0200
Subject: [Sst-commit-watch] r657 - trunk/src
Message-ID: <200610031819.k93IJekj014700@sheep.berlios.de>

Author: esr
Date: 2006-10-03 20:19:39 +0200 (Tue, 03 Oct 2006)
New Revision: 657

Modified:
   trunk/src/ai.c
   trunk/src/events.c
   trunk/src/sst.h
   trunk/src/sst.py
Log:
Small cleanups discovered during Python translation.


Modified: trunk/src/ai.c
===================================================================
--- trunk/src/ai.c	2006-10-03 17:19:58 UTC (rev 656)
+++ trunk/src/ai.c	2006-10-03 18:19:39 UTC (rev 657)
@@ -263,7 +263,7 @@
 	if (!damaged(DSRSENS) || game.condition == docked) {
 	    proutn("***");
 	    cramen(ienm);
-	    proutn(_(" from %s"), cramlc(2, com));
+	    proutn(_(" from %s"), cramlc(sector, com));
 	    if (game.kdist[loccom] < dist1)
 		proutn(_(" advances to "));
 	    else

Modified: trunk/src/events.c
===================================================================
--- trunk/src/events.c	2006-10-03 17:19:58 UTC (rev 656)
+++ trunk/src/events.c	2006-10-03 18:19:39 UTC (rev 657)
@@ -22,7 +22,7 @@
     return game.future[evtype].date != FOREVER;
 }
 
-extern double scheduled(int evtype)
+double scheduled(int evtype)
 /* when will this event happen? */
 {
     return game.future[evtype].date;
@@ -36,7 +36,7 @@
 }
 
 void postpone(int evtype, double offset)
-/* poistpone a scheduled event */
+/* postpone a scheduled event */
 {
     game.future[evtype].date += offset;
 }
@@ -80,7 +80,7 @@
 	    case FSCDBAS: proutn("=== SC Base Destroy "); break;
 	    case FDSPROB: proutn("=== Probe Move      "); break;
 	    case FDISTR:  proutn("=== Distress Call   "); break;
-	    case FENSLV:  proutn("=== Enlavement      "); break;
+	    case FENSLV:  proutn("=== Enslavement     "); break;
 	    case FREPRO:  proutn("=== Klingon Build   "); break;
 	    }
 	    if (is_scheduled(i))
@@ -166,7 +166,8 @@
 	case FSPY: /* Check with spy to see if S.C. should tractor beam */
 	    if (game.state.nscrem == 0 ||
 		ictbeam || istract ||
-		game.condition==docked || game.isatb==1 || game.iscate) return;
+		game.condition==docked || game.isatb==1 || game.iscate)
+		return;
 	    if (game.ientesc ||
 		(game.energy < 2000 && game.torps < 4 && game.shield < 1250) ||
 		(damaged(DPHASER) && (damaged(DPHOTON) || game.torps < 4)) ||

Modified: trunk/src/sst.h
===================================================================
--- trunk/src/sst.h	2006-10-03 17:19:58 UTC (rev 656)
+++ trunk/src/sst.h	2006-10-03 18:19:39 UTC (rev 657)
@@ -155,8 +155,8 @@
 #define FOREVER	1e30
 
 /* Define future events */
-#define FSPY	0	// Spy event happens always (no future[] entry)
-					// can cause SC to tractor beam Enterprise
+#define FSPY	0   // Spy event happens always (no future[] entry)
+		    // can cause SC to tractor beam Enterprise
 #define FSNOVA  1   // Supernova
 #define FTBEAM  2   // Commander tractor beams Enterprise
 #define FSNAP   3   // Snapshot for time warp

Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-03 17:19:58 UTC (rev 656)
+++ trunk/src/sst.py	2006-10-03 18:19:39 UTC (rev 657)
@@ -693,7 +693,7 @@
 	    game.state.planets[i].pclass = destroyed
 	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = NOPLANET
 	    if not damaged(DRADIO) or game.condition == docked:
-		pause_game(True)
+		announce()
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"))
 		proutn(_("   a planet in Quadrant %s has been destroyed") % game.state.kscmdr)
 		prout(_("   by the Super-commander.\""))
@@ -798,7 +798,7 @@
 		if damaged(DRADIO) and game.condition != docked:
 		    return; # no warning 
 		game.iseenit = True
-		pause_game(True)
+		announce()
 		prout(_("Lt. Uhura-  \"Captain, the starbase in Quadrant %s") \
                       % game.state.kscmdr)
 		prout(_("   reports that it is under attack from the Klingon Super-commander."))
@@ -818,7 +818,7 @@
 	 (damaged(DRADIO) and game.condition != docked) or \
 	 not game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].charted):
 	return
-    pause_game(True)
+    announce()
     prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"))
     proutn(_("   the Super-commander is in Quadrant %s,") % game.state.kscmdr)
     return;
@@ -1084,7 +1084,7 @@
     game.shldup = False
     prout(_("***Shields are down."))
     if game.state.remkl + game.state.remcom + game.state.nscrem:
-	pause_game(True)
+	announce()
 	damagereport()
     else:
 	finish(FWON)



From esr at mail.berlios.de  Tue Oct  3 21:29:36 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 3 Oct 2006 21:29:36 +0200
Subject: [Sst-commit-watch] r658 - trunk/src
Message-ID: <200610031929.k93JTaUq019930@sheep.berlios.de>

Author: esr
Date: 2006-10-03 21:29:35 +0200 (Tue, 03 Oct 2006)
New Revision: 658

Modified:
   trunk/src/sst.py
Log:
Incorporated events.c into Python.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-03 18:19:39 UTC (rev 657)
+++ trunk/src/sst.py	2006-10-03 19:29:35 UTC (rev 658)
@@ -295,7 +295,12 @@
         self.probeinx = 0.0	# probe x,y increment
         self.probeiny = 0.0	#
         self.height = 0.0	# height of orbit around planet
-
+    def recompute(self):
+        # Stas thinks this should be (C expression): 
+        # game.state.remkl + game.state.remcom > 0 ?
+	#	game.state.remres/(game.state.remkl + 4*game.state.remcom) : 99
+        # He says the existing expression is prone to divide-by-zero errors.
+        game.state.remtime = game.state.remres/(game.state.remkl + 4*game.state.remcom)
 # From enumerated type 'feature'
 IHR = 'R'
 IHK = 'K'
@@ -1574,9 +1579,7 @@
     game.quad[w.x][w.y] = IHDOT
     if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
 	return
-
-    game.state.remtime = game.state.remres/(game.state.remkl + 4*game.state.remcom)
-
+    game.recompute()
     # Remove enemy ship from arrays describing local conditions 
     if is_scheduled(FCDBAS) and same(game.battle, game.quadrant) and type==IHC:
 	unschedule(FCDBAS)
@@ -2060,3 +2063,804 @@
 	    game.shldup = False
     overheat(rpow);
 
+# Code from events,c begins here.
+
+# This isn't a real event queue a la BSD Trek yet -- you can only have one 
+# event of each type active at any given time.  Mostly these means we can 
+# only have one FDISTR/FENSLV/FREPRO sequence going at any given time
+# BSD Trek, from which we swiped the idea, can have up to 5.
+
+import math
+
+def unschedule(evtype):
+    # remove an event from the schedule 
+    game.future[evtype].date = FOREVER
+    return game.future[evtype]
+
+def is_scheduled(evtype):
+    # is an event of specified type scheduled 
+    return game.future[evtype].date != FOREVER
+
+def scheduled(evtype):
+    # when will this event happen? 
+    return game.future[evtype].date
+
+def schedule(evtype, offset):
+    # schedule an event of specified type 
+    game.future[evtype].date = game.state.date + offset
+    return game.future[evtype]
+
+def postpone(evtype, offset):
+    # postpone a scheduled event 
+    game.future[evtype].date += offset
+
+def cancelrest():
+    # rest period is interrupted by event 
+    if game.resting:
+	skip(1)
+	proutn(_("Mr. Spock-  \"Captain, shall we cancel the rest period?\""))
+	if ja() == True:
+	    game.resting = False
+	    game.optime = 0.0
+	    return True
+
+    return False
+
+def events():
+    # run through the event queue looking for things to do 
+    i=0
+    fintim = game.state.date + game.optime; yank=0
+    ictbeam = False; istract = False
+    w = coord(); hold = coord()
+    ev = event(); ev2 = event()
+
+    def tractorbeam():
+        # tractor beaming cases merge here 
+        yank = math.sqrt(yank)
+        announce()
+        game.optime = (10.0/(7.5*7.5))*yank # 7.5 is yank rate (warp 7.5) 
+        skip(1)
+        proutn("***")
+        crmshp()
+        prout(_(" caught in long range tractor beam--"))
+        # If Kirk & Co. screwing around on planet, handle 
+        atover(True) # atover(true) is Grab 
+        if game.alldone:
+            return
+        if game.icraft: # Caught in Galileo? 
+            finish(FSTRACTOR)
+            return
+        # Check to see if shuttle is aboard 
+        if game.iscraft == "offship":
+            skip(1)
+            if Rand() > 0.5:
+                prout(_("Galileo, left on the planet surface, is captured"))
+                prout(_("by aliens and made into a flying McDonald's."))
+                game.damage[DSHUTTL] = -10
+                game.iscraft = "removed"
+            else:
+                prout(_("Galileo, left on the planet surface, is well hidden."))
+        if evcode==0:
+            game.quadrant = game.state.kscmdr
+        else:
+            game.quadrant = game.state.kcmdr[i]
+        game.sector = randplace(QUADSIZE)
+        crmshp()
+        proutn(_(" is pulled to "))
+        proutn(cramlc(quadrant, game.quadrant))
+        proutn(", ")
+        prout(cramlc(sector, game.sector))
+        if game.resting:
+            prout(_("(Remainder of rest/repair period cancelled.)"))
+            game.resting = False
+        if not game.shldup:
+            if not damaged(DSHIELD) and game.shield > 0:
+                doshield(True) # raise shields 
+                game.shldchg=False
+            else:
+                prout(_("(Shields not currently useable.)"))
+        newqad(False)
+        # Adjust finish time to time of tractor beaming 
+        fintim = game.state.date+game.optime
+        attack(False)
+        if game.state.remcom <= 0:
+            unschedule(FTBEAM)
+        else: 
+            schedule(FTBEAM, game.optime+expran(1.5*game.intime/game.state.remcom))
+
+    def destroybase():
+        # Code merges here for any commander destroying base 
+        # Not perfect, but will have to do 
+        # Handle case where base is in same quadrant as starship 
+        if same(game.battle, game.quadrant):
+            game.state.chart[game.battle.x][game.battle.y].starbase = False
+            game.quad[game.base.x][game.base.y] = IHDOT
+            game.base.x=game.base.y=0
+            newcnd()
+            skip(1)
+            prout(_("Spock-  \"Captain, I believe the starbase has been destroyed.\""))
+        elif game.state.rembase != 1 and \
+                 (not damaged(DRADIO) or game.condition == "docked"):
+            # Get word via subspace radio 
+            announce()
+            skip(1)
+            prout(_("Lt. Uhura-  \"Captain, Starfleet Command reports that"))
+            proutn(_("   the starbase in "))
+            proutn(cramlc(quadrant, game.battle))
+            prout(_(" has been destroyed by"))
+            if game.isatb == 2: 
+                prout(_("the Klingon Super-Commander"))
+            else:
+                prout(_("a Klingon Commander"))
+            game.state.chart[game.battle.x][game.battle.y].starbase = False
+        # Remove Starbase from galaxy 
+        game.state.galaxy[game.battle.x][game.battle.y].starbase = False
+        for i in range(1, game.state.rembase+1):
+            if same(game.state.baseq[i], game.battle):
+                game.state.baseq[i] = game.state.baseq[game.state.rembase]
+        game.state.rembase -= 1
+        if game.isatb == 2:
+            # reinstate a commander's base attack 
+            game.battle = hold
+            game.isatb = 0
+        else:
+            invalidate(game.battle)
+
+    if idebug:
+	prout("=== EVENTS from %.2f to %.2f:" % (game.state.date, fintim))
+	for i in range(1, NEVENTS):
+	    if   i == FSNOVA:  proutn("=== Supernova       ")
+	    elif i == FTBEAM:  proutn("=== T Beam          ")
+	    elif i == FSNAP:   proutn("=== Snapshot        ")
+	    elif i == FBATTAK: proutn("=== Base Attack     ")
+	    elif i == FCDBAS:  proutn("=== Base Destroy    ")
+	    elif i == FSCMOVE: proutn("=== SC Move         ")
+	    elif i == FSCDBAS: proutn("=== SC Base Destroy ")
+	    elif i == FDSPROB: proutn("=== Probe Move      ")
+	    elif i == FDISTR:  proutn("=== Distress Call   ")
+	    elif i == FENSLV:  proutn("=== Enslavement     ")
+	    elif i == FREPRO:  proutn("=== Klingon Build   ")
+	    if is_scheduled(i):
+		prout("%.2f" % (scheduled(i)))
+	    else:
+		prout("never")
+    radio_was_broken = damaged(DRADIO)
+    hold.x = hold.y = 0
+    while True:
+	# Select earliest extraneous event, evcode==0 if no events 
+	evcode = FSPY
+	if game.alldone:
+	    return
+	datemin = fintim
+	for l in range(1, NEVENTS):
+	    if game.future[l].date < datemin:
+		evcode = l
+		if idebug:
+		    prout("== Event %d fires" % (evcode))
+		datemin = game.future[l].date
+	xtime = datemin-game.state.date
+	game.state.date = datemin
+	# Decrement Federation resources and recompute remaining time 
+	game.state.remres -= (game.state.remkl+4*game.state.remcom)*xtime
+        game.recompute()
+	if game.state.remtime <=0:
+	    finish(FDEPLETE)
+	    return
+	# Any crew left alive? 
+	if game.state.crew <=0:
+	    finish(FCREW)
+	    return
+	# Is life support adequate? 
+	if damaged(DLIFSUP) and game.condition != "docked":
+	    if game.lsupres < xtime and game.damage[DLIFSUP] > game.lsupres:
+		finish(FLIFESUP)
+		return
+	    game.lsupres -= xtime
+	    if game.damage[DLIFSUP] <= xtime:
+		game.lsupres = game.inlsr
+	# Fix devices 
+	repair = xtime
+	if game.condition == "docked":
+	    repair /= game.docfac
+	# Don't fix Deathray here 
+	for l in range(0, NDEVICES):
+	    if game.damage[l] > 0.0 and l != DDRAY:
+                if game.damage[l]-repair > 0.0:
+                    game.damage[l] -= repair
+                else:
+                    game.damage[l] = 0.0
+	# If radio repaired, update star chart and attack reports 
+	if radio_was_broken and not damaged(DRADIO):
+	    prout(_("Lt. Uhura- \"Captain, the sub-space radio is working and"))
+	    prout(_("   surveillance reports are coming in."))
+	    skip(1)
+	    if not game.iseenit:
+		attackreport(False)
+		game.iseenit = True
+	    rechart()
+	    prout(_("   The star chart is now up to date.\""))
+	    skip(1)
+	# Cause extraneous event EVCODE to occur 
+	game.optime -= xtime
+	if evcode == FSNOVA: # Supernova 
+	    announce()
+	    supernova(False)
+	    schedule(FSNOVA, expran(0.5*game.intime))
+	    if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
+		return
+	elif evcode == FSPY: # Check with spy to see if SC should tractor beam 
+	    if game.state.nscrem == 0 or \
+		ictbeam or istract or \
+                game.condition=="docked" or game.isatb==1 or game.iscate:
+		return
+	    if game.ientesc or \
+		(game.energy<2000 and game.torps<4 and game.shield < 1250) or \
+		(damaged(DPHASER) and (damaged(DPHOTON) or game.torps<4)) or \
+		(damaged(DSHIELD) and \
+		 (game.energy < 2500 or damaged(DPHASER)) and \
+                 (game.torps < 5 or damaged(DPHOTON))):
+		# Tractor-beam her! 
+		istract = True
+		yank = distance(game.state.kscmdr, game.quadrant)
+                ictbeam = True
+                tractorbeam()
+	    else:
+		return
+	elif evcode == FTBEAM: # Tractor beam 
+            if game.state.remcom == 0:
+                unschedule(FTBEAM)
+                continue
+            i = Rand()*game.state.remcom+1.0
+            yank = square(game.state.kcmdr[i].x-game.quadrant.x) + square(game.state.kcmdr[i].y-game.quadrant.y)
+            if istract or game.condition == "docked" or yank == 0:
+                # Drats! Have to reschedule 
+                schedule(FTBEAM, 
+                         game.optime + expran(1.5*game.intime/game.state.remcom))
+                continue
+            ictbeam = True
+            tractorbeam()
+	elif evcode == FSNAP: # Snapshot of the universe (for time warp) 
+	    game.snapsht = game.state
+	    game.state.snap = True
+	    schedule(FSNAP, expran(0.5 * game.intime))
+	elif evcode == FBATTAK: # Commander attacks starbase 
+	    if game.state.remcom==0 or game.state.rembase==0:
+		# no can do 
+		unschedule(FBATTAK)
+		unschedule(FCDBAS)
+                continue
+	    i = 0
+	    for j in range(1, game.state.rembase+1):
+		for k in range(1, game.state.remcom+1):
+		    if same(game.state.baseq[j], game.state.kcmdr[k]) and \
+			not same(game.state.baseq[j], game.quadrant) and \
+                        not same(game.state.baseq[j], game.state.kscmdr):
+			i = 1
+		if i == 1:
+		    continue
+	    if j>game.state.rembase:
+		# no match found -- try later 
+		schedule(FBATTAK, expran(0.3*game.intime))
+		unschedule(FCDBAS)
+		continue
+	    # commander + starbase combination found -- launch attack 
+	    game.battle = game.state.baseq[j]
+	    schedule(FCDBAS, 1.0+3.0*Rand())
+	    if game.isatb: # extra time if SC already attacking 
+		postpone(FCDBAS, scheduled(FSCDBAS)-game.state.date)
+	    game.future[FBATTAK].date = game.future[FCDBAS].date + expran(0.3*game.intime)
+	    game.iseenit = False
+	    if damaged(DRADIO) and game.condition != "docked": 
+		continue # No warning :-( 
+	    game.iseenit = True
+	    announce()
+	    skip(1)
+	    proutn(_("Lt. Uhura-  \"Captain, the starbase in Quadrant %s") % game.battle)
+	    prout(_("   reports that it is under attack and that it can"))
+	    proutn(_("   hold out only until stardate %d" % (int(scheduled(FCDBAS)))))
+            prout(".\"")
+	    if cancelrest():
+                return
+	elif evcode == FSCDBAS: # Supercommander destroys base 
+	    unschedule(FSCDBAS)
+	    game.isatb = 2
+	    if not game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].starbase: 
+		continue # WAS RETURN! 
+	    hold = game.battle
+	    game.battle = game.state.kscmdr
+	    destroybase()
+	elif evcode == FCDBAS: # Commander succeeds in destroying base 
+	    if evcode==FCDBAS:
+		unschedule(FCDBAS)
+		# find the lucky pair 
+		for i in range(1, game.state.remcom+1):
+		    if same(game.state.kcmdr[i], game.battle): 
+			break
+		if i > game.state.remcom or game.state.rembase == 0 or \
+		    not game.state.galaxy[game.battle.x][game.battle.y].starbase:
+		    # No action to take after all 
+		    invalidate(game.battle)
+		    continue
+            destroybase()
+	elif evcode == FSCMOVE: # Supercommander moves 
+	    schedule(FSCMOVE, 0.2777)
+	    if not game.ientesc and not istract and game.isatb != 1 and \
+                   (not game.iscate or not game.justin): 
+		supercommander()
+	elif evcode == FDSPROB: # Move deep space probe 
+	    schedule(FDSPROB, 0.01)
+	    game.probex += game.probeinx
+	    game.probey += game.probeiny
+	    i = (int)(game.probex/QUADSIZE +0.05)
+	    j = (int)(game.probey/QUADSIZE + 0.05)
+	    if game.probec.x != i or game.probec.y != j:
+		game.probec.x = i
+		game.probec.y = j
+		if not VALID_QUADRANT(i, j) or \
+		    game.state.galaxy[game.probec.x][game.probec.y].supernova:
+		    # Left galaxy or ran into supernova
+		    if not damaged(DRADIO) or game.condition == "docked":
+			announce()
+			skip(1)
+			proutn(_("Lt. Uhura-  \"The deep space probe "))
+			if not VALID_QUADRANT(j, i):
+			    proutn(_("has left the galaxy"))
+			else:
+			    proutn(_("is no longer transmitting"))
+			prout(".\"")
+		    unschedule(FDSPROB)
+		    continue
+		if not damaged(DRADIO) or game.condition == "docked":
+		    announce()
+		    skip(1)
+		    proutn(_("Lt. Uhura-  \"The deep space probe is now in "))
+		    proutn(cramlc(quadrant, game.probec))
+		    prout(".\"")
+	    pdest = game.state.galaxy[game.probec.x][game.probec.y]
+	    # Update star chart if Radio is working or have access to radio
+	    if not damaged(DRADIO) or game.condition == "docked":
+		chp = game.state.chart[game.probec.x][game.probec.y]
+		chp.klingons = pdest.klingons
+		chp.starbase = pdest.starbase
+		chp.stars = pdest.stars
+		pdest.charted = True
+	    game.proben -= 1 # One less to travel
+	    if game.proben == 0 and game.isarmed and pdest.stars:
+		# lets blow the sucker! 
+		supernova(True, game.probec)
+		unschedule(FDSPROB)
+		if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova: 
+		    return
+	elif evcode == FDISTR: # inhabited system issues distress call 
+	    unschedule(FDISTR)
+	    # try a whole bunch of times to find something suitable 
+            for i in range(100):
+		# need a quadrant which is not the current one,
+		# which has some stars which are inhabited and
+		# not already under attack, which is not
+		# supernova'ed, and which has some Klingons in it
+		w = randplace(GALSIZE)
+		q = game.state.galaxy[w.x][w.y]
+                if not (same(game.quadrant, w) or q.planet == NOPLANET or \
+		      game.state.planets[q.planet].inhabited == UNINHABITED or \
+		      q.supernova or q.status!=secure or q.klingons<=0):
+                    break
+            else:
+		# can't seem to find one; ignore this call 
+		if idebug:
+		    prout("=== Couldn't find location for distress event.")
+		continue
+	    # got one!!  Schedule its enslavement 
+	    ev = schedule(FENSLV, expran(game.intime))
+	    ev.quadrant = w
+	    q.status = distressed
+
+	    # tell the captain about it if we can 
+	    if not damaged(DRADIO) or game.condition == "docked":
+		prout(_("Uhura- Captain, %s in Quadrant %s reports it is under attack" \
+                        % (systnames[q.planet], `w`)))
+		prout(_("by a Klingon invasion fleet."))
+		if cancelrest():
+		    return
+	elif evcode == FENSLV:		# starsystem is enslaved 
+	    ev = unschedule(FENSLV)
+	    # see if current distress call still active 
+	    q = game.state.galaxy[ev.quadrant.x][ev.quadrant.y]
+	    if q.klingons <= 0:
+		q.status = "secure"
+		continue
+	    q.status = "enslaved"
+
+	    # play stork and schedule the first baby 
+	    ev2 = schedule(FREPRO, expran(2.0 * game.intime))
+	    ev2.quadrant = ev.quadrant
+
+	    # report the disaster if we can 
+	    if not damaged(DRADIO) or game.condition == "docked":
+		prout(_("Uhura- We've lost contact with starsystem %s" % \
+                        systnames[q.planet]))
+		prout(_("in Quadrant %s.\n" % ev.quadrant))
+	elif evcode == FREPRO:		# Klingon reproduces 
+	    # If we ever switch to a real event queue, we'll need to
+	    # explicitly retrieve and restore the x and y.
+	    ev = schedule(FREPRO, expran(1.0 * game.intime))
+	    # see if current distress call still active 
+	    q = game.state.galaxy[ev.quadrant.x][ev.quadrant.y]
+	    if q.klingons <= 0:
+		q.status = "secure"
+		continue
+	    if game.state.remkl >=MAXKLGAME:
+		continue		# full right now 
+	    # reproduce one Klingon 
+	    w = ev.quadrant
+	    if game.klhere >= MAXKLQUAD:
+                try:
+                    # this quadrant not ok, pick an adjacent one 
+                    for i in range(w.x - 1, w.x + 2):
+                        for j in range(w.y - 1, w.y + 2):
+                            if not VALID_QUADRANT(i, j):
+                                continue
+                            q = game.state.galaxy[w.x][w.y]
+                            # check for this quad ok (not full & no snova) 
+                            if q.klingons >= MAXKLQUAD or q.supernova:
+                                continue
+                            raise "FOUNDIT"
+                    else:
+                        continue	# search for eligible quadrant failed
+                except "FOUNDIT":
+                    w.x = i
+                    w.y = j
+	    # deliver the child 
+	    game.state.remkl += 1
+	    q.klingons += 1
+	    if same(game.quadrant, w):
+		newkling(++game.klhere)
+
+	    # recompute time left
+            game.recompute()
+	    # report the disaster if we can 
+	    if not damaged(DRADIO) or game.condition == "docked":
+		if same(game.quadrant, w):
+		    prout(_("Spock- sensors indicate the Klingons have"))
+		    prout(_("launched a warship from %s." \
+                            % systnames[q.planet]))
+		else:
+		    prout(_("Uhura- Starfleet reports increased Klingon activity"))
+		    if q.planet != NOPLANET:
+			proutn(_("near %s" % systnames[q.planet]))
+		    prout(_("in %s.\n" % cramlc(quadrant, w)))
+				
+def wait():
+    # wait on events 
+    game.ididit = False
+    while True:
+	key = scan()
+	if key  != IHEOL:
+	    break
+	proutn(_("How long? "))
+    chew()
+    if key != IHREAL:
+	huh()
+	return
+    origTime = delay = aaitem
+    if delay <= 0.0:
+	return
+    if delay >= game.state.remtime or game.nenhere != 0:
+	proutn(_("Are you sure? "))
+	if ja() == False:
+	    return
+
+    # Alternate resting periods (events) with attacks 
+
+    game.resting = True
+    while True:
+	if delay <= 0:
+	    game.resting = False
+	if not game.resting:
+	    prout(_("%d stardates left." % int(game.state.remtime)))
+	    return
+	temp = game.optime = delay
+	if game.nenhere:
+	    rtime = 1.0 + Rand()
+	    if rtime < temp:
+		temp = rtime
+	    game.optime = temp
+	if game.optime < delay:
+	    attack(False)
+	if game.alldone:
+	    return
+	events()
+	game.ididit = True
+	if game.alldone:
+	    return
+	delay -= temp
+	# Repair Deathray if long rest at starbase 
+	if origTime-delay >= 9.99 and game.condition == "docked":
+	    game.damage[DDRAY] = 0.0
+	# leave if quadrant supernovas
+        if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
+            break
+    game.resting = False
+    game.optime = 0
+
+# A nova occurs.  It is the result of having a star hit with a
+# photon torpedo, or possibly of a probe warhead going off.
+# Stars that go nova cause stars which surround them to undergo
+# the same probabilistic process.  Klingons next to them are
+# destroyed.  And if the starship is next to it, it gets zapped.
+# If the zap is too much, it gets destroyed.
+        
+def nova(nov):
+    # star goes nova 
+    course = (0.0, 10.5, 12.0, 1.5, 9.0, 0.0, 3.0, 7.5, 6.0, 4.5)
+    newc = coord(); scratch = coord()
+
+    if Rand() < 0.05:
+	# Wow! We've supernova'ed 
+	supernova(False, nov)
+	return
+
+    # handle initial nova 
+    game.quad[nov.x][nov.y] = IHDOT
+    crmena(False, IHSTAR, sector, nov)
+    prout(_(" novas."))
+    game.state.galaxy[game.quadrant.x][game.quadrant.y].stars -= 1
+    game.state.starkl += 1
+	
+    # Set up stack to recursively trigger adjacent stars 
+    bot = top = top2 = 1
+    kount = 0
+    icx = icy = 0
+    hits[1][1] = nov.x
+    hits[1][2] = nov.y
+    while True:
+	for mm in range(bot, top+1): 
+	    for nn in range(1, 3+1):  # nn,j represents coordinates around current 
+		for j in range(1, 3+1):
+		    if j==2 and nn== 2:
+			continue
+		    scratch.x = hits[mm][1]+nn-2
+		    scratch.y = hits[mm][2]+j-2
+		    if not VALID_SECTOR(scratch.y, scratch.x):
+			continue
+		    iquad = game.quad[scratch.x][scratch.y]
+                    # Empty space ends reaction
+                    if iquad in (IHDOT, IHQUEST, IHBLANK, IHT, IHWEB):
+			break
+		    elif iquad == IHSTAR: # Affect another star 
+			if Rand() < 0.05:
+			    # This star supernovas 
+			    scratch = supernova(False)
+			    return
+			top2 += 1
+			hits[top2][1]=scratch.x
+			hits[top2][2]=scratch.y
+			game.state.galaxy[game.quadrant.x][game.quadrant.y].stars -= 1
+			game.state.starkl += 1
+			crmena(True, IHSTAR, sector, scratch)
+			prout(_(" novas."))
+			game.quad[scratch.x][scratch.y] = IHDOT
+		    elif iquad == IHP: # Destroy planet 
+			game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = NOPLANET
+			game.state.nplankl += 1
+			crmena(True, IHP, sector, scratch)
+			prout(_(" destroyed."))
+			game.state.planets[game.iplnet].pclass = destroyed
+			game.iplnet = 0
+			invalidate(game.plnet)
+			if game.landed:
+			    finish(FPNOVA)
+			    return
+			game.quad[scratch.x][scratch.y] = IHDOT
+		    elif iquad == IHB: # Destroy base 
+			game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase = False
+			for i in range(1, game.state.rembase+1):
+			    if same(game.state.baseq[i], game.quadrant): 
+				break
+			game.state.baseq[i] = game.state.baseq[game.state.rembase]
+			game.state.rembase -= 1
+			invalidate(game.base)
+			game.state.basekl += 1
+			newcnd()
+			crmena(True, IHB, sector, scratch)
+			prout(_(" destroyed."))
+			game.quad[scratch.x][scratch.y] = IHDOT
+		    elif iquad in (IHE, IHF): # Buffet ship 
+			prout(_("***Starship buffeted by nova."))
+			if game.shldup:
+			    if game.shield >= 2000.0:
+				game.shield -= 2000.0
+			    else:
+				diff = 2000.0 - game.shield
+				game.energy -= diff
+				game.shield = 0.0
+				game.shldup = False
+				prout(_("***Shields knocked out."))
+				game.damage[DSHIELD] += 0.005*game.damfac*Rand()*diff
+			else:
+			    game.energy -= 2000.0
+			if game.energy <= 0:
+			    finish(FNOVA)
+			    return
+			# add in course nova contributes to kicking starship
+			icx += game.sector.x-hits[mm][1]
+			icy += game.sector.y-hits[mm][2]
+			kount += 1
+		    elif iquad == IHK: # kill klingon 
+			deadkl(scratch,iquad, scratch)
+                    elif iquad in (IHC,IHS,IHR): # Damage/destroy big enemies 
+			for ll in range(1, game.nenhere+1):
+			    if same(game.ks[ll], scratch):
+				break
+			game.kpower[ll] -= 800.0 # If firepower is lost, die 
+			if game.kpower[ll] <= 0.0:
+			    deadkl(scratch, iquad, scratch)
+			    break
+			newc.x = scratch.x + scratch.x - hits[mm][1]
+			newc.y = scratch.y + scratch.y - hits[mm][2]
+			crmena(True, iquad, sector, scratch)
+			proutn(_(" damaged"))
+			if not VALID_SECTOR(newc.x, newc.y):
+			    # can't leave quadrant 
+			    skip(1)
+			    break
+			iquad1 = game.quad[newc.x][newc.y]
+			if iquad1 == IHBLANK:
+			    proutn(_(", blasted into "))
+			    crmena(False, IHBLANK, sector, newc)
+			    skip(1)
+			    deadkl(scratch, iquad, newc)
+			    break
+			if iquad1 != IHDOT:
+			    # can't move into something else 
+			    skip(1)
+			    break
+			proutn(_(", buffeted to "))
+			proutn(cramlc(sector, newc))
+			game.quad[scratch.x][scratch.y] = IHDOT
+			game.quad[newc.x][newc.y] = iquad
+			game.ks[ll] = newc
+			game.kdist[ll] = game.kavgd[ll] = distance(game.sector, newc)
+			skip(1)
+	if top == top2: 
+	    break
+	bot = top + 1
+	top = top2
+    if kount==0: 
+	return
+
+    # Starship affected by nova -- kick it away. 
+    game.dist = kount*0.1
+    icx = sgn(icx)
+    icy = sgn(icy)
+    game.direc = course[3*(icx+1)+icy+2]
+    if game.direc == 0.0:
+	game.dist = 0.0
+    if game.dist == 0.0:
+	return
+    game.optime = 10.0*game.dist/16.0
+    skip(1)
+    prout(_("Force of nova displaces starship."))
+    imove(True)
+    game.optime = 10.0*game.dist/16.0
+    return
+	
+def supernova(induced, w=None):
+    # star goes supernova 
+    num = 0; npdead = 0
+    nq = coord()
+
+    if w != None: 
+	nq = w
+    else:
+	stars = 0
+	# Scheduled supernova -- select star 
+	# logic changed here so that we won't favor quadrants in top
+        # left of universe 
+	for nq.x in range(1, GALSIZE+1):
+	    for nq.y in range(1, GALSIZE+1):
+		stars += game.state.galaxy[nq.x][nq.y].stars
+	if stars == 0:
+	    return # nothing to supernova exists 
+	num = Rand()*stars + 1
+	for nq.x in range(1, GALSIZE+1):
+	    for nq.y in range(1, GALSIZE+1):
+		num -= game.state.galaxy[nq.x][nq.y].stars
+		if num <= 0:
+		    break
+	    if num <=0:
+		break
+	if idebug:
+	    proutn("=== Super nova here?")
+	    if ja() == True:
+		nq = game.quadrant
+
+    if not same(nq, game.quadrant) or game.justin:
+	# it isn't here, or we just entered (treat as enroute) 
+	if not damaged(DRADIO) or game.condition == "docked":
+	    skip(1)
+	    prout(_("Message from Starfleet Command       Stardate %.2f" % game.state.date))
+	    prout(_("     Supernova in Quadrant %s; caution advised." % nq))
+    else:
+	ns = coord()
+	# we are in the quadrant! 
+	num = Rand()* game.state.galaxy[nq.x][nq.y].stars + 1
+	for ns.x in range(1, QUADSIZE+1):
+	    for ns.y in range(1, QUADSIZE+1):
+		if game.quad[ns.x][ns.y]==IHSTAR:
+		    num -= 1
+		    if num==0:
+			break
+	    if num==0:
+		break
+
+	skip(1)
+	prouts(_("***RED ALERT!  RED ALERT!"))
+	skip(1)
+	prout(_("***Incipient supernova detected at Sector %s" % ns))
+	if square(ns.x-game.sector.x) + square(ns.y-game.sector.y) <= 2.1:
+	    proutn(_("Emergency override attempts t"))
+	    prouts("***************")
+	    skip(1)
+	    stars()
+	    game.alldone = True
+
+    # destroy any Klingons in supernovaed quadrant 
+    kldead = game.state.galaxy[nq.x][nq.y].klingons
+    game.state.galaxy[nq.x][nq.y].klingons = 0
+    if same(nq, game.state.kscmdr):
+	# did in the Supercommander! 
+	game.state.nscrem = game.state.kscmdr.x = game.state.kscmdr.y = game.isatb =  0
+	game.iscate = False
+	unschedule(FSCMOVE)
+	unschedule(FSCDBAS)
+    if game.state.remcom:
+	maxloop = game.state.remcom
+	for l in range(1, maxloop+1):
+	    if same(game.state.kcmdr[l], nq):
+		game.state.kcmdr[l] = game.state.kcmdr[game.state.remcom]
+		invalidate(game.state.kcmdr[game.state.remcom])
+		game.state.remcom -= 1
+		kldead -= 1
+		if game.state.remcom==0:
+		    unschedule(FTBEAM)
+		break
+    game.state.remkl -= kldead
+    # destroy Romulans and planets in supernovaed quadrant 
+    nrmdead = game.state.galaxy[nq.x][nq.y].romulans
+    game.state.galaxy[nq.x][nq.y].romulans = 0
+    game.state.nromrem -= nrmdead
+    # Destroy planets 
+    for loop in range(game.inplan):
+	if same(game.state.planets[loop].w, nq):
+	    game.state.planets[loop].pclass = destroyed
+	    npdead += 1
+    # Destroy any base in supernovaed quadrant 
+    if game.state.rembase:
+	maxloop = game.state.rembase
+	for loop in range(1, maxloop+1):
+	    if same(game.state.baseq[loop], nq):
+		game.state.baseq[loop] = game.state.baseq[game.state.rembase]
+		invalidate(game.state.baseq[game.state.rembase])
+		game.state.rembase -= 1
+		break
+    # If starship caused supernova, tally up destruction 
+    if induced:
+	game.state.starkl += game.state.galaxy[nq.x][nq.y].stars
+	game.state.basekl += game.state.galaxy[nq.x][nq.y].starbase
+	game.state.nplankl += npdead
+    # mark supernova in galaxy and in star chart 
+    if same(game.quadrant, nq) or not damaged(DRADIO) or game.condition == "docked":
+	game.state.galaxy[nq.x][nq.y].supernova = True
+    # If supernova destroys last Klingons give special message 
+    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0 and not same(nq, game.quadrant):
+	skip(2)
+	if not induced:
+	    prout(_("Lucky you!"))
+	proutn(_("A supernova in %s has just destroyed the last Klingons." % nq))
+	finish(FWON)
+	return
+    # if some Klingons remain, continue or die in supernova 
+    if game.alldone:
+	finish(FSNOVAED)
+    return



From esr at mail.berlios.de  Wed Oct  4 03:37:56 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 4 Oct 2006 03:37:56 +0200
Subject: [Sst-commit-watch] r659 - trunk/src
Message-ID: <200610040137.k941bupb025021@sheep.berlios.de>

Author: esr
Date: 2006-10-04 03:37:55 +0200 (Wed, 04 Oct 2006)
New Revision: 659

Modified:
   trunk/src/sst.py
Log:
More of Stas's notes about the time recomputation bug.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-03 19:29:35 UTC (rev 658)
+++ trunk/src/sst.py	2006-10-04 01:37:55 UTC (rev 659)
@@ -1,6 +1,10 @@
 """
 sst.py =-- Super Star Trek in Python
 
+This code is a Python translation of a C translation of a FORTRAN original.
+The FORTRANness still shows in many ways, notably the use of 1-origin index
+an a lot of parallel arrays where a more modern language would use structures
+or objects.
 """
 import os, sys, math, curses
 
@@ -178,6 +182,13 @@
 DDSP	= 15
 NDEVICES= 16	# Number of devices
 
+SKILL_NONE	= 0
+SKILL_NOVICE	= 1
+SKILL_FAIR	= 2
+SKILL_GOOD	= 3
+SKILL_EXPERT	= 4
+SKILL_EMERITUS	= 5
+
 def damaged(dev):	return (game.damage[dev] != 0.0)
 
 # Define future events 
@@ -299,7 +310,9 @@
         # Stas thinks this should be (C expression): 
         # game.state.remkl + game.state.remcom > 0 ?
 	#	game.state.remres/(game.state.remkl + 4*game.state.remcom) : 99
-        # He says the existing expression is prone to divide-by-zero errors.
+        # He says the existing expression is prone to divide-by-zero errors
+        # after killing the last klingon when score is shown -- perhaps also
+        # if the only remaining klingon is SCOM.
         game.state.remtime = game.state.remres/(game.state.remkl + 4*game.state.remcom)
 # From enumerated type 'feature'
 IHR = 'R'



From esr at mail.berlios.de  Wed Oct  4 04:05:51 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 4 Oct 2006 04:05:51 +0200
Subject: [Sst-commit-watch] r660 - trunk/src
Message-ID: <200610040205.k9425p98026506@sheep.berlios.de>

Author: esr
Date: 2006-10-04 04:05:50 +0200 (Wed, 04 Oct 2006)
New Revision: 660

Modified:
   trunk/src/finish.c
Log:
Correct minor bug in figure-of-merit scoring (inhabited-planet kills
weren't being figured in) and make the code clearer.


Modified: trunk/src/finish.c
===================================================================
--- trunk/src/finish.c	2006-10-04 01:37:55 UTC (rev 659)
+++ trunk/src/finish.c	2006-10-04 02:05:50 UTC (rev 660)
@@ -90,8 +90,13 @@
 	game.gamewon = true;
 	if (game.alive) {
 	    double badpt;
-	    badpt = 5.0*game.state.starkl + game.casual + 10.0*game.state.nplankl +
-		45.*game.nhelp+100.*game.state.basekl+3.*game.abandoned;
+	    badpt = 5.0*game.state.starkl \
+		+ game.casual \
+		+ 10.0*game.state.nplankl \
+		+ 300.0*game.state.nworldkl \
+		+ 45.0*game.nhelp \
+		+ 100.0*game.state.basekl \
+		+ 3.0*game.abandoned;
 	    if (game.ship == IHF)
 		badpt += 100.0;
 	    else if (game.ship == 0)



From esr at mail.berlios.de  Wed Oct  4 04:22:52 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 4 Oct 2006 04:22:52 +0200
Subject: [Sst-commit-watch] r661 - trunk/src
Message-ID: <200610040222.k942MqoU027623@sheep.berlios.de>

Author: esr
Date: 2006-10-04 04:22:51 +0200 (Wed, 04 Oct 2006)
New Revision: 661

Modified:
   trunk/src/sst.py
Log:
finish.c code incorporated into Python translation.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-04 02:05:50 UTC (rev 660)
+++ trunk/src/sst.py	2006-10-04 02:22:51 UTC (rev 661)
@@ -6,7 +6,7 @@
 an a lot of parallel arrays where a more modern language would use structures
 or objects.
 """
-import os, sys, math, curses
+import os, sys, math, curses, time
 
 SSTDOC = "/usr/share/doc/sst/sst.doc"
 
@@ -2877,3 +2877,436 @@
     if game.alldone:
 	finish(FSNOVAED)
     return
+
+# Code from finish.c ends here.
+
+def selfdestruct():
+    # self-destruct maneuver 
+    # Finish with a BANG! 
+    chew()
+    if damaged(DCOMPTR):
+	prout(_("Computer damaged; cannot execute destruct sequence."))
+	return
+    prouts(_("---WORKING---")); skip(1)
+    prouts(_("SELF-DESTRUCT-SEQUENCE-ACTIVATED")); skip(1)
+    prouts("   10"); skip(1)
+    prouts("       9"); skip(1)
+    prouts("          8"); skip(1)
+    prouts("             7"); skip(1)
+    prouts("                6"); skip(1)
+    skip(1)
+    prout(_("ENTER-CORRECT-PASSWORD-TO-CONTINUE-"))
+    skip(1)
+    prout(_("SELF-DESTRUCT-SEQUENCE-OTHERWISE-"))
+    skip(1)
+    prout(_("SELF-DESTRUCT-SEQUENCE-WILL-BE-ABORTED"))
+    skip(1)
+    scan()
+    chew()
+    if game.passwd != citem:
+	prouts(_("PASSWORD-REJECTED;"))
+	skip(1)
+	prouts(_("CONTINUITY-EFFECTED"))
+	skip(2)
+	return
+    prouts(_("PASSWORD-ACCEPTED")); skip(1)
+    prouts("                   5"); skip(1)
+    prouts("                      4"); skip(1)
+    prouts("                         3"); skip(1)
+    prouts("                            2"); skip(1)
+    prouts("                              1"); skip(1)
+    if Rand() < 0.15:
+	prouts(_("GOODBYE-CRUEL-WORLD"))
+	skip(1)
+    kaboom()
+
+def kaboom():
+    stars()
+    if game.ship==IHE:
+	prouts("***")
+    prouts(_("********* Entropy of "))
+    crmshp()
+    prouts(_(" maximized *********"))
+    skip(1)
+    stars()
+    skip(1)
+    if game.nenhere != 0:
+	whammo = 25.0 * game.energy
+	l=1
+	while l <= game.nenhere:
+	    if game.kpower[l]*game.kdist[l] <= whammo: 
+		deadkl(game.ks[l], game.quad[game.ks[l].x][game.ks[l].y], game.ks[l])
+	    l += 1
+    finish(FDILITHIUM)
+				
+def killrate():
+    "Compute our rate of kils over time."
+    return ((game.inkling + game.incom + game.inscom) - (game.state.remkl + game.state.remcom + game.state.nscrem))/(game.state.date-game.indate)
+
+def badpoints():
+    "Compute demerits."
+    badpt = 5.0*game.state.starkl + \
+            game.casual + \
+            10.0*game.state.nplankl + \
+            300*game.state.nworldkl + \
+            45.0*game.nhelp +\
+            100.0*game.state.basekl +\
+            3.0*game.abandoned
+    if game.ship == IHF:
+        badpt += 100.0
+    elif game.ship == None:
+        badpt += 200.0
+    return badpt
+
+
+def finish(ifin):
+    # end the game, with appropriate notfications 
+    igotit = False
+    game.alldone = True
+    skip(3)
+    prout(_("It is stardate %.1f." % (game.state.date)))
+    skip(1)
+    if ifin == FWON: # Game has been won
+	if game.state.nromrem != 0:
+	    prout(_("The remaining %d Romulans surrender to Starfleet Command.") %
+		  game.state.nromrem)
+
+	prout(_("You have smashed the Klingon invasion fleet and saved"))
+	prout(_("the Federation."))
+	game.gamewon = True
+	if game.alive:
+            badpt = badpoints()
+            if badpt < 100.0:
+                badpt = 0.0	# Close enough!
+            # killsPerDate >= RateMax
+	    if game.state.date-game.indate < 5.0 or \
+                killrate() >= 0.1*game.skill*(game.skill+1.0) + 0.1 + 0.008*badpt:
+		skip(1)
+		prout(_("In fact, you have done so well that Starfleet Command"))
+		if game.skill == SKILL_NOVICE:
+		    prout(_("promotes you one step in rank from \"Novice\" to \"Fair\"."))
+		elif game.skill == SKILL_FAIR:
+		    prout(_("promotes you one step in rank from \"Fair\" to \"Good\"."))
+		elif game.skill == SKILL_GOOD:
+		    prout(_("promotes you one step in rank from \"Good\" to \"Expert\"."))
+		elif game.skill == SKILL_EXPERT:
+		    prout(_("promotes you to Commodore Emeritus."))
+		    skip(1)
+		    prout(_("Now that you think you're really good, try playing"))
+		    prout(_("the \"Emeritus\" game. It will splatter your ego."))
+		elif game.skill == SKILL_EMERITUS:
+		    skip(1)
+		    proutn(_("Computer-  "))
+		    prouts(_("ERROR-ERROR-ERROR-ERROR"))
+		    skip(2)
+		    prouts(_("  YOUR-SKILL-HAS-EXCEEDED-THE-CAPACITY-OF-THIS-PROGRAM"))
+		    skip(1)
+		    prouts(_("  THIS-PROGRAM-MUST-SURVIVE"))
+		    skip(1)
+		    prouts(_("  THIS-PROGRAM-MUST-SURVIVE"))
+		    skip(1)
+		    prouts(_("  THIS-PROGRAM-MUST-SURVIVE"))
+		    skip(1)
+		    prouts(_("  THIS-PROGRAM-MUST?- MUST ? - SUR? ? -?  VI"))
+		    skip(2)
+		    prout(_("Now you can retire and write your own Star Trek game!"))
+		    skip(1)
+		elif game.skill >= SKILL_EXPERT:
+		    if game.thawed and not idebug:
+			prout(_("You cannot get a citation, so..."))
+		    else:
+			proutn(_("Do you want your Commodore Emeritus Citation printed? "))
+			chew()
+			if ja() == True:
+			    igotit = True
+	    # Only grant long life if alive (original didn't!)
+	    skip(1)
+	    prout(_("LIVE LONG AND PROSPER."))
+	score()
+	if igotit:
+	    plaque()	    
+	return
+    elif ifin == FDEPLETE: # Federation Resources Depleted
+	prout(_("Your time has run out and the Federation has been"))
+	prout(_("conquered.  Your starship is now Klingon property,"))
+	prout(_("and you are put on trial as a war criminal.  On the"))
+	proutn(_("basis of your record, you are "))
+	if (game.state.remkl + game.state.remcom + game.state.nscrem)*3.0 > (game.inkling + game.incom + game.inscom):
+	    prout(_("acquitted."))
+	    skip(1)
+	    prout(_("LIVE LONG AND PROSPER."))
+	else:
+	    prout(_("found guilty and"))
+	    prout(_("sentenced to death by slow torture."))
+	    game.alive = False
+	score()
+	return
+    elif ifin == FLIFESUP:
+	prout(_("Your life support reserves have run out, and"))
+	prout(_("you die of thirst, starvation, and asphyxiation."))
+	prout(_("Your starship is a derelict in space."))
+    elif ifin == FNRG:
+	prout(_("Your energy supply is exhausted."))
+	skip(1)
+	prout(_("Your starship is a derelict in space."))
+    elif ifin == FBATTLE:
+	proutn(_("The "))
+	crmshp()
+	prout(_("has been destroyed in battle."))
+	skip(1)
+	prout(_("Dulce et decorum est pro patria mori."))
+    elif ifin == FNEG3:
+	prout(_("You have made three attempts to cross the negative energy"))
+	prout(_("barrier which surrounds the galaxy."))
+	skip(1)
+	prout(_("Your navigation is abominable."))
+	score()
+    elif ifin == FNOVA:
+	prout(_("Your starship has been destroyed by a nova."))
+	prout(_("That was a great shot."))
+	skip(1)
+    elif ifin == FSNOVAED:
+	proutn(_("The "))
+	crmshp()
+	prout(_(" has been fried by a supernova."))
+	prout(_("...Not even cinders remain..."))
+    elif ifin == FABANDN:
+	prout(_("You have been captured by the Klingons. If you still"))
+	prout(_("had a starbase to be returned to, you would have been"))
+	prout(_("repatriated and given another chance. Since you have"))
+	prout(_("no starbases, you will be mercilessly tortured to death."))
+    elif ifin == FDILITHIUM:
+	prout(_("Your starship is now an expanding cloud of subatomic particles"))
+    elif ifin == FMATERIALIZE:
+	prout(_("Starbase was unable to re-materialize your starship."))
+	prout(_("Sic transit gloria mundi"))
+    elif ifin == FPHASER:
+	proutn(_("The "))
+	crmshp()
+	prout(_(" has been cremated by its own phasers."))
+    elif ifin == FLOST:
+	prout(_("You and your landing party have been"))
+	prout(_("converted to energy, disipating through space."))
+    elif ifin == FMINING:
+	prout(_("You are left with your landing party on"))
+	prout(_("a wild jungle planet inhabited by primitive cannibals."))
+	skip(1)
+	prout(_("They are very fond of \"Captain Kirk\" soup."))
+	skip(1)
+	proutn(_("Without your leadership, the "))
+	crmshp()
+	prout(_(" is destroyed."))
+    elif ifin == FDPLANET:
+	prout(_("You and your mining party perish."))
+	skip(1)
+	prout(_("That was a great shot."))
+	skip(1)
+    elif ifin == FSSC:
+	prout(_("The Galileo is instantly annihilated by the supernova."))
+	prout(_("You and your mining party are atomized."))
+	skip(1)
+	proutn(_("Mr. Spock takes command of the "))
+	crmshp()
+	prout(_(" and"))
+	prout(_("joins the Romulans, reigning terror on the Federation."))
+    elif ifin == FPNOVA:
+	prout(_("You and your mining party are atomized."))
+	skip(1)
+	proutn(_("Mr. Spock takes command of the "))
+	crmshp()
+	prout(_(" and"))
+	prout(_("joins the Romulans, reigning terror on the Federation."))
+    elif ifin == FSTRACTOR:
+	prout(_("The shuttle craft Galileo is also caught,"))
+	prout(_("and breaks up under the strain."))
+	skip(1)
+	prout(_("Your debris is scattered for millions of miles."))
+	proutn(_("Without your leadership, the "))
+	crmshp()
+	prout(_(" is destroyed."))
+    elif ifin == FDRAY:
+	prout(_("The mutants attack and kill Spock."))
+	prout(_("Your ship is captured by Klingons, and"))
+	prout(_("your crew is put on display in a Klingon zoo."))
+    elif ifin == FTRIBBLE:
+	prout(_("Tribbles consume all remaining water,"))
+	prout(_("food, and oxygen on your ship."))
+	skip(1)
+	prout(_("You die of thirst, starvation, and asphyxiation."))
+	prout(_("Your starship is a derelict in space."))
+    elif ifin == FHOLE:
+	prout(_("Your ship is drawn to the center of the black hole."))
+	prout(_("You are crushed into extremely dense matter."))
+    elif ifin == FCREW:
+	prout(_("Your last crew member has died."))
+    if game.ship == IHF:
+	game.ship = None
+    elif game.ship == IHE:
+	game.ship = IHF
+    game.alive = False
+    if (game.state.remkl + game.state.remcom + game.state.nscrem) != 0:
+	goodies = game.state.remres/game.inresor
+	baddies = (game.state.remkl + 2.0*game.state.remcom)/(game.inkling+2.0*game.incom)
+	if goodies/baddies >= 1.0+0.5*Rand():
+	    prout(_("As a result of your actions, a treaty with the Klingon"))
+	    prout(_("Empire has been signed. The terms of the treaty are"))
+	    if goodies/baddies >= 3.0+Rand():
+		prout(_("favorable to the Federation."))
+		skip(1)
+		prout(_("Congratulations!"))
+	    else:
+		prout(_("highly unfavorable to the Federation."))
+	else:
+	    prout(_("The Federation will be destroyed."))
+    else:
+	prout(_("Since you took the last Klingon with you, you are a"))
+	prout(_("martyr and a hero. Someday maybe they'll erect a"))
+	prout(_("statue in your memory. Rest in peace, and try not"))
+	prout(_("to think about pigeons."))
+	game.gamewon = True
+    score()
+
+def score():
+    # compute player's score 
+    timused = game.state.date - game.indate
+
+    iskill = game.skill
+    if (timused == 0 or (game.state.remkl + game.state.remcom + game.state.nscrem) != 0) and timused < 5.0:
+	timused = 5.0
+    perdate = killrate()
+    ithperd = 500*perdate + 0.5
+    iwon = 0
+    if game.gamewon:
+	iwon = 100*game.skill
+    if game.ship == IHE: 
+	klship = 0
+    elif game.ship == IHF: 
+	klship = 1
+    else:
+	klship = 2
+    if not game.gamewon:
+	game.state.nromrem = 0 # None captured if no win
+    iscore = 10*(game.inkling - game.state.remkl) \
+             + 50*(game.incom - game.state.remcom) \
+             + ithperd + iwon \
+             + 20*(game.inrom - game.state.nromrem) \
+             + 200*(game.inscom - game.state.nscrem) \
+    	     - game.state.nromrem \
+             - badpoints()
+    if not game.alive:
+	iscore -= 200
+    skip(2)
+    prout(_("Your score --"))
+    if game.inrom - game.state.nromrem:
+	prout(_("%6d Romulans destroyed                 %5d" %
+	      (game.inrom - game.state.nromrem, 20*(game.inrom - game.state.nromrem))))
+    if game.state.nromrem:
+	prout(_("%6d Romulans captured                  %5d" %
+	      (game.state.nromrem, game.state.nromrem)))
+    if game.inkling - game.state.remkl:
+	prout(_("%6d ordinary Klingons destroyed        %5d" %
+	      (game.inkling - game.state.remkl, 10*(game.inkling - game.state.remkl))))
+    if game.incom - game.state.remcom:
+	prout(_("%6d Klingon commanders destroyed       %5d" %
+	      (game.incom - game.state.remcom, 50*(game.incom - game.state.remcom))))
+    if game.inscom - game.state.nscrem:
+	prout(_("%6d Super-Commander destroyed          %5d" %
+	      (game.inscom - game.state.nscrem, 200*(game.inscom - game.state.nscrem))))
+    if ithperd:
+	prout(_("%6.2f Klingons per stardate              %5d" %
+	      (perdate, ithperd)))
+    if game.state.starkl:
+	prout(_("%6d stars destroyed by your action     %5d" %
+	      (game.state.starkl, -5*game.state.starkl)))
+    if game.state.nplankl:
+	prout(_("%6d planets destroyed by your action   %5d" %
+	      (game.state.nplankl, -10*game.state.nplankl)))
+    if (game.options & OPTION_WORLDS) and game.state.nworldkl:
+	prout(_("%6d inhabited planets destroyed by your action   %5d" %
+	      (game.state.nplankl, -300*game.state.nworldkl)))
+    if game.state.basekl:
+	prout(_("%6d bases destroyed by your action     %5d" %
+	      (game.state.basekl, -100*game.state.basekl)))
+    if game.nhelp:
+	prout(_("%6d calls for help from starbase       %5d" %
+	      (game.nhelp, -45*game.nhelp)))
+    if game.casual:
+	prout(_("%6d casualties incurred                %5d" %
+	      (game.casual, -game.casual)))
+    if game.abandoned:
+	prout(_("%6d crew abandoned in space            %5d" %
+	      (game.abandoned, -3*game.abandoned)))
+    if klship:
+	prout(_("%6d ship(s) lost or destroyed          %5d" %
+	      (klship, -100*klship)))
+    if not game.alive:
+	prout(_("Penalty for getting yourself killed        -200"))
+    if game.gamewon:
+	proutn(_("Bonus for winning "))
+	if game.skill   == SKILL_NOVICE:	proutn(_("Novice game  "))
+	elif game.skill == SKILL_FAIR:  	proutn(_("Fair game    "))
+	elif game.skill ==  SKILL_GOOD: 	proutn(_("Good game    "))
+	elif game.skill ==  SKILL_EXPERT:	proutn(_("Expert game  "))
+	elif game.skill ==  SKILL_EMERITUS:	proutn(_("Emeritus game"))
+	prout("           %5d" % (iwon))
+    skip(1)
+    prout(_("TOTAL SCORE                               %5d" % iscore))
+
+def plaque():
+    # emit winner's commemmorative plaque 
+    skip(2)
+    while True:
+        proutn(_("File or device name for your plaque: "))
+        cgetline(winner, sizeof(winner))
+        try:
+            fp = open(winner, "w")
+            break
+        except IOError:
+            prout(_("Invalid name."))
+
+    proutn(_("Enter name to go on plaque (up to 30 characters): "))
+    cgetline(winner, sizeof(winner))
+    # The 38 below must be 64 for 132-column paper 
+    nskip = 38 - len(winner)/2
+
+    fp.write("\n\n\n\n")
+    # --------DRAW ENTERPRISE PICTURE. 
+    fp.write("                                       EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\n" )
+    fp.write("                                      EEE                      E  : :                                         :  E\n" )
+    fp.write("                                    EE   EEE                   E  : :                   NCC-1701              :  E\n")
+    fp.write("EEEEEEEEEEEEEEEE        EEEEEEEEEEEEEEE  : :                              : E\n")
+    fp.write(" E                                     EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\n")
+    fp.write("                      EEEEEEEEE               EEEEEEEEEEEEE                 E  E\n")
+    fp.write("                               EEEEEEE   EEEEE    E          E              E  E\n")
+    fp.write("                                      EEE           E          E            E  E\n")
+    fp.write("                                                       E         E          E  E\n")
+    fp.write("                                                         EEEEEEEEEEEEE      E  E\n")
+    fp.write("                                                      EEE :           EEEEEEE  EEEEEEEE\n")
+    fp.write("                                                    :E    :                 EEEE       E\n")
+    fp.write("                                                   .-E   -:-----                       E\n")
+    fp.write("                                                    :E    :                            E\n")
+    fp.write("                                                      EE  :                    EEEEEEEE\n")
+    fp.write("                                                       EEEEEEEEEEEEEEEEEEEEEEE\n")
+    fp.write("\n\n\n")
+    fp.write(_("                                                       U. S. S. ENTERPRISE\n"))
+    fp.write("\n\n\n\n")
+    fp.write(_("                                  For demonstrating outstanding ability as a starship captain\n"))
+    fp.write("\n")
+    fp.write(_("                                                Starfleet Command bestows to you\n"))
+    fp.write("\n")
+    fp.write("%*s%s\n\n" % (nskip, "", winner))
+    fp.write(_("                                                           the rank of\n\n"))
+    fp.write(_("                                                       \"Commodore Emeritus\"\n\n"))
+    fp.write("                                                          ")
+    if game.skill ==  SKILL_EXPERT:
+        fp.write(_(" Expert level\n\n"))
+    elif game.skill == SKILL_EMERITUS:
+        fp.write(_("Emeritus level\n\n"))
+    else:
+        fp.write(_(" Cheat level\n\n"))
+    timestring = ctime()
+    fp.write(_("                                                 This day of %.6s %.4s, %.8s\n\n" %
+                    (timestring+4, timestring+20, timestring+11)))
+    fp.write(_("                                                        Your score:  %d\n\n" % iscore))
+    fp.write(_("                                                    Klingons per stardate:  %.2f\n" % perdate))
+    fp.close()



From esr at mail.berlios.de  Wed Oct  4 16:54:16 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 4 Oct 2006 16:54:16 +0200
Subject: [Sst-commit-watch] r662 - trunk/src
Message-ID: <200610041454.k94EsGKN002008@sheep.berlios.de>

Author: esr
Date: 2006-10-04 16:54:15 +0200 (Wed, 04 Oct 2006)
New Revision: 662

Modified:
   trunk/src/sst.py
Log:
Incor[porated io.c code into Python translation.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-04 02:22:51 UTC (rev 661)
+++ trunk/src/sst.py	2006-10-04 14:54:15 UTC (rev 662)
@@ -6,7 +6,7 @@
 an a lot of parallel arrays where a more modern language would use structures
 or objects.
 """
-import os, sys, math, curses, time
+import os, sys, math, curses, time, atexit, readline
 
 SSTDOC = "/usr/share/doc/sst/sst.doc"
 
@@ -3310,3 +3310,347 @@
     fp.write(_("                                                        Your score:  %d\n\n" % iscore))
     fp.write(_("                                                    Klingons per stardate:  %.2f\n" % perdate))
     fp.close()
+
+# Code from io.c begins here
+
+rows = linecount = 0	# for paging 
+stdscr = None
+fullscreen_window = None
+srscan_window     = None
+report_window     = None
+status_window     = None
+lrscan_window     = None
+message_window    = None
+prompt_window     = None
+
+def outro():
+    "wrap up, either normally or due to signal"
+    if game.options & OPTION_CURSES:
+	#clear()
+	#curs_set(1)
+	#refresh()
+	#resetterm()
+	#echo()
+	curses.endwin()
+	stdout.write('\n')
+    if logfp:
+	logfp.close()
+
+def iostart():
+    global stdscr
+    #setlocale(LC_ALL, "")
+    #bindtextdomain(PACKAGE, LOCALEDIR)
+    #textdomain(PACKAGE)
+    if atexit.register(outro):
+	sys.stderr.write("Unable to register outro(), exiting...\n")
+	os.exit(1)
+    if not (game.options & OPTION_CURSES):
+	ln_env = os.getenv("LINES")
+        if ln_env:
+            rows = ln_env
+        else:
+            rows = 25
+    else:
+	stdscr = curses.initscr()
+	stdscr.keypad(True)
+	#saveterm()
+	curses.nonl()
+	curses.cbreak()
+        curses.start_color()
+        curses.init_pair(curses.COLOR_BLACK, curses.COLOR_BLACK, curses.COLOR_BLACK)
+        curses.init_pair(curses.COLOR_GREEN, curses.COLOR_GREEN, curses.COLOR_BLACK)
+        curses.init_pair(curses.COLOR_RED, curses.COLOR_RED, curses.COLOR_BLACK)
+        curses.init_pair(curses.COLOR_CYAN, curses.COLOR_CYAN, curses.COLOR_BLACK)
+        curses.init_pair(curses.COLOR_WHITE, curses.COLOR_WHITE, curses.COLOR_BLACK)
+        curses.init_pair(curses.COLOR_MAGENTA, curses.COLOR_MAGENTA, curses.COLOR_BLACK)
+        curses.init_pair(curses.COLOR_BLUE, curses.COLOR_BLUE, curses.COLOR_BLACK)
+        curses.init_pair(curses.COLOR_YELLOW, curses.COLOR_YELLOW, curses.COLOR_BLACK)
+	#noecho()
+        global fullscreen_window, srscan_window, report_window, status_window
+        global lrscan_window, message_window, prompt_window
+	fullscreen_window = stdscr
+	srscan_window     = curses.newwin(12, 25, 0,       0)
+	report_window     = curses.newwin(11, 0,  1,       25)
+	status_window     = curses.newwin(10, 0,  1,       39)
+	lrscan_window     = curses.newwin(5,  0,  0,       64) 
+	message_window    = curses.newwin(0,  0,  12,      0)
+	prompt_window     = curses.newwin(1,  0,  rows-2,  0) 
+	message_window.scrollok(True)
+	setwnd(fullscreen_window)
+	textcolor(DEFAULT)
+
+
+def waitfor():
+    "wait for user action -- OK to do nothing if on a TTY"
+    if game.options & OPTION_CURSES:
+	stsdcr.getch()
+
+def announce():
+    skip(1)
+    if game.skill > SKILL_FAIR:
+	prouts(_("[ANOUNCEMENT ARRIVING...]"))
+    else:
+	prouts(_("[IMPORTANT ANNOUNCEMENT ARRIVING -- PRESS ENTER TO CONTINUE]"))
+    skip(1)
+
+def pause_game():
+    if game.skill > SKILL_FAIR:
+        prompt = _("[CONTINUE?]")
+    else:
+        prompt = _("[PRESS ENTER TO CONTINUE]")
+
+    if game.options & OPTION_CURSES:
+        drawmaps(0)
+        setwnd(prompt_window)
+        prompt_window.wclear()
+        prompt_window.addstr(prompt)
+        prompt_window.getstr()
+        prompt_window.clear()
+        prompt_window.refresh()
+        setwnd(message_window)
+    else:
+        global linecount
+        stdout.write('\n')
+        proutn(prompt)
+        raw_input()
+        for j in range(0, rows):
+            stdout.write('\n')
+        linecount = 0
+
+def skip(i):
+    "Skip i lines.  Pause game if this would cause a scrolling event."
+    while dummy in range(i):
+	if game.options & OPTION_CURSES:
+            (y, x) = curwnd.getyx()
+            (my, mx) = curwnd.getmaxyx()
+	    if curwnd == message_window and y >= my - 3:
+		pause_game()
+		clrscr()
+	    else:
+		proutn("\n")
+	else:
+            global linecount
+	    linecount += 1
+	    if linecount >= rows:
+		pause_game()
+	    else:
+		stdout.write('\n')
+
+def proutn(line):
+    "Utter a line with no following line feed."
+    if game.options & OPTION_CURSES:
+	curwnd.addstr(line)
+	curwnd.refresh()
+    else:
+	stdout.write(line)
+
+def prout(line):
+    proutn(line)
+    skip(1)
+
+def prouts(line):
+    "print slowly!" 
+    for c in line:
+	curses.delay_output(30)
+	proutn(c)
+	if game.options & OPTION_CURSES:
+	    wrefresh(curwnd)
+	else:
+	    sys.stdout.flush()
+    curses.delay_output(300)
+
+def cgetline(line, max):
+    "Get a line of input."
+    if game.options & OPTION_CURSES:
+	line = curwnd.getstr() + "\n"
+	curwnd.refresh()
+    else:
+	if replayfp and not replayfp.closed:
+	    line = replayfp.readline()
+	else:
+	    sys.stdin.readline()
+    if logfp:
+	logfp.write(line)
+
+def setwnd(wnd):
+    "Change windows -- OK for this to be a no-op in tty mode." 
+    if game.options & OPTION_CURSES:
+        curwnd = wnd
+        curses.curs_set(wnd == fullscreen_window or wnd == message_window or wnd == prompt_window)
+
+def clreol():
+    "Clear to end of line -- can be a no-op in tty mode" 
+    if game.options & OPTION_CURSES:
+        wclrtoeol(curwnd)
+        wrefresh(curwnd)
+
+def clrscr():
+    "Clear screen -- can be a no-op in tty mode."
+    global linecount
+    if game.options & OPTION_CURSES:
+       curwnd.clear()
+       curwnd.move(0, 0)
+       curwnd.refresh()
+    linecount = 0
+
+def textcolor(color):
+    "Set the current text color"
+    if game.options & OPTION_CURSES:
+	if color == DEFAULT: 
+	    curwnd.attrset(0)
+	elif color == BLACK: 
+	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_BLACK))
+	elif color == BLUE: 
+	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_BLUE))
+	elif color == GREEN: 
+	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_GREEN))
+	elif color == CYAN: 
+	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_CYAN))
+	elif color == RED: 
+	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_RED))
+	elif color == MAGENTA: 
+	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_MAGENTA))
+	elif color == BROWN: 
+	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_YELLOW))
+	elif color == LIGHTGRAY: 
+	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_WHITE))
+	elif color == DARKGRAY: 
+	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_BLACK) | curses.A_BOLD)
+	elif color == LIGHTBLUE: 
+	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_BLUE) | curses.A_BOLD)
+	elif color == LIGHTGREEN: 
+	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_GREEN) | curses.A_BOLD)
+	elif color == LIGHTCYAN: 
+	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_CYAN) | curses.A_BOLD)
+	elif color == LIGHTRED: 
+	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_RED) | curses.A_BOLD)
+	elif color == LIGHTMAGENTA: 
+	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_MAGENTA) | curses.A_BOLD)
+	elif color == YELLOW: 
+	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_YELLOW) | curses.A_BOLD)
+	elif color == WHITE:
+	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_WHITE) | curses.A_BOLD)
+
+def highvideo():
+    "Set highlight video, if this is reasonable."
+    if game.options & OPTION_CURSES:
+	curwnd.attron(curses.A_REVERSE)
+ 
+def commandhook(cmd, before):
+    pass
+
+#
+# Things past this point have policy implications.
+# 
+
+def drawmaps(mode):
+    "Hook to be called after moving to redraw maps."
+    if game.options & OPTION_CURSES:
+	if mode == 1:
+	    sensor()
+        setwnd(srscan_window)
+        curwnd.move(0, 0)
+        srscan()
+	if mode != 2:
+	    setwnd(status_window)
+	    status_window.clear()
+	    status_window.move(0, 0)
+	    setwnd(report_window)
+	    report_window.clear()
+	    report_window.move(0, 0)
+	    status(0)
+	    setwnd(lrscan_window)
+	    lrscan_window.clear()
+	    lrscan_window.move(0, 0)
+	    lrscan()
+
+def put_srscan_sym(w, sym):
+    "Emit symbol for short-range scan."
+    srscan_window.move(w.x+1, w.y*2+2)
+    srscan_window.addch(sym)
+    srscan_window.refresh()
+
+def boom(w):
+    "Enemy fall down, go boom."  
+    if game.options & OPTION_CURSES:
+	drawmaps(2)
+	setwnd(srscan_window)
+	srscan_window.attron(curses.A_REVERSE)
+	put_srscan_sym(w, game.quad[w.x][w.y])
+	#sound(500)
+	#delay(1000)
+	#nosound()
+	srscan_window.attroff(curses.A_REVERSE)
+	put_srscan_sym(w, game.quad[w.x][w.y])
+	curses.delay_output(500)
+	setwnd(message_window) 
+
+def warble():
+    "Sound and visual effects for teleportation."
+    if game.options & OPTION_CURSES:
+	drawmaps(2)
+	setwnd(message_window)
+	#sound(50)
+    prouts("     . . . . .     ")
+    if game.options & OPTION_CURSES:
+	#curses.delay_output(1000)
+	#nosound()
+        pass
+
+def tracktorpedo(w, l, i, n, iquad):
+    "Torpedo-track animation." 
+    if not game.options & OPTION_CURSES:
+	if l == 1:
+	    if n != 1:
+		skip(1)
+		proutn(_("Track for torpedo number %d-  " % i))
+	    else:
+		skip(1)
+		proutn(_("Torpedo track- "))
+	elif l==4 or l==9: 
+	    skip(1)
+	proutn("%d - %d   " % (w.x, w.y))
+    else:
+	if not damaged(DSRSENS) or game.condition=="docked":
+	    if i != 1 and l == 1:
+		drawmaps(2)
+		curses.delay_output(400)
+	    if (iquad==IHDOT) or (iquad==IHBLANK):
+		put_srscan_sym(w, '+')
+		#sound(l*10)
+		#curses.delay_output(100)
+		#nosound()
+		put_srscan_sym(w, iquad)
+	    else:
+		curwnd.attron(curses.A_REVERSE)
+		put_srscan_sym(w, iquad)
+		#sound(500)
+		#curses.delay_output(1000)
+		#nosound()
+		curwnd.attroff(curses.A_REVERSE)
+		put_srscan_sym(w, iquad)
+	else:
+	    proutn("%d - %d   " % (w.x, w.y))
+
+def makechart():
+    "Display the current galaxy chart."
+    if game.options & OPTION_CURSES:
+	setwnd(message_window)
+	message_window.clear()
+    chart()
+    if game.options & OPTION_TTY:
+	skip(1)
+
+NSYM	= 14
+
+def prstat(txt, data):
+    proutn(txt)
+    if game.options & OPTION_CURSES:
+	skip(1)
+	setwnd(status_window)
+    else:
+        proutn(" " * NSYM - len(tx))
+    vproutn(data)
+    skip(1)
+    if game.options & OPTION_CURSES:
+	setwnd(report_window)



From esr at mail.berlios.de  Wed Oct  4 18:19:36 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 4 Oct 2006 18:19:36 +0200
Subject: [Sst-commit-watch] r663 - trunk/src
Message-ID: <200610041619.k94GJa3c009063@sheep.berlios.de>

Author: esr
Date: 2006-10-04 18:19:35 +0200 (Wed, 04 Oct 2006)
New Revision: 663

Modified:
   trunk/src/sst.py
Log:
Code from moving.c incorporated into Python translation.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-04 14:54:15 UTC (rev 662)
+++ trunk/src/sst.py	2006-10-04 16:19:35 UTC (rev 663)
@@ -1333,7 +1333,7 @@
     if shoved:
 	game.quad[w.x][w.y]=IHDOT
 	game.quad[jw.x][jw.y]=iquad
-	prout(_(" displaced by blast to %s "), cramlc(sector, jw))
+	prout(_(" displaced by blast to Sector %s ") % jw)
 	for ll in range(1, game.nenhere+1):
 	    game.kdist[ll] = game.kavgd[ll] = distance(game.sector,game.ks[ll])
 	sortklings()
@@ -1525,7 +1525,7 @@
 	    proutn(_("down "))
 	else:
 	    proutn(_("damaged, "))
-    prout(_("%d%%,   torpedoes left %d"), percent, game.torps)
+    prout(_("%d%%,   torpedoes left %d") % (percent, game.torps))
     # Check if anyone was hurt 
     if hitmax >= 200 or hittot >= 500:
 	icas= hittot*Rand()*0.015
@@ -1645,7 +1645,7 @@
 	    huh()
 	    return
 	elif key == IHEOL:
-	    prout(_("%d torpedoes left."), game.torps)
+	    prout(_("%d torpedoes left.") % game.torps)
 	    proutn(_("Number of torpedoes to fire- "))
 	    key = scan()
 	else: # key == IHREAL  {
@@ -1690,7 +1690,7 @@
     if i == 1 and key == IHEOL:
 	# prompt for each one 
 	for i in range(1, n+1):
-	    proutn(_("Target sector for torpedo number %d- "), i)
+	    proutn(_("Target sector for torpedo number %d- ") % i)
 	    key = scan()
 	    if key != IHREAL:
 		huh()
@@ -1715,7 +1715,7 @@
 	    # misfire! 
 	    r = (Rand()+1.2) * r
 	    if n>1:
-		prouts(_("***TORPEDO NUMBER %d MISFIRES"), i)
+		prouts(_("***TORPEDO NUMBER %d MISFIRES") % i)
 	    else:
 		prouts(_("***TORPEDO MISFIRES."))
 	    skip(1)
@@ -1769,7 +1769,7 @@
     if icas:
 	skip(1)
 	prout(_("McCoy to bridge- \"Severe radiation burns, Jim."))
-	prout(_("  %d casualties so far.\""), icas)
+	prout(_("  %d casualties so far.\"") % icas)
 	game.casual += icas
 	game.state.crew -= icas
     skip(1)
@@ -1820,8 +1820,7 @@
 	else: # decide whether or not to emasculate klingon 
 	    if kpow > 0 and Rand() >= 0.9 and \
 		kpow <= ((0.4 + 0.4*Rand())*kpini):
-		prout(_("***Mr. Spock-  \"Captain, the vessel at %s"),
-		      cramlc(sector, w))
+		prout(_("***Mr. Spock-  \"Captain, the vessel at Sector %s"), w)
 		prout(_("   has just lost its firepower.\""))
 		game.kpower[kk] = -kpow
         kk += 1
@@ -1910,8 +1909,7 @@
 	    no = True
 	    key = scan()
 	if key != IHREAL and game.nenhere != 0:
-	    prout(_("Phasers locked on target. Energy available: %.2f"),
-		  avail)
+	    prout(_("Phasers locked on target. Energy available: %.2f")%avail)
 	irec=0
         while True:
 	    chew()
@@ -1919,7 +1917,7 @@
 		for i in range(1, game.nenhere+1):
 		    irec += math.fabs(game.kpower[i])/(PHASEFAC*math.pow(0.90,game.kdist[i]))*(1.01+0.05*Rand()) + 1.0
 	    kz=1
-	    proutn(_("%d units required. "), irec)
+	    proutn(_("%d units required. ") % irec)
 	    chew()
 	    proutn(_("Units to fire= "))
 	    key = scan()
@@ -1973,7 +1971,7 @@
 		    proutn(_("excess "))
 		prout(_("phaser energy."))
 	    else:
-		prout(_("%d expended on empty space."), int(extra))
+		prout(_("%d expended on empty space.") % int(extra))
     elif automode == "FORCEMAN":
 	chew()
 	key = IHEOL
@@ -1993,7 +1991,7 @@
 	    aim = game.ks[k]
 	    ienm = game.quad[aim.x][aim.y]
 	    if msgflag:
-		proutn(_("Energy available= %.2f") % avail-0.006)
+		proutn(_("Energy available= %.2f") % (avail-0.006))
 		skip(1)
 		msgflag = False
 		rpow = 0.0
@@ -2013,7 +2011,7 @@
 		kz = k
 		proutn("(")
 		if not damaged(DCOMPTR):
-		    proutn("%d", irec)
+		    proutn("%d" % irec)
 		else:
 		    proutn("??")
 		proutn(")  ")
@@ -2249,7 +2247,7 @@
 	    if game.future[l].date < datemin:
 		evcode = l
 		if idebug:
-		    prout("== Event %d fires" % (evcode))
+		    prout("== Event %d fires" % evcode)
 		datemin = game.future[l].date
 	xtime = datemin-game.state.date
 	game.state.date = datemin
@@ -2370,7 +2368,7 @@
 	    skip(1)
 	    proutn(_("Lt. Uhura-  \"Captain, the starbase in Quadrant %s") % game.battle)
 	    prout(_("   reports that it is under attack and that it can"))
-	    proutn(_("   hold out only until stardate %d" % (int(scheduled(FCDBAS)))))
+	    proutn(_("   hold out only until stardate %d") % (int(scheduled(FCDBAS))))
             prout(".\"")
 	    if cancelrest():
                 return
@@ -2470,8 +2468,8 @@
 
 	    # tell the captain about it if we can 
 	    if not damaged(DRADIO) or game.condition == "docked":
-		prout(_("Uhura- Captain, %s in Quadrant %s reports it is under attack" \
-                        % (systnames[q.planet], `w`)))
+		prout(_("Uhura- Captain, %s in Quadrant %s reports it is under attack") \
+                        % (q.planet, `w`))
 		prout(_("by a Klingon invasion fleet."))
 		if cancelrest():
 		    return
@@ -2490,9 +2488,9 @@
 
 	    # report the disaster if we can 
 	    if not damaged(DRADIO) or game.condition == "docked":
-		prout(_("Uhura- We've lost contact with starsystem %s" % \
-                        systnames[q.planet]))
-		prout(_("in Quadrant %s.\n" % ev.quadrant))
+		prout(_("Uhura- We've lost contact with starsystem %s") % \
+                        q.planet)
+		prout(_("in Quadrant %s.\n") % ev.quadrant)
 	elif evcode == FREPRO:		# Klingon reproduces 
 	    # If we ever switch to a real event queue, we'll need to
 	    # explicitly retrieve and restore the x and y.
@@ -2535,13 +2533,12 @@
 	    if not damaged(DRADIO) or game.condition == "docked":
 		if same(game.quadrant, w):
 		    prout(_("Spock- sensors indicate the Klingons have"))
-		    prout(_("launched a warship from %s." \
-                            % systnames[q.planet]))
+		    prout(_("launched a warship from %s.") % q.planet)
 		else:
 		    prout(_("Uhura- Starfleet reports increased Klingon activity"))
 		    if q.planet != NOPLANET:
-			proutn(_("near %s" % systnames[q.planet]))
-		    prout(_("in %s.\n" % cramlc(quadrant, w)))
+			proutn(_("near %s") % q.planet)
+		    prout(_("in Quadrant %s.") % w)
 				
 def wait():
     # wait on events 
@@ -2570,7 +2567,7 @@
 	if delay <= 0:
 	    game.resting = False
 	if not game.resting:
-	    prout(_("%d stardates left." % int(game.state.remtime)))
+	    prout(_("%d stardates left.") % int(game.state.remtime))
 	    return
 	temp = game.optime = delay
 	if game.nenhere:
@@ -2792,8 +2789,8 @@
 	# it isn't here, or we just entered (treat as enroute) 
 	if not damaged(DRADIO) or game.condition == "docked":
 	    skip(1)
-	    prout(_("Message from Starfleet Command       Stardate %.2f" % game.state.date))
-	    prout(_("     Supernova in Quadrant %s; caution advised." % nq))
+	    prout(_("Message from Starfleet Command       Stardate %.2f") % game.state.date)
+	    prout(_("     Supernova in Quadrant %s; caution advised.") % nq)
     else:
 	ns = coord()
 	# we are in the quadrant! 
@@ -2810,7 +2807,7 @@
 	skip(1)
 	prouts(_("***RED ALERT!  RED ALERT!"))
 	skip(1)
-	prout(_("***Incipient supernova detected at Sector %s" % ns))
+	prout(_("***Incipient supernova detected at Sector %s") % ns)
 	if square(ns.x-game.sector.x) + square(ns.y-game.sector.y) <= 2.1:
 	    proutn(_("Emergency override attempts t"))
 	    prouts("***************")
@@ -2870,7 +2867,7 @@
 	skip(2)
 	if not induced:
 	    prout(_("Lucky you!"))
-	proutn(_("A supernova in %s has just destroyed the last Klingons." % nq))
+	proutn(_("A supernova in %s has just destroyed the last Klingons.") % nq)
 	finish(FWON)
 	return
     # if some Klingons remain, continue or die in supernova 
@@ -2964,7 +2961,7 @@
     igotit = False
     game.alldone = True
     skip(3)
-    prout(_("It is stardate %.1f." % (game.state.date)))
+    prout(_("It is stardate %.1f.") % game.state.date)
     skip(1)
     if ifin == FWON: # Game has been won
 	if game.state.nromrem != 0:
@@ -3198,47 +3195,47 @@
     skip(2)
     prout(_("Your score --"))
     if game.inrom - game.state.nromrem:
-	prout(_("%6d Romulans destroyed                 %5d" %
-	      (game.inrom - game.state.nromrem, 20*(game.inrom - game.state.nromrem))))
+	prout(_("%6d Romulans destroyed                 %5d") %
+	      (game.inrom - game.state.nromrem, 20*(game.inrom - game.state.nromrem)))
     if game.state.nromrem:
-	prout(_("%6d Romulans captured                  %5d" %
-	      (game.state.nromrem, game.state.nromrem)))
+	prout(_("%6d Romulans captured                  %5d") %
+	      (game.state.nromrem, game.state.nromrem))
     if game.inkling - game.state.remkl:
-	prout(_("%6d ordinary Klingons destroyed        %5d" %
-	      (game.inkling - game.state.remkl, 10*(game.inkling - game.state.remkl))))
+	prout(_("%6d ordinary Klingons destroyed        %5d") %
+	      (game.inkling - game.state.remkl, 10*(game.inkling - game.state.remkl)))
     if game.incom - game.state.remcom:
-	prout(_("%6d Klingon commanders destroyed       %5d" %
-	      (game.incom - game.state.remcom, 50*(game.incom - game.state.remcom))))
+	prout(_("%6d Klingon commanders destroyed       %5d") %
+	      (game.incom - game.state.remcom, 50*(game.incom - game.state.remcom)))
     if game.inscom - game.state.nscrem:
-	prout(_("%6d Super-Commander destroyed          %5d" %
-	      (game.inscom - game.state.nscrem, 200*(game.inscom - game.state.nscrem))))
+	prout(_("%6d Super-Commander destroyed          %5d") %
+	      (game.inscom - game.state.nscrem, 200*(game.inscom - game.state.nscrem)))
     if ithperd:
-	prout(_("%6.2f Klingons per stardate              %5d" %
-	      (perdate, ithperd)))
+	prout(_("%6.2f Klingons per stardate              %5d") %
+	      (perdate, ithperd))
     if game.state.starkl:
-	prout(_("%6d stars destroyed by your action     %5d" %
-	      (game.state.starkl, -5*game.state.starkl)))
+	prout(_("%6d stars destroyed by your action     %5d") %
+	      (game.state.starkl, -5*game.state.starkl))
     if game.state.nplankl:
-	prout(_("%6d planets destroyed by your action   %5d" %
-	      (game.state.nplankl, -10*game.state.nplankl)))
+	prout(_("%6d planets destroyed by your action   %5d") %
+	      (game.state.nplankl, -10*game.state.nplankl))
     if (game.options & OPTION_WORLDS) and game.state.nworldkl:
-	prout(_("%6d inhabited planets destroyed by your action   %5d" %
-	      (game.state.nplankl, -300*game.state.nworldkl)))
+	prout(_("%6d inhabited planets destroyed by your action   %5d") %
+	      (game.state.nplankl, -300*game.state.nworldkl))
     if game.state.basekl:
-	prout(_("%6d bases destroyed by your action     %5d" %
-	      (game.state.basekl, -100*game.state.basekl)))
+	prout(_("%6d bases destroyed by your action     %5d") %
+	      (game.state.basekl, -100*game.state.basekl))
     if game.nhelp:
-	prout(_("%6d calls for help from starbase       %5d" %
-	      (game.nhelp, -45*game.nhelp)))
+	prout(_("%6d calls for help from starbase       %5d") %
+	      (game.nhelp, -45*game.nhelp))
     if game.casual:
-	prout(_("%6d casualties incurred                %5d" %
-	      (game.casual, -game.casual)))
+	prout(_("%6d casualties incurred                %5d") %
+	      (game.casual, -game.casual))
     if game.abandoned:
-	prout(_("%6d crew abandoned in space            %5d" %
-	      (game.abandoned, -3*game.abandoned)))
+	prout(_("%6d crew abandoned in space            %5d") %
+	      (game.abandoned, -3*game.abandoned))
     if klship:
-	prout(_("%6d ship(s) lost or destroyed          %5d" %
-	      (klship, -100*klship)))
+	prout(_("%6d ship(s) lost or destroyed          %5d") %
+	      (klship, -100*klship))
     if not game.alive:
 	prout(_("Penalty for getting yourself killed        -200"))
     if game.gamewon:
@@ -3248,9 +3245,9 @@
 	elif game.skill ==  SKILL_GOOD: 	proutn(_("Good game    "))
 	elif game.skill ==  SKILL_EXPERT:	proutn(_("Expert game  "))
 	elif game.skill ==  SKILL_EMERITUS:	proutn(_("Emeritus game"))
-	prout("           %5d" % (iwon))
+	prout("           %5d" % iwon)
     skip(1)
-    prout(_("TOTAL SCORE                               %5d" % iscore))
+    prout(_("TOTAL SCORE                               %5d") % iscore)
 
 def plaque():
     # emit winner's commemmorative plaque 
@@ -3305,10 +3302,10 @@
     else:
         fp.write(_(" Cheat level\n\n"))
     timestring = ctime()
-    fp.write(_("                                                 This day of %.6s %.4s, %.8s\n\n" %
-                    (timestring+4, timestring+20, timestring+11)))
-    fp.write(_("                                                        Your score:  %d\n\n" % iscore))
-    fp.write(_("                                                    Klingons per stardate:  %.2f\n" % perdate))
+    fp.write(_("                                                 This day of %.6s %.4s, %.8s\n\n") %
+                    (timestring+4, timestring+20, timestring+11))
+    fp.write(_("                                                        Your score:  %d\n\n") % iscore)
+    fp.write(_("                                                    Klingons per stardate:  %.2f\n") % perdate)
     fp.close()
 
 # Code from io.c begins here
@@ -3603,7 +3600,7 @@
 	if l == 1:
 	    if n != 1:
 		skip(1)
-		proutn(_("Track for torpedo number %d-  " % i))
+		proutn(_("Track for torpedo number %d-  ") % i)
 	    else:
 		skip(1)
 		proutn(_("Torpedo track- "))
@@ -3654,3 +3651,1002 @@
     skip(1)
     if game.options & OPTION_CURSES:
 	setwnd(report_window)
+
+# Code from moving.c begins here
+
+def imove(novapush):
+    # movement execution for warp, impulse, supernova, and tractor-beam events 
+    w = coord(); final = coord()
+    trbeam = False
+
+    def no_quad_change():
+        # No quadrant change -- compute new avg enemy distances 
+        game.quad[game.sector.x][game.sector.y] = game.ship
+        if game.nenhere:
+            for m in range(1, game.nenhere+1):
+                finald = distance(w, game.ks[m])
+                game.kavgd[m] = 0.5 * (finald+game.kdist[m])
+                game.kdist[m] = finald
+            sortklings()
+            if not game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
+                attack(False)
+            for m in range(1, game.nenhere+1):
+                game.kavgd[m] = game.kdist[m]
+        newcnd()
+        drawmaps(0)
+        setwnd(message_window)
+
+    w.x = w.y = 0
+    if game.inorbit:
+	prout(_("Helmsman Sulu- \"Leaving standard orbit.\""))
+	game.inorbit = False
+
+    angle = ((15.0 - game.direc) * 0.5235988)
+    deltax = -math.sin(angle)
+    deltay = math.cos(angle)
+    if math.fabs(deltax) > math.fabs(deltay):
+	bigger = math.fabs(deltax)
+    else:
+	bigger = math.fabs(deltay)
+		
+    deltay /= bigger
+    deltax /= bigger
+
+    # If tractor beam is to occur, don't move full distance 
+    if game.state.date+game.optime >= scheduled(FTBEAM):
+	trbeam = True
+	game.condition = "red"
+	game.dist = game.dist*(scheduled(FTBEAM)-game.state.date)/game.optime + 0.1
+	game.optime = scheduled(FTBEAM) - game.state.date + 1e-5
+    # Move within the quadrant 
+    game.quad[game.sector.x][game.sector.y] = IHDOT
+    x = game.sector.x
+    y = game.sector.y
+    n = 10.0*game.dist*bigger+0.5
+
+    if n > 0:
+	for m in range(1, n+1):
+            x += deltax
+            y += deltay
+	    w.x = x + 0.5
+	    w.y = y + 0.5
+	    if not VALID_SECTOR(w.x, w.y):
+		# Leaving quadrant -- allow final enemy attack 
+		# Don't do it if being pushed by Nova 
+		if game.nenhere != 0 and not novapush:
+		    newcnd()
+		    for m in range(1, game.nenhere+1):
+			finald = distance(w, game.ks[m])
+			game.kavgd[m] = 0.5 * (finald + game.kdist[m])
+		    #
+		    # Stas Sergeev added the condition
+		    # that attacks only happen if Klingons
+		    # are present and your skill is good.
+		    # 
+		    if game.skill > SKILL_GOOD and game.klhere > 0 and not game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
+			attack(False)
+		    if game.alldone:
+			return
+		# compute final position -- new quadrant and sector 
+		x = QUADSIZE*(game.quadrant.x-1)+game.sector.x
+		y = QUADSIZE*(game.quadrant.y-1)+game.sector.y
+		w.x = x+10.0*game.dist*bigger*deltax+0.5
+		w.y = y+10.0*game.dist*bigger*deltay+0.5
+		# check for edge of galaxy 
+		kinks = 0
+                while True:
+		    kink = 0
+		    if w.x <= 0:
+			w.x = -w.x + 1
+			kink = 1
+		    if w.y <= 0:
+			w.y = -w.y + 1
+			kink = 1
+		    if w.x > GALSIZE*QUADSIZE:
+			w.x = (GALSIZE*QUADSIZE*2)+1 - w.x
+			kink = 1
+		    if w.y > GALSIZE*QUADSIZE:
+			w.y = (GALSIZE*QUADSIZE*2)+1 - w.y
+			kink = 1
+		    if kink:
+			kinks = 1
+		if not kink:
+                    break
+
+		if kinks:
+		    game.nkinks += 1
+		    if game.nkinks == 3:
+			# Three strikes -- you're out! 
+			finish(FNEG3)
+			return
+		    skip(1)
+		    prout(_("YOU HAVE ATTEMPTED TO CROSS THE NEGATIVE ENERGY BARRIER"))
+		    prout(_("AT THE EDGE OF THE GALAXY.  THE THIRD TIME YOU TRY THIS,"))
+		    prout(_("YOU WILL BE DESTROYED."))
+		# Compute final position in new quadrant 
+		if trbeam: # Don't bother if we are to be beamed 
+		    return
+		game.quadrant.x = (w.x+(QUADSIZE-1))/QUADSIZE
+		game.quadrant.y = (w.y+(QUADSIZE-1))/QUADSIZE
+		game.sector.x = w.x - QUADSIZE*(game.quadrant.x-1)
+		game.sector.y = w.y - QUADSIZE*(game.quadrant.y-1)
+		skip(1)
+		prout(_("Entering Quadrant %s.") % game.quadrant)
+		game.quad[game.sector.x][game.sector.y] = game.ship
+		newqad(False)
+		if game.skill>SKILL_NOVICE:
+		    attack(False)  
+		return
+	    iquad = game.quad[w.x][w.y]
+	    if iquad != IHDOT:
+		# object encountered in flight path 
+		stopegy = 50.0*game.dist/game.optime
+		game.dist = distance(game.sector, w) / (QUADSIZE * 1.0)
+                if iquad in (IHT. IHK, OHC, IHS, IHR, IHQUEST):
+		    game.sector = w
+		    ram(False, iquad, game.sector)
+		    final = game.sector
+		elif iquad == IHBLANK:
+		    skip(1)
+		    prouts(_("***RED ALERT!  RED ALERT!"))
+		    skip(1)
+		    proutn("***")
+		    crmshp()
+		    proutn(_(" pulled into black hole at Sector %s") % w)
+		    #
+		    # Getting pulled into a black hole was certain
+		    # death in Almy's original.  Stas Sergeev added a
+		    # possibility that you'll get timewarped instead.
+		    # 
+		    n=0
+		    for m in range(0, NDEVICES):
+			if game.damage[m]>0: 
+			    n += 1
+		    probf=math.pow(1.4,(game.energy+game.shield)/5000.0-1.0)*math.pow(1.3,1.0/(n+1)-1.0)
+		    if (game.options & OPTION_BLKHOLE) and Rand()>probf: 
+			timwrp()
+		    else: 
+			finish(FHOLE)
+		    return
+		else:
+		    # something else 
+		    skip(1)
+		    crmshp()
+		    if iquad == IHWEB:
+			proutn(_(" encounters Tholian web at %s;") % w)
+		    else:
+			proutn(_(" blocked by object at %s;") % w)
+		    proutn(_("Emergency stop required "))
+		    prout(_("%2d units of energy.") % int(stopegy))
+		    game.energy -= stopegy
+		    final.x = x-deltax+0.5
+		    final.y = y-deltay+0.5
+		    game.sector = final
+		    if game.energy <= 0:
+			finish(FNRG)
+			return
+                # We're here!
+		no_quad_change()
+                return
+	game.dist = distance(game.sector, w) / (QUADSIZE * 1.0)
+	game.sector = w
+    final = game.sector
+    no_quad_change()
+    return
+
+def dock(verbose):
+    # dock our ship at a starbase 
+    chew()
+    if game.condition == "docked" and verbose:
+	prout(_("Already docked."))
+	return
+    if game.inorbit:
+	prout(_("You must first leave standard orbit."))
+	return
+    if not is_valid(game.base) or abs(game.sector.x-game.base.x) > 1 or abs(game.sector.y-game.base.y) > 1:
+	crmshp()
+	prout(_(" not adjacent to base."))
+	return
+    game.condition = "docked"
+    if "verbose":
+	prout(_("Docked."))
+    game.ididit = True
+    if game.energy < game.inenrg:
+	game.energy = game.inenrg
+    game.shield = game.inshld
+    game.torps = game.intorps
+    game.lsupres = game.inlsr
+    game.state.crew = FULLCREW
+    if not damaged(DRADIO) and \
+	((is_scheduled(FCDBAS) or game.isatb == 1) and not game.iseenit):
+	# get attack report from base 
+	prout(_("Lt. Uhura- \"Captain, an important message from the starbase:\""))
+	attackreport(False)
+	game.iseenit = True
+
+# 
+# This program originally required input in terms of a (clock)
+# direction and distance. Somewhere in history, it was changed to
+# cartesian coordinates. So we need to convert.  Probably
+# "manual" input should still be done this way -- it's a real
+# pain if the computer isn't working! Manual mode is still confusing
+# because it involves giving x and y motions, yet the coordinates
+# are always displayed y - x, where +y is downward!
+# 
+
+def getcd(isprobe, akey):
+    # get course and distance 
+    irowq=game.quadrant.x; icolq=game.quadrant.y; key=0
+    navmode = "unspecified"
+    itemp = "curt"
+    incr = coord()
+    iprompt = False
+
+    # Get course direction and distance. If user types bad values, return
+    # with DIREC = -1.0.
+    game.direc = -1.0
+	
+    if game.landed and not isprobe:
+	prout(_("Dummy! You can't leave standard orbit until you"))
+	proutn(_("are back aboard the ship."))
+	chew()
+	return
+    while navmode == "unspecified":
+	if damaged(DNAVSYS):
+	    if isprobe:
+		prout(_("Computer damaged; manual navigation only"))
+	    else:
+		prout(_("Computer damaged; manual movement only"))
+	    chew()
+	    navmode = "manual"
+	    key = IHEOL
+	    break
+	if isprobe and akey != -1:
+	    # For probe launch, use pre-scanned value first time 
+	    key = akey
+	    akey = -1
+	else: 
+	    key = scan()
+
+	if key == IHEOL:
+	    proutn(_("Manual or automatic- "))
+	    iprompt = True
+	    chew()
+	elif key == IHALPHA:
+            if isit("manual"):
+		navmode = "manual"
+		key = scan()
+		break
+            elif isit("automatic"):
+		navmode = "automatic"
+		key = scan()
+		break
+	    else:
+		huh()
+		chew()
+		return
+	else: # numeric 
+	    if isprobe:
+		prout(_("(Manual navigation assumed.)"))
+	    else:
+		prout(_("(Manual movement assumed.)"))
+	    navmode = "manual"
+	    break
+
+    if navmode == "automatic":
+	while key == IHEOL:
+	    if isprobe:
+		proutn(_("Target quadrant or quadrant&sector- "))
+	    else:
+		proutn(_("Destination sector or quadrant&sector- "))
+	    chew()
+	    iprompt = True
+	    key = scan()
+
+	if key != IHREAL:
+	    huh()
+	    return
+	xi = aaitem
+	key = scan()
+	if key != IHREAL:
+	    huh()
+	    return
+	xj = aaitem
+	key = scan()
+	if key == IHREAL:
+	    # both quadrant and sector specified 
+	    xk = aaitem
+	    key = scan()
+	    if key != IHREAL:
+		huh()
+		return
+	    xl = aaitem
+
+	    irowq = xi + 0.5
+	    icolq = xj + 0.5
+	    incr.y = xk + 0.5
+	    incr.x = xl + 0.5
+	else:
+	    if isprobe:
+		# only quadrant specified -- go to center of dest quad 
+		irowq = xi + 0.5
+		icolq = xj + 0.5
+		incr.y = incr.x = 5
+	    else:
+		incr.y = xi + 0.5
+		incr.x = xj + 0.5
+	    itemp = "normal"
+	if not VALID_QUADRANT(icolq,irowq) or not VALID_SECTOR(incr.x,incr.y):
+	    huh()
+	    return
+	skip(1)
+	if not isprobe:
+	    if itemp > "curt":
+		if iprompt:
+		    prout(_("Helmsman Sulu- \"Course locked in for Sector %s.\"") % incr)
+	    else:
+		prout(_("Ensign Chekov- \"Course laid in, Captain.\""))
+	deltax = icolq - game.quadrant.y + 0.1*(incr.x-game.sector.y)
+	deltay = game.quadrant.x - irowq + 0.1*(game.sector.x-incr.y)
+    else: # manual 
+	while key == IHEOL:
+	    proutn(_("X and Y displacements- "))
+	    chew()
+	    iprompt = True
+	    key = scan()
+	itemp = "verbose"
+	if key != IHREAL:
+	    huh()
+	    return
+	deltax = aaitem
+	key = scan()
+	if key != IHREAL:
+	    huh()
+	    return
+	deltay = aaitem
+    # Check for zero movement 
+    if deltax == 0 and deltay == 0:
+	chew()
+	return
+    if itemp == "verbose" and not isprobe:
+	skip(1)
+	prout(_("Helmsman Sulu- \"Aye, Sir.\""))
+    game.dist = math.sqrt(deltax*deltax + deltay*deltay)
+    game.direc = math.atan2(deltax, deltay)*1.90985932
+    if game.direc < 0.0:
+	game.direc += 12.0
+    chew()
+    return
+
+def impulse():
+    # move under impulse power 
+    game.ididit = False
+    if damaged(DIMPULS):
+	chew()
+	skip(1)
+	prout(_("Engineer Scott- \"The impulse engines are damaged, Sir.\""))
+	return
+    if game.energy > 30.0:
+	getcd(False, 0)
+	if game.direc == -1.0:
+	    return
+	power = 20.0 + 100.0*game.dist
+    else:
+	power = 30.0
+
+    if power >= game.energy:
+	# Insufficient power for trip 
+	skip(1)
+	prout(_("First Officer Spock- \"Captain, the impulse engines"))
+	prout(_("require 20.0 units to engage, plus 100.0 units per"))
+	if game.energy > 30:
+	    proutn(_("quadrant.  We can go, therefore, a maximum of %d") %
+                     int(0.01 * (game.energy-20.0)-0.05))
+	    prout(_(" quadrants.\""))
+	else:
+	    prout(_("quadrant.  They are, therefore, useless.\""))
+	chew()
+	return
+    # Make sure enough time is left for the trip 
+    game.optime = game.dist/0.095
+    if game.optime >= game.state.remtime:
+	prout(_("First Officer Spock- \"Captain, our speed under impulse"))
+	prout(_("power is only 0.95 sectors per stardate. Are you sure"))
+	proutn(_("we dare spend the time?\" "))
+	if ja() == False:
+	    return
+    # Activate impulse engines and pay the cost 
+    imove(False)
+    game.ididit = True
+    if game.alldone:
+	return
+    power = 20.0 + 100.0*game.dist
+    game.energy -= power
+    game.optime = game.dist/0.095
+    if game.energy <= 0:
+	finish(FNRG)
+    return
+
+def warp(timewarp):
+    # move under warp drive 
+    blooey = False; twarp = False
+    if not timewarp: # Not WARPX entry 
+	game.ididit = False
+	if game.damage[DWARPEN] > 10.0:
+	    chew()
+	    skip(1)
+	    prout(_("Engineer Scott- \"The impulse engines are damaged, Sir.\""))
+	    return
+	if damaged(DWARPEN) and game.warpfac > 4.0:
+	    chew()
+	    skip(1)
+	    prout(_("Engineer Scott- \"Sorry, Captain. Until this damage"))
+	    prout(_("  is repaired, I can only give you warp 4.\""))
+	    return
+			
+	# Read in course and distance 
+	getcd(False, 0)
+	if game.direc == -1.0:
+	    return
+
+	# Make sure starship has enough energy for the trip 
+	power = (game.dist+0.05)*game.warpfac*game.warpfac*game.warpfac*(game.shldup+1)
+	if power >= game.energy:
+	    # Insufficient power for trip 
+	    game.ididit = False
+	    skip(1)
+	    prout(_("Engineering to bridge--"))
+	    if not game.shldup or 0.5*power > game.energy:
+		iwarp = math.pow((game.energy/(game.dist+0.05)), 0.333333333)
+		if iwarp <= 0:
+		    prout(_("We can't do it, Captain. We don't have enough energy."))
+		else:
+		    proutn(_("We don't have enough energy, but we could do it at warp %d") % iwarp)
+		    if game.shldup:
+			prout(",")
+			prout(_("if you'll lower the shields."))
+		    else:
+			prout(".")
+	    else:
+		prout(_("We haven't the energy to go that far with the shields up."))
+	    return
+						
+	# Make sure enough time is left for the trip 
+	game.optime = 10.0*game.dist/game.wfacsq
+	if game.optime >= 0.8*game.state.remtime:
+	    skip(1)
+	    prout(_("First Officer Spock- \"Captain, I compute that such"))
+	    proutn(_("  a trip would require approximately %2.0f") %
+		   (100.0*game.optime/game.state.remtime))
+	    prout(_(" percent of our"))
+	    proutn(_("  remaining time.  Are you sure this is wise?\" "))
+	    if ja() == False:
+		game.ididit = False
+		game.optime=0 
+		return
+    # Entry WARPX 
+    if game.warpfac > 6.0:
+	# Decide if engine damage will occur 
+	prob = game.dist*(6.0-game.warpfac)*(6.0-game.warpfac)/66.666666666
+	if prob > Rand():
+	    blooey = True
+	    game.dist = Rand()*game.dist
+	# Decide if time warp will occur 
+	if 0.5*game.dist*math.pow(7.0,game.warpfac-10.0) > Rand():
+	    twarp = True
+	if idebug and game.warpfac==10 and not twarp:
+	    blooey = False
+	    proutn("=== Force time warp? ")
+	    if ja() == True:
+		twarp = True
+	if blooey or twarp:
+	    # If time warp or engine damage, check path 
+	    # If it is obstructed, don't do warp or damage 
+	    angle = ((15.0-game.direc)*0.5235998)
+	    deltax = -math.sin(angle)
+	    deltay = math.cos(angle)
+	    if math.fabs(deltax) > math.fabs(deltay):
+		bigger = math.fabs(deltax)
+	    else:
+		bigger = math.fabs(deltay)
+			
+	    deltax /= bigger
+	    deltay /= bigger
+	    n = 10.0 * game.dist * bigger +0.5
+	    x = game.sector.x
+	    y = game.sector.y
+	    for l in range(1, n+1):
+		x += deltax
+		ix = x + 0.5
+		y += deltay
+		iy = y +0.5
+		if not VALID_SECTOR(ix, iy):
+		    break
+		if game.quad[ix][iy] != IHDOT:
+		    blooey = False
+		    twarp = False
+				
+
+    # Activate Warp Engines and pay the cost 
+    imove(False)
+    if game.alldone:
+	return
+    game.energy -= game.dist*game.warpfac*game.warpfac*game.warpfac*(game.shldup+1)
+    if game.energy <= 0:
+	finish(FNRG)
+    game.optime = 10.0*game.dist/game.wfacsq
+    if twarp:
+	timwrp()
+    if blooey:
+	game.damage[DWARPEN] = game.damfac*(3.0*Rand()+1.0)
+	skip(1)
+	prout(_("Engineering to bridge--"))
+	prout(_("  Scott here.  The warp engines are damaged."))
+	prout(_("  We'll have to reduce speed to warp 4."))
+    game.ididit = True
+    return
+
+def setwarp():
+    # change the warp factor 	
+    while True:
+        key=scan()
+        if key != IHEOL:
+            break
+	chew()
+	proutn(_("Warp factor- "))
+    chew()
+    if key != IHREAL:
+	huh()
+	return
+    if game.damage[DWARPEN] > 10.0:
+	prout(_("Warp engines inoperative."))
+	return
+    if damaged(DWARPEN) and aaitem > 4.0:
+	prout(_("Engineer Scott- \"I'm doing my best, Captain,"))
+	prout(_("  but right now we can only go warp 4.\""))
+	return
+    if aaitem > 10.0:
+	prout(_("Helmsman Sulu- \"Our top speed is warp 10, Captain.\""))
+	return
+    if aaitem < 1.0:
+	prout(_("Helmsman Sulu- \"We can't go below warp 1, Captain.\""))
+	return
+    oldfac = game.warpfac
+    game.warpfac = aaitem
+    game.wfacsq=game.warpfac*game.warpfac
+    if game.warpfac <= oldfac or game.warpfac <= 6.0:
+	prout(_("Helmsman Sulu- \"Warp factor %d, Captain.\"") %
+	       int(game.warpfac))
+	return
+    if game.warpfac < 8.00:
+	prout(_("Engineer Scott- \"Aye, but our maximum safe speed is warp 6.\""))
+	return
+    if game.warpfac == 10.0:
+	prout(_("Engineer Scott- \"Aye, Captain, we'll try it.\""))
+	return
+    prout(_("Engineer Scott- \"Aye, Captain, but our engines may not take it.\""))
+    return
+
+def atover(igrab):
+    # cope with being tossed out of quadrant by supernova or yanked by beam 
+
+    chew()
+    # is captain on planet? 
+    if game.landed:
+	if damaged(DTRANSP):
+	    finish(FPNOVA)
+	    return
+	prout(_("Scotty rushes to the transporter controls."))
+	if game.shldup:
+	    prout(_("But with the shields up it's hopeless."))
+	    finish(FPNOVA)
+	prouts(_("His desperate attempt to rescue you . . ."))
+	if Rand() <= 0.5:
+	    prout(_("fails."))
+	    finish(FPNOVA)
+	    return
+	prout(_("SUCCEEDS!"))
+	if game.imine:
+	    game.imine = False
+	    proutn(_("The crystals mined were "))
+	    if Rand() <= 0.25:
+		prout(_("lost."))
+	    else:
+		prout(_("saved."))
+		game.icrystl = True
+    if igrab:
+	return
+
+    # Check to see if captain in shuttle craft 
+    if game.icraft:
+	finish(FSTRACTOR)
+    if game.alldone:
+	return
+
+    # Inform captain of attempt to reach safety 
+    skip(1)
+    while True:
+	if game.justin:
+	    prouts(_("***RED ALERT!  RED ALERT!"))
+	    skip(1)
+	    proutn(_("The "))
+	    crmshp()
+	    prout(_(" has stopped in a quadrant containing"))
+	    prouts(_("   a supernova."))
+	    skip(2)
+	proutn(_("***Emergency automatic override attempts to hurl "))
+	crmshp()
+	skip(1)
+	prout(_("safely out of quadrant."))
+	if not damaged(DRADIO):
+	    game.state.galaxy[game.quadrant.x][game.quadrant.y].charted = True
+	# Try to use warp engines 
+	if damaged(DWARPEN):
+	    skip(1)
+	    prout(_("Warp engines damaged."))
+	    finish(FSNOVAED)
+	    return
+	game.warpfac = 6.0+2.0*Rand()
+	game.wfacsq = game.warpfac * game.warpfac
+	prout(_("Warp factor set to %d") % int(game.warpfac))
+	power = 0.75*game.energy
+	game.dist = power/(game.warpfac*game.warpfac*game.warpfac*(game.shldup+1))
+	distreq = 1.4142+Rand()
+	if distreq < game.dist:
+	    game.dist = distreq
+	game.optime = 10.0*game.dist/game.wfacsq
+	game.direc = 12.0*Rand()	# How dumb! 
+	game.justin = False
+	game.inorbit = False
+	warp(True)
+	if not game.justin:
+	    # This is bad news, we didn't leave quadrant. 
+	    if game.alldone:
+		return
+	    skip(1)
+	    prout(_("Insufficient energy to leave quadrant."))
+	    finish(FSNOVAED)
+	    return
+	# Repeat if another snova
+        if not game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
+            break
+    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0: 
+	finish(FWON) # Snova killed remaining enemy. 
+
+def timwrp():
+    # let's do the time warp again 
+    prout(_("***TIME WARP ENTERED."))
+    if game.state.snap and Rand() < 0.5:
+	# Go back in time 
+	prout(_("You are traveling backwards in time %d stardates.") %
+	      int(game.state.date-game.snapsht.date))
+	game.state = game.snapsht
+	game.state.snap = False
+	if game.state.remcom:
+	    schedule(FTBEAM, expran(game.intime/game.state.remcom))
+	    schedule(FBATTAK, expran(0.3*game.intime))
+	schedule(FSNOVA, expran(0.5*game.intime))
+	# next snapshot will be sooner 
+	schedule(FSNAP, expran(0.25*game.state.remtime))
+				
+	if game.state.nscrem:
+	    schedule(FSCMOVE, 0.2777)	    
+	game.isatb = 0
+	unschedule(FCDBAS)
+	unschedule(FSCDBAS)
+	invalidate(game.battle)
+
+	# Make sure Galileo is consistant -- Snapshot may have been taken
+        # when on planet, which would give us two Galileos! 
+	gotit = False
+	for l in range(game.inplan):
+	    if game.state.planets[l].known == "shuttle_down":
+		gotit = True
+		if game.iscraft == "onship" and game.ship==IHE:
+		    prout(_("Chekov-  \"Security reports the Galileo has disappeared, Sir!"))
+		    game.iscraft = "offship"
+	# Likewise, if in the original time the Galileo was abandoned, but
+	# was on ship earlier, it would have vanished -- let's restore it.
+	if game.iscraft == "offship" and not gotit and game.damage[DSHUTTL] >= 0.0:
+	    prout(_("Checkov-  \"Security reports the Galileo has reappeared in the dock!\""))
+	    game.iscraft = "onship"
+	# 
+#	 * There used to be code to do the actual reconstrction here,
+#	 * but the starchart is now part of the snapshotted galaxy state.
+#	 
+	prout(_("Spock has reconstructed a correct star chart from memory"))
+    else:
+	# Go forward in time 
+	game.optime = -0.5*game.intime*math.log(Rand())
+	prout(_("You are traveling forward in time %d stardates.") % int(game.optime))
+	# cheat to make sure no tractor beams occur during time warp 
+	postpone(FTBEAM, game.optime)
+	game.damage[DRADIO] += game.optime
+    newqad(False)
+    events()	# Stas Sergeev added this -- do pending events 
+
+def probe():
+    # launch deep-space probe 
+    # New code to launch a deep space probe 
+    if game.nprobes == 0:
+	chew()
+	skip(1)
+	if game.ship == IHE: 
+	    prout(_("Engineer Scott- \"We have no more deep space probes, Sir.\""))
+	else:
+	    prout(_("Ye Faerie Queene has no deep space probes."))
+	return
+    if damaged(DDSP):
+	chew()
+	skip(1)
+	prout(_("Engineer Scott- \"The probe launcher is damaged, Sir.\""))
+	return
+    if is_scheduled(FDSPROB):
+	chew()
+	skip(1)
+	if damaged(DRADIO) and game.condition != "docked":
+	    prout(_("Spock-  \"Records show the previous probe has not yet"))
+	    prout(_("   reached its destination.\""))
+	else:
+	    prout(_("Uhura- \"The previous probe is still reporting data, Sir.\""))
+	return
+    key = scan()
+
+    if key == IHEOL:
+	# slow mode, so let Kirk know how many probes there are left
+        if game.nprobes == 1:
+            prout(_("1 probe left."))
+        else:
+            prout(_("%d probes left") % game.nprobes)
+	proutn(_("Are you sure you want to fire a probe? "))
+	if ja() == False:
+	    return
+
+    game.isarmed = False
+    if key == IHALPHA and citem == "armed":
+	game.isarmed = True
+	key = scan()
+    elif key == IHEOL:
+	proutn(_("Arm NOVAMAX warhead? "))
+	game.isarmed = ja()
+    getcd(True, key)
+    if game.direc == -1.0:
+	return
+    game.nprobes -= 1
+    angle = ((15.0 - game.direc) * 0.5235988)
+    game.probeinx = -math.sin(angle)
+    game.probeiny = math.cos(angle)
+    if math.fabs(game.probeinx) > math.fabs(game.probeiny):
+	bigger = math.fabs(game.probeinx)
+    else:
+	bigger = math.fabs(game.probeiny)
+		
+    game.probeiny /= bigger
+    game.probeinx /= bigger
+    game.proben = 10.0*game.dist*bigger +0.5
+    game.probex = game.quadrant.x*QUADSIZE + game.sector.x - 1	# We will use better packing than original
+    game.probey = game.quadrant.y*QUADSIZE + game.sector.y - 1
+    game.probec = game.quadrant
+    schedule(FDSPROB, 0.01) # Time to move one sector
+    prout(_("Ensign Chekov-  \"The deep space probe is launched, Captain.\""))
+    game.ididit = True
+    return
+
+# Here's how the mayday code works:
+# 
+# First, the closest starbase is selected.  If there is a a starbase
+# in your own quadrant, you are in good shape.  This distance takes
+# quadrant distances into account only.
+#
+# A magic number is computed based on the distance which acts as the
+# probability that you will be rematerialized.  You get three tries.
+#
+# When it is determined that you should be able to be rematerialized
+# (i.e., when the probability thing mentioned above comes up
+# positive), you are put into that quadrant (anywhere).  Then, we try
+# to see if there is a spot adjacent to the star- base.  If not, you
+# can't be rematerialized!!!  Otherwise, it drops you there.  It only
+# tries five times to find a spot to drop you.  After that, it's your
+# problem.
+
+def mayday():
+    # yell for help from nearest starbase 
+    # There's more than one way to move in this game! 
+    line = 0
+
+    chew()
+    # Test for conditions which prevent calling for help 
+    if game.condition == "docked":
+	prout(_("Lt. Uhura-  \"But Captain, we're already docked.\""))
+	return
+    if damaged(DRADIO):
+	prout(_("Subspace radio damaged."))
+	return
+    if game.state.rembase==0:
+	prout(_("Lt. Uhura-  \"Captain, I'm not getting any response from Starbase.\""))
+	return
+    if game.landed:
+	proutn(_("You must be aboard the "))
+	crmshp()
+	prout(".")
+	return
+    # OK -- call for help from nearest starbase 
+    game.nhelp += 1
+    if game.base.x!=0:
+	# There's one in this quadrant 
+	ddist = distance(game.base, game.sector)
+    else:
+	ddist = FOREVER
+	for m in range(1, game.state.rembase+1):
+	    xdist = QUADSIZE * distance(game.state.baseq[m], game.quadrant)
+	    if xdist < ddist:
+		ddist = xdist
+		line = m
+	# Since starbase not in quadrant, set up new quadrant 
+	game.quadrant = game.state.baseq[line]
+	newqad(True)
+    # dematerialize starship 
+    game.quad[game.sector.x][game.sector.y]=IHDOT
+    proutn(_("Starbase in Quadrant %s responds--") % game.quadrant)
+    crmshp()
+    prout(_(" dematerializes."))
+    game.sector.x=0
+    for m in range(1, 5+1):
+	ix = game.base.x+3.0*Rand()-1
+	iy = game.base.y+3.0*Rand()-1
+	if VALID_SECTOR(ix,iy) and game.quad[ix][iy]==IHDOT:
+	    # found one -- finish up 
+	    game.sector.x=ix
+	    game.sector.y=iy
+	    break
+    if not is_valid(game.sector):
+	prout(_("You have been lost in space..."))
+	finish(FMATERIALIZE)
+	return
+    # Give starbase three chances to rematerialize starship 
+    probf = math.pow((1.0 - math.pow(0.98,ddist)), 0.33333333)
+    for m in range(1, 3+1):
+	if m == 1: proutn(_("1st"))
+	elif m == 2: proutn(_("2nd"))
+	elif m == 3: proutn(_("3rd"))
+	proutn(_(" attempt to re-materialize "))
+	crmshp()
+	game.quad[ix][iy]=(IHMATER0,IHMATER1,IHMATER2)[m-1]
+	textcolor(RED)
+	warble()
+	if Rand() > probf:
+	    break
+	prout(_("fails."))
+	curses.delay_output(500)
+	textcolor(DEFAULT)
+    if m > 3:
+	game.quad[ix][iy]=IHQUEST
+	game.alive = False
+	drawmaps(1)
+	setwnd(message_window)
+	finish(FMATERIALIZE)
+	return
+    game.quad[ix][iy]=game.ship
+    textcolor(GREEN)
+    prout(_("succeeds."))
+    textcolor(DEFAULT)
+    dock(False)
+    skip(1)
+    prout(_("Lt. Uhura-  \"Captain, we made it!\""))
+
+# Abandon Ship (the BSD-Trek description)
+# 
+# The ship is abandoned.  If your current ship is the Faire
+# Queene, or if your shuttlecraft is dead, you're out of
+# luck.  You need the shuttlecraft in order for the captain
+# (that's you!!) to escape.
+# 
+# Your crew can beam to an inhabited starsystem in the
+# quadrant, if there is one and if the transporter is working.
+# If there is no inhabited starsystem, or if the transporter
+# is out, they are left to die in outer space.
+# 
+# If there are no starbases left, you are captured by the
+# Klingons, who torture you mercilessly.  However, if there
+# is at least one starbase, you are returned to the
+# Federation in a prisoner of war exchange.  Of course, this
+# can't happen unless you have taken some prisoners.
+
+def abandon():
+    # abandon ship 
+    chew()
+    if game.condition=="docked":
+	if game.ship!=IHE:
+	    prout(_("You cannot abandon Ye Faerie Queene."))
+	    return
+    else:
+	# Must take shuttle craft to exit 
+	if game.damage[DSHUTTL]==-1:
+	    prout(_("Ye Faerie Queene has no shuttle craft."))
+	    return
+	if game.damage[DSHUTTL]<0:
+	    prout(_("Shuttle craft now serving Big Macs."))
+	    return
+	if game.damage[DSHUTTL]>0:
+	    prout(_("Shuttle craft damaged."))
+	    return
+	if game.landed:
+	    prout(_("You must be aboard the ship."))
+	    return
+	if game.iscraft != "onship":
+	    prout(_("Shuttle craft not currently available."))
+	    return
+	# Print abandon ship messages 
+	skip(1)
+	prouts(_("***ABANDON SHIP!  ABANDON SHIP!"))
+	skip(1)
+	prouts(_("***ALL HANDS ABANDON SHIP!"))
+	skip(2)
+	prout(_("Captain and crew escape in shuttle craft."))
+	if game.state.rembase==0:
+	    # Oops! no place to go... 
+	    finish(FABANDN)
+	    return
+	q = game.state.galaxy[game.quadrant.x][game.quadrant.y]
+	# Dispose of crew 
+	if not (game.options & OPTION_WORLDS) and not damaged(DTRANSP):
+	    prout(_("Remainder of ship's complement beam down"))
+	    prout(_("to nearest habitable planet."))
+	elif q.planet != NOPLANET and not damaged(DTRANSP):
+	    prout(_("Remainder of ship's complement beam down to %s.") %
+		    q.planet)
+	else:
+	    prout(_("Entire crew of %d left to die in outer space.") %
+		    game.state.crew)
+	    game.casual += game.state.crew
+	    game.abandoned += game.state.crew
+
+	# If at least one base left, give 'em the Faerie Queene 
+	skip(1)
+	game.icrystl = False # crystals are lost 
+	game.nprobes = 0 # No probes 
+	prout(_("You are captured by Klingons and released to"))
+	prout(_("the Federation in a prisoner-of-war exchange."))
+	nb = Rand()*game.state.rembase+1
+	# Set up quadrant and position FQ adjacient to base 
+	if not same(game.quadrant, game.state.baseq[nb]):
+	    game.quadrant = game.state.baseq[nb]
+	    game.sector.x = game.sector.y = 5
+	    newqad(True)
+	while True:
+	    # position next to base by trial and error 
+	    game.quad[game.sector.x][game.sector.y] = IHDOT
+	    for l in range(1, QUADSIZE+1):
+		game.sector.x = 3.0*Rand() - 1.0 + game.base.x
+		game.sector.y = 3.0*Rand() - 1.0 + game.base.y
+		if VALID_SECTOR(game.sector.x, game.sector.y) and \
+                       game.quad[game.sector.x][game.sector.y] == IHDOT:
+                    break
+	    if l < QUADSIZE+1:
+		break # found a spot 
+	    game.sector.x=QUADSIZE/2
+	    game.sector.y=QUADSIZE/2
+	    newqad(True)
+    # Get new commission 
+    game.quad[game.sector.x][game.sector.y] = game.ship = IHF
+    game.state.crew = FULLCREW
+    prout(_("Starfleet puts you in command of another ship,"))
+    prout(_("the Faerie Queene, which is antiquated but,"))
+    prout(_("still useable."))
+    if game.icrystl:
+	prout(_("The dilithium crystals have been moved."))
+    game.imine = False
+    game.iscraft = "offship" # Galileo disappears 
+    # Resupply ship 
+    game.condition="docked"
+    for l in range(0, NDEVICES): 
+	game.damage[l] = 0.0
+    game.damage[DSHUTTL] = -1
+    game.energy = game.inenrg = 3000.0
+    game.shield = game.inshld = 1250.0
+    game.torps = game.intorps = 6
+    game.lsupres=game.inlsr=3.0
+    game.shldup=False
+    game.warpfac=5.0
+    game.wfacsq=25.0
+    return



From esr at mail.berlios.de  Wed Oct  4 18:37:16 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 4 Oct 2006 18:37:16 +0200
Subject: [Sst-commit-watch] r664 - trunk/src
Message-ID: <200610041637.k94GbGZG029459@sheep.berlios.de>

Author: esr
Date: 2006-10-04 18:37:14 +0200 (Wed, 04 Oct 2006)
New Revision: 664

Modified:
   trunk/src/sst.py
Log:
planets.c ode incorporated into Python translation.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-04 16:19:35 UTC (rev 663)
+++ trunk/src/sst.py	2006-10-04 16:37:14 UTC (rev 664)
@@ -34,6 +34,26 @@
 def invalidate(w):	w.x = w.y = 0
 def is_valid(w):	return (w.x != 0 and w.y != 0)
 
+# How to represent features
+IHR = 'R',
+IHK = 'K',
+IHC = 'C',
+IHS = 'S',
+IHSTAR = '*',
+IHP = 'P',
+IHW = '@',
+IHB = 'B',
+IHBLANK = ' ',
+IHDOT = '.',
+IHQUEST = '?',
+IHE = 'E',
+IHF = 'F',
+IHT = 'T',
+IHWEB = '#',
+IHMATER0 = '-',
+IHMATER1 = 'o',
+IHMATER2 = '0'
+
 class coord:
     def __init(self, x=None, y=None):
         self.x = x
@@ -64,27 +84,9 @@
         self.pclass = None	# could be ""M", "N", "O", or "destroyed"
         self.crystals = None	# could be "mined", "present", "absent"
         self.known = None	# could be "unknown", "known", "shuttle_down"
+    def __str__(self):
+        return self.name
 
-# How to represent features
-IHR = 'R',
-IHK = 'K',
-IHC = 'C',
-IHS = 'S',
-IHSTAR = '*',
-IHP = 'P',
-IHW = '@',
-IHB = 'B',
-IHBLANK = ' ',
-IHDOT = '.',
-IHQUEST = '?',
-IHE = 'E',
-IHF = 'F',
-IHT = 'T',
-IHWEB = '#',
-IHMATER0 = '-',
-IHMATER1 = 'o',
-IHMATER2 = '0'
-
 NOPLANET = None
 class quadrant:
     def __init(self):
@@ -4650,3 +4652,463 @@
     game.warpfac=5.0
     game.wfacsq=25.0
     return
+
+# Code from planets.c begins here.
+
+def consumeTime():
+    # abort a lengthy operation if an event interrupts it 
+    game.ididit = True
+    events()
+    if game.alldone or game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova or game.justin: 
+	return True
+    return False
+
+def survey():
+    # report on (uninhabited) planets in the galaxy 
+    iknow = False
+    skip(1)
+    chew()
+    prout(_("Spock-  \"Planet report follows, Captain.\""))
+    skip(1)
+    for i in range(game.inplan):
+	if game.state.planets[i].pclass == destroyed:
+	    continue
+	if (game.state.planets[i].known != "unknown" \
+            and game.state.planets[i].inhabited == UNINHABITED) \
+            or idebug:
+	    iknow = True
+	    if idebug and game.state.planets[i].known=="unknown":
+		proutn("(Unknown) ")
+	    proutn(cramlc(quadrant, game.state.planets[i].w))
+	    proutn(_("   class "))
+	    proutn(game.state.planets[i].pclass)
+	    proutn("   ")
+	    if game.state.planets[i].crystals != present:
+		proutn(_("no "))
+	    prout(_("dilithium crystals present."))
+	    if game.state.planets[i].known=="shuttle_down": 
+		prout(_("    Shuttle Craft Galileo on surface."))
+    if not iknow:
+	prout(_("No information available."))
+
+def orbit():
+    # enter standard orbit 
+    skip(1)
+    chew()
+    if game.inorbit:
+	prout(_("Already in standard orbit."))
+	return
+    if damaged(DWARPEN) and damaged(DIMPULS):
+	prout(_("Both warp and impulse engines damaged."))
+	return
+    if not is_valid(game.plnet) or abs(game.sector.x-game.plnet.x) > 1 or abs(game.sector.y-game.plnet.y) > 1:
+	crmshp()
+	prout(_(" not adjacent to planet."))
+	skip(1)
+	return
+    game.optime = 0.02+0.03*Rand()
+    prout(_("Helmsman Sulu-  \"Entering standard orbit, Sir.\""))
+    newcnd()
+    if consumeTime():
+	return
+    game.height = (1400.0+7200.0*Rand())
+    prout(_("Sulu-  \"Entered orbit at altitude %.2f kilometers.\"") % game.height)
+    game.inorbit = True
+    game.ididit = True
+
+def sensor():
+    # examine planets in this quadrant 
+    if damaged(DSRSENS):
+	if game.options & OPTION_TTY:
+	    prout(_("Short range sensors damaged."))
+	return
+    if not is_valid(game.plnet):
+	if game.options & OPTION_TTY:
+	    prout(_("Spock- \"No planet in this quadrant, Captain.\""))
+	return
+    if game.state.planets[game.iplnet].known == "unknown":
+	prout(_("Spock-  \"Sensor scan for Quadrant %s-") % game.quadrant)
+	skip(1)
+	prout(_("         Planet at Sector %s is of class %s.") %
+	      (sector,game.plnet, game.state.planets[game.iplnet]))
+	if game.state.planets[game.iplnet].known=="shuttle_down": 
+	    prout(_("         Sensors show Galileo still on surface."))
+	proutn(_("         Readings indicate"))
+	if game.state.planets[game.iplnet].crystals != present:
+	    proutn(_(" no"))
+	prout(_(" dilithium crystals present.\""))
+	if game.state.planets[game.iplnet].known == "unknown":
+	    game.state.planets[game.iplnet].known = "known"
+
+def beam():
+    # use the transporter 
+    nrgneed = 0
+    chew()
+    skip(1)
+    if damaged(DTRANSP):
+	prout(_("Transporter damaged."))
+	if not damaged(DSHUTTL) and (game.state.planets[game.iplnet].known=="shuttle_down" or game.iscraft == "onship"):
+	    skip(1)
+	    proutn(_("Spock-  \"May I suggest the shuttle craft, Sir?\" "))
+	    if ja() == True:
+		shuttle()
+	return
+    if not game.inorbit:
+	crmshp()
+	prout(_(" not in standard orbit."))
+	return
+    if game.shldup:
+	prout(_("Impossible to transport through shields."))
+	return
+    if game.state.planets[game.iplnet].known=="unknown":
+	prout(_("Spock-  \"Captain, we have no information on this planet"))
+	prout(_("  and Starfleet Regulations clearly state that in this situation"))
+	prout(_("  you may not go down.\""))
+	return
+    if not game.landed and game.state.planets[game.iplnet].crystals==absent:
+	prout(_("Spock-  \"Captain, I fail to see the logic in"))
+	prout(_("  exploring a planet with no dilithium crystals."))
+	proutn(_("  Are you sure this is wise?\" "))
+	if ja() == False:
+	    chew()
+	    return
+    if not (game.options & OPTION_PLAIN):
+	nrgneed = 50 * game.skill + game.height / 100.0
+	if nrgneed > game.energy:
+    	    prout(_("Engineering to bridge--"))
+	    prout(_("  Captain, we don't have enough energy for transportation."))
+	    return
+	if not game.landed and nrgneed * 2 > game.energy:
+    	    prout(_("Engineering to bridge--"))
+	    prout(_("  Captain, we have enough energy only to transport you down to"))
+	    prout(_("  the planet, but there wouldn't be an energy for the trip back."))
+	    if game.state.planets[game.iplnet].known == "shuttle_down":
+		prout(_("  Although the Galileo shuttle craft may still be on a surface."))
+	    proutn(_("  Are you sure this is wise?\" "))
+	    if ja() == False:
+		chew()
+		return
+    if game.landed:
+	# Coming from planet 
+	if game.state.planets[game.iplnet].known=="shuttle_down":
+	    proutn(_("Spock-  \"Wouldn't you rather take the Galileo?\" "))
+	    if ja() == True:
+		chew()
+		return
+	    prout(_("Your crew hides the Galileo to prevent capture by aliens."))
+	prout(_("Landing party assembled, ready to beam up."))
+	skip(1)
+	prout(_("Kirk whips out communicator..."))
+	prouts(_("BEEP  BEEP  BEEP"))
+	skip(2)
+	prout(_("\"Kirk to enterprise-  Lock on coordinates...energize.\""))
+    else:
+	# Going to planet 
+	prout(_("Scotty-  \"Transporter room ready, Sir.\""))
+	skip(1)
+	prout(_("Kirk and landing party prepare to beam down to planet surface."))
+	skip(1)
+	prout(_("Kirk-  \"Energize.\""))
+    game.ididit = True
+    skip(1)
+    prouts("WWHOOOIIIIIRRRRREEEE.E.E.  .  .  .  .   .    .")
+    skip(2)
+    if Rand() > 0.98:
+	prouts("BOOOIIIOOOIIOOOOIIIOIING . . .")
+	skip(2)
+	prout(_("Scotty-  \"Oh my God!  I've lost them.\""))
+	finish(FLOST)
+	return
+    prouts(".    .   .  .  .  .  .E.E.EEEERRRRRIIIIIOOOHWW")
+    game.landed = not game.landed
+    game.energy -= nrgneed
+    skip(2)
+    prout(_("Transport complete."))
+    if game.landed and game.state.planets[game.iplnet].known=="shuttle_down":
+	prout(_("The shuttle craft Galileo is here!"))
+    if not game.landed and game.imine:
+	game.icrystl = True
+	game.cryprob = 0.05
+    game.imine = False
+    return
+
+def mine():
+    # strip-mine a world for dilithium 
+    skip(1)
+    chew()
+    if not game.landed:
+	prout(_("Mining party not on planet."))
+	return
+    if game.state.planets[game.iplnet].crystals == mined:
+	prout(_("This planet has already been strip-mined for dilithium."))
+	return
+    elif game.state.planets[game.iplnet].crystals == absent:
+	prout(_("No dilithium crystals on this planet."))
+	return
+    if game.imine:
+	prout(_("You've already mined enough crystals for this trip."))
+	return
+    if game.icrystl and game.cryprob == 0.05:
+	proutn(_("With all those fresh crystals aboard the "))
+	crmshp()
+	skip(1)
+	prout(_("there's no reason to mine more at this time."))
+	return
+    game.optime = (0.1+0.2*Rand())*game.state.planets[game.iplnet].pclass
+    if consumeTime():
+	return
+    prout(_("Mining operation complete."))
+    game.state.planets[game.iplnet].crystals = mined
+    game.imine = game.ididit = True
+
+def usecrystals():
+    # use dilithium crystals 
+    game.ididit = False
+    skip(1)
+    chew()
+    if not game.icrystl:
+	prout(_("No dilithium crystals available."))
+	return
+    if game.energy >= 1000:
+	prout(_("Spock-  \"Captain, Starfleet Regulations prohibit such an operation"))
+	prout(_("  except when Condition Yellow exists."))
+	return
+    prout(_("Spock- \"Captain, I must warn you that loading"))
+    prout(_("  raw dilithium crystals into the ship's power"))
+    prout(_("  system may risk a severe explosion."))
+    proutn(_("  Are you sure this is wise?\" "))
+    if ja() == False:
+	chew()
+	return
+    skip(1)
+    prout(_("Engineering Officer Scott-  \"(GULP) Aye Sir."))
+    prout(_("  Mr. Spock and I will try it.\""))
+    skip(1)
+    prout(_("Spock-  \"Crystals in place, Sir."))
+    prout(_("  Ready to activate circuit.\""))
+    skip(1)
+    prouts(_("Scotty-  \"Keep your fingers crossed, Sir!\""))
+    skip(1)
+    if Rand() <= game.cryprob:
+	prouts(_("  \"Activating now! - - No good!  It's***"))
+	skip(2)
+	prouts(_("***RED ALERT!  RED A*L********************************"))
+	skip(1)
+	stars()
+	prouts(_("******************   KA-BOOM!!!!   *******************"))
+	skip(1)
+	kaboom()
+	return
+    game.energy += 5000.0*(1.0 + 0.9*Rand())
+    prouts(_("  \"Activating now! - - "))
+    prout(_("The instruments"))
+    prout(_("   are going crazy, but I think it's"))
+    prout(_("   going to work!!  Congratulations, Sir!\""))
+    game.cryprob *= 2.0
+    game.ididit = True
+
+def shuttle():
+    # use shuttlecraft for planetary jaunt 
+    chew()
+    skip(1)
+    if damaged(DSHUTTL):
+	if game.damage[DSHUTTL] == -1.0:
+	    if game.inorbit and game.state.planets[game.iplnet].known == "shuttle_down":
+		prout(_("Ye Faerie Queene has no shuttle craft bay to dock it at."))
+	    else:
+		prout(_("Ye Faerie Queene had no shuttle craft."))
+	elif game.damage[DSHUTTL] > 0:
+	    prout(_("The Galileo is damaged."))
+	else: # game.damage[DSHUTTL] < 0  
+	    prout(_("Shuttle craft is now serving Big Macs."))
+	return
+    if not game.inorbit:
+	crmshp()
+	prout(_(" not in standard orbit."))
+	return
+    if (game.state.planets[game.iplnet].known != "shuttle_down") and game.iscraft != "onship":
+	prout(_("Shuttle craft not currently available."))
+	return
+    if not game.landed and game.state.planets[game.iplnet].known=="shuttle_down":
+	prout(_("You will have to beam down to retrieve the shuttle craft."))
+	return
+    if game.shldup or game.condition == "docked":
+	prout(_("Shuttle craft cannot pass through shields."))
+	return
+    if game.state.planets[game.iplnet].known=="unknown":
+	prout(_("Spock-  \"Captain, we have no information on this planet"))
+	prout(_("  and Starfleet Regulations clearly state that in this situation"))
+	prout(_("  you may not fly down.\""))
+	return
+    game.optime = 3.0e-5*game.height
+    if game.optime >= 0.8*game.state.remtime:
+	prout(_("First Officer Spock-  \"Captain, I compute that such"))
+	proutn(_("  a maneuver would require approximately %2d%% of our") % \
+	       int(100*game.optime/game.state.remtime))
+	prout(_("remaining time."))
+	proutn(_("Are you sure this is wise?\" "))
+	if ja() == False:
+	    game.optime = 0.0
+	    return
+    if game.landed:
+	# Kirk on planet 
+	if game.iscraft == "onship":
+	    # Galileo on ship! 
+	    if not damaged(DTRANSP):
+		proutn(_("Spock-  \"Would you rather use the transporter?\" "))
+		if ja() == True:
+		    beam()
+		    return
+		proutn(_("Shuttle crew"))
+	    else:
+		proutn(_("Rescue party"))
+	    prout(_(" boards Galileo and swoops toward planet surface."))
+	    game.iscraft = "offship"
+	    skip(1)
+	    if consumeTime():
+		return
+	    game.state.planets[game.iplnet].known="shuttle_down"
+	    prout(_("Trip complete."))
+	    return
+	else:
+	    # Ready to go back to ship 
+	    prout(_("You and your mining party board the"))
+	    prout(_("shuttle craft for the trip back to the Enterprise."))
+	    skip(1)
+	    prouts(_("The short hop begins . . ."))
+	    skip(1)
+	    game.state.planets[game.iplnet].known="known"
+	    game.icraft = True
+	    skip(1)
+	    game.landed = False
+	    if consumeTime():
+		return
+	    game.iscraft = "onship"
+	    game.icraft = False
+	    if game.imine:
+		game.icrystl = True
+		game.cryprob = 0.05
+	    game.imine = False
+	    prout(_("Trip complete."))
+	    return
+    else:
+	# Kirk on ship 
+	# and so is Galileo 
+	prout(_("Mining party assembles in the hangar deck,"))
+	prout(_("ready to board the shuttle craft \"Galileo\"."))
+	skip(1)
+	prouts(_("The hangar doors open; the trip begins."))
+	skip(1)
+	game.icraft = True
+	game.iscraft = "offship"
+	if consumeTime():
+	    return
+	game.state.planets[game.iplnet].known = "shuttle_down"
+	game.landed = True
+	game.icraft = False
+	prout(_("Trip complete."))
+	return
+
+def deathray():
+    # use the big zapper 
+    r = Rand()
+	
+    game.ididit = False
+    skip(1)
+    chew()
+    if game.ship != IHE:
+	prout(_("Ye Faerie Queene has no death ray."))
+	return
+    if game.nenhere==0:
+	prout(_("Sulu-  \"But Sir, there are no enemies in this quadrant.\""))
+	return
+    if damaged(DDRAY):
+	prout(_("Death Ray is damaged."))
+	return
+    prout(_("Spock-  \"Captain, the 'Experimental Death Ray'"))
+    prout(_("  is highly unpredictible.  Considering the alternatives,"))
+    proutn(_("  are you sure this is wise?\" "))
+    if ja() == False:
+	return
+    prout(_("Spock-  \"Acknowledged.\""))
+    skip(1)
+    game.ididit = True
+    prouts(_("WHOOEE ... WHOOEE ... WHOOEE ... WHOOEE"))
+    skip(1)
+    prout(_("Crew scrambles in emergency preparation."))
+    prout(_("Spock and Scotty ready the death ray and"))
+    prout(_("prepare to channel all ship's power to the device."))
+    skip(1)
+    prout(_("Spock-  \"Preparations complete, sir.\""))
+    prout(_("Kirk-  \"Engage!\""))
+    skip(1)
+    prouts(_("WHIRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"))
+    skip(1)
+    dprob = .30
+    if game.options & OPTION_PLAIN:
+	dprob = .5
+    if r > dprob:
+	prouts(_("Sulu- \"Captain!  It's working!\""))
+	skip(2)
+	while game.nenhere > 0:
+	    deadkl(game.ks[1], game.quad[game.ks[1].x][game.ks[1].y],game.ks[1])
+	prout(_("Ensign Chekov-  \"Congratulations, Captain!\""))
+	if (game.state.remkl + game.state.remcom + game.state.nscrem) == 0:
+	    finish(FWON)    
+	if (game.options & OPTION_PLAIN) == 0:
+	    prout(_("Spock-  \"Captain, I believe the `Experimental Death Ray'"))
+	    if Rand() <= 0.05:
+		prout(_("   is still operational.\""))
+	    else:
+		prout(_("   has been rendered nonfunctional.\""))
+		game.damage[DDRAY] = 39.95
+	return
+    r = Rand()	# Pick failure method 
+    if r <= .30:
+	prouts(_("Sulu- \"Captain!  It's working!\""))
+	skip(1)
+	prouts(_("***RED ALERT!  RED ALERT!"))
+	skip(1)
+	prout(_("***MATTER-ANTIMATTER IMPLOSION IMMINENT!"))
+	skip(1)
+	prouts(_("***RED ALERT!  RED A*L********************************"))
+	skip(1)
+	stars()
+	prouts(_("******************   KA-BOOM!!!!   *******************"))
+	skip(1)
+	kaboom()
+	return
+    if r <= .55:
+	prouts(_("Sulu- \"Captain!  Yagabandaghangrapl, brachriigringlanbla!\""))
+	skip(1)
+	prout(_("Lt. Uhura-  \"Graaeek!  Graaeek!\""))
+	skip(1)
+	prout(_("Spock-  \"Fascinating!  . . . All humans aboard"))
+	prout(_("  have apparently been transformed into strange mutations."))
+	prout(_("  Vulcans do not seem to be affected."))
+	skip(1)
+	prout(_("Kirk-  \"Raauch!  Raauch!\""))
+	finish(FDRAY)
+	return
+    if r <= 0.75:
+	intj
+	prouts(_("Sulu- \"Captain!  It's   --WHAT?!?!\""))
+	skip(2)
+	proutn(_("Spock-  \"I believe the word is"))
+	prouts(_(" *ASTONISHING*"))
+	prout(_(" Mr. Sulu."))
+	for i in range(1, QUADSIZE+1):
+	    for j in range(1, QUADSIZE+1):
+		if game.quad[i][j] == IHDOT:
+		    game.quad[i][j] = IHQUEST
+	prout(_("  Captain, our quadrant is now infested with"))
+	prouts(_(" - - - - - -  *THINGS*."))
+	skip(1)
+	prout(_("  I have no logical explanation.\""))
+	return
+    prouts(_("Sulu- \"Captain!  The Death Ray is creating tribbles!\""))
+    skip(1)
+    prout(_("Scotty-  \"There are so many tribbles down here"))
+    prout(_("  in Engineering, we can't move for 'em, Captain.\""))
+    finish(FTRIBBLE)
+    return



From esr at mail.berlios.de  Wed Oct  4 21:24:40 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 4 Oct 2006 21:24:40 +0200
Subject: [Sst-commit-watch] r665 - trunk/src
Message-ID: <200610041924.k94JOena027931@sheep.berlios.de>

Author: esr
Date: 2006-10-04 21:24:39 +0200 (Wed, 04 Oct 2006)
New Revision: 665

Modified:
   trunk/src/sst.py
Log:
Python translation now incorporates reports.c.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-04 16:37:14 UTC (rev 664)
+++ trunk/src/sst.py	2006-10-04 19:24:39 UTC (rev 665)
@@ -192,6 +192,7 @@
 SKILL_EMERITUS	= 5
 
 def damaged(dev):	return (game.damage[dev] != 0.0)
+def communicating():	return not damaged(DRADIO) or game.condition=="docked"
 
 # Define future events 
 FSPY	= 0	# Spy event happens always (no future[] entry)
@@ -397,10 +398,10 @@
 	# avoid intruding on another commander's territory 
 	if ienm == IHC:
 	    for n in range(1, game.state.remcom+1):
-		if same(game.state.kcmdr[n],iq):
+		if game.state.kcmdr[n] == iq:
 		    return False
 	    # refuse to leave if currently attacking starbase 
-	    if same(game.battle, game.quadrant):
+	    if game.battle == game.quadrant:
 		return False
 	# don't leave if over 1000 units of energy 
 	if game.kpower[loccom] > 1000.0:
@@ -434,7 +435,7 @@
 	game.state.kscmdr=iq
     else:
 	for n in range(1, game.state.remcom+1):
-	    if same(game.state.kcmdr[n], game.quadrant):
+	    if game.state.kcmdr[n] == game.quadrant:
 		game.state.kcmdr[n]=iq
 		break
 	game.comhere = False
@@ -626,7 +627,7 @@
     # Put commander in place within same quadrant 
     game.quad[com.x][com.y] = IHDOT
     game.quad[next.x][next.y] = ienm
-    if not same(next, com):
+    if next != com:
 	# it moved 
 	game.ks[loccom] = next
 	game.kdist[loccom] = game.kavgd[loccom] = distance(game.sector, next)
@@ -670,14 +671,14 @@
 
 def movescom(iq, avoid):
     # commander movement helper 
-    if same(iq, game.quadrant) or not VALID_QUADRANT(iq.x, iq.y) or \
+    if iq == game.quadrant or not VALID_QUADRANT(iq.x, iq.y) or \
 	game.state.galaxy[iq.x][iq.y].supernova or \
 	game.state.galaxy[iq.x][iq.y].klingons > MAXKLQUAD-1:
 	return 1
     if avoid:
 	# Avoid quadrants with bases if we want to avoid Enterprise 
 	for i in range(1, game.state.rembase+1):
-	    if same(game.state.baseq[i], iq):
+	    if game.state.baseq[i] == iq:
 		return True
     if game.justin and not game.iscate:
 	return True
@@ -707,12 +708,12 @@
 	sortklings()
     # check for a helpful planet 
     for i in range(game.inplan):
-	if same(game.state.planets[i].w, game.state.kscmdr) and \
-	    game.state.planets[i].crystals == present:
+	if game.state.planets[i].w == game.state.kscmdr and \
+	    game.state.planets[i].crystals == "present":
 	    # destroy the planet 
-	    game.state.planets[i].pclass = destroyed
+	    game.state.planets[i].pclass = "destroyed"
 	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = NOPLANET
-	    if not damaged(DRADIO) or game.condition == docked:
+	    if communicating():
 		announce()
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"))
 		proutn(_("   a planet in Quadrant %s has been destroyed") % game.state.kscmdr)
@@ -753,14 +754,14 @@
 	for i2 in range(1, game.state.rembase+1):
 	    i = basetbl[i2][0];	# bug in original had it not finding nearest
 	    ibq = game.state.baseq[i]
-	    if same(ibq, game.quadrant) or same(ibq, game.battle) or \
+	    if ibq == game.quadrant or ibq == game.battle or \
 		game.state.galaxy[ibq.x][ibq.y].supernova or \
 		game.state.galaxy[ibq.x][ibq.y].klingons > MAXKLQUAD-1:
 		continue
 	    # if there is a commander, and no other base is appropriate,
 	    #   we will take the one with the commander
 	    for j in range(1, game.state.remcom+1):
-		if same(ibq, game.state.kcmdr[j]) and ifindit!= 2:
+		if ibq == game.state.kcmdr[j] and ifindit!= 2:
 		    ifindit = 2
 		    iwhichb = i
 		    break
@@ -806,7 +807,7 @@
     else:
 	for i in range(1, game.state.rembase+1):
 	    ibq = game.state.baseq[i]
-	    if same(ibq, game.state.kscmdr) and same(game.state.kscmdr, game.battle):
+	    if ibq == game.state.kscmdr and game.state.kscmdr == game.battle:
 		# attack the base 
 		if avoid:
 		    return; # no, don't attack base! 
@@ -815,7 +816,7 @@
 		schedule(FSCDBAS, 1.0 +2.0*Rand())
 		if is_scheduled(FCDBAS):
 		    postpone(FSCDBAS, scheduled(FCDBAS)-game.state.date)
-		if damaged(DRADIO) and game.condition != docked:
+		if not communicating():
 		    return; # no warning 
 		game.iseenit = True
 		announce()
@@ -835,7 +836,7 @@
     # Check for intelligence report 
     if not idebug and \
 	(Rand() > 0.2 or \
-	 (damaged(DRADIO) and game.condition != docked) or \
+	 (not communicating()) or \
 	 not game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].charted):
 	return
     announce()
@@ -1184,7 +1185,7 @@
 	elif iquad in (IHR, IHK): # Hit a regular enemy 
 	    # find the enemy 
 	    for ll in range(1, game.nenhere+1):
-		if same(w, game.ks[ll]):
+		if w == game.ks[ll]:
 		    break
 	    kp = math.fabs(game.kpower[ll])
 	    h1 = 700.0 + 100.0*Rand() - \
@@ -1228,7 +1229,7 @@
 	    skip(1)
 	    prout(_("***STARBASE DESTROYED.."))
 	    for ll in range(1, game.state.rembase+1):
-		if same(game.state.baseq[ll], game.quadrant):
+		if game.state.baseq[ll] == game.quadrant:
 		    game.state.baseq[ll]=game.state.baseq[game.state.rembase]
 		    break
 	    game.quad[w.x][w.y]=IHDOT
@@ -1568,7 +1569,7 @@
 	if type == IHC:
 	    game.comhere = False
 	    for i in range(1, game.state.remcom+1):
-		if same(game.state.kcmdr[i], game.quadrant):
+		if game.state.kcmdr[i] == game.quadrant:
 		    break
 	    game.state.kcmdr[i] = game.state.kcmdr[game.state.remcom]
 	    game.state.kcmdr[game.state.remcom].x = 0
@@ -1596,10 +1597,10 @@
 	return
     game.recompute()
     # Remove enemy ship from arrays describing local conditions 
-    if is_scheduled(FCDBAS) and same(game.battle, game.quadrant) and type==IHC:
+    if is_scheduled(FCDBAS) and game.battle == game.quadrant and type==IHC:
 	unschedule(FCDBAS)
     for i in range(1, game.nenhere+1):
-	if same(game.ks[i], w):
+	if game.ks[i] == w:
 	    break
     game.nenhere -= 1
     if i <= game.nenhere:
@@ -2159,10 +2160,8 @@
             game.quadrant = game.state.kcmdr[i]
         game.sector = randplace(QUADSIZE)
         crmshp()
-        proutn(_(" is pulled to "))
-        proutn(cramlc(quadrant, game.quadrant))
-        proutn(", ")
-        prout(cramlc(sector, game.sector))
+        prout(_(" is pulled to Quadrant %s, Sector %s") \
+               % (game.quadrant, game.sector))
         if game.resting:
             prout(_("(Remainder of rest/repair period cancelled.)"))
             game.resting = False
@@ -2185,22 +2184,19 @@
         # Code merges here for any commander destroying base 
         # Not perfect, but will have to do 
         # Handle case where base is in same quadrant as starship 
-        if same(game.battle, game.quadrant):
+        if game.battle == game.quadrant:
             game.state.chart[game.battle.x][game.battle.y].starbase = False
             game.quad[game.base.x][game.base.y] = IHDOT
             game.base.x=game.base.y=0
             newcnd()
             skip(1)
             prout(_("Spock-  \"Captain, I believe the starbase has been destroyed.\""))
-        elif game.state.rembase != 1 and \
-                 (not damaged(DRADIO) or game.condition == "docked"):
+        elif game.state.rembase != 1 and communicating():
             # Get word via subspace radio 
             announce()
             skip(1)
             prout(_("Lt. Uhura-  \"Captain, Starfleet Command reports that"))
-            proutn(_("   the starbase in "))
-            proutn(cramlc(quadrant, game.battle))
-            prout(_(" has been destroyed by"))
+            proutn(_("   the starbase in Quadrant %s has been destroyed by") % game.battle)
             if game.isatb == 2: 
                 prout(_("the Klingon Super-Commander"))
             else:
@@ -2209,7 +2205,7 @@
         # Remove Starbase from galaxy 
         game.state.galaxy[game.battle.x][game.battle.y].starbase = False
         for i in range(1, game.state.rembase+1):
-            if same(game.state.baseq[i], game.battle):
+            if game.state.baseq[i] == game.battle:
                 game.state.baseq[i] = game.state.baseq[game.state.rembase]
         game.state.rembase -= 1
         if game.isatb == 2:
@@ -2345,9 +2341,9 @@
 	    i = 0
 	    for j in range(1, game.state.rembase+1):
 		for k in range(1, game.state.remcom+1):
-		    if same(game.state.baseq[j], game.state.kcmdr[k]) and \
-			not same(game.state.baseq[j], game.quadrant) and \
-                        not same(game.state.baseq[j], game.state.kscmdr):
+		    if game.state.baseq[j] == game.state.kcmdr[k] and \
+			not game.state.baseq[j] == game.quadrant and \
+                        not game.state.baseq[j] == game.state.kscmdr:
 			i = 1
 		if i == 1:
 		    continue
@@ -2363,7 +2359,7 @@
 		postpone(FCDBAS, scheduled(FSCDBAS)-game.state.date)
 	    game.future[FBATTAK].date = game.future[FCDBAS].date + expran(0.3*game.intime)
 	    game.iseenit = False
-	    if damaged(DRADIO) and game.condition != "docked": 
+            if not communicating():
 		continue # No warning :-( 
 	    game.iseenit = True
 	    announce()
@@ -2387,7 +2383,7 @@
 		unschedule(FCDBAS)
 		# find the lucky pair 
 		for i in range(1, game.state.remcom+1):
-		    if same(game.state.kcmdr[i], game.battle): 
+		    if game.state.kcmdr[i] == game.battle: 
 			break
 		if i > game.state.remcom or game.state.rembase == 0 or \
 		    not game.state.galaxy[game.battle.x][game.battle.y].starbase:
@@ -2412,7 +2408,7 @@
 		if not VALID_QUADRANT(i, j) or \
 		    game.state.galaxy[game.probec.x][game.probec.y].supernova:
 		    # Left galaxy or ran into supernova
-		    if not damaged(DRADIO) or game.condition == "docked":
+                    if comunicating():
 			announce()
 			skip(1)
 			proutn(_("Lt. Uhura-  \"The deep space probe "))
@@ -2423,15 +2419,13 @@
 			prout(".\"")
 		    unschedule(FDSPROB)
 		    continue
-		if not damaged(DRADIO) or game.condition == "docked":
+                if not communicating():
 		    announce()
 		    skip(1)
-		    proutn(_("Lt. Uhura-  \"The deep space probe is now in "))
-		    proutn(cramlc(quadrant, game.probec))
-		    prout(".\"")
+		    proutn(_("Lt. Uhura-  \"The deep space probe is now in Quadrant %s.\"") % game.probec)
 	    pdest = game.state.galaxy[game.probec.x][game.probec.y]
 	    # Update star chart if Radio is working or have access to radio
-	    if not damaged(DRADIO) or game.condition == "docked":
+	    if communicating():
 		chp = game.state.chart[game.probec.x][game.probec.y]
 		chp.klingons = pdest.klingons
 		chp.starbase = pdest.starbase
@@ -2454,7 +2448,7 @@
 		# supernova'ed, and which has some Klingons in it
 		w = randplace(GALSIZE)
 		q = game.state.galaxy[w.x][w.y]
-                if not (same(game.quadrant, w) or q.planet == NOPLANET or \
+                if not (game.quadrant == w or q.planet == NOPLANET or \
 		      game.state.planets[q.planet].inhabited == UNINHABITED or \
 		      q.supernova or q.status!=secure or q.klingons<=0):
                     break
@@ -2469,7 +2463,7 @@
 	    q.status = distressed
 
 	    # tell the captain about it if we can 
-	    if not damaged(DRADIO) or game.condition == "docked":
+	    if communicating():
 		prout(_("Uhura- Captain, %s in Quadrant %s reports it is under attack") \
                         % (q.planet, `w`))
 		prout(_("by a Klingon invasion fleet."))
@@ -2489,7 +2483,7 @@
 	    ev2.quadrant = ev.quadrant
 
 	    # report the disaster if we can 
-	    if not damaged(DRADIO) or game.condition == "docked":
+	    if communicating():
 		prout(_("Uhura- We've lost contact with starsystem %s") % \
                         q.planet)
 		prout(_("in Quadrant %s.\n") % ev.quadrant)
@@ -2526,14 +2520,14 @@
 	    # deliver the child 
 	    game.state.remkl += 1
 	    q.klingons += 1
-	    if same(game.quadrant, w):
-		newkling(++game.klhere)
-
+	    if game.quadrant == w:
+                game.klhere += 1
+		newkling(game.klhere)
 	    # recompute time left
             game.recompute()
 	    # report the disaster if we can 
-	    if not damaged(DRADIO) or game.condition == "docked":
-		if same(game.quadrant, w):
+	    if communicating():
+		if game.quadrant == w:
 		    prout(_("Spock- sensors indicate the Klingons have"))
 		    prout(_("launched a warship from %s.") % q.planet)
 		else:
@@ -2667,7 +2661,7 @@
 		    elif iquad == IHB: # Destroy base 
 			game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase = False
 			for i in range(1, game.state.rembase+1):
-			    if same(game.state.baseq[i], game.quadrant): 
+			    if game.state.baseq[i] == game.quadrant: 
 				break
 			game.state.baseq[i] = game.state.baseq[game.state.rembase]
 			game.state.rembase -= 1
@@ -2702,7 +2696,7 @@
 			deadkl(scratch,iquad, scratch)
                     elif iquad in (IHC,IHS,IHR): # Damage/destroy big enemies 
 			for ll in range(1, game.nenhere+1):
-			    if same(game.ks[ll], scratch):
+			    if game.ks[ll] == scratch:
 				break
 			game.kpower[ll] -= 800.0 # If firepower is lost, die 
 			if game.kpower[ll] <= 0.0:
@@ -2727,8 +2721,7 @@
 			    # can't move into something else 
 			    skip(1)
 			    break
-			proutn(_(", buffeted to "))
-			proutn(cramlc(sector, newc))
+			proutn(_(", buffeted to Sector %s") % newc)
 			game.quad[scratch.x][scratch.y] = IHDOT
 			game.quad[newc.x][newc.y] = iquad
 			game.ks[ll] = newc
@@ -2787,9 +2780,9 @@
 	    if ja() == True:
 		nq = game.quadrant
 
-    if not same(nq, game.quadrant) or game.justin:
+    if not nq == game.quadrant or game.justin:
 	# it isn't here, or we just entered (treat as enroute) 
-	if not damaged(DRADIO) or game.condition == "docked":
+	if communicating():
 	    skip(1)
 	    prout(_("Message from Starfleet Command       Stardate %.2f") % game.state.date)
 	    prout(_("     Supernova in Quadrant %s; caution advised.") % nq)
@@ -2820,7 +2813,7 @@
     # destroy any Klingons in supernovaed quadrant 
     kldead = game.state.galaxy[nq.x][nq.y].klingons
     game.state.galaxy[nq.x][nq.y].klingons = 0
-    if same(nq, game.state.kscmdr):
+    if nq == game.state.kscmdr:
 	# did in the Supercommander! 
 	game.state.nscrem = game.state.kscmdr.x = game.state.kscmdr.y = game.isatb =  0
 	game.iscate = False
@@ -2829,7 +2822,7 @@
     if game.state.remcom:
 	maxloop = game.state.remcom
 	for l in range(1, maxloop+1):
-	    if same(game.state.kcmdr[l], nq):
+	    if game.state.kcmdr[l] == nq:
 		game.state.kcmdr[l] = game.state.kcmdr[game.state.remcom]
 		invalidate(game.state.kcmdr[game.state.remcom])
 		game.state.remcom -= 1
@@ -2844,14 +2837,14 @@
     game.state.nromrem -= nrmdead
     # Destroy planets 
     for loop in range(game.inplan):
-	if same(game.state.planets[loop].w, nq):
+	if game.state.planets[loop].w == nq:
 	    game.state.planets[loop].pclass = destroyed
 	    npdead += 1
     # Destroy any base in supernovaed quadrant 
     if game.state.rembase:
 	maxloop = game.state.rembase
 	for loop in range(1, maxloop+1):
-	    if same(game.state.baseq[loop], nq):
+	    if game.state.baseq[loop] == nq:
 		game.state.baseq[loop] = game.state.baseq[game.state.rembase]
 		invalidate(game.state.baseq[game.state.rembase])
 		game.state.rembase -= 1
@@ -2862,10 +2855,10 @@
 	game.state.basekl += game.state.galaxy[nq.x][nq.y].starbase
 	game.state.nplankl += npdead
     # mark supernova in galaxy and in star chart 
-    if same(game.quadrant, nq) or not damaged(DRADIO) or game.condition == "docked":
+    if game.quadrant == nq or communicating():
 	game.state.galaxy[nq.x][nq.y].supernova = True
     # If supernova destroys last Klingons give special message 
-    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0 and not same(nq, game.quadrant):
+    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0 and not nq == game.quadrant:
 	skip(2)
 	if not induced:
 	    prout(_("Lucky you!"))
@@ -4611,7 +4604,7 @@
 	prout(_("the Federation in a prisoner-of-war exchange."))
 	nb = Rand()*game.state.rembase+1
 	# Set up quadrant and position FQ adjacient to base 
-	if not same(game.quadrant, game.state.baseq[nb]):
+	if not game.quadrant == game.state.baseq[nb]:
 	    game.quadrant = game.state.baseq[nb]
 	    game.sector.x = game.sector.y = 5
 	    newqad(True)
@@ -4679,7 +4672,7 @@
 	    iknow = True
 	    if idebug and game.state.planets[i].known=="unknown":
 		proutn("(Unknown) ")
-	    proutn(cramlc(quadrant, game.state.planets[i].w))
+	    proutn(_("Quadrant %s") % game.state.planets[i].w)
 	    proutn(_("   class "))
 	    proutn(game.state.planets[i].pclass)
 	    proutn("   ")
@@ -5112,3 +5105,484 @@
     prout(_("  in Engineering, we can't move for 'em, Captain.\""))
     finish(FTRIBBLE)
     return
+
+# Code from reports.c begins here
+
+def attackreport(curt):
+    # report status of bases under attack 
+    if not curt:
+	if is_scheduled(FCDBAS):
+	    prout(_("Starbase in Quadrant %s is currently under Commander attack.") % game.battle)
+	    prout(_("It can hold out until Stardate %d.") % int(scheduled(FCDBAS)))
+	elif game.isatb == 1:
+	    prout(_("Starbase in Quadrant %s is under Super-commander attack.") % game.state.kscmdr)
+	    prout(_("It can hold out until Stardate %d.") % int(scheduled(FSCDBAS)))
+	else:
+	    prout(_("No Starbase is currently under attack."))
+    else:
+        if is_scheduled(FCDBAS):
+	    proutn(_("Base in %s attacked by C. Alive until %.1f") % (game.battle, scheduled(FCDBAS)))
+        if game.isatb:
+	    proutn(_("Base in %s attacked by S. Alive until %.1f") % (game.state.kscmdr, scheduled(FSCDBAS)))
+	clreol()
+
+def report():
+    # report on general game status 
+    chew()
+    s1 = "" and game.thawed and _("thawed ")
+    s2 = {1:"short", 2:"medium", 4:"long"}[game.length]
+    s3 = (None, _("novice"). _("fair"),
+          _("good"), _("expert"), _("emeritus"))[game.skill]
+    prout(_("You %s a %s%s %s game.") % ((_("were playing"), _("are playing"))[game.alldone], s1, s2, s3))
+    if game.skill>SKILL_GOOD and game.thawed and not game.alldone:
+	prout(_("No plaque is allowed."))
+    if game.tourn:
+	prout(_("This is tournament game %d.") % game.tourn)
+    prout(_("Your secret password is \"%s\"") % game.passwd)
+    proutn(_("%d of %d Klingons have been killed") % (((game.inkling + game.incom + game.inscom) - (game.state.remkl + game.state.remcom + game.state.nscrem)), 
+	   (game.inkling + game.incom + game.inscom)))
+    if game.incom - game.state.remcom:
+	prout(_(", including %d Commander%s.") % (game.incom - game.state.remcom, (_("s"), "")[(game.incom - game.state.remcom)==1]))
+    elif game.inkling - game.state.remkl + (game.inscom - game.state.nscrem) > 0:
+	prout(_(", but no Commanders."))
+    else:
+	prout(".")
+    if game.skill > SKILL_FAIR:
+	prout(_("The Super Commander has %sbeen destroyed.") % ("", _("not "))[game.state.nscrem])
+    if game.state.rembase != game.inbase:
+	proutn(_("There "))
+	if game.inbase-game.state.rembase==1:
+	    proutn(_("has been 1 base"))
+	else:
+	    proutn(_("have been %d bases") % (game.inbase-game.state.rembase))
+	prout(_(" destroyed, %d remaining.") % game.state.rembase)
+    else:
+	prout(_("There are %d bases.") % game.inbase)
+    if communicating() or game.iseenit:
+	# Don't report this if not seen and
+	# either the radio is dead or not at base!
+	attackreport(False)
+	game.iseenit = True
+    if game.casual: 
+	prout(_("%d casualt%s suffered so far.") % (game.casual, ("y", "ies")[game.casual!=1]))
+    if game.nhelp:
+	prout(_("There were %d call%s for help.") % (game.nhelp,  ("" , _("s"))[game.nhelp!=1]))
+    if game.ship == IHE:
+	proutn(_("You have "))
+	if game.nprobes:
+	    proutn("%d" % (game.nprobes))
+	else:
+	    proutn(_("no"))
+	proutn(_(" deep space probe"))
+	if game.nprobes!=1:
+	    proutn(_("s"))
+	prout(".")
+    if communicating() and is_scheduled(FDSPROB):
+	if game.isarmed: 
+	    proutn(_("An armed deep space probe is in "))
+	else:
+	    proutn(_("A deep space probe is in "))
+	prout("Quadrant %s." % game.probec)
+    if game.icrystl:
+	if game.cryprob <= .05:
+	    prout(_("Dilithium crystals aboard ship... not yet used."))
+	else:
+	    i=0
+	    ai = 0.05
+	    while game.cryprob > ai:
+		ai *= 2.0
+		i += 1
+	    prout(_("Dilithium crystals have been used %d time%s.") % \
+                  (i, (_("s"), "")[i==1]))
+    skip(1)
+	
+def lrscan():
+    # long-range sensor scan 
+    if damaged(DLRSENS):
+	# Now allow base's sensors if docked 
+	if game.condition != "docked":
+	    prout(_("LONG-RANGE SENSORS DAMAGED."))
+	    return
+	prout(_("Starbase's long-range scan"))
+    else:
+	prout(_("Long-range scan"))
+    for x in range(game.quadrant.x-1, game.quadrant.x+2):
+        proutn(" ")
+        for y in range(game.quadrant.y-1, game.quadrant.y+2):
+	    if not VALID_QUADRANT(x, y):
+		proutn("  -1")
+	    else:
+		if not damaged(DRADIO):
+		    game.state.galaxy[x][y].charted = True
+		game.state.chart[x][y].klingons = game.state.galaxy[x][y].klingons
+		game.state.chart[x][y].starbase = game.state.galaxy[x][y].starbase
+		game.state.chart[x][y].stars = game.state.galaxy[x][y].stars
+		if game.state.galaxy[x][y].supernova: 
+		    proutn(" ***")
+		else:
+		    proutn(" %3d" % (game.state.chart[x][y].klingons*100 + game.state.chart[x][y].starbase * 10 + game.state.chart[x][y].stars))
+	prout(" ")
+
+def damagereport():
+    # damage report 
+    jdam = False
+    chew()
+
+    for i in range(NDEVICES):
+	if damaged(i):
+	    if not jdam:
+		prout(_("\tDEVICE\t\t\t-REPAIR TIMES-"))
+		prout(_("\t\t\tIN FLIGHT\t\tDOCKED"))
+		jdam = True
+	    prout("  %-26s\t%8.2f\t\t%8.2f" % (device[i],
+                                               game.damage[i]+0.05,
+                                               game.docfac*game.damage[i]+0.005))
+    if not jdam:
+	prout(_("All devices functional."))
+
+def rechart():
+    # update the chart in the Enterprise's computer from galaxy data 
+    game.lastchart = game.state.date
+    for i in range(1, GALSIZE+1):
+	for j in range(1, GALSIZE+1):
+	    if game.state.galaxy[i][j].charted:
+		game.state.chart[i][j].klingons = game.state.galaxy[i][j].klingons
+		game.state.chart[i][j].starbase = game.state.galaxy[i][j].starbase
+		game.state.chart[i][j].stars = game.state.galaxy[i][j].stars
+
+def chart():
+    # display the star chart  
+    chew()
+    if not damaged(DRADIO):
+	rechart()
+    if game.lastchart < game.state.date and game.condition == "docked":
+	prout(_("Spock-  \"I revised the Star Chart from the starbase's records.\""))
+	rechart()
+
+    prout(_("       STAR CHART FOR THE KNOWN GALAXY"))
+    if game.state.date > game.lastchart:
+	prout(_("(Last surveillance update %d stardates ago).") % ((int)(game.state.date-game.lastchart)))
+    prout("      1    2    3    4    5    6    7    8")
+    for i in range(1, GALSIZE+1):
+	proutn("%d |" % (i))
+	for j in range(1, GALSIZE+1):
+	    if (game.options & OPTION_SHOWME) and i == game.quadrant.x and j == game.quadrant.y:
+		proutn("<")
+	    else:
+		proutn(" ")
+	    if game.state.galaxy[i][j].supernova:
+		strcpy(buf, "***")
+	    elif not game.state.galaxy[i][j].charted and game.state.galaxy[i][j].starbase:
+		strcpy(buf, ".1.")
+	    elif game.state.galaxy[i][j].charted:
+		sprintf(buf, "%3d" % (game.state.chart[i][j].klingons*100 + game.state.chart[i][j].starbase * 10 + game.state.chart[i][j].stars))
+	    else:
+		strcpy(buf, "...")
+	    proutn(buf)
+	    if (game.options & OPTION_SHOWME) and i == game.quadrant.x and j == game.quadrant.y:
+		proutn(">")
+	    else:
+		proutn(" ")
+	proutn("  |")
+	if i<GALSIZE:
+	    skip(1)
+
+def sectscan(goodScan, i, j):
+    # light up an individual dot in a sector 
+    if goodScan or (abs(i-game.sector.x)<= 1 and abs(j-game.sector.y) <= 1):
+	if (game.quad[i][j]==IHMATER0) or (game.quad[i][j]==IHMATER1) or (game.quad[i][j]==IHMATER2) or (game.quad[i][j]==IHE) or (game.quad[i][j]==IHF):
+	    if game.condition   == "red": textcolor(RED)
+	    elif game.condition == "green": textcolor(GREEN)
+	    elif game.condition == "yellow": textcolor(YELLOW)
+	    elif game.condition == "docked": textcolor(CYAN)
+	    elif game.condition == "dead": textcolor(BROWN)
+	    if game.quad[i][j] != game.ship: 
+		highvideo()
+	proutn("%c " % game.quad[i][j])
+	textcolor(DEFAULT)
+    else:
+	proutn("- ")
+
+def status(req):
+    # print status report lines 
+
+    if not req or req == 1:
+	prstat(_("Stardate"), _("%.1f, Time Left %.2f") \
+               % (game.state.date, game.state.remtime))
+    elif not req or req == 2:
+	if game.condition != "docked":
+	    newcnd()
+        dam = 0
+	for t in range(0, NDEVICES):
+	    if game.damage[t]>0: 
+		dam += 1
+	prstat(_("Condition"), _("%s, %i DAMAGES") % (game.condition.upper(), dam))
+    elif not req or req == 3:
+	prstat(_("Position"), "%s , %s" % (game.quadrant, game.sector))
+    elif not req or req == 4:
+	if damaged(DLIFSUP):
+	    if game.condition == "docked":
+		sprintf(s, _("DAMAGED, Base provides"))
+	    else:
+		sprintf(s, _("DAMAGED, reserves=%4.2f") % game.lsupres)
+	else:
+	    sprintf(s, _("ACTIVE"))
+	prstat(_("Life Support"), s)
+    elif not req or req == 5:
+	prstat(_("Warp Factor"), "%.1f" % (game.warpfac))
+    elif not req or req == 6:
+        extra = ""
+        if game.icrystl and (game.options & OPTION_SHOWME):
+            extra = _(" (have crystals)")
+	prstat(_("Energy"), "%.2f%s" % game.energy, extra)
+    elif not req or req == 7:
+	prstat(_("Torpedoes"), "%d" % (game.torps))
+    elif not req or req == 8:
+	if damaged(DSHIELD):
+	    strcpy(s, _("DAMAGED,"))
+	elif game.shldup:
+	    strcpy(s, _("UP,"))
+	else:
+	    strcpy(s, _("DOWN,"))
+	data = _(" %d%% %.1f units") \
+               % (int((100.0*game.shield)/game.inshld + 0.5), game.shield)
+	prstat(_("Shields"), s)
+    elif not req or req == 9:
+        prstat(_("Klingons Left"), "%d" \
+               % (game.state.remkl + game.state.remcom + game.state.nscrem))
+    elif not req or req == 10:
+	if game.options & OPTION_WORLDS:
+	    plnet = game.state.galaxy[game.quadrant.x][game.quadrant.y].planet
+	    if plnet != NOPLANET and game.state.planets[plnet].inhabited != UNINHABITED:
+		prstat(_("Major system"), plnet.name)
+	    else:
+		prout(_("Sector is uninhabited"))
+    elif not req or req == 11:
+	attackreport(not req)
+
+def request():
+    requests = ("da","co","po","ls","wa","en","to","sh","kl","sy", "ti")
+    while scan() == IHEOL:
+	proutn(_("Information desired? "))
+    chew()
+    if citem in requests:
+        status(requests.index(citem))
+    else:
+	prout(_("UNRECOGNIZED REQUEST. Legal requests are:"))
+	prout(("  date, condition, position, lsupport, warpfactor,"))
+	prout(("  energy, torpedoes, shields, klingons, system, time."))
+		
+def srscan():
+    # short-range scan 
+    goodScan=True
+    if damaged(DSRSENS):
+	# Allow base's sensors if docked 
+	if game.condition != "docked":
+	    prout(_("   S.R. SENSORS DAMAGED!"))
+	    goodScan=False
+	else:
+	    prout(_("  [Using Base's sensors]"))
+    else:
+	prout(_("     Short-range scan"))
+    if goodScan and not damaged(DRADIO): 
+	game.state.chart[game.quadrant.x][game.quadrant.y].klingons = game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons
+	game.state.chart[game.quadrant.x][game.quadrant.y].starbase = game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase
+	game.state.chart[game.quadrant.x][game.quadrant.y].stars = game.state.galaxy[game.quadrant.x][game.quadrant.y].stars
+	game.state.galaxy[game.quadrant.x][game.quadrant.y].charted = True
+    prout("    1 2 3 4 5 6 7 8 9 10")
+    if game.condition != "docked":
+	newcnd()
+    for i in range(1, QUADSIZE+1):
+	proutn("%2d  " % (i))
+	for j in range(1, QUADSIZE+1):
+	    sectscan(goodScan, i, j)
+	skip(1)
+			
+			
+def eta():
+    # use computer to get estimated time of arrival for a warp jump 
+    w1 = coord(); w2 = coord()
+    prompt = False
+    if damaged(DCOMPTR):
+	prout(_("COMPUTER DAMAGED, USE A POCKET CALCULATOR."))
+	skip(1)
+	return
+    if scan() != IHREAL:
+	prompt = True
+	chew()
+	proutn(_("Destination quadrant and/or sector? "))
+	if scan()!=IHREAL:
+	    huh()
+	    return
+    w1.y = aaitem +0.5
+    if scan() != IHREAL:
+	huh()
+	return
+    w1.x = aaitem + 0.5
+    if scan() == IHREAL:
+	w2.y = aaitem + 0.5
+	if scan() != IHREAL:
+	    huh()
+	    return
+	w2.x = aaitem + 0.5
+    else:
+	if game.quadrant.y>w1.x:
+	    w2.x = 1
+	else:
+	    w2.x=QUADSIZE
+	if game.quadrant.x>w1.y:
+	    w2.y = 1
+	else:
+	    w2.y=QUADSIZE
+
+    if not VALID_QUADRANT(w1.x, w1.y) or not VALID_SECTOR(w2.x, w2.y):
+	huh()
+	return
+    game.dist = math.sqrt(square(w1.y-game.quadrant.y+0.1*(w2.y-game.sector.y))+
+		square(w1.x-game.quadrant.x+0.1*(w2.x-game.sector.x)))
+    wfl = False
+
+    if prompt:
+	prout(_("Answer \"no\" if you don't know the value:"))
+    while True:
+	chew()
+	proutn(_("Time or arrival date? "))
+	if scan()==IHREAL:
+	    ttime = aaitem
+	    if ttime > game.state.date:
+		ttime -= game.state.date # Actually a star date
+            twarp=(math.floor(math.sqrt((10.0*game.dist)/ttime)*10.0)+1.0)/10.0
+            if ttime <= 1e-10 or twarp > 10:
+		prout(_("We'll never make it, sir."))
+		chew()
+		return
+	    if twarp < 1.0:
+		twarp = 1.0
+	    break
+	chew()
+	proutn(_("Warp factor? "))
+	if scan()== IHREAL:
+	    wfl = True
+	    twarp = aaitem
+	    if twarp<1.0 or twarp > 10.0:
+		huh()
+		return
+	    break
+	prout(_("Captain, certainly you can give me one of these."))
+    while True:
+	chew()
+	ttime = (10.0*game.dist)/square(twarp)
+	tpower = game.dist*twarp*twarp*twarp*(game.shldup+1)
+	if tpower >= game.energy:
+	    prout(_("Insufficient energy, sir."))
+	    if not game.shldup or tpower > game.energy*2.0:
+		if not wfl:
+		    return
+		proutn(_("New warp factor to try? "))
+		if scan() == IHREAL:
+		    wfl = True
+		    twarp = aaitem
+		    if twarp<1.0 or twarp > 10.0:
+			huh()
+			return
+		    continue
+		else:
+		    chew()
+		    skip(1)
+		    return
+	    prout(_("But if you lower your shields,"))
+	    proutn(_("remaining"))
+	    tpower /= 2
+	else:
+	    proutn(_("Remaining"))
+	prout(_(" energy will be %.2f.") % (game.energy-tpower))
+	if wfl:
+	    prout(_("And we will arrive at stardate %.2f.") % (game.state.date+ttime))
+	elif twarp==1.0:
+	    prout(_("Any warp speed is adequate."))
+	else:
+	    prout(_("Minimum warp needed is %.2f,") % (twarp))
+	    prout(_("and we will arrive at stardate %.2f.") % (game.state.date+ttime))
+	if game.state.remtime < ttime:
+	    prout(_("Unfortunately, the Federation will be destroyed by then."))
+	if twarp > 6.0:
+	    prout(_("You'll be taking risks at that speed, Captain"))
+	if (game.isatb==1 and game.state.kscmdr == w1 and \
+	     scheduled(FSCDBAS)< ttime+game.state.date) or \
+	    (scheduled(FCDBAS)<ttime+game.state.date and game.battle == w1):
+	    prout(_("The starbase there will be destroyed by then."))
+	proutn(_("New warp factor to try? "))
+	if scan() == IHREAL:
+	    wfl = True
+	    twarp = aaitem
+	    if twarp<1.0 or twarp > 10.0:
+		huh()
+		return
+	else:
+	    chew()
+	    skip(1)
+	    return
+			
+
+#ifdef BSD_BUG_FOR_BUG
+# A visual scan is made in a particular direction of three sectors
+# in the general direction specified.  This takes time, and
+# Klingons can attack you, so it should be done only when sensors
+# are out.  Code swiped from BSD-Trek.  Not presently used, as we
+# automatically display all adjacent sectors on the short-range
+# scan even when short-range sensors are out.
+
+# This struct[] has the delta x, delta y for particular directions
+
+visdelta = (
+    (-1,-1),
+    (-1, 0),
+    (-1, 1),
+    (0,	 1),
+    (1,	 1),
+    (1,	 0),
+    (1,	-1),
+    (0,	-1),
+    (-1,-1),
+    (-1, 0),
+    (-1, 1),
+)
+
+def visual():
+    v = coord()
+    if scan() != IHREAL:
+	chew()
+	proutn(_("Direction? "))
+	if scan()!=IHREAL:
+	    huh()
+	    return
+    if aaitem < 0.0 or aaitem > 360.0:
+	return
+    co = (aaitem + 22) / 45
+    v = visdelta[co]
+    ix = game.sector.x + v.x
+    iy = game.sector.y + v.y
+    if ix < 0 or ix >= QUADSIZE or iy < 0 or iy >= QUADSIZE:
+	co = '?'
+    else:
+	co = game.quad[ix][iy]
+    printf("%d,%d %c " % (ix, iy, co))
+    v += 1
+    ix = game.sector.x + v.x
+    iy = game.sector.y + v.y
+    if ix < 0 or ix >= QUADSIZE or iy < 0 or iy >= QUADSIZE:
+	co = '?'
+    else:
+	co = game.quad[ix][iy]
+    printf("%c " % (co))
+    v += 1
+    ix = game.sector.x + v.x
+    iy = game.sector.y + v.y
+    if ix < 0 or ix >= QUADSIZE or iy < 0 or iy >= QUADSIZE:
+	co = '?'
+    else:
+	co = game.quad[ix][iy]
+    prout("%c %d,%d\n" % (co, ix, iy))
+    game.optime = 0.5
+    game.ididit = True
+#endif



From esr at mail.berlios.de  Thu Oct  5 00:35:58 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 5 Oct 2006 00:35:58 +0200
Subject: [Sst-commit-watch] r666 - trunk/src
Message-ID: <200610042235.k94MZw7b030544@sheep.berlios.de>

Author: esr
Date: 2006-10-05 00:35:53 +0200 (Thu, 05 Oct 2006)
New Revision: 666

Modified:
   trunk/src/sst.py
Log:
setup.py code added to Python translation.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-04 19:24:39 UTC (rev 665)
+++ trunk/src/sst.py	2006-10-04 22:35:53 UTC (rev 666)
@@ -6,7 +6,7 @@
 an a lot of parallel arrays where a more modern language would use structures
 or objects.
 """
-import os, sys, math, curses, time, atexit, readline
+import os, sys, math, curses, time, atexit, readline, cPickle, random
 
 SSTDOC = "/usr/share/doc/sst/sst.doc"
 
@@ -84,6 +84,7 @@
         self.pclass = None	# could be ""M", "N", "O", or "destroyed"
         self.crystals = None	# could be "mined", "present", "absent"
         self.known = None	# could be "unknown", "known", "shuttle_down"
+        self.inhabited		# is it inhabites?
     def __str__(self):
         return self.name
 
@@ -119,8 +120,6 @@
 	self.nplankl = None	# destroyed uninhabited planets
 	self.nworldkl = None	# destroyed inhabited planets
         self.planets = []	# Planet information
-        for i in range(PLNETMAX):
-            self.planets.append(planet())
         self.date = None	# stardate
 	self.remres = None	# remaining resources
 	self.remtime = None	# remaining time
@@ -225,7 +224,7 @@
         self.kpower = [[0 * (QUADSIZE+1)] * (QUADSIZE+1)]	# enemy energy levels
         self.kdist = [[0 * (QUADSIZE+1)] * (QUADSIZE+1)]	# enemy distances
         self.kavgd = [[0 * (QUADSIZE+1)] * (QUADSIZE+1)]	# average distances
-        self.damage = [0] * NDEVICES	# damage encountered
+        self.damage = [0.0] * NDEVICES	# damage encountered
         self.future = [0.0] * NEVENTS	# future events
         for i in range(NEVENTS):
             self.future.append(event())
@@ -2449,7 +2448,7 @@
 		w = randplace(GALSIZE)
 		q = game.state.galaxy[w.x][w.y]
                 if not (game.quadrant == w or q.planet == NOPLANET or \
-		      game.state.planets[q.planet].inhabited == UNINHABITED or \
+		      not game.state.planets[q.planet].inhabited or \
 		      q.supernova or q.status!=secure or q.klingons<=0):
                     break
             else:
@@ -4667,7 +4666,7 @@
 	if game.state.planets[i].pclass == destroyed:
 	    continue
 	if (game.state.planets[i].known != "unknown" \
-            and game.state.planets[i].inhabited == UNINHABITED) \
+            and not game.state.planets[i].inhabited) \
             or idebug:
 	    iknow = True
 	    if idebug and game.state.planets[i].known=="unknown":
@@ -5353,7 +5352,7 @@
     elif not req or req == 10:
 	if game.options & OPTION_WORLDS:
 	    plnet = game.state.galaxy[game.quadrant.x][game.quadrant.y].planet
-	    if plnet != NOPLANET and game.state.planets[plnet].inhabited != UNINHABITED:
+	    if plnet != NOPLANET and game.state.planets[plnet].inhabited:
 		prstat(_("Major system"), plnet.name)
 	    else:
 		prout(_("Sector is uninhabited"))
@@ -5586,3 +5585,680 @@
     game.optime = 0.5
     game.ididit = True
 #endif
+
+# Code from setup.c begins here
+
+def filelength(fd):
+    return os.fstat(fd).st_size
+
+def prelim():
+    # issue a historically correct banner 
+    skip(2)
+    prout(_("-SUPER- STAR TREK"))
+    skip(1)
+#ifdef __HISTORICAL__
+#    prout(_("Latest update-21 Sept 78"))
+#    skip(1)
+#endif __HISTORICAL__ 
+
+def freeze(boss):
+    # save game 
+    if boss:
+	citem = "emsave.trk"
+    else:
+        key = scan()
+	if key == IHEOL:
+	    proutn(_("File name: "))
+	    key = scan()
+	if key != IHALPHA:
+	    huh()
+	    return
+	chew()
+        if '.' not in citem:
+	    citem += ".trk"
+    try:
+        fp = open(citem, "wb")
+    except IOError:
+	prout(_("Can't freeze game as file %s") % citem)
+	return
+    cPickle.dump(game, fp)
+    fp.close()
+
+def thaw():
+    # retrieve saved game 
+    game.passwd[0] = '\0'
+    key = scan()
+    if key == IHEOL:
+	proutn(_("File name: "))
+	key = scan()
+    if key != IHALPHA:
+	huh()
+	return True
+    chew()
+    if '.' not in citem:
+        citem += ".trk"
+    try:
+        fp = open(citem, "rb")
+    except IOError:
+	prout(_("Can't thaw game in %s") % citem)
+	return
+    game = cPickle.load(fp)
+    fp.close()
+    return False
+
+# I used <http://www.memory-alpha.org> to find planets
+# with references in ST:TOS.  Eath and the Alpha Centauri
+# Colony have been omitted.
+# 
+# Some planets marked Class G and P here will be displayed as class M
+# because of the way planets are generated. This is a known bug.
+systnames = (
+    # Federation Worlds 
+    _("Andoria (Fesoan)"),	# several episodes 
+    _("Tellar Prime (Miracht)"),	# TOS: "Journey to Babel" 
+    _("Vulcan (T'Khasi)"),	# many episodes 
+    _("Medusa"),		# TOS: "Is There in Truth No Beauty?" 
+    _("Argelius II (Nelphia)"),# TOS: "Wolf in the Fold" ("IV" in BSD) 
+    _("Ardana"),		# TOS: "The Cloud Minders" 
+    _("Catulla (Cendo-Prae)"),	# TOS: "The Way to Eden" 
+    _("Gideon"),		# TOS: "The Mark of Gideon" 
+    _("Aldebaran III"),	# TOS: "The Deadly Years" 
+    _("Alpha Majoris I"),	# TOS: "Wolf in the Fold" 
+    _("Altair IV"),		# TOS: "Amok Time 
+    _("Ariannus"),		# TOS: "Let That Be Your Last Battlefield" 
+    _("Benecia"),		# TOS: "The Conscience of the King" 
+    _("Beta Niobe I (Sarpeidon)"),	# TOS: "All Our Yesterdays" 
+    _("Alpha Carinae II"),	# TOS: "The Ultimate Computer" 
+    _("Capella IV (Kohath)"),	# TOS: "Friday's Child" (Class G) 
+    _("Daran V"),		# TOS: "For the World is Hollow and I Have Touched the Sky" 
+    _("Deneb II"),		# TOS: "Wolf in the Fold" ("IV" in BSD) 
+    _("Eminiar VII"),		# TOS: "A Taste of Armageddon" 
+    _("Gamma Canaris IV"),	# TOS: "Metamorphosis" 
+    _("Gamma Tranguli VI (Vaalel)"),	# TOS: "The Apple" 
+    _("Ingraham B"),		# TOS: "Operation: Annihilate" 
+    _("Janus IV"),		# TOS: "The Devil in the Dark" 
+    _("Makus III"),		# TOS: "The Galileo Seven" 
+    _("Marcos XII"),		# TOS: "And the Children Shall Lead", 
+    _("Omega IV"),		# TOS: "The Omega Glory" 
+    _("Regulus V"),		# TOS: "Amok Time 
+    _("Deneva"),		# TOS: "Operation -- Annihilate!" 
+    # Worlds from BSD Trek 
+    _("Rigel II"),		# TOS: "Shore Leave" ("III" in BSD) 
+    _("Beta III"),		# TOS: "The Return of the Archons" 
+    _("Triacus"),		# TOS: "And the Children Shall Lead", 
+    _("Exo III"),		# TOS: "What Are Little Girls Made Of?" (Class P) 
+#	# Others 
+#    _("Hansen's Planet"),	# TOS: "The Galileo Seven" 
+#    _("Taurus IV"),		# TOS: "The Galileo Seven" (class G) 
+#    _("Antos IV (Doraphane)"),	# TOS: "Whom Gods Destroy", "Who Mourns for Adonais?" 
+#    _("Izar"),			# TOS: "Whom Gods Destroy" 
+#    _("Tiburon"),		# TOS: "The Way to Eden" 
+#    _("Merak II"),		# TOS: "The Cloud Minders" 
+#    _("Coridan (Desotriana)"),	# TOS: "Journey to Babel" 
+#    _("Iotia"),		# TOS: "A Piece of the Action" 
+)
+
+device = (
+	_("S. R. Sensors"), \
+	_("L. R. Sensors"), \
+	_("Phasers"), \
+	_("Photon Tubes"), \
+	_("Life Support"), \
+	_("Warp Engines"), \
+	_("Impulse Engines"), \
+	_("Shields"), \
+	_("Subspace Radio"), \
+	_("Shuttle Craft"), \
+	_("Computer"), \
+	_("Navigation System"), \
+	_("Transporter"), \
+	_("Shield Control"), \
+	_("Death Ray"), \
+	_("D. S. Probe"), \
+)
+
+def setup(needprompt):
+    # prepare to play, set up cosmos 
+    intj, krem, klumper
+    w = coord()
+
+    #  Decide how many of everything
+    if choose(needprompt):
+	return # frozen game
+    # Prepare the Enterprise
+    game.alldone = game.gamewon = False
+    game.ship = IHE
+    game.state.crew = FULLCREW
+    game.energy = game.inenrg = 5000.0
+    game.shield = game.inshld = 2500.0
+    game.shldchg = False
+    game.shldup = False
+    game.inlsr = 4.0
+    game.lsupres = 4.0
+    game.quadrant = randplace(GALSIZE)
+    game.sector = randplace(QUADSIZE)
+    game.torps = game.intorps = 10
+    game.nprobes = int(3.0*Rand() + 2.0)	# Give them 2-4 of these
+    game.warpfac = 5.0
+    game.wfacsq = game.warpfac * game.warpfac
+    for i in range(0, NDEVICES): 
+	game.damage[i] = 0.0
+    # Set up assorted game parameters
+    invalidate(game.battle)
+    game.state.date = game.indate = 100.0*int(31.0*Rand()+20.0)
+    game.nkinks = game.nhelp = game.casual = game.abandoned = 0
+    game.iscate = game.resting = game.imine = game.icrystl = game.icraft = False
+    game.isatb = game.state.nplankl = 0
+    game.state.starkl = game.state.basekl = 0
+    game.iscraft = "onship"
+    game.landed = False
+    game.alive = True
+    game.docfac = 0.25
+    for i in range(1, GALSIZE+1):
+	for j in range(1, GALSIZE+1):
+	    quad = game.state.galaxy[i][j]
+	    quad.charted = 0
+	    quad.planet = NOPLANET
+	    quad.romulans = 0
+	    quad.klingons = 0
+	    quad.starbase = False
+	    quad.supernova = False
+	    quad.status = "secure"
+    # Initialize times for extraneous events
+    schedule(FSNOVA, expran(0.5 * game.intime))
+    schedule(FTBEAM, expran(1.5 * (game.intime / game.state.remcom)))
+    schedule(FSNAP, 1.0 + Rand()) # Force an early snapshot
+    schedule(FBATTAK, expran(0.3*game.intime))
+    unschedule(FCDBAS)
+    if game.state.nscrem:
+	schedule(FSCMOVE, 0.2777)
+    else:
+	unschedule(FSCMOVE)
+    unschedule(FSCDBAS)
+    unschedule(FDSPROB)
+    if (game.options & OPTION_WORLDS) and game.skill >= SKILL_GOOD:
+	schedule(FDISTR, expran(1.0 + game.intime))
+    else:
+	unschedule(FDISTR)
+    unschedule(FENSLV)
+    unschedule(FREPRO)
+    # Starchart is functional but we've never seen it
+    game.lastchart = FOREVER
+    # Put stars in the galaxy
+    game.instar = 0
+    for i in range(1, GALSIZE+1):
+	for j in range(1, GALSIZE+1):
+	    k = Rand()*9.0 + 1.0
+	    game.instar += k
+	    game.state.galaxy[i][j].stars = k
+    # Locate star bases in galaxy
+    for i in range(1, game.inbase+1):
+        while True:
+            while True:
+                w = randplace(GALSIZE)
+                if not game.state.galaxy[w.x][w.y].starbase:
+                    break
+	    contflag = False
+            # C version: for (j = i-1; j > 0; j--)
+            # so it did them in the opposite order.
+            for j in range(i):
+		# Improved placement algorithm to spread out bases 
+		distq = w.distance(baseq[j])
+		if distq < 6.0*(BASEMAX+1-game.inbase) and Rand() < 0.75:
+		    contflag = True
+		    if idebug:
+			prout("=== Abandoning base #%d at %s" % (i, w))
+		    break
+		elif distq < 6.0 * (BASEMAX+1-game.inbase):
+		    if idebug:
+			prout("=== Saving base #%d, close to #%d" % (i, j))
+            if not contflag:
+                break
+	game.state.baseq[i] = w
+	game.state.galaxy[w.x][w.y].starbase = True
+	game.state.chart[w.x][w.y].starbase = True
+    # Position ordinary Klingon Battle Cruisers
+    krem = game.inkling
+    klumper = 0.25*game.skill*(9.0-game.length)+1.0
+    if klumper > MAXKLQUAD: 
+	klumper = MAXKLQUAD
+    while True:
+	r = Rand()
+	klump = (1.0 - r*r)*klumper
+	if klump > krem:
+	    klump = krem
+	krem -= klump
+        while True:
+            w = randplace(GALSIZE)
+            if not game.state.galaxy[w.x][w.y].supernova and \
+               game.state.galaxy[w.x][w.y].klingons + klump <= MAXKLQUAD:
+                break
+	game.state.galaxy[w.x][w.y].klingons += klump
+        if krem <= 0:
+            break
+    # Position Klingon Commander Ships
+    for i in range(1, game.incom+1):
+        while True:
+            w = randplace(GALSIZE)
+	    if (game.state.galaxy[w.x][w.y].klingons or Rand()>=0.75) and \
+		   not game.state.galaxy[w.x][w.y].supernova and \
+		   game.state.galaxy[w.x][w.y].klingons <= MAXKLQUAD-1 and \
+                   not w in game.state.kcmdr[:i]:
+                break
+	game.state.galaxy[w.x][w.y].klingons += 1
+	game.state.kcmdr[i] = w
+    # Locate planets in galaxy
+    for i in range(game.inplan):
+        while True:
+            w = randplace(GALSIZE) 
+            if game.state.galaxy[w.x][w.y].planet == NOPLANET:
+                break
+        new = planet()
+	new.w = w
+        new.crystals = "absent"
+	if (game.options & OPTION_WORLDS) and i < NINHAB:
+	    new.pclass = "M"	# All inhabited planets are class M
+	    new.crystals = "absent"
+	    new.known = "known"
+            new.name = systnames[i]
+	    new.inhabited = True
+	else:
+	    new.pclass = ("M", "N", "O")[Rand()*3.0]
+            if Rand()*1.5:		# 1 in 3 chance of crystals
+                new.crystals = "present"
+	    new.known = "unknown"
+	    new.inhabited = False
+	game.state.galaxy[w.x][w.y].planet = new
+        game.state.plnets.append(new)
+    # Locate Romulans
+    for i in range(1, game.state.nromrem+1):
+	w = randplace(GALSIZE)
+	game.state.galaxy[w.x][w.y].romulans += 1
+    # Locate the Super Commander
+    if game.state.nscrem > 0:
+        while True:
+            w = randplace(GALSIZE)
+            if not game.state.galaxy[w.x][w.y].supernova and game.state.galaxy[w.x][w.y].klingons <= MXKLQUAD:
+                break
+	game.state.kscmdr = w
+	game.state.galaxy[w.x][w.y].klingons += 1
+    # Place thing (in tournament game, thingx == -1, don't want one!)
+    if thing.x != -1:
+	thing = randplace(GALSIZE)
+    else:
+	invalidate(thing)
+    skip(2)
+    game.state.snap = False
+    if game.skill == SKILL_NOVICE:
+	prout(_("It is stardate %d. The Federation is being attacked by") % int(game.state.date))
+	prout(_("a deadly Klingon invasion force. As captain of the United"))
+	prout(_("Starship U.S.S. Enterprise, it is your mission to seek out"))
+	prout(_("and destroy this invasion force of %d battle cruisers.") % ((game.inkling + game.incom + game.inscom)))
+	prout(_("You have an initial allotment of %d stardates to complete") % int(game.intime))
+	prout(_("your mission.  As you proceed you may be given more time."))
+	skip(1)
+	prout(_("You will have %d supporting starbases.") % (game.inbase))
+	proutn(_("Starbase locations-  "))
+    else:
+	prout(_("Stardate %d.") % int(game.state.date))
+	skip(1)
+	prout(_("%d Klingons.") % (game.inkling + game.incom + game.inscom))
+	prout(_("An unknown number of Romulans."))
+	if game.state.nscrem:
+	    prout(_("And one (GULP) Super-Commander."))
+	prout(_("%d stardates.") % int(game.intime))
+	proutn(_("%d starbases in ") % game.inbase)
+    for i in range(1, game.inbase+1):
+	proutn(`game.state.baseq[i]`)
+	proutn("  ")
+    skip(2)
+    proutn(_("The Enterprise is currently in Quadrant %s") % game.quadrant)
+    proutn(_(" Sector %s") % game.sector)
+    skip(2)
+    prout(_("Good Luck!"))
+    if game.state.nscrem:
+	prout(_("  YOU'LL NEED IT."))
+    waitfor()
+    newqad(False)
+    if game.nenhere - iqhere-game.ithere:
+	game.shldup = True
+    if game.neutz:	# bad luck to start in a Romulan Neutral Zone
+	attack(False)
+
+def choose(needprompt):
+    # choose your game type 
+    while True:
+	game.tourn = 0
+	game.thawed = False
+	game.skill = SKILL_NONE
+	game.length = 0
+	if needprompt: # Can start with command line options 
+	    proutn(_("Would you like a regular, tournament, or saved game? "))
+	scan()
+	if len(citem)==0: # Try again
+	    continue
+        if isit("tournament"):
+	    while scan() == IHEOL:
+		proutn(_("Type in tournament number-"))
+	    if aaitem == 0:
+		chew()
+		continue # We don't want a blank entry
+	    game.tourn = int(aaitem)
+	    thing.x = -1
+	    random.seed(aaitem)
+	    break
+        if isit("saved") or isit("frozen"):
+	    if thaw():
+		continue
+	    chew()
+	    if game.passwd == None:
+		continue
+	    if not game.alldone:
+		game.thawed = True # No plaque if not finished
+	    report()
+	    waitfor()
+	    return True
+        if isit("regular"):
+	    break
+	proutn(_("What is \""))
+	proutn(citem)
+	prout("\"?")
+	chew()
+    while game.length==0 or game.skill==SKILL_NONE:
+	if scan() == IHALPHA:
+            if isit("short"):
+		game.length = 1
+	    elif isit("medium"):
+		game.length = 2
+	    elif isit("long"):
+		game.length = 4
+	    elif isit("novice"):
+		game.skill = SKILL_NOVICE
+	    elif isit("fair"):
+		game.skill = SKILL_FAIR
+	    elif isit("good"):
+		game.skill = SKILL_GOOD
+	    elif isit("expert"):
+		game.skill = SKILL_EXPERT
+	    elif isit("emeritus"):
+		game.skill = SKILL_EMERITUS
+	    else:
+		proutn(_("What is \""))
+		proutn(citem)
+		prout("\"?")
+	else:
+	    chew()
+	    if game.length==0:
+		proutn(_("Would you like a Short, Medium, or Long game? "))
+	    elif game.skill == SKILL_NONE:
+		proutn(_("Are you a Novice, Fair, Good, Expert, or Emeritus player? "))
+    # Choose game options -- added by ESR for SST2K
+    if scan() != IHALPHA:
+	chew()
+	proutn(_("Choose your game style (or just press enter): "))
+	scan()
+    if isit("plain"):
+	# Approximates the UT FORTRAN version.
+	game.options &=~ (OPTION_THOLIAN | OPTION_PLANETS | OPTION_THINGY | OPTION_PROBE | OPTION_RAMMING | OPTION_MVBADDY | OPTION_BLKHOLE | OPTION_BASE | OPTION_WORLDS)
+	game.options |= OPTION_PLAIN
+    elif isit("almy"):
+	# Approximates Tom Almy's version.
+	game.options &=~ (OPTION_THINGY | OPTION_BLKHOLE | OPTION_BASE | OPTION_WORLDS)
+	game.options |= OPTION_ALMY
+    elif isit("fancy"):
+	pass
+    elif len(citem):
+        proutn(_("What is \"%s\"?") % citem)
+    setpassword()
+    if game.passwd == "debug":
+	idebug = True
+	fputs("=== Debug mode enabled\n", sys.stdout)
+
+    # Use parameters to generate initial values of things
+    game.damfac = 0.5 * game.skill
+    game.state.rembase = 2.0 + Rand()*(BASEMAX-2.0)
+    game.inbase = game.state.rembase
+    game.inplan = 0
+    if game.options & OPTION_PLANETS:
+	game.inplan += (MAXUNINHAB/2) + (MAXUNINHAB/2+1)*Rand()
+    if game.options & OPTION_WORLDS:
+	game.inplan += NINHAB
+    game.state.nromrem = game.inrom = (2.0+Rand())*game.skill
+    game.state.nscrem = game.inscom = (game.skill > SKILL_FAIR)
+    game.state.remtime = 7.0 * game.length
+    game.intime = game.state.remtime
+    game.state.remkl = game.inkling = 2.0*game.intime*((game.skill+1 - 2*Rand())*game.skill*0.1+.15)
+    game.incom = game.skill + 0.0625*game.inkling*Rand()
+    game.state.remcom = min(10, game.incom)
+    game.incom = game.state.remcom
+    game.state.remres = (game.inkling+4*game.incom)*game.intime
+    game.inresor = game.state.remres
+    if game.inkling > 50:
+        game.state.rembase += 1
+	game.inbase = game.state.rembase
+    return False
+
+def dropin(iquad):
+    # drop a feature on a random dot in the current quadrant 
+    w = coord()
+    while True:
+        w = randplace(QUADSIZE)
+        if game.quad[w.x][w.y] == IHDOT:
+            break
+    game.quad[w.x][w.y] = iquad
+    return w
+
+def newcnd():
+    # update our alert status 
+    game.condition = "green"
+    if game.energy < 1000.0:
+	game.condition = "yellow"
+    if game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons or game.state.galaxy[game.quadrant.x][game.quadrant.y].romulans:
+	game.condition = "red"
+    if not game.alive:
+	game.condition="dead"
+
+def newkling(i):
+    # drop new Klingon into current quadrant 
+    pi = dropin(IHK)
+    game.ks[i] = pi
+    game.kdist[i] = game.kavgd[i] = distance(game.sector, pi)
+    game.kpower[i] = Rand()*150.0 +300.0 +25.0*game.skill
+    return pi
+
+def newqad(shutup):
+    # set up a new state of quadrant, for when we enter or re-enter it 
+    w = coord()
+    game.justin = True
+    invalidate(game.base)
+    game.klhere = 0
+    game.comhere = False
+    invalidate(game.plnet)
+    game.ishere = False
+    game.irhere = 0
+    game.iplnet = 0
+    game.nenhere = 0
+    game.neutz = False
+    game.inorbit = False
+    game.landed = False
+    game.ientesc = False
+    game.ithere = False
+    iqhere = False
+    iqengry = False
+    game.iseenit = False
+    if game.iscate:
+	# Attempt to escape Super-commander, so tbeam back!
+	game.iscate = False
+	game.ientesc = True
+    # Clear quadrant
+    for i in range(1, QUADSIZE+1):
+	for j in range(1, QUADSIZE+1):
+	    game.quad[i][j] = IHDOT
+    q = game.state.galaxy[game.quadrant.x][game.quadrant.y]
+    # cope with supernova
+    if q.supernova:
+	return
+    game.klhere = q.klingons
+    game.irhere = q.romulans
+    game.nenhere = game.klhere + game.irhere
+
+    # Position Starship
+    game.quad[game.sector.x][game.sector.y] = game.ship
+
+    if q.klingons:
+	w.x = w.y = 0	# quiet a gcc warning 
+	# Position ordinary Klingons
+	for i in range(1, game.klhere+1):
+	    w = newkling(i)
+	# If we need a commander, promote a Klingon
+	for i in range(1, game.state.remcom+1):
+	    if same(game.state.kcmdr[i], game.quadrant):
+		break
+			
+	if i <= game.state.remcom:
+	    game.quad[w.x][w.y] = IHC
+	    game.kpower[game.klhere] = 950.0+400.0*Rand()+50.0*game.skill
+	    game.comhere = True
+
+	# If we need a super-commander, promote a Klingon
+	if same(game.quadrant, game.state.kscmdr):
+	    game.quad[game.ks[1].x][game.ks[1].y] = IHS
+	    game.kpower[1] = 1175.0 + 400.0*Rand() + 125.0*game.skill
+	    game.iscate = (game.state.remkl > 1)
+	    game.ishere = True
+    # Put in Romulans if needed
+    for i in range(game.klhere+1, game.nenhere+1):
+	w = dropin(IHR)
+	game.ks[i] = w
+	game.kdist[i] = game.kavgd[i] = distance(game.sector, w)
+	game.kpower[i] = Rand()*400.0 + 450.0 + 50.0*game.skill
+    # If quadrant needs a starbase, put it in
+    if q.starbase:
+	game.base = dropin(IHB)
+	
+    # If quadrant needs a planet, put it in
+    if q.planet != NOPLANET:
+	game.iplnet = q.planet
+	if game.state.planets[q.planet].inhabited == UNINHABITED:
+	    game.plnet = dropin(IHP)
+	else:
+	    game.plnet = dropin(IHW)
+    # Check for condition
+    newcnd()
+    # And finally the stars
+    for i in range(1, q.stars+1): 
+	dropin(IHSTAR)
+
+    # Check for RNZ
+    if game.irhere > 0 and game.klhere == 0:
+	game.neutz = True
+	if not damaged(DRADIO):
+	    skip(1)
+	    prout(_("LT. Uhura- \"Captain, an urgent message."))
+	    prout(_("  I'll put it on audio.\"  CLICK"))
+	    skip(1)
+	    prout(_("INTRUDER! YOU HAVE VIOLATED THE ROMULAN NEUTRAL ZONE."))
+	    prout(_("LEAVE AT ONCE, OR YOU WILL BE DESTROYED!"))
+
+    if shutup==0:
+	# Put in THING if needed
+	if same(thing, game.quadrant):
+	    w = dropin(IHQUEST)
+	    thing = randplace(GALSIZE)
+	    game.nenhere += 1
+	    iqhere = True
+	    game.ks[game.nenhere] = w
+	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] = \
+		distance(game.sector, w)
+	    game.kpower[game.nenhere] = Rand()*6000.0 +500.0 +250.0*game.skill
+	    if not damaged(DSRSENS):
+		skip(1)
+		prout(_("Mr. Spock- \"Captain, this is most unusual."))
+		prout(_("    Please examine your short-range scan.\""))
+
+    # Decide if quadrant needs a Tholian; lighten up if skill is low 
+    if game.options & OPTION_THOLIAN:
+	if (game.skill < SKILL_GOOD and Rand() <= 0.02) or \
+	    (game.skill == SKILL_GOOD and Rand() <= 0.05) or \
+            (game.skill > SKILL_GOOD and Rand() <= 0.08):
+            while True:
+		game.tholian.x = random.choice((1, QUADSIZE))
+		game.tholian.y = random.choice((1, QUADSIZE))
+                if game.quad[game.tholian.x][game.tholian.y] == IHDOT:
+                    break
+	    game.quad[game.tholian.x][game.tholian.y] = IHT
+	    game.ithere = True
+	    game.nenhere += 1
+	    game.ks[game.nenhere] = game.tholian
+	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] = \
+		distance(game.sector, game.tholian)
+	    game.kpower[game.nenhere] = Rand()*400.0 +100.0 +25.0*game.skill
+	    # Reserve unoccupied corners 
+	    if game.quad[1][1]==IHDOT:
+		game.quad[1][1] = 'X'
+	    if game.quad[1][QUADSIZE]==IHDOT:
+		game.quad[1][QUADSIZE] = 'X'
+	    if game.quad[QUADSIZE][1]==IHDOT:
+		game.quad[QUADSIZE][1] = 'X'
+	    if game.quad[QUADSIZE][QUADSIZE]==IHDOT:
+		game.quad[QUADSIZE][QUADSIZE] = 'X'
+    sortklings()
+
+    # Put in a few black holes
+    for i in range(1, 3+1):
+	if Rand() > 0.5: 
+	    dropin(IHBLANK)
+
+    # Take out X's in corners if Tholian present
+    if game.ithere:
+	if game.quad[1][1]=='X':
+	    game.quad[1][1] = IHDOT
+	if game.quad[1][QUADSIZE]=='X':
+	    game.quad[1][QUADSIZE] = IHDOT
+	if game.quad[QUADSIZE][1]=='X':
+	    game.quad[QUADSIZE][1] = IHDOT
+	if game.quad[QUADSIZE][QUADSIZE]=='X':
+	    game.quad[QUADSIZE][QUADSIZE] = IHDOT
+
+def sortklings():
+    # sort Klingons by distance from us 
+    # The author liked bubble sort. So we will use it. :-(
+    if game.nenhere-iqhere-game.ithere < 2:
+	return
+    while True:
+	sw = False
+	for j in range(1, game.nenhere):
+	    if game.kdist[j] > game.kdist[j+1]:
+		sw = True
+		t = game.kdist[j]
+		game.kdist[j] = game.kdist[j+1]
+		game.kdist[j+1] = t
+		t = game.kavgd[j]
+		game.kavgd[j] = game.kavgd[j+1]
+		game.kavgd[j+1] = t
+		k = game.ks[j].x
+		game.ks[j].x = game.ks[j+1].x
+		game.ks[j+1].x = k
+		k = game.ks[j].y
+		game.ks[j].y = game.ks[j+1].y
+		game.ks[j+1].y = k
+		t = game.kpower[j]
+		game.kpower[j] = game.kpower[j+1]
+		game.kpower[j+1] = t
+        if not sw:
+            break
+
+def setpassword():
+    # set the self-destruct password 
+    if game.options & OPTION_PLAIN:
+	while True:
+	    chew()
+	    proutn(_("Please type in a secret password- "))
+	    scan()
+	    game.passwd = citem
+	    if game.passwd != None:
+		break
+    else:
+        game.passwd = ""
+        for i in range(3):
+	    game.passwd[i] += chr(97+int(Rand()*25))



From esr at mail.berlios.de  Thu Oct  5 04:30:36 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 5 Oct 2006 04:30:36 +0200
Subject: [Sst-commit-watch] r667 - trunk/src
Message-ID: <200610050230.k952UaXn004842@sheep.berlios.de>

Author: esr
Date: 2006-10-05 04:30:35 +0200 (Thu, 05 Oct 2006)
New Revision: 667

Modified:
   trunk/src/sst.py
Log:
Python translation is syntactically correct.  Now for the grotty
part...


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-04 22:35:53 UTC (rev 666)
+++ trunk/src/sst.py	2006-10-05 02:30:35 UTC (rev 667)
@@ -1,15 +1,182 @@
-"""
+'''
 sst.py =-- Super Star Trek in Python
 
 This code is a Python translation of a C translation of a FORTRAN original.
 The FORTRANness still shows in many ways, notably the use of 1-origin index
 an a lot of parallel arrays where a more modern language would use structures
 or objects.
-"""
-import os, sys, math, curses, time, atexit, readline, cPickle, random
 
-SSTDOC = "/usr/share/doc/sst/sst.doc"
+Dave Matuszek says:
 
+SRSCAN, MOVE, PHASERS, CALL, STATUS, IMPULSE, PHOTONS, ABANDON,
+LRSCAN, WARP, SHIELDS, DESTRUCT, CHART, REST, DOCK, QUIT, and DAMAGE
+were in the original non-"super" version of UT FORTRAN Star Trek.
+
+Tholians were not in the original. Dave is dubious about their merits.
+(They are now controlled by OPTION_THOLIAN and turned off if the game
+type is "plain".)
+
+Planets and dilithium crystals were not in the original.  Dave is OK
+with this idea. (It's now controlled by OPTION_PLANETS and turned 
+off if the game type is "plain".)
+
+Dave says the bit about the Galileo getting turned into a
+McDonald's is "consistant with our original vision".  (This has been
+left permanently enabled, as it can only happen if OPTION_PLANETS
+is on.)
+
+Dave also says the Space Thingy should not be preserved across saved
+games, so you can't prove to others that you've seen it.  He says it
+shouldn't fire back, either.  It should do nothing except scream and
+disappear when hit by photon torpedos.  It's OK that it may move
+when attacked, but it didn't in the original.  (Whether the Thingy
+can fire back is now controlled by OPTION_THINGY and turned off if the
+game type is "plain" or "almy".  The no-save behavior has been restored.)
+
+The Faerie Queen, black holes, and time warping were in the original.
+
+Here are Tom Almy's changes:
+
+In early 1997, I got the bright idea to look for references to
+"Super Star Trek" on the World Wide Web. There weren't many hits,
+but there was one that came up with 1979 Fortran sources! This
+version had a few additional features that mine didn't have,
+however mine had some feature it didn't have. So I merged its
+features that I liked. I also took a peek at the DECUS version (a
+port, less sources, to the PDP-10), and some other variations.
+
+1, Compared to the original UT version, I've changed the "help" command to
+"call" and the "terminate" command to "quit" to better match
+user expectations. The DECUS version apparently made those changes
+as well as changing "freeze" to "save". However I like "freeze".
+(Both "freeze" and "save" work in SST2K.)
+
+2. The experimental deathray originally had only a 5% chance of
+success, but could be used repeatedly. I guess after a couple
+years of use, it was less "experimental" because the 1979
+version had a 70% success rate. However it was prone to breaking
+after use. I upgraded the deathray, but kept the original set of
+failure modes (great humor!).  (Now controlled by OPTION_DEATHRAY
+and turned off if game type is "plain".)
+
+3. The 1979 version also mentions srscan and lrscan working when
+docked (using the starbase's scanners), so I made some changes here
+to do this (and indicating that fact to the player), and then realized
+the base would have a subspace radio as well -- doing a Chart when docked
+updates the star chart, and all radio reports will be heard. The Dock
+command will also give a report if a base is under attack.
+
+4. Tholian Web from the 1979 version.  (Now controlled by
+OPTION_THOLIAN and turned off if game type is "plain".)
+
+5. Enemies can ram the Enterprise. (Now controlled by OPTION_RAMMING
+and turned off if game type is "plain".)
+
+6. Regular Klingons and Romulans can move in Expert and Emeritus games. 
+This code could use improvement. (Now controlled by OPTION_MVBADDY
+and turned off if game type is "plain".)
+
+7. The deep-space probe feature from the DECUS version.  (Now controlled
+by OPTION_PROBE and turned off if game type is "plain").
+
+8. 'emexit' command from the 1979 version.
+
+9. Bugfix: Klingon commander movements are no longer reported if long-range 
+sensors are damaged.
+
+10. Bugfix: Better base positioning at startup (more spread out).
+That made sense to add because most people abort games with 
+bad base placement.
+
+In June 2002, I fixed two known bugs and a documentation typo.
+In June 2004 I fixed a number of bugs involving: 1) parsing invalid
+numbers, 2) manual phasers when SR scan is damaged and commander is
+present, 3) time warping into the future, 4) hang when moving
+klingons in crowded quadrants.  (These fixes are in SST2K.)
+
+Here are Stas Sergeev's changes:
+
+1. The Space Thingy can be shoved, if you ram it, and can fire back if 
+fired upon. (Now controlled by OPTION_THINGY and turned off if game 
+type is "plain" or "almy".)
+
+2. When you are docked, base covers you with an almost invincible shield. 
+(A commander can still ram you, or a Romulan can destroy the base,
+or a SCom can even succeed with direct attack IIRC, but this rarely 
+happens.)  (Now controlled by OPTION_BASE and turned off if game 
+type is "plain" or "almy".)
+
+3. Ramming a black hole is no longer instant death.  There is a
+chance you might get timewarped instead. (Now controlled by 
+OPTION_BLKHOLE and turned off if game type is "plain" or "almy".)
+
+4. The Tholian can be hit with phasers.
+
+5. SCom can't escape from you if no more enemies remain 
+(without this, chasing SCom can take an eternity).
+
+6. Probe target you enter is now the destination quadrant. Before I don't 
+remember what it was, but it was something I had difficulty using.
+
+7. Secret password is now autogenerated.
+
+8. "Plaque" is adjusted for A4 paper :-)
+
+9. Phasers now tells you how much energy needed, but only if the computer 
+is alive.
+
+10. Planets are auto-scanned when you enter the quadrant.
+
+11. Mining or using crystals in presense of enemy now yields an attack.
+There are other minor adjustments to what yields an attack
+and what does not.
+
+12. "freeze" command reverts to "save", most people will understand this
+better anyway. (SST2K recognizes both.)
+
+13. Screen-oriented interface, with sensor scans always up.  (SST2K
+supports both screen-oriented and TTY modes.)
+
+Eric Raymond's changes:
+
+Mainly, I translated this C code out of FORTRAN into C -- created #defines
+for a lot of magic numbers and refactored the heck out of it.
+
+1. "sos" and "call" becomes "mayday", "freeze" and "save" are both good.
+
+2. Status report now indicates when dilithium crystals are on board.
+
+3. Per Dave Matuszek's remarks, Thingy state is never saved across games.
+
+4. Added game option selection so you can play a close (but not bug-for-
+bug identical) approximation of older versions.
+
+5. Half the quadrants now have inhabited planets, from which one 
+cannot mine dilithium (there will still be the same additional number
+of dilithium-bearing planets).  Torpedoing an inhabited world is *bad*.
+There is BSD-Trek-like logic for Klingons to attack and enslave 
+inhabited worlds, producing more ships (only is skill is 'good' or 
+better). (Controlled by OPTION_WORLDS and turned off if game 
+type is "plain" or "almy".)
+
+6. User input is now logged so we can do regression testing.
+
+7. More BSD-Trek features: You can now lose if your entire crew
+dies in battle.  When abandoning ship in a game with inhabited
+worlds enabled, they must have one in the quadrant to beam down
+to; otherwise they die in space and this counts heavily against
+your score.  Docking at a starbase replenishes your crew.
+
+8. Still more BSD-Trek: we now have a weighted damage table.
+Also, the nav subsystem (enabling automatic course
+setting) can be damaged separately from the main computer (which
+handles weapons targeting, ETA calculation, and self-destruct).
+'''
+import os, sys, math, curses, time, atexit, readline, cPickle, random, getopt
+
+SSTDOC  	= "/usr/share/doc/sst/sst.doc"
+DOC_NAME	= "sst.doc"
+
 # Stub to be replaced
 def _(str): return str
 
@@ -54,6 +221,10 @@
 IHMATER1 = 'o',
 IHMATER2 = '0'
 
+IHEOL = '\n'
+IHREAL = 0.0
+IHALPHA = " "
+
 class coord:
     def __init(self, x=None, y=None):
         self.x = x
@@ -229,7 +400,7 @@
         for i in range(NEVENTS):
             self.future.append(event())
         self.passwd  = None;		# Self Destruct password
-        self.ks = [[None * (QUADSIZE+1)] * (QUADSIZE+1)]	# enemy sector locations
+        self.ks = [[0 * (QUADSIZE+1)] * (QUADSIZE+1)]	# enemy sector locations
         self.quadrant = None	# where we are in the large
         self.sector = None	# where we are in the small
         self.tholian = None	# coordinates of Tholian
@@ -517,12 +688,12 @@
 	    forces += 1000.0
 	motion = 0
         if forces <= 1000.0 and game.condition != "docked": # Typical situation 
-	    motion = ((forces+200.0*Rand())/150.0) - 5.0
+	    motion = ((forces+200.0*random.random())/150.0) - 5.0
 	else:
             if forces > 1000.0: # Very strong -- move in for kill 
-		motion = (1.0-square(Rand()))*dist1 + 1.0
+		motion = (1.0-square(random.random()))*dist1 + 1.0
 	    if game.condition=="docked" and (game.options & OPTION_BASE): # protected by base -- back off ! 
-		motion -= game.skill*(2.0-square(Rand()))
+		motion -= game.skill*(2.0-square(random.random()))
 	if idebug:
 	    proutn("=== MOTION = %d, FORCES = %1.2f, " % (motion, forces))
 	# don't move if no motion 
@@ -812,7 +983,7 @@
 		    return; # no, don't attack base! 
 		game.iseenit = False
 		game.isatb = 1
-		schedule(FSCDBAS, 1.0 +2.0*Rand())
+		schedule(FSCDBAS, 1.0 +2.0*random.random())
 		if is_scheduled(FCDBAS):
 		    postpone(FSCDBAS, scheduled(FCDBAS)-game.state.date)
 		if not communicating():
@@ -834,7 +1005,7 @@
 		return
     # Check for intelligence report 
     if not idebug and \
-	(Rand() > 0.2 or \
+	(random.random() > 0.2 or \
 	 (not communicating()) or \
 	 not game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].charted):
 	return
@@ -976,7 +1147,7 @@
 	    chew()
 	    proutn(_("Energy to transfer to shields- "))
 	chew()
-	if aaitem==0:
+	if aaitem == 0:
 	    return
 	if aaitem > game.energy:
 	    prout(_("Insufficient ship energy."))
@@ -1027,7 +1198,7 @@
     # 
     # This is one place where OPTION_PLAIN does not restore the
     # original behavior, which was equiprobable damage across
-    # all devices.  If we wanted that, we'd return NDEVICES*Rand()
+    # all devices.  If we wanted that, we'd return NDEVICES*random.random()
     # and have done with it.  Also, in the original game, DNAVYS
     # and DCOMPTR were the same device. 
     # 
@@ -1055,7 +1226,7 @@
 	10,	# DDRAY: death ray			 1.0% 
 	30,	# DDSP: deep-space probes		 3.0% 
     )
-    idx = Rand() * 1000.0	# weights must sum to 1000 
+    idx = random.random() * 1000.0	# weights must sum to 1000 
     sum = 0
     for (i, w) in enumerate(weights):
 	sum += w
@@ -1084,7 +1255,7 @@
     proutn("***")
     crmshp()
     prout(_(" heavily damaged."))
-    icas = 10.0+20.0*Rand()
+    icas = 10.0+20.0*random.random()
     prout(_("***Sickbay reports %d casualties"), icas)
     game.casual += icas
     game.state.crew -= icas
@@ -1093,12 +1264,12 @@
     # which was silly.  Instead, pick up to half the devices at
     # random according to our weighting table,
     # 
-    ncrits = Rand() * (NDEVICES/2)
+    ncrits = random.randrange(NDEVICES/2)
     for m in range(ncrits):
 	dev = randdevice()
 	if game.damage[dev] < 0:
 	    continue
-	extradm = (10.0*hardness*Rand()+1.0)*game.damfac
+	extradm = (10.0*hardness*random.random()+1.0)*game.damfac
 	# Damage for at least time of travel! 
 	game.damage[dev] += game.optime + extradm
     game.shldup = False
@@ -1150,13 +1321,13 @@
 	    proutn(_("Torpedo hits "))
 	    crmshp()
 	    prout(".")
-	    hit = 700.0 + 100.0*Rand() - \
+	    hit = 700.0 + 100.0*random.random() - \
 		1000.0 * distance(w, incoming) * math.fabs(math.sin(bullseye-angle))
 	    newcnd(); # we're blown out of dock 
 	    # We may be displaced. 
 	    if game.landed or game.condition=="docked":
 		return hit # Cheat if on a planet 
-	    ang = angle + 2.5*(Rand()-0.5)
+	    ang = angle + 2.5*(random.random()-0.5)
 	    temp = math.fabs(math.sin(ang))
 	    if math.fabs(math.cos(ang)) > temp:
 		temp = math.fabs(math.cos(ang))
@@ -1176,7 +1347,7 @@
 	    crmshp()
 	    shoved = True
 	elif iquad in (IHC, IHS): # Hit a commander 
-	    if Rand() <= 0.05:
+	    if random.random() <= 0.05:
 		crmena(True, iquad, sector, w)
 		prout(_(" uses anti-photon device;"))
 		prout(_("   torpedo neutralized."))
@@ -1187,7 +1358,7 @@
 		if w == game.ks[ll]:
 		    break
 	    kp = math.fabs(game.kpower[ll])
-	    h1 = 700.0 + 100.0*Rand() - \
+	    h1 = 700.0 + 100.0*random.random() - \
 		1000.0 * distance(w, incoming) * math.fabs(math.sin(bullseye-angle))
 	    h1 = math.fabs(h1)
 	    if kp < h1:
@@ -1201,7 +1372,7 @@
 		return None
 	    crmena(True, iquad, "sector", w)
 	    # If enemy damaged but not destroyed, try to displace 
-	    ang = angle + 2.5*(Rand()-0.5)
+	    ang = angle + 2.5*(random.random()-0.5)
 	    temp = math.fabs(math.sin(ang))
 	    if math.fabs(math.cos(ang)) > temp:
 		temp = math.fabs(math.cos(ang))
@@ -1268,14 +1439,14 @@
 	    prout(_("Celebratory rallies are being held on the Klingon homeworld."))
 	    return None
 	elif iquad == IHSTAR: # Hit a star 
-	    if Rand() > 0.10:
+	    if random.random() > 0.10:
 		nova(w)
 		return None
 	    crmena(True, IHSTAR, sector, w)
 	    prout(_(" unaffected by photon blast."))
 	    return None
 	elif iquad == IHQUEST: # Hit a thingy 
-	    if not (game.options & OPTION_THINGY) or Rand()>0.7:
+	    if not (game.options & OPTION_THINGY) or random.random()>0.7:
 		skip(1)
 		prouts(_("AAAAIIIIEEEEEEEEAAAAAAAAUUUUUGGGGGHHHHHHHHHHHH!!!"))
 		skip(1)
@@ -1304,7 +1475,7 @@
 	    prout(_("***Torpedo absorbed by Tholian web."))
 	    return None
 	elif iquad == IHT:  # Hit a Tholian 
-	    h1 = 700.0 + 100.0*Rand() - \
+	    h1 = 700.0 + 100.0*random.random() - \
 		1000.0 * distance(w, incoming) * math.fabs(math.sin(bullseye-angle))
 	    h1 = math.fabs(h1)
 	    if h1 >= 600:
@@ -1314,7 +1485,7 @@
 		return None
 	    skip(1)
 	    crmena(True, IHT, sector, w)
-	    if Rand() > 0.05:
+	    if random.random() > 0.05:
 		prout(_(" survives photon blast."))
 		return None
 	    prout(_(" disappears."))
@@ -1348,10 +1519,10 @@
     # critical-hit resolution 
     ktr=1
     # a critical hit occured 
-    if hit < (275.0-25.0*game.skill)*(1.0+0.5*Rand()):
+    if hit < (275.0-25.0*game.skill)*(1.0+0.5*random.random()):
 	return
 
-    ncrit = 1.0 + hit/(500.0+100.0*Rand())
+    ncrit = 1.0 + hit/(500.0+100.0*random.random())
     proutn(_("***CRITICAL HIT--"))
     # Select devices and cause damage
     cdam = []
@@ -1362,7 +1533,7 @@
             if not (game.damage[j]<0.0 or (j==DSHUTTL and game.iscraft != "onship")):
                 break
 	cdam.append(j)
-	extradm = (hit*game.damfac)/(ncrit*(75.0+25.0*Rand()))
+	extradm = (hit*game.damfac)/(ncrit*(75.0+25.0*random.random()))
 	game.damage[j] += extradm
 	if loop1 > 0:
             for loop2 in range(loop1):
@@ -1415,7 +1586,7 @@
     # set up partial hits if attack happens during shield status change 
     pfac = 1.0/game.inshld
     if game.shldchg:
-	chgfac = 0.25+0.5*Rand()
+	chgfac = 0.25+0.5*random.random()
 
     skip(1)
 
@@ -1427,7 +1598,7 @@
 	if game.kpower[loop] < 0:
 	    continue;	# too weak to attack 
 	# compute hit strength and diminish shield power 
-	r = Rand()
+	r = random.random()
 	# Increase chance of photon torpedos if docked or enemy energy low 
 	if game.condition == "docked":
 	    r *= 0.25
@@ -1448,7 +1619,7 @@
 	    if game.condition == "docked":
 		continue; # Don't waste the effort! 
 	    attempt = True; # Attempt to attack 
-	    dustfac = 0.8+0.05*Rand()
+	    dustfac = 0.8+0.05*random.random()
 	    hit = game.kpower[loop]*math.pow(dustfac,game.kavgd[loop])
 	    game.kpower[loop] *= 0.75
 	else: # Enemy uses photon torpedo 
@@ -1460,7 +1631,7 @@
 		crmena(False, iquad, where, jay)
 	    attempt = True
 	    prout("  ")
-	    r = (Rand()+Rand())*0.5 -0.5
+	    r = (random.random()+random.random())*0.5 -0.5
 	    r += 0.002*game.kpower[loop]*r
 	    hit = torpedo(course, r, jay, 1, 1)
 	    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
@@ -1530,7 +1701,7 @@
     prout(_("%d%%,   torpedoes left %d") % (percent, game.torps))
     # Check if anyone was hurt 
     if hitmax >= 200 or hittot >= 500:
-	icas= hittot*Rand()*0.015
+	icas= hittot*random.random()*0.015
 	if icas >= 2:
 	    skip(1)
 	    prout(_("Mc Coy-  \"Sickbay to bridge.  We suffered %d casualties") % icas)
@@ -1712,10 +1883,10 @@
     for i in range(1, n+1):
 	if game.condition != "docked":
 	    game.torps -= 1
-	r = (Rand()+Rand())*0.5 -0.5
+	r = (random.random()+random.random())*0.5 -0.5
 	if math.fabs(r) >= 0.47:
 	    # misfire! 
-	    r = (Rand()+1.2) * r
+	    r = (random.random()+1.2) * r
 	    if n>1:
 		prouts(_("***TORPEDO NUMBER %d MISFIRES") % i)
 	    else:
@@ -1723,9 +1894,9 @@
 	    skip(1)
 	    if i < n:
 		prout(_("  Remainder of burst aborted."))
-	    if Rand() <= 0.2:
+	    if random.random() <= 0.2:
 		prout(_("***Photon tubes damaged by misfire."))
-		game.damage[DPHOTON] = game.damfac*(1.0+2.0*Rand())
+		game.damage[DPHOTON] = game.damfac*(1.0+2.0*random.random())
 	    break
 	if game.shldup or game.condition == "docked":
 	    r *= 1.0 + 0.0001*game.shield
@@ -1739,15 +1910,15 @@
     # check for phasers overheating 
     if rpow > 1500:
 	chekbrn = (rpow-1500.)*0.00038
-	if Rand() <= chekbrn:
+	if random.random() <= chekbrn:
 	    prout(_("Weapons officer Sulu-  \"Phasers overheated, sir.\""))
-	    game.damage[DPHASER] = game.damfac*(1.0 + Rand()) * (1.0+chekbrn)
+	    game.damage[DPHASER] = game.damfac*(1.0 + random.random()) * (1.0+chekbrn)
 
 def checkshctrl(rpow):
     # check shield control 
 	
     skip(1)
-    if Rand() < 0.998:
+    if random.random() < 0.998:
 	prout(_("Shields lowered."))
 	return False
     # Something bad has happened 
@@ -1765,7 +1936,7 @@
     prouts(_("Sulu-  \"Captain! Shield malfunction! Phaser fire contained!\""))
     skip(2)
     prout(_("Lt. Uhura-  \"Sir, all decks reporting damage.\""))
-    icas = hit*Rand()*0.012
+    icas = hit*random.random()*0.012
     skip(1)
     fry(0.8*hit)
     if icas:
@@ -1789,7 +1960,7 @@
         wham = hits[k]
 	if wham==0:
 	    continue
-	dustfac = 0.9 + 0.01*Rand()
+	dustfac = 0.9 + 0.01*random.random()
 	hit = wham*math.pow(dustfac,game.kdist[kk])
 	kpini = game.kpower[kk]
 	kp = math.fabs(kpini)
@@ -1820,8 +1991,8 @@
 		return
 	    kk -= 1; # don't do the increment 
 	else: # decide whether or not to emasculate klingon 
-	    if kpow > 0 and Rand() >= 0.9 and \
-		kpow <= ((0.4 + 0.4*Rand())*kpini):
+	    if kpow > 0 and random.random() >= 0.9 and \
+		kpow <= ((0.4 + 0.4*random.random())*kpini):
 		prout(_("***Mr. Spock-  \"Captain, the vessel at Sector %s"), w)
 		prout(_("   has just lost its firepower.\""))
 		game.kpower[kk] = -kpow
@@ -1917,7 +2088,7 @@
 	    chew()
 	    if not kz:
 		for i in range(1, game.nenhere+1):
-		    irec += math.fabs(game.kpower[i])/(PHASEFAC*math.pow(0.90,game.kdist[i]))*(1.01+0.05*Rand()) + 1.0
+		    irec += math.fabs(game.kpower[i])/(PHASEFAC*math.pow(0.90,game.kdist[i]))*(1.01+0.05*random.random()) + 1.0
 	    kz=1
 	    proutn(_("%d units required. ") % irec)
 	    chew()
@@ -1954,7 +2125,7 @@
 		if powrem <= 0:
 		    continue
 		hits[i] = math.fabs(game.kpower[i])/(PHASEFAC*math.pow(0.90,game.kdist[i]))
-		over = (0.01 + 0.05*Rand())*hits[i]
+		over = (0.01 + 0.05*random.random())*hits[i]
 		temp = powrem
 		powrem -= hits[i] + over
 		if powrem <= 0 and temp < hits[i]:
@@ -2009,7 +2180,7 @@
 	    if key == IHEOL:
 		chew()
 		if itarg and k > kz:
-		    irec=(abs(game.kpower[k])/(PHASEFAC*math.pow(0.9,game.kdist[k]))) *	(1.01+0.05*Rand()) + 1.0
+		    irec=(abs(game.kpower[k])/(PHASEFAC*math.pow(0.9,game.kdist[k]))) *	(1.01+0.05*random.random()) + 1.0
 		kz = k
 		proutn("(")
 		if not damaged(DCOMPTR):
@@ -2065,7 +2236,7 @@
     if ifast:
 	skip(1)
 	if no == 0:
-	    if Rand() >= 0.99:
+	    if random.random() >= 0.99:
 		prout(_("Sulu-  \"Sir, the high-speed shield control has malfunctioned . . ."))
 		prouts(_("         CLICK   CLICK   POP  . . ."))
 		prout(_(" No response, sir!"))
@@ -2146,7 +2317,7 @@
         # Check to see if shuttle is aboard 
         if game.iscraft == "offship":
             skip(1)
-            if Rand() > 0.5:
+            if random.random() > 0.5:
                 prout(_("Galileo, left on the planet surface, is captured"))
                 prout(_("by aliens and made into a flying McDonald's."))
                 game.damage[DSHUTTL] = -10
@@ -2318,7 +2489,7 @@
             if game.state.remcom == 0:
                 unschedule(FTBEAM)
                 continue
-            i = Rand()*game.state.remcom+1.0
+            i = random.random()*game.state.remcom+1.0
             yank = square(game.state.kcmdr[i].x-game.quadrant.x) + square(game.state.kcmdr[i].y-game.quadrant.y)
             if istract or game.condition == "docked" or yank == 0:
                 # Drats! Have to reschedule 
@@ -2353,7 +2524,7 @@
 		continue
 	    # commander + starbase combination found -- launch attack 
 	    game.battle = game.state.baseq[j]
-	    schedule(FCDBAS, 1.0+3.0*Rand())
+	    schedule(FCDBAS, 1.0+3.0*random.random())
 	    if game.isatb: # extra time if SC already attacking 
 		postpone(FCDBAS, scheduled(FSCDBAS)-game.state.date)
 	    game.future[FBATTAK].date = game.future[FCDBAS].date + expran(0.3*game.intime)
@@ -2566,7 +2737,7 @@
 	    return
 	temp = game.optime = delay
 	if game.nenhere:
-	    rtime = 1.0 + Rand()
+	    rtime = 1.0 + random.random()
 	    if rtime < temp:
 		temp = rtime
 	    game.optime = temp
@@ -2600,7 +2771,7 @@
     course = (0.0, 10.5, 12.0, 1.5, 9.0, 0.0, 3.0, 7.5, 6.0, 4.5)
     newc = coord(); scratch = coord()
 
-    if Rand() < 0.05:
+    if random.random() < 0.05:
 	# Wow! We've supernova'ed 
 	supernova(False, nov)
 	return
@@ -2633,7 +2804,7 @@
                     if iquad in (IHDOT, IHQUEST, IHBLANK, IHT, IHWEB):
 			break
 		    elif iquad == IHSTAR: # Affect another star 
-			if Rand() < 0.05:
+			if random.random() < 0.05:
 			    # This star supernovas 
 			    scratch = supernova(False)
 			    return
@@ -2681,7 +2852,7 @@
 				game.shield = 0.0
 				game.shldup = False
 				prout(_("***Shields knocked out."))
-				game.damage[DSHIELD] += 0.005*game.damfac*Rand()*diff
+				game.damage[DSHIELD] += 0.005*game.damfac*random.random()*diff
 			else:
 			    game.energy -= 2000.0
 			if game.energy <= 0:
@@ -2766,7 +2937,7 @@
 		stars += game.state.galaxy[nq.x][nq.y].stars
 	if stars == 0:
 	    return # nothing to supernova exists 
-	num = Rand()*stars + 1
+	num = random.random()*stars + 1
 	for nq.x in range(1, GALSIZE+1):
 	    for nq.y in range(1, GALSIZE+1):
 		num -= game.state.galaxy[nq.x][nq.y].stars
@@ -2788,7 +2959,7 @@
     else:
 	ns = coord()
 	# we are in the quadrant! 
-	num = Rand()* game.state.galaxy[nq.x][nq.y].stars + 1
+	num = random.random()* game.state.galaxy[nq.x][nq.y].stars + 1
 	for ns.x in range(1, QUADSIZE+1):
 	    for ns.y in range(1, QUADSIZE+1):
 		if game.quad[ns.x][ns.y]==IHSTAR:
@@ -2906,7 +3077,7 @@
     prouts("                         3"); skip(1)
     prouts("                            2"); skip(1)
     prouts("                              1"); skip(1)
-    if Rand() < 0.15:
+    if random.random() < 0.15:
 	prouts(_("GOODBYE-CRUEL-WORLD"))
 	skip(1)
     kaboom()
@@ -3138,10 +3309,10 @@
     if (game.state.remkl + game.state.remcom + game.state.nscrem) != 0:
 	goodies = game.state.remres/game.inresor
 	baddies = (game.state.remkl + 2.0*game.state.remcom)/(game.inkling+2.0*game.incom)
-	if goodies/baddies >= 1.0+0.5*Rand():
+	if goodies/baddies >= 1.0+0.5*random.random():
 	    prout(_("As a result of your actions, a treaty with the Klingon"))
 	    prout(_("Empire has been signed. The terms of the treaty are"))
-	    if goodies/baddies >= 3.0+Rand():
+	    if goodies/baddies >= 3.0+random.random():
 		prout(_("favorable to the Federation."))
 		skip(1)
 		prout(_("Congratulations!"))
@@ -3248,7 +3419,7 @@
     skip(2)
     while True:
         proutn(_("File or device name for your plaque: "))
-        cgetline(winner, sizeof(winner))
+        winner = cgetline()
         try:
             fp = open(winner, "w")
             break
@@ -3256,7 +3427,7 @@
             prout(_("Invalid name."))
 
     proutn(_("Enter name to go on plaque (up to 30 characters): "))
-    cgetline(winner, sizeof(winner))
+    winner = cgetline()
     # The 38 below must be 64 for 132-column paper 
     nskip = 38 - len(winner)/2
 
@@ -3450,7 +3621,7 @@
 	    sys.stdout.flush()
     curses.delay_output(300)
 
-def cgetline(line, max):
+def cgetline():
     "Get a line of input."
     if game.options & OPTION_CURSES:
 	line = curwnd.getstr() + "\n"
@@ -3797,7 +3968,7 @@
 			if game.damage[m]>0: 
 			    n += 1
 		    probf=math.pow(1.4,(game.energy+game.shield)/5000.0-1.0)*math.pow(1.3,1.0/(n+1)-1.0)
-		    if (game.options & OPTION_BLKHOLE) and Rand()>probf: 
+		    if (game.options & OPTION_BLKHOLE) and random.random()>probf: 
 			timwrp()
 		    else: 
 			finish(FHOLE)
@@ -4122,11 +4293,11 @@
     if game.warpfac > 6.0:
 	# Decide if engine damage will occur 
 	prob = game.dist*(6.0-game.warpfac)*(6.0-game.warpfac)/66.666666666
-	if prob > Rand():
+	if prob > random.random():
 	    blooey = True
-	    game.dist = Rand()*game.dist
+	    game.dist = random.random()*game.dist
 	# Decide if time warp will occur 
-	if 0.5*game.dist*math.pow(7.0,game.warpfac-10.0) > Rand():
+	if 0.5*game.dist*math.pow(7.0,game.warpfac-10.0) > random.random():
 	    twarp = True
 	if idebug and game.warpfac==10 and not twarp:
 	    blooey = False
@@ -4172,7 +4343,7 @@
     if twarp:
 	timwrp()
     if blooey:
-	game.damage[DWARPEN] = game.damfac*(3.0*Rand()+1.0)
+	game.damage[DWARPEN] = game.damfac*(3.0*random.random()+1.0)
 	skip(1)
 	prout(_("Engineering to bridge--"))
 	prout(_("  Scott here.  The warp engines are damaged."))
@@ -4235,7 +4406,7 @@
 	    prout(_("But with the shields up it's hopeless."))
 	    finish(FPNOVA)
 	prouts(_("His desperate attempt to rescue you . . ."))
-	if Rand() <= 0.5:
+	if random.random() <= 0.5:
 	    prout(_("fails."))
 	    finish(FPNOVA)
 	    return
@@ -4243,7 +4414,7 @@
 	if game.imine:
 	    game.imine = False
 	    proutn(_("The crystals mined were "))
-	    if Rand() <= 0.25:
+	    if random.random() <= 0.25:
 		prout(_("lost."))
 	    else:
 		prout(_("saved."))
@@ -4280,16 +4451,16 @@
 	    prout(_("Warp engines damaged."))
 	    finish(FSNOVAED)
 	    return
-	game.warpfac = 6.0+2.0*Rand()
+	game.warpfac = 6.0+2.0*random.random()
 	game.wfacsq = game.warpfac * game.warpfac
 	prout(_("Warp factor set to %d") % int(game.warpfac))
 	power = 0.75*game.energy
 	game.dist = power/(game.warpfac*game.warpfac*game.warpfac*(game.shldup+1))
-	distreq = 1.4142+Rand()
+	distreq = 1.4142+random.random()
 	if distreq < game.dist:
 	    game.dist = distreq
 	game.optime = 10.0*game.dist/game.wfacsq
-	game.direc = 12.0*Rand()	# How dumb! 
+	game.direc = 12.0*random.random()	# How dumb! 
 	game.justin = False
 	game.inorbit = False
 	warp(True)
@@ -4310,7 +4481,7 @@
 def timwrp():
     # let's do the time warp again 
     prout(_("***TIME WARP ENTERED."))
-    if game.state.snap and Rand() < 0.5:
+    if game.state.snap and random.random() < 0.5:
 	# Go back in time 
 	prout(_("You are traveling backwards in time %d stardates.") %
 	      int(game.state.date-game.snapsht.date))
@@ -4351,7 +4522,7 @@
 	prout(_("Spock has reconstructed a correct star chart from memory"))
     else:
 	# Go forward in time 
-	game.optime = -0.5*game.intime*math.log(Rand())
+	game.optime = -0.5*game.intime*math.log(random.random())
 	prout(_("You are traveling forward in time %d stardates.") % int(game.optime))
 	# cheat to make sure no tractor beams occur during time warp 
 	postpone(FTBEAM, game.optime)
@@ -4486,8 +4657,8 @@
     prout(_(" dematerializes."))
     game.sector.x=0
     for m in range(1, 5+1):
-	ix = game.base.x+3.0*Rand()-1
-	iy = game.base.y+3.0*Rand()-1
+	ix = game.base.x+3.0*random.random()-1
+	iy = game.base.y+3.0*random.random()-1
 	if VALID_SECTOR(ix,iy) and game.quad[ix][iy]==IHDOT:
 	    # found one -- finish up 
 	    game.sector.x=ix
@@ -4508,7 +4679,7 @@
 	game.quad[ix][iy]=(IHMATER0,IHMATER1,IHMATER2)[m-1]
 	textcolor(RED)
 	warble()
-	if Rand() > probf:
+	if random.random() > probf:
 	    break
 	prout(_("fails."))
 	curses.delay_output(500)
@@ -4601,7 +4772,7 @@
 	game.nprobes = 0 # No probes 
 	prout(_("You are captured by Klingons and released to"))
 	prout(_("the Federation in a prisoner-of-war exchange."))
-	nb = Rand()*game.state.rembase+1
+	nb = random.random()*game.state.rembase+1
 	# Set up quadrant and position FQ adjacient to base 
 	if not game.quadrant == game.state.baseq[nb]:
 	    game.quadrant = game.state.baseq[nb]
@@ -4611,8 +4782,8 @@
 	    # position next to base by trial and error 
 	    game.quad[game.sector.x][game.sector.y] = IHDOT
 	    for l in range(1, QUADSIZE+1):
-		game.sector.x = 3.0*Rand() - 1.0 + game.base.x
-		game.sector.y = 3.0*Rand() - 1.0 + game.base.y
+		game.sector.x = 3.0*random.random() - 1.0 + game.base.x
+		game.sector.y = 3.0*random.random() - 1.0 + game.base.y
 		if VALID_SECTOR(game.sector.x, game.sector.y) and \
                        game.quad[game.sector.x][game.sector.y] == IHDOT:
                     break
@@ -4698,12 +4869,12 @@
 	prout(_(" not adjacent to planet."))
 	skip(1)
 	return
-    game.optime = 0.02+0.03*Rand()
+    game.optime = 0.02+0.03*random.random()
     prout(_("Helmsman Sulu-  \"Entering standard orbit, Sir.\""))
     newcnd()
     if consumeTime():
 	return
-    game.height = (1400.0+7200.0*Rand())
+    game.height = (1400.0+7200.0*random.random())
     prout(_("Sulu-  \"Entered orbit at altitude %.2f kilometers.\"") % game.height)
     game.inorbit = True
     game.ididit = True
@@ -4805,7 +4976,7 @@
     skip(1)
     prouts("WWHOOOIIIIIRRRRREEEE.E.E.  .  .  .  .   .    .")
     skip(2)
-    if Rand() > 0.98:
+    if random.random() > 0.98:
 	prouts("BOOOIIIOOOIIOOOOIIIOIING . . .")
 	skip(2)
 	prout(_("Scotty-  \"Oh my God!  I've lost them.\""))
@@ -4846,7 +5017,7 @@
 	skip(1)
 	prout(_("there's no reason to mine more at this time."))
 	return
-    game.optime = (0.1+0.2*Rand())*game.state.planets[game.iplnet].pclass
+    game.optime = (0.1+0.2*random.random())*game.state.planets[game.iplnet].pclass
     if consumeTime():
 	return
     prout(_("Mining operation complete."))
@@ -4881,7 +5052,7 @@
     skip(1)
     prouts(_("Scotty-  \"Keep your fingers crossed, Sir!\""))
     skip(1)
-    if Rand() <= game.cryprob:
+    if random.random() <= game.cryprob:
 	prouts(_("  \"Activating now! - - No good!  It's***"))
 	skip(2)
 	prouts(_("***RED ALERT!  RED A*L********************************"))
@@ -4891,7 +5062,7 @@
 	skip(1)
 	kaboom()
 	return
-    game.energy += 5000.0*(1.0 + 0.9*Rand())
+    game.energy += 5000.0*(1.0 + 0.9*random.random())
     prouts(_("  \"Activating now! - - "))
     prout(_("The instruments"))
     prout(_("   are going crazy, but I think it's"))
@@ -5003,7 +5174,7 @@
 
 def deathray():
     # use the big zapper 
-    r = Rand()
+    r = random.random()
 	
     game.ididit = False
     skip(1)
@@ -5049,13 +5220,13 @@
 	    finish(FWON)    
 	if (game.options & OPTION_PLAIN) == 0:
 	    prout(_("Spock-  \"Captain, I believe the `Experimental Death Ray'"))
-	    if Rand() <= 0.05:
+	    if random.random() <= 0.05:
 		prout(_("   is still operational.\""))
 	    else:
 		prout(_("   has been rendered nonfunctional.\""))
 		game.damage[DDRAY] = 39.95
 	return
-    r = Rand()	# Pick failure method 
+    r = random.random()	# Pick failure method 
     if r <= .30:
 	prouts(_("Sulu- \"Captain!  It's working!\""))
 	skip(1)
@@ -5738,14 +5909,14 @@
     game.quadrant = randplace(GALSIZE)
     game.sector = randplace(QUADSIZE)
     game.torps = game.intorps = 10
-    game.nprobes = int(3.0*Rand() + 2.0)	# Give them 2-4 of these
+    game.nprobes = int(3.0*random.random() + 2.0)	# Give them 2-4 of these
     game.warpfac = 5.0
     game.wfacsq = game.warpfac * game.warpfac
     for i in range(0, NDEVICES): 
 	game.damage[i] = 0.0
     # Set up assorted game parameters
     invalidate(game.battle)
-    game.state.date = game.indate = 100.0*int(31.0*Rand()+20.0)
+    game.state.date = game.indate = 100.0*int(31.0*random.random()+20.0)
     game.nkinks = game.nhelp = game.casual = game.abandoned = 0
     game.iscate = game.resting = game.imine = game.icrystl = game.icraft = False
     game.isatb = game.state.nplankl = 0
@@ -5767,7 +5938,7 @@
     # Initialize times for extraneous events
     schedule(FSNOVA, expran(0.5 * game.intime))
     schedule(FTBEAM, expran(1.5 * (game.intime / game.state.remcom)))
-    schedule(FSNAP, 1.0 + Rand()) # Force an early snapshot
+    schedule(FSNAP, 1.0 + random.random()) # Force an early snapshot
     schedule(FBATTAK, expran(0.3*game.intime))
     unschedule(FCDBAS)
     if game.state.nscrem:
@@ -5788,7 +5959,7 @@
     game.instar = 0
     for i in range(1, GALSIZE+1):
 	for j in range(1, GALSIZE+1):
-	    k = Rand()*9.0 + 1.0
+	    k = random.random()*9.0 + 1.0
 	    game.instar += k
 	    game.state.galaxy[i][j].stars = k
     # Locate star bases in galaxy
@@ -5804,7 +5975,7 @@
             for j in range(i):
 		# Improved placement algorithm to spread out bases 
 		distq = w.distance(baseq[j])
-		if distq < 6.0*(BASEMAX+1-game.inbase) and Rand() < 0.75:
+		if distq < 6.0*(BASEMAX+1-game.inbase) and random.random() < 0.75:
 		    contflag = True
 		    if idebug:
 			prout("=== Abandoning base #%d at %s" % (i, w))
@@ -5823,7 +5994,7 @@
     if klumper > MAXKLQUAD: 
 	klumper = MAXKLQUAD
     while True:
-	r = Rand()
+	r = random.random()
 	klump = (1.0 - r*r)*klumper
 	if klump > krem:
 	    klump = krem
@@ -5840,7 +6011,7 @@
     for i in range(1, game.incom+1):
         while True:
             w = randplace(GALSIZE)
-	    if (game.state.galaxy[w.x][w.y].klingons or Rand()>=0.75) and \
+	    if (game.state.galaxy[w.x][w.y].klingons or random.random()>=0.75) and \
 		   not game.state.galaxy[w.x][w.y].supernova and \
 		   game.state.galaxy[w.x][w.y].klingons <= MAXKLQUAD-1 and \
                    not w in game.state.kcmdr[:i]:
@@ -5863,8 +6034,8 @@
             new.name = systnames[i]
 	    new.inhabited = True
 	else:
-	    new.pclass = ("M", "N", "O")[Rand()*3.0]
-            if Rand()*1.5:		# 1 in 3 chance of crystals
+	    new.pclass = ("M", "N", "O")[random.random()*3.0]
+            if random.random()*1.5:		# 1 in 3 chance of crystals
                 new.crystals = "present"
 	    new.known = "unknown"
 	    new.inhabited = False
@@ -6016,19 +6187,19 @@
 
     # Use parameters to generate initial values of things
     game.damfac = 0.5 * game.skill
-    game.state.rembase = 2.0 + Rand()*(BASEMAX-2.0)
+    game.state.rembase = 2.0 + random.random()*(BASEMAX-2.0)
     game.inbase = game.state.rembase
     game.inplan = 0
     if game.options & OPTION_PLANETS:
-	game.inplan += (MAXUNINHAB/2) + (MAXUNINHAB/2+1)*Rand()
+	game.inplan += (MAXUNINHAB/2) + (MAXUNINHAB/2+1)*random.random()
     if game.options & OPTION_WORLDS:
 	game.inplan += NINHAB
-    game.state.nromrem = game.inrom = (2.0+Rand())*game.skill
+    game.state.nromrem = game.inrom = (2.0+random.random())*game.skill
     game.state.nscrem = game.inscom = (game.skill > SKILL_FAIR)
     game.state.remtime = 7.0 * game.length
     game.intime = game.state.remtime
-    game.state.remkl = game.inkling = 2.0*game.intime*((game.skill+1 - 2*Rand())*game.skill*0.1+.15)
-    game.incom = game.skill + 0.0625*game.inkling*Rand()
+    game.state.remkl = game.inkling = 2.0*game.intime*((game.skill+1 - 2*random.random())*game.skill*0.1+.15)
+    game.incom = game.skill + 0.0625*game.inkling*random.random()
     game.state.remcom = min(10, game.incom)
     game.incom = game.state.remcom
     game.state.remres = (game.inkling+4*game.incom)*game.intime
@@ -6063,7 +6234,7 @@
     pi = dropin(IHK)
     game.ks[i] = pi
     game.kdist[i] = game.kavgd[i] = distance(game.sector, pi)
-    game.kpower[i] = Rand()*150.0 +300.0 +25.0*game.skill
+    game.kpower[i] = random.random()*150.0 +300.0 +25.0*game.skill
     return pi
 
 def newqad(shutup):
@@ -6117,13 +6288,13 @@
 			
 	if i <= game.state.remcom:
 	    game.quad[w.x][w.y] = IHC
-	    game.kpower[game.klhere] = 950.0+400.0*Rand()+50.0*game.skill
+	    game.kpower[game.klhere] = 950.0+400.0*random.random()+50.0*game.skill
 	    game.comhere = True
 
 	# If we need a super-commander, promote a Klingon
 	if same(game.quadrant, game.state.kscmdr):
 	    game.quad[game.ks[1].x][game.ks[1].y] = IHS
-	    game.kpower[1] = 1175.0 + 400.0*Rand() + 125.0*game.skill
+	    game.kpower[1] = 1175.0 + 400.0*random.random() + 125.0*game.skill
 	    game.iscate = (game.state.remkl > 1)
 	    game.ishere = True
     # Put in Romulans if needed
@@ -6131,7 +6302,7 @@
 	w = dropin(IHR)
 	game.ks[i] = w
 	game.kdist[i] = game.kavgd[i] = distance(game.sector, w)
-	game.kpower[i] = Rand()*400.0 + 450.0 + 50.0*game.skill
+	game.kpower[i] = random.random()*400.0 + 450.0 + 50.0*game.skill
     # If quadrant needs a starbase, put it in
     if q.starbase:
 	game.base = dropin(IHB)
@@ -6170,7 +6341,7 @@
 	    game.ks[game.nenhere] = w
 	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] = \
 		distance(game.sector, w)
-	    game.kpower[game.nenhere] = Rand()*6000.0 +500.0 +250.0*game.skill
+	    game.kpower[game.nenhere] = random.random()*6000.0 +500.0 +250.0*game.skill
 	    if not damaged(DSRSENS):
 		skip(1)
 		prout(_("Mr. Spock- \"Captain, this is most unusual."))
@@ -6178,9 +6349,9 @@
 
     # Decide if quadrant needs a Tholian; lighten up if skill is low 
     if game.options & OPTION_THOLIAN:
-	if (game.skill < SKILL_GOOD and Rand() <= 0.02) or \
-	    (game.skill == SKILL_GOOD and Rand() <= 0.05) or \
-            (game.skill > SKILL_GOOD and Rand() <= 0.08):
+	if (game.skill < SKILL_GOOD and random.random() <= 0.02) or \
+	    (game.skill == SKILL_GOOD and random.random() <= 0.05) or \
+            (game.skill > SKILL_GOOD and random.random() <= 0.08):
             while True:
 		game.tholian.x = random.choice((1, QUADSIZE))
 		game.tholian.y = random.choice((1, QUADSIZE))
@@ -6192,7 +6363,7 @@
 	    game.ks[game.nenhere] = game.tholian
 	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] = \
 		distance(game.sector, game.tholian)
-	    game.kpower[game.nenhere] = Rand()*400.0 +100.0 +25.0*game.skill
+	    game.kpower[game.nenhere] = random.random()*400.0 +100.0 +25.0*game.skill
 	    # Reserve unoccupied corners 
 	    if game.quad[1][1]==IHDOT:
 		game.quad[1][1] = 'X'
@@ -6206,7 +6377,7 @@
 
     # Put in a few black holes
     for i in range(1, 3+1):
-	if Rand() > 0.5: 
+	if random.random() > 0.5: 
 	    dropin(IHBLANK)
 
     # Take out X's in corners if Tholian present
@@ -6261,4 +6432,578 @@
     else:
         game.passwd = ""
         for i in range(3):
-	    game.passwd[i] += chr(97+int(Rand()*25))
+	    game.passwd[i] += chr(97+int(random.random()*25))
+
+# Code from sst.c begins here
+
+commands = {
+    "SRSCAN":   	OPTION_TTY,
+    "STATUS":   	OPTION_TTY,
+    "REQUEST":  	OPTION_TTY,
+    "LRSCAN":   	OPTION_TTY,
+    "PHASERS":  	0,
+    "TORPEDO":  	0,
+    "PHOTONS":  	0,
+    "MOVE":     	0,
+    "SHIELDS":   	0,
+    "DOCK":     	0,
+    "DAMAGES":   	0,
+    "CHART":    	0,
+    "IMPULSE":  	0,
+    "REST":     	0,
+    "WARP":     	0,
+    "SCORE":    	0,
+    "SENSORS":  	OPTION_PLANETS,
+    "ORBIT":		OPTION_PLANETS,
+    "TRANSPORT":	OPTION_PLANETS,
+    "MINE":		OPTION_PLANETS,
+    "CRYSTALS":  	OPTION_PLANETS,
+    "SHUTTLE":  	OPTION_PLANETS,
+    "PLANETS":  	OPTION_PLANETS,
+    "REPORT":   	0,
+    "COMPUTER": 	0,
+    "COMMANDS": 	0,
+    "EMEXIT":		0,
+    "PROBE":		OPTION_PROBE,
+    "SAVE":		0,
+    "FREEZE":		0,	# Synonym for SAVE
+    "ABANDON":  	0,
+    "DESTRUCT": 	0,
+    "DEATHRAY": 	0,
+    "DEBUG":    	0,
+    "MAYDAY":		0,
+    "SOS":		0,	# Synonym for MAYDAY
+    "CALL":		0,	# Synonym for MAYDAY
+    "QUIT":		0,
+    "HELP":		0,
+    "SEED":		0,
+    "VISUAL":		0,
+}
+
+def ACCEPT(cmd):	return (not commands[cmd] or (commands[cmd] & game.options))
+
+def listCommands():
+    # generate a list of legal commands 
+    k = 0
+    proutn(_("LEGAL COMMANDS ARE:"))
+    for key in commands:
+	if ACCEPT(cmd):
+            if k % 5 == 0:
+                skip(1)
+            proutn("%-12s " % key) 
+            k += 1
+    skip(1)
+
+def helpme():
+    # browse on-line help 
+    # Give help on commands 
+    key = scan()
+    while True:
+	if key == IHEOL:
+	    setwnd(prompt_window)
+	    proutn(_("Help on what command? "))
+	    key = scan()
+	setwnd(message_window)
+	if key == IHEOL:
+	    return
+        if citem in commands or citem == "ABBREV":
+	    break
+	skip(1)
+	listCommands()
+	key = IHEOL
+	chew()
+	skip(1)
+    cmd = citem.upper()
+    try:
+        fp = open(SSTDOC, "r")
+    except IOError:
+        try:
+            fp = open(DOC_NAME, "r")
+        except IOError:
+            prout(_("Spock-  \"Captain, that information is missing from the"))
+            proutn(_("   computer. You need to find "))
+            proutn(DOC_NAME)
+            prout(_(" and put it in the"))
+            proutn(_("   current directory or to "))
+            proutn(SSTDOC)
+            prout(".\"")
+            #
+            # This used to continue: "You need to find SST.DOC and put 
+            # it in the current directory."
+            # 
+            return
+    while True:
+        linebuf = fp.readline()
+	if linebuf == '':
+	    prout(_("Spock- \"Captain, there is no information on that command.\""))
+	    fp.close()
+	    return
+	if linebuf[0] == '%' and linebuf[1] == '%' and linebuf[2] == ' ':
+            linebuf = linebuf[3:].strip()
+            if cmd == linebuf:
+		break
+    skip(1)
+    prout(_("Spock- \"Captain, I've found the following information:\""))
+    skip(1)
+    while linebuf in fp:
+        if "******" in linebuf:
+	    break
+	proutn(linebuf)
+    fp.close()
+
+def makemoves():
+    # command-interpretation loop 
+    v = 0
+    clrscr()
+    setwnd(message_window)
+    while True: 	# command loop 
+	drawmaps(1)
+        while True:	# get a command 
+	    hitme = False
+	    game.justin = False
+	    game.optime = 0.0
+	    i = -1
+	    chew()
+	    setwnd(prompt_window)
+	    clrscr()
+	    proutn("COMMAND> ")
+	    if scan() == IHEOL:
+		if game.options & OPTION_CURSES:
+		    makechart()
+		continue
+	    game.ididit = False
+	    clrscr()
+	    setwnd(message_window)
+	    clrscr()
+            cmd = citem.upoper
+            if cmd not in commands:
+                listCommands()
+                continue
+	commandhook(commands[i].name, True)
+	if cmd == "SRSCAN":		# srscan
+	    srscan()
+	elif cmd == "STATUS":		# status
+	    status(0)
+	elif cmd == "REQUEST":		# status request 
+	    request()
+	elif cmd == "LRSCAN":		# long range scan
+	    lrscan()
+	elif cmd == "PHASERS":		# phasers
+	    phasers()
+	    if game.ididit:
+		hitme = True
+	elif cmd == "TORPEDO":		# photon torpedos
+	    photon()
+	    if game.ididit:
+		hitme = True
+	elif cmd == "MOVE":		# move under warp
+	    warp(False)
+	elif cmd == "SHIELDS":		# shields
+	    doshield(False)
+	    if game.ididit:
+		hitme = True
+		game.shldchg = False
+	elif cmd == "DOCK":		# dock at starbase
+	    dock(True)
+	    if game.ididit:
+		attack(False)		
+	elif cmd == "DAMAGES":		# damage reports
+	    damagereport()
+	elif cmd == "CHART":		# chart
+	    makechart()
+	elif cmd == "IMPULSE":		# impulse
+	    impulse()
+	elif cmd == "REST":		# rest
+	    os.wait()
+	    if game.ididit:
+		hitme = True
+	elif cmd == "WARP":		# warp
+	    setwarp()
+	elif cmd == "SCORE":		# score
+	    score()
+	elif cmd == "SENSORS":		# sensors
+	    sensor()
+	elif cmd == "ORBIT":		# orbit
+	    orbit()
+	    if game.ididit:
+		hitme = True
+	elif cmd == "TRANSPORT":		# transport "beam"
+	    beam()
+	elif cmd == "MINE":		# mine
+	    mine()
+	    if game.ididit:
+		hitme = True
+	elif cmd == "CRYSTALS":		# crystals
+	    usecrystals()
+	    if game.ididit:
+		hitme = True
+	elif cmd == "SHUTTLE":		# shuttle
+	    shuttle()
+	    if game.ididit:
+		hitme = True
+	elif cmd == "PLANETS":		# Planet list
+	    survey()
+	elif cmd == "REPORT":		# Game Report 
+	    report()
+	elif cmd == "COMPUTER":		# use COMPUTER!
+	    eta()
+	elif cmd == "COMMANDS":
+	    listCommands()
+	elif cmd == "EMEXIT":		# Emergency exit
+	    clrscr()			# Hide screen
+	    freeze(True)		# forced save
+	    os.exit(1)			# And quick exit
+	elif cmd == "PROBE":
+	    probe()			# Launch probe
+	    if game.ididit:
+		hitme = True
+	elif cmd == "ABANDON":		# Abandon Ship
+	    abandon()
+	elif cmd == "DESTRUCT":		# Self Destruct
+	    selfdestruct()
+	elif cmd == "SAVE":		# Save Game
+	    freeze(False)
+	    clrscr()
+	    if game.skill > SKILL_GOOD:
+		prout(_("WARNING--Saved games produce no plaques!"))
+	elif cmd == "DEATHRAY":		# Try a desparation measure
+	    deathray()
+	    if game.ididit:
+		hitme = True
+	elif cmd == "DEBUGCMD":		# What do we want for debug???
+	    debugme()
+	elif cmd == "MAYDAY":		# Call for help
+	    mayday()
+	    if game.ididit:
+		hitme = True
+	elif cmd == "QUIT":
+	    game.alldone = True		# quit the game
+	elif cmd == "HELP":
+	    helpme()			# get help
+	elif cmd == "SEED":		# set random-number seed
+	    key = scan()
+	    if key == IHREAL:
+		seed = int(aaitem)
+#ifdef BSD_BUG_FOR_BUG
+#	elif cmd == "VISUAL":
+#	    visual()			# perform visual scan
+#endif
+	commandhook(commands[i].name, False)
+	while True:
+	    if game.alldone:
+		break		# Game has ended
+	    if game.optime != 0.0:
+		events()
+		if game.alldone:
+		    break	# Events did us in
+	    if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
+		atover(False)
+		continue
+	    if hitme and not game.justin:
+		attack(True)
+		if game.alldone:
+		    break
+		if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
+		    atover(False)
+		    hitme = True
+		    continue
+	    break
+	if game.alldone:
+	    break
+    if idebug:
+	prout("=== Ending")
+
+def cramen(cmd):
+    # return an enemy 
+    if   cmd == IHR: s = _("Romulan")
+    elif cmd == IHK: s = _("Klingon")
+    elif cmd == IHC: s = _("Commander")
+    elif cmd == IHS: s = _("Super-commander")
+    elif cmd == IHSTAR: s = _("Star")
+    elif cmd == IHP: s = _("Planet")
+    elif cmd == IHB: s = _("Starbase")
+    elif cmd == IHBLANK: s = _("Black hole")
+    elif cmd == IHT: s = _("Tholian")
+    elif cmd == IHWEB: s = _("Tholian web")
+    elif cmd == IHQUEST: s = _("Stranger")
+    elif cmd == IHW: s = _("Inhabited World")
+    else: s = "Unknown??"
+    proutn(s)
+
+def cramlc(loctype, w):
+    # name a location 
+    if loctype == "quadrant":
+	buf = _("Quadrant ")
+    elif loctype == "sector":
+	buf = _("Sector ")
+    buf += ("%d - %d" % (w.x, w.y))
+    return buf
+
+def crmena(stars, enemy, loctype, w):
+    # print an enemy and his location 
+    if stars:
+	proutn("***")
+    cramen(enemy)
+    proutn(_(" at "))
+    proutn(cramlc(loctype, w))
+
+def crmshp():
+    # print our ship name 
+    if game.ship == IHE:
+        s = _("Enterprise")
+    elif game.ship == IHF:
+        s = _("Faerie Queene")
+    else:
+        s = "Ship???"
+    proutn(s)
+
+def stars():
+    # print a line of stars 
+    prouts("******************************************************")
+    skip(1)
+
+def expran(avrage):
+    return -avrage*math.log(1e-7 + random.random())
+
+def randplace(size):
+    # choose a random location  
+    w = coord()
+    w.x = random.randint(1, size) 
+    w.y = random.randint(1, size)
+    return w
+
+def chew():
+    global inqueue
+    inqueue = []
+
+def chew2():
+    # return IHEOL next time 
+    global inqueue
+    inqueue = ["\n"]
+
+def scan():
+    # Get a token from the user
+    global inqueue
+    aaitem = 0.0
+    citem = ''
+
+    # Read a line if nothing here
+    if line == '\n':
+        line = ''
+        return IHEOL
+    elif line == '':
+	line = cgetline()
+	if curwnd==prompt_window:
+	    clrscr()
+	    setwnd(message_window)
+	    clrscr()
+    # Skip leading white space
+    line = line.lstrip()
+    # Nothing left
+    if not line:
+	return IHEOL
+    else:
+        inqueue += line.split()
+    # From here on in it's all looking at the queue
+    citem = inqueue.pop(0)
+    if citem == IHEOL:
+        return IHEOL
+    try:
+        aaitem = float(citem)
+        return IHREAL
+    except ValuError:
+        pass
+    # Treat as alpha
+    citem = citem.lower()
+    return IHALPHA
+
+def ja():
+    # yes-or-no confirmation 
+    chew()
+    while True:
+	scan()
+	chew()
+	if citem == 'y':
+	    return True
+	if citem == 'n':
+	    return False
+	proutn(_("Please answer with \"y\" or \"n\": "))
+
+def huh():
+    # complain about unparseable input 
+    chew()
+    skip(1)
+    prout(_("Beg your pardon, Captain?"))
+
+def isit(s):
+    # compares s to citem and returns true if it matches to the length of s 
+    return citem.startswith(s)
+
+def debugme():
+    # access to the internals for debugging 
+    proutn("Reset levels? ")
+    if ja() == True:
+	if game.energy < game.inenrg:
+	    game.energy = game.inenrg
+	game.shield = game.inshld
+	game.torps = game.intorps
+	game.lsupres = game.inlsr
+    proutn("Reset damage? ")
+    if ja() == True:
+	for i in range(0, NDEVICES): 
+	    if game.damage[i] > 0.0: 
+		game.damage[i] = 0.0
+    proutn("Toggle debug flag? ")
+    if ja() == True:
+	idebug = not idebug
+	if idebug:
+	    prout("Debug output ON")	    
+	else:
+	    prout("Debug output OFF")
+    proutn("Cause selective damage? ")
+    if ja() == True:
+	for i in range(NDEVICES):
+	    proutn("Kill ")
+	    proutn(device[i])
+	    proutn("? ")
+	    chew()
+	    key = scan()
+            if key == IHALPHA and isit("y"):
+		game.damage[i] = 10.0
+    proutn("Examine/change events? ")
+    if ja() == True:
+	ev = event()
+	w = coord()
+        legends = {
+            FSNOVA:  "Supernova       ",
+            FTBEAM:  "T Beam          ",
+            FSNAP:   "Snapshot        ",
+            FBATTAK: "Base Attack     ",
+            FCDBAS:  "Base Destroy    ",
+            FSCMOVE: "SC Move         ",
+            FSCDBAS: "SC Base Destroy ",
+            FDSPROB: "Probe Move      ",
+            FDISTR:  "Distress Call   ",
+            FENSLV:  "Enslavement     ",
+            FREPRO:  "Klingon Build   ",
+        }
+	for i in range(1, NEVENTS):
+            proutn(legends[i])
+	    if is_scheduled(i):
+		proutn("%.2f" % (scheduled(i)-game.state.date))
+		if i == FENSLV or i == FREPRO:
+		    ev = findevent(i)
+		    proutn(" in %s" % ev.quadrant)
+	    else:
+		proutn("never")
+	    proutn("? ")
+	    chew()
+	    key = scan()
+	    if key == 'n':
+		unschedule(i)
+		chew()
+	    elif key == IHREAL:
+		ev = schedule(i, aaitem)
+		if i == FENSLV or i == FREPRO:
+		    chew()
+		    proutn("In quadrant- ")
+		    key = scan()
+		    # IHEOL says to leave coordinates as they are 
+		    if key != IHEOL:
+			if key != IHREAL:
+			    prout("Event %d canceled, no x coordinate." % (i))
+			    unschedule(i)
+			    continue
+			w.x = int(aaitem)
+			key = scan()
+			if key != IHREAL:
+			    prout("Event %d canceled, no y coordinate." % (i))
+			    unschedule(i)
+			    continue
+			w.y = int(aaitem)
+			ev.quadrant = w
+	chew()
+    proutn("Induce supernova here? ")
+    if ja() == True:
+	game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova = True
+	atover(True)
+
+if __name__ == '__main__':
+    line = ""
+    thing = coord()
+    game = gamestate()
+
+    game.options = OPTION_ALL &~ (OPTION_IOMODES | OPTION_SHOWME | OPTION_PLAIN | OPTION_ALMY)
+    if os.getenv("TERM"):
+	game.options |= OPTION_CURSES | OPTION_SHOWME
+    else:
+	game.options |= OPTION_TTY
+
+    seed = time.time()
+    (options, arguments) = getopt.getopt(sys.argv[1:], "r:tx")
+    for (switch, val) in options:
+        if switch == 'r':
+            try:
+                replayfp = open(optarg, "r")
+            except IOError:
+		sys.stderr.write("sst: can't open replay file %s\n" % optarg)
+		os.exit(1)
+            line = replayfp.readline().strip()
+            try:
+                (key, seed) = line.split()
+                seed = int(seed)
+            except ValueError:
+		sys.stderr.write("sst: replay file %s is ill-formed\n"%optarg)
+		os.exit(1)
+	    game.options |= OPTION_TTY
+	    game.options &=~ OPTION_CURSES
+	elif switch == 't':
+	    game.options |= OPTION_TTY
+	    game.options &=~ OPTION_CURSES
+	elif switch == 'x':
+	    idebug = True
+	else:
+	    sys.stderr.write("usage: sst [-t] [-x] [startcommand...].\n")
+	    os.exit(0)
+    # where to save the input in case of bugs
+    try:
+        logfp = open("/usr/tmp/sst-input.log", "w")
+    except IOError:
+        sys.stderr.write("sst: warning, can't open logfile\n")
+    if logfp:
+	#setlinebuf(logfp)
+	logfp.write("seed %d\n" % (seed))
+    random.seed(seed)
+
+    iostart()
+
+    for i in range(optind, argc):
+	line += sys.argv[i]
+	line += " "
+
+    while True: # Play a game 
+	setwnd(fullscreen_window)
+	clrscr()
+	prelim()
+	setup(line[0] == '\0')
+	if game.alldone:
+	    score()
+	    game.alldone = False
+	else:
+	    makemoves()
+	skip(1)
+	stars()
+	skip(1)
+
+	if game.tourn and game.alldone:
+	    proutn(_("Do you want your score recorded?"))
+	    if ja() == True:
+		chew2()
+		freeze(False)
+	proutn(_("Do you want to play again? "))
+	if not ja():
+	    break
+    skip(1)
+    prout(_("May the Great Bird of the Galaxy roost upon your home planet."))
+    raise SysExit, 0
+



From esr at mail.berlios.de  Thu Oct  5 05:38:44 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 5 Oct 2006 05:38:44 +0200
Subject: [Sst-commit-watch] r668 - trunk/src
Message-ID: <200610050338.k953cigJ008870@sheep.berlios.de>

Author: esr
Date: 2006-10-05 05:38:44 +0200 (Thu, 05 Oct 2006)
New Revision: 668

Modified:
   trunk/src/sst.py
Log:
Python version did its first I/O.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-05 02:30:35 UTC (rev 667)
+++ trunk/src/sst.py	2006-10-05 03:38:44 UTC (rev 668)
@@ -1,4 +1,5 @@
-'''
+#!/usr/bin/env python
+"""
 sst.py =-- Super Star Trek in Python
 
 This code is a Python translation of a C translation of a FORTRAN original.
@@ -171,7 +172,7 @@
 Also, the nav subsystem (enabling automatic course
 setting) can be damaged separately from the main computer (which
 handles weapons targeting, ETA calculation, and self-destruct).
-'''
+"""
 import os, sys, math, curses, time, atexit, readline, cPickle, random, getopt
 
 SSTDOC  	= "/usr/share/doc/sst/sst.doc"
@@ -3477,6 +3478,7 @@
 
 rows = linecount = 0	# for paging 
 stdscr = None
+replayfp = None
 fullscreen_window = None
 srscan_window     = None
 report_window     = None
@@ -3484,6 +3486,7 @@
 lrscan_window     = None
 message_window    = None
 prompt_window     = None
+curwnd = None
 
 def outro():
     "wrap up, either normally or due to signal"
@@ -3494,12 +3497,12 @@
 	#resetterm()
 	#echo()
 	curses.endwin()
-	stdout.write('\n')
+	sys.stdout.write('\n')
     if logfp:
 	logfp.close()
 
 def iostart():
-    global stdscr
+    global stdscr, rows
     #setlocale(LC_ALL, "")
     #bindtextdomain(PACKAGE, LOCALEDIR)
     #textdomain(PACKAGE)
@@ -3572,16 +3575,16 @@
         setwnd(message_window)
     else:
         global linecount
-        stdout.write('\n')
+        sys.stdout.write('\n')
         proutn(prompt)
         raw_input()
         for j in range(0, rows):
-            stdout.write('\n')
+            sys.stdout.write('\n')
         linecount = 0
 
 def skip(i):
     "Skip i lines.  Pause game if this would cause a scrolling event."
-    while dummy in range(i):
+    for dummy in range(i):
 	if game.options & OPTION_CURSES:
             (y, x) = curwnd.getyx()
             (my, mx) = curwnd.getmaxyx()
@@ -3593,10 +3596,10 @@
 	else:
             global linecount
 	    linecount += 1
-	    if linecount >= rows:
+	    if rows and linecount >= rows:
 		pause_game()
 	    else:
-		stdout.write('\n')
+		sys.stdout.write('\n')
 
 def proutn(line):
     "Utter a line with no following line feed."
@@ -3604,7 +3607,8 @@
 	curwnd.addstr(line)
 	curwnd.refresh()
     else:
-	stdout.write(line)
+	sys.stdout.write(line)
+        sys.stdout.flush()
 
 def prout(line):
     proutn(line)
@@ -3630,12 +3634,14 @@
 	if replayfp and not replayfp.closed:
 	    line = replayfp.readline()
 	else:
-	    sys.stdin.readline()
+	    line = raw_input()
     if logfp:
 	logfp.write(line)
+    return line
 
 def setwnd(wnd):
-    "Change windows -- OK for this to be a no-op in tty mode." 
+    "Change windows -- OK for this to be a no-op in tty mode."
+    global curwnd
     if game.options & OPTION_CURSES:
         curwnd = wnd
         curses.curs_set(wnd == fullscreen_window or wnd == message_window or wnd == prompt_window)
@@ -5890,7 +5896,6 @@
 
 def setup(needprompt):
     # prepare to play, set up cosmos 
-    intj, krem, klumper
     w = coord()
 
     #  Decide how many of everything
@@ -6131,9 +6136,7 @@
 	    return True
         if isit("regular"):
 	    break
-	proutn(_("What is \""))
-	proutn(citem)
-	prout("\"?")
+	proutn(_("What is \"%s\"?"), citem)
 	chew()
     while game.length==0 or game.skill==SKILL_NONE:
 	if scan() == IHALPHA:
@@ -6773,37 +6776,34 @@
     return w
 
 def chew():
+    # Demand input for next scan
     global inqueue
-    inqueue = []
+    inqueue = None
 
 def chew2():
     # return IHEOL next time 
     global inqueue
-    inqueue = ["\n"]
+    inqueue = []
 
 def scan():
     # Get a token from the user
-    global inqueue
+    global inqueue, line, citem
     aaitem = 0.0
     citem = ''
 
     # Read a line if nothing here
-    if line == '\n':
-        line = ''
-        return IHEOL
-    elif line == '':
+    if inqueue == None:
 	line = cgetline()
 	if curwnd==prompt_window:
 	    clrscr()
 	    setwnd(message_window)
 	    clrscr()
-    # Skip leading white space
-    line = line.lstrip()
-    # Nothing left
-    if not line:
-	return IHEOL
-    else:
-        inqueue += line.split()
+        # Skip leading white space
+        line = line.lstrip()
+        if line:
+            inqueue = line.split()
+    elif not inqueue:
+        return IHEOL
     # From here on in it's all looking at the queue
     citem = inqueue.pop(0)
     if citem == IHEOL:
@@ -6811,7 +6811,7 @@
     try:
         aaitem = float(citem)
         return IHREAL
-    except ValuError:
+    except ValueError:
         pass
     # Treat as alpha
     citem = citem.lower()
@@ -6836,8 +6836,8 @@
     prout(_("Beg your pardon, Captain?"))
 
 def isit(s):
-    # compares s to citem and returns true if it matches to the length of s 
-    return citem.startswith(s)
+    # compares s to citem and returns true if it matches to the length of s
+    return s.startswith(citem)
 
 def debugme():
     # access to the internals for debugging 
@@ -6929,15 +6929,18 @@
 	atover(True)
 
 if __name__ == '__main__':
-    line = ""
+    global line, thing, game
+    game = citem = aaitem = inqueue = None
+    line = ''
     thing = coord()
     game = gamestate()
 
     game.options = OPTION_ALL &~ (OPTION_IOMODES | OPTION_SHOWME | OPTION_PLAIN | OPTION_ALMY)
-    if os.getenv("TERM"):
-	game.options |= OPTION_CURSES | OPTION_SHOWME
-    else:
-	game.options |= OPTION_TTY
+    # Disable curses mode until the game logic is working.
+    #    if os.getenv("TERM"):
+    #	game.options |= OPTION_CURSES | OPTION_SHOWME
+    #    else:
+    game.options |= OPTION_TTY
 
     seed = time.time()
     (options, arguments) = getopt.getopt(sys.argv[1:], "r:tx")
@@ -6977,15 +6980,15 @@
 
     iostart()
 
-    for i in range(optind, argc):
-	line += sys.argv[i]
+    for tok in arguments:
+	line += tok
 	line += " "
 
     while True: # Play a game 
 	setwnd(fullscreen_window)
 	clrscr()
 	prelim()
-	setup(line[0] == '\0')
+	setup(needprompt=not line)
 	if game.alldone:
 	    score()
 	    game.alldone = False



From esr at mail.berlios.de  Thu Oct  5 06:21:56 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 5 Oct 2006 06:21:56 +0200
Subject: [Sst-commit-watch] r669 - trunk/src
Message-ID: <200610050421.k954LuV4011496@sheep.berlios.de>

Author: esr
Date: 2006-10-05 06:21:56 +0200 (Thu, 05 Oct 2006)
New Revision: 669

Modified:
   trunk/src/sst.py
Log:
Python IO queue appears to work.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-05 03:38:44 UTC (rev 668)
+++ trunk/src/sst.py	2006-10-05 04:21:56 UTC (rev 669)
@@ -187,6 +187,7 @@
 MAXUNINHAB	= 10
 PLNETMAX	= (NINHAB + MAXUNINHAB)
 QUADSIZE	= 10
+BASEMIN		= 2
 BASEMAX 	= (GALSIZE * GALSIZE / 12)
 MAXKLGAME	= 127
 MAXKLQUAD	= 9
@@ -227,7 +228,7 @@
 IHALPHA = " "
 
 class coord:
-    def __init(self, x=None, y=None):
+    def __init__(self, x=None, y=None):
         self.x = x
         self.y = y
     def invalidate(self):
@@ -247,22 +248,22 @@
     def __hash__(self):
         return hash((x, y))
     def __str__(self):
-        return "%d - %d" % (self.x, self.y)
+        return "%s - %s" % (self.x, self.y)
 
 class planet:
-    def __init(self):
+    def __init__(self):
         self.name = None	# string-valued if inhabited
         self.w = coord()	# quadrant located
         self.pclass = None	# could be ""M", "N", "O", or "destroyed"
-        self.crystals = None	# could be "mined", "present", "absent"
-        self.known = None	# could be "unknown", "known", "shuttle_down"
-        self.inhabited		# is it inhabites?
+        self.crystals = "absent"# could be "mined", "present", "absent"
+        self.known = "unknown"	# could be "unknown", "known", "shuttle_down"
+        self.inhabited = False	# is it inhabites?
     def __str__(self):
         return self.name
 
 NOPLANET = None
 class quadrant:
-    def __init(self):
+    def __init__(self):
         self.stars = None
         self.planet = None
 	self.starbase = None
@@ -273,28 +274,28 @@
         self.status = None	# Could be "secure", "distressed", "enslaved"
 
 class page:
-    def __init(self):
+    def __init__(self):
 	self.stars = None
 	self.starbase = None
 	self.klingons = None
 
 class snapshot:
-    def __init(self):
+    def __init__(self):
         self.snap = False	# snapshot taken
-        self.crew = None	# crew complement
-	self.remkl = None	# remaining klingons
-	self.remcom = None	# remaining commanders
-	self.nscrem = None	# remaining super commanders
-	self.rembase = None	# remaining bases
-	self.starkl = None	# destroyed stars
-	self.basekl = None	# destroyed bases
-	self.nromrem = None	# Romulans remaining
-	self.nplankl = None	# destroyed uninhabited planets
-	self.nworldkl = None	# destroyed inhabited planets
+        self.crew = 0   	# crew complement
+	self.remkl = 0  	# remaining klingons
+	self.remcom = 0  	# remaining commanders
+	self.nscrem = 0		# remaining super commanders
+	self.rembase = 0	# remaining bases
+	self.starkl = 0 	# destroyed stars
+	self.basekl = 0 	# destroyed bases
+	self.nromrem = 0	# Romulans remaining
+	self.nplankl = 0	# destroyed uninhabited planets
+	self.nworldkl = 0	# destroyed inhabited planets
         self.planets = []	# Planet information
-        self.date = None	# stardate
-	self.remres = None	# remaining resources
-	self.remtime = None	# remaining time
+        self.date = 0.0   	# stardate
+	self.remres = 0 	# remaining resources
+	self.remtime = 0	# remaining time
         self.baseq = [] 	# Base quadrant coordinates
         for i in range(BASEMAX+1):
             self.baseq.append(coord())
@@ -304,7 +305,7 @@
 	self.kscmdr = coord()	# Supercommander quadrant coordinates
         self.galaxy = [] 	# The Galaxy (subscript 0 not used)
         for i in range(GALSIZE+1):
-            self.chart.append([])
+            self.galaxy.append([])
             for j in range(GALSIZE+1):
                 self.galaxy[i].append(quadrant())
     	self.chart = [] 	# the starchart (subscript 0 not used)
@@ -390,14 +391,14 @@
 class gamestate:
     def __init__(self):
         self.options = None	# Game options
-        self.state = None	# A snapshot structure
-        self.snapsht = None	# Last snapshot taken for time-travel purposes
+        self.state = snapshot()	# A snapshot structure
+        self.snapsht = snapshot()	# Last snapshot taken for time-travel purposes
         self.quad = [[IHDOT * (QUADSIZE+1)] * (QUADSIZE+1)]	# contents of our quadrant
         self.kpower = [[0 * (QUADSIZE+1)] * (QUADSIZE+1)]	# enemy energy levels
         self.kdist = [[0 * (QUADSIZE+1)] * (QUADSIZE+1)]	# enemy distances
         self.kavgd = [[0 * (QUADSIZE+1)] * (QUADSIZE+1)]	# average distances
         self.damage = [0.0] * NDEVICES	# damage encountered
-        self.future = [0.0] * NEVENTS	# future events
+        self.future = []		# future events
         for i in range(NEVENTS):
             self.future.append(event())
         self.passwd  = None;		# Self Destruct password
@@ -2271,7 +2272,7 @@
     return game.future[evtype].date
 
 def schedule(evtype, offset):
-    # schedule an event of specified type 
+    # schedule an event of specified type
     game.future[evtype].date = game.state.date + offset
     return game.future[evtype]
 
@@ -5920,7 +5921,7 @@
     for i in range(0, NDEVICES): 
 	game.damage[i] = 0.0
     # Set up assorted game parameters
-    invalidate(game.battle)
+    game.battle = coord()
     game.state.date = game.indate = 100.0*int(31.0*random.random()+20.0)
     game.nkinks = game.nhelp = game.casual = game.abandoned = 0
     game.iscate = game.resting = game.imine = game.icrystl = game.icraft = False
@@ -5977,9 +5978,9 @@
 	    contflag = False
             # C version: for (j = i-1; j > 0; j--)
             # so it did them in the opposite order.
-            for j in range(i):
-		# Improved placement algorithm to spread out bases 
-		distq = w.distance(baseq[j])
+            for j in range(1, i):
+		# Improved placement algorithm to spread out bases
+		distq = w.distance(game.state.baseq[j])
 		if distq < 6.0*(BASEMAX+1-game.inbase) and random.random() < 0.75:
 		    contflag = True
 		    if idebug:
@@ -6039,13 +6040,13 @@
             new.name = systnames[i]
 	    new.inhabited = True
 	else:
-	    new.pclass = ("M", "N", "O")[random.random()*3.0]
+	    new.pclass = ("M", "N", "O")[random.randint(0, 2)]
             if random.random()*1.5:		# 1 in 3 chance of crystals
                 new.crystals = "present"
 	    new.known = "unknown"
 	    new.inhabited = False
 	game.state.galaxy[w.x][w.y].planet = new
-        game.state.plnets.append(new)
+        game.state.planets.append(new)
     # Locate Romulans
     for i in range(1, game.state.nromrem+1):
 	w = randplace(GALSIZE)
@@ -6054,15 +6055,14 @@
     if game.state.nscrem > 0:
         while True:
             w = randplace(GALSIZE)
-            if not game.state.galaxy[w.x][w.y].supernova and game.state.galaxy[w.x][w.y].klingons <= MXKLQUAD:
+            if not game.state.galaxy[w.x][w.y].supernova and game.state.galaxy[w.x][w.y].klingons <= MAXKLQUAD:
                 break
 	game.state.kscmdr = w
 	game.state.galaxy[w.x][w.y].klingons += 1
     # Place thing (in tournament game, thingx == -1, don't want one!)
-    if thing.x != -1:
+    global thing
+    if thing == None:
 	thing = randplace(GALSIZE)
-    else:
-	invalidate(thing)
     skip(2)
     game.state.snap = False
     if game.skill == SKILL_NOVICE:
@@ -6102,7 +6102,8 @@
 	attack(False)
 
 def choose(needprompt):
-    # choose your game type 
+    # choose your game type
+    global thing
     while True:
 	game.tourn = 0
 	game.thawed = False
@@ -6120,7 +6121,6 @@
 		chew()
 		continue # We don't want a blank entry
 	    game.tourn = int(aaitem)
-	    thing.x = -1
 	    random.seed(aaitem)
 	    break
         if isit("saved") or isit("frozen"):
@@ -6190,7 +6190,7 @@
 
     # Use parameters to generate initial values of things
     game.damfac = 0.5 * game.skill
-    game.state.rembase = 2.0 + random.random()*(BASEMAX-2.0)
+    game.state.rembase = random.randint(BASEMIN, BASEMAX)
     game.inbase = game.state.rembase
     game.inplan = 0
     if game.options & OPTION_PLANETS:
@@ -6435,7 +6435,7 @@
     else:
         game.passwd = ""
         for i in range(3):
-	    game.passwd[i] += chr(97+int(random.random()*25))
+	    game.passwd += chr(97+int(random.random()*25))
 
 # Code from sst.c begins here
 
@@ -6802,6 +6802,9 @@
         line = line.lstrip()
         if line:
             inqueue = line.split()
+        else:
+            inqueue = []
+            return IHEOL
     elif not inqueue:
         return IHEOL
     # From here on in it's all looking at the queue
@@ -6934,6 +6937,7 @@
     line = ''
     thing = coord()
     game = gamestate()
+    idebug = 0
 
     game.options = OPTION_ALL &~ (OPTION_IOMODES | OPTION_SHOWME | OPTION_PLAIN | OPTION_ALMY)
     # Disable curses mode until the game logic is working.
@@ -6945,7 +6949,7 @@
     seed = time.time()
     (options, arguments) = getopt.getopt(sys.argv[1:], "r:tx")
     for (switch, val) in options:
-        if switch == 'r':
+        if switch == '-r':
             try:
                 replayfp = open(optarg, "r")
             except IOError:
@@ -6960,10 +6964,10 @@
 		os.exit(1)
 	    game.options |= OPTION_TTY
 	    game.options &=~ OPTION_CURSES
-	elif switch == 't':
+	elif switch == '-t':
 	    game.options |= OPTION_TTY
 	    game.options &=~ OPTION_CURSES
-	elif switch == 'x':
+	elif switch == '-x':
 	    idebug = True
 	else:
 	    sys.stderr.write("usage: sst [-t] [-x] [startcommand...].\n")
@@ -6979,11 +6983,11 @@
     random.seed(seed)
 
     iostart()
+    if arguments:
+        inqueue = arguments
+    else:
+        inqueue = None
 
-    for tok in arguments:
-	line += tok
-	line += " "
-
     while True: # Play a game 
 	setwnd(fullscreen_window)
 	clrscr()



From esr at mail.berlios.de  Thu Oct  5 07:47:19 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 5 Oct 2006 07:47:19 +0200
Subject: [Sst-commit-watch] r670 - trunk/src
Message-ID: <200610050547.k955lJa2020955@sheep.berlios.de>

Author: esr
Date: 2006-10-05 07:47:19 +0200 (Thu, 05 Oct 2006)
New Revision: 670

Modified:
   trunk/src/sst.py
Log:
Checkpoint Python version before trying to move to zero-origin
indexing everywhere.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-05 04:21:56 UTC (rev 669)
+++ trunk/src/sst.py	2006-10-05 05:47:19 UTC (rev 670)
@@ -236,7 +236,7 @@
     def is_valid(self):
         return self.x != None and self.y != None
     def __eq__(self, other):
-        return self.x == other.y and self.x == other.y
+        return other != None and self.x == other.y and self.x == other.y
     def __add__(self, other):
         return coord(self.x+self.x, self.y+self.y)
     def __sub__(self, other):
@@ -279,6 +279,15 @@
 	self.starbase = None
 	self.klingons = None
 
+def fill2d(size, fillfun):
+    "Fill an empty list in 2D."
+    lst = []
+    for i in range(size+1):
+        lst.append([]) 
+        for j in range(size+1):
+            lst[i][j] = fillfun(i, j)
+    return lst
+
 class snapshot:
     def __init__(self):
         self.snap = False	# snapshot taken
@@ -303,16 +312,10 @@
         for i in range(QUADSIZE+1):
             self.kcmdr.append(coord())
 	self.kscmdr = coord()	# Supercommander quadrant coordinates
-        self.galaxy = [] 	# The Galaxy (subscript 0 not used)
-        for i in range(GALSIZE+1):
-            self.galaxy.append([])
-            for j in range(GALSIZE+1):
-                self.galaxy[i].append(quadrant())
-    	self.chart = [] 	# the starchart (subscript 0 not used)
-        for i in range(GALSIZE+1):
-            self.chart.append([])
-            for j in range(GALSIZE+1):
-                self.chart[i].append(page())
+        # the galaxy (subscript 0 not used)
+        self.galaxy = fill2d(GALSIZE, lambda i, j: quadrant())
+        # the starchart (subscript 0 not used)
+    	self.chart = fill2d(GALSIZE, lambda i, j: page())
 
 class event:
     def __init__(self):
@@ -393,10 +396,10 @@
         self.options = None	# Game options
         self.state = snapshot()	# A snapshot structure
         self.snapsht = snapshot()	# Last snapshot taken for time-travel purposes
-        self.quad = [[IHDOT * (QUADSIZE+1)] * (QUADSIZE+1)]	# contents of our quadrant
-        self.kpower = [[0 * (QUADSIZE+1)] * (QUADSIZE+1)]	# enemy energy levels
-        self.kdist = [[0 * (QUADSIZE+1)] * (QUADSIZE+1)]	# enemy distances
-        self.kavgd = [[0 * (QUADSIZE+1)] * (QUADSIZE+1)]	# average distances
+        self.quad = fill2d(QUADSIZE, lambda i, j: IHDOT)	# contents of our quadrant
+        self.kpower = fill2d(QUADSIZE, lambda i, j: 0.0)	# enemy energy levels
+        self.kdist = fill2d(QUADSIZE, lambda i, j: 0.0)		# enemy distances
+        self.kavgd = fill2d(QUADSIZE, lambda i, j: 0.0) 	# average distances
         self.damage = [0.0] * NDEVICES	# damage encountered
         self.future = []		# future events
         for i in range(NEVENTS):
@@ -6244,10 +6247,8 @@
     # set up a new state of quadrant, for when we enter or re-enter it 
     w = coord()
     game.justin = True
-    invalidate(game.base)
     game.klhere = 0
     game.comhere = False
-    invalidate(game.plnet)
     game.ishere = False
     game.irhere = 0
     game.iplnet = 0
@@ -6264,10 +6265,6 @@
 	# Attempt to escape Super-commander, so tbeam back!
 	game.iscate = False
 	game.ientesc = True
-    # Clear quadrant
-    for i in range(1, QUADSIZE+1):
-	for j in range(1, QUADSIZE+1):
-	    game.quad[i][j] = IHDOT
     q = game.state.galaxy[game.quadrant.x][game.quadrant.y]
     # cope with supernova
     if q.supernova:
@@ -6286,7 +6283,7 @@
 	    w = newkling(i)
 	# If we need a commander, promote a Klingon
 	for i in range(1, game.state.remcom+1):
-	    if same(game.state.kcmdr[i], game.quadrant):
+	    if game.state.kcmdr[i] == game.quadrant:
 		break
 			
 	if i <= game.state.remcom:



From esr at mail.berlios.de  Thu Oct  5 08:56:51 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 5 Oct 2006 08:56:51 +0200
Subject: [Sst-commit-watch] r671 - trunk/src
Message-ID: <200610050656.k956up3F025922@sheep.berlios.de>

Author: esr
Date: 2006-10-05 08:56:51 +0200 (Thu, 05 Oct 2006)
New Revision: 671

Modified:
   trunk/src/sst.py
Log:
0-origin code gets through initialization OK.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-05 05:47:19 UTC (rev 670)
+++ trunk/src/sst.py	2006-10-05 06:56:51 UTC (rev 671)
@@ -3,9 +3,9 @@
 sst.py =-- Super Star Trek in Python
 
 This code is a Python translation of a C translation of a FORTRAN original.
-The FORTRANness still shows in many ways, notably the use of 1-origin index
-an a lot of parallel arrays where a more modern language would use structures
-or objects.
+The FORTRANness still shows in many ways, notably the use of a lot of
+parallel arrays where a more modern language would use structures
+or objects.  (However, 1-origin array indexing was fixed.)
 
 Dave Matuszek says:
 
@@ -195,8 +195,8 @@
 FOREVER 	= 1e30
 
 # These functions hide the difference between 0-origin and 1-origin addressing.
-def VALID_QUADRANT(x, y):	return ((x)>=1 and (x)<=GALSIZE and (y)>=1 and (y)<=GALSIZE)
-def VALID_SECTOR(x, y):	return ((x)>=1 and (x)<=QUADSIZE and (y)>=1 and (y)<=QUADSIZE)
+def VALID_QUADRANT(x, y):	return ((x)>=0 and (x)<GALSIZE and (y)>=0 and (y)<GALSIZE)
+def VALID_SECTOR(x, y):	return ((x)>=0 and (x)<QUADSIZE and (y)>=0 and (y)<QUADSIZE)
 
 def square(i):		return ((i)*(i))
 def distance(c1, c2):	return math.sqrt(square(c1.x - c2.x) + square(c1.y - c2.y))
@@ -248,7 +248,8 @@
     def __hash__(self):
         return hash((x, y))
     def __str__(self):
-        return "%s - %s" % (self.x, self.y)
+        return "%s - %s" % (self.x+1, self.y+1)
+    __repr__ = __str__
 
 class planet:
     def __init__(self):
@@ -282,10 +283,10 @@
 def fill2d(size, fillfun):
     "Fill an empty list in 2D."
     lst = []
-    for i in range(size+1):
+    for i in range(size):
         lst.append([]) 
-        for j in range(size+1):
-            lst[i][j] = fillfun(i, j)
+        for j in range(size):
+            lst[i].append(fillfun(i, j))
     return lst
 
 class snapshot:
@@ -306,10 +307,10 @@
 	self.remres = 0 	# remaining resources
 	self.remtime = 0	# remaining time
         self.baseq = [] 	# Base quadrant coordinates
-        for i in range(BASEMAX+1):
+        for i in range(BASEMAX):
             self.baseq.append(coord())
         self.kcmdr = [] 	# Commander quadrant coordinates
-        for i in range(QUADSIZE+1):
+        for i in range(QUADSIZE):
             self.kcmdr.append(coord())
 	self.kscmdr = coord()	# Supercommander quadrant coordinates
         # the galaxy (subscript 0 not used)
@@ -405,7 +406,7 @@
         for i in range(NEVENTS):
             self.future.append(event())
         self.passwd  = None;		# Self Destruct password
-        self.ks = [[0 * (QUADSIZE+1)] * (QUADSIZE+1)]	# enemy sector locations
+        self.ks = fill2d(QUADSIZE, lambda i, j: coord())	# enemy sector locations
         self.quadrant = None	# where we are in the large
         self.sector = None	# where we are in the small
         self.tholian = None	# coordinates of Tholian
@@ -572,7 +573,7 @@
     if not irun:
 	# avoid intruding on another commander's territory 
 	if ienm == IHC:
-	    for n in range(1, game.state.remcom+1):
+	    for n in range(game.state.remcom):
 		if game.state.kcmdr[n] == iq:
 		    return False
 	    # refuse to leave if currently attacking starbase 
@@ -609,7 +610,7 @@
 	unschedule(FSCDBAS)
 	game.state.kscmdr=iq
     else:
-	for n in range(1, game.state.remcom+1):
+	for n in range(game.state.remcom):
 	    if game.state.kcmdr[n] == game.quadrant:
 		game.state.kcmdr[n]=iq
 		break
@@ -760,14 +761,14 @@
 	attempts = 0; # Settle mysterious hang problem 
 	while attempts < 20 and not success:
             attempts += 1
-	    if look.x < 1 or look.x > QUADSIZE:
+	    if look.x < 0 or look.x >= QUADSIZE:
 		if motion < 0 and tryexit(look, ienm, loccom, irun):
 		    return
 		if krawlx == mx or my == 0:
 		    break
 		look.x = next.x + krawlx
 		krawlx = -krawlx
-	    elif look.y < 1 or look.y > QUADSIZE:
+	    elif look.y < 0 or look.y >= QUADSIZE:
 		if motion < 0 and tryexit(look, ienm, loccom, irun):
 		    return
 		if krawly == my or mx == 0:
@@ -823,13 +824,13 @@
     # Figure out which Klingon is the commander (or Supercommander)
     # and do move
     if game.comhere:
-	for i in range(1, game.nenhere+1):
+	for i in range(game.nenhere):
 	    w = game.ks[i]
 	    if game.quad[w.x][w.y] == IHC:
 		movebaddy(w, i, IHC)
 		break
     if game.ishere:
-	for i in range(1, game.nenhere+1):
+	for i in range(game.nenhere):
 	    w = game.ks[i]
 	    if game.quad[w.x][w.y] == IHS:
 		movebaddy(w, i, IHS)
@@ -838,7 +839,7 @@
     # Move these last so they can base their actions on what the
     # commander(s) do.
     if game.skill >= SKILL_EXPERT and (game.options & OPTION_MVBADDY):
-	for i in range(1, game.nenhere+1):
+	for i in range(game.nenhere):
 	    w = game.ks[i]
 	    if game.quad[w.x][w.y] == IHK or game.quad[w.x][w.y] == IHR:
 		movebaddy(w, i, game.quad[w.x][w.y])
@@ -852,7 +853,7 @@
 	return 1
     if avoid:
 	# Avoid quadrants with bases if we want to avoid Enterprise 
-	for i in range(1, game.state.rembase+1):
+	for i in range(game.state.rembase):
 	    if game.state.baseq[i] == iq:
 		return True
     if game.justin and not game.iscate:
@@ -868,7 +869,7 @@
 	game.ishere = False
 	game.ientesc = False
 	unschedule(FSCDBAS)
-	for i in range(1, game.nenhere+1):
+	for i in range(game.nenhere):
 	    if game.quad[game.ks[i].x][game.ks[i].y] == IHS:
 		break
 	game.quad[game.ks[i].x][game.ks[i].y] = IHDOT
@@ -919,14 +920,14 @@
 	    unschedule(FSCMOVE)
 	    return
 	sc = game.state.kscmdr
-	for i in range(1, game.state.rembase+1):
+	for i in range(game.state.rembase):
 	    basetbl.append((i, distance(game.state.baseq[i], sc)))
 	if game.state.rembase > 1:
             basetbl.sort(lambda x, y: cmp(x[1]. y[1]))
 	# look for nearest base without a commander, no Enterprise, and
         # without too many Klingons, and not already under attack. 
 	ifindit = iwhichb = 0
-	for i2 in range(1, game.state.rembase+1):
+	for i2 in range(game.state.rembase):
 	    i = basetbl[i2][0];	# bug in original had it not finding nearest
 	    ibq = game.state.baseq[i]
 	    if ibq == game.quadrant or ibq == game.battle or \
@@ -935,7 +936,7 @@
 		continue
 	    # if there is a commander, and no other base is appropriate,
 	    #   we will take the one with the commander
-	    for j in range(1, game.state.remcom+1):
+	    for j in range(game.state.remcom):
 		if ibq == game.state.kcmdr[j] and ifindit!= 2:
 		    ifindit = 2
 		    iwhichb = i
@@ -980,7 +981,7 @@
     if game.state.rembase == 0:
 	unschedule(FSCMOVE)
     else:
-	for i in range(1, game.state.rembase+1):
+	for i in range(game.state.rembase):
 	    ibq = game.state.baseq[i]
 	    if ibq == game.state.kscmdr and game.state.kscmdr == game.battle:
 		# attack the base 
@@ -1024,14 +1025,14 @@
     if not game.ithere or game.justin:
 	return
 
-    if game.tholian.x == 1 and game.tholian.y == 1:
-	idx = 1; idy = QUADSIZE
-    elif game.tholian.x == 1 and game.tholian.y == QUADSIZE:
-	idx = QUADSIZE; idy = QUADSIZE
-    elif game.tholian.x == QUADSIZE and game.tholian.y == QUADSIZE:
-	idx = QUADSIZE; idy = 1
-    elif game.tholian.x == QUADSIZE and game.tholian.y == 1:
-	idx = 1; idy = 1
+    if game.tholian.x == 0 and game.tholian.y == 0:
+	idx = 0; idy = QUADSIZE-1
+    elif game.tholian.x == 0 and game.tholian.y == QUADSIZE-1:
+	idx = QUADSIZE-1; idy = QUADSIZE-1
+    elif game.tholian.x == QUADSIZE-1 and game.tholian.y == QUADSIZE-1:
+	idx = QUADSIZE-1; idy = 0
+    elif game.tholian.x == QUADSIZE-1 and game.tholian.y == 0:
+	idx = 0; idy = 0
     else:
 	# something is wrong! 
 	game.ithere = False
@@ -1060,12 +1061,12 @@
     game.ks[game.nenhere] = game.tholian
 
     # check to see if all holes plugged 
-    for i in range(1, QUADSIZE+1):
-	if game.quad[1][i]!=IHWEB and game.quad[1][i]!=IHT:
+    for i in range(QUADSIZE):
+	if game.quad[0][i]!=IHWEB and game.quad[0][i]!=IHT:
 	    return
 	if game.quad[QUADSIZE][i]!=IHWEB and game.quad[QUADSIZE][i]!=IHT:
 	    return
-	if game.quad[i][1]!=IHWEB and game.quad[i][1]!=IHT:
+	if game.quad[i][0]!=IHWEB and game.quad[i][0]!=IHT:
 	    return
 	if game.quad[i][QUADSIZE]!=IHWEB and game.quad[i][QUADSIZE]!=IHT:
 	    return
@@ -1359,7 +1360,7 @@
 		return None
 	elif iquad in (IHR, IHK): # Hit a regular enemy 
 	    # find the enemy 
-	    for ll in range(1, game.nenhere+1):
+	    for ll in range(game.nenhere):
 		if w == game.ks[ll]:
 		    break
 	    kp = math.fabs(game.kpower[ll])
@@ -1403,7 +1404,7 @@
 	elif iquad == IHB: # Hit a base 
 	    skip(1)
 	    prout(_("***STARBASE DESTROYED.."))
-	    for ll in range(1, game.state.rembase+1):
+	    for ll in range(game.state.rembase):
 		if game.state.baseq[ll] == game.quadrant:
 		    game.state.baseq[ll]=game.state.baseq[game.state.rembase]
 		    break
@@ -1466,7 +1467,8 @@
 		# Stas Sergeev added the possibility that
 		# you can shove the Thingy and piss it off.
 		# It then becomes an enemy and may fire at you.
-		# 
+		#
+                global iqengry
 		iqengry = True
 		shoved = True
 	    return None
@@ -1512,7 +1514,7 @@
 	game.quad[w.x][w.y]=IHDOT
 	game.quad[jw.x][jw.y]=iquad
 	prout(_(" displaced by blast to Sector %s ") % jw)
-	for ll in range(1, game.nenhere+1):
+	for ll in range(game.nenhere):
 	    game.kdist[ll] = game.kavgd[ll] = distance(game.sector,game.ks[ll])
 	sortklings()
 	return None
@@ -1599,7 +1601,7 @@
     if game.skill <= SKILL_FAIR:
 	where = "sector"
 
-    for loop in range(1, game.nenhere+1):
+    for loop in range(game.nenhere):
 	if game.kpower[loop] < 0:
 	    continue;	# too weak to attack 
 	# compute hit strength and diminish shield power 
@@ -1714,7 +1716,7 @@
 	    game.casual += icas
 	    game.state.crew -= icas
     # After attack, reset average distance to enemies 
-    for loop in range(1, game.nenhere+1):
+    for loop in range(game.nenhere):
 	game.kavgd[loop] = game.kdist[loop]
     sortklings()
     return;
@@ -1734,7 +1736,8 @@
 	# Killed a Tholian 
 	game.ithere = False
     elif type == IHQUEST:
-	# Killed a Thingy 
+	# Killed a Thingy
+        global iqhere, iqengry
 	iqhere = iqengry = False
 	invalidate(thing)
     else:
@@ -1743,7 +1746,7 @@
 	game.klhere -= 1
 	if type == IHC:
 	    game.comhere = False
-	    for i in range(1, game.state.remcom+1):
+	    for i in range(game.state.remcom):
 		if game.state.kcmdr[i] == game.quadrant:
 		    break
 	    game.state.kcmdr[i] = game.state.kcmdr[game.state.remcom]
@@ -1774,20 +1777,20 @@
     # Remove enemy ship from arrays describing local conditions 
     if is_scheduled(FCDBAS) and game.battle == game.quadrant and type==IHC:
 	unschedule(FCDBAS)
-    for i in range(1, game.nenhere+1):
+    for i in range(game.nenhere):
 	if game.ks[i] == w:
+            for j in range(i, game.nenhere):
+                game.ks[j] = game.ks[j+1]
+                game.kpower[j] = game.kpower[j+1]
+                game.kavgd[j] = game.kdist[j] = game.kdist[j+1]
+            game.ks[game.nenhere].x = 0
+            game.ks[game.nenhere].y = 0
+            game.kdist[game.nenhere] = 0
+            game.kavgd[game.nenhere] = 0
+            game.kpower[game.nenhere] = 0
+            game.nenhere -= 1
 	    break
-    game.nenhere -= 1
-    if i <= game.nenhere:
-        for j in range(i, game.nenhere+1):
-	    game.ks[j] = game.ks[j+1]
-	    game.kpower[j] = game.kpower[j+1]
-	    game.kavgd[j] = game.kdist[j] = game.kdist[j+1]
-    game.ks[game.nenhere+1].x = 0
-    game.ks[game.nenhere+1].x = 0
-    game.kdist[game.nenhere+1] = 0
-    game.kavgd[game.nenhere+1] = 0
-    game.kpower[game.nenhere+1] = 0
+        break
     return;
 
 def targetcheck(x, y):
@@ -1873,12 +1876,12 @@
 	    if key != IHREAL:
 		huh()
 		return
-	    targ[i][1] = aaitem
+	    targ[i][1] = int(aaitem-0.5)
 	    key = scan()
 	    if key != IHREAL:
 		huh()
 		return
-	    targ[i][2] = aaitem
+	    targ[i][2] = int(aaitem-0.5)
 	    chew()
             course[i] = targetcheck(targ[i][1], targ[i][2])
             if course[i] == None:
@@ -1956,12 +1959,12 @@
     overheat(rpow)
     return True;
 
-def hittem(doublehits):
+def hittem(hits):
     # register a phaser hit on Klingons and Romulans 
     nenhr2=game.nenhere; kk=1
     w = coord()
     skip(1)
-    for k in range(1, nenhr2+1):
+    for k in range(nenhr2):
         wham = hits[k]
 	if wham==0:
 	    continue
@@ -1985,6 +1988,7 @@
 	    proutn(_("Very small hit on "))
 	ienm = game.quad[w.x][w.y]
 	if ienm==IHQUEST:
+            global iqengry
 	    iqengry = True
 	crmena(False, ienm, "sector", w)
 	skip(1)
@@ -2092,7 +2096,7 @@
         while True:
 	    chew()
 	    if not kz:
-		for i in range(1, game.nenhere+1):
+		for i in range(game.nenhere):
 		    irec += math.fabs(game.kpower[i])/(PHASEFAC*math.pow(0.90,game.kdist[i]))*(1.01+0.05*random.random()) + 1.0
 	    kz=1
 	    proutn(_("%d units required. ") % irec)
@@ -2125,7 +2129,7 @@
 	if game.nenhere:
 	    extra = 0.0
 	    powrem = rpow
-	    for i in range(1, game.nenhere+1):
+	    for i in range(game.nenhere):
 		hits[i] = 0.0
 		if powrem <= 0:
 		    continue
@@ -2165,7 +2169,7 @@
 	    skip(1)
     elif automode == "MANUAL":
 	rpow = 0.0
-        for k in range(1, game.nenhere+1):
+        for k in range(game.nenhere):
 	    aim = game.ks[k]
 	    ienm = game.quad[aim.x][aim.y]
 	    if msgflag:
@@ -2447,7 +2451,7 @@
 	if game.condition == "docked":
 	    repair /= game.docfac
 	# Don't fix Deathray here 
-	for l in range(0, NDEVICES):
+	for l in range(NDEVICES):
 	    if game.damage[l] > 0.0 and l != DDRAY:
                 if game.damage[l]-repair > 0.0:
                     game.damage[l] -= repair
@@ -2514,8 +2518,8 @@
 		unschedule(FCDBAS)
                 continue
 	    i = 0
-	    for j in range(1, game.state.rembase+1):
-		for k in range(1, game.state.remcom+1):
+	    for j in range(game.state.rembase):
+		for k in range(game.state.remcom):
 		    if game.state.baseq[j] == game.state.kcmdr[k] and \
 			not game.state.baseq[j] == game.quadrant and \
                         not game.state.baseq[j] == game.state.kscmdr:
@@ -2557,7 +2561,7 @@
 	    if evcode==FCDBAS:
 		unschedule(FCDBAS)
 		# find the lucky pair 
-		for i in range(1, game.state.remcom+1):
+		for i in range(game.state.remcom):
 		    if game.state.kcmdr[i] == game.battle: 
 			break
 		if i > game.state.remcom or game.state.rembase == 0 or \
@@ -2835,7 +2839,7 @@
 			game.quad[scratch.x][scratch.y] = IHDOT
 		    elif iquad == IHB: # Destroy base 
 			game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase = False
-			for i in range(1, game.state.rembase+1):
+			for i in range(game.state.rembase):
 			    if game.state.baseq[i] == game.quadrant: 
 				break
 			game.state.baseq[i] = game.state.baseq[game.state.rembase]
@@ -2870,7 +2874,7 @@
 		    elif iquad == IHK: # kill klingon 
 			deadkl(scratch,iquad, scratch)
                     elif iquad in (IHC,IHS,IHR): # Damage/destroy big enemies 
-			for ll in range(1, game.nenhere+1):
+			for ll in range(game.nenhere):
 			    if game.ks[ll] == scratch:
 				break
 			game.kpower[ll] -= 800.0 # If firepower is lost, die 
@@ -2937,14 +2941,14 @@
 	# Scheduled supernova -- select star 
 	# logic changed here so that we won't favor quadrants in top
         # left of universe 
-	for nq.x in range(1, GALSIZE+1):
-	    for nq.y in range(1, GALSIZE+1):
+	for nq.x in range(GALSIZE):
+	    for nq.y in range(GALSIZE):
 		stars += game.state.galaxy[nq.x][nq.y].stars
 	if stars == 0:
 	    return # nothing to supernova exists 
 	num = random.random()*stars + 1
-	for nq.x in range(1, GALSIZE+1):
-	    for nq.y in range(1, GALSIZE+1):
+	for nq.x in range(GALSIZE):
+	    for nq.y in range(GALSIZE):
 		num -= game.state.galaxy[nq.x][nq.y].stars
 		if num <= 0:
 		    break
@@ -2965,8 +2969,8 @@
 	ns = coord()
 	# we are in the quadrant! 
 	num = random.random()* game.state.galaxy[nq.x][nq.y].stars + 1
-	for ns.x in range(1, QUADSIZE+1):
-	    for ns.y in range(1, QUADSIZE+1):
+	for ns.x in range(QUADSIZE):
+	    for ns.y in range(QUADSIZE):
 		if game.quad[ns.x][ns.y]==IHSTAR:
 		    num -= 1
 		    if num==0:
@@ -2996,7 +3000,7 @@
 	unschedule(FSCDBAS)
     if game.state.remcom:
 	maxloop = game.state.remcom
-	for l in range(1, maxloop+1):
+	for l in range(maxloop):
 	    if game.state.kcmdr[l] == nq:
 		game.state.kcmdr[l] = game.state.kcmdr[game.state.remcom]
 		invalidate(game.state.kcmdr[game.state.remcom])
@@ -3018,7 +3022,7 @@
     # Destroy any base in supernovaed quadrant 
     if game.state.rembase:
 	maxloop = game.state.rembase
-	for loop in range(1, maxloop+1):
+	for loop in range(maxloop):
 	    if game.state.baseq[loop] == nq:
 		game.state.baseq[loop] = game.state.baseq[game.state.rembase]
 		invalidate(game.state.baseq[game.state.rembase])
@@ -3582,7 +3586,7 @@
         sys.stdout.write('\n')
         proutn(prompt)
         raw_input()
-        for j in range(0, rows):
+        for j in range(rows):
             sys.stdout.write('\n')
         linecount = 0
 
@@ -3838,14 +3842,14 @@
         # No quadrant change -- compute new avg enemy distances 
         game.quad[game.sector.x][game.sector.y] = game.ship
         if game.nenhere:
-            for m in range(1, game.nenhere+1):
+            for m in range(game.nenhere):
                 finald = distance(w, game.ks[m])
                 game.kavgd[m] = 0.5 * (finald+game.kdist[m])
                 game.kdist[m] = finald
             sortklings()
             if not game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
                 attack(False)
-            for m in range(1, game.nenhere+1):
+            for m in range(game.nenhere):
                 game.kavgd[m] = game.kdist[m]
         newcnd()
         drawmaps(0)
@@ -3890,7 +3894,7 @@
 		# Don't do it if being pushed by Nova 
 		if game.nenhere != 0 and not novapush:
 		    newcnd()
-		    for m in range(1, game.nenhere+1):
+		    for m in range(game.nenhere):
 			finald = distance(w, game.ks[m])
 			game.kavgd[m] = 0.5 * (finald + game.kdist[m])
 		    #
@@ -3974,7 +3978,7 @@
 		    # possibility that you'll get timewarped instead.
 		    # 
 		    n=0
-		    for m in range(0, NDEVICES):
+		    for m in range(NDEVICES):
 			if game.damage[m]>0: 
 			    n += 1
 		    probf=math.pow(1.4,(game.energy+game.shield)/5000.0-1.0)*math.pow(1.3,1.0/(n+1)-1.0)
@@ -4121,12 +4125,12 @@
 	if key != IHREAL:
 	    huh()
 	    return
-	xi = aaitem
+	xi = int(aaitem-0.05)
 	key = scan()
 	if key != IHREAL:
 	    huh()
 	    return
-	xj = aaitem
+	xj = int(aaitem-0.5)
 	key = scan()
 	if key == IHREAL:
 	    # both quadrant and sector specified 
@@ -4652,7 +4656,7 @@
 	ddist = distance(game.base, game.sector)
     else:
 	ddist = FOREVER
-	for m in range(1, game.state.rembase+1):
+	for m in range(game.state.rembase):
 	    xdist = QUADSIZE * distance(game.state.baseq[m], game.quadrant)
 	    if xdist < ddist:
 		ddist = xdist
@@ -4791,7 +4795,7 @@
 	while True:
 	    # position next to base by trial and error 
 	    game.quad[game.sector.x][game.sector.y] = IHDOT
-	    for l in range(1, QUADSIZE+1):
+	    for l in range(QUADSIZE):
 		game.sector.x = 3.0*random.random() - 1.0 + game.base.x
 		game.sector.y = 3.0*random.random() - 1.0 + game.base.y
 		if VALID_SECTOR(game.sector.x, game.sector.y) and \
@@ -4814,7 +4818,7 @@
     game.iscraft = "offship" # Galileo disappears 
     # Resupply ship 
     game.condition="docked"
-    for l in range(0, NDEVICES): 
+    for l in range(NDEVICES): 
 	game.damage[l] = 0.0
     game.damage[DSHUTTL] = -1
     game.energy = game.inenrg = 3000.0
@@ -5270,8 +5274,8 @@
 	proutn(_("Spock-  \"I believe the word is"))
 	prouts(_(" *ASTONISHING*"))
 	prout(_(" Mr. Sulu."))
-	for i in range(1, QUADSIZE+1):
-	    for j in range(1, QUADSIZE+1):
+	for i in range(QUADSIZE):
+	    for j in range(QUADSIZE):
 		if game.quad[i][j] == IHDOT:
 		    game.quad[i][j] = IHQUEST
 	prout(_("  Captain, our quadrant is now infested with"))
@@ -5423,8 +5427,8 @@
 def rechart():
     # update the chart in the Enterprise's computer from galaxy data 
     game.lastchart = game.state.date
-    for i in range(1, GALSIZE+1):
-	for j in range(1, GALSIZE+1):
+    for i in range(GALSIZE):
+	for j in range(GALSIZE):
 	    if game.state.galaxy[i][j].charted:
 		game.state.chart[i][j].klingons = game.state.galaxy[i][j].klingons
 		game.state.chart[i][j].starbase = game.state.galaxy[i][j].starbase
@@ -5443,9 +5447,9 @@
     if game.state.date > game.lastchart:
 	prout(_("(Last surveillance update %d stardates ago).") % ((int)(game.state.date-game.lastchart)))
     prout("      1    2    3    4    5    6    7    8")
-    for i in range(1, GALSIZE+1):
+    for i in range(GALSIZE):
 	proutn("%d |" % (i))
-	for j in range(1, GALSIZE+1):
+	for j in range(GALSIZE):
 	    if (game.options & OPTION_SHOWME) and i == game.quadrant.x and j == game.quadrant.y:
 		proutn("<")
 	    else:
@@ -5493,7 +5497,7 @@
 	if game.condition != "docked":
 	    newcnd()
         dam = 0
-	for t in range(0, NDEVICES):
+	for t in range(NDEVICES):
 	    if game.damage[t]>0: 
 		dam += 1
 	prstat(_("Condition"), _("%s, %i DAMAGES") % (game.condition.upper(), dam))
@@ -5572,9 +5576,9 @@
     prout("    1 2 3 4 5 6 7 8 9 10")
     if game.condition != "docked":
 	newcnd()
-    for i in range(1, QUADSIZE+1):
+    for i in range(QUADSIZE):
 	proutn("%2d  " % (i))
-	for j in range(1, QUADSIZE+1):
+	for j in range(QUADSIZE):
 	    sectscan(goodScan, i, j)
 	skip(1)
 			
@@ -5594,26 +5598,26 @@
 	if scan()!=IHREAL:
 	    huh()
 	    return
-    w1.y = aaitem +0.5
+    w1.y = int(aaitem-0.5)
     if scan() != IHREAL:
 	huh()
 	return
-    w1.x = aaitem + 0.5
+    w1.x = int(aaitem-0.5)
     if scan() == IHREAL:
-	w2.y = aaitem + 0.5
+	w2.y = int(aaitem-0.5)
 	if scan() != IHREAL:
 	    huh()
 	    return
-	w2.x = aaitem + 0.5
+	w2.x = int(aaitem-0.5)
     else:
 	if game.quadrant.y>w1.x:
-	    w2.x = 1
+	    w2.x = 0
 	else:
-	    w2.x=QUADSIZE
+	    w2.x=QUADSIZE-1
 	if game.quadrant.x>w1.y:
-	    w2.y = 1
+	    w2.y = 0
 	else:
-	    w2.y=QUADSIZE
+	    w2.y=QUADSIZE-1
 
     if not VALID_QUADRANT(w1.x, w1.y) or not VALID_SECTOR(w2.x, w2.y):
 	huh()
@@ -5746,7 +5750,7 @@
 	co = '?'
     else:
 	co = game.quad[ix][iy]
-    printf("%d,%d %c " % (ix, iy, co))
+    printf("%d,%d %c " % (ix+1, iy+1, co))
     v += 1
     ix = game.sector.x + v.x
     iy = game.sector.y + v.y
@@ -5762,7 +5766,7 @@
 	co = '?'
     else:
 	co = game.quad[ix][iy]
-    prout("%c %d,%d\n" % (co, ix, iy))
+    prout("%c %d,%d\n" % (co, ix+1, iy+1))
     game.optime = 0.5
     game.ididit = True
 #endif
@@ -5921,7 +5925,7 @@
     game.nprobes = int(3.0*random.random() + 2.0)	# Give them 2-4 of these
     game.warpfac = 5.0
     game.wfacsq = game.warpfac * game.warpfac
-    for i in range(0, NDEVICES): 
+    for i in range(NDEVICES): 
 	game.damage[i] = 0.0
     # Set up assorted game parameters
     game.battle = coord()
@@ -5934,8 +5938,8 @@
     game.landed = False
     game.alive = True
     game.docfac = 0.25
-    for i in range(1, GALSIZE+1):
-	for j in range(1, GALSIZE+1):
+    for i in range(GALSIZE):
+	for j in range(GALSIZE):
 	    quad = game.state.galaxy[i][j]
 	    quad.charted = 0
 	    quad.planet = NOPLANET
@@ -5966,13 +5970,13 @@
     game.lastchart = FOREVER
     # Put stars in the galaxy
     game.instar = 0
-    for i in range(1, GALSIZE+1):
-	for j in range(1, GALSIZE+1):
-	    k = random.random()*9.0 + 1.0
+    for i in range(GALSIZE):
+	for j in range(GALSIZE):
+	    k = int(random.random()*9.0 + 1.0)
 	    game.instar += k
 	    game.state.galaxy[i][j].stars = k
     # Locate star bases in galaxy
-    for i in range(1, game.inbase+1):
+    for i in range(game.inbase):
         while True:
             while True:
                 w = randplace(GALSIZE)
@@ -6051,7 +6055,7 @@
 	game.state.galaxy[w.x][w.y].planet = new
         game.state.planets.append(new)
     # Locate Romulans
-    for i in range(1, game.state.nromrem+1):
+    for i in range(game.state.nromrem):
 	w = randplace(GALSIZE)
 	game.state.galaxy[w.x][w.y].romulans += 1
     # Locate the Super Commander
@@ -6087,7 +6091,7 @@
 	    prout(_("And one (GULP) Super-Commander."))
 	prout(_("%d stardates.") % int(game.intime))
 	proutn(_("%d starbases in ") % game.inbase)
-    for i in range(1, game.inbase+1):
+    for i in range(game.inbase):
 	proutn(`game.state.baseq[i]`)
 	proutn("  ")
     skip(2)
@@ -6197,15 +6201,15 @@
     game.inbase = game.state.rembase
     game.inplan = 0
     if game.options & OPTION_PLANETS:
-	game.inplan += (MAXUNINHAB/2) + (MAXUNINHAB/2+1)*random.random()
+	game.inplan += int((MAXUNINHAB/2) + (MAXUNINHAB/2+1)*random.random())
     if game.options & OPTION_WORLDS:
-	game.inplan += NINHAB
-    game.state.nromrem = game.inrom = (2.0+random.random())*game.skill
+	game.inplan += int(NINHAB)
+    game.state.nromrem = game.inrom = int((2.0+random.random())*game.skill)
     game.state.nscrem = game.inscom = (game.skill > SKILL_FAIR)
     game.state.remtime = 7.0 * game.length
     game.intime = game.state.remtime
     game.state.remkl = game.inkling = 2.0*game.intime*((game.skill+1 - 2*random.random())*game.skill*0.1+.15)
-    game.incom = game.skill + 0.0625*game.inkling*random.random()
+    game.incom = int(game.skill + 0.0625*game.inkling*random.random())
     game.state.remcom = min(10, game.incom)
     game.incom = game.state.remcom
     game.state.remres = (game.inkling+4*game.incom)*game.intime
@@ -6258,6 +6262,7 @@
     game.landed = False
     game.ientesc = False
     game.ithere = False
+    global iqhere, iqengry
     iqhere = False
     iqengry = False
     game.iseenit = False
@@ -6279,10 +6284,10 @@
     if q.klingons:
 	w.x = w.y = 0	# quiet a gcc warning 
 	# Position ordinary Klingons
-	for i in range(1, game.klhere+1):
+	for i in range(game.klhere):
 	    w = newkling(i)
 	# If we need a commander, promote a Klingon
-	for i in range(1, game.state.remcom+1):
+	for i in range(game.state.remcom):
 	    if game.state.kcmdr[i] == game.quadrant:
 		break
 			
@@ -6293,12 +6298,12 @@
 
 	# If we need a super-commander, promote a Klingon
 	if same(game.quadrant, game.state.kscmdr):
-	    game.quad[game.ks[1].x][game.ks[1].y] = IHS
+	    game.quad[game.ks[0].x][game.ks[0].y] = IHS
 	    game.kpower[1] = 1175.0 + 400.0*random.random() + 125.0*game.skill
 	    game.iscate = (game.state.remkl > 1)
 	    game.ishere = True
     # Put in Romulans if needed
-    for i in range(game.klhere+1, game.nenhere+1):
+    for i in range(game.klhere, game.nenhere):
 	w = dropin(IHR)
 	game.ks[i] = w
 	game.kdist[i] = game.kavgd[i] = distance(game.sector, w)
@@ -6310,14 +6315,14 @@
     # If quadrant needs a planet, put it in
     if q.planet != NOPLANET:
 	game.iplnet = q.planet
-	if game.state.planets[q.planet].inhabited == UNINHABITED:
+	if not q.planet.inhabited:
 	    game.plnet = dropin(IHP)
 	else:
 	    game.plnet = dropin(IHW)
     # Check for condition
     newcnd()
     # And finally the stars
-    for i in range(1, q.stars+1): 
+    for i in range(q.stars): 
 	dropin(IHSTAR)
 
     # Check for RNZ
@@ -6333,10 +6338,12 @@
 
     if shutup==0:
 	# Put in THING if needed
-	if same(thing, game.quadrant):
+        global thing
+	if thing == game.quadrant:
 	    w = dropin(IHQUEST)
 	    thing = randplace(GALSIZE)
 	    game.nenhere += 1
+            global iqhere
 	    iqhere = True
 	    game.ks[game.nenhere] = w
 	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] = \
@@ -6353,8 +6360,8 @@
 	    (game.skill == SKILL_GOOD and random.random() <= 0.05) or \
             (game.skill > SKILL_GOOD and random.random() <= 0.08):
             while True:
-		game.tholian.x = random.choice((1, QUADSIZE))
-		game.tholian.y = random.choice((1, QUADSIZE))
+		game.tholian.x = random.choice((0, QUADSIZE-1))
+		game.tholian.y = random.choice((0, QUADSIZE-1))
                 if game.quad[game.tholian.x][game.tholian.y] == IHDOT:
                     break
 	    game.quad[game.tholian.x][game.tholian.y] = IHT
@@ -6365,14 +6372,14 @@
 		distance(game.sector, game.tholian)
 	    game.kpower[game.nenhere] = random.random()*400.0 +100.0 +25.0*game.skill
 	    # Reserve unoccupied corners 
-	    if game.quad[1][1]==IHDOT:
-		game.quad[1][1] = 'X'
-	    if game.quad[1][QUADSIZE]==IHDOT:
-		game.quad[1][QUADSIZE] = 'X'
-	    if game.quad[QUADSIZE][1]==IHDOT:
-		game.quad[QUADSIZE][1] = 'X'
-	    if game.quad[QUADSIZE][QUADSIZE]==IHDOT:
-		game.quad[QUADSIZE][QUADSIZE] = 'X'
+	    if game.quad[0][0]==IHDOT:
+		game.quad[0][0] = 'X'
+	    if game.quad[0][QUADSIZE-1]==IHDOT:
+		game.quad[0][QUADSIZE-1] = 'X'
+	    if game.quad[QUADSIZE-1][0]==IHDOT:
+		game.quad[QUADSIZE-1][0] = 'X'
+	    if game.quad[QUADSIZE-1][QUADSIZE-1]==IHDOT:
+		game.quad[QUADSIZE-1][QUADSIZE-1] = 'X'
     sortklings()
 
     # Put in a few black holes
@@ -6382,14 +6389,14 @@
 
     # Take out X's in corners if Tholian present
     if game.ithere:
-	if game.quad[1][1]=='X':
-	    game.quad[1][1] = IHDOT
-	if game.quad[1][QUADSIZE]=='X':
-	    game.quad[1][QUADSIZE] = IHDOT
-	if game.quad[QUADSIZE][1]=='X':
-	    game.quad[QUADSIZE][1] = IHDOT
-	if game.quad[QUADSIZE][QUADSIZE]=='X':
-	    game.quad[QUADSIZE][QUADSIZE] = IHDOT
+	if game.quad[0][0]=='X':
+	    game.quad[0][0] = IHDOT
+	if game.quad[0][QUADSIZE-1]=='X':
+	    game.quad[0][QUADSIZE-1] = IHDOT
+	if game.quad[QUADSIZE-1][0]=='X':
+	    game.quad[QUADSIZE-1][0] = IHDOT
+	if game.quad[QUADSIZE-1][QUADSIZE-1]=='X':
+	    game.quad[QUADSIZE-1][QUADSIZE-1] = IHDOT
 
 def sortklings():
     # sort Klingons by distance from us 
@@ -6398,7 +6405,7 @@
 	return
     while True:
 	sw = False
-	for j in range(1, game.nenhere):
+	for j in range(game.nenhere):
 	    if game.kdist[j] > game.kdist[j+1]:
 		sw = True
 		t = game.kdist[j]
@@ -6575,7 +6582,7 @@
 	    clrscr()
 	    setwnd(message_window)
 	    clrscr()
-            cmd = citem.upoper
+            cmd = citem.upper()
             if cmd not in commands:
                 listCommands()
                 continue
@@ -6768,8 +6775,8 @@
 def randplace(size):
     # choose a random location  
     w = coord()
-    w.x = random.randint(1, size) 
-    w.y = random.randint(1, size)
+    w.x = random.randint(0, size-1) 
+    w.y = random.randint(0, size-1)
     return w
 
 def chew():
@@ -6850,7 +6857,7 @@
 	game.lsupres = game.inlsr
     proutn("Reset damage? ")
     if ja() == True:
-	for i in range(0, NDEVICES): 
+	for i in range(NDEVICES): 
 	    if game.damage[i] > 0.0: 
 		game.damage[i] = 0.0
     proutn("Toggle debug flag? ")
@@ -6929,10 +6936,11 @@
 	atover(True)
 
 if __name__ == '__main__':
-    global line, thing, game
+    global line, thing, game, idebug, iqhere, iqengry
     game = citem = aaitem = inqueue = None
     line = ''
     thing = coord()
+    iqhere = iqengry = False
     game = gamestate()
     idebug = 0
 



From esr at mail.berlios.de  Thu Oct  5 10:36:55 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 5 Oct 2006 10:36:55 +0200
Subject: [Sst-commit-watch] r672 - trunk/src
Message-ID: <200610050836.k958ats2000421@sheep.berlios.de>

Author: esr
Date: 2006-10-05 10:36:54 +0200 (Thu, 05 Oct 2006)
New Revision: 672

Modified:
   trunk/src/sst.py
Log:
Eliminate iqhere global in order to get rid of spurious Python
warning.  Where we need this flag, we now deduce it from the location
of the Thing.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-05 06:56:51 UTC (rev 671)
+++ trunk/src/sst.py	2006-10-05 08:36:54 UTC (rev 672)
@@ -1587,7 +1587,7 @@
 	moveklings()
 
     # if no enemies remain after movement, we're done 
-    if game.nenhere==0 or (game.nenhere==1 and iqhere and not iqengry):
+    if game.nenhere==0 or (game.nenhere==1 and thing == game.quadrant and not iqengry):
 	return
 
     # set up partial hits if attack happens during shield status change 
@@ -1737,8 +1737,8 @@
 	game.ithere = False
     elif type == IHQUEST:
 	# Killed a Thingy
-        global iqhere, iqengry
-	iqhere = iqengry = False
+        global iqengry
+	iqengry = False
 	invalidate(thing)
     else:
 	# Some type of a Klingon 
@@ -6103,7 +6103,7 @@
 	prout(_("  YOU'LL NEED IT."))
     waitfor()
     newqad(False)
-    if game.nenhere - iqhere-game.ithere:
+    if game.nenhere - (thing == game.quadrant) - game.ithere:
 	game.shldup = True
     if game.neutz:	# bad luck to start in a Romulan Neutral Zone
 	attack(False)
@@ -6262,8 +6262,7 @@
     game.landed = False
     game.ientesc = False
     game.ithere = False
-    global iqhere, iqengry
-    iqhere = False
+    global iqengry
     iqengry = False
     game.iseenit = False
     if game.iscate:
@@ -6343,8 +6342,6 @@
 	    w = dropin(IHQUEST)
 	    thing = randplace(GALSIZE)
 	    game.nenhere += 1
-            global iqhere
-	    iqhere = True
 	    game.ks[game.nenhere] = w
 	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] = \
 		distance(game.sector, w)
@@ -6401,7 +6398,7 @@
 def sortklings():
     # sort Klingons by distance from us 
     # The author liked bubble sort. So we will use it. :-(
-    if game.nenhere-iqhere-game.ithere < 2:
+    if game.nenhere-(thing==game.quadrant)-game.ithere < 2:
 	return
     while True:
 	sw = False
@@ -6936,11 +6933,11 @@
 	atover(True)
 
 if __name__ == '__main__':
-    global line, thing, game, idebug, iqhere, iqengry
+    global line, thing, game, idebug, iqengry
     game = citem = aaitem = inqueue = None
     line = ''
     thing = coord()
-    iqhere = iqengry = False
+    iqengry = False
     game = gamestate()
     idebug = 0
 



From esr at mail.berlios.de  Thu Oct  5 10:58:28 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 5 Oct 2006 10:58:28 +0200
Subject: [Sst-commit-watch] r673 - trunk/src
Message-ID: <200610050858.k958wSVJ002278@sheep.berlios.de>

Author: esr
Date: 2006-10-05 10:58:28 +0200 (Thu, 05 Oct 2006)
New Revision: 673

Modified:
   trunk/src/sst.py
Log:
lrscan, scescan, and chart are working in the Python version.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-05 08:36:54 UTC (rev 672)
+++ trunk/src/sst.py	2006-10-05 08:58:28 UTC (rev 673)
@@ -3712,9 +3712,6 @@
     if game.options & OPTION_CURSES:
 	curwnd.attron(curses.A_REVERSE)
  
-def commandhook(cmd, before):
-    pass
-
 #
 # Things past this point have policy implications.
 # 
@@ -5455,14 +5452,14 @@
 	    else:
 		proutn(" ")
 	    if game.state.galaxy[i][j].supernova:
-		strcpy(buf, "***")
+		show = "***"
 	    elif not game.state.galaxy[i][j].charted and game.state.galaxy[i][j].starbase:
-		strcpy(buf, ".1.")
+		show = ".1."
 	    elif game.state.galaxy[i][j].charted:
-		sprintf(buf, "%3d" % (game.state.chart[i][j].klingons*100 + game.state.chart[i][j].starbase * 10 + game.state.chart[i][j].stars))
+		show = "%3d" % (game.state.chart[i][j].klingons*100 + game.state.chart[i][j].starbase * 10 + game.state.chart[i][j].stars)
 	    else:
-		strcpy(buf, "...")
-	    proutn(buf)
+		show = "..."
+	    proutn(show)
 	    if (game.options & OPTION_SHOWME) and i == game.quadrant.x and j == game.quadrant.y:
 		proutn(">")
 	    else:
@@ -6017,7 +6014,7 @@
             if not game.state.galaxy[w.x][w.y].supernova and \
                game.state.galaxy[w.x][w.y].klingons + klump <= MAXKLQUAD:
                 break
-	game.state.galaxy[w.x][w.y].klingons += klump
+	game.state.galaxy[w.x][w.y].klingons += int(klump)
         if krem <= 0:
             break
     # Position Klingon Commander Ships
@@ -6491,7 +6488,7 @@
     k = 0
     proutn(_("LEGAL COMMANDS ARE:"))
     for key in commands:
-	if ACCEPT(cmd):
+	if ACCEPT(key):
             if k % 5 == 0:
                 skip(1)
             proutn("%-12s " % key) 
@@ -6580,10 +6577,11 @@
 	    setwnd(message_window)
 	    clrscr()
             cmd = citem.upper()
-            if cmd not in commands:
+            if cmd in commands:
+                break
+            else:
                 listCommands()
                 continue
-	commandhook(commands[i].name, True)
 	if cmd == "SRSCAN":		# srscan
 	    srscan()
 	elif cmd == "STATUS":		# status
@@ -6692,7 +6690,6 @@
 #	elif cmd == "VISUAL":
 #	    visual()			# perform visual scan
 #endif
-	commandhook(commands[i].name, False)
 	while True:
 	    if game.alldone:
 		break		# Game has ended
@@ -6994,7 +6991,7 @@
 	setwnd(fullscreen_window)
 	clrscr()
 	prelim()
-	setup(needprompt=not line)
+	setup(needprompt=not inqueue)
 	if game.alldone:
 	    score()
 	    game.alldone = False



From esr at mail.berlios.de  Thu Oct  5 11:12:06 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 5 Oct 2006 11:12:06 +0200
Subject: [Sst-commit-watch] r674 - trunk/src
Message-ID: <200610050912.k959C6MJ003479@sheep.berlios.de>

Author: esr
Date: 2006-10-05 11:12:06 +0200 (Thu, 05 Oct 2006)
New Revision: 674

Modified:
   trunk/src/sst.py
Log:
status command is almost working.  Must resolve the mess with planet pointers.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-05 08:58:28 UTC (rev 673)
+++ trunk/src/sst.py	2006-10-05 09:12:06 UTC (rev 674)
@@ -3731,7 +3731,7 @@
 	    setwnd(report_window)
 	    report_window.clear()
 	    report_window.move(0, 0)
-	    status(0)
+	    status()
 	    setwnd(lrscan_window)
 	    lrscan_window.clear()
 	    lrscan_window.move(0, 0)
@@ -3822,8 +3822,8 @@
 	skip(1)
 	setwnd(status_window)
     else:
-        proutn(" " * NSYM - len(tx))
-    vproutn(data)
+        proutn(" " * (NSYM - len(txt)))
+    proutn(data)
     skip(1)
     if game.options & OPTION_CURSES:
 	setwnd(report_window)
@@ -5484,13 +5484,13 @@
     else:
 	proutn("- ")
 
-def status(req):
+def status(req=0):
     # print status report lines 
 
     if not req or req == 1:
 	prstat(_("Stardate"), _("%.1f, Time Left %.2f") \
                % (game.state.date, game.state.remtime))
-    elif not req or req == 2:
+    if not req or req == 2:
 	if game.condition != "docked":
 	    newcnd()
         dam = 0
@@ -5498,40 +5498,40 @@
 	    if game.damage[t]>0: 
 		dam += 1
 	prstat(_("Condition"), _("%s, %i DAMAGES") % (game.condition.upper(), dam))
-    elif not req or req == 3:
+    if not req or req == 3:
 	prstat(_("Position"), "%s , %s" % (game.quadrant, game.sector))
-    elif not req or req == 4:
+    if not req or req == 4:
 	if damaged(DLIFSUP):
 	    if game.condition == "docked":
-		sprintf(s, _("DAMAGED, Base provides"))
+		s = _("DAMAGED, Base provides")
 	    else:
-		sprintf(s, _("DAMAGED, reserves=%4.2f") % game.lsupres)
+		s = _("DAMAGED, reserves=%4.2f") % game.lsupres
 	else:
-	    sprintf(s, _("ACTIVE"))
+	    s = _("ACTIVE")
 	prstat(_("Life Support"), s)
-    elif not req or req == 5:
-	prstat(_("Warp Factor"), "%.1f" % (game.warpfac))
-    elif not req or req == 6:
+    if not req or req == 5:
+	prstat(_("Warp Factor"), "%.1f" % game.warpfac)
+    if not req or req == 6:
         extra = ""
         if game.icrystl and (game.options & OPTION_SHOWME):
             extra = _(" (have crystals)")
-	prstat(_("Energy"), "%.2f%s" % game.energy, extra)
-    elif not req or req == 7:
+	prstat(_("Energy"), "%.2f%s" % (game.energy, extra))
+    if not req or req == 7:
 	prstat(_("Torpedoes"), "%d" % (game.torps))
-    elif not req or req == 8:
+    if not req or req == 8:
 	if damaged(DSHIELD):
-	    strcpy(s, _("DAMAGED,"))
+	    s = _("DAMAGED,")
 	elif game.shldup:
-	    strcpy(s, _("UP,"))
+	    s = _("UP,")
 	else:
-	    strcpy(s, _("DOWN,"))
+	    s = _("DOWN,")
 	data = _(" %d%% %.1f units") \
                % (int((100.0*game.shield)/game.inshld + 0.5), game.shield)
-	prstat(_("Shields"), s)
-    elif not req or req == 9:
+	prstat(_("Shields"), s+data)
+    if not req or req == 9:
         prstat(_("Klingons Left"), "%d" \
                % (game.state.remkl + game.state.remcom + game.state.nscrem))
-    elif not req or req == 10:
+    if not req or req == 10:
 	if game.options & OPTION_WORLDS:
 	    plnet = game.state.galaxy[game.quadrant.x][game.quadrant.y].planet
 	    if plnet != NOPLANET and game.state.planets[plnet].inhabited:
@@ -6576,8 +6576,10 @@
 	    clrscr()
 	    setwnd(message_window)
 	    clrscr()
-            cmd = citem.upper()
-            if cmd in commands:
+            candidates = filter(lambda x: x.startswith(citem.upper()),
+                                commands)
+            if len(candidates) == 1:
+                cmd = candidates[0]
                 break
             else:
                 listCommands()
@@ -6585,7 +6587,7 @@
 	if cmd == "SRSCAN":		# srscan
 	    srscan()
 	elif cmd == "STATUS":		# status
-	    status(0)
+	    status()
 	elif cmd == "REQUEST":		# status request 
 	    request()
 	elif cmd == "LRSCAN":		# long range scan



From esr at mail.berlios.de  Thu Oct  5 11:53:06 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 5 Oct 2006 11:53:06 +0200
Subject: [Sst-commit-watch] r675 - trunk/src
Message-ID: <200610050953.k959r60T007723@sheep.berlios.de>

Author: esr
Date: 2006-10-05 11:53:06 +0200 (Thu, 05 Oct 2006)
New Revision: 675

Modified:
   trunk/src/sst.py
Log:
Planet pointer mess cleaned up.  planets now works.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-05 09:12:06 UTC (rev 674)
+++ trunk/src/sst.py	2006-10-05 09:53:06 UTC (rev 675)
@@ -262,7 +262,6 @@
     def __str__(self):
         return self.name
 
-NOPLANET = None
 class quadrant:
     def __init__(self):
         self.stars = None
@@ -454,7 +453,7 @@
         self.casual = 0		# causalties
         self.nhelp = 0		# calls for help
         self.nkinks = 0		# count of energy-barrier crossings
-        self.iplnet = 0		# planet # in quadrant
+        self.iplnet = None	# planet # in quadrant
         self.inplan = 0		# initial planets
         self.nenhere = 0	# number of enemies in quadrant
         self.irhere = 0		# Romulans in quadrant
@@ -888,7 +887,7 @@
 	    game.state.planets[i].crystals == "present":
 	    # destroy the planet 
 	    game.state.planets[i].pclass = "destroyed"
-	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = NOPLANET
+	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = None
 	    if communicating():
 		announce()
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"))
@@ -1420,9 +1419,9 @@
 	    crmena(True, iquad, sector, w)
 	    prout(_(" destroyed."))
 	    game.state.nplankl += 1
-	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = NOPLANET
-	    game.state.planets[game.iplnet].pclass = destroyed
-	    game.iplnet = 0
+	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = None
+	    game.iplnet.pclass = "destroyed"
+	    game.iplnet = None
 	    invalidate(game.plnet)
 	    game.quad[w.x][w.y] = IHDOT
 	    if game.landed:
@@ -1433,9 +1432,9 @@
 	    crmena(True, iquad, sector, w)
 	    prout(_(" destroyed."))
 	    game.state.nworldkl += 1
-	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = NOPLANET
-	    game.state.planets[game.iplnet].pclass = destroyed
-	    game.iplnet = 0
+	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = None
+	    game.iplnet.pclass = "destroyed"
+	    game.iplnet = None
 	    invalidate(game.plnet)
 	    game.quad[w.x][w.y] = IHDOT
 	    if game.landed:
@@ -2627,8 +2626,8 @@
 		# supernova'ed, and which has some Klingons in it
 		w = randplace(GALSIZE)
 		q = game.state.galaxy[w.x][w.y]
-                if not (game.quadrant == w or q.planet == NOPLANET or \
-		      not game.state.planets[q.planet].inhabited or \
+                if not (game.quadrant == w or q.planet == None or \
+		      not q.planet.inhabited or \
 		      q.supernova or q.status!=secure or q.klingons<=0):
                     break
             else:
@@ -2711,7 +2710,7 @@
 		    prout(_("launched a warship from %s.") % q.planet)
 		else:
 		    prout(_("Uhura- Starfleet reports increased Klingon activity"))
-		    if q.planet != NOPLANET:
+		    if q.planet != None:
 			proutn(_("near %s") % q.planet)
 		    prout(_("in Quadrant %s.") % w)
 				
@@ -2826,12 +2825,12 @@
 			prout(_(" novas."))
 			game.quad[scratch.x][scratch.y] = IHDOT
 		    elif iquad == IHP: # Destroy planet 
-			game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = NOPLANET
+			game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = None
 			game.state.nplankl += 1
 			crmena(True, IHP, sector, scratch)
 			prout(_(" destroyed."))
-			game.state.planets[game.iplnet].pclass = destroyed
-			game.iplnet = 0
+			game.iplnet.pclass = "destroyed"
+			game.iplnet = None
 			invalidate(game.plnet)
 			if game.landed:
 			    finish(FPNOVA)
@@ -3017,7 +3016,7 @@
     # Destroy planets 
     for loop in range(game.inplan):
 	if game.state.planets[loop].w == nq:
-	    game.state.planets[loop].pclass = destroyed
+	    game.state.planets[loop].pclass = "destroyed"
 	    npdead += 1
     # Destroy any base in supernovaed quadrant 
     if game.state.rembase:
@@ -4768,7 +4767,7 @@
 	if not (game.options & OPTION_WORLDS) and not damaged(DTRANSP):
 	    prout(_("Remainder of ship's complement beam down"))
 	    prout(_("to nearest habitable planet."))
-	elif q.planet != NOPLANET and not damaged(DTRANSP):
+	elif q.planet != None and not damaged(DTRANSP):
 	    prout(_("Remainder of ship's complement beam down to %s.") %
 		    q.planet)
 	else:
@@ -4845,7 +4844,7 @@
     prout(_("Spock-  \"Planet report follows, Captain.\""))
     skip(1)
     for i in range(game.inplan):
-	if game.state.planets[i].pclass == destroyed:
+	if game.state.planets[i].pclass == "destroyed":
 	    continue
 	if (game.state.planets[i].known != "unknown" \
             and not game.state.planets[i].inhabited) \
@@ -4896,23 +4895,25 @@
 	if game.options & OPTION_TTY:
 	    prout(_("Short range sensors damaged."))
 	return
-    if not is_valid(game.plnet):
+    if game.iplnet == None:
 	if game.options & OPTION_TTY:
 	    prout(_("Spock- \"No planet in this quadrant, Captain.\""))
 	return
-    if game.state.planets[game.iplnet].known == "unknown":
+    if game.iplnet.known == "unknown":
 	prout(_("Spock-  \"Sensor scan for Quadrant %s-") % game.quadrant)
 	skip(1)
 	prout(_("         Planet at Sector %s is of class %s.") %
-	      (sector,game.plnet, game.state.planets[game.iplnet]))
-	if game.state.planets[game.iplnet].known=="shuttle_down": 
+	      (game.plnet, game.iplnet.pclass))
+	if game.iplnet.known=="shuttle_down": 
 	    prout(_("         Sensors show Galileo still on surface."))
 	proutn(_("         Readings indicate"))
-	if game.state.planets[game.iplnet].crystals != present:
+	if game.iplnet.crystals != present:
 	    proutn(_(" no"))
 	prout(_(" dilithium crystals present.\""))
-	if game.state.planets[game.iplnet].known == "unknown":
-	    game.state.planets[game.iplnet].known = "known"
+	if game.iplnet.known == "unknown":
+	    game.iplnet.known = "known"
+    elif game.iplnet.inhabited:
+        prout(_("Spock-  \"The inhabited planet %s is located at Sector %s, Captain.\"") % (game.iplnet.name, game.plnet))
 
 def beam():
     # use the transporter 
@@ -4921,7 +4922,7 @@
     skip(1)
     if damaged(DTRANSP):
 	prout(_("Transporter damaged."))
-	if not damaged(DSHUTTL) and (game.state.planets[game.iplnet].known=="shuttle_down" or game.iscraft == "onship"):
+	if not damaged(DSHUTTL) and (game.iplnet.known=="shuttle_down" or game.iscraft == "onship"):
 	    skip(1)
 	    proutn(_("Spock-  \"May I suggest the shuttle craft, Sir?\" "))
 	    if ja() == True:
@@ -4934,12 +4935,12 @@
     if game.shldup:
 	prout(_("Impossible to transport through shields."))
 	return
-    if game.state.planets[game.iplnet].known=="unknown":
+    if game.iplnet.known=="unknown":
 	prout(_("Spock-  \"Captain, we have no information on this planet"))
 	prout(_("  and Starfleet Regulations clearly state that in this situation"))
 	prout(_("  you may not go down.\""))
 	return
-    if not game.landed and game.state.planets[game.iplnet].crystals==absent:
+    if not game.landed and game.iplnet.crystals=="absent":
 	prout(_("Spock-  \"Captain, I fail to see the logic in"))
 	prout(_("  exploring a planet with no dilithium crystals."))
 	proutn(_("  Are you sure this is wise?\" "))
@@ -4956,7 +4957,7 @@
     	    prout(_("Engineering to bridge--"))
 	    prout(_("  Captain, we have enough energy only to transport you down to"))
 	    prout(_("  the planet, but there wouldn't be an energy for the trip back."))
-	    if game.state.planets[game.iplnet].known == "shuttle_down":
+	    if game.iplnet.known == "shuttle_down":
 		prout(_("  Although the Galileo shuttle craft may still be on a surface."))
 	    proutn(_("  Are you sure this is wise?\" "))
 	    if ja() == False:
@@ -4964,7 +4965,7 @@
 		return
     if game.landed:
 	# Coming from planet 
-	if game.state.planets[game.iplnet].known=="shuttle_down":
+	if game.iplnet.known=="shuttle_down":
 	    proutn(_("Spock-  \"Wouldn't you rather take the Galileo?\" "))
 	    if ja() == True:
 		chew()
@@ -4998,7 +4999,7 @@
     game.energy -= nrgneed
     skip(2)
     prout(_("Transport complete."))
-    if game.landed and game.state.planets[game.iplnet].known=="shuttle_down":
+    if game.landed and game.iplnet.known=="shuttle_down":
 	prout(_("The shuttle craft Galileo is here!"))
     if not game.landed and game.imine:
 	game.icrystl = True
@@ -5013,10 +5014,10 @@
     if not game.landed:
 	prout(_("Mining party not on planet."))
 	return
-    if game.state.planets[game.iplnet].crystals == mined:
+    if game.iplnet.crystals == "mined":
 	prout(_("This planet has already been strip-mined for dilithium."))
 	return
-    elif game.state.planets[game.iplnet].crystals == absent:
+    elif game.iplnet.crystals == "absent":
 	prout(_("No dilithium crystals on this planet."))
 	return
     if game.imine:
@@ -5028,11 +5029,11 @@
 	skip(1)
 	prout(_("there's no reason to mine more at this time."))
 	return
-    game.optime = (0.1+0.2*random.random())*game.state.planets[game.iplnet].pclass
+    game.optime = (0.1+0.2*random.random())*game.iplnet.pclass
     if consumeTime():
 	return
     prout(_("Mining operation complete."))
-    game.state.planets[game.iplnet].crystals = mined
+    game.iplnet.crystals = "mined"
     game.imine = game.ididit = True
 
 def usecrystals():
@@ -5087,7 +5088,7 @@
     skip(1)
     if damaged(DSHUTTL):
 	if game.damage[DSHUTTL] == -1.0:
-	    if game.inorbit and game.state.planets[game.iplnet].known == "shuttle_down":
+	    if game.inorbit and game.iplnet.known == "shuttle_down":
 		prout(_("Ye Faerie Queene has no shuttle craft bay to dock it at."))
 	    else:
 		prout(_("Ye Faerie Queene had no shuttle craft."))
@@ -5100,16 +5101,16 @@
 	crmshp()
 	prout(_(" not in standard orbit."))
 	return
-    if (game.state.planets[game.iplnet].known != "shuttle_down") and game.iscraft != "onship":
+    if (game.iplnet.known != "shuttle_down") and game.iscraft != "onship":
 	prout(_("Shuttle craft not currently available."))
 	return
-    if not game.landed and game.state.planets[game.iplnet].known=="shuttle_down":
+    if not game.landed and game.iplnet.known=="shuttle_down":
 	prout(_("You will have to beam down to retrieve the shuttle craft."))
 	return
     if game.shldup or game.condition == "docked":
 	prout(_("Shuttle craft cannot pass through shields."))
 	return
-    if game.state.planets[game.iplnet].known=="unknown":
+    if game.iplnet.known=="unknown":
 	prout(_("Spock-  \"Captain, we have no information on this planet"))
 	prout(_("  and Starfleet Regulations clearly state that in this situation"))
 	prout(_("  you may not fly down.\""))
@@ -5141,7 +5142,7 @@
 	    skip(1)
 	    if consumeTime():
 		return
-	    game.state.planets[game.iplnet].known="shuttle_down"
+	    game.iplnet.known="shuttle_down"
 	    prout(_("Trip complete."))
 	    return
 	else:
@@ -5151,7 +5152,7 @@
 	    skip(1)
 	    prouts(_("The short hop begins . . ."))
 	    skip(1)
-	    game.state.planets[game.iplnet].known="known"
+	    game.iplnet.known="known"
 	    game.icraft = True
 	    skip(1)
 	    game.landed = False
@@ -5177,7 +5178,7 @@
 	game.iscraft = "offship"
 	if consumeTime():
 	    return
-	game.state.planets[game.iplnet].known = "shuttle_down"
+	game.iplnet.known = "shuttle_down"
 	game.landed = True
 	game.icraft = False
 	prout(_("Trip complete."))
@@ -5534,7 +5535,7 @@
     if not req or req == 10:
 	if game.options & OPTION_WORLDS:
 	    plnet = game.state.galaxy[game.quadrant.x][game.quadrant.y].planet
-	    if plnet != NOPLANET and game.state.planets[plnet].inhabited:
+	    if plnet and plnet.inhabited:
 		prstat(_("Major system"), plnet.name)
 	    else:
 		prout(_("Sector is uninhabited"))
@@ -5939,7 +5940,7 @@
 	for j in range(GALSIZE):
 	    quad = game.state.galaxy[i][j]
 	    quad.charted = 0
-	    quad.planet = NOPLANET
+	    quad.planet = None
 	    quad.romulans = 0
 	    quad.klingons = 0
 	    quad.starbase = False
@@ -6032,7 +6033,7 @@
     for i in range(game.inplan):
         while True:
             w = randplace(GALSIZE) 
-            if game.state.galaxy[w.x][w.y].planet == NOPLANET:
+            if game.state.galaxy[w.x][w.y].planet == None:
                 break
         new = planet()
 	new.w = w
@@ -6309,7 +6310,7 @@
 	game.base = dropin(IHB)
 	
     # If quadrant needs a planet, put it in
-    if q.planet != NOPLANET:
+    if q.planet:
 	game.iplnet = q.planet
 	if not q.planet.inhabited:
 	    game.plnet = dropin(IHP)
@@ -6563,7 +6564,6 @@
 	    hitme = False
 	    game.justin = False
 	    game.optime = 0.0
-	    i = -1
 	    chew()
 	    setwnd(prompt_window)
 	    clrscr()
@@ -6581,6 +6581,8 @@
             if len(candidates) == 1:
                 cmd = candidates[0]
                 break
+            elif candidates and not (game.options & OPTION_PLAIN):
+                prout("Commands with that prefix: " + " ".join(candidates))
             else:
                 listCommands()
                 continue



From esr at mail.berlios.de  Thu Oct  5 12:16:15 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 5 Oct 2006 12:16:15 +0200
Subject: [Sst-commit-watch] r676 - trunk/src
Message-ID: <200610051016.k95AGF4p009280@sheep.berlios.de>

Author: esr
Date: 2006-10-05 12:16:15 +0200 (Thu, 05 Oct 2006)
New Revision: 676

Modified:
   trunk/src/sst.py
Log:
Get rid of some dead code.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-05 09:53:06 UTC (rev 675)
+++ trunk/src/sst.py	2006-10-05 10:16:15 UTC (rev 676)
@@ -1527,7 +1527,6 @@
     # a critical hit occured 
     if hit < (275.0-25.0*game.skill)*(1.0+0.5*random.random()):
 	return
-
     ncrit = 1.0 + hit/(500.0+100.0*random.random())
     proutn(_("***CRITICAL HIT--"))
     # Select devices and cause damage
@@ -1564,42 +1563,32 @@
     hitmax=0.0; hittot=0.0; chgfac=1.0
     jay = coord()
     where = "neither"
-
     # game could be over at this point, check 
     if game.alldone:
 	return
-
     if idebug:
 	prout("=== ATTACK!")
-
-    # Tholian gewts to move before attacking 
+    # Tholian gets to move before attacking 
     if game.ithere:
 	movetholian()
-
     # if you have just entered the RNZ, you'll get a warning 
     if game.neutz: # The one chance not to be attacked 
 	game.neutz = False
 	return
-
     # commanders get a chance to tac-move towards you 
     if (((game.comhere or game.ishere) and not game.justin) or game.skill == SKILL_EMERITUS) and torps_ok:
 	moveklings()
-
     # if no enemies remain after movement, we're done 
     if game.nenhere==0 or (game.nenhere==1 and thing == game.quadrant and not iqengry):
 	return
-
     # set up partial hits if attack happens during shield status change 
     pfac = 1.0/game.inshld
     if game.shldchg:
 	chgfac = 0.25+0.5*random.random()
-
     skip(1)
-
     # message verbosity control 
     if game.skill <= SKILL_FAIR:
 	where = "sector"
-
     for loop in range(game.nenhere):
 	if game.kpower[loop] < 0:
 	    continue;	# too weak to attack 
@@ -1723,7 +1712,6 @@
 def deadkl(w, type, mv):
     # kill a Klingon, Tholian, Romulan, or Thingy 
     # Added mv to allow enemy to "move" before dying 
-
     crmena(True, type, sector, mv)
     # Decide what kind of enemy it is and update appropriately 
     if type == IHR:
@@ -1766,7 +1754,6 @@
 	    unschedule(FSCDBAS)
 	else:
 	    prout("*** Internal error, deadkl() called on %s\n" % type)
-
     # For each kind of enemy, finish message to player 
     prout(_(" destroyed."))
     game.quad[w.x][w.y] = IHDOT
@@ -1923,7 +1910,6 @@
 
 def checkshctrl(rpow):
     # check shield control 
-	
     skip(1)
     if random.random() < 0.998:
 	prout(_("Shields lowered."))
@@ -2014,7 +2000,6 @@
     ifast = False; no = False; itarg = True; msgflag = True
     automode = "NOTSET"
     key=0
-
     skip(1)
     # SR sensors and Computer are needed fopr automode 
     if damaged(DSRSENS) or damaged(DCOMPTR):
@@ -2038,8 +2023,8 @@
 	    return
 	prout(_("Weapons Officer Sulu-  \"High-speed shield control enabled, sir.\""))
 	ifast = True
-		
-    # Original code so convoluted, I re-did it all 
+    # Original code so convoluted, I re-did it all
+    # (That was Tom Almy talking about the C code, I think -- ESR)
     while automode=="NOTSET":
 	key=scan()
 	if key == IHALPHA:
@@ -2262,8 +2247,6 @@
 # only have one FDISTR/FENSLV/FREPRO sequence going at any given time
 # BSD Trek, from which we swiped the idea, can have up to 5.
 
-import math
-
 def unschedule(evtype):
     # remove an event from the schedule 
     game.future[evtype].date = FOREVER
@@ -2295,7 +2278,6 @@
 	    game.resting = False
 	    game.optime = 0.0
 	    return True
-
     return False
 
 def events():
@@ -2733,9 +2715,7 @@
 	proutn(_("Are you sure? "))
 	if ja() == False:
 	    return
-
     # Alternate resting periods (events) with attacks 
-
     game.resting = True
     while True:
 	if delay <= 0:
@@ -2778,12 +2758,10 @@
     # star goes nova 
     course = (0.0, 10.5, 12.0, 1.5, 9.0, 0.0, 3.0, 7.5, 6.0, 4.5)
     newc = coord(); scratch = coord()
-
     if random.random() < 0.05:
 	# Wow! We've supernova'ed 
 	supernova(False, nov)
 	return
-
     # handle initial nova 
     game.quad[nov.x][nov.y] = IHDOT
     crmena(False, IHSTAR, sector, nov)
@@ -2932,7 +2910,6 @@
     # star goes supernova 
     num = 0; npdead = 0
     nq = coord()
-
     if w != None: 
 	nq = w
     else:
@@ -2957,7 +2934,6 @@
 	    proutn("=== Super nova here?")
 	    if ja() == True:
 		nq = game.quadrant
-
     if not nq == game.quadrant or game.justin:
 	# it isn't here, or we just entered (treat as enroute) 
 	if communicating():
@@ -2976,7 +2952,6 @@
 			break
 	    if num==0:
 		break
-
 	skip(1)
 	prouts(_("***RED ALERT!  RED ALERT!"))
 	skip(1)
@@ -3128,7 +3103,6 @@
         badpt += 200.0
     return badpt
 
-
 def finish(ifin):
     # end the game, with appropriate notfications 
     igotit = False
@@ -3339,7 +3313,6 @@
 def score():
     # compute player's score 
     timused = game.state.date - game.indate
-
     iskill = game.skill
     if (timused == 0 or (game.state.remkl + game.state.remcom + game.state.nscrem) != 0) and timused < 5.0:
 	timused = 5.0
@@ -3438,7 +3411,6 @@
     winner = cgetline()
     # The 38 below must be 64 for 132-column paper 
     nskip = 38 - len(winner)/2
-
     fp.write("\n\n\n\n")
     # --------DRAW ENTERPRISE PICTURE. 
     fp.write("                                       EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\n" )
@@ -3551,7 +3523,6 @@
 	setwnd(fullscreen_window)
 	textcolor(DEFAULT)
 
-
 def waitfor():
     "wait for user action -- OK to do nothing if on a TTY"
     if game.options & OPTION_CURSES:
@@ -4038,8 +4009,7 @@
 	prout(_("Lt. Uhura- \"Captain, an important message from the starbase:\""))
 	attackreport(False)
 	game.iseenit = True
-
-# 
+ 
 # This program originally required input in terms of a (clock)
 # direction and distance. Somewhere in history, it was changed to
 # cartesian coordinates. So we need to convert.  Probably
@@ -4047,7 +4017,6 @@
 # pain if the computer isn't working! Manual mode is still confusing
 # because it involves giving x and y motions, yet the coordinates
 # are always displayed y - x, where +y is downward!
-# 
 
 def getcd(isprobe, akey):
     # get course and distance 
@@ -4208,7 +4177,6 @@
 	power = 20.0 + 100.0*game.dist
     else:
 	power = 30.0
-
     if power >= game.energy:
 	# Insufficient power for trip 
 	skip(1)
@@ -4258,12 +4226,10 @@
 	    prout(_("Engineer Scott- \"Sorry, Captain. Until this damage"))
 	    prout(_("  is repaired, I can only give you warp 4.\""))
 	    return
-			
-	# Read in course and distance 
+       	# Read in course and distance 
 	getcd(False, 0)
 	if game.direc == -1.0:
 	    return
-
 	# Make sure starship has enough energy for the trip 
 	power = (game.dist+0.05)*game.warpfac*game.warpfac*game.warpfac*(game.shldup+1)
 	if power >= game.energy:
@@ -4340,8 +4306,6 @@
 		if game.quad[ix][iy] != IHDOT:
 		    blooey = False
 		    twarp = False
-				
-
     # Activate Warp Engines and pay the cost 
     imove(False)
     if game.alldone:
@@ -4404,7 +4368,6 @@
 
 def atover(igrab):
     # cope with being tossed out of quadrant by supernova or yanked by beam 
-
     chew()
     # is captain on planet? 
     if game.landed:
@@ -4431,13 +4394,11 @@
 		game.icrystl = True
     if igrab:
 	return
-
     # Check to see if captain in shuttle craft 
     if game.icraft:
 	finish(FSTRACTOR)
     if game.alldone:
 	return
-
     # Inform captain of attempt to reach safety 
     skip(1)
     while True:
@@ -4566,7 +4527,6 @@
 	    prout(_("Uhura- \"The previous probe is still reporting data, Sir.\""))
 	return
     key = scan()
-
     if key == IHEOL:
 	# slow mode, so let Kirk know how many probes there are left
         if game.nprobes == 1:
@@ -4576,7 +4536,6 @@
 	proutn(_("Are you sure you want to fire a probe? "))
 	if ja() == False:
 	    return
-
     game.isarmed = False
     if key == IHALPHA and citem == "armed":
 	game.isarmed = True
@@ -4595,7 +4554,6 @@
 	bigger = math.fabs(game.probeinx)
     else:
 	bigger = math.fabs(game.probeiny)
-		
     game.probeiny /= bigger
     game.probeinx /= bigger
     game.proben = 10.0*game.dist*bigger +0.5
@@ -4628,7 +4586,6 @@
     # yell for help from nearest starbase 
     # There's more than one way to move in this game! 
     line = 0
-
     chew()
     # Test for conditions which prevent calling for help 
     if game.condition == "docked":
@@ -5616,14 +5573,12 @@
 	    w2.y = 0
 	else:
 	    w2.y=QUADSIZE-1
-
     if not VALID_QUADRANT(w1.x, w1.y) or not VALID_SECTOR(w2.x, w2.y):
 	huh()
 	return
     game.dist = math.sqrt(square(w1.y-game.quadrant.y+0.1*(w2.y-game.sector.y))+
 		square(w1.x-game.quadrant.x+0.1*(w2.x-game.sector.x)))
     wfl = False
-
     if prompt:
 	prout(_("Answer \"no\" if you don't know the value:"))
     while True:
@@ -5771,9 +5726,6 @@
 
 # Code from setup.c begins here
 
-def filelength(fd):
-    return os.fstat(fd).st_size
-
 def prelim():
     # issue a historically correct banner 
     skip(2)
@@ -5903,7 +5855,6 @@
 def setup(needprompt):
     # prepare to play, set up cosmos 
     w = coord()
-
     #  Decide how many of everything
     if choose(needprompt):
 	return # frozen game
@@ -6274,10 +6225,8 @@
     game.klhere = q.klingons
     game.irhere = q.romulans
     game.nenhere = game.klhere + game.irhere
-
     # Position Starship
     game.quad[game.sector.x][game.sector.y] = game.ship
-
     if q.klingons:
 	w.x = w.y = 0	# quiet a gcc warning 
 	# Position ordinary Klingons
@@ -6292,7 +6241,6 @@
 	    game.quad[w.x][w.y] = IHC
 	    game.kpower[game.klhere] = 950.0+400.0*random.random()+50.0*game.skill
 	    game.comhere = True
-
 	# If we need a super-commander, promote a Klingon
 	if same(game.quadrant, game.state.kscmdr):
 	    game.quad[game.ks[0].x][game.ks[0].y] = IHS
@@ -6308,7 +6256,6 @@
     # If quadrant needs a starbase, put it in
     if q.starbase:
 	game.base = dropin(IHB)
-	
     # If quadrant needs a planet, put it in
     if q.planet:
 	game.iplnet = q.planet
@@ -6332,7 +6279,6 @@
 	    skip(1)
 	    prout(_("INTRUDER! YOU HAVE VIOLATED THE ROMULAN NEUTRAL ZONE."))
 	    prout(_("LEAVE AT ONCE, OR YOU WILL BE DESTROYED!"))
-
     if shutup==0:
 	# Put in THING if needed
         global thing
@@ -6348,7 +6294,6 @@
 		skip(1)
 		prout(_("Mr. Spock- \"Captain, this is most unusual."))
 		prout(_("    Please examine your short-range scan.\""))
-
     # Decide if quadrant needs a Tholian; lighten up if skill is low 
     if game.options & OPTION_THOLIAN:
 	if (game.skill < SKILL_GOOD and random.random() <= 0.02) or \
@@ -6376,12 +6321,10 @@
 	    if game.quad[QUADSIZE-1][QUADSIZE-1]==IHDOT:
 		game.quad[QUADSIZE-1][QUADSIZE-1] = 'X'
     sortklings()
-
     # Put in a few black holes
     for i in range(1, 3+1):
 	if random.random() > 0.5: 
 	    dropin(IHBLANK)
-
     # Take out X's in corners if Tholian present
     if game.ithere:
 	if game.quad[0][0]=='X':
@@ -6735,22 +6678,17 @@
     else: s = "Unknown??"
     proutn(s)
 
-def cramlc(loctype, w):
-    # name a location 
-    if loctype == "quadrant":
-	buf = _("Quadrant ")
-    elif loctype == "sector":
-	buf = _("Sector ")
-    buf += ("%d - %d" % (w.x, w.y))
-    return buf
-
 def crmena(stars, enemy, loctype, w):
     # print an enemy and his location 
     if stars:
 	proutn("***")
     cramen(enemy)
     proutn(_(" at "))
-    proutn(cramlc(loctype, w))
+    if loctype == "quadrant":
+	buf = _("Quadrant ")
+    elif loctype == "sector":
+	buf = _("Sector ")
+    proutn(buf + `w`)
 
 def crmshp():
     # print our ship name 
@@ -6941,14 +6879,12 @@
     iqengry = False
     game = gamestate()
     idebug = 0
-
     game.options = OPTION_ALL &~ (OPTION_IOMODES | OPTION_SHOWME | OPTION_PLAIN | OPTION_ALMY)
     # Disable curses mode until the game logic is working.
     #    if os.getenv("TERM"):
     #	game.options |= OPTION_CURSES | OPTION_SHOWME
     #    else:
     game.options |= OPTION_TTY
-
     seed = time.time()
     (options, arguments) = getopt.getopt(sys.argv[1:], "r:tx")
     for (switch, val) in options:
@@ -6984,13 +6920,11 @@
 	#setlinebuf(logfp)
 	logfp.write("seed %d\n" % (seed))
     random.seed(seed)
-
     iostart()
     if arguments:
         inqueue = arguments
     else:
         inqueue = None
-
     while True: # Play a game 
 	setwnd(fullscreen_window)
 	clrscr()
@@ -7004,7 +6938,6 @@
 	skip(1)
 	stars()
 	skip(1)
-
 	if game.tourn and game.alldone:
 	    proutn(_("Do you want your score recorded?"))
 	    if ja() == True:
@@ -7016,4 +6949,3 @@
     skip(1)
     prout(_("May the Great Bird of the Galaxy roost upon your home planet."))
     raise SysExit, 0
-



From esr at mail.berlios.de  Thu Oct  5 13:35:25 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 5 Oct 2006 13:35:25 +0200
Subject: [Sst-commit-watch] r677 - trunk/src
Message-ID: <200610051135.k95BZPpd020770@sheep.berlios.de>

Author: esr
Date: 2006-10-05 13:35:24 +0200 (Thu, 05 Oct 2006)
New Revision: 677

Modified:
   trunk/src/sst.py
Log:
Local navigation now works.  Flight to other quadrants doesn't yet.
(The bugs all appear to be consequences of moving to zero indexing.)


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-05 10:16:15 UTC (rev 676)
+++ trunk/src/sst.py	2006-10-05 11:35:24 UTC (rev 677)
@@ -173,7 +173,7 @@
 setting) can be damaged separately from the main computer (which
 handles weapons targeting, ETA calculation, and self-destruct).
 """
-import os, sys, math, curses, time, atexit, readline, cPickle, random, getopt
+import os,sys,math,curses,time,atexit,readline,cPickle,random,getopt,copy
 
 SSTDOC  	= "/usr/share/doc/sst/sst.doc"
 DOC_NAME	= "sst.doc"
@@ -2902,7 +2902,7 @@
     game.optime = 10.0*game.dist/16.0
     skip(1)
     prout(_("Force of nova displaces starship."))
-    imove(True)
+    imove(novapush=True)
     game.optime = 10.0*game.dist/16.0
     return
 	
@@ -3595,13 +3595,13 @@
 def prouts(line):
     "print slowly!" 
     for c in line:
-	curses.delay_output(30)
+	time.sleep(0.03)
 	proutn(c)
 	if game.options & OPTION_CURSES:
 	    wrefresh(curwnd)
 	else:
 	    sys.stdout.flush()
-    curses.delay_output(300)
+    time.sleep(0.03)
 
 def cgetline():
     "Get a line of input."
@@ -3721,7 +3721,7 @@
 	srscan_window.attron(curses.A_REVERSE)
 	put_srscan_sym(w, game.quad[w.x][w.y])
 	#sound(500)
-	#delay(1000)
+	#time.sleep(1.0)
 	#nosound()
 	srscan_window.attroff(curses.A_REVERSE)
 	put_srscan_sym(w, game.quad[w.x][w.y])
@@ -3757,18 +3757,18 @@
 	if not damaged(DSRSENS) or game.condition=="docked":
 	    if i != 1 and l == 1:
 		drawmaps(2)
-		curses.delay_output(400)
+		time.sleep(0.4)
 	    if (iquad==IHDOT) or (iquad==IHBLANK):
 		put_srscan_sym(w, '+')
 		#sound(l*10)
-		#curses.delay_output(100)
+		#time.sleep(0.1)
 		#nosound()
 		put_srscan_sym(w, iquad)
 	    else:
 		curwnd.attron(curses.A_REVERSE)
 		put_srscan_sym(w, iquad)
 		#sound(500)
-		#curses.delay_output(1000)
+		#time.sleep(1.0)
 		#nosound()
 		curwnd.attroff(curses.A_REVERSE)
 		put_srscan_sym(w, iquad)
@@ -3806,7 +3806,7 @@
     trbeam = False
 
     def no_quad_change():
-        # No quadrant change -- compute new avg enemy distances 
+        # No quadrant change -- compute new average enemy distances 
         game.quad[game.sector.x][game.sector.y] = game.ship
         if game.nenhere:
             for m in range(game.nenhere):
@@ -3848,14 +3848,14 @@
     game.quad[game.sector.x][game.sector.y] = IHDOT
     x = game.sector.x
     y = game.sector.y
-    n = 10.0*game.dist*bigger+0.5
+    n = int(10.0*game.dist*bigger+0.5)
 
     if n > 0:
 	for m in range(1, n+1):
             x += deltax
             y += deltay
-	    w.x = x + 0.5
-	    w.y = y + 0.5
+	    w.x = int(x + 0.5)
+	    w.y = int(y + 0.5)
 	    if not VALID_SECTOR(w.x, w.y):
 		# Leaving quadrant -- allow final enemy attack 
 		# Don't do it if being pushed by Nova 
@@ -3876,8 +3876,8 @@
 		# compute final position -- new quadrant and sector 
 		x = QUADSIZE*(game.quadrant.x-1)+game.sector.x
 		y = QUADSIZE*(game.quadrant.y-1)+game.sector.y
-		w.x = x+10.0*game.dist*bigger*deltax+0.5
-		w.y = y+10.0*game.dist*bigger*deltay+0.5
+		w.x = int(x+10.0*game.dist*bigger*deltax+0.5)
+		w.y = int(y+10.0*game.dist*bigger*deltay+0.5)
 		# check for edge of galaxy 
 		kinks = 0
                 while True:
@@ -4018,23 +4018,19 @@
 # because it involves giving x and y motions, yet the coordinates
 # are always displayed y - x, where +y is downward!
 
-def getcd(isprobe, akey):
-    # get course and distance 
-    irowq=game.quadrant.x; icolq=game.quadrant.y; key=0
+def getcourse(isprobe, akey):
+    # get course and distance
+    key = 0
+    dquad = copy.copy(game.quadrant)
     navmode = "unspecified"
     itemp = "curt"
-    incr = coord()
+    dsect = coord()
     iprompt = False
-
-    # Get course direction and distance. If user types bad values, return
-    # with DIREC = -1.0.
-    game.direc = -1.0
-	
     if game.landed and not isprobe:
 	prout(_("Dummy! You can't leave standard orbit until you"))
 	proutn(_("are back aboard the ship."))
 	chew()
-	return
+	return False
     while navmode == "unspecified":
 	if damaged(DNAVSYS):
 	    if isprobe:
@@ -4051,7 +4047,6 @@
 	    akey = -1
 	else: 
 	    key = scan()
-
 	if key == IHEOL:
 	    proutn(_("Manual or automatic- "))
 	    iprompt = True
@@ -4068,7 +4063,7 @@
 	    else:
 		huh()
 		chew()
-		return
+		return False
 	else: # numeric 
 	    if isprobe:
 		prout(_("(Manual navigation assumed.)"))
@@ -4076,7 +4071,6 @@
 		prout(_("(Manual movement assumed.)"))
 	    navmode = "manual"
 	    break
-
     if navmode == "automatic":
 	while key == IHEOL:
 	    if isprobe:
@@ -4086,52 +4080,53 @@
 	    chew()
 	    iprompt = True
 	    key = scan()
-
 	if key != IHREAL:
 	    huh()
-	    return
-	xi = int(aaitem-0.05)
+	    return False
+	xi = int(round(aaitem))-1
 	key = scan()
 	if key != IHREAL:
 	    huh()
-	    return
-	xj = int(aaitem-0.5)
+	    return False
+	xj = int(round(aaitem))-1
 	key = scan()
 	if key == IHREAL:
 	    # both quadrant and sector specified 
-	    xk = aaitem
+	    xk = int(round(aaitem))-1
 	    key = scan()
 	    if key != IHREAL:
 		huh()
-		return
-	    xl = aaitem
-
-	    irowq = xi + 0.5
-	    icolq = xj + 0.5
-	    incr.y = xk + 0.5
-	    incr.x = xl + 0.5
+		return False
+	    xl = int(round(aaitem))-1
+	    dquad.x = xi
+	    dquad.y = xj
+	    dsect.y = xk
+	    dsect.x = xl
 	else:
+            # only one pair of numbers was specified
 	    if isprobe:
 		# only quadrant specified -- go to center of dest quad 
-		irowq = xi + 0.5
-		icolq = xj + 0.5
-		incr.y = incr.x = 5
+		dquad.x = xi
+		dquad.y = xj
+		dsect.y = dsect.x = 4	# preserves 1-origin behavior
 	    else:
-		incr.y = xi + 0.5
-		incr.x = xj + 0.5
+                # only sector specified
+		dsect.y = xi
+		dsect.x = xj
 	    itemp = "normal"
-	if not VALID_QUADRANT(icolq,irowq) or not VALID_SECTOR(incr.x,incr.y):
+	if not VALID_QUADRANT(dquad.y,dquad.x) or not VALID_SECTOR(dsect.x,dsect.y):
 	    huh()
-	    return
+	    return False
 	skip(1)
 	if not isprobe:
 	    if itemp > "curt":
 		if iprompt:
-		    prout(_("Helmsman Sulu- \"Course locked in for Sector %s.\"") % incr)
+		    prout(_("Helmsman Sulu- \"Course locked in for Sector %s.\"") % dsect)
 	    else:
 		prout(_("Ensign Chekov- \"Course laid in, Captain.\""))
-	deltax = icolq - game.quadrant.y + 0.1*(incr.x-game.sector.y)
-	deltay = game.quadrant.x - irowq + 0.1*(game.sector.x-incr.y)
+        # the actual deltas get computed here
+	deltax = dquad.y-game.quadrant.y + 0.1*(dsect.x-game.sector.y)
+	deltay = game.quadrant.x-dquad.x + 0.1*(game.sector.x-dsect.y)
     else: # manual 
 	while key == IHEOL:
 	    proutn(_("X and Y displacements- "))
@@ -4141,26 +4136,27 @@
 	itemp = "verbose"
 	if key != IHREAL:
 	    huh()
-	    return
+	    return False
 	deltax = aaitem
 	key = scan()
 	if key != IHREAL:
 	    huh()
-	    return
+	    return False
 	deltay = aaitem
     # Check for zero movement 
     if deltax == 0 and deltay == 0:
 	chew()
-	return
+	return False
     if itemp == "verbose" and not isprobe:
 	skip(1)
 	prout(_("Helmsman Sulu- \"Aye, Sir.\""))
+    # Course actually laid in.
     game.dist = math.sqrt(deltax*deltax + deltay*deltay)
     game.direc = math.atan2(deltax, deltay)*1.90985932
     if game.direc < 0.0:
 	game.direc += 12.0
     chew()
-    return
+    return True
 
 def impulse():
     # move under impulse power 
@@ -4171,8 +4167,7 @@
 	prout(_("Engineer Scott- \"The impulse engines are damaged, Sir.\""))
 	return
     if game.energy > 30.0:
-	getcd(False, 0)
-	if game.direc == -1.0:
+        if not getcourse(isprobe=False, akey=0):
 	    return
 	power = 20.0 + 100.0*game.dist
     else:
@@ -4199,7 +4194,7 @@
 	if ja() == False:
 	    return
     # Activate impulse engines and pay the cost 
-    imove(False)
+    imove(novapush=False)
     game.ididit = True
     if game.alldone:
 	return
@@ -4227,8 +4222,7 @@
 	    prout(_("  is repaired, I can only give you warp 4.\""))
 	    return
        	# Read in course and distance 
-	getcd(False, 0)
-	if game.direc == -1.0:
+        if not getcourse(isprobe=False, akey=0):
 	    return
 	# Make sure starship has enough energy for the trip 
 	power = (game.dist+0.05)*game.warpfac*game.warpfac*game.warpfac*(game.shldup+1)
@@ -4307,7 +4301,7 @@
 		    blooey = False
 		    twarp = False
     # Activate Warp Engines and pay the cost 
-    imove(False)
+    imove(novapush=False)
     if game.alldone:
 	return
     game.energy -= game.dist*game.warpfac*game.warpfac*game.warpfac*(game.shldup+1)
@@ -4543,8 +4537,7 @@
     elif key == IHEOL:
 	proutn(_("Arm NOVAMAX warhead? "))
 	game.isarmed = ja()
-    getcd(True, key)
-    if game.direc == -1.0:
+    if not getcourse(isprobe=True, akey=key):
 	return
     game.nprobes -= 1
     angle = ((15.0 - game.direc) * 0.5235988)
@@ -4864,13 +4857,14 @@
 	if game.iplnet.known=="shuttle_down": 
 	    prout(_("         Sensors show Galileo still on surface."))
 	proutn(_("         Readings indicate"))
-	if game.iplnet.crystals != present:
+	if game.iplnet.crystals != "present":
 	    proutn(_(" no"))
 	prout(_(" dilithium crystals present.\""))
 	if game.iplnet.known == "unknown":
 	    game.iplnet.known = "known"
     elif game.iplnet.inhabited:
-        prout(_("Spock-  \"The inhabited planet %s is located at Sector %s, Captain.\"") % (game.iplnet.name, game.plnet))
+        prout(_("Spock-  \"The inhabited planet %s ") % game.iplnet.name)
+        prout(_("        is located at Sector %s, Captain.\"") % game.plnet)
 
 def beam():
     # use the transporter 
@@ -5403,7 +5397,7 @@
 	prout(_("(Last surveillance update %d stardates ago).") % ((int)(game.state.date-game.lastchart)))
     prout("      1    2    3    4    5    6    7    8")
     for i in range(GALSIZE):
-	proutn("%d |" % (i))
+	proutn("%d |" % (i+1))
 	for j in range(GALSIZE):
 	    if (game.options & OPTION_SHOWME) and i == game.quadrant.x and j == game.quadrant.y:
 		proutn("<")
@@ -5532,7 +5526,7 @@
     if game.condition != "docked":
 	newcnd()
     for i in range(QUADSIZE):
-	proutn("%2d  " % (i))
+	proutn("%2d  " % (i+1))
 	for j in range(QUADSIZE):
 	    sectscan(goodScan, i, j)
 	skip(1)
@@ -6076,7 +6070,7 @@
 	    if aaitem == 0:
 		chew()
 		continue # We don't want a blank entry
-	    game.tourn = int(aaitem)
+	    game.tourn = int(round(aaitem))
 	    random.seed(aaitem)
 	    break
         if isit("saved") or isit("frozen"):
@@ -6632,7 +6626,7 @@
 	elif cmd == "SEED":		# set random-number seed
 	    key = scan()
 	    if key == IHREAL:
-		seed = int(aaitem)
+		seed = int(round(aaitem))
 #ifdef BSD_BUG_FOR_BUG
 #	elif cmd == "VISUAL":
 #	    visual()			# perform visual scan
@@ -6727,7 +6721,7 @@
 
 def scan():
     # Get a token from the user
-    global inqueue, line, citem
+    global inqueue, line, citem, aaitem
     aaitem = 0.0
     citem = ''
 
@@ -6857,13 +6851,13 @@
 			    prout("Event %d canceled, no x coordinate." % (i))
 			    unschedule(i)
 			    continue
-			w.x = int(aaitem)
+			w.x = int(round(aaitem))
 			key = scan()
 			if key != IHREAL:
 			    prout("Event %d canceled, no y coordinate." % (i))
 			    unschedule(i)
 			    continue
-			w.y = int(aaitem)
+			w.y = int(round(aaitem))
 			ev.quadrant = w
 	chew()
     proutn("Induce supernova here? ")



From esr at mail.berlios.de  Thu Oct  5 14:32:28 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 5 Oct 2006 14:32:28 +0200
Subject: [Sst-commit-watch] r678 - trunk/src
Message-ID: <200610051232.k95CWSII027076@sheep.berlios.de>

Author: esr
Date: 2006-10-05 14:32:27 +0200 (Thu, 05 Oct 2006)
New Revision: 678

Modified:
   trunk/src/sst.py
Log:
Various minor fixes to movement code, and avoidance of errors raised
by indexing with a float.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-05 11:35:24 UTC (rev 677)
+++ trunk/src/sst.py	2006-10-05 12:32:27 UTC (rev 678)
@@ -1260,7 +1260,7 @@
     proutn("***")
     crmshp()
     prout(_(" heavily damaged."))
-    icas = 10.0+20.0*random.random()
+    icas = 10 + random.randrange(20)
     prout(_("***Sickbay reports %d casualties"), icas)
     game.casual += icas
     game.state.crew -= icas
@@ -2479,7 +2479,7 @@
             if game.state.remcom == 0:
                 unschedule(FTBEAM)
                 continue
-            i = random.random()*game.state.remcom+1.0
+            i = random.randrange(game.state.remcom)
             yank = square(game.state.kcmdr[i].x-game.quadrant.x) + square(game.state.kcmdr[i].y-game.quadrant.y)
             if istract or game.condition == "docked" or yank == 0:
                 # Drats! Have to reschedule 
@@ -2922,7 +2922,7 @@
 		stars += game.state.galaxy[nq.x][nq.y].stars
 	if stars == 0:
 	    return # nothing to supernova exists 
-	num = random.random()*stars + 1
+	num = random.randrange(stars) + 1
 	for nq.x in range(GALSIZE):
 	    for nq.y in range(GALSIZE):
 		num -= game.state.galaxy[nq.x][nq.y].stars
@@ -2943,7 +2943,7 @@
     else:
 	ns = coord()
 	# we are in the quadrant! 
-	num = random.random()* game.state.galaxy[nq.x][nq.y].stars + 1
+	num = random.randrange(game.state.galaxy[nq.x][nq.y].stars) + 1
 	for ns.x in range(QUADSIZE):
 	    for ns.y in range(QUADSIZE):
 		if game.quad[ns.x][ns.y]==IHSTAR:
@@ -3821,12 +3821,10 @@
         newcnd()
         drawmaps(0)
         setwnd(message_window)
-
     w.x = w.y = 0
     if game.inorbit:
 	prout(_("Helmsman Sulu- \"Leaving standard orbit.\""))
 	game.inorbit = False
-
     angle = ((15.0 - game.direc) * 0.5235988)
     deltax = -math.sin(angle)
     deltay = math.cos(angle)
@@ -3834,10 +3832,8 @@
 	bigger = math.fabs(deltax)
     else:
 	bigger = math.fabs(deltay)
-		
     deltay /= bigger
     deltax /= bigger
-
     # If tractor beam is to occur, don't move full distance 
     if game.state.date+game.optime >= scheduled(FTBEAM):
 	trbeam = True
@@ -3849,13 +3845,12 @@
     x = game.sector.x
     y = game.sector.y
     n = int(10.0*game.dist*bigger+0.5)
-
     if n > 0:
 	for m in range(1, n+1):
             x += deltax
             y += deltay
-	    w.x = int(x + 0.5)
-	    w.y = int(y + 0.5)
+	    w.x = int(round(x))
+	    w.y = int(round(y))
 	    if not VALID_SECTOR(w.x, w.y):
 		# Leaving quadrant -- allow final enemy attack 
 		# Don't do it if being pushed by Nova 
@@ -3874,31 +3869,30 @@
 		    if game.alldone:
 			return
 		# compute final position -- new quadrant and sector 
-		x = QUADSIZE*(game.quadrant.x-1)+game.sector.x
-		y = QUADSIZE*(game.quadrant.y-1)+game.sector.y
-		w.x = int(x+10.0*game.dist*bigger*deltax+0.5)
-		w.y = int(y+10.0*game.dist*bigger*deltay+0.5)
+		x = (QUADSIZE*game.quadrant.x)+game.sector.x
+		y = (QUADSIZE*game.quadrant.y)+game.sector.y
+		w.x = int(round(x+10.0*game.dist*bigger*deltax))
+		w.y = int(round(y+10.0*game.dist*bigger*deltay))
 		# check for edge of galaxy 
 		kinks = 0
                 while True:
-		    kink = 0
-		    if w.x <= 0:
-			w.x = -w.x + 1
-			kink = 1
-		    if w.y <= 0:
-			w.y = -w.y + 1
-			kink = 1
-		    if w.x > GALSIZE*QUADSIZE:
-			w.x = (GALSIZE*QUADSIZE*2)+1 - w.x
-			kink = 1
-		    if w.y > GALSIZE*QUADSIZE:
-			w.y = (GALSIZE*QUADSIZE*2)+1 - w.y
-			kink = 1
+		    kink = False
+		    if w.x < 0:
+			w.x = -w.x
+			kink = True
+		    if w.y < 0:
+			w.y = -w.y
+			kink = True
+		    if w.x >= GALSIZE*QUADSIZE:
+			w.x = (GALSIZE*QUADSIZE*2) - w.x
+			kink = True
+		    if w.y >= GALSIZE*QUADSIZE:
+			w.y = (GALSIZE*QUADSIZE*2) - w.y
+			kink = True
 		    if kink:
-			kinks = 1
-		if not kink:
-                    break
-
+			kinks += 1
+                    else:
+                        break
 		if kinks:
 		    game.nkinks += 1
 		    if game.nkinks == 3:
@@ -3928,7 +3922,7 @@
 		# object encountered in flight path 
 		stopegy = 50.0*game.dist/game.optime
 		game.dist = distance(game.sector, w) / (QUADSIZE * 1.0)
-                if iquad in (IHT. IHK, OHC, IHS, IHR, IHQUEST):
+                if iquad in (IHT, IHK, OHC, IHS, IHR, IHQUEST):
 		    game.sector = w
 		    ram(False, iquad, game.sector)
 		    final = game.sector
@@ -5138,7 +5132,6 @@
 def deathray():
     # use the big zapper 
     r = random.random()
-	
     game.ididit = False
     skip(1)
     chew()



From esr at mail.berlios.de  Thu Oct  5 14:42:37 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 5 Oct 2006 14:42:37 +0200
Subject: [Sst-commit-watch] r679 - trunk/src
Message-ID: <200610051242.k95CgbSa027785@sheep.berlios.de>

Author: esr
Date: 2006-10-05 14:42:37 +0200 (Thu, 05 Oct 2006)
New Revision: 679

Modified:
   trunk/src/sst.py
Log:
OK, warp flight between quadrants works now.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-05 12:32:27 UTC (rev 678)
+++ trunk/src/sst.py	2006-10-05 12:42:37 UTC (rev 679)
@@ -3906,10 +3906,10 @@
 		# Compute final position in new quadrant 
 		if trbeam: # Don't bother if we are to be beamed 
 		    return
-		game.quadrant.x = (w.x+(QUADSIZE-1))/QUADSIZE
-		game.quadrant.y = (w.y+(QUADSIZE-1))/QUADSIZE
-		game.sector.x = w.x - QUADSIZE*(game.quadrant.x-1)
-		game.sector.y = w.y - QUADSIZE*(game.quadrant.y-1)
+		game.quadrant.x = w.x/QUADSIZE
+		game.quadrant.y = w.y/QUADSIZE
+		game.sector.x = w.x - (QUADSIZE*game.quadrant.x)
+		game.sector.y = w.y - (QUADSIZE*game.quadrant.y)
 		skip(1)
 		prout(_("Entering Quadrant %s.") % game.quadrant)
 		game.quad[game.sector.x][game.sector.y] = game.ship



From esr at mail.berlios.de  Fri Oct  6 00:41:06 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 6 Oct 2006 00:41:06 +0200
Subject: [Sst-commit-watch] r680 - trunk/src
Message-ID: <200610052241.k95Mf6GK014976@sheep.berlios.de>

Author: esr
Date: 2006-10-06 00:41:05 +0200 (Fri, 06 Oct 2006)
New Revision: 680

Modified:
   trunk/src/sst.py
Log:
Many small port fixes.  Get rid of game.ithere, we just test whether
there is a valid coordinate object for the Tholian instead.  Also, use
deepcopy to make snapdhots.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-05 12:42:37 UTC (rev 679)
+++ trunk/src/sst.py	2006-10-05 22:41:05 UTC (rev 680)
@@ -244,7 +244,16 @@
     def distance(self, other):
         return math.sqrt((self.x - other.x)**2 + (self.y - other.y)**2)
     def sgn(self):
-        return coord(self.x / abs(x), self.y / abs(y));
+        s = coord()
+        if self.x == 0:
+            s.x = 0
+        else:
+            s.x = self.x / abs(self.x)
+        if self.y == 0:
+            s.y = 0
+        else:
+            s.y = self.y / abs(self.y)
+        return s
     def __hash__(self):
         return hash((x, y))
     def __str__(self):
@@ -423,7 +432,6 @@
         self.ishere = False	# super-commander in quadrant
         self.iscate = False	# super commander is here
         self.ientesc = False	# attempted escape from supercommander
-        self.ithere = False	# Tholian is here 
         self.resting = False	# rest time
         self.icraft = False	# Kirk in Galileo
         self.landed = False	# party on planet (true), on ship (false)
@@ -1021,9 +1029,8 @@
 
 def movetholian():
     # move the Tholian 
-    if not game.ithere or game.justin:
+    if not game.tholian or game.justin:
 	return
-
     if game.tholian.x == 0 and game.tholian.y == 0:
 	idx = 0; idy = QUADSIZE-1
     elif game.tholian.x == 0 and game.tholian.y == QUADSIZE-1:
@@ -1036,12 +1043,10 @@
 	# something is wrong! 
 	game.ithere = False
 	return
-
     # do nothing if we are blocked 
     if game.quad[idx][idy]!= IHDOT and game.quad[idx][idy]!= IHWEB:
 	return
     game.quad[game.tholian.x][game.tholian.y] = IHWEB
-
     if game.tholian.x != idx:
 	# move in x axis 
 	im = math.fabs(idx - game.tholian.x)*1.0/(idx - game.tholian.x)
@@ -1074,7 +1079,7 @@
     dropin(IHBLANK)
     crmena(True, IHT, "sector", game.tholian)
     prout(_(" completes web."))
-    game.ithere = False
+    game.tholian = None
     game.nenhere -= 1
     return
 
@@ -1486,7 +1491,7 @@
 	    h1 = math.fabs(h1)
 	    if h1 >= 600:
 		game.quad[w.x][w.y] = IHDOT
-		game.ithere = False
+		game.tholian = None
 		deadkl(w, iquad, w)
 		return None
 	    skip(1)
@@ -1496,7 +1501,7 @@
 		return None
 	    prout(_(" disappears."))
 	    game.quad[w.x][w.y] = IHWEB
-	    game.ithere = False
+	    game.tholian = None
 	    game.nenhere -= 1
 	    dropin(IHBLANK)
 	    return None
@@ -1569,7 +1574,7 @@
     if idebug:
 	prout("=== ATTACK!")
     # Tholian gets to move before attacking 
-    if game.ithere:
+    if game.tholian:
 	movetholian()
     # if you have just entered the RNZ, you'll get a warning 
     if game.neutz: # The one chance not to be attacked 
@@ -1721,7 +1726,7 @@
 	game.state.nromrem -= 1
     elif type == IHT:
 	# Killed a Tholian 
-	game.ithere = False
+	game.tholian = None
     elif type == IHQUEST:
 	# Killed a Thingy
         global iqengry
@@ -1946,7 +1951,7 @@
 
 def hittem(hits):
     # register a phaser hit on Klingons and Romulans 
-    nenhr2=game.nenhere; kk=1
+    nenhr2 = game.nenhere; kk=1
     w = coord()
     skip(1)
     for k in range(nenhr2):
@@ -1995,9 +2000,9 @@
 
 def phasers():
     # fire phasers 
-    hits = []; rpow=0
+    hits = []
     kz = 0; k = 1; irec=0 # Cheating inhibitor 
-    ifast = False; no = False; itarg = True; msgflag = True
+    ifast = False; no = False; itarg = True; msgflag = True; rpow=0
     automode = "NOTSET"
     key=0
     skip(1)
@@ -2066,7 +2071,8 @@
 	    elif not itarg:
 		automode = "FORCEMAN"
 	    else: 
-		proutn(_("Manual or automatic? "))			
+		proutn(_("Manual or automatic? "))
+                chew()
     avail = game.energy
     if ifast:
         avail -= 200.0
@@ -2114,7 +2120,7 @@
 	    extra = 0.0
 	    powrem = rpow
 	    for i in range(game.nenhere):
-		hits[i] = 0.0
+		hits.append(0.0)
 		if powrem <= 0:
 		    continue
 		hits[i] = math.fabs(game.kpower[i])/(PHASEFAC*math.pow(0.90,game.kdist[i]))
@@ -2131,7 +2137,7 @@
 	    hittem(hits)
 	    game.ididit = True
 	if extra > 0 and not game.alldone:
-	    if game.ithere:
+	    if game.tholian:
 		proutn(_("*** Tholian web absorbs "))
 		if game.nenhere>0:
 		    proutn(_("excess "))
@@ -2288,9 +2294,8 @@
     w = coord(); hold = coord()
     ev = event(); ev2 = event()
 
-    def tractorbeam():
+    def tractorbeam(yank):
         # tractor beaming cases merge here 
-        yank = math.sqrt(yank)
         announce()
         game.optime = (10.0/(7.5*7.5))*yank # 7.5 is yank rate (warp 7.5) 
         skip(1)
@@ -2314,7 +2319,7 @@
                 game.iscraft = "removed"
             else:
                 prout(_("Galileo, left on the planet surface, is well hidden."))
-        if evcode==0:
+        if evcode == FSPY:
             game.quadrant = game.state.kscmdr
         else:
             game.quadrant = game.state.kcmdr[i]
@@ -2327,8 +2332,8 @@
             game.resting = False
         if not game.shldup:
             if not damaged(DSHIELD) and game.shield > 0:
-                doshield(True) # raise shields 
-                game.shldchg=False
+                doshield(shraise=True) # raise shields 
+                game.shldchg = False
             else:
                 prout(_("(Shields not currently useable.)"))
         newqad(False)
@@ -2469,10 +2474,8 @@
 		 (game.energy < 2500 or damaged(DPHASER)) and \
                  (game.torps < 5 or damaged(DPHOTON))):
 		# Tractor-beam her! 
-		istract = True
-		yank = distance(game.state.kscmdr, game.quadrant)
-                ictbeam = True
-                tractorbeam()
+		istract = ictbeam = True
+                tractorbeam(distance(game.state.kscmdr, game.quadrant))
 	    else:
 		return
 	elif evcode == FTBEAM: # Tractor beam 
@@ -2480,16 +2483,16 @@
                 unschedule(FTBEAM)
                 continue
             i = random.randrange(game.state.remcom)
-            yank = square(game.state.kcmdr[i].x-game.quadrant.x) + square(game.state.kcmdr[i].y-game.quadrant.y)
+            yank = distance(game.state.kcmdr[i], game.quadrant)
             if istract or game.condition == "docked" or yank == 0:
                 # Drats! Have to reschedule 
                 schedule(FTBEAM, 
                          game.optime + expran(1.5*game.intime/game.state.remcom))
                 continue
             ictbeam = True
-            tractorbeam()
+            tractorbeam(yank)
 	elif evcode == FSNAP: # Snapshot of the universe (for time warp) 
-	    game.snapsht = game.state
+	    game.snapsht = copy.deepcopy(game.state)
 	    game.state.snap = True
 	    schedule(FSNAP, expran(0.5 * game.intime))
 	elif evcode == FBATTAK: # Commander attacks starbase 
@@ -2610,7 +2613,7 @@
 		q = game.state.galaxy[w.x][w.y]
                 if not (game.quadrant == w or q.planet == None or \
 		      not q.planet.inhabited or \
-		      q.supernova or q.status!=secure or q.klingons<=0):
+		      q.supernova or q.status!="secure" or q.klingons<=0):
                     break
             else:
 		# can't seem to find one; ignore this call 
@@ -3614,7 +3617,7 @@
 	else:
 	    line = raw_input()
     if logfp:
-	logfp.write(line)
+	logfp.write(line + "\n")
     return line
 
 def setwnd(wnd):
@@ -4974,7 +4977,7 @@
 	skip(1)
 	prout(_("there's no reason to mine more at this time."))
 	return
-    game.optime = (0.1+0.2*random.random())*game.iplnet.pclass
+    game.optime = (0.1+0.2*random.random())*(ord(game.iplnet.pclass)-ord("M"))
     if consumeTime():
 	return
     prout(_("Mining operation complete."))
@@ -6039,7 +6042,7 @@
 	prout(_("  YOU'LL NEED IT."))
     waitfor()
     newqad(False)
-    if game.nenhere - (thing == game.quadrant) - game.ithere:
+    if game.nenhere - (thing == game.quadrant) - (game.tholian != None):
 	game.shldup = True
     if game.neutz:	# bad luck to start in a Romulan Neutral Zone
 	attack(False)
@@ -6197,7 +6200,6 @@
     game.inorbit = False
     game.landed = False
     game.ientesc = False
-    game.ithere = False
     global iqengry
     iqengry = False
     game.iseenit = False
@@ -6229,7 +6231,7 @@
 	    game.kpower[game.klhere] = 950.0+400.0*random.random()+50.0*game.skill
 	    game.comhere = True
 	# If we need a super-commander, promote a Klingon
-	if same(game.quadrant, game.state.kscmdr):
+	if game.quadrant == game.state.kscmdr:
 	    game.quad[game.ks[0].x][game.ks[0].y] = IHS
 	    game.kpower[1] = 1175.0 + 400.0*random.random() + 125.0*game.skill
 	    game.iscate = (game.state.remkl > 1)
@@ -6286,13 +6288,13 @@
 	if (game.skill < SKILL_GOOD and random.random() <= 0.02) or \
 	    (game.skill == SKILL_GOOD and random.random() <= 0.05) or \
             (game.skill > SKILL_GOOD and random.random() <= 0.08):
+            game.tholian = coord()
             while True:
 		game.tholian.x = random.choice((0, QUADSIZE-1))
 		game.tholian.y = random.choice((0, QUADSIZE-1))
                 if game.quad[game.tholian.x][game.tholian.y] == IHDOT:
                     break
 	    game.quad[game.tholian.x][game.tholian.y] = IHT
-	    game.ithere = True
 	    game.nenhere += 1
 	    game.ks[game.nenhere] = game.tholian
 	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] = \
@@ -6313,7 +6315,7 @@
 	if random.random() > 0.5: 
 	    dropin(IHBLANK)
     # Take out X's in corners if Tholian present
-    if game.ithere:
+    if game.tholian:
 	if game.quad[0][0]=='X':
 	    game.quad[0][0] = IHDOT
 	if game.quad[0][QUADSIZE-1]=='X':
@@ -6326,7 +6328,7 @@
 def sortklings():
     # sort Klingons by distance from us 
     # The author liked bubble sort. So we will use it. :-(
-    if game.nenhere-(thing==game.quadrant)-game.ithere < 2:
+    if game.nenhere-(thing==game.quadrant)-(game.tholian!=None) < 2:
 	return
     while True:
 	sw = False
@@ -6535,7 +6537,7 @@
 	elif cmd == "MOVE":		# move under warp
 	    warp(False)
 	elif cmd == "SHIELDS":		# shields
-	    doshield(False)
+	    doshield(shraise=False)
 	    if game.ididit:
 		hitme = True
 		game.shldchg = False
@@ -6671,6 +6673,7 @@
 	proutn("***")
     cramen(enemy)
     proutn(_(" at "))
+    buf = ""
     if loctype == "quadrant":
 	buf = _("Quadrant ")
     elif loctype == "sector":



From esr at mail.berlios.de  Fri Oct  6 03:19:45 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 6 Oct 2006 03:19:45 +0200
Subject: [Sst-commit-watch] r681 - trunk/src
Message-ID: <200610060119.k961JjPG007180@sheep.berlios.de>

Author: esr
Date: 2006-10-06 03:19:43 +0200 (Fri, 06 Oct 2006)
New Revision: 681

Modified:
   trunk/src/sst.py
Log:
Avoid divide-by-zero error.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-05 22:41:05 UTC (rev 680)
+++ trunk/src/sst.py	2006-10-06 01:19:43 UTC (rev 681)
@@ -1992,7 +1992,7 @@
 	else: # decide whether or not to emasculate klingon 
 	    if kpow > 0 and random.random() >= 0.9 and \
 		kpow <= ((0.4 + 0.4*random.random())*kpini):
-		prout(_("***Mr. Spock-  \"Captain, the vessel at Sector %s"), w)
+		prout(_("***Mr. Spock-  \"Captain, the vessel at Sector %s") % w)
 		prout(_("   has just lost its firepower.\""))
 		game.kpower[kk] = -kpow
         kk += 1
@@ -3089,7 +3089,13 @@
 				
 def killrate():
     "Compute our rate of kils over time."
-    return ((game.inkling + game.incom + game.inscom) - (game.state.remkl + game.state.remcom + game.state.nscrem))/(game.state.date-game.indate)
+    elapsed = game.state.date - game.indate
+    if elapsed == 0:	# Avoid divide-by-zero error if calculated on turn 0
+        return 0
+    else:
+        starting = (game.inkling + game.incom + game.inscom)
+        remaining = (game.state.remkl + game.state.remcom + game.state.nscrem)
+        return (starting - remaining)/elapsed
 
 def badpoints():
     "Compute demerits."
@@ -3490,7 +3496,7 @@
     #textdomain(PACKAGE)
     if atexit.register(outro):
 	sys.stderr.write("Unable to register outro(), exiting...\n")
-	os.exit(1)
+	raise SysExit,1
     if not (game.options & OPTION_CURSES):
 	ln_env = os.getenv("LINES")
         if ln_env:
@@ -3925,7 +3931,7 @@
 		# object encountered in flight path 
 		stopegy = 50.0*game.dist/game.optime
 		game.dist = distance(game.sector, w) / (QUADSIZE * 1.0)
-                if iquad in (IHT, IHK, OHC, IHS, IHR, IHQUEST):
+                if iquad in (IHT, IHK, IHC, IHS, IHR, IHQUEST):
 		    game.sector = w
 		    ram(False, iquad, game.sector)
 		    final = game.sector
@@ -6590,7 +6596,7 @@
 	elif cmd == "EMEXIT":		# Emergency exit
 	    clrscr()			# Hide screen
 	    freeze(True)		# forced save
-	    os.exit(1)			# And quick exit
+	    raise SysExit,1			# And quick exit
 	elif cmd == "PROBE":
 	    probe()			# Launch probe
 	    if game.ididit:
@@ -6880,16 +6886,17 @@
     for (switch, val) in options:
         if switch == '-r':
             try:
-                replayfp = open(optarg, "r")
+                replayfp = open(val, "r")
             except IOError:
-		sys.stderr.write("sst: can't open replay file %s\n" % optarg)
-		os.exit(1)
+		sys.stderr.write("sst: can't open replay file %s\n" % val)
+		raise SysExit, 1
             line = replayfp.readline().strip()
             try:
                 (key, seed) = line.split()
                 seed = int(seed)
+                sys.stderr.write("sst2k: seed set to %d\n" % seed)
             except ValueError:
-		sys.stderr.write("sst: replay file %s is ill-formed\n"%optarg)
+		sys.stderr.write("sst: replay file %s is ill-formed\n"% val)
 		os.exit(1)
 	    game.options |= OPTION_TTY
 	    game.options &=~ OPTION_CURSES
@@ -6933,6 +6940,7 @@
 	    if ja() == True:
 		chew2()
 		freeze(False)
+        chew()
 	proutn(_("Do you want to play again? "))
 	if not ja():
 	    break



From esr at mail.berlios.de  Fri Oct  6 04:16:43 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 6 Oct 2006 04:16:43 +0200
Subject: [Sst-commit-watch] r682 - trunk/src
Message-ID: <200610060216.k962GhIv011023@sheep.berlios.de>

Author: esr
Date: 2006-10-06 04:16:43 +0200 (Fri, 06 Oct 2006)
New Revision: 682

Modified:
   trunk/src/sst.py
Log:
Minor bug fixes, preparatory to finding out why replay doesn't work.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-06 01:19:43 UTC (rev 681)
+++ trunk/src/sst.py	2006-10-06 02:16:43 UTC (rev 682)
@@ -3620,8 +3620,11 @@
     else:
 	if replayfp and not replayfp.closed:
 	    line = replayfp.readline()
+            if line == '':
+                prout("*** Replay finished")
+                replayfp.close()
 	else:
-	    line = raw_input()
+	    line = raw_input("COMMAND> ")
     if logfp:
 	logfp.write(line + "\n")
     return line
@@ -6505,7 +6508,6 @@
 	    chew()
 	    setwnd(prompt_window)
 	    clrscr()
-	    proutn("COMMAND> ")
 	    if scan() == IHEOL:
 		if game.options & OPTION_CURSES:
 		    makechart()
@@ -6624,10 +6626,6 @@
 	    game.alldone = True		# quit the game
 	elif cmd == "HELP":
 	    helpme()			# get help
-	elif cmd == "SEED":		# set random-number seed
-	    key = scan()
-	    if key == IHREAL:
-		seed = int(round(aaitem))
 #ifdef BSD_BUG_FOR_BUG
 #	elif cmd == "VISUAL":
 #	    visual()			# perform visual scan



From esr at mail.berlios.de  Fri Oct  6 05:25:25 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 6 Oct 2006 05:25:25 +0200
Subject: [Sst-commit-watch] r683 - trunk/src
Message-ID: <200610060325.k963PPGA015466@sheep.berlios.de>

Author: esr
Date: 2006-10-06 05:25:24 +0200 (Fri, 06 Oct 2006)
New Revision: 683

Modified:
   trunk/src/sst.py
Log:
Drop out the BSD visual-scan code.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-06 02:16:43 UTC (rev 682)
+++ trunk/src/sst.py	2006-10-06 03:25:24 UTC (rev 683)
@@ -5660,69 +5660,6 @@
 	    return
 			
 
-#ifdef BSD_BUG_FOR_BUG
-# A visual scan is made in a particular direction of three sectors
-# in the general direction specified.  This takes time, and
-# Klingons can attack you, so it should be done only when sensors
-# are out.  Code swiped from BSD-Trek.  Not presently used, as we
-# automatically display all adjacent sectors on the short-range
-# scan even when short-range sensors are out.
-
-# This struct[] has the delta x, delta y for particular directions
-
-visdelta = (
-    (-1,-1),
-    (-1, 0),
-    (-1, 1),
-    (0,	 1),
-    (1,	 1),
-    (1,	 0),
-    (1,	-1),
-    (0,	-1),
-    (-1,-1),
-    (-1, 0),
-    (-1, 1),
-)
-
-def visual():
-    v = coord()
-    if scan() != IHREAL:
-	chew()
-	proutn(_("Direction? "))
-	if scan()!=IHREAL:
-	    huh()
-	    return
-    if aaitem < 0.0 or aaitem > 360.0:
-	return
-    co = (aaitem + 22) / 45
-    v = visdelta[co]
-    ix = game.sector.x + v.x
-    iy = game.sector.y + v.y
-    if ix < 0 or ix >= QUADSIZE or iy < 0 or iy >= QUADSIZE:
-	co = '?'
-    else:
-	co = game.quad[ix][iy]
-    printf("%d,%d %c " % (ix+1, iy+1, co))
-    v += 1
-    ix = game.sector.x + v.x
-    iy = game.sector.y + v.y
-    if ix < 0 or ix >= QUADSIZE or iy < 0 or iy >= QUADSIZE:
-	co = '?'
-    else:
-	co = game.quad[ix][iy]
-    printf("%c " % (co))
-    v += 1
-    ix = game.sector.x + v.x
-    iy = game.sector.y + v.y
-    if ix < 0 or ix >= QUADSIZE or iy < 0 or iy >= QUADSIZE:
-	co = '?'
-    else:
-	co = game.quad[ix][iy]
-    prout("%c %d,%d\n" % (co, ix+1, iy+1))
-    game.optime = 0.5
-    game.ididit = True
-#endif
-
 # Code from setup.c begins here
 
 def prelim():
@@ -5730,10 +5667,9 @@
     skip(2)
     prout(_("-SUPER- STAR TREK"))
     skip(1)
-#ifdef __HISTORICAL__
+# From the FORTRAN original
 #    prout(_("Latest update-21 Sept 78"))
 #    skip(1)
-#endif __HISTORICAL__ 
 
 def freeze(boss):
     # save game 
@@ -6626,10 +6562,6 @@
 	    game.alldone = True		# quit the game
 	elif cmd == "HELP":
 	    helpme()			# get help
-#ifdef BSD_BUG_FOR_BUG
-#	elif cmd == "VISUAL":
-#	    visual()			# perform visual scan
-#endif
 	while True:
 	    if game.alldone:
 		break		# Game has ended



From esr at mail.berlios.de  Fri Oct  6 11:46:41 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 6 Oct 2006 11:46:41 +0200
Subject: [Sst-commit-watch] r684 - trunk/src
Message-ID: <200610060946.k969kfhG014746@sheep.berlios.de>

Author: esr
Date: 2006-10-06 11:46:40 +0200 (Fri, 06 Oct 2006)
New Revision: 684

Modified:
   trunk/src/sst.py
Log:
Arrange for logging of random-number-generator calls.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-06 03:25:24 UTC (rev 683)
+++ trunk/src/sst.py	2006-10-06 09:46:40 UTC (rev 684)
@@ -254,6 +254,11 @@
         else:
             s.y = self.y / abs(self.y)
         return s
+    def scatter(self):
+        s = coord()
+        s.x = self.x + randrange(-1, 2)
+        s.y = self.y + randrange(-1, 2)
+        return s
     def __hash__(self):
         return hash((x, y))
     def __str__(self):
@@ -564,6 +569,29 @@
 YELLOW = 15
 WHITE = 16
 
+# Log the results of pulling random numbers so we can check determinism.
+
+import traceback
+
+def withprob(p):
+    v = random.random()
+    logfp.write("# withprob(%s) -> %f (%s) at %s\n" % (p, v, v<p, traceback.extract_stack()[1][1:]))
+    return v < p
+
+def randrange(*args):
+    v = random.randrange(*args)
+    logfp.write("# randrange%s -> %s at %s\n" % (args, v, traceback.extract_stack()[1][1:]))
+    return v
+
+def randreal(*args):
+    v = random.random()
+    if len(args) == 1:
+        v *= args[0] 		# returns from [0, a1)
+    elif len(args) == 2:
+        v = args[0] + v*args[1]	# returns from [a1, a2)
+    logfp.write("# randreal%s -> %s at %s\n" % (args, v, traceback.extract_stack()[1][1:]))
+    return v
+
 # Code from ai.c begins here
 
 def tryexit(look, ienm, loccom, irun):
@@ -701,12 +729,12 @@
 	    forces += 1000.0
 	motion = 0
         if forces <= 1000.0 and game.condition != "docked": # Typical situation 
-	    motion = ((forces+200.0*random.random())/150.0) - 5.0
+	    motion = ((forces + randreal(200))/150.0) - 5.0
 	else:
             if forces > 1000.0: # Very strong -- move in for kill 
-		motion = (1.0-square(random.random()))*dist1 + 1.0
+		motion = (1.0-square(randreal()))*dist1 + 1.0
 	    if game.condition=="docked" and (game.options & OPTION_BASE): # protected by base -- back off ! 
-		motion -= game.skill*(2.0-square(random.random()))
+		motion -= game.skill*(2.0-square(randreal()))
 	if idebug:
 	    proutn("=== MOTION = %d, FORCES = %1.2f, " % (motion, forces))
 	# don't move if no motion 
@@ -996,7 +1024,7 @@
 		    return; # no, don't attack base! 
 		game.iseenit = False
 		game.isatb = 1
-		schedule(FSCDBAS, 1.0 +2.0*random.random())
+		schedule(FSCDBAS, randreal(1.0, 3.0))
 		if is_scheduled(FCDBAS):
 		    postpone(FSCDBAS, scheduled(FCDBAS)-game.state.date)
 		if not communicating():
@@ -1018,7 +1046,7 @@
 		return
     # Check for intelligence report 
     if not idebug and \
-	(random.random() > 0.2 or \
+	(withprob(0.8) or \
 	 (not communicating()) or \
 	 not game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].charted):
 	return
@@ -1208,7 +1236,7 @@
     # 
     # This is one place where OPTION_PLAIN does not restore the
     # original behavior, which was equiprobable damage across
-    # all devices.  If we wanted that, we'd return NDEVICES*random.random()
+    # all devices.  If we wanted that, we'd return randrange(NDEVICES)
     # and have done with it.  Also, in the original game, DNAVYS
     # and DCOMPTR were the same device. 
     # 
@@ -1236,7 +1264,7 @@
 	10,	# DDRAY: death ray			 1.0% 
 	30,	# DDSP: deep-space probes		 3.0% 
     )
-    idx = random.random() * 1000.0	# weights must sum to 1000 
+    idx = randrange(1000)	# weights must sum to 1000 
     sum = 0
     for (i, w) in enumerate(weights):
 	sum += w
@@ -1265,7 +1293,7 @@
     proutn("***")
     crmshp()
     prout(_(" heavily damaged."))
-    icas = 10 + random.randrange(20)
+    icas = randrange(10, 30)
     prout(_("***Sickbay reports %d casualties"), icas)
     game.casual += icas
     game.state.crew -= icas
@@ -1274,12 +1302,12 @@
     # which was silly.  Instead, pick up to half the devices at
     # random according to our weighting table,
     # 
-    ncrits = random.randrange(NDEVICES/2)
+    ncrits = randrange(NDEVICES/2)
     for m in range(ncrits):
 	dev = randdevice()
 	if game.damage[dev] < 0:
 	    continue
-	extradm = (10.0*hardness*random.random()+1.0)*game.damfac
+	extradm = (10.0*hardness*randreal()+1.0)*game.damfac
 	# Damage for at least time of travel! 
 	game.damage[dev] += game.optime + extradm
     game.shldup = False
@@ -1331,13 +1359,13 @@
 	    proutn(_("Torpedo hits "))
 	    crmshp()
 	    prout(".")
-	    hit = 700.0 + 100.0*random.random() - \
+	    hit = 700.0 + randreal(100) - \
 		1000.0 * distance(w, incoming) * math.fabs(math.sin(bullseye-angle))
 	    newcnd(); # we're blown out of dock 
 	    # We may be displaced. 
 	    if game.landed or game.condition=="docked":
 		return hit # Cheat if on a planet 
-	    ang = angle + 2.5*(random.random()-0.5)
+	    ang = angle + 2.5*(randreal()-0.5)
 	    temp = math.fabs(math.sin(ang))
 	    if math.fabs(math.cos(ang)) > temp:
 		temp = math.fabs(math.cos(ang))
@@ -1357,7 +1385,7 @@
 	    crmshp()
 	    shoved = True
 	elif iquad in (IHC, IHS): # Hit a commander 
-	    if random.random() <= 0.05:
+	    if withprob(0.05):
 		crmena(True, iquad, sector, w)
 		prout(_(" uses anti-photon device;"))
 		prout(_("   torpedo neutralized."))
@@ -1368,7 +1396,7 @@
 		if w == game.ks[ll]:
 		    break
 	    kp = math.fabs(game.kpower[ll])
-	    h1 = 700.0 + 100.0*random.random() - \
+	    h1 = 700.0 + randrange(100) - \
 		1000.0 * distance(w, incoming) * math.fabs(math.sin(bullseye-angle))
 	    h1 = math.fabs(h1)
 	    if kp < h1:
@@ -1382,7 +1410,7 @@
 		return None
 	    crmena(True, iquad, "sector", w)
 	    # If enemy damaged but not destroyed, try to displace 
-	    ang = angle + 2.5*(random.random()-0.5)
+	    ang = angle + 2.5*(randreal()-0.5)
 	    temp = math.fabs(math.sin(ang))
 	    if math.fabs(math.cos(ang)) > temp:
 		temp = math.fabs(math.cos(ang))
@@ -1449,14 +1477,14 @@
 	    prout(_("Celebratory rallies are being held on the Klingon homeworld."))
 	    return None
 	elif iquad == IHSTAR: # Hit a star 
-	    if random.random() > 0.10:
+	    if withprob(0.9):
 		nova(w)
-		return None
-	    crmena(True, IHSTAR, sector, w)
-	    prout(_(" unaffected by photon blast."))
+            else:
+                crmena(True, IHSTAR, sector, w)
+                prout(_(" unaffected by photon blast."))
 	    return None
 	elif iquad == IHQUEST: # Hit a thingy 
-	    if not (game.options & OPTION_THINGY) or random.random()>0.7:
+	    if not (game.options & OPTION_THINGY) or withprob(0.3):
 		skip(1)
 		prouts(_("AAAAIIIIEEEEEEEEAAAAAAAAUUUUUGGGGGHHHHHHHHHHHH!!!"))
 		skip(1)
@@ -1486,7 +1514,7 @@
 	    prout(_("***Torpedo absorbed by Tholian web."))
 	    return None
 	elif iquad == IHT:  # Hit a Tholian 
-	    h1 = 700.0 + 100.0*random.random() - \
+	    h1 = 700.0 + randrange(100) - \
 		1000.0 * distance(w, incoming) * math.fabs(math.sin(bullseye-angle))
 	    h1 = math.fabs(h1)
 	    if h1 >= 600:
@@ -1496,7 +1524,7 @@
 		return None
 	    skip(1)
 	    crmena(True, IHT, sector, w)
-	    if random.random() > 0.05:
+	    if withprob(0.05):
 		prout(_(" survives photon blast."))
 		return None
 	    prout(_(" disappears."))
@@ -1530,9 +1558,9 @@
     # critical-hit resolution 
     ktr=1
     # a critical hit occured 
-    if hit < (275.0-25.0*game.skill)*(1.0+0.5*random.random()):
+    if hit < (275.0-25.0*game.skill)*randreal(1.0, 1.5):
 	return
-    ncrit = 1.0 + hit/(500.0+100.0*random.random())
+    ncrit = int(1.0 + hit/(500.0+randreal(100)))
     proutn(_("***CRITICAL HIT--"))
     # Select devices and cause damage
     cdam = []
@@ -1543,7 +1571,7 @@
             if not (game.damage[j]<0.0 or (j==DSHUTTL and game.iscraft != "onship")):
                 break
 	cdam.append(j)
-	extradm = (hit*game.damfac)/(ncrit*(75.0+25.0*random.random()))
+	extradm = (hit*game.damfac)/(ncrit*randreal(75, 100))
 	game.damage[j] += extradm
 	if loop1 > 0:
             for loop2 in range(loop1):
@@ -1589,7 +1617,7 @@
     # set up partial hits if attack happens during shield status change 
     pfac = 1.0/game.inshld
     if game.shldchg:
-	chgfac = 0.25+0.5*random.random()
+	chgfac = 0.25 + randreal(0.5)
     skip(1)
     # message verbosity control 
     if game.skill <= SKILL_FAIR:
@@ -1598,7 +1626,7 @@
 	if game.kpower[loop] < 0:
 	    continue;	# too weak to attack 
 	# compute hit strength and diminish shield power 
-	r = random.random()
+	r = randreal()
 	# Increase chance of photon torpedos if docked or enemy energy low 
 	if game.condition == "docked":
 	    r *= 0.25
@@ -1619,7 +1647,7 @@
 	    if game.condition == "docked":
 		continue; # Don't waste the effort! 
 	    attempt = True; # Attempt to attack 
-	    dustfac = 0.8+0.05*random.random()
+	    dustfac = 0.8 + randreal(0.5)
 	    hit = game.kpower[loop]*math.pow(dustfac,game.kavgd[loop])
 	    game.kpower[loop] *= 0.75
 	else: # Enemy uses photon torpedo 
@@ -1631,7 +1659,7 @@
 		crmena(False, iquad, where, jay)
 	    attempt = True
 	    prout("  ")
-	    r = (random.random()+random.random())*0.5 -0.5
+	    r = (randreal()+randreal())*0.5 - 0.5
 	    r += 0.002*game.kpower[loop]*r
 	    hit = torpedo(course, r, jay, 1, 1)
 	    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
@@ -1701,7 +1729,7 @@
     prout(_("%d%%,   torpedoes left %d") % (percent, game.torps))
     # Check if anyone was hurt 
     if hitmax >= 200 or hittot >= 500:
-	icas= hittot*random.random()*0.015
+	icas = randrange(hittot * 0.015)
 	if icas >= 2:
 	    skip(1)
 	    prout(_("Mc Coy-  \"Sickbay to bridge.  We suffered %d casualties") % icas)
@@ -1879,23 +1907,23 @@
                 return
     game.ididit = True
     # Loop for moving <n> torpedoes 
-    for i in range(1, n+1):
+    for i in range(n):
 	if game.condition != "docked":
 	    game.torps -= 1
-	r = (random.random()+random.random())*0.5 -0.5
+	r = (randreal()+randreal())*0.5 -0.5
 	if math.fabs(r) >= 0.47:
 	    # misfire! 
-	    r = (random.random()+1.2) * r
-	    if n>1:
-		prouts(_("***TORPEDO NUMBER %d MISFIRES") % i)
+	    r *= randreal(1.2, 2.2)
+	    if n > 0:
+		prouts(_("***TORPEDO NUMBER %d MISFIRES") % (i+1))
 	    else:
 		prouts(_("***TORPEDO MISFIRES."))
 	    skip(1)
 	    if i < n:
 		prout(_("  Remainder of burst aborted."))
-	    if random.random() <= 0.2:
+	    if withprob(0.2):
 		prout(_("***Photon tubes damaged by misfire."))
-		game.damage[DPHOTON] = game.damfac*(1.0+2.0*random.random())
+		game.damage[DPHOTON] = game.damfac * randreal(1.0, 3.0)
 	    break
 	if game.shldup or game.condition == "docked":
 	    r *= 1.0 + 0.0001*game.shield
@@ -1908,15 +1936,15 @@
 def overheat(rpow):
     # check for phasers overheating 
     if rpow > 1500:
-	chekbrn = (rpow-1500.)*0.00038
-	if random.random() <= chekbrn:
+        checkburn = (rpow-1500.0)*0.00038
+        if withprob(checkburn):
 	    prout(_("Weapons officer Sulu-  \"Phasers overheated, sir.\""))
-	    game.damage[DPHASER] = game.damfac*(1.0 + random.random()) * (1.0+chekbrn)
+	    game.damage[DPHASER] = game.damfac* randreal(1.0, 2.0) * (1.0+checkburn)
 
 def checkshctrl(rpow):
     # check shield control 
     skip(1)
-    if random.random() < 0.998:
+    if withprob(0.998):
 	prout(_("Shields lowered."))
 	return False
     # Something bad has happened 
@@ -1934,7 +1962,7 @@
     prouts(_("Sulu-  \"Captain! Shield malfunction! Phaser fire contained!\""))
     skip(2)
     prout(_("Lt. Uhura-  \"Sir, all decks reporting damage.\""))
-    icas = hit*random.random()*0.012
+    icas = randrange(hit*0.012)
     skip(1)
     fry(0.8*hit)
     if icas:
@@ -1958,7 +1986,7 @@
         wham = hits[k]
 	if wham==0:
 	    continue
-	dustfac = 0.9 + 0.01*random.random()
+	dustfac = randreal(0.9, 1.0)
 	hit = wham*math.pow(dustfac,game.kdist[kk])
 	kpini = game.kpower[kk]
 	kp = math.fabs(kpini)
@@ -1990,9 +2018,8 @@
 		return
 	    kk -= 1; # don't do the increment 
 	else: # decide whether or not to emasculate klingon 
-	    if kpow > 0 and random.random() >= 0.9 and \
-		kpow <= ((0.4 + 0.4*random.random())*kpini):
-		prout(_("***Mr. Spock-  \"Captain, the vessel at Sector %s") % w)
+	    if kpow>0 and withprob(0.9) and kpow <= randreal(0.4, 0.8)*kpini:
+		prout(_("***Mr. Spock-  \"Captain, the vessel at Sector %s")%w)
 		prout(_("   has just lost its firepower.\""))
 		game.kpower[kk] = -kpow
         kk += 1
@@ -2087,7 +2114,7 @@
 	    chew()
 	    if not kz:
 		for i in range(game.nenhere):
-		    irec += math.fabs(game.kpower[i])/(PHASEFAC*math.pow(0.90,game.kdist[i]))*(1.01+0.05*random.random()) + 1.0
+		    irec += math.fabs(game.kpower[i])/(PHASEFAC*math.pow(0.90,game.kdist[i]))*randreal(1.01, 1.06) + 1.0
 	    kz=1
 	    proutn(_("%d units required. ") % irec)
 	    chew()
@@ -2124,7 +2151,7 @@
 		if powrem <= 0:
 		    continue
 		hits[i] = math.fabs(game.kpower[i])/(PHASEFAC*math.pow(0.90,game.kdist[i]))
-		over = (0.01 + 0.05*random.random())*hits[i]
+		over = randreal(1.01, 1.06) * hits[i]
 		temp = powrem
 		powrem -= hits[i] + over
 		if powrem <= 0 and temp < hits[i]:
@@ -2179,7 +2206,7 @@
 	    if key == IHEOL:
 		chew()
 		if itarg and k > kz:
-		    irec=(abs(game.kpower[k])/(PHASEFAC*math.pow(0.9,game.kdist[k]))) *	(1.01+0.05*random.random()) + 1.0
+		    irec=(abs(game.kpower[k])/(PHASEFAC*math.pow(0.9,game.kdist[k]))) *	randreal(1.01, 1.06) + 1.0
 		kz = k
 		proutn("(")
 		if not damaged(DCOMPTR):
@@ -2235,7 +2262,7 @@
     if ifast:
 	skip(1)
 	if no == 0:
-	    if random.random() >= 0.99:
+	    if withprob(0.99):
 		prout(_("Sulu-  \"Sir, the high-speed shield control has malfunctioned . . ."))
 		prouts(_("         CLICK   CLICK   POP  . . ."))
 		prout(_(" No response, sir!"))
@@ -2312,7 +2339,7 @@
         # Check to see if shuttle is aboard 
         if game.iscraft == "offship":
             skip(1)
-            if random.random() > 0.5:
+            if withprob(0.5):
                 prout(_("Galileo, left on the planet surface, is captured"))
                 prout(_("by aliens and made into a flying McDonald's."))
                 game.damage[DSHUTTL] = -10
@@ -2482,7 +2509,7 @@
             if game.state.remcom == 0:
                 unschedule(FTBEAM)
                 continue
-            i = random.randrange(game.state.remcom)
+            i = randrange(game.state.remcom)
             yank = distance(game.state.kcmdr[i], game.quadrant)
             if istract or game.condition == "docked" or yank == 0:
                 # Drats! Have to reschedule 
@@ -2517,7 +2544,7 @@
 		continue
 	    # commander + starbase combination found -- launch attack 
 	    game.battle = game.state.baseq[j]
-	    schedule(FCDBAS, 1.0+3.0*random.random())
+	    schedule(FCDBAS, randreal(1.0, 4.0))
 	    if game.isatb: # extra time if SC already attacking 
 		postpone(FCDBAS, scheduled(FSCDBAS)-game.state.date)
 	    game.future[FBATTAK].date = game.future[FCDBAS].date + expran(0.3*game.intime)
@@ -2728,7 +2755,7 @@
 	    return
 	temp = game.optime = delay
 	if game.nenhere:
-	    rtime = 1.0 + random.random()
+	    rtime = randreal(1.0, 2.0)
 	    if rtime < temp:
 		temp = rtime
 	    game.optime = temp
@@ -2761,7 +2788,7 @@
     # star goes nova 
     course = (0.0, 10.5, 12.0, 1.5, 9.0, 0.0, 3.0, 7.5, 6.0, 4.5)
     newc = coord(); scratch = coord()
-    if random.random() < 0.05:
+    if withprob(0.05):
 	# Wow! We've supernova'ed 
 	supernova(False, nov)
 	return
@@ -2793,7 +2820,7 @@
                     if iquad in (IHDOT, IHQUEST, IHBLANK, IHT, IHWEB):
 			break
 		    elif iquad == IHSTAR: # Affect another star 
-			if random.random() < 0.05:
+			if wthprob(0.05):
 			    # This star supernovas 
 			    scratch = supernova(False)
 			    return
@@ -2841,7 +2868,7 @@
 				game.shield = 0.0
 				game.shldup = False
 				prout(_("***Shields knocked out."))
-				game.damage[DSHIELD] += 0.005*game.damfac*random.random()*diff
+				game.damage[DSHIELD] += 0.005*game.damfac*randreal()*diff
 			else:
 			    game.energy -= 2000.0
 			if game.energy <= 0:
@@ -2925,7 +2952,7 @@
 		stars += game.state.galaxy[nq.x][nq.y].stars
 	if stars == 0:
 	    return # nothing to supernova exists 
-	num = random.randrange(stars) + 1
+	num = randrange(stars) + 1
 	for nq.x in range(GALSIZE):
 	    for nq.y in range(GALSIZE):
 		num -= game.state.galaxy[nq.x][nq.y].stars
@@ -2946,7 +2973,7 @@
     else:
 	ns = coord()
 	# we are in the quadrant! 
-	num = random.randrange(game.state.galaxy[nq.x][nq.y].stars) + 1
+	num = randrange(game.state.galaxy[nq.x][nq.y].stars) + 1
 	for ns.x in range(QUADSIZE):
 	    for ns.y in range(QUADSIZE):
 		if game.quad[ns.x][ns.y]==IHSTAR:
@@ -3063,7 +3090,7 @@
     prouts("                         3"); skip(1)
     prouts("                            2"); skip(1)
     prouts("                              1"); skip(1)
-    if random.random() < 0.15:
+    if withprob(0.15):
 	prouts(_("GOODBYE-CRUEL-WORLD"))
 	skip(1)
     kaboom()
@@ -3300,10 +3327,10 @@
     if (game.state.remkl + game.state.remcom + game.state.nscrem) != 0:
 	goodies = game.state.remres/game.inresor
 	baddies = (game.state.remkl + 2.0*game.state.remcom)/(game.inkling+2.0*game.incom)
-	if goodies/baddies >= 1.0+0.5*random.random():
+	if goodies/baddies >= randreal(1.0, 1.5):
 	    prout(_("As a result of your actions, a treaty with the Klingon"))
 	    prout(_("Empire has been signed. The terms of the treaty are"))
-	    if goodies/baddies >= 3.0+random.random():
+	    if goodies/baddies >= randreal(3.0):
 		prout(_("favorable to the Federation."))
 		skip(1)
 		prout(_("Congratulations!"))
@@ -3619,10 +3646,14 @@
 	curwnd.refresh()
     else:
 	if replayfp and not replayfp.closed:
-	    line = replayfp.readline()
-            if line == '':
-                prout("*** Replay finished")
-                replayfp.close()
+            while True:
+                line = replayfp.readline()
+                if line == '':
+                    prout("*** Replay finished")
+                    replayfp.close()
+                    break
+                elif line[0] != "#":
+                    break
 	else:
 	    line = raw_input("COMMAND> ")
     if logfp:
@@ -3955,7 +3986,7 @@
 			if game.damage[m]>0: 
 			    n += 1
 		    probf=math.pow(1.4,(game.energy+game.shield)/5000.0-1.0)*math.pow(1.3,1.0/(n+1)-1.0)
-		    if (game.options & OPTION_BLKHOLE) and random.random()>probf: 
+		    if (game.options & OPTION_BLKHOLE) and withprob(1-probf): 
 			timwrp()
 		    else: 
 			finish(FHOLE)
@@ -4267,13 +4298,14 @@
 		return
     # Entry WARPX 
     if game.warpfac > 6.0:
-	# Decide if engine damage will occur 
-	prob = game.dist*(6.0-game.warpfac)*(6.0-game.warpfac)/66.666666666
-	if prob > random.random():
+	# Decide if engine damage will occur
+        # ESR: Seems wrong. Probability of damage goes *down* with distance? 
+	prob = game.dist*square(6.0-game.warpfac)/66.666666666
+	if prob > randreal():
 	    blooey = True
-	    game.dist = random.random()*game.dist
+	    game.dist = randreal(game.dist)
 	# Decide if time warp will occur 
-	if 0.5*game.dist*math.pow(7.0,game.warpfac-10.0) > random.random():
+	if 0.5*game.dist*math.pow(7.0,game.warpfac-10.0) > randreal():
 	    twarp = True
 	if idebug and game.warpfac==10 and not twarp:
 	    blooey = False
@@ -4317,7 +4349,7 @@
     if twarp:
 	timwrp()
     if blooey:
-	game.damage[DWARPEN] = game.damfac*(3.0*random.random()+1.0)
+	game.damage[DWARPEN] = game.damfac * randreal(1.0, 4.0)
 	skip(1)
 	prout(_("Engineering to bridge--"))
 	prout(_("  Scott here.  The warp engines are damaged."))
@@ -4379,7 +4411,7 @@
 	    prout(_("But with the shields up it's hopeless."))
 	    finish(FPNOVA)
 	prouts(_("His desperate attempt to rescue you . . ."))
-	if random.random() <= 0.5:
+	if withprob(0.5):
 	    prout(_("fails."))
 	    finish(FPNOVA)
 	    return
@@ -4387,7 +4419,7 @@
 	if game.imine:
 	    game.imine = False
 	    proutn(_("The crystals mined were "))
-	    if random.random() <= 0.25:
+	    if withprob(0.25):
 		prout(_("lost."))
 	    else:
 		prout(_("saved."))
@@ -4422,16 +4454,16 @@
 	    prout(_("Warp engines damaged."))
 	    finish(FSNOVAED)
 	    return
-	game.warpfac = 6.0+2.0*random.random()
+	game.warpfac = randreal(6.0, 8.0)
 	game.wfacsq = game.warpfac * game.warpfac
 	prout(_("Warp factor set to %d") % int(game.warpfac))
 	power = 0.75*game.energy
 	game.dist = power/(game.warpfac*game.warpfac*game.warpfac*(game.shldup+1))
-	distreq = 1.4142+random.random()
+	distreq = randreal(math.sqrt(2))
 	if distreq < game.dist:
 	    game.dist = distreq
 	game.optime = 10.0*game.dist/game.wfacsq
-	game.direc = 12.0*random.random()	# How dumb! 
+	game.direc = randreal(12)	# How dumb! 
 	game.justin = False
 	game.inorbit = False
 	warp(True)
@@ -4452,7 +4484,7 @@
 def timwrp():
     # let's do the time warp again 
     prout(_("***TIME WARP ENTERED."))
-    if game.state.snap and random.random() < 0.5:
+    if game.state.snap and withprob(0.5):
 	# Go back in time 
 	prout(_("You are traveling backwards in time %d stardates.") %
 	      int(game.state.date-game.snapsht.date))
@@ -4493,7 +4525,7 @@
 	prout(_("Spock has reconstructed a correct star chart from memory"))
     else:
 	# Go forward in time 
-	game.optime = -0.5*game.intime*math.log(random.random())
+	game.optime = -0.5*game.intime*math.log(randreal())
 	prout(_("You are traveling forward in time %d stardates.") % int(game.optime))
 	# cheat to make sure no tractor beams occur during time warp 
 	postpone(FTBEAM, game.optime)
@@ -4623,12 +4655,10 @@
     prout(_(" dematerializes."))
     game.sector.x=0
     for m in range(1, 5+1):
-	ix = game.base.x+3.0*random.random()-1
-	iy = game.base.y+3.0*random.random()-1
+        w = game.base.scatter() 
 	if VALID_SECTOR(ix,iy) and game.quad[ix][iy]==IHDOT:
 	    # found one -- finish up 
-	    game.sector.x=ix
-	    game.sector.y=iy
+            game.sector = w
 	    break
     if not is_valid(game.sector):
 	prout(_("You have been lost in space..."))
@@ -4645,7 +4675,7 @@
 	game.quad[ix][iy]=(IHMATER0,IHMATER1,IHMATER2)[m-1]
 	textcolor(RED)
 	warble()
-	if random.random() > probf:
+	if randreal() > probf:
 	    break
 	prout(_("fails."))
 	curses.delay_output(500)
@@ -4738,7 +4768,7 @@
 	game.nprobes = 0 # No probes 
 	prout(_("You are captured by Klingons and released to"))
 	prout(_("the Federation in a prisoner-of-war exchange."))
-	nb = random.random()*game.state.rembase+1
+	nb = randrange(game.state.rembase)
 	# Set up quadrant and position FQ adjacient to base 
 	if not game.quadrant == game.state.baseq[nb]:
 	    game.quadrant = game.state.baseq[nb]
@@ -4748,8 +4778,7 @@
 	    # position next to base by trial and error 
 	    game.quad[game.sector.x][game.sector.y] = IHDOT
 	    for l in range(QUADSIZE):
-		game.sector.x = 3.0*random.random() - 1.0 + game.base.x
-		game.sector.y = 3.0*random.random() - 1.0 + game.base.y
+		game.sector = game.base.scatter()
 		if VALID_SECTOR(game.sector.x, game.sector.y) and \
                        game.quad[game.sector.x][game.sector.y] == IHDOT:
                     break
@@ -4835,12 +4864,12 @@
 	prout(_(" not adjacent to planet."))
 	skip(1)
 	return
-    game.optime = 0.02+0.03*random.random()
+    game.optime = randreal(0.02, 0.05)
     prout(_("Helmsman Sulu-  \"Entering standard orbit, Sir.\""))
     newcnd()
     if consumeTime():
 	return
-    game.height = (1400.0+7200.0*random.random())
+    game.height = randreal(1400, 8600)
     prout(_("Sulu-  \"Entered orbit at altitude %.2f kilometers.\"") % game.height)
     game.inorbit = True
     game.ididit = True
@@ -4945,7 +4974,7 @@
     skip(1)
     prouts("WWHOOOIIIIIRRRRREEEE.E.E.  .  .  .  .   .    .")
     skip(2)
-    if random.random() > 0.98:
+    if withprob(0.98):
 	prouts("BOOOIIIOOOIIOOOOIIIOIING . . .")
 	skip(2)
 	prout(_("Scotty-  \"Oh my God!  I've lost them.\""))
@@ -4986,7 +5015,7 @@
 	skip(1)
 	prout(_("there's no reason to mine more at this time."))
 	return
-    game.optime = (0.1+0.2*random.random())*(ord(game.iplnet.pclass)-ord("M"))
+    game.optime = randreal(0.1, 0.3)*(ord(game.iplnet.pclass)-ord("L"))
     if consumeTime():
 	return
     prout(_("Mining operation complete."))
@@ -5021,7 +5050,7 @@
     skip(1)
     prouts(_("Scotty-  \"Keep your fingers crossed, Sir!\""))
     skip(1)
-    if random.random() <= game.cryprob:
+    if with(game.cryprob):
 	prouts(_("  \"Activating now! - - No good!  It's***"))
 	skip(2)
 	prouts(_("***RED ALERT!  RED A*L********************************"))
@@ -5031,7 +5060,7 @@
 	skip(1)
 	kaboom()
 	return
-    game.energy += 5000.0*(1.0 + 0.9*random.random())
+    game.energy += randreal(5000.0, 5500.0)
     prouts(_("  \"Activating now! - - "))
     prout(_("The instruments"))
     prout(_("   are going crazy, but I think it's"))
@@ -5143,7 +5172,6 @@
 
 def deathray():
     # use the big zapper 
-    r = random.random()
     game.ididit = False
     skip(1)
     chew()
@@ -5175,9 +5203,10 @@
     skip(1)
     prouts(_("WHIRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"))
     skip(1)
-    dprob = .30
+    dprob = 0.30
     if game.options & OPTION_PLAIN:
-	dprob = .5
+	dprob = 0.5
+    r = randreal()
     if r > dprob:
 	prouts(_("Sulu- \"Captain!  It's working!\""))
 	skip(2)
@@ -5188,14 +5217,14 @@
 	    finish(FWON)    
 	if (game.options & OPTION_PLAIN) == 0:
 	    prout(_("Spock-  \"Captain, I believe the `Experimental Death Ray'"))
-	    if random.random() <= 0.05:
+	    if withprob(0.05):
 		prout(_("   is still operational.\""))
 	    else:
 		prout(_("   has been rendered nonfunctional.\""))
 		game.damage[DDRAY] = 39.95
 	return
-    r = random.random()	# Pick failure method 
-    if r <= .30:
+    r = randreal()	# Pick failure method 
+    if r <= 0.30:
 	prouts(_("Sulu- \"Captain!  It's working!\""))
 	skip(1)
 	prouts(_("***RED ALERT!  RED ALERT!"))
@@ -5209,7 +5238,7 @@
 	skip(1)
 	kaboom()
 	return
-    if r <= .55:
+    if r <= 0.55:
 	prouts(_("Sulu- \"Captain!  Yagabandaghangrapl, brachriigringlanbla!\""))
 	skip(1)
 	prout(_("Lt. Uhura-  \"Graaeek!  Graaeek!\""))
@@ -5806,14 +5835,14 @@
     game.quadrant = randplace(GALSIZE)
     game.sector = randplace(QUADSIZE)
     game.torps = game.intorps = 10
-    game.nprobes = int(3.0*random.random() + 2.0)	# Give them 2-4 of these
+    game.nprobes = randrange(2, 5)
     game.warpfac = 5.0
     game.wfacsq = game.warpfac * game.warpfac
     for i in range(NDEVICES): 
 	game.damage[i] = 0.0
     # Set up assorted game parameters
     game.battle = coord()
-    game.state.date = game.indate = 100.0*int(31.0*random.random()+20.0)
+    game.state.date = game.indate = 100.0 * randreal(20, 51)
     game.nkinks = game.nhelp = game.casual = game.abandoned = 0
     game.iscate = game.resting = game.imine = game.icrystl = game.icraft = False
     game.isatb = game.state.nplankl = 0
@@ -5835,7 +5864,7 @@
     # Initialize times for extraneous events
     schedule(FSNOVA, expran(0.5 * game.intime))
     schedule(FTBEAM, expran(1.5 * (game.intime / game.state.remcom)))
-    schedule(FSNAP, 1.0 + random.random()) # Force an early snapshot
+    schedule(FSNAP, randreal(1.0, 2.0)) # Force an early snapshot
     schedule(FBATTAK, expran(0.3*game.intime))
     unschedule(FCDBAS)
     if game.state.nscrem:
@@ -5856,7 +5885,7 @@
     game.instar = 0
     for i in range(GALSIZE):
 	for j in range(GALSIZE):
-	    k = int(random.random()*9.0 + 1.0)
+	    k = randrange(1, QUADSIZE**2/10+1)
 	    game.instar += k
 	    game.state.galaxy[i][j].stars = k
     # Locate star bases in galaxy
@@ -5872,7 +5901,7 @@
             for j in range(1, i):
 		# Improved placement algorithm to spread out bases
 		distq = w.distance(game.state.baseq[j])
-		if distq < 6.0*(BASEMAX+1-game.inbase) and random.random() < 0.75:
+		if distq < 6.0*(BASEMAX+1-game.inbase) and withprob(0.75):
 		    contflag = True
 		    if idebug:
 			prout("=== Abandoning base #%d at %s" % (i, w))
@@ -5891,7 +5920,7 @@
     if klumper > MAXKLQUAD: 
 	klumper = MAXKLQUAD
     while True:
-	r = random.random()
+	r = randreal()
 	klump = (1.0 - r*r)*klumper
 	if klump > krem:
 	    klump = krem
@@ -5908,7 +5937,7 @@
     for i in range(1, game.incom+1):
         while True:
             w = randplace(GALSIZE)
-	    if (game.state.galaxy[w.x][w.y].klingons or random.random()>=0.75) and \
+	    if (game.state.galaxy[w.x][w.y].klingons or withprob(0.25)) and \
 		   not game.state.galaxy[w.x][w.y].supernova and \
 		   game.state.galaxy[w.x][w.y].klingons <= MAXKLQUAD-1 and \
                    not w in game.state.kcmdr[:i]:
@@ -5931,8 +5960,8 @@
             new.name = systnames[i]
 	    new.inhabited = True
 	else:
-	    new.pclass = ("M", "N", "O")[random.randint(0, 2)]
-            if random.random()*1.5:		# 1 in 3 chance of crystals
+	    new.pclass = ("M", "N", "O")[randrange(0, 3)]
+            if withprob(0.33):
                 new.crystals = "present"
 	    new.known = "unknown"
 	    new.inhabited = False
@@ -6013,6 +6042,8 @@
 		continue # We don't want a blank entry
 	    game.tourn = int(round(aaitem))
 	    random.seed(aaitem)
+            if logfp:
+                logfp.write("# random.seed(%d)\n" % aaitem)
 	    break
         if isit("saved") or isit("frozen"):
 	    if thaw():
@@ -6081,19 +6112,19 @@
 
     # Use parameters to generate initial values of things
     game.damfac = 0.5 * game.skill
-    game.state.rembase = random.randint(BASEMIN, BASEMAX)
+    game.state.rembase = randrange(BASEMIN, BASEMAX+1)
     game.inbase = game.state.rembase
     game.inplan = 0
     if game.options & OPTION_PLANETS:
-	game.inplan += int((MAXUNINHAB/2) + (MAXUNINHAB/2+1)*random.random())
+	game.inplan += randrange(MAXUNINHAB/2, MAXUNINHAB+1)
     if game.options & OPTION_WORLDS:
 	game.inplan += int(NINHAB)
-    game.state.nromrem = game.inrom = int((2.0+random.random())*game.skill)
+    game.state.nromrem = game.inrom = randrange(2 *game.skill)
     game.state.nscrem = game.inscom = (game.skill > SKILL_FAIR)
     game.state.remtime = 7.0 * game.length
     game.intime = game.state.remtime
-    game.state.remkl = game.inkling = 2.0*game.intime*((game.skill+1 - 2*random.random())*game.skill*0.1+.15)
-    game.incom = int(game.skill + 0.0625*game.inkling*random.random())
+    game.state.remkl = game.inkling = 2.0*game.intime*((game.skill+1 - 2*randreal())*game.skill*0.1+.15)
+    game.incom = int(game.skill + 0.0625*game.inkling*randreal())
     game.state.remcom = min(10, game.incom)
     game.incom = game.state.remcom
     game.state.remres = (game.inkling+4*game.incom)*game.intime
@@ -6128,7 +6159,7 @@
     pi = dropin(IHK)
     game.ks[i] = pi
     game.kdist[i] = game.kavgd[i] = distance(game.sector, pi)
-    game.kpower[i] = random.random()*150.0 +300.0 +25.0*game.skill
+    game.kpower[i] = randreal(300, 450) + 25.0*game.skill
     return pi
 
 def newqad(shutup):
@@ -6173,12 +6204,12 @@
 			
 	if i <= game.state.remcom:
 	    game.quad[w.x][w.y] = IHC
-	    game.kpower[game.klhere] = 950.0+400.0*random.random()+50.0*game.skill
+	    game.kpower[game.klhere] = randreal(950, 1350) + 50.0*game.skill
 	    game.comhere = True
 	# If we need a super-commander, promote a Klingon
 	if game.quadrant == game.state.kscmdr:
 	    game.quad[game.ks[0].x][game.ks[0].y] = IHS
-	    game.kpower[1] = 1175.0 + 400.0*random.random() + 125.0*game.skill
+	    game.kpower[0] = randreal(1175.0,  1575.0) + 125.0*game.skill
 	    game.iscate = (game.state.remkl > 1)
 	    game.ishere = True
     # Put in Romulans if needed
@@ -6186,7 +6217,7 @@
 	w = dropin(IHR)
 	game.ks[i] = w
 	game.kdist[i] = game.kavgd[i] = distance(game.sector, w)
-	game.kpower[i] = random.random()*400.0 + 450.0 + 50.0*game.skill
+	game.kpower[i] = randreal(400.0, 850.0) + 50.0*game.skill
     # If quadrant needs a starbase, put it in
     if q.starbase:
 	game.base = dropin(IHB)
@@ -6223,20 +6254,20 @@
 	    game.ks[game.nenhere] = w
 	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] = \
 		distance(game.sector, w)
-	    game.kpower[game.nenhere] = random.random()*6000.0 +500.0 +250.0*game.skill
+	    game.kpower[game.nenhere] = randreal(6000,6500.0)+250.0*game.skill
 	    if not damaged(DSRSENS):
 		skip(1)
 		prout(_("Mr. Spock- \"Captain, this is most unusual."))
 		prout(_("    Please examine your short-range scan.\""))
     # Decide if quadrant needs a Tholian; lighten up if skill is low 
     if game.options & OPTION_THOLIAN:
-	if (game.skill < SKILL_GOOD and random.random() <= 0.02) or \
-	    (game.skill == SKILL_GOOD and random.random() <= 0.05) or \
-            (game.skill > SKILL_GOOD and random.random() <= 0.08):
+	if (game.skill < SKILL_GOOD and withprob(0.02)) or \
+	    (game.skill == SKILL_GOOD and withprob(0.05)) or \
+            (game.skill > SKILL_GOOD and withprob(0.08)):
             game.tholian = coord()
             while True:
-		game.tholian.x = random.choice((0, QUADSIZE-1))
-		game.tholian.y = random.choice((0, QUADSIZE-1))
+		game.tholian.x = withprob(0.5) * QUADSIZE
+		game.tholian.y = withprob(0.5) * QUADSIZE
                 if game.quad[game.tholian.x][game.tholian.y] == IHDOT:
                     break
 	    game.quad[game.tholian.x][game.tholian.y] = IHT
@@ -6244,7 +6275,7 @@
 	    game.ks[game.nenhere] = game.tholian
 	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] = \
 		distance(game.sector, game.tholian)
-	    game.kpower[game.nenhere] = random.random()*400.0 +100.0 +25.0*game.skill
+	    game.kpower[game.nenhere] = randrange(100, 500) + 25.0*game.skill
 	    # Reserve unoccupied corners 
 	    if game.quad[0][0]==IHDOT:
 		game.quad[0][0] = 'X'
@@ -6257,7 +6288,7 @@
     sortklings()
     # Put in a few black holes
     for i in range(1, 3+1):
-	if random.random() > 0.5: 
+	if withprob(0.5): 
 	    dropin(IHBLANK)
     # Take out X's in corners if Tholian present
     if game.tholian:
@@ -6311,7 +6342,7 @@
     else:
         game.passwd = ""
         for i in range(3):
-	    game.passwd += chr(97+int(random.random()*25))
+	    game.passwd += chr(ord('a')+randrange(26))
 
 # Code from sst.c begins here
 
@@ -6632,13 +6663,13 @@
     skip(1)
 
 def expran(avrage):
-    return -avrage*math.log(1e-7 + random.random())
+    return -avrage*math.log(1e-7 + randreal())
 
 def randplace(size):
     # choose a random location  
     w = coord()
-    w.x = random.randint(0, size-1) 
-    w.y = random.randint(0, size-1)
+    w.x = randrange(size) 
+    w.y = randrange(size)
     return w
 
 def chew():
@@ -6822,7 +6853,7 @@
 		raise SysExit, 1
             line = replayfp.readline().strip()
             try:
-                (key, seed) = line.split()
+                (leader, key, seed) = line.split()
                 seed = int(seed)
                 sys.stderr.write("sst2k: seed set to %d\n" % seed)
             except ValueError:
@@ -6845,7 +6876,7 @@
         sys.stderr.write("sst: warning, can't open logfile\n")
     if logfp:
 	#setlinebuf(logfp)
-	logfp.write("seed %d\n" % (seed))
+	logfp.write("# seed %d\n" % (seed))
     random.seed(seed)
     iostart()
     if arguments:



From esr at mail.berlios.de  Fri Oct  6 12:21:24 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 6 Oct 2006 12:21:24 +0200
Subject: [Sst-commit-watch] r685 - trunk/src
Message-ID: <200610061021.k96ALOno018653@sheep.berlios.de>

Author: esr
Date: 2006-10-06 12:21:23 +0200 (Fri, 06 Oct 2006)
New Revision: 685

Modified:
   trunk/src/sst.py
Log:
Correct off-by-one bug in placement of Tholian.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-06 09:46:40 UTC (rev 684)
+++ trunk/src/sst.py	2006-10-06 10:21:23 UTC (rev 685)
@@ -575,12 +575,12 @@
 
 def withprob(p):
     v = random.random()
-    logfp.write("# withprob(%s) -> %f (%s) at %s\n" % (p, v, v<p, traceback.extract_stack()[1][1:]))
+    logfp.write("# withprob(%s) -> %f (%s) at %s\n" % (p, v, v<p, traceback.extract_stack()[-2][1:]))
     return v < p
 
 def randrange(*args):
     v = random.randrange(*args)
-    logfp.write("# randrange%s -> %s at %s\n" % (args, v, traceback.extract_stack()[1][1:]))
+    logfp.write("# randrange%s -> %s at %s\n" % (args, v, traceback.extract_stack()[-2][1:]))
     return v
 
 def randreal(*args):
@@ -589,7 +589,7 @@
         v *= args[0] 		# returns from [0, a1)
     elif len(args) == 2:
         v = args[0] + v*args[1]	# returns from [a1, a2)
-    logfp.write("# randreal%s -> %s at %s\n" % (args, v, traceback.extract_stack()[1][1:]))
+    logfp.write("# randreal%s -> %s at %s\n" % (args, v, traceback.extract_stack()[-2][1:]))
     return v
 
 # Code from ai.c begins here
@@ -6266,8 +6266,8 @@
             (game.skill > SKILL_GOOD and withprob(0.08)):
             game.tholian = coord()
             while True:
-		game.tholian.x = withprob(0.5) * QUADSIZE
-		game.tholian.y = withprob(0.5) * QUADSIZE
+		game.tholian.x = withprob(0.5) * (QUADSIZE-1)
+		game.tholian.y = withprob(0.5) * (QUADSIZE-1)
                 if game.quad[game.tholian.x][game.tholian.y] == IHDOT:
                     break
 	    game.quad[game.tholian.x][game.tholian.y] = IHT
@@ -6850,12 +6850,12 @@
                 replayfp = open(val, "r")
             except IOError:
 		sys.stderr.write("sst: can't open replay file %s\n" % val)
-		raise SysExit, 1
+		raise SystemExit, 1
             line = replayfp.readline().strip()
             try:
                 (leader, key, seed) = line.split()
-                seed = int(seed)
-                sys.stderr.write("sst2k: seed set to %d\n" % seed)
+                seed = eval(seed)
+                sys.stderr.write("sst2k: seed set to %s\n" % seed)
             except ValueError:
 		sys.stderr.write("sst: replay file %s is ill-formed\n"% val)
 		os.exit(1)
@@ -6875,8 +6875,7 @@
     except IOError:
         sys.stderr.write("sst: warning, can't open logfile\n")
     if logfp:
-	#setlinebuf(logfp)
-	logfp.write("# seed %d\n" % (seed))
+	logfp.write("# seed %s\n" % seed)
     random.seed(seed)
     iostart()
     if arguments:
@@ -6907,4 +6906,4 @@
 	    break
     skip(1)
     prout(_("May the Great Bird of the Galaxy roost upon your home planet."))
-    raise SysExit, 0
+    raise SystemExit, 0



From esr at mail.berlios.de  Fri Oct  6 12:54:06 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 6 Oct 2006 12:54:06 +0200
Subject: [Sst-commit-watch] r686 - trunk/src
Message-ID: <200610061054.k96As6Q6002112@sheep.berlios.de>

Author: esr
Date: 2006-10-06 12:54:05 +0200 (Fri, 06 Oct 2006)
New Revision: 686

Modified:
   trunk/src/sst.py
Log:
Replay works now, at least in plain-tty mode


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-06 10:21:23 UTC (rev 685)
+++ trunk/src/sst.py	2006-10-06 10:54:05 UTC (rev 686)
@@ -575,12 +575,12 @@
 
 def withprob(p):
     v = random.random()
-    logfp.write("# withprob(%s) -> %f (%s) at %s\n" % (p, v, v<p, traceback.extract_stack()[-2][1:]))
+    #logfp.write("# withprob(%s) -> %f (%s) at %s\n" % (p, v, v<p, traceback.extract_stack()[-2][1:]))
     return v < p
 
 def randrange(*args):
     v = random.randrange(*args)
-    logfp.write("# randrange%s -> %s at %s\n" % (args, v, traceback.extract_stack()[-2][1:]))
+    #logfp.write("# randrange%s -> %s at %s\n" % (args, v, traceback.extract_stack()[-2][1:]))
     return v
 
 def randreal(*args):
@@ -589,7 +589,7 @@
         v *= args[0] 		# returns from [0, a1)
     elif len(args) == 2:
         v = args[0] + v*args[1]	# returns from [a1, a2)
-    logfp.write("# randreal%s -> %s at %s\n" % (args, v, traceback.extract_stack()[-2][1:]))
+    #logfp.write("# randreal%s -> %s at %s\n" % (args, v, traceback.extract_stack()[-2][1:]))
     return v
 
 # Code from ai.c begins here
@@ -6842,7 +6842,7 @@
     #	game.options |= OPTION_CURSES | OPTION_SHOWME
     #    else:
     game.options |= OPTION_TTY
-    seed = time.time()
+    seed = int(time.time())
     (options, arguments) = getopt.getopt(sys.argv[1:], "r:tx")
     for (switch, val) in options:
         if switch == '-r':



From esr at mail.berlios.de  Fri Oct  6 13:00:27 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 6 Oct 2006 13:00:27 +0200
Subject: [Sst-commit-watch] r687 - trunk/src
Message-ID: <200610061100.k96B0RQG007704@sheep.berlios.de>

Author: esr
Date: 2006-10-06 13:00:25 +0200 (Fri, 06 Oct 2006)
New Revision: 687

Modified:
   trunk/src/sst.py
Log:
Replay facility now captures command-line options.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-06 10:54:05 UTC (rev 686)
+++ trunk/src/sst.py	2006-10-06 11:00:25 UTC (rev 687)
@@ -6851,11 +6851,13 @@
             except IOError:
 		sys.stderr.write("sst: can't open replay file %s\n" % val)
 		raise SystemExit, 1
-            line = replayfp.readline().strip()
             try:
+                line = replayfp.readline().strip()
                 (leader, key, seed) = line.split()
                 seed = eval(seed)
                 sys.stderr.write("sst2k: seed set to %s\n" % seed)
+                line = replayfp.readline().strip()
+                arguments += line.split()[2:]
             except ValueError:
 		sys.stderr.write("sst: replay file %s is ill-formed\n"% val)
 		os.exit(1)
@@ -6876,6 +6878,7 @@
         sys.stderr.write("sst: warning, can't open logfile\n")
     if logfp:
 	logfp.write("# seed %s\n" % seed)
+	logfp.write("# options %s\n" % " ".join(arguments))
     random.seed(seed)
     iostart()
     if arguments:



From esr at mail.berlios.de  Fri Oct  6 14:01:31 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 6 Oct 2006 14:01:31 +0200
Subject: [Sst-commit-watch] r688 - trunk/src
Message-ID: <200610061201.k96C1VLT001376@sheep.berlios.de>

Author: esr
Date: 2006-10-06 14:01:30 +0200 (Fri, 06 Oct 2006)
New Revision: 688

Modified:
   trunk/src/sst.py
Log:
Properly stringify enum value of "sector".  Move the command prompt
back to the right place.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-06 11:00:25 UTC (rev 687)
+++ trunk/src/sst.py	2006-10-06 12:01:30 UTC (rev 688)
@@ -1285,7 +1285,7 @@
         proutn(_(" rammed by "))
     else:
         proutn(_(" rams "))
-    crmena(False, ienm, sector, w)
+    crmena(False, ienm, "sector", w)
     if ibumpd:
 	proutn(_(" (original position)"))
     skip(1)
@@ -1386,7 +1386,7 @@
 	    shoved = True
 	elif iquad in (IHC, IHS): # Hit a commander 
 	    if withprob(0.05):
-		crmena(True, iquad, sector, w)
+		crmena(True, iquad, "sector", w)
 		prout(_(" uses anti-photon device;"))
 		prout(_("   torpedo neutralized."))
 		return None
@@ -1449,7 +1449,7 @@
 	    newcnd()
 	    return None
 	elif iquad == IHP: # Hit a planet 
-	    crmena(True, iquad, sector, w)
+	    crmena(True, iquad, "sector", w)
 	    prout(_(" destroyed."))
 	    game.state.nplankl += 1
 	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = None
@@ -1462,7 +1462,7 @@
 		finish(FDPLANET)
 	    return None
 	elif iquad == IHW: # Hit an inhabited world -- very bad! 
-	    crmena(True, iquad, sector, w)
+	    crmena(True, iquad, "sector", w)
 	    prout(_(" destroyed."))
 	    game.state.nworldkl += 1
 	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = None
@@ -1480,7 +1480,7 @@
 	    if withprob(0.9):
 		nova(w)
             else:
-                crmena(True, IHSTAR, sector, w)
+                crmena(True, IHSTAR, "sector", w)
                 prout(_(" unaffected by photon blast."))
 	    return None
 	elif iquad == IHQUEST: # Hit a thingy 
@@ -1506,7 +1506,7 @@
 	    return None
 	elif iquad == IHBLANK: # Black hole 
 	    skip(1)
-	    crmena(True, IHBLANK, sector, w)
+	    crmena(True, IHBLANK, "sector", w)
 	    prout(_(" swallows torpedo."))
 	    return None
 	elif iquad == IHWEB: # hit the web 
@@ -1523,7 +1523,7 @@
 		deadkl(w, iquad, w)
 		return None
 	    skip(1)
-	    crmena(True, IHT, sector, w)
+	    crmena(True, IHT, "sector", w)
 	    if withprob(0.05):
 		prout(_(" survives photon blast."))
 		return None
@@ -1536,7 +1536,7 @@
         else: # Problem!
 	    skip(1)
 	    proutn("Don't know how to handle torpedo collision with ")
-	    crmena(True, iquad, sector, w)
+	    crmena(True, iquad, "sector", w)
 	    skip(1)
 	    return None
 	break
@@ -1745,7 +1745,7 @@
 def deadkl(w, type, mv):
     # kill a Klingon, Tholian, Romulan, or Thingy 
     # Added mv to allow enemy to "move" before dying 
-    crmena(True, type, sector, mv)
+    crmena(True, type, "sector", mv)
     # Decide what kind of enemy it is and update appropriately 
     if type == IHR:
 	# chalk up a Romulan 
@@ -2215,7 +2215,7 @@
 		    proutn("??")
 		proutn(")  ")
 		proutn(_("units to fire at "))
-		crmena(False, ienm, sector, aim)
+		crmena(False, ienm, "sector", aim)
 		proutn("-  ")
 		key = scan()
 	    if key == IHALPHA and isit("no"):
@@ -2794,7 +2794,7 @@
 	return
     # handle initial nova 
     game.quad[nov.x][nov.y] = IHDOT
-    crmena(False, IHSTAR, sector, nov)
+    crmena(False, IHSTAR, "sector", nov)
     prout(_(" novas."))
     game.state.galaxy[game.quadrant.x][game.quadrant.y].stars -= 1
     game.state.starkl += 1
@@ -2829,13 +2829,13 @@
 			hits[top2][2]=scratch.y
 			game.state.galaxy[game.quadrant.x][game.quadrant.y].stars -= 1
 			game.state.starkl += 1
-			crmena(True, IHSTAR, sector, scratch)
+			crmena(True, IHSTAR, "sector", scratch)
 			prout(_(" novas."))
 			game.quad[scratch.x][scratch.y] = IHDOT
 		    elif iquad == IHP: # Destroy planet 
 			game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = None
 			game.state.nplankl += 1
-			crmena(True, IHP, sector, scratch)
+			crmena(True, IHP, "sector", scratch)
 			prout(_(" destroyed."))
 			game.iplnet.pclass = "destroyed"
 			game.iplnet = None
@@ -2854,7 +2854,7 @@
 			invalidate(game.base)
 			game.state.basekl += 1
 			newcnd()
-			crmena(True, IHB, sector, scratch)
+			crmena(True, IHB, "sector", scratch)
 			prout(_(" destroyed."))
 			game.quad[scratch.x][scratch.y] = IHDOT
 		    elif iquad in (IHE, IHF): # Buffet ship 
@@ -2890,7 +2890,7 @@
 			    break
 			newc.x = scratch.x + scratch.x - hits[mm][1]
 			newc.y = scratch.y + scratch.y - hits[mm][2]
-			crmena(True, iquad, sector, scratch)
+			crmena(True, iquad, "sector", scratch)
 			proutn(_(" damaged"))
 			if not VALID_SECTOR(newc.x, newc.y):
 			    # can't leave quadrant 
@@ -2899,7 +2899,7 @@
 			iquad1 = game.quad[newc.x][newc.y]
 			if iquad1 == IHBLANK:
 			    proutn(_(", blasted into "))
-			    crmena(False, IHBLANK, sector, newc)
+			    crmena(False, IHBLANK, "sector", newc)
 			    skip(1)
 			    deadkl(scratch, iquad, newc)
 			    break
@@ -3655,7 +3655,7 @@
                 elif line[0] != "#":
                     break
 	else:
-	    line = raw_input("COMMAND> ")
+	    line = raw_input()
     if logfp:
 	logfp.write(line + "\n")
     return line
@@ -6475,6 +6475,7 @@
 	    chew()
 	    setwnd(prompt_window)
 	    clrscr()
+	    proutn("COMMAND> ")
 	    if scan() == IHEOL:
 		if game.options & OPTION_CURSES:
 		    makechart()



From esr at mail.berlios.de  Fri Oct  6 14:30:30 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 6 Oct 2006 14:30:30 +0200
Subject: [Sst-commit-watch] r689 - trunk/src
Message-ID: <200610061230.k96CUUNf004965@sheep.berlios.de>

Author: esr
Date: 2006-10-06 14:30:27 +0200 (Fri, 06 Oct 2006)
New Revision: 689

Modified:
   trunk/src/sst.py
Log:
Bug fix, keyboard interrupt handling, automatic LRSCAN before CHART.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-06 12:01:30 UTC (rev 688)
+++ trunk/src/sst.py	2006-10-06 12:30:27 UTC (rev 689)
@@ -172,6 +172,13 @@
 Also, the nav subsystem (enabling automatic course
 setting) can be damaged separately from the main computer (which
 handles weapons targeting, ETA calculation, and self-destruct).
+
+After these features were added, I translated this into Python and added
+more:
+
+9. A long-range scan is done silently whenever you call CHART; thus
+the LRSCAN command is no longer needed.  (Controlled by OPTION_PLAIN
+and turned off if game type is "plain" or "almy".)
 """
 import os,sys,math,curses,time,atexit,readline,cPickle,random,getopt,copy
 
@@ -748,9 +755,9 @@
                 motion = game.skill
     # calculate preferred number of steps 
     if motion < 0:
-        msteps = -motion
+        nsteps = -motion
     else:
-        msteps = motion
+        nsteps = motion
     if motion > 0 and nsteps > mdist:
 	nsteps = mdist; # don't overshoot 
     if nsteps > QUADSIZE:
@@ -3748,7 +3755,7 @@
 	    setwnd(lrscan_window)
 	    lrscan_window.clear()
 	    lrscan_window.move(0, 0)
-	    lrscan()
+	    lrscan(silent=False)
 
 def put_srscan_sym(w, sym):
     "Emit symbol for short-range scan."
@@ -5363,30 +5370,34 @@
                   (i, (_("s"), "")[i==1]))
     skip(1)
 	
-def lrscan():
+def lrscan(silent):
     # long-range sensor scan 
     if damaged(DLRSENS):
 	# Now allow base's sensors if docked 
 	if game.condition != "docked":
-	    prout(_("LONG-RANGE SENSORS DAMAGED."))
+            if not silent:
+                prout(_("LONG-RANGE SENSORS DAMAGED."))
 	    return
-	prout(_("Starbase's long-range scan"))
-    else:
+        if not silent:
+            prout(_("Starbase's long-range scan"))
+    elif not silent:
 	prout(_("Long-range scan"))
     for x in range(game.quadrant.x-1, game.quadrant.x+2):
-        proutn(" ")
+        if not silent:
+            proutn(" ")
         for y in range(game.quadrant.y-1, game.quadrant.y+2):
 	    if not VALID_QUADRANT(x, y):
-		proutn("  -1")
+                if not silent:
+                    proutn("  -1")
 	    else:
 		if not damaged(DRADIO):
 		    game.state.galaxy[x][y].charted = True
 		game.state.chart[x][y].klingons = game.state.galaxy[x][y].klingons
 		game.state.chart[x][y].starbase = game.state.galaxy[x][y].starbase
 		game.state.chart[x][y].stars = game.state.galaxy[x][y].stars
-		if game.state.galaxy[x][y].supernova: 
+		if not silent and game.state.galaxy[x][y].supernova: 
 		    proutn(" ***")
-		else:
+		elif not silent:
 		    proutn(" %3d" % (game.state.chart[x][y].klingons*100 + game.state.chart[x][y].starbase * 10 + game.state.chart[x][y].stars))
 	prout(" ")
 
@@ -5420,6 +5431,8 @@
 def chart():
     # display the star chart  
     chew()
+    if not (game.options & (OPTION_PLAIN | OPTION_ALMY)):
+        lrscan(silent=True)
     if not damaged(DRADIO):
 	rechart()
     if game.lastchart < game.state.date and game.condition == "docked":
@@ -6501,7 +6514,7 @@
 	elif cmd == "REQUEST":		# status request 
 	    request()
 	elif cmd == "LRSCAN":		# long range scan
-	    lrscan()
+	    lrscan(silent=False)
 	elif cmd == "PHASERS":		# phasers
 	    phasers()
 	    if game.ididit:
@@ -6830,84 +6843,89 @@
 	atover(True)
 
 if __name__ == '__main__':
-    global line, thing, game, idebug, iqengry
-    game = citem = aaitem = inqueue = None
-    line = ''
-    thing = coord()
-    iqengry = False
-    game = gamestate()
-    idebug = 0
-    game.options = OPTION_ALL &~ (OPTION_IOMODES | OPTION_SHOWME | OPTION_PLAIN | OPTION_ALMY)
-    # Disable curses mode until the game logic is working.
-    #    if os.getenv("TERM"):
-    #	game.options |= OPTION_CURSES | OPTION_SHOWME
-    #    else:
-    game.options |= OPTION_TTY
-    seed = int(time.time())
-    (options, arguments) = getopt.getopt(sys.argv[1:], "r:tx")
-    for (switch, val) in options:
-        if switch == '-r':
-            try:
-                replayfp = open(val, "r")
-            except IOError:
-		sys.stderr.write("sst: can't open replay file %s\n" % val)
-		raise SystemExit, 1
-            try:
-                line = replayfp.readline().strip()
-                (leader, key, seed) = line.split()
-                seed = eval(seed)
-                sys.stderr.write("sst2k: seed set to %s\n" % seed)
-                line = replayfp.readline().strip()
-                arguments += line.split()[2:]
-            except ValueError:
-		sys.stderr.write("sst: replay file %s is ill-formed\n"% val)
-		os.exit(1)
-	    game.options |= OPTION_TTY
-	    game.options &=~ OPTION_CURSES
-	elif switch == '-t':
-	    game.options |= OPTION_TTY
-	    game.options &=~ OPTION_CURSES
-	elif switch == '-x':
-	    idebug = True
-	else:
-	    sys.stderr.write("usage: sst [-t] [-x] [startcommand...].\n")
-	    os.exit(0)
-    # where to save the input in case of bugs
     try:
-        logfp = open("/usr/tmp/sst-input.log", "w")
-    except IOError:
-        sys.stderr.write("sst: warning, can't open logfile\n")
-    if logfp:
-	logfp.write("# seed %s\n" % seed)
-	logfp.write("# options %s\n" % " ".join(arguments))
-    random.seed(seed)
-    iostart()
-    if arguments:
-        inqueue = arguments
-    else:
-        inqueue = None
-    while True: # Play a game 
-	setwnd(fullscreen_window)
-	clrscr()
-	prelim()
-	setup(needprompt=not inqueue)
-	if game.alldone:
-	    score()
-	    game.alldone = False
-	else:
-	    makemoves()
-	skip(1)
-	stars()
-	skip(1)
-	if game.tourn and game.alldone:
-	    proutn(_("Do you want your score recorded?"))
-	    if ja() == True:
-		chew2()
-		freeze(False)
-        chew()
-	proutn(_("Do you want to play again? "))
-	if not ja():
-	    break
-    skip(1)
-    prout(_("May the Great Bird of the Galaxy roost upon your home planet."))
-    raise SystemExit, 0
+        global line, thing, game, idebug, iqengry
+        game = citem = aaitem = inqueue = None
+        line = ''
+        thing = coord()
+        iqengry = False
+        game = gamestate()
+        idebug = 0
+        game.options = OPTION_ALL &~ (OPTION_IOMODES | OPTION_PLAIN | OPTION_ALMY)
+        # Disable curses mode until the game logic is working.
+        #    if os.getenv("TERM"):
+        #	game.options |= OPTION_CURSES | OPTION_SHOWME
+        #    else:
+        game.options |= OPTION_TTY
+        seed = int(time.time())
+        (options, arguments) = getopt.getopt(sys.argv[1:], "r:tx")
+        for (switch, val) in options:
+            if switch == '-r':
+                try:
+                    replayfp = open(val, "r")
+                except IOError:
+                    sys.stderr.write("sst: can't open replay file %s\n" % val)
+                    raise SystemExit, 1
+                try:
+                    line = replayfp.readline().strip()
+                    (leader, key, seed) = line.split()
+                    seed = eval(seed)
+                    sys.stderr.write("sst2k: seed set to %s\n" % seed)
+                    line = replayfp.readline().strip()
+                    arguments += line.split()[2:]
+                except ValueError:
+                    sys.stderr.write("sst: replay file %s is ill-formed\n"% val)
+                    os.exit(1)
+                game.options |= OPTION_TTY
+                game.options &=~ OPTION_CURSES
+            elif switch == '-t':
+                game.options |= OPTION_TTY
+                game.options &=~ OPTION_CURSES
+            elif switch == '-x':
+                idebug = True
+            else:
+                sys.stderr.write("usage: sst [-t] [-x] [startcommand...].\n")
+                os.exit(0)
+        # where to save the input in case of bugs
+        try:
+            logfp = open("/usr/tmp/sst-input.log", "w")
+        except IOError:
+            sys.stderr.write("sst: warning, can't open logfile\n")
+        if logfp:
+            logfp.write("# seed %s\n" % seed)
+            logfp.write("# options %s\n" % " ".join(arguments))
+        random.seed(seed)
+        iostart()
+        if arguments:
+            inqueue = arguments
+        else:
+            inqueue = None
+        while True: # Play a game 
+            setwnd(fullscreen_window)
+            clrscr()
+            prelim()
+            setup(needprompt=not inqueue)
+            if game.alldone:
+                score()
+                game.alldone = False
+            else:
+                makemoves()
+            skip(1)
+            stars()
+            skip(1)
+            if game.tourn and game.alldone:
+                proutn(_("Do you want your score recorded?"))
+                if ja() == True:
+                    chew2()
+                    freeze(False)
+            chew()
+            proutn(_("Do you want to play again? "))
+            if not ja():
+                break
+        skip(1)
+        prout(_("May the Great Bird of the Galaxy roost upon your home planet."))
+        raise SystemExit, 0
+    except KeyboardInterrupt:
+        print""
+        pass
+



From esr at mail.berlios.de  Fri Oct  6 15:47:55 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 6 Oct 2006 15:47:55 +0200
Subject: [Sst-commit-watch] r690 - trunk/src
Message-ID: <200610061347.k96DltZA014620@sheep.berlios.de>

Author: esr
Date: 2006-10-06 15:47:54 +0200 (Fri, 06 Oct 2006)
New Revision: 690

Modified:
   trunk/src/sst.py
Log:
More port fixes for the Python version.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-06 12:30:27 UTC (rev 689)
+++ trunk/src/sst.py	2006-10-06 13:47:54 UTC (rev 690)
@@ -177,7 +177,7 @@
 more:
 
 9. A long-range scan is done silently whenever you call CHART; thus
-the LRSCAN command is no longer needed.  (Controlled by OPTION_PLAIN
+the LRSCAN command is no longer needed.  (Controlled by OPTION_AUTOSCAN
 and turned off if game type is "plain" or "almy".)
 """
 import os,sys,math,curses,time,atexit,readline,cPickle,random,getopt,copy
@@ -269,6 +269,8 @@
     def __hash__(self):
         return hash((x, y))
     def __str__(self):
+        if self.x == None or self.y == None:
+            return "Nowhere"
         return "%s - %s" % (self.x+1, self.y+1)
     __repr__ = __str__
 
@@ -349,15 +351,16 @@
 OPTION_CURSES	= 0x00000002	# new interface 
 OPTION_IOMODES	= 0x00000003	# cover both interfaces 
 OPTION_PLANETS	= 0x00000004	# planets and mining 
-OPTION_THOLIAN	= 0x00000008	# Tholians and their webs 
-OPTION_THINGY	= 0x00000010	# Space Thingy can shoot back 
-OPTION_PROBE	= 0x00000020	# deep-space probes 
+OPTION_THOLIAN	= 0x00000008	# Tholians and their webs (UT 1979 version)
+OPTION_THINGY	= 0x00000010	# Space Thingy can shoot back (Stas, 2005)
+OPTION_PROBE	= 0x00000020	# deep-space probes (DECUS version, 1980)
 OPTION_SHOWME	= 0x00000040	# bracket Enterprise in chart 
-OPTION_RAMMING	= 0x00000080	# enemies may ram Enterprise 
-OPTION_MVBADDY	= 0x00000100	# more enemies can move 
-OPTION_BLKHOLE	= 0x00000200	# black hole may timewarp you 
-OPTION_BASE	= 0x00000400	# bases have good shields 
-OPTION_WORLDS	= 0x00000800	# logic for inhabited worlds 
+OPTION_RAMMING	= 0x00000080	# enemies may ram Enterprise (Almy)
+OPTION_MVBADDY	= 0x00000100	# more enemies can move (Almy)
+OPTION_BLKHOLE	= 0x00000200	# black hole may timewarp you (Stas, 2005) 
+OPTION_BASE	= 0x00000400	# bases have good shields (Stas, 2005)
+OPTION_WORLDS	= 0x00000800	# logic for inhabited worlds (ESR, 2006)
+OPTION_AUTOSCAN	= 0x00001000	# automatic LRSCAN before CHART (ESR, 2006)
 OPTION_PLAIN	= 0x01000000	# user chose plain game 
 OPTION_ALMY	= 0x02000000	# user chose Almy variant 
 
@@ -418,15 +421,17 @@
         self.state = snapshot()	# A snapshot structure
         self.snapsht = snapshot()	# Last snapshot taken for time-travel purposes
         self.quad = fill2d(QUADSIZE, lambda i, j: IHDOT)	# contents of our quadrant
-        self.kpower = fill2d(QUADSIZE, lambda i, j: 0.0)	# enemy energy levels
-        self.kdist = fill2d(QUADSIZE, lambda i, j: 0.0)		# enemy distances
-        self.kavgd = fill2d(QUADSIZE, lambda i, j: 0.0) 	# average distances
+        self.kpower = [0.0]*(QUADSIZE**2)	# enemy energy levels
+        self.kdist =  [0.0]*(QUADSIZE**2)	# enemy distances
+        self.kavgd =  [0.0]*(QUADSIZE**2) 	# average distances
         self.damage = [0.0] * NDEVICES	# damage encountered
         self.future = []		# future events
         for i in range(NEVENTS):
             self.future.append(event())
         self.passwd  = None;		# Self Destruct password
-        self.ks = fill2d(QUADSIZE, lambda i, j: coord())	# enemy sector locations
+        self.ks = []	# enemy sector locations
+        for i in range(QUADSIZE**2):
+            self.ks.append(coord())
         self.quadrant = None	# where we are in the large
         self.sector = None	# where we are in the small
         self.tholian = None	# coordinates of Tholian
@@ -1986,15 +1991,16 @@
 
 def hittem(hits):
     # register a phaser hit on Klingons and Romulans 
-    nenhr2 = game.nenhere; kk=1
+    nenhr2 = game.nenhere; kk=0
     w = coord()
     skip(1)
-    for k in range(nenhr2):
-        wham = hits[k]
+    for (k, wham) in enumerate(hits):
 	if wham==0:
 	    continue
 	dustfac = randreal(0.9, 1.0)
+        print type(wham), type(dustfac), type(game.kdist[kk]), "Foo!", game.kdist
 	hit = wham*math.pow(dustfac,game.kdist[kk])
+        print "Got here"
 	kpini = game.kpower[kk]
 	kp = math.fabs(kpini)
 	if PHASEFAC*hit < kp:
@@ -2023,14 +2029,15 @@
 		finish(FWON);		
 	    if game.alldone:
 		return
-	    kk -= 1; # don't do the increment 
+	    kk -= 1	# don't do the increment
+            continue
 	else: # decide whether or not to emasculate klingon 
 	    if kpow>0 and withprob(0.9) and kpow <= randreal(0.4, 0.8)*kpini:
 		prout(_("***Mr. Spock-  \"Captain, the vessel at Sector %s")%w)
 		prout(_("   has just lost its firepower.\""))
 		game.kpower[kk] = -kpow
         kk += 1
-    return;
+    return
 
 def phasers():
     # fire phasers 
@@ -3638,13 +3645,15 @@
 def prouts(line):
     "print slowly!" 
     for c in line:
-	time.sleep(0.03)
+        if not replayfp or replayfp.closed:	# Don't slow down replays
+            time.sleep(0.03)
 	proutn(c)
 	if game.options & OPTION_CURSES:
 	    wrefresh(curwnd)
 	else:
 	    sys.stdout.flush()
-    time.sleep(0.03)
+    if not replayfp or replayfp.closed:
+        time.sleep(0.03)
 
 def cgetline():
     "Get a line of input."
@@ -3655,6 +3664,7 @@
 	if replayfp and not replayfp.closed:
             while True:
                 line = replayfp.readline()
+                proutn(line)
                 if line == '':
                     prout("*** Replay finished")
                     replayfp.close()
@@ -5431,7 +5441,7 @@
 def chart():
     # display the star chart  
     chew()
-    if not (game.options & (OPTION_PLAIN | OPTION_ALMY)):
+    if (game.options & OPTION_AUTOSCAN):
         lrscan(silent=True)
     if not damaged(DRADIO):
 	rechart()
@@ -6206,22 +6216,19 @@
     # Position Starship
     game.quad[game.sector.x][game.sector.y] = game.ship
     if q.klingons:
-	w.x = w.y = 0	# quiet a gcc warning 
 	# Position ordinary Klingons
 	for i in range(game.klhere):
 	    w = newkling(i)
 	# If we need a commander, promote a Klingon
 	for i in range(game.state.remcom):
 	    if game.state.kcmdr[i] == game.quadrant:
-		break
-			
-	if i <= game.state.remcom:
-	    game.quad[w.x][w.y] = IHC
-	    game.kpower[game.klhere] = randreal(950, 1350) + 50.0*game.skill
-	    game.comhere = True
+                game.quad[game.ks[i].x][game.ks[i].y] = IHC
+                game.kpower[game.klhere] = randreal(950,1350) + 50.0*game.skill
+                game.comhere = True
+		break	
 	# If we need a super-commander, promote a Klingon
 	if game.quadrant == game.state.kscmdr:
-	    game.quad[game.ks[0].x][game.ks[0].y] = IHS
+	    game.quad[w.x][w.y] = IHS
 	    game.kpower[0] = randreal(1175.0,  1575.0) + 125.0*game.skill
 	    game.iscate = (game.state.remkl > 1)
 	    game.ishere = True
@@ -6244,9 +6251,8 @@
     # Check for condition
     newcnd()
     # And finally the stars
-    for i in range(q.stars): 
+    for i in range(q.stars):
 	dropin(IHSTAR)
-
     # Check for RNZ
     if game.irhere > 0 and game.klhere == 0:
 	game.neutz = True
@@ -6321,7 +6327,7 @@
 	return
     while True:
 	sw = False
-	for j in range(game.nenhere):
+	for j in range(game.nenhere-1):
 	    if game.kdist[j] > game.kdist[j+1]:
 		sw = True
 		t = game.kdist[j]
@@ -6875,7 +6881,7 @@
                     arguments += line.split()[2:]
                 except ValueError:
                     sys.stderr.write("sst: replay file %s is ill-formed\n"% val)
-                    os.exit(1)
+                    raise SystemExit(1)
                 game.options |= OPTION_TTY
                 game.options &=~ OPTION_CURSES
             elif switch == '-t':
@@ -6885,7 +6891,7 @@
                 idebug = True
             else:
                 sys.stderr.write("usage: sst [-t] [-x] [startcommand...].\n")
-                os.exit(0)
+                raise SystemExit, 1
         # where to save the input in case of bugs
         try:
             logfp = open("/usr/tmp/sst-input.log", "w")



From esr at mail.berlios.de  Fri Oct  6 16:07:41 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 6 Oct 2006 16:07:41 +0200
Subject: [Sst-commit-watch] r691 - trunk/src
Message-ID: <200610061407.k96E7faJ016709@sheep.berlios.de>

Author: esr
Date: 2006-10-06 16:07:40 +0200 (Fri, 06 Oct 2006)
New Revision: 691

Modified:
   trunk/src/sst.py
Log:
Fixed bug in Python version's reporting of critical hits.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-06 13:47:54 UTC (rev 690)
+++ trunk/src/sst.py	2006-10-06 14:07:40 UTC (rev 691)
@@ -1568,8 +1568,6 @@
 
 def fry(hit):
     # critical-hit resolution 
-    ktr=1
-    # a critical hit occured 
     if hit < (275.0-25.0*game.skill)*randreal(1.0, 1.5):
 	return
     ncrit = int(1.0 + hit/(500.0+randreal(100)))
@@ -1585,17 +1583,14 @@
 	cdam.append(j)
 	extradm = (hit*game.damfac)/(ncrit*randreal(75, 100))
 	game.damage[j] += extradm
-	if loop1 > 0:
-            for loop2 in range(loop1):
-                if j == cdam[loop2]:
-                    break
-	    if loop2 < loop1:
-		continue
-	    ktr += 1
-	    if ktr==3:
-		skip(1)
-	    proutn(_(" and "))
+    skipcount = 0
+    for (i, j) in enumerate(cdam):
 	proutn(device[j])
+        if skipcount % 3 == 2 and i < len(cdam)-1:
+            skip()
+        skipcount += 1
+        if i < len(cdam)-1:
+            proutn(_(" and "))
     prout(_(" damaged."))
     if damaged(DSHIELD) and game.shldup:
 	prout(_("***Shields knocked down."))
@@ -2568,10 +2563,9 @@
 	    game.iseenit = True
 	    announce()
 	    skip(1)
-	    proutn(_("Lt. Uhura-  \"Captain, the starbase in Quadrant %s") % game.battle)
+	    prout(_("Lt. Uhura-  \"Captain, the starbase in Quadrant %s") % game.battle)
 	    prout(_("   reports that it is under attack and that it can"))
-	    proutn(_("   hold out only until stardate %d") % (int(scheduled(FCDBAS))))
-            prout(".\"")
+	    prout(_("   hold out only until stardate %d.\"") % (int(scheduled(FCDBAS))))
 	    if cancelrest():
                 return
 	elif evcode == FSCDBAS: # Supercommander destroys base 



From esr at mail.berlios.de  Fri Oct  6 17:08:14 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 6 Oct 2006 17:08:14 +0200
Subject: [Sst-commit-watch] r692 - trunk/src
Message-ID: <200610061508.k96F8EGe024725@sheep.berlios.de>

Author: esr
Date: 2006-10-06 17:08:13 +0200 (Fri, 06 Oct 2006)
New Revision: 692

Modified:
   trunk/src/sst.py
Log:
Collect three parallel arrays into an 'enemy' structure.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-06 14:07:40 UTC (rev 691)
+++ trunk/src/sst.py	2006-10-06 15:08:13 UTC (rev 692)
@@ -415,23 +415,29 @@
 # 
 def findevent(evtype):	return game.future[evtype]
 
+class enemy:
+    def __init__(self, loc=None, power=None):
+        if loc:
+            self.kloc = loc
+        else:
+            self.kloc = coord()	# enemy sector location
+        self.kpower = power	# enemy energy levels
+        self.kdist = self.kavgd = distance(game.sector, e.kloc)
+    def __repr__(self):
+        return "<%s=%f>" % (self.kloc, self.kpower)	# For debugging
+
 class gamestate:
     def __init__(self):
         self.options = None	# Game options
         self.state = snapshot()	# A snapshot structure
         self.snapsht = snapshot()	# Last snapshot taken for time-travel purposes
         self.quad = fill2d(QUADSIZE, lambda i, j: IHDOT)	# contents of our quadrant
-        self.kpower = [0.0]*(QUADSIZE**2)	# enemy energy levels
-        self.kdist =  [0.0]*(QUADSIZE**2)	# enemy distances
-        self.kavgd =  [0.0]*(QUADSIZE**2) 	# average distances
         self.damage = [0.0] * NDEVICES	# damage encountered
         self.future = []		# future events
         for i in range(NEVENTS):
             self.future.append(event())
         self.passwd  = None;		# Self Destruct password
-        self.ks = []	# enemy sector locations
-        for i in range(QUADSIZE**2):
-            self.ks.append(coord())
+        self.enemies = []
         self.quadrant = None	# where we are in the large
         self.sector = None	# where we are in the small
         self.tholian = None	# coordinates of Tholian
@@ -483,7 +489,7 @@
         self.nenhere = 0	# number of enemies in quadrant
         self.irhere = 0		# Romulans in quadrant
         self.isatb = 0		# =1 if super commander is attacking base
-        self.tourn = 0		# tournament number
+        self.tourn = None	# tournament number
         self.proben = 0		# number of moves for probe
         self.nprobes = 0	# number of probes available
         self.inresor = 0.0	# initial resources
@@ -627,20 +633,20 @@
 	    if game.battle == game.quadrant:
 		return False
 	# don't leave if over 1000 units of energy 
-	if game.kpower[loccom] > 1000.0:
+	if game.enemies[loccom].kpower > 1000.0:
 	    return False
     # print escape message and move out of quadrant.
     # we know this if either short or long range sensors are working
     if not damaged(DSRSENS) or not damaged(DLRSENS) or \
 	game.condition == docked:
-	crmena(True, ienm, "sector", game.ks[loccom])
+	crmena(True, ienm, "sector", game.enemies[loccom].kloc)
 	prout(_(" escapes to Quadrant %s (and regains strength).") % q)
     # handle local matters related to escape 
-    game.quad[game.ks[loccom].x][game.ks[loccom].y] = IHDOT
-    game.ks[loccom] = game.ks[game.nenhere]
-    game.kavgd[loccom] = game.kavgd[game.nenhere]
-    game.kpower[loccom] = game.kpower[game.nenhere]
-    game.kdist[loccom] = game.kdist[game.nenhere]
+    game.quad[game.enemies[loccom].kloc.x][game.enemies[loccom].kloc.y] = IHDOT
+    game.enemies[loccom].kloc = game.enemies[game.nenhere].kloc
+    game.enemies[loccom].kavgd = game.enemies[game.nenhere].kavgd
+    game.enemies[loccom].kpower = game.enemies[game.nenhere].kpower
+    game.enemies[loccom].kdist = game.enemies[game.nenhere].kdist
     game.klhere -= 1
     game.nenhere -= 1
     if game.condition != docked:
@@ -714,17 +720,17 @@
     else:
 	nbaddys = game.comhere + game.ishere
 
-    dist1 = game.kdist[loccom]
+    dist1 = game.enemies[loccom].kdist
     mdist = int(dist1 + 0.5); # Nearest integer distance 
 
     # If SC, check with spy to see if should hi-tail it 
     if ienm==IHS and \
-	(game.kpower[loccom] <= 500.0 or (game.condition=="docked" and not damaged(DPHOTON))):
+	(game.enemies[loccom].kpower <= 500.0 or (game.condition=="docked" and not damaged(DPHOTON))):
 	irun = True
 	motion = -QUADSIZE
     else:
 	# decide whether to advance, retreat, or hold position 
-	forces = game.kpower[loccom]+100.0*game.nenhere+400*(nbaddys-1)
+	forces = game.enemies[loccom].kpower+100.0*game.nenhere+400*(nbaddys-1)
 	if not game.shldup:
 	    forces += 1000; # Good for enemy if shield is down! 
 	if not damaged(DPHASER) or not damaged(DPHOTON):
@@ -852,13 +858,13 @@
     game.quad[next.x][next.y] = ienm
     if next != com:
 	# it moved 
-	game.ks[loccom] = next
-	game.kdist[loccom] = game.kavgd[loccom] = distance(game.sector, next)
+	game.enemies[loccom].kloc = next
+	game.enemies[loccom].kdist = game.enemies[loccom].kavgd = distance(game.sector, next)
 	if not damaged(DSRSENS) or game.condition == docked:
 	    proutn("***")
 	    cramen(ienm)
 	    proutn(_(" from Sector %s") % com)
-	    if game.kdist[loccom] < dist1:
+	    if game.enemies[loccom].kdist < dist1:
 		proutn(_(" advances to "))
 	    else:
 		proutn(_(" retreats to "))
@@ -872,13 +878,13 @@
     # and do move
     if game.comhere:
 	for i in range(game.nenhere):
-	    w = game.ks[i]
+	    w = game.enemies[i].kloc
 	    if game.quad[w.x][w.y] == IHC:
 		movebaddy(w, i, IHC)
 		break
     if game.ishere:
 	for i in range(game.nenhere):
-	    w = game.ks[i]
+	    w = game.enemies[i].kloc
 	    if game.quad[w.x][w.y] == IHS:
 		movebaddy(w, i, IHS)
 		break
@@ -887,7 +893,7 @@
     # commander(s) do.
     if game.skill >= SKILL_EXPERT and (game.options & OPTION_MVBADDY):
 	for i in range(game.nenhere):
-	    w = game.ks[i]
+	    w = game.enemies[i].kloc
 	    if game.quad[w.x][w.y] == IHK or game.quad[w.x][w.y] == IHR:
 		movebaddy(w, i, game.quad[w.x][w.y])
     sortklings();
@@ -917,13 +923,13 @@
 	game.ientesc = False
 	unschedule(FSCDBAS)
 	for i in range(game.nenhere):
-	    if game.quad[game.ks[i].x][game.ks[i].y] == IHS:
+	    if game.quad[game.enemies[i].kloc.x][game.enemies[i].kloc.y] == IHS:
 		break
-	game.quad[game.ks[i].x][game.ks[i].y] = IHDOT
-	game.ks[i] = game.ks[game.nenhere]
-	game.kdist[i] = game.kdist[game.nenhere]
-	game.kavgd[i] = game.kavgd[game.nenhere]
-	game.kpower[i] = game.kpower[game.nenhere]
+	game.quad[game.enemies[i].kloc.x][game.enemies[i].kloc.y] = IHDOT
+	game.enemies[i].kloc = game.enemies[game.nenhere].kloc
+	game.enemies[i].kdist = game.enemies[game.nenhere].kdist
+	game.enemies[i].kavgd = game.enemies[game.nenhere].kavgd
+	game.enemies[i].kpower = game.enemies[game.nenhere].kpower
 	game.klhere -= 1
 	game.nenhere -= 1
 	if game.condition!=docked:
@@ -1102,7 +1108,7 @@
 	    if game.quad[game.tholian.x][game.tholian.y]==IHDOT:
 		game.quad[game.tholian.x][game.tholian.y] = IHWEB
     game.quad[game.tholian.x][game.tholian.y] = IHT
-    game.ks[game.nenhere] = game.tholian
+    game.enemies[game.nenhere].kloc = game.tholian
 
     # check to see if all holes plugged 
     for i in range(QUADSIZE):
@@ -1405,19 +1411,19 @@
 	elif iquad in (IHR, IHK): # Hit a regular enemy 
 	    # find the enemy 
 	    for ll in range(game.nenhere):
-		if w == game.ks[ll]:
+		if w == game.enemies[ll].kloc:
 		    break
-	    kp = math.fabs(game.kpower[ll])
+	    kp = math.fabs(game.enemies[ll].kpower)
 	    h1 = 700.0 + randrange(100) - \
 		1000.0 * distance(w, incoming) * math.fabs(math.sin(bullseye-angle))
 	    h1 = math.fabs(h1)
 	    if kp < h1:
 		h1 = kp
-            if game.kpower[ll] < 0:
-                game.kpower[ll] -= -h1
+            if game.enemies[ll].kpower < 0:
+                game.enemies[ll].kpower -= -h1
             else:
-                game.kpower[ll] -= h1
-	    if game.kpower[ll] == 0:
+                game.enemies[ll].kpower -= h1
+	    if game.enemies[ll].kpower == 0:
 		deadkl(w, iquad, w)
 		return None
 	    crmena(True, iquad, "sector", w)
@@ -1442,7 +1448,7 @@
 		prout(_(" damaged but not destroyed."))
 		return None
 	    proutn(_(" damaged--"))
-	    game.ks[ll] = jw
+	    game.enemies[ll].kloc = jw
 	    shoved = True
 	    break
 	elif iquad == IHB: # Hit a base 
@@ -1559,7 +1565,7 @@
 	game.quad[jw.x][jw.y]=iquad
 	prout(_(" displaced by blast to Sector %s ") % jw)
 	for ll in range(game.nenhere):
-	    game.kdist[ll] = game.kavgd[ll] = distance(game.sector,game.ks[ll])
+	    game.enemies[ll].kdist = game.enemies[ll].kavgd = distance(game.sector,game.enemies[ll].kloc)
 	sortklings()
 	return None
     skip(1)
@@ -1630,16 +1636,16 @@
     if game.skill <= SKILL_FAIR:
 	where = "sector"
     for loop in range(game.nenhere):
-	if game.kpower[loop] < 0:
+	if game.enemies[loop].kpower < 0:
 	    continue;	# too weak to attack 
 	# compute hit strength and diminish shield power 
 	r = randreal()
 	# Increase chance of photon torpedos if docked or enemy energy low 
 	if game.condition == "docked":
 	    r *= 0.25
-	if game.kpower[loop] < 500:
+	if game.enemies[loop].kpower < 500:
 	    r *= 0.25; 
-	jay = game.ks[loop]
+	jay = game.enemies[loop].kloc
 	iquad = game.quad[jay.x][jay.y]
 	if iquad==IHT or (iquad==IHQUEST and not iqengry):
 	    continue
@@ -1655,8 +1661,8 @@
 		continue; # Don't waste the effort! 
 	    attempt = True; # Attempt to attack 
 	    dustfac = 0.8 + randreal(0.5)
-	    hit = game.kpower[loop]*math.pow(dustfac,game.kavgd[loop])
-	    game.kpower[loop] *= 0.75
+	    hit = game.enemies[loop].kpower*math.pow(dustfac,game.enemies[loop].kavgd)
+	    game.enemies[loop].kpower *= 0.75
 	else: # Enemy uses photon torpedo 
 	    course = 1.90985*math.atan2(game.sector.y-jay.y, jay.x-game.sector.x)
 	    hit = 0
@@ -1667,7 +1673,7 @@
 	    attempt = True
 	    prout("  ")
 	    r = (randreal()+randreal())*0.5 - 0.5
-	    r += 0.002*game.kpower[loop]*r
+	    r += 0.002*game.enemies[loop].kpower*r
 	    hit = torpedo(course, r, jay, 1, 1)
 	    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
 		finish(FWON); # Klingons did themselves in! 
@@ -1745,7 +1751,7 @@
 	    game.state.crew -= icas
     # After attack, reset average distance to enemies 
     for loop in range(game.nenhere):
-	game.kavgd[loop] = game.kdist[loop]
+	game.enemies[loop].kavgd = game.enemies[loop].kdist
     sortklings()
     return;
 		
@@ -1804,16 +1810,16 @@
     if is_scheduled(FCDBAS) and game.battle == game.quadrant and type==IHC:
 	unschedule(FCDBAS)
     for i in range(game.nenhere):
-	if game.ks[i] == w:
+	if game.enemies[i].kloc == w:
             for j in range(i, game.nenhere):
-                game.ks[j] = game.ks[j+1]
-                game.kpower[j] = game.kpower[j+1]
-                game.kavgd[j] = game.kdist[j] = game.kdist[j+1]
-            game.ks[game.nenhere].x = 0
-            game.ks[game.nenhere].y = 0
-            game.kdist[game.nenhere] = 0
-            game.kavgd[game.nenhere] = 0
-            game.kpower[game.nenhere] = 0
+                game.enemies[j].kloc = game.enemies[j+1].kloc
+                game.enemies[j].kpower = game.enemies[j+1].kpower
+                game.enemies[j].kavgd = game.enemies[j].kdist = game.enemies[j+1].kdist
+            game.enemies[game.nenhere].kloc.x = 0
+            game.enemies[game.nenhere].kloc.y = 0
+            game.enemies[game.nenhere].kdist = 0
+            game.enemies[game.nenhere].kavgd = 0
+            game.enemies[game.nenhere].kpower = 0
             game.nenhere -= 1
 	    break
         break
@@ -1985,7 +1991,7 @@
     return True;
 
 def hittem(hits):
-    # register a phaser hit on Klingons and Romulans 
+    # register a phaser hit on Klingons and Romulans
     nenhr2 = game.nenhere; kk=0
     w = coord()
     skip(1)
@@ -1993,19 +1999,17 @@
 	if wham==0:
 	    continue
 	dustfac = randreal(0.9, 1.0)
-        print type(wham), type(dustfac), type(game.kdist[kk]), "Foo!", game.kdist
-	hit = wham*math.pow(dustfac,game.kdist[kk])
-        print "Got here"
-	kpini = game.kpower[kk]
+	hit = wham*math.pow(dustfac,game.enemies[kk].kdist)
+	kpini = game.enemies[kk].kpower
 	kp = math.fabs(kpini)
 	if PHASEFAC*hit < kp:
 	    kp = PHASEFAC*hit
-        if game.kpower[kk] < 0:
-            game.kpower[kk] -= -kp
+        if game.enemies[kk].kpower < 0:
+            game.enemies[kk].kpower -= -kp
         else:
-            game.kpower[kk] -= kp
-	kpow = game.kpower[kk]
-	w = game.ks[kk]
+            game.enemies[kk].kpower -= kp
+	kpow = game.enemies[kk].kpower
+	w = game.enemies[kk].kloc
 	if hit > 0.005:
 	    if not damaged(DSRSENS):
 		boom(w)
@@ -2030,7 +2034,7 @@
 	    if kpow>0 and withprob(0.9) and kpow <= randreal(0.4, 0.8)*kpini:
 		prout(_("***Mr. Spock-  \"Captain, the vessel at Sector %s")%w)
 		prout(_("   has just lost its firepower.\""))
-		game.kpower[kk] = -kpow
+		game.enemies[kk].kpower = -kpow
         kk += 1
     return
 
@@ -2123,7 +2127,7 @@
 	    chew()
 	    if not kz:
 		for i in range(game.nenhere):
-		    irec += math.fabs(game.kpower[i])/(PHASEFAC*math.pow(0.90,game.kdist[i]))*randreal(1.01, 1.06) + 1.0
+		    irec += math.fabs(game.enemies[i].kpower)/(PHASEFAC*math.pow(0.90,game.enemies[i].kdist))*randreal(1.01, 1.06) + 1.0
 	    kz=1
 	    proutn(_("%d units required. ") % irec)
 	    chew()
@@ -2159,7 +2163,7 @@
 		hits.append(0.0)
 		if powrem <= 0:
 		    continue
-		hits[i] = math.fabs(game.kpower[i])/(PHASEFAC*math.pow(0.90,game.kdist[i]))
+		hits[i] = math.fabs(game.enemies[i].kpower)/(PHASEFAC*math.pow(0.90,game.enemies[i].kdist))
 		over = randreal(1.01, 1.06) * hits[i]
 		temp = powrem
 		powrem -= hits[i] + over
@@ -2196,7 +2200,7 @@
     elif automode == "MANUAL":
 	rpow = 0.0
         for k in range(game.nenhere):
-	    aim = game.ks[k]
+	    aim = game.enemies[k].kloc
 	    ienm = game.quad[aim.x][aim.y]
 	    if msgflag:
 		proutn(_("Energy available= %.2f") % (avail-0.006))
@@ -2215,7 +2219,7 @@
 	    if key == IHEOL:
 		chew()
 		if itarg and k > kz:
-		    irec=(abs(game.kpower[k])/(PHASEFAC*math.pow(0.9,game.kdist[k]))) *	randreal(1.01, 1.06) + 1.0
+		    irec=(abs(game.enemies[k].kpower)/(PHASEFAC*math.pow(0.9,game.enemies[k].kdist))) *	randreal(1.01, 1.06) + 1.0
 		kz = k
 		proutn("(")
 		if not damaged(DCOMPTR):
@@ -2720,7 +2724,7 @@
 	    q.klingons += 1
 	    if game.quadrant == w:
                 game.klhere += 1
-		newkling(game.klhere)
+		game.enemies.append(newkling())
 	    # recompute time left
             game.recompute()
 	    # report the disaster if we can 
@@ -2890,10 +2894,10 @@
 			deadkl(scratch,iquad, scratch)
                     elif iquad in (IHC,IHS,IHR): # Damage/destroy big enemies 
 			for ll in range(game.nenhere):
-			    if game.ks[ll] == scratch:
+			    if game.enemies[ll].kloc == scratch:
 				break
-			game.kpower[ll] -= 800.0 # If firepower is lost, die 
-			if game.kpower[ll] <= 0.0:
+			game.enemies[ll].kpower -= 800.0 # If firepower is lost, die 
+			if game.enemies[ll].kpower <= 0.0:
 			    deadkl(scratch, iquad, scratch)
 			    break
 			newc.x = scratch.x + scratch.x - hits[mm][1]
@@ -2918,8 +2922,8 @@
 			proutn(_(", buffeted to Sector %s") % newc)
 			game.quad[scratch.x][scratch.y] = IHDOT
 			game.quad[newc.x][newc.y] = iquad
-			game.ks[ll] = newc
-			game.kdist[ll] = game.kavgd[ll] = distance(game.sector, newc)
+			game.enemies[ll].kloc = newc
+			game.enemies[ll].kdist = game.enemies[ll].kavgd = distance(game.sector, newc)
 			skip(1)
 	if top == top2: 
 	    break
@@ -3117,8 +3121,8 @@
 	whammo = 25.0 * game.energy
 	l=1
 	while l <= game.nenhere:
-	    if game.kpower[l]*game.kdist[l] <= whammo: 
-		deadkl(game.ks[l], game.quad[game.ks[l].x][game.ks[l].y], game.ks[l])
+	    if game.enemies[l].kpower*game.enemies[l].kdist <= whammo: 
+		deadkl(game.enemies[l].kloc, game.quad[game.enemies[l].kloc.x][game.enemies[l].kloc.y], game.enemies[l].kloc)
 	    l += 1
     finish(FDILITHIUM)
 				
@@ -3864,14 +3868,14 @@
         game.quad[game.sector.x][game.sector.y] = game.ship
         if game.nenhere:
             for m in range(game.nenhere):
-                finald = distance(w, game.ks[m])
-                game.kavgd[m] = 0.5 * (finald+game.kdist[m])
-                game.kdist[m] = finald
+                finald = distance(w, game.enemies[m].kloc)
+                game.enemies[m].kavgd = 0.5 * (finald+game.enemies[m].kdist)
+                game.enemies[m].kdist = finald
             sortklings()
             if not game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
                 attack(False)
             for m in range(game.nenhere):
-                game.kavgd[m] = game.kdist[m]
+                game.enemies[m].kavgd = game.enemies[m].kdist
         newcnd()
         drawmaps(0)
         setwnd(message_window)
@@ -3911,8 +3915,8 @@
 		if game.nenhere != 0 and not novapush:
 		    newcnd()
 		    for m in range(game.nenhere):
-			finald = distance(w, game.ks[m])
-			game.kavgd[m] = 0.5 * (finald + game.kdist[m])
+			finald = distance(w, game.enemies[m].kloc)
+			game.enemies[m].kavgd = 0.5 * (finald + game.enemies[m].kdist)
 		    #
 		    # Stas Sergeev added the condition
 		    # that attacks only happen if Klingons
@@ -5222,7 +5226,7 @@
 	prouts(_("Sulu- \"Captain!  It's working!\""))
 	skip(2)
 	while game.nenhere > 0:
-	    deadkl(game.ks[1], game.quad[game.ks[1].x][game.ks[1].y],game.ks[1])
+	    deadkl(game.enemies[1].kloc, game.quad[game.enemies[1].kloc.x][game.enemies[1].kloc.y],game.enemies[1].kloc)
 	prout(_("Ensign Chekov-  \"Congratulations, Captain!\""))
 	if (game.state.remkl + game.state.remcom + game.state.nscrem) == 0:
 	    finish(FWON)    
@@ -5996,10 +6000,10 @@
                 break
 	game.state.kscmdr = w
 	game.state.galaxy[w.x][w.y].klingons += 1
-    # Place thing (in tournament game, thingx == -1, don't want one!)
+    # Place thing (in tournament game, we don't want one!)
     global thing
-    if thing == None:
-	thing = randplace(GALSIZE)
+    if game.tourn is None:
+        thing = randplace(GALSIZE)
     skip(2)
     game.state.snap = False
     if game.skill == SKILL_NOVICE:
@@ -6171,13 +6175,9 @@
     if not game.alive:
 	game.condition="dead"
 
-def newkling(i):
-    # drop new Klingon into current quadrant 
-    pi = dropin(IHK)
-    game.ks[i] = pi
-    game.kdist[i] = game.kavgd[i] = distance(game.sector, pi)
-    game.kpower[i] = randreal(300, 450) + 25.0*game.skill
-    return pi
+def newkling():
+    # drop new Klingon into current quadrant
+    return enemy(loc=dropin(IHK), power=randreal(300, 450) + 25.0*game.skill)
 
 def newqad(shutup):
     # set up a new state of quadrant, for when we enter or re-enter it 
@@ -6209,29 +6209,30 @@
     game.nenhere = game.klhere + game.irhere
     # Position Starship
     game.quad[game.sector.x][game.sector.y] = game.ship
+    game.enemies = []
     if q.klingons:
 	# Position ordinary Klingons
 	for i in range(game.klhere):
-	    w = newkling(i)
+	    game.enemies.append(newkling())
 	# If we need a commander, promote a Klingon
 	for i in range(game.state.remcom):
 	    if game.state.kcmdr[i] == game.quadrant:
-                game.quad[game.ks[i].x][game.ks[i].y] = IHC
-                game.kpower[game.klhere] = randreal(950,1350) + 50.0*game.skill
+                e = game.enemies[game.klhere-1]
+                game.quad[e.kloc.x][e.kloc.y] = IHC
+                e.kpower = randreal(950,1350) + 50.0*game.skill
                 game.comhere = True
 		break	
 	# If we need a super-commander, promote a Klingon
 	if game.quadrant == game.state.kscmdr:
-	    game.quad[w.x][w.y] = IHS
-	    game.kpower[0] = randreal(1175.0,  1575.0) + 125.0*game.skill
+            e = game.enemies[0]
+	    game.quad[e.kloc.x][e.kloc.y] = IHS
+	    e.kpower = randreal(1175.0,  1575.0) + 125.0*game.skill
 	    game.iscate = (game.state.remkl > 1)
 	    game.ishere = True
     # Put in Romulans if needed
     for i in range(game.klhere, game.nenhere):
-	w = dropin(IHR)
-	game.ks[i] = w
-	game.kdist[i] = game.kavgd[i] = distance(game.sector, w)
-	game.kpower[i] = randreal(400.0, 850.0) + 50.0*game.skill
+        game.enemies.append(enemy(loc=dropin(IHR),
+                                  power=randreal(400.0,850.0)+50.0*game.skill))
     # If quadrant needs a starbase, put it in
     if q.starbase:
 	game.base = dropin(IHB)
@@ -6259,15 +6260,12 @@
 	    prout(_("LEAVE AT ONCE, OR YOU WILL BE DESTROYED!"))
     if shutup==0:
 	# Put in THING if needed
-        global thing
 	if thing == game.quadrant:
-	    w = dropin(IHQUEST)
-	    thing = randplace(GALSIZE)
+	    e = enemy(dropin(IHQUEST))
+	    e.kdist = e.kavgd = distance(game.sector, e.kloc)
+	    e.kpower = randreal(6000,6500.0)+250.0*game.skill
+            games.enemies.append(e)
 	    game.nenhere += 1
-	    game.ks[game.nenhere] = w
-	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] = \
-		distance(game.sector, w)
-	    game.kpower[game.nenhere] = randreal(6000,6500.0)+250.0*game.skill
 	    if not damaged(DSRSENS):
 		skip(1)
 		prout(_("Mr. Spock- \"Captain, this is most unusual."))
@@ -6284,11 +6282,9 @@
                 if game.quad[game.tholian.x][game.tholian.y] == IHDOT:
                     break
 	    game.quad[game.tholian.x][game.tholian.y] = IHT
+            game.enemies.append(loc=game.tholian,
+                                power=randrange(100, 500) + 25.0*game.skill)
 	    game.nenhere += 1
-	    game.ks[game.nenhere] = game.tholian
-	    game.kdist[game.nenhere] = game.kavgd[game.nenhere] = \
-		distance(game.sector, game.tholian)
-	    game.kpower[game.nenhere] = randrange(100, 500) + 25.0*game.skill
 	    # Reserve unoccupied corners 
 	    if game.quad[0][0]==IHDOT:
 		game.quad[0][0] = 'X'
@@ -6322,23 +6318,23 @@
     while True:
 	sw = False
 	for j in range(game.nenhere-1):
-	    if game.kdist[j] > game.kdist[j+1]:
+	    if game.enemies[j].kdist > game.enemies[j+1].kdist:
 		sw = True
-		t = game.kdist[j]
-		game.kdist[j] = game.kdist[j+1]
-		game.kdist[j+1] = t
-		t = game.kavgd[j]
-		game.kavgd[j] = game.kavgd[j+1]
-		game.kavgd[j+1] = t
-		k = game.ks[j].x
-		game.ks[j].x = game.ks[j+1].x
-		game.ks[j+1].x = k
-		k = game.ks[j].y
-		game.ks[j].y = game.ks[j+1].y
-		game.ks[j+1].y = k
-		t = game.kpower[j]
-		game.kpower[j] = game.kpower[j+1]
-		game.kpower[j+1] = t
+		t = game.enemies[j].kdist
+		game.enemies[j].kdist = game.enemies[j+1].kdist
+		game.enemies[j+1].kdist = t
+		t = game.enemies[j].kavgd
+		game.enemies[j].kavgd = game.enemies[j+1].kavgd
+		game.enemies[j+1].kavgd = t
+		k = game.enemies[j].kloc.x
+		game.enemies[j].kloc.x = game.enemies[j+1].kloc.x
+		game.enemies[j+1].kloc.x = k
+		k = game.enemies[j].kloc.y
+		game.enemies[j].kloc.y = game.enemies[j+1].kloc.y
+		game.enemies[j+1].kloc.y = k
+		t = game.enemies[j].kpower
+		game.enemies[j].kpower = game.enemies[j+1].kpower
+		game.enemies[j+1].kpower = t
         if not sw:
             break
 



From esr at mail.berlios.de  Fri Oct  6 17:21:34 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 6 Oct 2006 17:21:34 +0200
Subject: [Sst-commit-watch] r693 - trunk/src
Message-ID: <200610061521.k96FLYZK026021@sheep.berlios.de>

Author: esr
Date: 2006-10-06 17:21:33 +0200 (Fri, 06 Oct 2006)
New Revision: 693

Modified:
   trunk/src/sst.py
Log:
Get rid of the nasty old bubble sort in the Python version.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-06 15:08:13 UTC (rev 692)
+++ trunk/src/sst.py	2006-10-06 15:21:33 UTC (rev 693)
@@ -419,10 +419,11 @@
     def __init__(self, loc=None, power=None):
         if loc:
             self.kloc = loc
+            self.kdist = self.kavgd = distance(game.sector, loc)
         else:
             self.kloc = coord()	# enemy sector location
+            self.kdist = self.kavgd = None
         self.kpower = power	# enemy energy levels
-        self.kdist = self.kavgd = distance(game.sector, e.kloc)
     def __repr__(self):
         return "<%s=%f>" % (self.kloc, self.kpower)	# For debugging
 
@@ -896,7 +897,7 @@
 	    w = game.enemies[i].kloc
 	    if game.quad[w.x][w.y] == IHK or game.quad[w.x][w.y] == IHR:
 		movebaddy(w, i, game.quad[w.x][w.y])
-    sortklings();
+    game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
 
 def movescom(iq, avoid):
     # commander movement helper 
@@ -934,7 +935,7 @@
 	game.nenhere -= 1
 	if game.condition!=docked:
 	    newcnd()
-	sortklings()
+        game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
     # check for a helpful planet 
     for i in range(game.inplan):
 	if game.state.planets[i].w == game.state.kscmdr and \
@@ -1566,7 +1567,7 @@
 	prout(_(" displaced by blast to Sector %s ") % jw)
 	for ll in range(game.nenhere):
 	    game.enemies[ll].kdist = game.enemies[ll].kavgd = distance(game.sector,game.enemies[ll].kloc)
-	sortklings()
+        game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
 	return None
     skip(1)
     prout(_("Torpedo missed."))
@@ -1752,7 +1753,7 @@
     # After attack, reset average distance to enemies 
     for loop in range(game.nenhere):
 	game.enemies[loop].kavgd = game.enemies[loop].kdist
-    sortklings()
+    game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
     return;
 		
 def deadkl(w, type, mv):
@@ -3871,7 +3872,7 @@
                 finald = distance(w, game.enemies[m].kloc)
                 game.enemies[m].kavgd = 0.5 * (finald+game.enemies[m].kdist)
                 game.enemies[m].kdist = finald
-            sortklings()
+            game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
             if not game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
                 attack(False)
             for m in range(game.nenhere):
@@ -6294,7 +6295,7 @@
 		game.quad[QUADSIZE-1][0] = 'X'
 	    if game.quad[QUADSIZE-1][QUADSIZE-1]==IHDOT:
 		game.quad[QUADSIZE-1][QUADSIZE-1] = 'X'
-    sortklings()
+    game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
     # Put in a few black holes
     for i in range(1, 3+1):
 	if withprob(0.5): 
@@ -6310,34 +6311,6 @@
 	if game.quad[QUADSIZE-1][QUADSIZE-1]=='X':
 	    game.quad[QUADSIZE-1][QUADSIZE-1] = IHDOT
 
-def sortklings():
-    # sort Klingons by distance from us 
-    # The author liked bubble sort. So we will use it. :-(
-    if game.nenhere-(thing==game.quadrant)-(game.tholian!=None) < 2:
-	return
-    while True:
-	sw = False
-	for j in range(game.nenhere-1):
-	    if game.enemies[j].kdist > game.enemies[j+1].kdist:
-		sw = True
-		t = game.enemies[j].kdist
-		game.enemies[j].kdist = game.enemies[j+1].kdist
-		game.enemies[j+1].kdist = t
-		t = game.enemies[j].kavgd
-		game.enemies[j].kavgd = game.enemies[j+1].kavgd
-		game.enemies[j+1].kavgd = t
-		k = game.enemies[j].kloc.x
-		game.enemies[j].kloc.x = game.enemies[j+1].kloc.x
-		game.enemies[j+1].kloc.x = k
-		k = game.enemies[j].kloc.y
-		game.enemies[j].kloc.y = game.enemies[j+1].kloc.y
-		game.enemies[j+1].kloc.y = k
-		t = game.enemies[j].kpower
-		game.enemies[j].kpower = game.enemies[j+1].kpower
-		game.enemies[j+1].kpower = t
-        if not sw:
-            break
-
 def setpassword():
     # set the self-destruct password 
     if game.options & OPTION_PLAIN:
@@ -6924,4 +6897,3 @@
     except KeyboardInterrupt:
         print""
         pass
-



From esr at mail.berlios.de  Fri Oct  6 20:14:09 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 6 Oct 2006 20:14:09 +0200
Subject: [Sst-commit-watch] r694 - trunk/src
Message-ID: <200610061814.k96IE9Lw014996@sheep.berlios.de>

Author: esr
Date: 2006-10-06 20:14:08 +0200 (Fri, 06 Oct 2006)
New Revision: 694

Modified:
   trunk/src/sst.py
Log:
Got through an entire game with this Python version.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-06 15:21:33 UTC (rev 693)
+++ trunk/src/sst.py	2006-10-06 18:14:08 UTC (rev 694)
@@ -416,14 +416,24 @@
 def findevent(evtype):	return game.future[evtype]
 
 class enemy:
-    def __init__(self, loc=None, power=None):
+    def __init__(self, type=None, loc=None, power=None):
+        self.type = type
+        self.kloc = coord()
         if loc:
+            self.move(loc)
+        self.kpower = power	# enemy energy level
+        game.enemies.append(self)
+    def move(self, loc):
+        if self.kloc.x is not None and self.kloc.y is not None:
+            game.quad[self.kloc.x][self.kloc.y] = IHDOT
+        if loc:
             self.kloc = loc
+            game.quad[self.kloc.x][self.kloc.y] = self.type
             self.kdist = self.kavgd = distance(game.sector, loc)
         else:
             self.kloc = coord()	# enemy sector location
             self.kdist = self.kavgd = None
-        self.kpower = power	# enemy energy levels
+            game.enemies.remove(self)
     def __repr__(self):
         return "<%s=%f>" % (self.kloc, self.kpower)	# For debugging
 
@@ -441,7 +451,7 @@
         self.enemies = []
         self.quadrant = None	# where we are in the large
         self.sector = None	# where we are in the small
-        self.tholian = None	# coordinates of Tholian
+        self.tholian = None	# Tholian enemy object
         self.base = None	# position of base in current quadrant
         self.battle = None	# base coordinates being attacked
         self.plnet = None	# location of planet in quadrant
@@ -487,7 +497,6 @@
         self.nkinks = 0		# count of energy-barrier crossings
         self.iplnet = None	# planet # in quadrant
         self.inplan = 0		# initial planets
-        self.nenhere = 0	# number of enemies in quadrant
         self.irhere = 0		# Romulans in quadrant
         self.isatb = 0		# =1 if super commander is attacking base
         self.tourn = None	# tournament number
@@ -642,14 +651,9 @@
 	game.condition == docked:
 	crmena(True, ienm, "sector", game.enemies[loccom].kloc)
 	prout(_(" escapes to Quadrant %s (and regains strength).") % q)
-    # handle local matters related to escape 
-    game.quad[game.enemies[loccom].kloc.x][game.enemies[loccom].kloc.y] = IHDOT
-    game.enemies[loccom].kloc = game.enemies[game.nenhere].kloc
-    game.enemies[loccom].kavgd = game.enemies[game.nenhere].kavgd
-    game.enemies[loccom].kpower = game.enemies[game.nenhere].kpower
-    game.enemies[loccom].kdist = game.enemies[game.nenhere].kdist
+    # handle local matters related to escape
+    game.enemies[loccom].move(None)
     game.klhere -= 1
-    game.nenhere -= 1
     if game.condition != docked:
 	newcnd()
     # Handle global matters related to escape 
@@ -723,7 +727,6 @@
 
     dist1 = game.enemies[loccom].kdist
     mdist = int(dist1 + 0.5); # Nearest integer distance 
-
     # If SC, check with spy to see if should hi-tail it 
     if ienm==IHS and \
 	(game.enemies[loccom].kpower <= 500.0 or (game.condition=="docked" and not damaged(DPHOTON))):
@@ -731,7 +734,7 @@
 	motion = -QUADSIZE
     else:
 	# decide whether to advance, retreat, or hold position 
-	forces = game.enemies[loccom].kpower+100.0*game.nenhere+400*(nbaddys-1)
+	forces = game.enemies[loccom].kpower+100.0*len(game.enemies)+400*(nbaddys-1)
 	if not game.shldup:
 	    forces += 1000; # Good for enemy if shield is down! 
 	if not damaged(DPHASER) or not damaged(DPHOTON):
@@ -878,25 +881,22 @@
     # Figure out which Klingon is the commander (or Supercommander)
     # and do move
     if game.comhere:
-	for i in range(game.nenhere):
-	    w = game.enemies[i].kloc
-	    if game.quad[w.x][w.y] == IHC:
-		movebaddy(w, i, IHC)
+        for (i, e) in enumerate(game.enemies):
+	    if game.quad[e.kloc.x][e.kloc.y] == IHC:
+		movebaddy(e.kloc, i, IHC)
 		break
     if game.ishere:
-	for i in range(game.nenhere):
-	    w = game.enemies[i].kloc
-	    if game.quad[w.x][w.y] == IHS:
-		movebaddy(w, i, IHS)
+        for (i, e) in enumerate(game.enemies):
+	    if game.quad[e.kloc.x][e.kloc.y] == IHS:
+		movebaddy(e.kloc, i, IHS)
 		break
     # If skill level is high, move other Klingons and Romulans too!
     # Move these last so they can base their actions on what the
     # commander(s) do.
     if game.skill >= SKILL_EXPERT and (game.options & OPTION_MVBADDY):
-	for i in range(game.nenhere):
-	    w = game.enemies[i].kloc
-	    if game.quad[w.x][w.y] == IHK or game.quad[w.x][w.y] == IHR:
-		movebaddy(w, i, game.quad[w.x][w.y])
+        for (i, e) in enumerate(game.enemies):
+            if game.quad[e.kloc.x][e.kloc.y] in (IHK, IHR):
+		movebaddy(e.kloc, i, game.quad[e.kloc.x][e.kloc.y])
     game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
 
 def movescom(iq, avoid):
@@ -923,16 +923,11 @@
 	game.ishere = False
 	game.ientesc = False
 	unschedule(FSCDBAS)
-	for i in range(game.nenhere):
-	    if game.quad[game.enemies[i].kloc.x][game.enemies[i].kloc.y] == IHS:
+	for e in game.enemies:
+	    if game.quad[e.kloc.x][e.kloc.y] == IHS:
 		break
-	game.quad[game.enemies[i].kloc.x][game.enemies[i].kloc.y] = IHDOT
-	game.enemies[i].kloc = game.enemies[game.nenhere].kloc
-	game.enemies[i].kdist = game.enemies[game.nenhere].kdist
-	game.enemies[i].kavgd = game.enemies[game.nenhere].kavgd
-	game.enemies[i].kpower = game.enemies[game.nenhere].kpower
+	game.enemies[i].move(None)
 	game.klhere -= 1
-	game.nenhere -= 1
 	if game.condition!=docked:
 	    newcnd()
         game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
@@ -1000,7 +995,7 @@
 		iwhichb = i
 		break
 	if ifindit==0:
-	    return; # Nothing suitable -- wait until next time
+	    return # Nothing suitable -- wait until next time
 	ibq = game.state.baseq[iwhichb]
 	# decide how to move toward base 
 	idelta = ibq - game.state.kscmdr
@@ -1040,14 +1035,14 @@
 	    if ibq == game.state.kscmdr and game.state.kscmdr == game.battle:
 		# attack the base 
 		if avoid:
-		    return; # no, don't attack base! 
+		    return # no, don't attack base! 
 		game.iseenit = False
 		game.isatb = 1
 		schedule(FSCDBAS, randreal(1.0, 3.0))
 		if is_scheduled(FCDBAS):
 		    postpone(FSCDBAS, scheduled(FCDBAS)-game.state.date)
 		if not communicating():
-		    return; # no warning 
+		    return # no warning 
 		game.iseenit = True
 		announce()
 		prout(_("Lt. Uhura-  \"Captain, the starbase in Quadrant %s") \
@@ -1072,45 +1067,44 @@
     announce()
     prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"))
     proutn(_("   the Super-commander is in Quadrant %s,") % game.state.kscmdr)
-    return;
+    return
 
 def movetholian():
     # move the Tholian 
     if not game.tholian or game.justin:
 	return
-    if game.tholian.x == 0 and game.tholian.y == 0:
+    if game.tholian.kloc.x == 0 and game.tholian.kloc.y == 0:
 	idx = 0; idy = QUADSIZE-1
-    elif game.tholian.x == 0 and game.tholian.y == QUADSIZE-1:
+    elif game.tholian.kloc.x == 0 and game.tholian.kloc.y == QUADSIZE-1:
 	idx = QUADSIZE-1; idy = QUADSIZE-1
-    elif game.tholian.x == QUADSIZE-1 and game.tholian.y == QUADSIZE-1:
+    elif game.tholian.kloc.x == QUADSIZE-1 and game.tholian.kloc.y == QUADSIZE-1:
 	idx = QUADSIZE-1; idy = 0
-    elif game.tholian.x == QUADSIZE-1 and game.tholian.y == 0:
+    elif game.tholian.kloc.x == QUADSIZE-1 and game.tholian.kloc.y == 0:
 	idx = 0; idy = 0
     else:
 	# something is wrong! 
-	game.ithere = False
+	game.tholian = None
 	return
     # do nothing if we are blocked 
     if game.quad[idx][idy]!= IHDOT and game.quad[idx][idy]!= IHWEB:
 	return
-    game.quad[game.tholian.x][game.tholian.y] = IHWEB
-    if game.tholian.x != idx:
+    game.quad[game.tholian.kloc.x][game.tholian.kloc.y] = IHWEB
+    if game.tholian.kloc.x != idx:
 	# move in x axis 
-	im = math.fabs(idx - game.tholian.x)*1.0/(idx - game.tholian.x)
-	while game.tholian.x != idx:
-	    game.tholian.x += im
-	    if game.quad[game.tholian.x][game.tholian.y]==IHDOT:
-		game.quad[game.tholian.x][game.tholian.y] = IHWEB
-    elif game.tholian.y != idy:
+	im = math.fabs(idx - game.tholian.kloc.x)*1.0/(idx - game.tholian.kloc.x)
+	while game.tholian.kloc.x != idx:
+	    game.tholian.kloc.x += im
+	    if game.quad[game.tholian.kloc.x][game.tholian.kloc.y]==IHDOT:
+		game.quad[game.tholian.kloc.x][game.tholian.kloc.y] = IHWEB
+    elif game.tholian.kloc.y != idy:
 	# move in y axis 
-	im = math.fabs(idy - game.tholian.y)*1.0/(idy - game.tholian.y)
-	while game.tholian.y != idy:
-	    game.tholian.y += im
-	    if game.quad[game.tholian.x][game.tholian.y]==IHDOT:
-		game.quad[game.tholian.x][game.tholian.y] = IHWEB
-    game.quad[game.tholian.x][game.tholian.y] = IHT
-    game.enemies[game.nenhere].kloc = game.tholian
-
+	im = math.fabs(idy - game.tholian.kloc.y)*1.0/(idy - game.tholian.kloc.y)
+	while game.tholian.kloc.y != idy:
+	    game.tholian.kloc.y += im
+	    if game.quad[game.tholian.kloc.x][game.tholian.kloc.y]==IHDOT:
+		game.quad[game.tholian.kloc.x][game.tholian.kloc.y] = IHWEB
+    game.quad[game.tholian.kloc.x][game.tholian.kloc.y] = IHT
+    #game.enemies[-1].kloc = game.tholian	#FIXME
     # check to see if all holes plugged 
     for i in range(QUADSIZE):
 	if game.quad[0][i]!=IHWEB and game.quad[0][i]!=IHT:
@@ -1122,12 +1116,11 @@
 	if game.quad[i][QUADSIZE]!=IHWEB and game.quad[i][QUADSIZE]!=IHT:
 	    return
     # All plugged up -- Tholian splits 
-    game.quad[game.tholian.x][game.tholian.y]=IHWEB
+    game.quad[game.tholian.kloc.x][game.tholian.kloc.y]=IHWEB
     dropin(IHBLANK)
     crmena(True, IHT, "sector", game.tholian)
     prout(_(" completes web."))
-    game.tholian = None
-    game.nenhere -= 1
+    game.tholian.move(None)
     return
 
 # Code from battle.c begins here
@@ -1336,7 +1329,7 @@
 	damagereport()
     else:
 	finish(FWON)
-    return;
+    return
 
 def torpedo(course, r, incoming, i, n):
     # let a photon torpedo fly 
@@ -1360,9 +1353,9 @@
     # Loop to move a single torpedo 
     for l in range(1, 15+1):
 	x += deltax
-	w.x = x + 0.5
+	w.x = int(x + 0.5)
 	y += deltay
-	w.y = y + 0.5
+	w.y = int(y + 0.5)
 	if not VALID_SECTOR(w.x, w.y):
 	    break
 	iquad=game.quad[w.x][w.y]
@@ -1390,8 +1383,8 @@
 		temp = math.fabs(math.cos(ang))
 	    xx = -math.sin(ang)/temp
 	    yy = math.cos(ang)/temp
-	    jw.x=w.x+xx+0.5
-	    jw.y=w.y+yy+0.5
+	    jw.x = int(w.x+xx+0.5)
+	    jw.y = int(w.y+yy+0.5)
 	    if not VALID_SECTOR(jw.x, jw.y):
 		return hit
 	    if game.quad[jw.x][jw.y]==IHBLANK:
@@ -1411,20 +1404,20 @@
 		return None
 	elif iquad in (IHR, IHK): # Hit a regular enemy 
 	    # find the enemy 
-	    for ll in range(game.nenhere):
+            for enemy in game.enemies:
 		if w == game.enemies[ll].kloc:
 		    break
-	    kp = math.fabs(game.enemies[ll].kpower)
+	    kp = math.fabs(e.kpower)
 	    h1 = 700.0 + randrange(100) - \
 		1000.0 * distance(w, incoming) * math.fabs(math.sin(bullseye-angle))
 	    h1 = math.fabs(h1)
 	    if kp < h1:
 		h1 = kp
-            if game.enemies[ll].kpower < 0:
-                game.enemies[ll].kpower -= -h1
+            if enemy.kpower < 0:
+                enemy.kpower -= -h1
             else:
-                game.enemies[ll].kpower -= h1
-	    if game.enemies[ll].kpower == 0:
+                enemy.kpower -= h1
+	    if enemy.kpower == 0:
 		deadkl(w, iquad, w)
 		return None
 	    crmena(True, iquad, "sector", w)
@@ -1449,7 +1442,7 @@
 		prout(_(" damaged but not destroyed."))
 		return None
 	    proutn(_(" damaged--"))
-	    game.enemies[ll].kloc = jw
+	    enemy.kloc = jw
 	    shoved = True
 	    break
 	elif iquad == IHB: # Hit a base 
@@ -1519,8 +1512,7 @@
 		# you can shove the Thingy and piss it off.
 		# It then becomes an enemy and may fire at you.
 		#
-                global iqengry
-		iqengry = True
+		thing.angry = True
 		shoved = True
 	    return None
 	elif iquad == IHBLANK: # Black hole 
@@ -1538,8 +1530,8 @@
 	    h1 = math.fabs(h1)
 	    if h1 >= 600:
 		game.quad[w.x][w.y] = IHDOT
-		game.tholian = None
 		deadkl(w, iquad, w)
+		game.tholian = None
 		return None
 	    skip(1)
 	    crmena(True, IHT, "sector", w)
@@ -1547,9 +1539,8 @@
 		prout(_(" survives photon blast."))
 		return None
 	    prout(_(" disappears."))
+	    game.tholian.move(None)
 	    game.quad[w.x][w.y] = IHWEB
-	    game.tholian = None
-	    game.nenhere -= 1
 	    dropin(IHBLANK)
 	    return None
         else: # Problem!
@@ -1565,7 +1556,7 @@
 	game.quad[w.x][w.y]=IHDOT
 	game.quad[jw.x][jw.y]=iquad
 	prout(_(" displaced by blast to Sector %s ") % jw)
-	for ll in range(game.nenhere):
+	for ll in range(len(game.enemies)):
 	    game.enemies[ll].kdist = game.enemies[ll].kavgd = distance(game.sector,game.enemies[ll].kloc)
         game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
 	return None
@@ -1605,10 +1596,9 @@
 
 def attack(torps_ok):
     # bad guy attacks us 
-    # torps_ok == false forces use of phasers in an attack 
-    atackd = False; attempt = False; ihurt = False;
+    # torps_ok == False forces use of phasers in an attack 
+    attempt = False; ihurt = False;
     hitmax=0.0; hittot=0.0; chgfac=1.0
-    jay = coord()
     where = "neither"
     # game could be over at this point, check 
     if game.alldone:
@@ -1626,7 +1616,7 @@
     if (((game.comhere or game.ishere) and not game.justin) or game.skill == SKILL_EMERITUS) and torps_ok:
 	moveklings()
     # if no enemies remain after movement, we're done 
-    if game.nenhere==0 or (game.nenhere==1 and thing == game.quadrant and not iqengry):
+    if len(game.enemies)==0 or (len(game.enemies)==1 and thing == game.quadrant and not thing.angry):
 	return
     # set up partial hits if attack happens during shield status change 
     pfac = 1.0/game.inshld
@@ -1636,50 +1626,48 @@
     # message verbosity control 
     if game.skill <= SKILL_FAIR:
 	where = "sector"
-    for loop in range(game.nenhere):
-	if game.enemies[loop].kpower < 0:
+    for enemy in game.enemies:
+	if enemy.kpower < 0:
 	    continue;	# too weak to attack 
 	# compute hit strength and diminish shield power 
 	r = randreal()
-	# Increase chance of photon torpedos if docked or enemy energy low 
+	# Increase chance of photon torpedos if docked or enemy energy is low 
 	if game.condition == "docked":
 	    r *= 0.25
-	if game.enemies[loop].kpower < 500:
+	if enemy.kpower < 500:
 	    r *= 0.25; 
-	jay = game.enemies[loop].kloc
-	iquad = game.quad[jay.x][jay.y]
-	if iquad==IHT or (iquad==IHQUEST and not iqengry):
+	if enemy.type==IHT or (enemy.type==IHQUEST and not thing.angry):
 	    continue
 	# different enemies have different probabilities of throwing a torp 
 	usephasers = not torps_ok or \
-	    (iquad == IHK and r > 0.0005) or \
-	    (iquad==IHC and r > 0.015) or \
-	    (iquad==IHR and r > 0.3) or \
-	    (iquad==IHS and r > 0.07) or \
-	    (iquad==IHQUEST and r > 0.05)
+	    (enemy.type == IHK and r > 0.0005) or \
+	    (enemy.type==IHC and r > 0.015) or \
+	    (enemy.type==IHR and r > 0.3) or \
+	    (enemy.type==IHS and r > 0.07) or \
+	    (enemy.type==IHQUEST and r > 0.05)
 	if usephasers:	    # Enemy uses phasers 
 	    if game.condition == "docked":
 		continue; # Don't waste the effort! 
 	    attempt = True; # Attempt to attack 
 	    dustfac = 0.8 + randreal(0.5)
-	    hit = game.enemies[loop].kpower*math.pow(dustfac,game.enemies[loop].kavgd)
-	    game.enemies[loop].kpower *= 0.75
+	    hit = enemy.kpower*math.pow(dustfac,enemy.kavgd)
+	    enemy.kpower *= 0.75
 	else: # Enemy uses photon torpedo 
-	    course = 1.90985*math.atan2(game.sector.y-jay.y, jay.x-game.sector.x)
+	    course = 1.90985*math.atan2(game.sector.y-enemy.kloc.y, enemy.kloc.x-game.sector.x)
 	    hit = 0
 	    proutn(_("***TORPEDO INCOMING"))
 	    if not damaged(DSRSENS):
 		proutn(_(" From "))
-		crmena(False, iquad, where, jay)
+		crmena(False, enemy.type, where, enemy.kloc)
 	    attempt = True
 	    prout("  ")
 	    r = (randreal()+randreal())*0.5 - 0.5
-	    r += 0.002*game.enemies[loop].kpower*r
-	    hit = torpedo(course, r, jay, 1, 1)
+	    r += 0.002*enemy.kpower*r
+	    hit = torpedo(course, r, enemy.kloc, 1, 1)
 	    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
 		finish(FWON); # Klingons did themselves in! 
 	    if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova or game.alldone:
-		return; # Supernova or finished 
+		return # Supernova or finished 
 	    if hit == None:
 		continue
 	# incoming phaser or torpedo, shields may dissipate it 
@@ -1710,7 +1698,7 @@
 	    crmshp()
 	if not damaged(DSRSENS) and usephasers:
 	    proutn(_(" from "))
-	    crmena(False, iquad, where, jay)
+	    crmena(False, enemy.type, where, enemy.kloc)
 	skip(1)
 	# Decide if hit is critical 
 	if hit > hitmax:
@@ -1724,8 +1712,6 @@
 	return
     if not attempt and game.condition == "docked":
 	prout(_("***Enemies decide against attacking your ship."))
-    if not atackd:
-	return
     percent = 100.0*pfac*game.shield+0.5
     if not ihurt:
 	# Shields fully protect ship 
@@ -1751,10 +1737,10 @@
 	    game.casual += icas
 	    game.state.crew -= icas
     # After attack, reset average distance to enemies 
-    for loop in range(game.nenhere):
-	game.enemies[loop].kavgd = game.enemies[loop].kdist
+    for enemy in game.enemies:
+	enemy.kavgd = enemy.kdist
     game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
-    return;
+    return
 		
 def deadkl(w, type, mv):
     # kill a Klingon, Tholian, Romulan, or Thingy 
@@ -1762,69 +1748,55 @@
     crmena(True, type, "sector", mv)
     # Decide what kind of enemy it is and update appropriately 
     if type == IHR:
-	# chalk up a Romulan 
-	game.state.galaxy[game.quadrant.x][game.quadrant.y].romulans -= 1
-	game.irhere -= 1
-	game.state.nromrem -= 1
+        # chalk up a Romulan 
+        game.state.galaxy[game.quadrant.x][game.quadrant.y].romulans -= 1
+        game.irhere -= 1
+        game.state.nromrem -= 1
     elif type == IHT:
-	# Killed a Tholian 
-	game.tholian = None
+        # Killed a Tholian 
+        game.tholian = None
     elif type == IHQUEST:
-	# Killed a Thingy
-        global iqengry
-	iqengry = False
-	invalidate(thing)
+        # Killed a Thingy
+        global thing
+        thing = None
     else:
-	# Some type of a Klingon 
-	game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons -= 1
-	game.klhere -= 1
-	if type == IHC:
-	    game.comhere = False
-	    for i in range(game.state.remcom):
-		if game.state.kcmdr[i] == game.quadrant:
-		    break
-	    game.state.kcmdr[i] = game.state.kcmdr[game.state.remcom]
-	    game.state.kcmdr[game.state.remcom].x = 0
-	    game.state.kcmdr[game.state.remcom].y = 0
-	    game.state.remcom -= 1
-	    unschedule(FTBEAM)
-	    if game.state.remcom != 0:
-		schedule(FTBEAM, expran(1.0*game.incom/game.state.remcom))
-	elif type ==  IHK:
-	    game.state.remkl -= 1
-	elif type ==  IHS:
-	    game.state.nscrem -= 1
-	    game.ishere = False
-	    game.state.kscmdr.x = game.state.kscmdr.y = game.isatb = 0
-	    game.iscate = False
-	    unschedule(FSCMOVE)
-	    unschedule(FSCDBAS)
-	else:
-	    prout("*** Internal error, deadkl() called on %s\n" % type)
+        # Some type of a Klingon 
+        game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons -= 1
+        game.klhere -= 1
+        if type == IHC:
+            game.comhere = False
+            for i in range(game.state.remcom):
+                if game.state.kcmdr[i] == game.quadrant:
+                    break
+            game.state.kcmdr[i] = game.state.kcmdr[game.state.remcom]
+            game.state.kcmdr[game.state.remcom].x = 0
+            game.state.kcmdr[game.state.remcom].y = 0
+            game.state.remcom -= 1
+            unschedule(FTBEAM)
+            if game.state.remcom != 0:
+                schedule(FTBEAM, expran(1.0*game.incom/game.state.remcom))
+            if is_scheduled(FCDBAS) and game.battle == game.quadrant:
+                unschedule(FCDBAS)    
+        elif type ==  IHK:
+            game.state.remkl -= 1
+        elif type ==  IHS:
+            game.state.nscrem -= 1
+            game.ishere = False
+            game.state.kscmdr.x = game.state.kscmdr.y = game.isatb = 0
+            game.iscate = False
+            unschedule(FSCMOVE)
+            unschedule(FSCDBAS)
     # For each kind of enemy, finish message to player 
     prout(_(" destroyed."))
-    game.quad[w.x][w.y] = IHDOT
     if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
 	return
     game.recompute()
-    # Remove enemy ship from arrays describing local conditions 
-    if is_scheduled(FCDBAS) and game.battle == game.quadrant and type==IHC:
-	unschedule(FCDBAS)
-    for i in range(game.nenhere):
-	if game.enemies[i].kloc == w:
-            for j in range(i, game.nenhere):
-                game.enemies[j].kloc = game.enemies[j+1].kloc
-                game.enemies[j].kpower = game.enemies[j+1].kpower
-                game.enemies[j].kavgd = game.enemies[j].kdist = game.enemies[j+1].kdist
-            game.enemies[game.nenhere].kloc.x = 0
-            game.enemies[game.nenhere].kloc.y = 0
-            game.enemies[game.nenhere].kdist = 0
-            game.enemies[game.nenhere].kavgd = 0
-            game.enemies[game.nenhere].kpower = 0
-            game.nenhere -= 1
+    # Remove enemy ship from arrays describing local conditions
+    for e in game.enemies:
+	if e.kloc == w:
+            e.move(None)
 	    break
-        break
-    return;
+    return
 
 def targetcheck(x, y):
     # Return None if target is invalid 
@@ -2019,8 +1991,7 @@
 	    proutn(_("Very small hit on "))
 	ienm = game.quad[w.x][w.y]
 	if ienm==IHQUEST:
-            global iqengry
-	    iqengry = True
+	    thing.angry = True
 	crmena(False, ienm, "sector", w)
 	skip(1)
 	if kpow == 0:
@@ -2800,7 +2771,7 @@
 def nova(nov):
     # star goes nova 
     course = (0.0, 10.5, 12.0, 1.5, 9.0, 0.0, 3.0, 7.5, 6.0, 4.5)
-    newc = coord(); scratch = coord()
+    newc = coord(); neighbor = coord(); bump = coord(0, 0)
     if withprob(0.05):
 	# Wow! We've supernova'ed 
 	supernova(False, nov)
@@ -2811,133 +2782,118 @@
     prout(_(" novas."))
     game.state.galaxy[game.quadrant.x][game.quadrant.y].stars -= 1
     game.state.starkl += 1
-	
-    # Set up stack to recursively trigger adjacent stars 
-    bot = top = top2 = 1
+    # Set up queue to recursively trigger adjacent stars 
+    hits = [nov]
     kount = 0
-    icx = icy = 0
-    hits[1][1] = nov.x
-    hits[1][2] = nov.y
-    while True:
-	for mm in range(bot, top+1): 
-	    for nn in range(1, 3+1):  # nn,j represents coordinates around current 
-		for j in range(1, 3+1):
-		    if j==2 and nn== 2:
-			continue
-		    scratch.x = hits[mm][1]+nn-2
-		    scratch.y = hits[mm][2]+j-2
-		    if not VALID_SECTOR(scratch.y, scratch.x):
-			continue
-		    iquad = game.quad[scratch.x][scratch.y]
-                    # Empty space ends reaction
-                    if iquad in (IHDOT, IHQUEST, IHBLANK, IHT, IHWEB):
-			break
-		    elif iquad == IHSTAR: # Affect another star 
-			if wthprob(0.05):
-			    # This star supernovas 
-			    scratch = supernova(False)
-			    return
-			top2 += 1
-			hits[top2][1]=scratch.x
-			hits[top2][2]=scratch.y
+    while hits:
+        offset = coord()
+        start = hits.pop()
+        for offset.x in range(-1, 1+1):
+            for offset.y in range(-1, 1+1):
+                if offset.y==0 and offset.x==0:
+                    continue
+                neighbor = start + offset
+                if not VALID_SECTOR(neighbor.y, neighbor.x):
+                    continue
+                iquad = game.quad[neighbor.x][neighbor.y]
+                # Empty space ends reaction
+                if iquad in (IHDOT, IHQUEST, IHBLANK, IHT, IHWEB):
+                    pass
+                elif iquad == IHSTAR: # Affect another star 
+                    if withprob(0.05):
+                        # This star supernovas 
+                        supernova(False)
+                        return
+                    else:
+                        hits.append(neighbor)
 			game.state.galaxy[game.quadrant.x][game.quadrant.y].stars -= 1
 			game.state.starkl += 1
-			crmena(True, IHSTAR, "sector", scratch)
+			crmena(True, IHSTAR, "sector", neighbor)
 			prout(_(" novas."))
-			game.quad[scratch.x][scratch.y] = IHDOT
-		    elif iquad == IHP: # Destroy planet 
-			game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = None
-			game.state.nplankl += 1
-			crmena(True, IHP, "sector", scratch)
-			prout(_(" destroyed."))
-			game.iplnet.pclass = "destroyed"
-			game.iplnet = None
-			invalidate(game.plnet)
-			if game.landed:
-			    finish(FPNOVA)
-			    return
-			game.quad[scratch.x][scratch.y] = IHDOT
-		    elif iquad == IHB: # Destroy base 
-			game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase = False
-			for i in range(game.state.rembase):
-			    if game.state.baseq[i] == game.quadrant: 
-				break
-			game.state.baseq[i] = game.state.baseq[game.state.rembase]
-			game.state.rembase -= 1
-			invalidate(game.base)
-			game.state.basekl += 1
-			newcnd()
-			crmena(True, IHB, "sector", scratch)
-			prout(_(" destroyed."))
-			game.quad[scratch.x][scratch.y] = IHDOT
-		    elif iquad in (IHE, IHF): # Buffet ship 
-			prout(_("***Starship buffeted by nova."))
-			if game.shldup:
-			    if game.shield >= 2000.0:
-				game.shield -= 2000.0
-			    else:
-				diff = 2000.0 - game.shield
-				game.energy -= diff
-				game.shield = 0.0
-				game.shldup = False
-				prout(_("***Shields knocked out."))
-				game.damage[DSHIELD] += 0.005*game.damfac*randreal()*diff
-			else:
-			    game.energy -= 2000.0
-			if game.energy <= 0:
-			    finish(FNOVA)
-			    return
-			# add in course nova contributes to kicking starship
-			icx += game.sector.x-hits[mm][1]
-			icy += game.sector.y-hits[mm][2]
-			kount += 1
-		    elif iquad == IHK: # kill klingon 
-			deadkl(scratch,iquad, scratch)
-                    elif iquad in (IHC,IHS,IHR): # Damage/destroy big enemies 
-			for ll in range(game.nenhere):
-			    if game.enemies[ll].kloc == scratch:
-				break
-			game.enemies[ll].kpower -= 800.0 # If firepower is lost, die 
-			if game.enemies[ll].kpower <= 0.0:
-			    deadkl(scratch, iquad, scratch)
-			    break
-			newc.x = scratch.x + scratch.x - hits[mm][1]
-			newc.y = scratch.y + scratch.y - hits[mm][2]
-			crmena(True, iquad, "sector", scratch)
-			proutn(_(" damaged"))
-			if not VALID_SECTOR(newc.x, newc.y):
-			    # can't leave quadrant 
-			    skip(1)
-			    break
-			iquad1 = game.quad[newc.x][newc.y]
-			if iquad1 == IHBLANK:
-			    proutn(_(", blasted into "))
-			    crmena(False, IHBLANK, "sector", newc)
-			    skip(1)
-			    deadkl(scratch, iquad, newc)
-			    break
-			if iquad1 != IHDOT:
-			    # can't move into something else 
-			    skip(1)
-			    break
-			proutn(_(", buffeted to Sector %s") % newc)
-			game.quad[scratch.x][scratch.y] = IHDOT
-			game.quad[newc.x][newc.y] = iquad
-			game.enemies[ll].kloc = newc
-			game.enemies[ll].kdist = game.enemies[ll].kavgd = distance(game.sector, newc)
-			skip(1)
-	if top == top2: 
-	    break
-	bot = top + 1
-	top = top2
-    if kount==0: 
-	return
-
+                        game.quad[neighbor.x][neighbor.y] = IHDOT
+                        kount += 1
+                elif iquad in (IHP, IHW): # Destroy planet 
+                    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = None
+                    if iquad == IHP:
+                        game.state.nplankl += 1
+                    else:
+                        game.state.worldkl += 1
+                    crmena(True, iquad, "sector", neighbor)
+                    prout(_(" destroyed."))
+                    game.iplnet.pclass = "destroyed"
+                    game.iplnet = None
+                    invalidate(game.plnet)
+                    if game.landed:
+                        finish(FPNOVA)
+                        return
+                    game.quad[neighbor.x][neighbor.y] = IHDOT
+                elif iquad == IHB: # Destroy base 
+                    game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase = False
+                    for i in range(game.state.rembase):
+                        if game.state.baseq[i] == game.quadrant: 
+                            break
+                    game.state.baseq[i] = game.state.baseq[game.state.rembase]
+                    game.state.rembase -= 1
+                    invalidate(game.base)
+                    game.state.basekl += 1
+                    newcnd()
+                    crmena(True, IHB, "sector", neighbor)
+                    prout(_(" destroyed."))
+                    game.quad[neighbor.x][neighbor.y] = IHDOT
+                elif iquad in (IHE, IHF): # Buffet ship 
+                    prout(_("***Starship buffeted by nova."))
+                    if game.shldup:
+                        if game.shield >= 2000.0:
+                            game.shield -= 2000.0
+                        else:
+                            diff = 2000.0 - game.shield
+                            game.energy -= diff
+                            game.shield = 0.0
+                            game.shldup = False
+                            prout(_("***Shields knocked out."))
+                            game.damage[DSHIELD] += 0.005*game.damfac*randreal()*diff
+                    else:
+                        game.energy -= 2000.0
+                    if game.energy <= 0:
+                        finish(FNOVA)
+                        return
+                    # add in course nova contributes to kicking starship
+                    bump += (game.sector-hits[mm]).sgn()
+                elif iquad == IHK: # kill klingon 
+                    deadkl(neighbor, iquad, neighbor)
+                elif iquad in (IHC,IHS,IHR): # Damage/destroy big enemies 
+                    for ll in range(game.nenhere):
+                        if game.enemies[ll].kloc == neighbor:
+                            break
+                    game.enemies[ll].kpower -= 800.0 # If firepower is lost, die 
+                    if game.enemies[ll].kpower <= 0.0:
+                        deadkl(neighbor, iquad, neighbor)
+                        break
+                    newc = neighbor + neighbor - hits[mm]
+                    crmena(True, iquad, "sector", neighbor)
+                    proutn(_(" damaged"))
+                    if not VALID_SECTOR(newc.x, newc.y):
+                        # can't leave quadrant 
+                        skip(1)
+                        break
+                    iquad1 = game.quad[newc.x][newc.y]
+                    if iquad1 == IHBLANK:
+                        proutn(_(", blasted into "))
+                        crmena(False, IHBLANK, "sector", newc)
+                        skip(1)
+                        deadkl(neighbor, iquad, newc)
+                        break
+                    if iquad1 != IHDOT:
+                        # can't move into something else 
+                        skip(1)
+                        break
+                    proutn(_(", buffeted to Sector %s") % newc)
+                    game.quad[neighbor.x][neighbor.y] = IHDOT
+                    game.quad[newc.x][newc.y] = iquad
+                    game.enemies[ll].move(newc)
     # Starship affected by nova -- kick it away. 
     game.dist = kount*0.1
-    icx = sgn(icx)
-    icy = sgn(icy)
-    game.direc = course[3*(icx+1)+icy+2]
+    game.direc = course[3*(bump.x+1)+bump.y+2]
     if game.direc == 0.0:
 	game.dist = 0.0
     if game.dist == 0.0:
@@ -3245,7 +3201,7 @@
     elif ifin == FBATTLE:
 	proutn(_("The "))
 	crmshp()
-	prout(_("has been destroyed in battle."))
+	prout(_(" has been destroyed in battle."))
 	skip(1)
 	prout(_("Dulce et decorum est pro patria mori."))
     elif ifin == FNEG3:
@@ -3673,7 +3629,7 @@
 	else:
 	    line = raw_input()
     if logfp:
-	logfp.write(line + "\n")
+	logfp.write("$" + line + "\n")
     return line
 
 def setwnd(wnd):
@@ -6156,14 +6112,15 @@
 	game.inbase = game.state.rembase
     return False
 
-def dropin(iquad):
+def dropin(iquad=None):
     # drop a feature on a random dot in the current quadrant 
     w = coord()
     while True:
         w = randplace(QUADSIZE)
         if game.quad[w.x][w.y] == IHDOT:
             break
-    game.quad[w.x][w.y] = iquad
+    if iquad is not None:
+        game.quad[w.x][w.y] = iquad
     return w
 
 def newcnd():
@@ -6178,7 +6135,7 @@
 
 def newkling():
     # drop new Klingon into current quadrant
-    return enemy(loc=dropin(IHK), power=randreal(300, 450) + 25.0*game.skill)
+    return enemy(IHK, loc=dropin(), power=randreal(300,450)+25.0*game.skill)
 
 def newqad(shutup):
     # set up a new state of quadrant, for when we enter or re-enter it 
@@ -6194,8 +6151,6 @@
     game.inorbit = False
     game.landed = False
     game.ientesc = False
-    global iqengry
-    iqengry = False
     game.iseenit = False
     if game.iscate:
 	# Attempt to escape Super-commander, so tbeam back!
@@ -6214,7 +6169,7 @@
     if q.klingons:
 	# Position ordinary Klingons
 	for i in range(game.klhere):
-	    game.enemies.append(newkling())
+            newkling()
 	# If we need a commander, promote a Klingon
 	for i in range(game.state.remcom):
 	    if game.state.kcmdr[i] == game.quadrant:
@@ -6232,8 +6187,7 @@
 	    game.ishere = True
     # Put in Romulans if needed
     for i in range(game.klhere, game.nenhere):
-        game.enemies.append(enemy(loc=dropin(IHR),
-                                  power=randreal(400.0,850.0)+50.0*game.skill))
+        enemy(IHR, loc=dropin(), power=randreal(400.0,850.0)+50.0*game.skill)
     # If quadrant needs a starbase, put it in
     if q.starbase:
 	game.base = dropin(IHB)
@@ -6246,9 +6200,6 @@
 	    game.plnet = dropin(IHW)
     # Check for condition
     newcnd()
-    # And finally the stars
-    for i in range(q.stars):
-	dropin(IHSTAR)
     # Check for RNZ
     if game.irhere > 0 and game.klhere == 0:
 	game.neutz = True
@@ -6262,11 +6213,8 @@
     if shutup==0:
 	# Put in THING if needed
 	if thing == game.quadrant:
-	    e = enemy(dropin(IHQUEST))
-	    e.kdist = e.kavgd = distance(game.sector, e.kloc)
-	    e.kpower = randreal(6000,6500.0)+250.0*game.skill
-            games.enemies.append(e)
-	    game.nenhere += 1
+	    enemy(symbol=IHQUEST, loc=dropin(),
+                      power=randreal(6000,6500.0)+250.0*game.skill)
 	    if not damaged(DSRSENS):
 		skip(1)
 		prout(_("Mr. Spock- \"Captain, this is most unusual."))
@@ -6276,16 +6224,14 @@
 	if (game.skill < SKILL_GOOD and withprob(0.02)) or \
 	    (game.skill == SKILL_GOOD and withprob(0.05)) or \
             (game.skill > SKILL_GOOD and withprob(0.08)):
-            game.tholian = coord()
+            w = coord()
             while True:
-		game.tholian.x = withprob(0.5) * (QUADSIZE-1)
-		game.tholian.y = withprob(0.5) * (QUADSIZE-1)
-                if game.quad[game.tholian.x][game.tholian.y] == IHDOT:
+		w.x = withprob(0.5) * (QUADSIZE-1)
+		w.y = withprob(0.5) * (QUADSIZE-1)
+                if game.quad[w.x][w.y] == IHDOT:
                     break
-	    game.quad[game.tholian.x][game.tholian.y] = IHT
-            game.enemies.append(loc=game.tholian,
-                                power=randrange(100, 500) + 25.0*game.skill)
-	    game.nenhere += 1
+            game.tholian = enemy(symbol=IHT, loc=w,
+                                 power=randrange(100, 500) + 25.0*game.skill)
 	    # Reserve unoccupied corners 
 	    if game.quad[0][0]==IHDOT:
 		game.quad[0][0] = 'X'
@@ -6296,6 +6242,9 @@
 	    if game.quad[QUADSIZE-1][QUADSIZE-1]==IHDOT:
 		game.quad[QUADSIZE-1][QUADSIZE-1] = 'X'
     game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
+    # And finally the stars
+    for i in range(q.stars):
+	dropin(IHSTAR)
     # Put in a few black holes
     for i in range(1, 3+1):
 	if withprob(0.5): 
@@ -6813,11 +6762,11 @@
 
 if __name__ == '__main__':
     try:
-        global line, thing, game, idebug, iqengry
+        global line, thing, game, idebug
         game = citem = aaitem = inqueue = None
         line = ''
         thing = coord()
-        iqengry = False
+        thing.angry = False
         game = gamestate()
         idebug = 0
         game.options = OPTION_ALL &~ (OPTION_IOMODES | OPTION_PLAIN | OPTION_ALMY)



From esr at mail.berlios.de  Fri Oct  6 20:48:33 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 6 Oct 2006 20:48:33 +0200
Subject: [Sst-commit-watch] r695 - trunk/src
Message-ID: <200610061848.k96ImXvo017560@sheep.berlios.de>

Author: esr
Date: 2006-10-06 20:48:32 +0200 (Fri, 06 Oct 2006)
New Revision: 695

Modified:
   trunk/src/sst.py
Log:
Refactor code to refer to enemy objects.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-06 18:14:08 UTC (rev 694)
+++ trunk/src/sst.py	2006-10-06 18:48:32 UTC (rev 695)
@@ -622,7 +622,7 @@
 
 # Code from ai.c begins here
 
-def tryexit(look, ienm, loccom, irun):
+def tryexit(enemy, look, irun):
     # a bad guy attempts to bug out 
     iq = coord()
     iq.x = game.quadrant.x+(look.x+(QUADSIZE-1))/QUADSIZE - 1
@@ -631,11 +631,11 @@
 	game.state.galaxy[iq.x][iq.y].supernova or \
 	game.state.galaxy[iq.x][iq.y].klingons > MAXKLQUAD-1:
 	return False; # no can do -- neg energy, supernovae, or >MAXKLQUAD-1 Klingons 
-    if ienm == IHR:
+    if enemy.type == IHR:
 	return False; # Romulans cannot escape! 
     if not irun:
 	# avoid intruding on another commander's territory 
-	if ienm == IHC:
+	if enemy.type == IHC:
 	    for n in range(game.state.remcom):
 		if game.state.kcmdr[n] == iq:
 		    return False
@@ -643,23 +643,23 @@
 	    if game.battle == game.quadrant:
 		return False
 	# don't leave if over 1000 units of energy 
-	if game.enemies[loccom].kpower > 1000.0:
+	if enemy.kpower > 1000.0:
 	    return False
     # print escape message and move out of quadrant.
     # we know this if either short or long range sensors are working
     if not damaged(DSRSENS) or not damaged(DLRSENS) or \
-	game.condition == docked:
-	crmena(True, ienm, "sector", game.enemies[loccom].kloc)
+	game.condition == "docked":
+	crmena(True, enemy.type, "sector", enemy.kloc)
 	prout(_(" escapes to Quadrant %s (and regains strength).") % q)
     # handle local matters related to escape
-    game.enemies[loccom].move(None)
+    enemy.move(None)
     game.klhere -= 1
-    if game.condition != docked:
+    if game.condition != "docked":
 	newcnd()
     # Handle global matters related to escape 
     game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons -= 1
     game.state.galaxy[iq.x][iq.y].klingons += 1
-    if ienm==IHS:
+    if enemy.type==IHS:
 	game.ishere = False
 	game.iscate = False
 	game.ientesc = False
@@ -715,7 +715,7 @@
 # 5.  Motion is limited to skill level, except for SC hi-tailing it out.
 # 
 
-def movebaddy(com, loccom, ienm):
+def movebaddy(enemy):
     # tactical movement for the bad guys 
     next = coord(); look = coord()
     irun = False
@@ -724,17 +724,16 @@
 	nbaddys = ((game.comhere*2 + game.ishere*2+game.klhere*1.23+game.irhere*1.5)/2.0)
     else:
 	nbaddys = game.comhere + game.ishere
-
-    dist1 = game.enemies[loccom].kdist
+    dist1 = enemy.kdist
     mdist = int(dist1 + 0.5); # Nearest integer distance 
     # If SC, check with spy to see if should hi-tail it 
-    if ienm==IHS and \
-	(game.enemies[loccom].kpower <= 500.0 or (game.condition=="docked" and not damaged(DPHOTON))):
+    if enemy.type==IHS and \
+	(enemy.kpower <= 500.0 or (game.condition=="docked" and not damaged(DPHOTON))):
 	irun = True
 	motion = -QUADSIZE
     else:
 	# decide whether to advance, retreat, or hold position 
-	forces = game.enemies[loccom].kpower+100.0*len(game.enemies)+400*(nbaddys-1)
+	forces = enemy.kpower+100.0*len(game.enemies)+400*(nbaddys-1)
 	if not game.shldup:
 	    forces += 1000; # Good for enemy if shield is down! 
 	if not damaged(DPHASER) or not damaged(DPHOTON):
@@ -782,11 +781,11 @@
     if idebug:
 	proutn("NSTEPS = %d:" % nsteps)
     # Compute preferred values of delta X and Y 
-    mx = game.sector.x - com.x
-    my = game.sector.y - com.y
+    mx = game.sector.x - enemy.kloc.x
+    my = game.sector.y - enemy.kloc.y
     if 2.0 * abs(mx) < abs(my):
 	mx = 0
-    if 2.0 * abs(my) < abs(game.sector.x-com.x):
+    if 2.0 * abs(my) < abs(game.sector.x-enemy.kloc.x):
 	my = 0
     if mx != 0:
         if mx*motion < 0:
@@ -798,7 +797,7 @@
             my = -1
         else:
             my = 1
-    next = com
+    next = enemy.kloc
     # main move loop 
     for ll in range(nsteps):
 	if idebug:
@@ -819,24 +818,24 @@
 	while attempts < 20 and not success:
             attempts += 1
 	    if look.x < 0 or look.x >= QUADSIZE:
-		if motion < 0 and tryexit(look, ienm, loccom, irun):
+		if motion < 0 and tryexit(enemy, look, irun):
 		    return
 		if krawlx == mx or my == 0:
 		    break
 		look.x = next.x + krawlx
 		krawlx = -krawlx
 	    elif look.y < 0 or look.y >= QUADSIZE:
-		if motion < 0 and tryexit(look, ienm, loccom, irun):
+		if motion < 0 and tryexit(enemy, look, irun):
 		    return
 		if krawly == my or mx == 0:
 		    break
 		look.y = next.y + krawly
 		krawly = -krawly
 	    elif (game.options & OPTION_RAMMING) and game.quad[look.x][look.y] != IHDOT:
-		# See if we should ram ship 
+		# See if enemy should ram ship 
 		if game.quad[look.x][look.y] == game.ship and \
-		    (ienm == IHC or ienm == IHS):
-		    ram(True, ienm, com)
+		    (enemy.type == IHC or enemy.type == IHS):
+		    collision(rammed=True, enemy=enemy)
 		    return
 		if krawlx != mx and my != 0:
 		    look.x = next.x + krawlx
@@ -854,21 +853,20 @@
 		proutn(`next`)
 	else:
 	    break; # done early 
-	
     if idebug:
 	skip(1)
     # Put commander in place within same quadrant 
-    game.quad[com.x][com.y] = IHDOT
-    game.quad[next.x][next.y] = ienm
-    if next != com:
+    game.quad[enemy.kloc.x][enemy.kloc.y] = IHDOT
+    game.quad[next.x][next.y] = enemy.type
+    if next != enemy.kloc:
 	# it moved 
-	game.enemies[loccom].kloc = next
-	game.enemies[loccom].kdist = game.enemies[loccom].kavgd = distance(game.sector, next)
-	if not damaged(DSRSENS) or game.condition == docked:
+	enemy.kloc = next
+	enemy.kdist = enemy.kavgd = distance(game.sector, next)
+	if not damaged(DSRSENS) or game.condition == "docked":
 	    proutn("***")
-	    cramen(ienm)
-	    proutn(_(" from Sector %s") % com)
-	    if game.enemies[loccom].kdist < dist1:
+	    cramen(enemy.type)
+	    proutn(_(" from Sector %s") % enemy.kloc)
+	    if enemy.kdist < dist1:
 		proutn(_(" advances to "))
 	    else:
 		proutn(_(" retreats to "))
@@ -881,22 +879,21 @@
     # Figure out which Klingon is the commander (or Supercommander)
     # and do move
     if game.comhere:
-        for (i, e) in enumerate(game.enemies):
-	    if game.quad[e.kloc.x][e.kloc.y] == IHC:
-		movebaddy(e.kloc, i, IHC)
-		break
+        for enemy in game.enemies:
+	    if enemy.type == IHC:
+		movebaddy(enemy)
     if game.ishere:
-        for (i, e) in enumerate(game.enemies):
-	    if game.quad[e.kloc.x][e.kloc.y] == IHS:
-		movebaddy(e.kloc, i, IHS)
+        for enemy in game.enemies:
+	    if enemy.type == IHS:
+		movebaddy(enemy)
 		break
     # If skill level is high, move other Klingons and Romulans too!
     # Move these last so they can base their actions on what the
     # commander(s) do.
     if game.skill >= SKILL_EXPERT and (game.options & OPTION_MVBADDY):
-        for (i, e) in enumerate(game.enemies):
-            if game.quad[e.kloc.x][e.kloc.y] in (IHK, IHR):
-		movebaddy(e.kloc, i, game.quad[e.kloc.x][e.kloc.y])
+        for enemy in game.enemies:
+            if enemy.type in (IHK, IHR):
+		movebaddy(enemy)
     game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
 
 def movescom(iq, avoid):
@@ -923,12 +920,12 @@
 	game.ishere = False
 	game.ientesc = False
 	unschedule(FSCDBAS)
-	for e in game.enemies:
-	    if game.quad[e.kloc.x][e.kloc.y] == IHS:
+	for enemy in game.enemies:
+	    if enemy.type == IHS:
 		break
-	game.enemies[i].move(None)
+	enemy.move(None)
 	game.klhere -= 1
-	if game.condition!=docked:
+	if game.condition != "docked":
 	    newcnd()
         game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
     # check for a helpful planet 
@@ -1284,24 +1281,24 @@
 	    return i
     return None;	# we should never get here
 
-def ram(ibumpd, ienm, w):
-    # make our ship ram something 
+def collision(rammed, enemy):
+    # collision handling
     prouts(_("***RED ALERT!  RED ALERT!"))
     skip(1)
     prout(_("***COLLISION IMMINENT."))
     skip(2)
     proutn("***")
     crmshp()
-    hardness = {IHR:1.5, IHC:2.0, IHS:2.5, IHT:0.5, IHQUEST:4.0}.get(ienm, 1.0)
-    if ibumpd:
+    hardness = {IHR:1.5, IHC:2.0, IHS:2.5, IHT:0.5, IHQUEST:4.0}.get(enemy.type, 1.0)
+    if rammed:
         proutn(_(" rammed by "))
     else:
         proutn(_(" rams "))
-    crmena(False, ienm, "sector", w)
-    if ibumpd:
+    crmena(False, enemy.type, "sector", enemy.kloc)
+    if rammed:
 	proutn(_(" (original position)"))
     skip(1)
-    deadkl(w, ienm, game.sector)
+    deadkl(enemy.kloc, enemy.type, game.sector)
     proutn("***")
     crmshp()
     prout(_(" heavily damaged."))
@@ -3627,9 +3624,9 @@
                 elif line[0] != "#":
                     break
 	else:
-	    line = raw_input()
+	    line = raw_input() + "\n"
     if logfp:
-	logfp.write("$" + line + "\n")
+	logfp.write(line)
     return line
 
 def setwnd(wnd):
@@ -3939,7 +3936,10 @@
 		game.dist = distance(game.sector, w) / (QUADSIZE * 1.0)
                 if iquad in (IHT, IHK, IHC, IHS, IHR, IHQUEST):
 		    game.sector = w
-		    ram(False, iquad, game.sector)
+                    for enemy in game.enemies:
+                        if enemy.kloc == game.sector:
+                            break
+		    collision(rammed=False, enemy=enemy)
 		    final = game.sector
 		elif iquad == IHBLANK:
 		    skip(1)



From esr at mail.berlios.de  Fri Oct  6 21:00:28 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 6 Oct 2006 21:00:28 +0200
Subject: [Sst-commit-watch] r696 - trunk/src
Message-ID: <200610061900.k96J0SUV018939@sheep.berlios.de>

Author: esr
Date: 2006-10-06 21:00:27 +0200 (Fri, 06 Oct 2006)
New Revision: 696

Modified:
   trunk/src/sst.py
Log:
More code slimming.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-06 18:48:32 UTC (rev 695)
+++ trunk/src/sst.py	2006-10-06 19:00:27 UTC (rev 696)
@@ -424,6 +424,7 @@
         self.kpower = power	# enemy energy level
         game.enemies.append(self)
     def move(self, loc):
+        motion = (loc != self.kloc)
         if self.kloc.x is not None and self.kloc.y is not None:
             game.quad[self.kloc.x][self.kloc.y] = IHDOT
         if loc:
@@ -434,6 +435,7 @@
             self.kloc = coord()	# enemy sector location
             self.kdist = self.kavgd = None
             game.enemies.remove(self)
+        return motion
     def __repr__(self):
         return "<%s=%f>" % (self.kloc, self.kpower)	# For debugging
 
@@ -781,35 +783,33 @@
     if idebug:
 	proutn("NSTEPS = %d:" % nsteps)
     # Compute preferred values of delta X and Y 
-    mx = game.sector.x - enemy.kloc.x
-    my = game.sector.y - enemy.kloc.y
-    if 2.0 * abs(mx) < abs(my):
-	mx = 0
-    if 2.0 * abs(my) < abs(game.sector.x-enemy.kloc.x):
-	my = 0
-    if mx != 0:
-        if mx*motion < 0:
-            mx = -1
+    m = game.sector - enemy.kloc
+    if 2.0 * abs(m.x) < abs(m.y):
+	m.x = 0
+    if 2.0 * abs(m.y) < abs(game.sector.x-enemy.kloc.x):
+	m.y = 0
+    if m.x != 0:
+        if m.x*motion < 0:
+            m.x = -1
         else:
-            mx = 1
-    if my != 0:
-        if my*motion < 0:
-            my = -1
+            m.x = 1
+    if m.y != 0:
+        if m.y*motion < 0:
+            m.y = -1
         else:
-            my = 1
+            m.y = 1
     next = enemy.kloc
     # main move loop 
     for ll in range(nsteps):
 	if idebug:
 	    proutn(" %d" % (ll+1))
 	# Check if preferred position available 
-	look.x = next.x + mx
-	look.y = next.y + my
-        if mx < 0:
+	look = next + m
+        if m.x < 0:
             krawlx = 1
         else:
             krawlx = -1
-        if my < 0:
+        if m.y < 0:
             krawly = 1
         else:
             krawly = -1
@@ -820,14 +820,14 @@
 	    if look.x < 0 or look.x >= QUADSIZE:
 		if motion < 0 and tryexit(enemy, look, irun):
 		    return
-		if krawlx == mx or my == 0:
+		if krawlx == m.x or m.y == 0:
 		    break
 		look.x = next.x + krawlx
 		krawlx = -krawlx
 	    elif look.y < 0 or look.y >= QUADSIZE:
 		if motion < 0 and tryexit(enemy, look, irun):
 		    return
-		if krawly == my or mx == 0:
+		if krawly == m.y or m.x == 0:
 		    break
 		look.y = next.y + krawly
 		krawly = -krawly
@@ -837,10 +837,10 @@
 		    (enemy.type == IHC or enemy.type == IHS):
 		    collision(rammed=True, enemy=enemy)
 		    return
-		if krawlx != mx and my != 0:
+		if krawlx != m.x and m.y != 0:
 		    look.x = next.x + krawlx
 		    krawlx = -krawlx
-		elif krawly != my and mx != 0:
+		elif krawly != m.y and m.x != 0:
 		    look.y = next.y + krawly
 		    krawly = -krawly
 		else:
@@ -855,13 +855,7 @@
 	    break; # done early 
     if idebug:
 	skip(1)
-    # Put commander in place within same quadrant 
-    game.quad[enemy.kloc.x][enemy.kloc.y] = IHDOT
-    game.quad[next.x][next.y] = enemy.type
-    if next != enemy.kloc:
-	# it moved 
-	enemy.kloc = next
-	enemy.kdist = enemy.kavgd = distance(game.sector, next)
+    if enemy.move(next):
 	if not damaged(DSRSENS) or game.condition == "docked":
 	    proutn("***")
 	    cramen(enemy.type)



From esr at mail.berlios.de  Fri Oct  6 22:15:42 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 6 Oct 2006 22:15:42 +0200
Subject: [Sst-commit-watch] r697 - trunk/src
Message-ID: <200610062015.k96KFggc026681@sheep.berlios.de>

Author: esr
Date: 2006-10-06 22:15:41 +0200 (Fri, 06 Oct 2006)
New Revision: 697

Modified:
   trunk/src/sst.py
Log:
Ready to start making the curses interface work.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-06 19:00:27 UTC (rev 696)
+++ trunk/src/sst.py	2006-10-06 20:15:41 UTC (rev 697)
@@ -200,6 +200,7 @@
 MAXKLQUAD	= 9
 FULLCREW	= 428	# BSD Trek was 387, that's wrong 
 FOREVER 	= 1e30
+MAXBURST	= 3
 
 # These functions hide the difference between 0-origin and 1-origin addressing.
 def VALID_QUADRANT(x, y):	return ((x)>=0 and (x)<GALSIZE and (y)>=0 and (y)<GALSIZE)
@@ -1322,16 +1323,16 @@
 	finish(FWON)
     return
 
-def torpedo(course, r, incoming, i, n):
+def torpedo(course, dispersion, origin, number, nburst):
     # let a photon torpedo fly 
     iquad = 0
     shoved = False
-    ac = course + 0.25*r
+    ac = course + 0.25*dispersion
     angle = (15.0-ac)*0.5235988
     bullseye = (15.0 - course)*0.5235988
     deltax = -math.sin(angle);
     deltay = math.cos(angle);
-    x = incoming.x; y = incoming.y
+    x = origin.x; y = origin.y
     w = coord(); jw = coord()
     w.x = w.y = jw.x = jw.y = 0
     bigger = max(math.fabs(deltax), math.fabs(deltay))
@@ -1342,7 +1343,7 @@
     else: 
 	setwnd(message_window)
     # Loop to move a single torpedo 
-    for l in range(1, 15+1):
+    for step in range(1, 15+1):
 	x += deltax
 	w.x = int(x + 0.5)
 	y += deltay
@@ -1350,7 +1351,7 @@
 	if not VALID_SECTOR(w.x, w.y):
 	    break
 	iquad=game.quad[w.x][w.y]
-	tracktorpedo(w, l, i, n, iquad)
+	tracktorpedo(w, step, number, nburst, iquad)
 	if iquad==IHDOT:
 	    continue
 	# hit something 
@@ -1363,7 +1364,7 @@
 	    crmshp()
 	    prout(".")
 	    hit = 700.0 + randreal(100) - \
-		1000.0 * distance(w, incoming) * math.fabs(math.sin(bullseye-angle))
+		1000.0 * distance(w, origin) * math.fabs(math.sin(bullseye-angle))
 	    newcnd(); # we're blown out of dock 
 	    # We may be displaced. 
 	    if game.landed or game.condition=="docked":
@@ -1400,7 +1401,7 @@
 		    break
 	    kp = math.fabs(e.kpower)
 	    h1 = 700.0 + randrange(100) - \
-		1000.0 * distance(w, incoming) * math.fabs(math.sin(bullseye-angle))
+		1000.0 * distance(w, origin) * math.fabs(math.sin(bullseye-angle))
 	    h1 = math.fabs(h1)
 	    if kp < h1:
 		h1 = kp
@@ -1419,8 +1420,8 @@
 		temp = math.fabs(math.cos(ang))
 	    xx = -math.sin(ang)/temp
 	    yy = math.cos(ang)/temp
-	    jw.x=w.x+xx+0.5
-	    jw.y=w.y+yy+0.5
+	    jw.x = int(w.x+xx+0.5)
+	    jw.y = int(w.y+yy+0.5)
 	    if not VALID_SECTOR(jw.x, jw.y):
 		prout(_(" damaged but not destroyed."))
 		return
@@ -1517,7 +1518,7 @@
 	    return None
 	elif iquad == IHT:  # Hit a Tholian 
 	    h1 = 700.0 + randrange(100) - \
-		1000.0 * distance(w, incoming) * math.fabs(math.sin(bullseye-angle))
+		1000.0 * distance(w, origin) * math.fabs(math.sin(bullseye-angle))
 	    h1 = math.fabs(h1)
 	    if h1 >= 600:
 		game.quad[w.x][w.y] = IHDOT
@@ -1652,9 +1653,9 @@
 		crmena(False, enemy.type, where, enemy.kloc)
 	    attempt = True
 	    prout("  ")
-	    r = (randreal()+randreal())*0.5 - 0.5
-	    r += 0.002*enemy.kpower*r
-	    hit = torpedo(course, r, enemy.kloc, 1, 1)
+	    dispersion = (randreal()+randreal())*0.5 - 0.5
+	    dispersion += 0.002*enemy.kpower*dispersion
+	    hit = torpedo(course, dispersion, origin=enemy.kloc, number=1, nburst=1)
 	    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
 		finish(FWON); # Klingons did themselves in! 
 	    if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova or game.alldone:
@@ -1789,13 +1790,13 @@
 	    break
     return
 
-def targetcheck(x, y):
+def targetcheck(w):
     # Return None if target is invalid 
-    if not VALID_SECTOR(x, y):
+    if not VALID_SECTOR(w.x, w.y):
 	huh()
 	return None
-    deltx = 0.1*(y - game.sector.y)
-    delty = 0.1*(x - game.sector.x)
+    deltx = 0.1*(w.y - game.sector.y)
+    delty = 0.1*(w.x - game.sector.x)
     if deltx==0 and delty== 0:
 	skip(1)
 	prout(_("Spock-  \"Bridge to sickbay.  Dr. McCoy,"))
@@ -1830,56 +1831,58 @@
 	    if n <= 0: # abort command 
 		chew()
 		return
-	    if n > 3:
+	    if n > MAXBURST:
 		chew()
-		prout(_("Maximum of 3 torpedoes per burst."))
+		prout(_("Maximum of %d torpedoes per burst.") % MAXBURST)
 		key = IHEOL
 		return
 	    if n <= game.torps:
 		break
 	    chew()
 	    key = IHEOL
-    for i in range(1, n+1):
+    targ = []
+    for i in range(MAXBURST):
+        targ.append(coord())
+    for i in range(n):
 	key = scan()
+	if i==0 and key == IHEOL:
+	    break;	# we will try prompting 
 	if i==1 and key == IHEOL:
-	    break;	# we will try prompting 
-	if i==2 and key == IHEOL:
 	    # direct all torpedoes at one target 
 	    while i <= n:
-		targ[i][1] = targ[1][1]
-		targ[i][2] = targ[1][2]
-		course[i] = course[1]
+		targ[i] = targ[0]
+		course[i] = course[0]
 		i += 1
 	    break
 	if key != IHREAL:
 	    huh()
 	    return
-	targ[i][1] = aaitem
+	targ[i].x = aaitem
 	key = scan()
 	if key != IHREAL:
 	    huh()
 	    return
-	targ[i][2] = aaitem
-	course[i] = targetcheck(targ[i][1], targ[i][2])
+	targ[i].y = aaitem
+	course[i] = targetcheck(targ[i])
         if course[i] == None:
 	    return
     chew()
     if i == 1 and key == IHEOL:
 	# prompt for each one 
-	for i in range(1, n+1):
-	    proutn(_("Target sector for torpedo number %d- ") % i)
+	for i in range(n):
+	    proutn(_("Target sector for torpedo number %d- ") % (i+1))
 	    key = scan()
 	    if key != IHREAL:
 		huh()
 		return
-	    targ[i][1] = int(aaitem-0.5)
+	    targ[i].x = int(aaitem-0.5)
 	    key = scan()
 	    if key != IHREAL:
 		huh()
 		return
-	    targ[i][2] = int(aaitem-0.5)
+	    targ[i].y = int(aaitem-0.5)
 	    chew()
-            course[i] = targetcheck(targ[i][1], targ[i][2])
+            course[i] = targetcheck(targ[i])
             if course[i] == None:
                 return
     game.ididit = True
@@ -1887,10 +1890,10 @@
     for i in range(n):
 	if game.condition != "docked":
 	    game.torps -= 1
-	r = (randreal()+randreal())*0.5 -0.5
-	if math.fabs(r) >= 0.47:
+	dispersion = (randreal()+randreal())*0.5 -0.5
+	if math.fabs(dispersion) >= 0.47:
 	    # misfire! 
-	    r *= randreal(1.2, 2.2)
+	    dispersion *= randreal(1.2, 2.2)
 	    if n > 0:
 		prouts(_("***TORPEDO NUMBER %d MISFIRES") % (i+1))
 	    else:
@@ -1903,8 +1906,8 @@
 		game.damage[DPHOTON] = game.damfac * randreal(1.0, 3.0)
 	    break
 	if game.shldup or game.condition == "docked":
-	    r *= 1.0 + 0.0001*game.shield
-	torpedo(course[i], r, game.sector, i, n)
+	    dispersion *= 1.0 + 0.0001*game.shield
+	torpedo(course[i], dispersion, origin=game.sector, number=i, nburst=n)
 	if game.alldone or game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
 	    return
     if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
@@ -2342,7 +2345,7 @@
         newqad(False)
         # Adjust finish time to time of tractor beaming 
         fintim = game.state.date+game.optime
-        attack(False)
+        attack(torps_ok=False)
         if game.state.remcom <= 0:
             unschedule(FTBEAM)
         else: 
@@ -2735,7 +2738,7 @@
 		temp = rtime
 	    game.optime = temp
 	if game.optime < delay:
-	    attack(False)
+	    attack(torps_ok=False)
 	if game.alldone:
 	    return
 	events()
@@ -3746,27 +3749,27 @@
 	#nosound()
         pass
 
-def tracktorpedo(w, l, i, n, iquad):
+def tracktorpedo(w, step, i, n, iquad):
     "Torpedo-track animation." 
     if not game.options & OPTION_CURSES:
-	if l == 1:
+	if step == 1:
 	    if n != 1:
 		skip(1)
 		proutn(_("Track for torpedo number %d-  ") % i)
 	    else:
 		skip(1)
 		proutn(_("Torpedo track- "))
-	elif l==4 or l==9: 
+	elif step==4 or step==9: 
 	    skip(1)
-	proutn("%d - %d   " % (w.x, w.y))
+	proutn("%s   " % w)
     else:
 	if not damaged(DSRSENS) or game.condition=="docked":
-	    if i != 1 and l == 1:
+	    if i != 0 and step == 1:
 		drawmaps(2)
 		time.sleep(0.4)
 	    if (iquad==IHDOT) or (iquad==IHBLANK):
 		put_srscan_sym(w, '+')
-		#sound(l*10)
+		#sound(step*10)
 		#time.sleep(0.1)
 		#nosound()
 		put_srscan_sym(w, iquad)
@@ -3779,7 +3782,7 @@
 		curwnd.attroff(curses.A_REVERSE)
 		put_srscan_sym(w, iquad)
 	else:
-	    proutn("%d - %d   " % (w.x, w.y))
+	    proutn("%s   " % w)
 
 def makechart():
     "Display the current galaxy chart."
@@ -3821,7 +3824,7 @@
                 game.enemies[m].kdist = finald
             game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
             if not game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
-                attack(False)
+                attack(torps_ok=False)
             for m in range(game.nenhere):
                 game.enemies[m].kavgd = game.enemies[m].kdist
         newcnd()
@@ -3871,7 +3874,7 @@
 		    # are present and your skill is good.
 		    # 
 		    if game.skill > SKILL_GOOD and game.klhere > 0 and not game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
-			attack(False)
+			attack(torps_ok=False)
 		    if game.alldone:
 			return
 		# compute final position -- new quadrant and sector 
@@ -3921,7 +3924,7 @@
 		game.quad[game.sector.x][game.sector.y] = game.ship
 		newqad(False)
 		if game.skill>SKILL_NOVICE:
-		    attack(False)  
+		    attack(torps_ok=False)  
 		return
 	    iquad = game.quad[w.x][w.y]
 	    if iquad != IHDOT:
@@ -5991,7 +5994,7 @@
     if game.nenhere - (thing == game.quadrant) - (game.tholian != None):
 	game.shldup = True
     if game.neutz:	# bad luck to start in a Romulan Neutral Zone
-	attack(False)
+	attack(torps_ok=False)
 
 def choose(needprompt):
     # choose your game type
@@ -6445,7 +6448,7 @@
 	elif cmd == "DOCK":		# dock at starbase
 	    dock(True)
 	    if game.ididit:
-		attack(False)		
+		attack(torps_ok=False)		
 	elif cmd == "DAMAGES":		# damage reports
 	    damagereport()
 	elif cmd == "CHART":		# chart
@@ -6530,7 +6533,7 @@
 		atover(False)
 		continue
 	    if hitme and not game.justin:
-		attack(True)
+		attack(torps_ok=True)
 		if game.alldone:
 		    break
 		if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:



From esr at mail.berlios.de  Sat Oct  7 06:33:04 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sat, 7 Oct 2006 06:33:04 +0200
Subject: [Sst-commit-watch] r698 - trunk/src
Message-ID: <200610070433.k974X43l026480@sheep.berlios.de>

Author: esr
Date: 2006-10-07 06:33:02 +0200 (Sat, 07 Oct 2006)
New Revision: 698

Modified:
   trunk/src/sst.py
Log:
Preparation for making curses interface work in Python.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-06 20:15:41 UTC (rev 697)
+++ trunk/src/sst.py	2006-10-07 04:33:02 UTC (rev 698)
@@ -3511,6 +3511,7 @@
 	#noecho()
         global fullscreen_window, srscan_window, report_window, status_window
         global lrscan_window, message_window, prompt_window
+        (rows, columns)   = stdscr.getmaxyx()
 	fullscreen_window = stdscr
 	srscan_window     = curses.newwin(12, 25, 0,       0)
 	report_window     = curses.newwin(11, 0,  1,       25)
@@ -3522,8 +3523,12 @@
 	setwnd(fullscreen_window)
 	textcolor(DEFAULT)
 
+def ioend():
+    "Wrap up I/O.  Presently a stub."
+    pass
+
 def waitfor():
-    "wait for user action -- OK to do nothing if on a TTY"
+    "Wait for user action -- OK to do nothing if on a TTY"
     if game.options & OPTION_CURSES:
 	stsdcr.getch()
 
@@ -6210,7 +6215,7 @@
     if shutup==0:
 	# Put in THING if needed
 	if thing == game.quadrant:
-	    enemy(symbol=IHQUEST, loc=dropin(),
+	    enemy(type=IHQUEST, loc=dropin(),
                       power=randreal(6000,6500.0)+250.0*game.skill)
 	    if not damaged(DSRSENS):
 		skip(1)
@@ -6227,7 +6232,7 @@
 		w.y = withprob(0.5) * (QUADSIZE-1)
                 if game.quad[w.x][w.y] == IHDOT:
                     break
-            game.tholian = enemy(symbol=IHT, loc=w,
+            game.tholian = enemy(type=IHT, loc=w,
                                  power=randrange(100, 500) + 25.0*game.skill)
 	    # Reserve unoccupied corners 
 	    if game.quad[0][0]==IHDOT:
@@ -6810,35 +6815,38 @@
             logfp.write("# seed %s\n" % seed)
             logfp.write("# options %s\n" % " ".join(arguments))
         random.seed(seed)
-        iostart()
         if arguments:
             inqueue = arguments
         else:
             inqueue = None
-        while True: # Play a game 
-            setwnd(fullscreen_window)
-            clrscr()
-            prelim()
-            setup(needprompt=not inqueue)
-            if game.alldone:
-                score()
-                game.alldone = False
-            else:
-                makemoves()
+        try:
+            iostart()
+            while True: # Play a game 
+                setwnd(fullscreen_window)
+                clrscr()
+                prelim()
+                setup(needprompt=not inqueue)
+                if game.alldone:
+                    score()
+                    game.alldone = False
+                else:
+                    makemoves()
+                skip(1)
+                stars()
+                skip(1)
+                if game.tourn and game.alldone:
+                    proutn(_("Do you want your score recorded?"))
+                    if ja() == True:
+                        chew2()
+                        freeze(False)
+                chew()
+                proutn(_("Do you want to play again? "))
+                if not ja():
+                    break
             skip(1)
-            stars()
-            skip(1)
-            if game.tourn and game.alldone:
-                proutn(_("Do you want your score recorded?"))
-                if ja() == True:
-                    chew2()
-                    freeze(False)
-            chew()
-            proutn(_("Do you want to play again? "))
-            if not ja():
-                break
-        skip(1)
-        prout(_("May the Great Bird of the Galaxy roost upon your home planet."))
+            prout(_("May the Great Bird of the Galaxy roost upon your home planet."))
+        finally:
+            ioend()
         raise SystemExit, 0
     except KeyboardInterrupt:
         print""



From esr at mail.berlios.de  Sat Oct  7 06:47:33 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sat, 7 Oct 2006 06:47:33 +0200
Subject: [Sst-commit-watch] r699 - trunk/src
Message-ID: <200610070447.k974lXxS021144@sheep.berlios.de>

Author: esr
Date: 2006-10-07 06:47:29 +0200 (Sat, 07 Oct 2006)
New Revision: 699

Modified:
   trunk/src/sst.py
Log:
Stub out the color support in the Python version, direct translation
of the C doesn't work.  Also fix an argument-type bug.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-07 04:33:02 UTC (rev 698)
+++ trunk/src/sst.py	2006-10-07 04:47:29 UTC (rev 699)
@@ -581,25 +581,6 @@
 FHOLE = 20
 FCREW = 21
 
-# From enumerated type 'COLORS'
-DEFAULT = 0
-BLACK = 1
-BLUE = 2
-GREEN = 3
-CYAN = 4
-RED = 5
-MAGENTA = 6
-BROWN = 7
-LIGHTGRAY = 8
-DARKGRAY = 9
-LIGHTBLUE = 10
-LIGHTGREEN = 11
-LIGHTCYAN = 12
-LIGHTRED = 13
-LIGHTMAGENTA = 14
-YELLOW = 15
-WHITE = 16
-
 # Log the results of pulling random numbers so we can check determinism.
 
 import traceback
@@ -1721,7 +1702,7 @@
     prout(_("%d%%,   torpedoes left %d") % (percent, game.torps))
     # Check if anyone was hurt 
     if hitmax >= 200 or hittot >= 500:
-	icas = randrange(hittot * 0.015)
+	icas = randrange(int(hittot * 0.015))
 	if icas >= 2:
 	    skip(1)
 	    prout(_("Mc Coy-  \"Sickbay to bridge.  We suffered %d casualties") % icas)
@@ -1824,6 +1805,7 @@
 	    return
 	elif key == IHEOL:
 	    prout(_("%d torpedoes left.") % game.torps)
+            chew()
 	    proutn(_("Number of torpedoes to fire- "))
 	    key = scan()
 	else: # key == IHREAL  {
@@ -1942,7 +1924,7 @@
     prouts(_("Sulu-  \"Captain! Shield malfunction! Phaser fire contained!\""))
     skip(2)
     prout(_("Lt. Uhura-  \"Sir, all decks reporting damage.\""))
-    icas = randrange(hit*0.012)
+    icas = randrange(int(hit*0.012))
     skip(1)
     fry(0.8*hit)
     if icas:
@@ -3523,6 +3505,10 @@
 	setwnd(fullscreen_window)
 	textcolor(DEFAULT)
 
+def textcolor(color):
+    "Set text foreground color.  Presently a stub."
+    pass	# FIXME
+
 def ioend():
     "Wrap up I/O.  Presently a stub."
     pass
@@ -3652,45 +3638,7 @@
        curwnd.move(0, 0)
        curwnd.refresh()
     linecount = 0
-
-def textcolor(color):
-    "Set the current text color"
-    if game.options & OPTION_CURSES:
-	if color == DEFAULT: 
-	    curwnd.attrset(0)
-	elif color == BLACK: 
-	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_BLACK))
-	elif color == BLUE: 
-	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_BLUE))
-	elif color == GREEN: 
-	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_GREEN))
-	elif color == CYAN: 
-	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_CYAN))
-	elif color == RED: 
-	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_RED))
-	elif color == MAGENTA: 
-	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_MAGENTA))
-	elif color == BROWN: 
-	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_YELLOW))
-	elif color == LIGHTGRAY: 
-	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_WHITE))
-	elif color == DARKGRAY: 
-	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_BLACK) | curses.A_BOLD)
-	elif color == LIGHTBLUE: 
-	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_BLUE) | curses.A_BOLD)
-	elif color == LIGHTGREEN: 
-	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_GREEN) | curses.A_BOLD)
-	elif color == LIGHTCYAN: 
-	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_CYAN) | curses.A_BOLD)
-	elif color == LIGHTRED: 
-	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_RED) | curses.A_BOLD)
-	elif color == LIGHTMAGENTA: 
-	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_MAGENTA) | curses.A_BOLD)
-	elif color == YELLOW: 
-	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_YELLOW) | curses.A_BOLD)
-	elif color == WHITE:
-	    curwnd.attron(curses.COLOR_PAIR(curses.COLOR_WHITE) | curses.A_BOLD)
-
+    
 def highvideo():
     "Set highlight video, if this is reasonable."
     if game.options & OPTION_CURSES:
@@ -4647,13 +4595,13 @@
 	proutn(_(" attempt to re-materialize "))
 	crmshp()
 	game.quad[ix][iy]=(IHMATER0,IHMATER1,IHMATER2)[m-1]
-	textcolor(RED)
+	textcolor("red")
 	warble()
 	if randreal() > probf:
 	    break
 	prout(_("fails."))
 	curses.delay_output(500)
-	textcolor(DEFAULT)
+	textcolor(None)
     if m > 3:
 	game.quad[ix][iy]=IHQUEST
 	game.alive = False
@@ -4662,9 +4610,9 @@
 	finish(FMATERIALIZE)
 	return
     game.quad[ix][iy]=game.ship
-    textcolor(GREEN)
+    textcolor("green")
     prout(_("succeeds."))
-    textcolor(DEFAULT)
+    textcolor(None)
     dock(False)
     skip(1)
     prout(_("Lt. Uhura-  \"Captain, we made it!\""))
@@ -5438,15 +5386,15 @@
     # light up an individual dot in a sector 
     if goodScan or (abs(i-game.sector.x)<= 1 and abs(j-game.sector.y) <= 1):
 	if (game.quad[i][j]==IHMATER0) or (game.quad[i][j]==IHMATER1) or (game.quad[i][j]==IHMATER2) or (game.quad[i][j]==IHE) or (game.quad[i][j]==IHF):
-	    if game.condition   == "red": textcolor(RED)
-	    elif game.condition == "green": textcolor(GREEN)
-	    elif game.condition == "yellow": textcolor(YELLOW)
-	    elif game.condition == "docked": textcolor(CYAN)
-	    elif game.condition == "dead": textcolor(BROWN)
+	    if game.condition   == "red": textcolor("red")
+	    elif game.condition == "green": textcolor("green")
+	    elif game.condition == "yellow": textcolor("yellow")
+	    elif game.condition == "docked": textcolor("cyan")
+	    elif game.condition == "dead": textcolor("brown")
 	    if game.quad[i][j] != game.ship: 
 		highvideo()
 	proutn("%c " % game.quad[i][j])
-	textcolor(DEFAULT)
+	textcolor(None)
     else:
 	proutn("- ")
 



From esr at mail.berlios.de  Sat Oct  7 08:40:01 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sat, 7 Oct 2006 08:40:01 +0200
Subject: [Sst-commit-watch] r700 - trunk/src
Message-ID: <200610070640.k976e1Mp029587@sheep.berlios.de>

Author: esr
Date: 2006-10-07 08:40:00 +0200 (Sat, 07 Oct 2006)
New Revision: 700

Modified:
   trunk/src/sst.py
Log:
Clear the new quadeant properly, otherwise we end up with ghost features.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-07 04:47:29 UTC (rev 699)
+++ trunk/src/sst.py	2006-10-07 06:40:00 UTC (rev 700)
@@ -445,7 +445,7 @@
         self.options = None	# Game options
         self.state = snapshot()	# A snapshot structure
         self.snapsht = snapshot()	# Last snapshot taken for time-travel purposes
-        self.quad = fill2d(QUADSIZE, lambda i, j: IHDOT)	# contents of our quadrant
+        self.quad = None	# contents of our quadrant
         self.damage = [0.0] * NDEVICES	# damage encountered
         self.future = []		# future events
         for i in range(NEVENTS):
@@ -1788,7 +1788,8 @@
     return 1.90985932*math.atan2(deltx, delty)
 
 def photon():
-    # launch photon torpedo 
+    # launch photon torpedo
+    course = [0.0] * MAXBURST
     game.ididit = False
     if damaged(DPHOTON):
 	prout(_("Photon tubes damaged."))
@@ -1809,7 +1810,7 @@
 	    proutn(_("Number of torpedoes to fire- "))
 	    key = scan()
 	else: # key == IHREAL  {
-	    n = aaitem + 0.5
+	    n = int(round(aaitem + 0.5))
 	    if n <= 0: # abort command 
 		chew()
 		return
@@ -1941,7 +1942,7 @@
 
 def hittem(hits):
     # register a phaser hit on Klingons and Romulans
-    nenhr2 = game.nenhere; kk=0
+    nenhr2 = len(game.enemies); kk=0
     w = coord()
     skip(1)
     for (k, wham) in enumerate(hits):
@@ -2022,7 +2023,7 @@
 	key=scan()
 	if key == IHALPHA:
 	    if isit("manual"):
-		if game.nenhere==0:
+		if len(game.enemies)==0:
 		    prout(_("There is no enemy present to select."))
 		    chew()
 		    key = IHEOL
@@ -2031,10 +2032,10 @@
 		    automode = "MANUAL"
 		    key = scan()
 	    elif isit("automatic"):
-		if (not itarg) and game.nenhere != 0:
+		if (not itarg) and len(game.enemies) != 0:
 		    automode = "FORCEMAN"
 		else:
-		    if game.nenhere==0:
+		    if len(game.enemies)==0:
 			prout(_("Energy will be expended into space."))
 		    automode = "AUTOMATIC"
 		    key = scan()
@@ -2044,7 +2045,7 @@
 		huh()
 		return
 	elif key == IHREAL:
-	    if game.nenhere==0:
+	    if len(game.enemies)==0:
 		prout(_("Energy will be expended into space."))
 		automode = "AUTOMATIC"
 	    elif not itarg:
@@ -2053,7 +2054,7 @@
 		automode = "AUTOMATIC"
 	else:
 	    # IHEOL 
-	    if game.nenhere==0:
+	    if len(game.enemies)==0:
 		prout(_("Energy will be expended into space."))
 		automode = "AUTOMATIC"
 	    elif not itarg:
@@ -2068,13 +2069,13 @@
 	if key == IHALPHA and isit("no"):
 	    no = True
 	    key = scan()
-	if key != IHREAL and game.nenhere != 0:
+	if key != IHREAL and len(game.enemies) != 0:
 	    prout(_("Phasers locked on target. Energy available: %.2f")%avail)
 	irec=0
         while True:
 	    chew()
 	    if not kz:
-		for i in range(game.nenhere):
+		for i in range(len(game.enemies)):
 		    irec += math.fabs(game.enemies[i].kpower)/(PHASEFAC*math.pow(0.90,game.enemies[i].kdist))*randreal(1.01, 1.06) + 1.0
 	    kz=1
 	    proutn(_("%d units required. ") % irec)
@@ -2104,10 +2105,10 @@
 	chew()
 	game.energy -= rpow
 	extra = rpow
-	if game.nenhere:
+	if len(game.enemies):
 	    extra = 0.0
 	    powrem = rpow
-	    for i in range(game.nenhere):
+	    for i in range(len(game.enemies)):
 		hits.append(0.0)
 		if powrem <= 0:
 		    continue
@@ -2127,7 +2128,7 @@
 	if extra > 0 and not game.alldone:
 	    if game.tholian:
 		proutn(_("*** Tholian web absorbs "))
-		if game.nenhere>0:
+		if len(game.enemies)>0:
 		    proutn(_("excess "))
 		prout(_("phaser energy."))
 	    else:
@@ -2147,7 +2148,7 @@
 	    skip(1)
     elif automode == "MANUAL":
 	rpow = 0.0
-        for k in range(game.nenhere):
+        for k in range(len(game.enemies)):
 	    aim = game.enemies[k].kloc
 	    ienm = game.quad[aim.x][aim.y]
 	    if msgflag:
@@ -2701,7 +2702,7 @@
     origTime = delay = aaitem
     if delay <= 0.0:
 	return
-    if delay >= game.state.remtime or game.nenhere != 0:
+    if delay >= game.state.remtime or len(game.enemies) != 0:
 	proutn(_("Are you sure? "))
 	if ja() == False:
 	    return
@@ -2714,7 +2715,7 @@
 	    prout(_("%d stardates left.") % int(game.state.remtime))
 	    return
 	temp = game.optime = delay
-	if game.nenhere:
+	if len(game.enemies):
 	    rtime = randreal(1.0, 2.0)
 	    if rtime < temp:
 		temp = rtime
@@ -2838,7 +2839,7 @@
                 elif iquad == IHK: # kill klingon 
                     deadkl(neighbor, iquad, neighbor)
                 elif iquad in (IHC,IHS,IHR): # Damage/destroy big enemies 
-                    for ll in range(game.nenhere):
+                    for ll in range(len(game.enemies)):
                         if game.enemies[ll].kloc == neighbor:
                             break
                     game.enemies[ll].kpower -= 800.0 # If firepower is lost, die 
@@ -3050,10 +3051,10 @@
     skip(1)
     stars()
     skip(1)
-    if game.nenhere != 0:
+    if len(game.enemies) != 0:
 	whammo = 25.0 * game.energy
 	l=1
-	while l <= game.nenhere:
+	while l <= len(game.enemies):
 	    if game.enemies[l].kpower*game.enemies[l].kdist <= whammo: 
 		deadkl(game.enemies[l].kloc, game.quad[game.enemies[l].kloc.x][game.enemies[l].kloc.y], game.enemies[l].kloc)
 	    l += 1
@@ -3770,15 +3771,15 @@
     def no_quad_change():
         # No quadrant change -- compute new average enemy distances 
         game.quad[game.sector.x][game.sector.y] = game.ship
-        if game.nenhere:
-            for m in range(game.nenhere):
+        if len(game.enemies):
+            for m in range(len(game.enemies)):
                 finald = distance(w, game.enemies[m].kloc)
                 game.enemies[m].kavgd = 0.5 * (finald+game.enemies[m].kdist)
                 game.enemies[m].kdist = finald
             game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
             if not game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
                 attack(torps_ok=False)
-            for m in range(game.nenhere):
+            for m in range(len(game.enemies)):
                 game.enemies[m].kavgd = game.enemies[m].kdist
         newcnd()
         drawmaps(0)
@@ -3816,9 +3817,9 @@
 	    if not VALID_SECTOR(w.x, w.y):
 		# Leaving quadrant -- allow final enemy attack 
 		# Don't do it if being pushed by Nova 
-		if game.nenhere != 0 and not novapush:
+		if len(game.enemies) != 0 and not novapush:
 		    newcnd()
-		    for m in range(game.nenhere):
+		    for m in range(len(game.enemies)):
 			finald = distance(w, game.enemies[m].kloc)
 			game.enemies[m].kavgd = 0.5 * (finald + game.enemies[m].kdist)
 		    #
@@ -5100,7 +5101,7 @@
     if game.ship != IHE:
 	prout(_("Ye Faerie Queene has no death ray."))
 	return
-    if game.nenhere==0:
+    if len(game.enemies)==0:
 	prout(_("Sulu-  \"But Sir, there are no enemies in this quadrant.\""))
 	return
     if damaged(DDRAY):
@@ -5132,7 +5133,7 @@
     if r > dprob:
 	prouts(_("Sulu- \"Captain!  It's working!\""))
 	skip(2)
-	while game.nenhere > 0:
+	while len(game.enemies) > 0:
 	    deadkl(game.enemies[1].kloc, game.quad[game.enemies[1].kloc.x][game.enemies[1].kloc.y],game.enemies[1].kloc)
 	prout(_("Ensign Chekov-  \"Congratulations, Captain!\""))
 	if (game.state.remkl + game.state.remcom + game.state.nscrem) == 0:
@@ -5493,7 +5494,6 @@
 	    sectscan(goodScan, i, j)
 	skip(1)
 			
-			
 def eta():
     # use computer to get estimated time of arrival for a warp jump 
     w1 = coord(); w2 = coord()
@@ -5944,7 +5944,7 @@
 	prout(_("  YOU'LL NEED IT."))
     waitfor()
     newqad(False)
-    if game.nenhere - (thing == game.quadrant) - (game.tholian != None):
+    if len(game.enemies) - (thing == game.quadrant) - (game.tholian != None):
 	game.shldup = True
     if game.neutz:	# bad luck to start in a Romulan Neutral Zone
 	attack(torps_ok=False)
@@ -6096,12 +6096,13 @@
     game.ishere = False
     game.irhere = 0
     game.iplnet = 0
-    game.nenhere = 0
     game.neutz = False
     game.inorbit = False
     game.landed = False
     game.ientesc = False
     game.iseenit = False
+    # Create a blank quadrant
+    game.quad = fill2d(QUADSIZE, lambda i, j: IHDOT)
     if game.iscate:
 	# Attempt to escape Super-commander, so tbeam back!
 	game.iscate = False
@@ -6112,7 +6113,6 @@
 	return
     game.klhere = q.klingons
     game.irhere = q.romulans
-    game.nenhere = game.klhere + game.irhere
     # Position Starship
     game.quad[game.sector.x][game.sector.y] = game.ship
     game.enemies = []
@@ -6136,7 +6136,7 @@
 	    game.iscate = (game.state.remkl > 1)
 	    game.ishere = True
     # Put in Romulans if needed
-    for i in range(game.klhere, game.nenhere):
+    for i in range(game.klhere, len(game.enemies)):
         enemy(IHR, loc=dropin(), power=randreal(400.0,850.0)+50.0*game.skill)
     # If quadrant needs a starbase, put it in
     if q.starbase:



From stsp at mail.berlios.de  Sat Oct  7 10:32:49 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Sat, 7 Oct 2006 10:32:49 +0200
Subject: [Sst-commit-watch] r701 - branches
Message-ID: <200610070832.k978Wnga004661@sheep.berlios.de>

Author: stsp
Date: 2006-10-07 10:32:49 +0200 (Sat, 07 Oct 2006)
New Revision: 701

Added:
   branches/c-version/
Log:
back-up C-version branch

Copied: branches/c-version (from rev 700, trunk)



From stsp at mail.berlios.de  Sat Oct  7 10:35:57 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Sat, 7 Oct 2006 10:35:57 +0200
Subject: [Sst-commit-watch] r702 - branches/c-version/src
Message-ID: <200610070835.k978ZvKl004951@sheep.berlios.de>

Author: stsp
Date: 2006-10-07 10:35:56 +0200 (Sat, 07 Oct 2006)
New Revision: 702

Removed:
   branches/c-version/src/sst.py
Log:
remove sst.py

Deleted: branches/c-version/src/sst.py
===================================================================
--- branches/c-version/src/sst.py	2006-10-07 08:32:49 UTC (rev 701)
+++ branches/c-version/src/sst.py	2006-10-07 08:35:56 UTC (rev 702)
@@ -1,6801 +0,0 @@
-#!/usr/bin/env python
-"""
-sst.py =-- Super Star Trek in Python
-
-This code is a Python translation of a C translation of a FORTRAN original.
-The FORTRANness still shows in many ways, notably the use of a lot of
-parallel arrays where a more modern language would use structures
-or objects.  (However, 1-origin array indexing was fixed.)
-
-Dave Matuszek says:
-
-SRSCAN, MOVE, PHASERS, CALL, STATUS, IMPULSE, PHOTONS, ABANDON,
-LRSCAN, WARP, SHIELDS, DESTRUCT, CHART, REST, DOCK, QUIT, and DAMAGE
-were in the original non-"super" version of UT FORTRAN Star Trek.
-
-Tholians were not in the original. Dave is dubious about their merits.
-(They are now controlled by OPTION_THOLIAN and turned off if the game
-type is "plain".)
-
-Planets and dilithium crystals were not in the original.  Dave is OK
-with this idea. (It's now controlled by OPTION_PLANETS and turned 
-off if the game type is "plain".)
-
-Dave says the bit about the Galileo getting turned into a
-McDonald's is "consistant with our original vision".  (This has been
-left permanently enabled, as it can only happen if OPTION_PLANETS
-is on.)
-
-Dave also says the Space Thingy should not be preserved across saved
-games, so you can't prove to others that you've seen it.  He says it
-shouldn't fire back, either.  It should do nothing except scream and
-disappear when hit by photon torpedos.  It's OK that it may move
-when attacked, but it didn't in the original.  (Whether the Thingy
-can fire back is now controlled by OPTION_THINGY and turned off if the
-game type is "plain" or "almy".  The no-save behavior has been restored.)
-
-The Faerie Queen, black holes, and time warping were in the original.
-
-Here are Tom Almy's changes:
-
-In early 1997, I got the bright idea to look for references to
-"Super Star Trek" on the World Wide Web. There weren't many hits,
-but there was one that came up with 1979 Fortran sources! This
-version had a few additional features that mine didn't have,
-however mine had some feature it didn't have. So I merged its
-features that I liked. I also took a peek at the DECUS version (a
-port, less sources, to the PDP-10), and some other variations.
-
-1, Compared to the original UT version, I've changed the "help" command to
-"call" and the "terminate" command to "quit" to better match
-user expectations. The DECUS version apparently made those changes
-as well as changing "freeze" to "save". However I like "freeze".
-(Both "freeze" and "save" work in SST2K.)
-
-2. The experimental deathray originally had only a 5% chance of
-success, but could be used repeatedly. I guess after a couple
-years of use, it was less "experimental" because the 1979
-version had a 70% success rate. However it was prone to breaking
-after use. I upgraded the deathray, but kept the original set of
-failure modes (great humor!).  (Now controlled by OPTION_DEATHRAY
-and turned off if game type is "plain".)
-
-3. The 1979 version also mentions srscan and lrscan working when
-docked (using the starbase's scanners), so I made some changes here
-to do this (and indicating that fact to the player), and then realized
-the base would have a subspace radio as well -- doing a Chart when docked
-updates the star chart, and all radio reports will be heard. The Dock
-command will also give a report if a base is under attack.
-
-4. Tholian Web from the 1979 version.  (Now controlled by
-OPTION_THOLIAN and turned off if game type is "plain".)
-
-5. Enemies can ram the Enterprise. (Now controlled by OPTION_RAMMING
-and turned off if game type is "plain".)
-
-6. Regular Klingons and Romulans can move in Expert and Emeritus games. 
-This code could use improvement. (Now controlled by OPTION_MVBADDY
-and turned off if game type is "plain".)
-
-7. The deep-space probe feature from the DECUS version.  (Now controlled
-by OPTION_PROBE and turned off if game type is "plain").
-
-8. 'emexit' command from the 1979 version.
-
-9. Bugfix: Klingon commander movements are no longer reported if long-range 
-sensors are damaged.
-
-10. Bugfix: Better base positioning at startup (more spread out).
-That made sense to add because most people abort games with 
-bad base placement.
-
-In June 2002, I fixed two known bugs and a documentation typo.
-In June 2004 I fixed a number of bugs involving: 1) parsing invalid
-numbers, 2) manual phasers when SR scan is damaged and commander is
-present, 3) time warping into the future, 4) hang when moving
-klingons in crowded quadrants.  (These fixes are in SST2K.)
-
-Here are Stas Sergeev's changes:
-
-1. The Space Thingy can be shoved, if you ram it, and can fire back if 
-fired upon. (Now controlled by OPTION_THINGY and turned off if game 
-type is "plain" or "almy".)
-
-2. When you are docked, base covers you with an almost invincible shield. 
-(A commander can still ram you, or a Romulan can destroy the base,
-or a SCom can even succeed with direct attack IIRC, but this rarely 
-happens.)  (Now controlled by OPTION_BASE and turned off if game 
-type is "plain" or "almy".)
-
-3. Ramming a black hole is no longer instant death.  There is a
-chance you might get timewarped instead. (Now controlled by 
-OPTION_BLKHOLE and turned off if game type is "plain" or "almy".)
-
-4. The Tholian can be hit with phasers.
-
-5. SCom can't escape from you if no more enemies remain 
-(without this, chasing SCom can take an eternity).
-
-6. Probe target you enter is now the destination quadrant. Before I don't 
-remember what it was, but it was something I had difficulty using.
-
-7. Secret password is now autogenerated.
-
-8. "Plaque" is adjusted for A4 paper :-)
-
-9. Phasers now tells you how much energy needed, but only if the computer 
-is alive.
-
-10. Planets are auto-scanned when you enter the quadrant.
-
-11. Mining or using crystals in presense of enemy now yields an attack.
-There are other minor adjustments to what yields an attack
-and what does not.
-
-12. "freeze" command reverts to "save", most people will understand this
-better anyway. (SST2K recognizes both.)
-
-13. Screen-oriented interface, with sensor scans always up.  (SST2K
-supports both screen-oriented and TTY modes.)
-
-Eric Raymond's changes:
-
-Mainly, I translated this C code out of FORTRAN into C -- created #defines
-for a lot of magic numbers and refactored the heck out of it.
-
-1. "sos" and "call" becomes "mayday", "freeze" and "save" are both good.
-
-2. Status report now indicates when dilithium crystals are on board.
-
-3. Per Dave Matuszek's remarks, Thingy state is never saved across games.
-
-4. Added game option selection so you can play a close (but not bug-for-
-bug identical) approximation of older versions.
-
-5. Half the quadrants now have inhabited planets, from which one 
-cannot mine dilithium (there will still be the same additional number
-of dilithium-bearing planets).  Torpedoing an inhabited world is *bad*.
-There is BSD-Trek-like logic for Klingons to attack and enslave 
-inhabited worlds, producing more ships (only is skill is 'good' or 
-better). (Controlled by OPTION_WORLDS and turned off if game 
-type is "plain" or "almy".)
-
-6. User input is now logged so we can do regression testing.
-
-7. More BSD-Trek features: You can now lose if your entire crew
-dies in battle.  When abandoning ship in a game with inhabited
-worlds enabled, they must have one in the quadrant to beam down
-to; otherwise they die in space and this counts heavily against
-your score.  Docking at a starbase replenishes your crew.
-
-8. Still more BSD-Trek: we now have a weighted damage table.
-Also, the nav subsystem (enabling automatic course
-setting) can be damaged separately from the main computer (which
-handles weapons targeting, ETA calculation, and self-destruct).
-
-After these features were added, I translated this into Python and added
-more:
-
-9. A long-range scan is done silently whenever you call CHART; thus
-the LRSCAN command is no longer needed.  (Controlled by OPTION_AUTOSCAN
-and turned off if game type is "plain" or "almy".)
-"""
-import os,sys,math,curses,time,atexit,readline,cPickle,random,getopt,copy
-
-SSTDOC  	= "/usr/share/doc/sst/sst.doc"
-DOC_NAME	= "sst.doc"
-
-# Stub to be replaced
-def _(str): return str
-
-PHASEFAC	= 2.0
-GALSIZE 	= 8
-NINHAB  	= (GALSIZE * GALSIZE / 2)
-MAXUNINHAB	= 10
-PLNETMAX	= (NINHAB + MAXUNINHAB)
-QUADSIZE	= 10
-BASEMIN		= 2
-BASEMAX 	= (GALSIZE * GALSIZE / 12)
-MAXKLGAME	= 127
-MAXKLQUAD	= 9
-FULLCREW	= 428	# BSD Trek was 387, that's wrong 
-FOREVER 	= 1e30
-MAXBURST	= 3
-
-# These functions hide the difference between 0-origin and 1-origin addressing.
-def VALID_QUADRANT(x, y):	return ((x)>=0 and (x)<GALSIZE and (y)>=0 and (y)<GALSIZE)
-def VALID_SECTOR(x, y):	return ((x)>=0 and (x)<QUADSIZE and (y)>=0 and (y)<QUADSIZE)
-
-def square(i):		return ((i)*(i))
-def distance(c1, c2):	return math.sqrt(square(c1.x - c2.x) + square(c1.y - c2.y))
-def invalidate(w):	w.x = w.y = 0
-def is_valid(w):	return (w.x != 0 and w.y != 0)
-
-# How to represent features
-IHR = 'R',
-IHK = 'K',
-IHC = 'C',
-IHS = 'S',
-IHSTAR = '*',
-IHP = 'P',
-IHW = '@',
-IHB = 'B',
-IHBLANK = ' ',
-IHDOT = '.',
-IHQUEST = '?',
-IHE = 'E',
-IHF = 'F',
-IHT = 'T',
-IHWEB = '#',
-IHMATER0 = '-',
-IHMATER1 = 'o',
-IHMATER2 = '0'
-
-IHEOL = '\n'
-IHREAL = 0.0
-IHALPHA = " "
-
-class coord:
-    def __init__(self, x=None, y=None):
-        self.x = x
-        self.y = y
-    def invalidate(self):
-        self.x = self.y = None
-    def is_valid(self):
-        return self.x != None and self.y != None
-    def __eq__(self, other):
-        return other != None and self.x == other.y and self.x == other.y
-    def __add__(self, other):
-        return coord(self.x+self.x, self.y+self.y)
-    def __sub__(self, other):
-        return coord(self.x-self.x, self.y-self.y)
-    def distance(self, other):
-        return math.sqrt((self.x - other.x)**2 + (self.y - other.y)**2)
-    def sgn(self):
-        s = coord()
-        if self.x == 0:
-            s.x = 0
-        else:
-            s.x = self.x / abs(self.x)
-        if self.y == 0:
-            s.y = 0
-        else:
-            s.y = self.y / abs(self.y)
-        return s
-    def scatter(self):
-        s = coord()
-        s.x = self.x + randrange(-1, 2)
-        s.y = self.y + randrange(-1, 2)
-        return s
-    def __hash__(self):
-        return hash((x, y))
-    def __str__(self):
-        if self.x == None or self.y == None:
-            return "Nowhere"
-        return "%s - %s" % (self.x+1, self.y+1)
-    __repr__ = __str__
-
-class planet:
-    def __init__(self):
-        self.name = None	# string-valued if inhabited
-        self.w = coord()	# quadrant located
-        self.pclass = None	# could be ""M", "N", "O", or "destroyed"
-        self.crystals = "absent"# could be "mined", "present", "absent"
-        self.known = "unknown"	# could be "unknown", "known", "shuttle_down"
-        self.inhabited = False	# is it inhabites?
-    def __str__(self):
-        return self.name
-
-class quadrant:
-    def __init__(self):
-        self.stars = None
-        self.planet = None
-	self.starbase = None
-	self.klingons = None
-	self.romulans = None
-	self.supernova = None
-	self.charted = None
-        self.status = None	# Could be "secure", "distressed", "enslaved"
-
-class page:
-    def __init__(self):
-	self.stars = None
-	self.starbase = None
-	self.klingons = None
-
-def fill2d(size, fillfun):
-    "Fill an empty list in 2D."
-    lst = []
-    for i in range(size):
-        lst.append([]) 
-        for j in range(size):
-            lst[i].append(fillfun(i, j))
-    return lst
-
-class snapshot:
-    def __init__(self):
-        self.snap = False	# snapshot taken
-        self.crew = 0   	# crew complement
-	self.remkl = 0  	# remaining klingons
-	self.remcom = 0  	# remaining commanders
-	self.nscrem = 0		# remaining super commanders
-	self.rembase = 0	# remaining bases
-	self.starkl = 0 	# destroyed stars
-	self.basekl = 0 	# destroyed bases
-	self.nromrem = 0	# Romulans remaining
-	self.nplankl = 0	# destroyed uninhabited planets
-	self.nworldkl = 0	# destroyed inhabited planets
-        self.planets = []	# Planet information
-        self.date = 0.0   	# stardate
-	self.remres = 0 	# remaining resources
-	self.remtime = 0	# remaining time
-        self.baseq = [] 	# Base quadrant coordinates
-        for i in range(BASEMAX):
-            self.baseq.append(coord())
-        self.kcmdr = [] 	# Commander quadrant coordinates
-        for i in range(QUADSIZE):
-            self.kcmdr.append(coord())
-	self.kscmdr = coord()	# Supercommander quadrant coordinates
-        # the galaxy (subscript 0 not used)
-        self.galaxy = fill2d(GALSIZE, lambda i, j: quadrant())
-        # the starchart (subscript 0 not used)
-    	self.chart = fill2d(GALSIZE, lambda i, j: page())
-
-class event:
-    def __init__(self):
-        self.date = None	# A real number
-        self.quadrant = None	# A coord structure
-
-# game options 
-OPTION_ALL	= 0xffffffff
-OPTION_TTY	= 0x00000001	# old interface 
-OPTION_CURSES	= 0x00000002	# new interface 
-OPTION_IOMODES	= 0x00000003	# cover both interfaces 
-OPTION_PLANETS	= 0x00000004	# planets and mining 
-OPTION_THOLIAN	= 0x00000008	# Tholians and their webs (UT 1979 version)
-OPTION_THINGY	= 0x00000010	# Space Thingy can shoot back (Stas, 2005)
-OPTION_PROBE	= 0x00000020	# deep-space probes (DECUS version, 1980)
-OPTION_SHOWME	= 0x00000040	# bracket Enterprise in chart 
-OPTION_RAMMING	= 0x00000080	# enemies may ram Enterprise (Almy)
-OPTION_MVBADDY	= 0x00000100	# more enemies can move (Almy)
-OPTION_BLKHOLE	= 0x00000200	# black hole may timewarp you (Stas, 2005) 
-OPTION_BASE	= 0x00000400	# bases have good shields (Stas, 2005)
-OPTION_WORLDS	= 0x00000800	# logic for inhabited worlds (ESR, 2006)
-OPTION_AUTOSCAN	= 0x00001000	# automatic LRSCAN before CHART (ESR, 2006)
-OPTION_PLAIN	= 0x01000000	# user chose plain game 
-OPTION_ALMY	= 0x02000000	# user chose Almy variant 
-
-# Define devices 
-DSRSENS	= 0
-DLRSENS	= 1
-DPHASER	= 2
-DPHOTON	= 3
-DLIFSUP	= 4
-DWARPEN	= 5
-DIMPULS	= 6
-DSHIELD	= 7
-DRADIO	= 0
-DSHUTTL = 9
-DCOMPTR = 10
-DNAVSYS	= 11
-DTRANSP = 12
-DSHCTRL	= 13
-DDRAY	= 14
-DDSP	= 15
-NDEVICES= 16	# Number of devices
-
-SKILL_NONE	= 0
-SKILL_NOVICE	= 1
-SKILL_FAIR	= 2
-SKILL_GOOD	= 3
-SKILL_EXPERT	= 4
-SKILL_EMERITUS	= 5
-
-def damaged(dev):	return (game.damage[dev] != 0.0)
-def communicating():	return not damaged(DRADIO) or game.condition=="docked"
-
-# Define future events 
-FSPY	= 0	# Spy event happens always (no future[] entry)
-		# can cause SC to tractor beam Enterprise
-FSNOVA  = 1	# Supernova
-FTBEAM  = 2	# Commander tractor beams Enterprise
-FSNAP   = 3	# Snapshot for time warp
-FBATTAK = 4	# Commander attacks base
-FCDBAS  = 5	# Commander destroys base
-FSCMOVE = 6	# Supercommander moves (might attack base)
-FSCDBAS = 7	# Supercommander destroys base
-FDSPROB = 8	# Move deep space probe
-FDISTR	= 9	# Emit distress call from an inhabited world 
-FENSLV	= 10	# Inhabited word is enslaved */
-FREPRO	= 11	# Klingons build a ship in an enslaved system
-NEVENTS	= 12
-
-#
-# abstract out the event handling -- underlying data structures will change
-# when we implement stateful events
-# 
-def findevent(evtype):	return game.future[evtype]
-
-class enemy:
-    def __init__(self, type=None, loc=None, power=None):
-        self.type = type
-        self.kloc = coord()
-        if loc:
-            self.move(loc)
-        self.kpower = power	# enemy energy level
-        game.enemies.append(self)
-    def move(self, loc):
-        motion = (loc != self.kloc)
-        if self.kloc.x is not None and self.kloc.y is not None:
-            game.quad[self.kloc.x][self.kloc.y] = IHDOT
-        if loc:
-            self.kloc = loc
-            game.quad[self.kloc.x][self.kloc.y] = self.type
-            self.kdist = self.kavgd = distance(game.sector, loc)
-        else:
-            self.kloc = coord()	# enemy sector location
-            self.kdist = self.kavgd = None
-            game.enemies.remove(self)
-        return motion
-    def __repr__(self):
-        return "<%s=%f>" % (self.kloc, self.kpower)	# For debugging
-
-class gamestate:
-    def __init__(self):
-        self.options = None	# Game options
-        self.state = snapshot()	# A snapshot structure
-        self.snapsht = snapshot()	# Last snapshot taken for time-travel purposes
-        self.quad = None	# contents of our quadrant
-        self.damage = [0.0] * NDEVICES	# damage encountered
-        self.future = []		# future events
-        for i in range(NEVENTS):
-            self.future.append(event())
-        self.passwd  = None;		# Self Destruct password
-        self.enemies = []
-        self.quadrant = None	# where we are in the large
-        self.sector = None	# where we are in the small
-        self.tholian = None	# Tholian enemy object
-        self.base = None	# position of base in current quadrant
-        self.battle = None	# base coordinates being attacked
-        self.plnet = None	# location of planet in quadrant
-        self.probec = None	# current probe quadrant
-        self.gamewon = False	# Finished!
-        self.ididit = False	# action taken -- allows enemy to attack
-        self.alive = False	# we are alive (not killed)
-        self.justin = False	# just entered quadrant
-        self.shldup = False	# shields are up
-        self.shldchg = False	# shield is changing (affects efficiency)
-        self.comhere = False	# commander here
-        self.ishere = False	# super-commander in quadrant
-        self.iscate = False	# super commander is here
-        self.ientesc = False	# attempted escape from supercommander
-        self.resting = False	# rest time
-        self.icraft = False	# Kirk in Galileo
-        self.landed = False	# party on planet (true), on ship (false)
-        self.alldone = False	# game is now finished
-        self.neutz = False	# Romulan Neutral Zone
-        self.isarmed = False	# probe is armed
-        self.inorbit = False	# orbiting a planet
-        self.imine = False	# mining
-        self.icrystl = False	# dilithium crystals aboard
-        self.iseenit = False	# seen base attack report
-        self.thawed = False	# thawed game
-        self.condition = None	# "green", "yellow", "red", "docked", "dead"
-        self.iscraft = None	# "onship", "offship", "removed"
-        self.skill = None	# Player skill level
-        self.inkling = 0	# initial number of klingons
-        self.inbase = 0		# initial number of bases
-        self.incom = 0		# initial number of commanders
-        self.inscom = 0		# initial number of commanders
-        self.inrom = 0		# initial number of commanders
-        self.instar = 0		# initial stars
-        self.intorps = 0	# initial/max torpedoes
-        self.torps = 0		# number of torpedoes
-        self.ship = 0		# ship type -- 'E' is Enterprise
-        self.abandoned = 0	# count of crew abandoned in space
-        self.length = 0		# length of game
-        self.klhere = 0		# klingons here
-        self.casual = 0		# causalties
-        self.nhelp = 0		# calls for help
-        self.nkinks = 0		# count of energy-barrier crossings
-        self.iplnet = None	# planet # in quadrant
-        self.inplan = 0		# initial planets
-        self.irhere = 0		# Romulans in quadrant
-        self.isatb = 0		# =1 if super commander is attacking base
-        self.tourn = None	# tournament number
-        self.proben = 0		# number of moves for probe
-        self.nprobes = 0	# number of probes available
-        self.inresor = 0.0	# initial resources
-        self.intime = 0.0	# initial time
-        self.inenrg = 0.0	# initial/max energy
-        self.inshld = 0.0	# initial/max shield
-        self.inlsr = 0.0	# initial life support resources
-        self.indate = 0.0	# initial date
-        self.energy = 0.0	# energy level
-        self.shield = 0.0	# shield level
-        self.warpfac = 0.0	# warp speed
-        self.wfacsq = 0.0	# squared warp factor
-        self.lsupres = 0.0	# life support reserves
-        self.dist = 0.0		# movement distance
-        self.direc = 0.0	# movement direction
-        self.optime = 0.0	# time taken by current operation
-        self.docfac = 0.0	# repair factor when docking (constant?)
-        self.damfac = 0.0	# damage factor
-        self.lastchart = 0.0	# time star chart was last updated
-        self.cryprob = 0.0	# probability that crystal will work
-        self.probex = 0.0	# location of probe
-        self.probey = 0.0	#
-        self.probeinx = 0.0	# probe x,y increment
-        self.probeiny = 0.0	#
-        self.height = 0.0	# height of orbit around planet
-    def recompute(self):
-        # Stas thinks this should be (C expression): 
-        # game.state.remkl + game.state.remcom > 0 ?
-	#	game.state.remres/(game.state.remkl + 4*game.state.remcom) : 99
-        # He says the existing expression is prone to divide-by-zero errors
-        # after killing the last klingon when score is shown -- perhaps also
-        # if the only remaining klingon is SCOM.
-        game.state.remtime = game.state.remres/(game.state.remkl + 4*game.state.remcom)
-# From enumerated type 'feature'
-IHR = 'R'
-IHK = 'K'
-IHC = 'C'
-IHS = 'S'
-IHSTAR = '*'
-IHP = 'P'
-IHW = '@'
-IHB = 'B'
-IHBLANK = ' '
-IHDOT = '.'
-IHQUEST = '?'
-IHE = 'E'
-IHF = 'F'
-IHT = 'T'
-IHWEB = '#'
-IHMATER0 = '-'
-IHMATER1 = 'o'
-IHMATER2 = '0'
-
-
-# From enumerated type 'FINTYPE'
-FWON = 0
-FDEPLETE = 1
-FLIFESUP = 2
-FNRG = 3
-FBATTLE = 4
-FNEG3 = 5
-FNOVA = 6
-FSNOVAED = 7
-FABANDN = 8
-FDILITHIUM = 9
-FMATERIALIZE = 10
-FPHASER = 11
-FLOST = 12
-FMINING = 13
-FDPLANET = 14
-FPNOVA = 15
-FSSC = 16
-FSTRACTOR = 17
-FDRAY = 18
-FTRIBBLE = 19
-FHOLE = 20
-FCREW = 21
-
-# Log the results of pulling random numbers so we can check determinism.
-
-import traceback
-
-def withprob(p):
-    v = random.random()
-    #logfp.write("# withprob(%s) -> %f (%s) at %s\n" % (p, v, v<p, traceback.extract_stack()[-2][1:]))
-    return v < p
-
-def randrange(*args):
-    v = random.randrange(*args)
-    #logfp.write("# randrange%s -> %s at %s\n" % (args, v, traceback.extract_stack()[-2][1:]))
-    return v
-
-def randreal(*args):
-    v = random.random()
-    if len(args) == 1:
-        v *= args[0] 		# returns from [0, a1)
-    elif len(args) == 2:
-        v = args[0] + v*args[1]	# returns from [a1, a2)
-    #logfp.write("# randreal%s -> %s at %s\n" % (args, v, traceback.extract_stack()[-2][1:]))
-    return v
-
-# Code from ai.c begins here
-
-def tryexit(enemy, look, irun):
-    # a bad guy attempts to bug out 
-    iq = coord()
-    iq.x = game.quadrant.x+(look.x+(QUADSIZE-1))/QUADSIZE - 1
-    iq.y = game.quadrant.y+(look.y+(QUADSIZE-1))/QUADSIZE - 1
-    if not VALID_QUADRANT(iq.x,iq.y) or \
-	game.state.galaxy[iq.x][iq.y].supernova or \
-	game.state.galaxy[iq.x][iq.y].klingons > MAXKLQUAD-1:
-	return False; # no can do -- neg energy, supernovae, or >MAXKLQUAD-1 Klingons 
-    if enemy.type == IHR:
-	return False; # Romulans cannot escape! 
-    if not irun:
-	# avoid intruding on another commander's territory 
-	if enemy.type == IHC:
-	    for n in range(game.state.remcom):
-		if game.state.kcmdr[n] == iq:
-		    return False
-	    # refuse to leave if currently attacking starbase 
-	    if game.battle == game.quadrant:
-		return False
-	# don't leave if over 1000 units of energy 
-	if enemy.kpower > 1000.0:
-	    return False
-    # print escape message and move out of quadrant.
-    # we know this if either short or long range sensors are working
-    if not damaged(DSRSENS) or not damaged(DLRSENS) or \
-	game.condition == "docked":
-	crmena(True, enemy.type, "sector", enemy.kloc)
-	prout(_(" escapes to Quadrant %s (and regains strength).") % q)
-    # handle local matters related to escape
-    enemy.move(None)
-    game.klhere -= 1
-    if game.condition != "docked":
-	newcnd()
-    # Handle global matters related to escape 
-    game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons -= 1
-    game.state.galaxy[iq.x][iq.y].klingons += 1
-    if enemy.type==IHS:
-	game.ishere = False
-	game.iscate = False
-	game.ientesc = False
-	game.isatb = 0
-	schedule(FSCMOVE, 0.2777)
-	unschedule(FSCDBAS)
-	game.state.kscmdr=iq
-    else:
-	for n in range(game.state.remcom):
-	    if game.state.kcmdr[n] == game.quadrant:
-		game.state.kcmdr[n]=iq
-		break
-	game.comhere = False
-    return True; # success 
-
-#
-# The bad-guy movement algorithm:
-# 
-# 1. Enterprise has "force" based on condition of phaser and photon torpedoes.
-# If both are operating full strength, force is 1000. If both are damaged,
-# force is -1000. Having shields down subtracts an additional 1000.
-# 
-# 2. Enemy has forces equal to the energy of the attacker plus
-# 100*(K+R) + 500*(C+S) - 400 for novice through good levels OR
-# 346*K + 400*R + 500*(C+S) - 400 for expert and emeritus.
-# 
-# Attacker Initial energy levels (nominal):
-# Klingon   Romulan   Commander   Super-Commander
-# Novice    400        700        1200        
-# Fair      425        750        1250
-# Good      450        800        1300        1750
-# Expert    475        850        1350        1875
-# Emeritus  500        900        1400        2000
-# VARIANCE   75        200         200         200
-# 
-# Enemy vessels only move prior to their attack. In Novice - Good games
-# only commanders move. In Expert games, all enemy vessels move if there
-# is a commander present. In Emeritus games all enemy vessels move.
-# 
-# 3. If Enterprise is not docked, an aggressive action is taken if enemy
-# forces are 1000 greater than Enterprise.
-# 
-# Agressive action on average cuts the distance between the ship and
-# the enemy to 1/4 the original.
-# 
-# 4.  At lower energy advantage, movement units are proportional to the
-# advantage with a 650 advantage being to hold ground, 800 to move forward
-# 1, 950 for two, 150 for back 4, etc. Variance of 100.
-# 
-# If docked, is reduced by roughly 1.75*game.skill, generally forcing a
-# retreat, especially at high skill levels.
-# 
-# 5.  Motion is limited to skill level, except for SC hi-tailing it out.
-# 
-
-def movebaddy(enemy):
-    # tactical movement for the bad guys 
-    next = coord(); look = coord()
-    irun = False
-    # This should probably be just game.comhere + game.ishere 
-    if game.skill >= SKILL_EXPERT:
-	nbaddys = ((game.comhere*2 + game.ishere*2+game.klhere*1.23+game.irhere*1.5)/2.0)
-    else:
-	nbaddys = game.comhere + game.ishere
-    dist1 = enemy.kdist
-    mdist = int(dist1 + 0.5); # Nearest integer distance 
-    # If SC, check with spy to see if should hi-tail it 
-    if enemy.type==IHS and \
-	(enemy.kpower <= 500.0 or (game.condition=="docked" and not damaged(DPHOTON))):
-	irun = True
-	motion = -QUADSIZE
-    else:
-	# decide whether to advance, retreat, or hold position 
-	forces = enemy.kpower+100.0*len(game.enemies)+400*(nbaddys-1)
-	if not game.shldup:
-	    forces += 1000; # Good for enemy if shield is down! 
-	if not damaged(DPHASER) or not damaged(DPHOTON):
-            if damaged(DPHASER): # phasers damaged 
-		forces += 300.0
-	    else:
-		forces -= 0.2*(game.energy - 2500.0)
-	    if damaged(DPHOTON): # photon torpedoes damaged 
-		forces += 300.0
-	    else:
-		forces -= 50.0*game.torps
-	else:
-	    # phasers and photon tubes both out! 
-	    forces += 1000.0
-	motion = 0
-        if forces <= 1000.0 and game.condition != "docked": # Typical situation 
-	    motion = ((forces + randreal(200))/150.0) - 5.0
-	else:
-            if forces > 1000.0: # Very strong -- move in for kill 
-		motion = (1.0-square(randreal()))*dist1 + 1.0
-	    if game.condition=="docked" and (game.options & OPTION_BASE): # protected by base -- back off ! 
-		motion -= game.skill*(2.0-square(randreal()))
-	if idebug:
-	    proutn("=== MOTION = %d, FORCES = %1.2f, " % (motion, forces))
-	# don't move if no motion 
-	if motion==0:
-	    return
-	# Limit motion according to skill 
-	if abs(motion) > game.skill:
-            if motion < 0:
-                motion = -game.skill
-            else:
-                motion = game.skill
-    # calculate preferred number of steps 
-    if motion < 0:
-        nsteps = -motion
-    else:
-        nsteps = motion
-    if motion > 0 and nsteps > mdist:
-	nsteps = mdist; # don't overshoot 
-    if nsteps > QUADSIZE:
-	nsteps = QUADSIZE; # This shouldn't be necessary 
-    if nsteps < 1:
-	nsteps = 1; # This shouldn't be necessary 
-    if idebug:
-	proutn("NSTEPS = %d:" % nsteps)
-    # Compute preferred values of delta X and Y 
-    m = game.sector - enemy.kloc
-    if 2.0 * abs(m.x) < abs(m.y):
-	m.x = 0
-    if 2.0 * abs(m.y) < abs(game.sector.x-enemy.kloc.x):
-	m.y = 0
-    if m.x != 0:
-        if m.x*motion < 0:
-            m.x = -1
-        else:
-            m.x = 1
-    if m.y != 0:
-        if m.y*motion < 0:
-            m.y = -1
-        else:
-            m.y = 1
-    next = enemy.kloc
-    # main move loop 
-    for ll in range(nsteps):
-	if idebug:
-	    proutn(" %d" % (ll+1))
-	# Check if preferred position available 
-	look = next + m
-        if m.x < 0:
-            krawlx = 1
-        else:
-            krawlx = -1
-        if m.y < 0:
-            krawly = 1
-        else:
-            krawly = -1
-	success = False
-	attempts = 0; # Settle mysterious hang problem 
-	while attempts < 20 and not success:
-            attempts += 1
-	    if look.x < 0 or look.x >= QUADSIZE:
-		if motion < 0 and tryexit(enemy, look, irun):
-		    return
-		if krawlx == m.x or m.y == 0:
-		    break
-		look.x = next.x + krawlx
-		krawlx = -krawlx
-	    elif look.y < 0 or look.y >= QUADSIZE:
-		if motion < 0 and tryexit(enemy, look, irun):
-		    return
-		if krawly == m.y or m.x == 0:
-		    break
-		look.y = next.y + krawly
-		krawly = -krawly
-	    elif (game.options & OPTION_RAMMING) and game.quad[look.x][look.y] != IHDOT:
-		# See if enemy should ram ship 
-		if game.quad[look.x][look.y] == game.ship and \
-		    (enemy.type == IHC or enemy.type == IHS):
-		    collision(rammed=True, enemy=enemy)
-		    return
-		if krawlx != m.x and m.y != 0:
-		    look.x = next.x + krawlx
-		    krawlx = -krawlx
-		elif krawly != m.y and m.x != 0:
-		    look.y = next.y + krawly
-		    krawly = -krawly
-		else:
-		    break; # we have failed 
-	    else:
-		success = True
-	if success:
-	    next = look
-	    if idebug:
-		proutn(`next`)
-	else:
-	    break; # done early 
-    if idebug:
-	skip(1)
-    if enemy.move(next):
-	if not damaged(DSRSENS) or game.condition == "docked":
-	    proutn("***")
-	    cramen(enemy.type)
-	    proutn(_(" from Sector %s") % enemy.kloc)
-	    if enemy.kdist < dist1:
-		proutn(_(" advances to "))
-	    else:
-		proutn(_(" retreats to "))
-	    prout("Sector %s." % next)
-
-def moveklings():
-    # Klingon tactical movement 
-    if idebug:
-	prout("== MOVCOM")
-    # Figure out which Klingon is the commander (or Supercommander)
-    # and do move
-    if game.comhere:
-        for enemy in game.enemies:
-	    if enemy.type == IHC:
-		movebaddy(enemy)
-    if game.ishere:
-        for enemy in game.enemies:
-	    if enemy.type == IHS:
-		movebaddy(enemy)
-		break
-    # If skill level is high, move other Klingons and Romulans too!
-    # Move these last so they can base their actions on what the
-    # commander(s) do.
-    if game.skill >= SKILL_EXPERT and (game.options & OPTION_MVBADDY):
-        for enemy in game.enemies:
-            if enemy.type in (IHK, IHR):
-		movebaddy(enemy)
-    game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
-
-def movescom(iq, avoid):
-    # commander movement helper 
-    if iq == game.quadrant or not VALID_QUADRANT(iq.x, iq.y) or \
-	game.state.galaxy[iq.x][iq.y].supernova or \
-	game.state.galaxy[iq.x][iq.y].klingons > MAXKLQUAD-1:
-	return 1
-    if avoid:
-	# Avoid quadrants with bases if we want to avoid Enterprise 
-	for i in range(game.state.rembase):
-	    if game.state.baseq[i] == iq:
-		return True
-    if game.justin and not game.iscate:
-	return True
-    # do the move 
-    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].klingons -= 1
-    game.state.kscmdr = iq
-    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].klingons += 1
-    if game.ishere:
-	# SC has scooted, Remove him from current quadrant 
-	game.iscate=False
-	game.isatb=0
-	game.ishere = False
-	game.ientesc = False
-	unschedule(FSCDBAS)
-	for enemy in game.enemies:
-	    if enemy.type == IHS:
-		break
-	enemy.move(None)
-	game.klhere -= 1
-	if game.condition != "docked":
-	    newcnd()
-        game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
-    # check for a helpful planet 
-    for i in range(game.inplan):
-	if game.state.planets[i].w == game.state.kscmdr and \
-	    game.state.planets[i].crystals == "present":
-	    # destroy the planet 
-	    game.state.planets[i].pclass = "destroyed"
-	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = None
-	    if communicating():
-		announce()
-		prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"))
-		proutn(_("   a planet in Quadrant %s has been destroyed") % game.state.kscmdr)
-		prout(_("   by the Super-commander.\""))
-	    break
-    return False; # looks good! 
-			
-def supercommander():
-    # move the Super Commander 
-    iq = coord(); sc = coord(); ibq = coord(); idelta = coord()
-    basetbl = []
-    if idebug:
-	prout("== SUPERCOMMANDER")
-    # Decide on being active or passive 
-    avoid = ((game.incom - game.state.remcom + game.inkling - game.state.remkl)/(game.state.date+0.01-game.indate) < 0.1*game.skill*(game.skill+1.0) or \
-	    (game.state.date-game.indate) < 3.0)
-    if not game.iscate and avoid:
-	# compute move away from Enterprise 
-	idelta = game.state.kscmdr-game.quadrant
-	if math.sqrt(idelta.x*idelta.x+idelta.y*idelta.y) > 2.0:
-	    # circulate in space 
-	    idelta.x = game.state.kscmdr.y-game.quadrant.y
-	    idelta.y = game.quadrant.x-game.state.kscmdr.x
-    else:
-	# compute distances to starbases 
-	if game.state.rembase <= 0:
-	    # nothing left to do 
-	    unschedule(FSCMOVE)
-	    return
-	sc = game.state.kscmdr
-	for i in range(game.state.rembase):
-	    basetbl.append((i, distance(game.state.baseq[i], sc)))
-	if game.state.rembase > 1:
-            basetbl.sort(lambda x, y: cmp(x[1]. y[1]))
-	# look for nearest base without a commander, no Enterprise, and
-        # without too many Klingons, and not already under attack. 
-	ifindit = iwhichb = 0
-	for i2 in range(game.state.rembase):
-	    i = basetbl[i2][0];	# bug in original had it not finding nearest
-	    ibq = game.state.baseq[i]
-	    if ibq == game.quadrant or ibq == game.battle or \
-		game.state.galaxy[ibq.x][ibq.y].supernova or \
-		game.state.galaxy[ibq.x][ibq.y].klingons > MAXKLQUAD-1:
-		continue
-	    # if there is a commander, and no other base is appropriate,
-	    #   we will take the one with the commander
-	    for j in range(game.state.remcom):
-		if ibq == game.state.kcmdr[j] and ifindit!= 2:
-		    ifindit = 2
-		    iwhichb = i
-		    break
-	    if j > game.state.remcom: # no commander -- use this one 
-		ifindit = 1
-		iwhichb = i
-		break
-	if ifindit==0:
-	    return # Nothing suitable -- wait until next time
-	ibq = game.state.baseq[iwhichb]
-	# decide how to move toward base 
-	idelta = ibq - game.state.kscmdr
-    # Maximum movement is 1 quadrant in either or both axes 
-    idelta = idelta.sgn()
-    # try moving in both x and y directions
-    # there was what looked like a bug in the Almy C code here,
-    # but it might be this translation is just wrong.
-    iq = game.state.kscmdr + idelta
-    if movescom(iq, avoid):
-	# failed -- try some other maneuvers 
-	if idelta.x==0 or idelta.y==0:
-	    # attempt angle move 
-	    if idelta.x != 0:
-		iq.y = game.state.kscmdr.y + 1
-		if movescom(iq, avoid):
-		    iq.y = game.state.kscmdr.y - 1
-		    movescom(iq, avoid)
-	    else:
-		iq.x = game.state.kscmdr.x + 1
-		if movescom(iq, avoid):
-		    iq.x = game.state.kscmdr.x - 1
-		    movescom(iq, avoid)
-	else:
-	    # try moving just in x or y 
-	    iq.y = game.state.kscmdr.y
-	    if movescom(iq, avoid):
-		iq.y = game.state.kscmdr.y + idelta.y
-		iq.x = game.state.kscmdr.x
-		movescom(iq, avoid)
-    # check for a base 
-    if game.state.rembase == 0:
-	unschedule(FSCMOVE)
-    else:
-	for i in range(game.state.rembase):
-	    ibq = game.state.baseq[i]
-	    if ibq == game.state.kscmdr and game.state.kscmdr == game.battle:
-		# attack the base 
-		if avoid:
-		    return # no, don't attack base! 
-		game.iseenit = False
-		game.isatb = 1
-		schedule(FSCDBAS, randreal(1.0, 3.0))
-		if is_scheduled(FCDBAS):
-		    postpone(FSCDBAS, scheduled(FCDBAS)-game.state.date)
-		if not communicating():
-		    return # no warning 
-		game.iseenit = True
-		announce()
-		prout(_("Lt. Uhura-  \"Captain, the starbase in Quadrant %s") \
-                      % game.state.kscmdr)
-		prout(_("   reports that it is under attack from the Klingon Super-commander."))
-		proutn(_("   It can survive until stardate %d.\"") \
-                       % int(scheduled(FSCDBAS)))
-		if not game.resting:
-		    return
-		prout(_("Mr. Spock-  \"Captain, shall we cancel the rest period?\""))
-		if ja() == False:
-		    return
-		game.resting = False
-		game.optime = 0.0; # actually finished 
-		return
-    # Check for intelligence report 
-    if not idebug and \
-	(withprob(0.8) or \
-	 (not communicating()) or \
-	 not game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].charted):
-	return
-    announce()
-    prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"))
-    proutn(_("   the Super-commander is in Quadrant %s,") % game.state.kscmdr)
-    return
-
-def movetholian():
-    # move the Tholian 
-    if not game.tholian or game.justin:
-	return
-    if game.tholian.kloc.x == 0 and game.tholian.kloc.y == 0:
-	idx = 0; idy = QUADSIZE-1
-    elif game.tholian.kloc.x == 0 and game.tholian.kloc.y == QUADSIZE-1:
-	idx = QUADSIZE-1; idy = QUADSIZE-1
-    elif game.tholian.kloc.x == QUADSIZE-1 and game.tholian.kloc.y == QUADSIZE-1:
-	idx = QUADSIZE-1; idy = 0
-    elif game.tholian.kloc.x == QUADSIZE-1 and game.tholian.kloc.y == 0:
-	idx = 0; idy = 0
-    else:
-	# something is wrong! 
-	game.tholian = None
-	return
-    # do nothing if we are blocked 
-    if game.quad[idx][idy]!= IHDOT and game.quad[idx][idy]!= IHWEB:
-	return
-    game.quad[game.tholian.kloc.x][game.tholian.kloc.y] = IHWEB
-    if game.tholian.kloc.x != idx:
-	# move in x axis 
-	im = math.fabs(idx - game.tholian.kloc.x)*1.0/(idx - game.tholian.kloc.x)
-	while game.tholian.kloc.x != idx:
-	    game.tholian.kloc.x += im
-	    if game.quad[game.tholian.kloc.x][game.tholian.kloc.y]==IHDOT:
-		game.quad[game.tholian.kloc.x][game.tholian.kloc.y] = IHWEB
-    elif game.tholian.kloc.y != idy:
-	# move in y axis 
-	im = math.fabs(idy - game.tholian.kloc.y)*1.0/(idy - game.tholian.kloc.y)
-	while game.tholian.kloc.y != idy:
-	    game.tholian.kloc.y += im
-	    if game.quad[game.tholian.kloc.x][game.tholian.kloc.y]==IHDOT:
-		game.quad[game.tholian.kloc.x][game.tholian.kloc.y] = IHWEB
-    game.quad[game.tholian.kloc.x][game.tholian.kloc.y] = IHT
-    #game.enemies[-1].kloc = game.tholian	#FIXME
-    # check to see if all holes plugged 
-    for i in range(QUADSIZE):
-	if game.quad[0][i]!=IHWEB and game.quad[0][i]!=IHT:
-	    return
-	if game.quad[QUADSIZE][i]!=IHWEB and game.quad[QUADSIZE][i]!=IHT:
-	    return
-	if game.quad[i][0]!=IHWEB and game.quad[i][0]!=IHT:
-	    return
-	if game.quad[i][QUADSIZE]!=IHWEB and game.quad[i][QUADSIZE]!=IHT:
-	    return
-    # All plugged up -- Tholian splits 
-    game.quad[game.tholian.kloc.x][game.tholian.kloc.y]=IHWEB
-    dropin(IHBLANK)
-    crmena(True, IHT, "sector", game.tholian)
-    prout(_(" completes web."))
-    game.tholian.move(None)
-    return
-
-# Code from battle.c begins here
-
-def doshield(shraise):
-    # change shield status 
-    action = "NONE"
-    game.ididit = False
-    if shraise:
-	action = "SHUP"
-    else:
-	key = scan()
-	if key == IHALPHA:
-	    if isit("transfer"):
-		action = "NRG"
-	    else:
-		chew()
-		if damaged(DSHIELD):
-		    prout(_("Shields damaged and down."))
-		    return
-		if isit("up"):
-		    action = "SHUP"
-		elif isit("down"):
-		    action = "SHDN"
-	if action=="NONE":
-	    proutn(_("Do you wish to change shield energy? "))
-	    if ja() == True:
-		proutn(_("Energy to transfer to shields- "))
-		action = "NRG"
-	    elif damaged(DSHIELD):
-		prout(_("Shields damaged and down."))
-		return
-	    elif game.shldup:
-		proutn(_("Shields are up. Do you want them down? "))
-		if ja() == True:
-		    action = "SHDN"
-		else:
-		    chew()
-		    return
-	    else:
-		proutn(_("Shields are down. Do you want them up? "))
-		if ja() == True:
-		    action = "SHUP"
-		else:
-		    chew()
-		    return    
-    if action == "SHUP": # raise shields 
-	if game.shldup:
-	    prout(_("Shields already up."))
-	    return
-	game.shldup = True
-	game.shldchg = True
-	if game.condition != "docked":
-	    game.energy -= 50.0
-	prout(_("Shields raised."))
-	if game.energy <= 0:
-	    skip(1)
-	    prout(_("Shields raising uses up last of energy."))
-	    finish(FNRG)
-	    return
-	game.ididit=True
-	return
-    elif action == "SHDN":
-	if not game.shldup:
-	    prout(_("Shields already down."))
-	    return
-	game.shldup=False
-	game.shldchg=True
-	prout(_("Shields lowered."))
-	game.ididit = True
-	return
-    elif action == "NRG":
-	while scan() != IHREAL:
-	    chew()
-	    proutn(_("Energy to transfer to shields- "))
-	chew()
-	if aaitem == 0:
-	    return
-	if aaitem > game.energy:
-	    prout(_("Insufficient ship energy."))
-	    return
-	game.ididit = True
-	if game.shield+aaitem >= game.inshld:
-	    prout(_("Shield energy maximized."))
-	    if game.shield+aaitem > game.inshld:
-		prout(_("Excess energy requested returned to ship energy"))
-	    game.energy -= game.inshld-game.shield
-	    game.shield = game.inshld
-	    return
-	if aaitem < 0.0 and game.energy-aaitem > game.inenrg:
-	    # Prevent shield drain loophole 
-	    skip(1)
-	    prout(_("Engineering to bridge--"))
-	    prout(_("  Scott here. Power circuit problem, Captain."))
-	    prout(_("  I can't drain the shields."))
-	    game.ididit = False
-	    return
-	if game.shield+aaitem < 0:
-	    prout(_("All shield energy transferred to ship."))
-	    game.energy += game.shield
-	    game.shield = 0.0
-	    return
-	proutn(_("Scotty- \""))
-	if aaitem > 0:
-	    prout(_("Transferring energy to shields.\""))
-	else:
-	    prout(_("Draining energy from shields.\""))
-	game.shield += aaitem
-	game.energy -= aaitem
-	return
-
-def randdevice():
-    # choose a device to damage, at random. 
-    #
-    # Quoth Eric Allman in the code of BSD-Trek:
-    # "Under certain conditions you can get a critical hit.  This
-    # sort of hit damages devices.  The probability that a given
-    # device is damaged depends on the device.  Well protected
-    # devices (such as the computer, which is in the core of the
-    # ship and has considerable redundancy) almost never get
-    # damaged, whereas devices which are exposed (such as the
-    # warp engines) or which are particularly delicate (such as
-    # the transporter) have a much higher probability of being
-    # damaged."
-    # 
-    # This is one place where OPTION_PLAIN does not restore the
-    # original behavior, which was equiprobable damage across
-    # all devices.  If we wanted that, we'd return randrange(NDEVICES)
-    # and have done with it.  Also, in the original game, DNAVYS
-    # and DCOMPTR were the same device. 
-    # 
-    # Instead, we use a table of weights similar to the one from BSD Trek.
-    # BSD doesn't have the shuttle, shield controller, death ray, or probes. 
-    # We don't have a cloaking device.  The shuttle got the allocation
-    # for the cloaking device, then we shaved a half-percent off
-    # everything to have some weight to give DSHCTRL/DDRAY/DDSP.
-    # 
-    weights = (
-	105,	# DSRSENS: short range scanners	10.5% 
-	105,	# DLRSENS: long range scanners		10.5% 
-	120,	# DPHASER: phasers			12.0% 
-	120,	# DPHOTON: photon torpedoes		12.0% 
-	25,	# DLIFSUP: life support		 2.5% 
-	65,	# DWARPEN: warp drive			 6.5% 
-	70,	# DIMPULS: impulse engines		 6.5% 
-	145,	# DSHIELD: deflector shields		14.5% 
-	30,	# DRADIO:  subspace radio		 3.0% 
-	45,	# DSHUTTL: shuttle			 4.5% 
-	15,	# DCOMPTR: computer			 1.5% 
-	20,	# NAVCOMP: navigation system		 2.0% 
-	75,	# DTRANSP: transporter			 7.5% 
-	20,	# DSHCTRL: high-speed shield controller 2.0% 
-	10,	# DDRAY: death ray			 1.0% 
-	30,	# DDSP: deep-space probes		 3.0% 
-    )
-    idx = randrange(1000)	# weights must sum to 1000 
-    sum = 0
-    for (i, w) in enumerate(weights):
-	sum += w
-	if idx < sum:
-	    return i
-    return None;	# we should never get here
-
-def collision(rammed, enemy):
-    # collision handling
-    prouts(_("***RED ALERT!  RED ALERT!"))
-    skip(1)
-    prout(_("***COLLISION IMMINENT."))
-    skip(2)
-    proutn("***")
-    crmshp()
-    hardness = {IHR:1.5, IHC:2.0, IHS:2.5, IHT:0.5, IHQUEST:4.0}.get(enemy.type, 1.0)
-    if rammed:
-        proutn(_(" rammed by "))
-    else:
-        proutn(_(" rams "))
-    crmena(False, enemy.type, "sector", enemy.kloc)
-    if rammed:
-	proutn(_(" (original position)"))
-    skip(1)
-    deadkl(enemy.kloc, enemy.type, game.sector)
-    proutn("***")
-    crmshp()
-    prout(_(" heavily damaged."))
-    icas = randrange(10, 30)
-    prout(_("***Sickbay reports %d casualties"), icas)
-    game.casual += icas
-    game.state.crew -= icas
-    #
-    # In the pre-SST2K version, all devices got equiprobably damaged,
-    # which was silly.  Instead, pick up to half the devices at
-    # random according to our weighting table,
-    # 
-    ncrits = randrange(NDEVICES/2)
-    for m in range(ncrits):
-	dev = randdevice()
-	if game.damage[dev] < 0:
-	    continue
-	extradm = (10.0*hardness*randreal()+1.0)*game.damfac
-	# Damage for at least time of travel! 
-	game.damage[dev] += game.optime + extradm
-    game.shldup = False
-    prout(_("***Shields are down."))
-    if game.state.remkl + game.state.remcom + game.state.nscrem:
-	announce()
-	damagereport()
-    else:
-	finish(FWON)
-    return
-
-def torpedo(course, dispersion, origin, number, nburst):
-    # let a photon torpedo fly 
-    iquad = 0
-    shoved = False
-    ac = course + 0.25*dispersion
-    angle = (15.0-ac)*0.5235988
-    bullseye = (15.0 - course)*0.5235988
-    deltax = -math.sin(angle);
-    deltay = math.cos(angle);
-    x = origin.x; y = origin.y
-    w = coord(); jw = coord()
-    w.x = w.y = jw.x = jw.y = 0
-    bigger = max(math.fabs(deltax), math.fabs(deltay))
-    deltax /= bigger
-    deltay /= bigger
-    if not damaged(DSRSENS) or game.condition=="docked":
-	setwnd(srscan_window)
-    else: 
-	setwnd(message_window)
-    # Loop to move a single torpedo 
-    for step in range(1, 15+1):
-	x += deltax
-	w.x = int(x + 0.5)
-	y += deltay
-	w.y = int(y + 0.5)
-	if not VALID_SECTOR(w.x, w.y):
-	    break
-	iquad=game.quad[w.x][w.y]
-	tracktorpedo(w, step, number, nburst, iquad)
-	if iquad==IHDOT:
-	    continue
-	# hit something 
-	setwnd(message_window)
-	if damaged(DSRSENS) and not game.condition=="docked":
-	    skip(1);	# start new line after text track 
-	if iquad in (IHE, IHF): # Hit our ship 
-	    skip(1)
-	    proutn(_("Torpedo hits "))
-	    crmshp()
-	    prout(".")
-	    hit = 700.0 + randreal(100) - \
-		1000.0 * distance(w, origin) * math.fabs(math.sin(bullseye-angle))
-	    newcnd(); # we're blown out of dock 
-	    # We may be displaced. 
-	    if game.landed or game.condition=="docked":
-		return hit # Cheat if on a planet 
-	    ang = angle + 2.5*(randreal()-0.5)
-	    temp = math.fabs(math.sin(ang))
-	    if math.fabs(math.cos(ang)) > temp:
-		temp = math.fabs(math.cos(ang))
-	    xx = -math.sin(ang)/temp
-	    yy = math.cos(ang)/temp
-	    jw.x = int(w.x+xx+0.5)
-	    jw.y = int(w.y+yy+0.5)
-	    if not VALID_SECTOR(jw.x, jw.y):
-		return hit
-	    if game.quad[jw.x][jw.y]==IHBLANK:
-		finish(FHOLE)
-		return hit
-	    if game.quad[jw.x][jw.y]!=IHDOT:
-		# can't move into object 
-		return hit
-	    game.sector = jw
-	    crmshp()
-	    shoved = True
-	elif iquad in (IHC, IHS): # Hit a commander 
-	    if withprob(0.05):
-		crmena(True, iquad, "sector", w)
-		prout(_(" uses anti-photon device;"))
-		prout(_("   torpedo neutralized."))
-		return None
-	elif iquad in (IHR, IHK): # Hit a regular enemy 
-	    # find the enemy 
-            for enemy in game.enemies:
-		if w == game.enemies[ll].kloc:
-		    break
-	    kp = math.fabs(e.kpower)
-	    h1 = 700.0 + randrange(100) - \
-		1000.0 * distance(w, origin) * math.fabs(math.sin(bullseye-angle))
-	    h1 = math.fabs(h1)
-	    if kp < h1:
-		h1 = kp
-            if enemy.kpower < 0:
-                enemy.kpower -= -h1
-            else:
-                enemy.kpower -= h1
-	    if enemy.kpower == 0:
-		deadkl(w, iquad, w)
-		return None
-	    crmena(True, iquad, "sector", w)
-	    # If enemy damaged but not destroyed, try to displace 
-	    ang = angle + 2.5*(randreal()-0.5)
-	    temp = math.fabs(math.sin(ang))
-	    if math.fabs(math.cos(ang)) > temp:
-		temp = math.fabs(math.cos(ang))
-	    xx = -math.sin(ang)/temp
-	    yy = math.cos(ang)/temp
-	    jw.x = int(w.x+xx+0.5)
-	    jw.y = int(w.y+yy+0.5)
-	    if not VALID_SECTOR(jw.x, jw.y):
-		prout(_(" damaged but not destroyed."))
-		return
-	    if game.quad[jw.x][jw.y]==IHBLANK:
-		prout(_(" buffeted into black hole."))
-		deadkl(w, iquad, jw)
-		return None
-	    if game.quad[jw.x][jw.y]!=IHDOT:
-		# can't move into object 
-		prout(_(" damaged but not destroyed."))
-		return None
-	    proutn(_(" damaged--"))
-	    enemy.kloc = jw
-	    shoved = True
-	    break
-	elif iquad == IHB: # Hit a base 
-	    skip(1)
-	    prout(_("***STARBASE DESTROYED.."))
-	    for ll in range(game.state.rembase):
-		if game.state.baseq[ll] == game.quadrant:
-		    game.state.baseq[ll]=game.state.baseq[game.state.rembase]
-		    break
-	    game.quad[w.x][w.y]=IHDOT
-	    game.state.rembase -= 1
-	    game.base.x=game.base.y=0
-	    game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase -= 1
-	    game.state.chart[game.quadrant.x][game.quadrant.y].starbase -= 1
-	    game.state.basekl += 1
-	    newcnd()
-	    return None
-	elif iquad == IHP: # Hit a planet 
-	    crmena(True, iquad, "sector", w)
-	    prout(_(" destroyed."))
-	    game.state.nplankl += 1
-	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = None
-	    game.iplnet.pclass = "destroyed"
-	    game.iplnet = None
-	    invalidate(game.plnet)
-	    game.quad[w.x][w.y] = IHDOT
-	    if game.landed:
-		# captain perishes on planet 
-		finish(FDPLANET)
-	    return None
-	elif iquad == IHW: # Hit an inhabited world -- very bad! 
-	    crmena(True, iquad, "sector", w)
-	    prout(_(" destroyed."))
-	    game.state.nworldkl += 1
-	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = None
-	    game.iplnet.pclass = "destroyed"
-	    game.iplnet = None
-	    invalidate(game.plnet)
-	    game.quad[w.x][w.y] = IHDOT
-	    if game.landed:
-		# captain perishes on planet 
-		finish(FDPLANET)
-	    prout(_("You have just destroyed an inhabited planet."))
-	    prout(_("Celebratory rallies are being held on the Klingon homeworld."))
-	    return None
-	elif iquad == IHSTAR: # Hit a star 
-	    if withprob(0.9):
-		nova(w)
-            else:
-                crmena(True, IHSTAR, "sector", w)
-                prout(_(" unaffected by photon blast."))
-	    return None
-	elif iquad == IHQUEST: # Hit a thingy 
-	    if not (game.options & OPTION_THINGY) or withprob(0.3):
-		skip(1)
-		prouts(_("AAAAIIIIEEEEEEEEAAAAAAAAUUUUUGGGGGHHHHHHHHHHHH!!!"))
-		skip(1)
-		prouts(_("    HACK!     HACK!    HACK!        *CHOKE!*  "))
-		skip(1)
-		proutn(_("Mr. Spock-"))
-		prouts(_("  \"Fascinating!\""))
-		skip(1)
-		deadkl(w, iquad, w)
-	    else:
-		#
-		# Stas Sergeev added the possibility that
-		# you can shove the Thingy and piss it off.
-		# It then becomes an enemy and may fire at you.
-		#
-		thing.angry = True
-		shoved = True
-	    return None
-	elif iquad == IHBLANK: # Black hole 
-	    skip(1)
-	    crmena(True, IHBLANK, "sector", w)
-	    prout(_(" swallows torpedo."))
-	    return None
-	elif iquad == IHWEB: # hit the web 
-	    skip(1)
-	    prout(_("***Torpedo absorbed by Tholian web."))
-	    return None
-	elif iquad == IHT:  # Hit a Tholian 
-	    h1 = 700.0 + randrange(100) - \
-		1000.0 * distance(w, origin) * math.fabs(math.sin(bullseye-angle))
-	    h1 = math.fabs(h1)
-	    if h1 >= 600:
-		game.quad[w.x][w.y] = IHDOT
-		deadkl(w, iquad, w)
-		game.tholian = None
-		return None
-	    skip(1)
-	    crmena(True, IHT, "sector", w)
-	    if withprob(0.05):
-		prout(_(" survives photon blast."))
-		return None
-	    prout(_(" disappears."))
-	    game.tholian.move(None)
-	    game.quad[w.x][w.y] = IHWEB
-	    dropin(IHBLANK)
-	    return None
-        else: # Problem!
-	    skip(1)
-	    proutn("Don't know how to handle torpedo collision with ")
-	    crmena(True, iquad, "sector", w)
-	    skip(1)
-	    return None
-	break
-    if curwnd!=message_window:
-	setwnd(message_window)
-    if shoved:
-	game.quad[w.x][w.y]=IHDOT
-	game.quad[jw.x][jw.y]=iquad
-	prout(_(" displaced by blast to Sector %s ") % jw)
-	for ll in range(len(game.enemies)):
-	    game.enemies[ll].kdist = game.enemies[ll].kavgd = distance(game.sector,game.enemies[ll].kloc)
-        game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
-	return None
-    skip(1)
-    prout(_("Torpedo missed."))
-    return None;
-
-def fry(hit):
-    # critical-hit resolution 
-    if hit < (275.0-25.0*game.skill)*randreal(1.0, 1.5):
-	return
-    ncrit = int(1.0 + hit/(500.0+randreal(100)))
-    proutn(_("***CRITICAL HIT--"))
-    # Select devices and cause damage
-    cdam = []
-    for loop1 in range(ncrit):
-        while True:
-	    j = randdevice()
-	    # Cheat to prevent shuttle damage unless on ship 
-            if not (game.damage[j]<0.0 or (j==DSHUTTL and game.iscraft != "onship")):
-                break
-	cdam.append(j)
-	extradm = (hit*game.damfac)/(ncrit*randreal(75, 100))
-	game.damage[j] += extradm
-    skipcount = 0
-    for (i, j) in enumerate(cdam):
-	proutn(device[j])
-        if skipcount % 3 == 2 and i < len(cdam)-1:
-            skip()
-        skipcount += 1
-        if i < len(cdam)-1:
-            proutn(_(" and "))
-    prout(_(" damaged."))
-    if damaged(DSHIELD) and game.shldup:
-	prout(_("***Shields knocked down."))
-	game.shldup=False
-
-def attack(torps_ok):
-    # bad guy attacks us 
-    # torps_ok == False forces use of phasers in an attack 
-    attempt = False; ihurt = False;
-    hitmax=0.0; hittot=0.0; chgfac=1.0
-    where = "neither"
-    # game could be over at this point, check 
-    if game.alldone:
-	return
-    if idebug:
-	prout("=== ATTACK!")
-    # Tholian gets to move before attacking 
-    if game.tholian:
-	movetholian()
-    # if you have just entered the RNZ, you'll get a warning 
-    if game.neutz: # The one chance not to be attacked 
-	game.neutz = False
-	return
-    # commanders get a chance to tac-move towards you 
-    if (((game.comhere or game.ishere) and not game.justin) or game.skill == SKILL_EMERITUS) and torps_ok:
-	moveklings()
-    # if no enemies remain after movement, we're done 
-    if len(game.enemies)==0 or (len(game.enemies)==1 and thing == game.quadrant and not thing.angry):
-	return
-    # set up partial hits if attack happens during shield status change 
-    pfac = 1.0/game.inshld
-    if game.shldchg:
-	chgfac = 0.25 + randreal(0.5)
-    skip(1)
-    # message verbosity control 
-    if game.skill <= SKILL_FAIR:
-	where = "sector"
-    for enemy in game.enemies:
-	if enemy.kpower < 0:
-	    continue;	# too weak to attack 
-	# compute hit strength and diminish shield power 
-	r = randreal()
-	# Increase chance of photon torpedos if docked or enemy energy is low 
-	if game.condition == "docked":
-	    r *= 0.25
-	if enemy.kpower < 500:
-	    r *= 0.25; 
-	if enemy.type==IHT or (enemy.type==IHQUEST and not thing.angry):
-	    continue
-	# different enemies have different probabilities of throwing a torp 
-	usephasers = not torps_ok or \
-	    (enemy.type == IHK and r > 0.0005) or \
-	    (enemy.type==IHC and r > 0.015) or \
-	    (enemy.type==IHR and r > 0.3) or \
-	    (enemy.type==IHS and r > 0.07) or \
-	    (enemy.type==IHQUEST and r > 0.05)
-	if usephasers:	    # Enemy uses phasers 
-	    if game.condition == "docked":
-		continue; # Don't waste the effort! 
-	    attempt = True; # Attempt to attack 
-	    dustfac = 0.8 + randreal(0.5)
-	    hit = enemy.kpower*math.pow(dustfac,enemy.kavgd)
-	    enemy.kpower *= 0.75
-	else: # Enemy uses photon torpedo 
-	    course = 1.90985*math.atan2(game.sector.y-enemy.kloc.y, enemy.kloc.x-game.sector.x)
-	    hit = 0
-	    proutn(_("***TORPEDO INCOMING"))
-	    if not damaged(DSRSENS):
-		proutn(_(" From "))
-		crmena(False, enemy.type, where, enemy.kloc)
-	    attempt = True
-	    prout("  ")
-	    dispersion = (randreal()+randreal())*0.5 - 0.5
-	    dispersion += 0.002*enemy.kpower*dispersion
-	    hit = torpedo(course, dispersion, origin=enemy.kloc, number=1, nburst=1)
-	    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
-		finish(FWON); # Klingons did themselves in! 
-	    if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova or game.alldone:
-		return # Supernova or finished 
-	    if hit == None:
-		continue
-	# incoming phaser or torpedo, shields may dissipate it 
-	if game.shldup or game.shldchg or game.condition=="docked":
-	    # shields will take hits 
-	    propor = pfac * game.shield
-            if game.condition =="docked":
-                propr *= 2.1
-	    if propor < 0.1:
-		propor = 0.1
-	    hitsh = propor*chgfac*hit+1.0
-	    absorb = 0.8*hitsh
-	    if absorb > game.shield:
-		absorb = game.shield
-	    game.shield -= absorb
-	    hit -= hitsh
-	    # taking a hit blasts us out of a starbase dock 
-	    if game.condition == "docked":
-		dock(False)
-	    # but the shields may take care of it 
-	    if propor > 0.1 and hit < 0.005*game.energy:
-		continue
-	# hit from this opponent got through shields, so take damage 
-	ihurt = True
-	proutn(_("%d unit hit") % int(hit))
-	if (damaged(DSRSENS) and usephasers) or game.skill<=SKILL_FAIR:
-	    proutn(_(" on the "))
-	    crmshp()
-	if not damaged(DSRSENS) and usephasers:
-	    proutn(_(" from "))
-	    crmena(False, enemy.type, where, enemy.kloc)
-	skip(1)
-	# Decide if hit is critical 
-	if hit > hitmax:
-	    hitmax = hit
-	hittot += hit
-	fry(hit)
-	game.energy -= hit
-    if game.energy <= 0:
-	# Returning home upon your shield, not with it... 
-	finish(FBATTLE)
-	return
-    if not attempt and game.condition == "docked":
-	prout(_("***Enemies decide against attacking your ship."))
-    percent = 100.0*pfac*game.shield+0.5
-    if not ihurt:
-	# Shields fully protect ship 
-	proutn(_("Enemy attack reduces shield strength to "))
-    else:
-	# Print message if starship suffered hit(s) 
-	skip(1)
-	proutn(_("Energy left %2d    shields ") % int(game.energy))
-	if game.shldup:
-	    proutn(_("up "))
-	elif not damaged(DSHIELD):
-	    proutn(_("down "))
-	else:
-	    proutn(_("damaged, "))
-    prout(_("%d%%,   torpedoes left %d") % (percent, game.torps))
-    # Check if anyone was hurt 
-    if hitmax >= 200 or hittot >= 500:
-	icas = randrange(int(hittot * 0.015))
-	if icas >= 2:
-	    skip(1)
-	    prout(_("Mc Coy-  \"Sickbay to bridge.  We suffered %d casualties") % icas)
-	    prout(_("   in that last attack.\""))
-	    game.casual += icas
-	    game.state.crew -= icas
-    # After attack, reset average distance to enemies 
-    for enemy in game.enemies:
-	enemy.kavgd = enemy.kdist
-    game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
-    return
-		
-def deadkl(w, type, mv):
-    # kill a Klingon, Tholian, Romulan, or Thingy 
-    # Added mv to allow enemy to "move" before dying 
-    crmena(True, type, "sector", mv)
-    # Decide what kind of enemy it is and update appropriately 
-    if type == IHR:
-        # chalk up a Romulan 
-        game.state.galaxy[game.quadrant.x][game.quadrant.y].romulans -= 1
-        game.irhere -= 1
-        game.state.nromrem -= 1
-    elif type == IHT:
-        # Killed a Tholian 
-        game.tholian = None
-    elif type == IHQUEST:
-        # Killed a Thingy
-        global thing
-        thing = None
-    else:
-        # Some type of a Klingon 
-        game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons -= 1
-        game.klhere -= 1
-        if type == IHC:
-            game.comhere = False
-            for i in range(game.state.remcom):
-                if game.state.kcmdr[i] == game.quadrant:
-                    break
-            game.state.kcmdr[i] = game.state.kcmdr[game.state.remcom]
-            game.state.kcmdr[game.state.remcom].x = 0
-            game.state.kcmdr[game.state.remcom].y = 0
-            game.state.remcom -= 1
-            unschedule(FTBEAM)
-            if game.state.remcom != 0:
-                schedule(FTBEAM, expran(1.0*game.incom/game.state.remcom))
-            if is_scheduled(FCDBAS) and game.battle == game.quadrant:
-                unschedule(FCDBAS)    
-        elif type ==  IHK:
-            game.state.remkl -= 1
-        elif type ==  IHS:
-            game.state.nscrem -= 1
-            game.ishere = False
-            game.state.kscmdr.x = game.state.kscmdr.y = game.isatb = 0
-            game.iscate = False
-            unschedule(FSCMOVE)
-            unschedule(FSCDBAS)
-    # For each kind of enemy, finish message to player 
-    prout(_(" destroyed."))
-    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
-	return
-    game.recompute()
-    # Remove enemy ship from arrays describing local conditions
-    for e in game.enemies:
-	if e.kloc == w:
-            e.move(None)
-	    break
-    return
-
-def targetcheck(w):
-    # Return None if target is invalid 
-    if not VALID_SECTOR(w.x, w.y):
-	huh()
-	return None
-    deltx = 0.1*(w.y - game.sector.y)
-    delty = 0.1*(w.x - game.sector.x)
-    if deltx==0 and delty== 0:
-	skip(1)
-	prout(_("Spock-  \"Bridge to sickbay.  Dr. McCoy,"))
-	prout(_("  I recommend an immediate review of"))
-	prout(_("  the Captain's psychological profile.\""))
-	chew()
-	return None
-    return 1.90985932*math.atan2(deltx, delty)
-
-def photon():
-    # launch photon torpedo
-    course = [0.0] * MAXBURST
-    game.ididit = False
-    if damaged(DPHOTON):
-	prout(_("Photon tubes damaged."))
-	chew()
-	return
-    if game.torps == 0:
-	prout(_("No torpedoes left."))
-	chew()
-	return
-    key = scan()
-    while True:
-	if key == IHALPHA:
-	    huh()
-	    return
-	elif key == IHEOL:
-	    prout(_("%d torpedoes left.") % game.torps)
-            chew()
-	    proutn(_("Number of torpedoes to fire- "))
-	    key = scan()
-	else: # key == IHREAL  {
-	    n = int(round(aaitem + 0.5))
-	    if n <= 0: # abort command 
-		chew()
-		return
-	    if n > MAXBURST:
-		chew()
-		prout(_("Maximum of %d torpedoes per burst.") % MAXBURST)
-		key = IHEOL
-		return
-	    if n <= game.torps:
-		break
-	    chew()
-	    key = IHEOL
-    targ = []
-    for i in range(MAXBURST):
-        targ.append(coord())
-    for i in range(n):
-	key = scan()
-	if i==0 and key == IHEOL:
-	    break;	# we will try prompting 
-	if i==1 and key == IHEOL:
-	    # direct all torpedoes at one target 
-	    while i <= n:
-		targ[i] = targ[0]
-		course[i] = course[0]
-		i += 1
-	    break
-	if key != IHREAL:
-	    huh()
-	    return
-	targ[i].x = aaitem
-	key = scan()
-	if key != IHREAL:
-	    huh()
-	    return
-	targ[i].y = aaitem
-	course[i] = targetcheck(targ[i])
-        if course[i] == None:
-	    return
-    chew()
-    if i == 1 and key == IHEOL:
-	# prompt for each one 
-	for i in range(n):
-	    proutn(_("Target sector for torpedo number %d- ") % (i+1))
-	    key = scan()
-	    if key != IHREAL:
-		huh()
-		return
-	    targ[i].x = int(aaitem-0.5)
-	    key = scan()
-	    if key != IHREAL:
-		huh()
-		return
-	    targ[i].y = int(aaitem-0.5)
-	    chew()
-            course[i] = targetcheck(targ[i])
-            if course[i] == None:
-                return
-    game.ididit = True
-    # Loop for moving <n> torpedoes 
-    for i in range(n):
-	if game.condition != "docked":
-	    game.torps -= 1
-	dispersion = (randreal()+randreal())*0.5 -0.5
-	if math.fabs(dispersion) >= 0.47:
-	    # misfire! 
-	    dispersion *= randreal(1.2, 2.2)
-	    if n > 0:
-		prouts(_("***TORPEDO NUMBER %d MISFIRES") % (i+1))
-	    else:
-		prouts(_("***TORPEDO MISFIRES."))
-	    skip(1)
-	    if i < n:
-		prout(_("  Remainder of burst aborted."))
-	    if withprob(0.2):
-		prout(_("***Photon tubes damaged by misfire."))
-		game.damage[DPHOTON] = game.damfac * randreal(1.0, 3.0)
-	    break
-	if game.shldup or game.condition == "docked":
-	    dispersion *= 1.0 + 0.0001*game.shield
-	torpedo(course[i], dispersion, origin=game.sector, number=i, nburst=n)
-	if game.alldone or game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
-	    return
-    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
-	finish(FWON);
-
-def overheat(rpow):
-    # check for phasers overheating 
-    if rpow > 1500:
-        checkburn = (rpow-1500.0)*0.00038
-        if withprob(checkburn):
-	    prout(_("Weapons officer Sulu-  \"Phasers overheated, sir.\""))
-	    game.damage[DPHASER] = game.damfac* randreal(1.0, 2.0) * (1.0+checkburn)
-
-def checkshctrl(rpow):
-    # check shield control 
-    skip(1)
-    if withprob(0.998):
-	prout(_("Shields lowered."))
-	return False
-    # Something bad has happened 
-    prouts(_("***RED ALERT!  RED ALERT!"))
-    skip(2)
-    hit = rpow*game.shield/game.inshld
-    game.energy -= rpow+hit*0.8
-    game.shield -= hit*0.2
-    if game.energy <= 0.0:
-	prouts(_("Sulu-  \"Captain! Shield malf***********************\""))
-	skip(1)
-	stars()
-	finish(FPHASER)
-	return True
-    prouts(_("Sulu-  \"Captain! Shield malfunction! Phaser fire contained!\""))
-    skip(2)
-    prout(_("Lt. Uhura-  \"Sir, all decks reporting damage.\""))
-    icas = randrange(int(hit*0.012))
-    skip(1)
-    fry(0.8*hit)
-    if icas:
-	skip(1)
-	prout(_("McCoy to bridge- \"Severe radiation burns, Jim."))
-	prout(_("  %d casualties so far.\"") % icas)
-	game.casual += icas
-	game.state.crew -= icas
-    skip(1)
-    prout(_("Phaser energy dispersed by shields."))
-    prout(_("Enemy unaffected."))
-    overheat(rpow)
-    return True;
-
-def hittem(hits):
-    # register a phaser hit on Klingons and Romulans
-    nenhr2 = len(game.enemies); kk=0
-    w = coord()
-    skip(1)
-    for (k, wham) in enumerate(hits):
-	if wham==0:
-	    continue
-	dustfac = randreal(0.9, 1.0)
-	hit = wham*math.pow(dustfac,game.enemies[kk].kdist)
-	kpini = game.enemies[kk].kpower
-	kp = math.fabs(kpini)
-	if PHASEFAC*hit < kp:
-	    kp = PHASEFAC*hit
-        if game.enemies[kk].kpower < 0:
-            game.enemies[kk].kpower -= -kp
-        else:
-            game.enemies[kk].kpower -= kp
-	kpow = game.enemies[kk].kpower
-	w = game.enemies[kk].kloc
-	if hit > 0.005:
-	    if not damaged(DSRSENS):
-		boom(w)
-	    proutn(_("%d unit hit on ") % int(hit))
-	else:
-	    proutn(_("Very small hit on "))
-	ienm = game.quad[w.x][w.y]
-	if ienm==IHQUEST:
-	    thing.angry = True
-	crmena(False, ienm, "sector", w)
-	skip(1)
-	if kpow == 0:
-	    deadkl(w, ienm, w)
-	    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
-		finish(FWON);		
-	    if game.alldone:
-		return
-	    kk -= 1	# don't do the increment
-            continue
-	else: # decide whether or not to emasculate klingon 
-	    if kpow>0 and withprob(0.9) and kpow <= randreal(0.4, 0.8)*kpini:
-		prout(_("***Mr. Spock-  \"Captain, the vessel at Sector %s")%w)
-		prout(_("   has just lost its firepower.\""))
-		game.enemies[kk].kpower = -kpow
-        kk += 1
-    return
-
-def phasers():
-    # fire phasers 
-    hits = []
-    kz = 0; k = 1; irec=0 # Cheating inhibitor 
-    ifast = False; no = False; itarg = True; msgflag = True; rpow=0
-    automode = "NOTSET"
-    key=0
-    skip(1)
-    # SR sensors and Computer are needed fopr automode 
-    if damaged(DSRSENS) or damaged(DCOMPTR):
-	itarg = False
-    if game.condition == "docked":
-	prout(_("Phasers can't be fired through base shields."))
-	chew()
-	return
-    if damaged(DPHASER):
-	prout(_("Phaser control damaged."))
-	chew()
-	return
-    if game.shldup:
-	if damaged(DSHCTRL):
-	    prout(_("High speed shield control damaged."))
-	    chew()
-	    return
-	if game.energy <= 200.0:
-	    prout(_("Insufficient energy to activate high-speed shield control."))
-	    chew()
-	    return
-	prout(_("Weapons Officer Sulu-  \"High-speed shield control enabled, sir.\""))
-	ifast = True
-    # Original code so convoluted, I re-did it all
-    # (That was Tom Almy talking about the C code, I think -- ESR)
-    while automode=="NOTSET":
-	key=scan()
-	if key == IHALPHA:
-	    if isit("manual"):
-		if len(game.enemies)==0:
-		    prout(_("There is no enemy present to select."))
-		    chew()
-		    key = IHEOL
-		    automode="AUTOMATIC"
-		else:
-		    automode = "MANUAL"
-		    key = scan()
-	    elif isit("automatic"):
-		if (not itarg) and len(game.enemies) != 0:
-		    automode = "FORCEMAN"
-		else:
-		    if len(game.enemies)==0:
-			prout(_("Energy will be expended into space."))
-		    automode = "AUTOMATIC"
-		    key = scan()
-	    elif isit("no"):
-		no = True
-	    else:
-		huh()
-		return
-	elif key == IHREAL:
-	    if len(game.enemies)==0:
-		prout(_("Energy will be expended into space."))
-		automode = "AUTOMATIC"
-	    elif not itarg:
-		automode = "FORCEMAN"
-	    else:
-		automode = "AUTOMATIC"
-	else:
-	    # IHEOL 
-	    if len(game.enemies)==0:
-		prout(_("Energy will be expended into space."))
-		automode = "AUTOMATIC"
-	    elif not itarg:
-		automode = "FORCEMAN"
-	    else: 
-		proutn(_("Manual or automatic? "))
-                chew()
-    avail = game.energy
-    if ifast:
-        avail -= 200.0
-    if automode == "AUTOMATIC":
-	if key == IHALPHA and isit("no"):
-	    no = True
-	    key = scan()
-	if key != IHREAL and len(game.enemies) != 0:
-	    prout(_("Phasers locked on target. Energy available: %.2f")%avail)
-	irec=0
-        while True:
-	    chew()
-	    if not kz:
-		for i in range(len(game.enemies)):
-		    irec += math.fabs(game.enemies[i].kpower)/(PHASEFAC*math.pow(0.90,game.enemies[i].kdist))*randreal(1.01, 1.06) + 1.0
-	    kz=1
-	    proutn(_("%d units required. ") % irec)
-	    chew()
-	    proutn(_("Units to fire= "))
-	    key = scan()
-	    if key!=IHREAL:
-		return
-	    rpow = aaitem
-	    if rpow > avail:
-		proutn(_("Energy available= %.2f") % avail)
-		skip(1)
-		key = IHEOL
-            if not rpow > avail:
-                break
-	if rpow<=0:
-	    # chicken out 
-	    chew()
-	    return
-        key=scan()
-	if key == IHALPHA and isit("no"):
-	    no = True
-	if ifast:
-	    game.energy -= 200; # Go and do it! 
-	    if checkshctrl(rpow):
-		return
-	chew()
-	game.energy -= rpow
-	extra = rpow
-	if len(game.enemies):
-	    extra = 0.0
-	    powrem = rpow
-	    for i in range(len(game.enemies)):
-		hits.append(0.0)
-		if powrem <= 0:
-		    continue
-		hits[i] = math.fabs(game.enemies[i].kpower)/(PHASEFAC*math.pow(0.90,game.enemies[i].kdist))
-		over = randreal(1.01, 1.06) * hits[i]
-		temp = powrem
-		powrem -= hits[i] + over
-		if powrem <= 0 and temp < hits[i]:
-		    hits[i] = temp
-		if powrem <= 0:
-		    over = 0.0
-		extra += over
-	    if powrem > 0.0:
-		extra += powrem
-	    hittem(hits)
-	    game.ididit = True
-	if extra > 0 and not game.alldone:
-	    if game.tholian:
-		proutn(_("*** Tholian web absorbs "))
-		if len(game.enemies)>0:
-		    proutn(_("excess "))
-		prout(_("phaser energy."))
-	    else:
-		prout(_("%d expended on empty space.") % int(extra))
-    elif automode == "FORCEMAN":
-	chew()
-	key = IHEOL
-	if damaged(DCOMPTR):
-	    prout(_("Battle computer damaged, manual fire only."))
-	else:
-	    skip(1)
-	    prouts(_("---WORKING---"))
-	    skip(1)
-	    prout(_("Short-range-sensors-damaged"))
-	    prout(_("Insufficient-data-for-automatic-phaser-fire"))
-	    prout(_("Manual-fire-must-be-used"))
-	    skip(1)
-    elif automode == "MANUAL":
-	rpow = 0.0
-        for k in range(len(game.enemies)):
-	    aim = game.enemies[k].kloc
-	    ienm = game.quad[aim.x][aim.y]
-	    if msgflag:
-		proutn(_("Energy available= %.2f") % (avail-0.006))
-		skip(1)
-		msgflag = False
-		rpow = 0.0
-	    if damaged(DSRSENS) and not (abs(game.sector.x-aim.x) < 2 and abs(game.sector.y-aim.y) < 2) and \
-		(ienm == IHC or ienm == IHS):
-		cramen(ienm)
-		prout(_(" can't be located without short range scan."))
-		chew()
-		key = IHEOL
-		hits[k] = 0; # prevent overflow -- thanks to Alexei Voitenko 
-		k += 1
-		continue
-	    if key == IHEOL:
-		chew()
-		if itarg and k > kz:
-		    irec=(abs(game.enemies[k].kpower)/(PHASEFAC*math.pow(0.9,game.enemies[k].kdist))) *	randreal(1.01, 1.06) + 1.0
-		kz = k
-		proutn("(")
-		if not damaged(DCOMPTR):
-		    proutn("%d" % irec)
-		else:
-		    proutn("??")
-		proutn(")  ")
-		proutn(_("units to fire at "))
-		crmena(False, ienm, "sector", aim)
-		proutn("-  ")
-		key = scan()
-	    if key == IHALPHA and isit("no"):
-		no = True
-		key = scan()
-		continue
-	    if key == IHALPHA:
-		huh()
-		return
-	    if key == IHEOL:
-		if k==1: # Let me say I'm baffled by this 
-		    msgflag = True
-		continue
-	    if aaitem < 0:
-		# abort out 
-		chew()
-		return
-	    hits[k] = aaitem
-	    rpow += aaitem
-	    # If total requested is too much, inform and start over 
-            if rpow > avail:
-		prout(_("Available energy exceeded -- try again."))
-		chew()
-		return
-	    key = scan(); # scan for next value 
-	    k += 1
-	if rpow == 0.0:
-	    # zero energy -- abort 
-	    chew()
-	    return
-	if key == IHALPHA and isit("no"):
-	    no = True
-	game.energy -= rpow
-	chew()
-	if ifast:
-	    game.energy -= 200.0
-	    if checkshctrl(rpow):
-		return
-	hittem(hits)
-	game.ididit = True
-     # Say shield raised or malfunction, if necessary 
-    if game.alldone:
-	return
-    if ifast:
-	skip(1)
-	if no == 0:
-	    if withprob(0.99):
-		prout(_("Sulu-  \"Sir, the high-speed shield control has malfunctioned . . ."))
-		prouts(_("         CLICK   CLICK   POP  . . ."))
-		prout(_(" No response, sir!"))
-		game.shldup = False
-	    else:
-		prout(_("Shields raised."))
-	else:
-	    game.shldup = False
-    overheat(rpow);
-
-# Code from events,c begins here.
-
-# This isn't a real event queue a la BSD Trek yet -- you can only have one 
-# event of each type active at any given time.  Mostly these means we can 
-# only have one FDISTR/FENSLV/FREPRO sequence going at any given time
-# BSD Trek, from which we swiped the idea, can have up to 5.
-
-def unschedule(evtype):
-    # remove an event from the schedule 
-    game.future[evtype].date = FOREVER
-    return game.future[evtype]
-
-def is_scheduled(evtype):
-    # is an event of specified type scheduled 
-    return game.future[evtype].date != FOREVER
-
-def scheduled(evtype):
-    # when will this event happen? 
-    return game.future[evtype].date
-
-def schedule(evtype, offset):
-    # schedule an event of specified type
-    game.future[evtype].date = game.state.date + offset
-    return game.future[evtype]
-
-def postpone(evtype, offset):
-    # postpone a scheduled event 
-    game.future[evtype].date += offset
-
-def cancelrest():
-    # rest period is interrupted by event 
-    if game.resting:
-	skip(1)
-	proutn(_("Mr. Spock-  \"Captain, shall we cancel the rest period?\""))
-	if ja() == True:
-	    game.resting = False
-	    game.optime = 0.0
-	    return True
-    return False
-
-def events():
-    # run through the event queue looking for things to do 
-    i=0
-    fintim = game.state.date + game.optime; yank=0
-    ictbeam = False; istract = False
-    w = coord(); hold = coord()
-    ev = event(); ev2 = event()
-
-    def tractorbeam(yank):
-        # tractor beaming cases merge here 
-        announce()
-        game.optime = (10.0/(7.5*7.5))*yank # 7.5 is yank rate (warp 7.5) 
-        skip(1)
-        proutn("***")
-        crmshp()
-        prout(_(" caught in long range tractor beam--"))
-        # If Kirk & Co. screwing around on planet, handle 
-        atover(True) # atover(true) is Grab 
-        if game.alldone:
-            return
-        if game.icraft: # Caught in Galileo? 
-            finish(FSTRACTOR)
-            return
-        # Check to see if shuttle is aboard 
-        if game.iscraft == "offship":
-            skip(1)
-            if withprob(0.5):
-                prout(_("Galileo, left on the planet surface, is captured"))
-                prout(_("by aliens and made into a flying McDonald's."))
-                game.damage[DSHUTTL] = -10
-                game.iscraft = "removed"
-            else:
-                prout(_("Galileo, left on the planet surface, is well hidden."))
-        if evcode == FSPY:
-            game.quadrant = game.state.kscmdr
-        else:
-            game.quadrant = game.state.kcmdr[i]
-        game.sector = randplace(QUADSIZE)
-        crmshp()
-        prout(_(" is pulled to Quadrant %s, Sector %s") \
-               % (game.quadrant, game.sector))
-        if game.resting:
-            prout(_("(Remainder of rest/repair period cancelled.)"))
-            game.resting = False
-        if not game.shldup:
-            if not damaged(DSHIELD) and game.shield > 0:
-                doshield(shraise=True) # raise shields 
-                game.shldchg = False
-            else:
-                prout(_("(Shields not currently useable.)"))
-        newqad(False)
-        # Adjust finish time to time of tractor beaming 
-        fintim = game.state.date+game.optime
-        attack(torps_ok=False)
-        if game.state.remcom <= 0:
-            unschedule(FTBEAM)
-        else: 
-            schedule(FTBEAM, game.optime+expran(1.5*game.intime/game.state.remcom))
-
-    def destroybase():
-        # Code merges here for any commander destroying base 
-        # Not perfect, but will have to do 
-        # Handle case where base is in same quadrant as starship 
-        if game.battle == game.quadrant:
-            game.state.chart[game.battle.x][game.battle.y].starbase = False
-            game.quad[game.base.x][game.base.y] = IHDOT
-            game.base.x=game.base.y=0
-            newcnd()
-            skip(1)
-            prout(_("Spock-  \"Captain, I believe the starbase has been destroyed.\""))
-        elif game.state.rembase != 1 and communicating():
-            # Get word via subspace radio 
-            announce()
-            skip(1)
-            prout(_("Lt. Uhura-  \"Captain, Starfleet Command reports that"))
-            proutn(_("   the starbase in Quadrant %s has been destroyed by") % game.battle)
-            if game.isatb == 2: 
-                prout(_("the Klingon Super-Commander"))
-            else:
-                prout(_("a Klingon Commander"))
-            game.state.chart[game.battle.x][game.battle.y].starbase = False
-        # Remove Starbase from galaxy 
-        game.state.galaxy[game.battle.x][game.battle.y].starbase = False
-        for i in range(1, game.state.rembase+1):
-            if game.state.baseq[i] == game.battle:
-                game.state.baseq[i] = game.state.baseq[game.state.rembase]
-        game.state.rembase -= 1
-        if game.isatb == 2:
-            # reinstate a commander's base attack 
-            game.battle = hold
-            game.isatb = 0
-        else:
-            invalidate(game.battle)
-
-    if idebug:
-	prout("=== EVENTS from %.2f to %.2f:" % (game.state.date, fintim))
-	for i in range(1, NEVENTS):
-	    if   i == FSNOVA:  proutn("=== Supernova       ")
-	    elif i == FTBEAM:  proutn("=== T Beam          ")
-	    elif i == FSNAP:   proutn("=== Snapshot        ")
-	    elif i == FBATTAK: proutn("=== Base Attack     ")
-	    elif i == FCDBAS:  proutn("=== Base Destroy    ")
-	    elif i == FSCMOVE: proutn("=== SC Move         ")
-	    elif i == FSCDBAS: proutn("=== SC Base Destroy ")
-	    elif i == FDSPROB: proutn("=== Probe Move      ")
-	    elif i == FDISTR:  proutn("=== Distress Call   ")
-	    elif i == FENSLV:  proutn("=== Enslavement     ")
-	    elif i == FREPRO:  proutn("=== Klingon Build   ")
-	    if is_scheduled(i):
-		prout("%.2f" % (scheduled(i)))
-	    else:
-		prout("never")
-    radio_was_broken = damaged(DRADIO)
-    hold.x = hold.y = 0
-    while True:
-	# Select earliest extraneous event, evcode==0 if no events 
-	evcode = FSPY
-	if game.alldone:
-	    return
-	datemin = fintim
-	for l in range(1, NEVENTS):
-	    if game.future[l].date < datemin:
-		evcode = l
-		if idebug:
-		    prout("== Event %d fires" % evcode)
-		datemin = game.future[l].date
-	xtime = datemin-game.state.date
-	game.state.date = datemin
-	# Decrement Federation resources and recompute remaining time 
-	game.state.remres -= (game.state.remkl+4*game.state.remcom)*xtime
-        game.recompute()
-	if game.state.remtime <=0:
-	    finish(FDEPLETE)
-	    return
-	# Any crew left alive? 
-	if game.state.crew <=0:
-	    finish(FCREW)
-	    return
-	# Is life support adequate? 
-	if damaged(DLIFSUP) and game.condition != "docked":
-	    if game.lsupres < xtime and game.damage[DLIFSUP] > game.lsupres:
-		finish(FLIFESUP)
-		return
-	    game.lsupres -= xtime
-	    if game.damage[DLIFSUP] <= xtime:
-		game.lsupres = game.inlsr
-	# Fix devices 
-	repair = xtime
-	if game.condition == "docked":
-	    repair /= game.docfac
-	# Don't fix Deathray here 
-	for l in range(NDEVICES):
-	    if game.damage[l] > 0.0 and l != DDRAY:
-                if game.damage[l]-repair > 0.0:
-                    game.damage[l] -= repair
-                else:
-                    game.damage[l] = 0.0
-	# If radio repaired, update star chart and attack reports 
-	if radio_was_broken and not damaged(DRADIO):
-	    prout(_("Lt. Uhura- \"Captain, the sub-space radio is working and"))
-	    prout(_("   surveillance reports are coming in."))
-	    skip(1)
-	    if not game.iseenit:
-		attackreport(False)
-		game.iseenit = True
-	    rechart()
-	    prout(_("   The star chart is now up to date.\""))
-	    skip(1)
-	# Cause extraneous event EVCODE to occur 
-	game.optime -= xtime
-	if evcode == FSNOVA: # Supernova 
-	    announce()
-	    supernova(False)
-	    schedule(FSNOVA, expran(0.5*game.intime))
-	    if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
-		return
-	elif evcode == FSPY: # Check with spy to see if SC should tractor beam 
-	    if game.state.nscrem == 0 or \
-		ictbeam or istract or \
-                game.condition=="docked" or game.isatb==1 or game.iscate:
-		return
-	    if game.ientesc or \
-		(game.energy<2000 and game.torps<4 and game.shield < 1250) or \
-		(damaged(DPHASER) and (damaged(DPHOTON) or game.torps<4)) or \
-		(damaged(DSHIELD) and \
-		 (game.energy < 2500 or damaged(DPHASER)) and \
-                 (game.torps < 5 or damaged(DPHOTON))):
-		# Tractor-beam her! 
-		istract = ictbeam = True
-                tractorbeam(distance(game.state.kscmdr, game.quadrant))
-	    else:
-		return
-	elif evcode == FTBEAM: # Tractor beam 
-            if game.state.remcom == 0:
-                unschedule(FTBEAM)
-                continue
-            i = randrange(game.state.remcom)
-            yank = distance(game.state.kcmdr[i], game.quadrant)
-            if istract or game.condition == "docked" or yank == 0:
-                # Drats! Have to reschedule 
-                schedule(FTBEAM, 
-                         game.optime + expran(1.5*game.intime/game.state.remcom))
-                continue
-            ictbeam = True
-            tractorbeam(yank)
-	elif evcode == FSNAP: # Snapshot of the universe (for time warp) 
-	    game.snapsht = copy.deepcopy(game.state)
-	    game.state.snap = True
-	    schedule(FSNAP, expran(0.5 * game.intime))
-	elif evcode == FBATTAK: # Commander attacks starbase 
-	    if game.state.remcom==0 or game.state.rembase==0:
-		# no can do 
-		unschedule(FBATTAK)
-		unschedule(FCDBAS)
-                continue
-	    i = 0
-	    for j in range(game.state.rembase):
-		for k in range(game.state.remcom):
-		    if game.state.baseq[j] == game.state.kcmdr[k] and \
-			not game.state.baseq[j] == game.quadrant and \
-                        not game.state.baseq[j] == game.state.kscmdr:
-			i = 1
-		if i == 1:
-		    continue
-	    if j>game.state.rembase:
-		# no match found -- try later 
-		schedule(FBATTAK, expran(0.3*game.intime))
-		unschedule(FCDBAS)
-		continue
-	    # commander + starbase combination found -- launch attack 
-	    game.battle = game.state.baseq[j]
-	    schedule(FCDBAS, randreal(1.0, 4.0))
-	    if game.isatb: # extra time if SC already attacking 
-		postpone(FCDBAS, scheduled(FSCDBAS)-game.state.date)
-	    game.future[FBATTAK].date = game.future[FCDBAS].date + expran(0.3*game.intime)
-	    game.iseenit = False
-            if not communicating():
-		continue # No warning :-( 
-	    game.iseenit = True
-	    announce()
-	    skip(1)
-	    prout(_("Lt. Uhura-  \"Captain, the starbase in Quadrant %s") % game.battle)
-	    prout(_("   reports that it is under attack and that it can"))
-	    prout(_("   hold out only until stardate %d.\"") % (int(scheduled(FCDBAS))))
-	    if cancelrest():
-                return
-	elif evcode == FSCDBAS: # Supercommander destroys base 
-	    unschedule(FSCDBAS)
-	    game.isatb = 2
-	    if not game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].starbase: 
-		continue # WAS RETURN! 
-	    hold = game.battle
-	    game.battle = game.state.kscmdr
-	    destroybase()
-	elif evcode == FCDBAS: # Commander succeeds in destroying base 
-	    if evcode==FCDBAS:
-		unschedule(FCDBAS)
-		# find the lucky pair 
-		for i in range(game.state.remcom):
-		    if game.state.kcmdr[i] == game.battle: 
-			break
-		if i > game.state.remcom or game.state.rembase == 0 or \
-		    not game.state.galaxy[game.battle.x][game.battle.y].starbase:
-		    # No action to take after all 
-		    invalidate(game.battle)
-		    continue
-            destroybase()
-	elif evcode == FSCMOVE: # Supercommander moves 
-	    schedule(FSCMOVE, 0.2777)
-	    if not game.ientesc and not istract and game.isatb != 1 and \
-                   (not game.iscate or not game.justin): 
-		supercommander()
-	elif evcode == FDSPROB: # Move deep space probe 
-	    schedule(FDSPROB, 0.01)
-	    game.probex += game.probeinx
-	    game.probey += game.probeiny
-	    i = (int)(game.probex/QUADSIZE +0.05)
-	    j = (int)(game.probey/QUADSIZE + 0.05)
-	    if game.probec.x != i or game.probec.y != j:
-		game.probec.x = i
-		game.probec.y = j
-		if not VALID_QUADRANT(i, j) or \
-		    game.state.galaxy[game.probec.x][game.probec.y].supernova:
-		    # Left galaxy or ran into supernova
-                    if comunicating():
-			announce()
-			skip(1)
-			proutn(_("Lt. Uhura-  \"The deep space probe "))
-			if not VALID_QUADRANT(j, i):
-			    proutn(_("has left the galaxy"))
-			else:
-			    proutn(_("is no longer transmitting"))
-			prout(".\"")
-		    unschedule(FDSPROB)
-		    continue
-                if not communicating():
-		    announce()
-		    skip(1)
-		    proutn(_("Lt. Uhura-  \"The deep space probe is now in Quadrant %s.\"") % game.probec)
-	    pdest = game.state.galaxy[game.probec.x][game.probec.y]
-	    # Update star chart if Radio is working or have access to radio
-	    if communicating():
-		chp = game.state.chart[game.probec.x][game.probec.y]
-		chp.klingons = pdest.klingons
-		chp.starbase = pdest.starbase
-		chp.stars = pdest.stars
-		pdest.charted = True
-	    game.proben -= 1 # One less to travel
-	    if game.proben == 0 and game.isarmed and pdest.stars:
-		# lets blow the sucker! 
-		supernova(True, game.probec)
-		unschedule(FDSPROB)
-		if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova: 
-		    return
-	elif evcode == FDISTR: # inhabited system issues distress call 
-	    unschedule(FDISTR)
-	    # try a whole bunch of times to find something suitable 
-            for i in range(100):
-		# need a quadrant which is not the current one,
-		# which has some stars which are inhabited and
-		# not already under attack, which is not
-		# supernova'ed, and which has some Klingons in it
-		w = randplace(GALSIZE)
-		q = game.state.galaxy[w.x][w.y]
-                if not (game.quadrant == w or q.planet == None or \
-		      not q.planet.inhabited or \
-		      q.supernova or q.status!="secure" or q.klingons<=0):
-                    break
-            else:
-		# can't seem to find one; ignore this call 
-		if idebug:
-		    prout("=== Couldn't find location for distress event.")
-		continue
-	    # got one!!  Schedule its enslavement 
-	    ev = schedule(FENSLV, expran(game.intime))
-	    ev.quadrant = w
-	    q.status = distressed
-
-	    # tell the captain about it if we can 
-	    if communicating():
-		prout(_("Uhura- Captain, %s in Quadrant %s reports it is under attack") \
-                        % (q.planet, `w`))
-		prout(_("by a Klingon invasion fleet."))
-		if cancelrest():
-		    return
-	elif evcode == FENSLV:		# starsystem is enslaved 
-	    ev = unschedule(FENSLV)
-	    # see if current distress call still active 
-	    q = game.state.galaxy[ev.quadrant.x][ev.quadrant.y]
-	    if q.klingons <= 0:
-		q.status = "secure"
-		continue
-	    q.status = "enslaved"
-
-	    # play stork and schedule the first baby 
-	    ev2 = schedule(FREPRO, expran(2.0 * game.intime))
-	    ev2.quadrant = ev.quadrant
-
-	    # report the disaster if we can 
-	    if communicating():
-		prout(_("Uhura- We've lost contact with starsystem %s") % \
-                        q.planet)
-		prout(_("in Quadrant %s.\n") % ev.quadrant)
-	elif evcode == FREPRO:		# Klingon reproduces 
-	    # If we ever switch to a real event queue, we'll need to
-	    # explicitly retrieve and restore the x and y.
-	    ev = schedule(FREPRO, expran(1.0 * game.intime))
-	    # see if current distress call still active 
-	    q = game.state.galaxy[ev.quadrant.x][ev.quadrant.y]
-	    if q.klingons <= 0:
-		q.status = "secure"
-		continue
-	    if game.state.remkl >=MAXKLGAME:
-		continue		# full right now 
-	    # reproduce one Klingon 
-	    w = ev.quadrant
-	    if game.klhere >= MAXKLQUAD:
-                try:
-                    # this quadrant not ok, pick an adjacent one 
-                    for i in range(w.x - 1, w.x + 2):
-                        for j in range(w.y - 1, w.y + 2):
-                            if not VALID_QUADRANT(i, j):
-                                continue
-                            q = game.state.galaxy[w.x][w.y]
-                            # check for this quad ok (not full & no snova) 
-                            if q.klingons >= MAXKLQUAD or q.supernova:
-                                continue
-                            raise "FOUNDIT"
-                    else:
-                        continue	# search for eligible quadrant failed
-                except "FOUNDIT":
-                    w.x = i
-                    w.y = j
-	    # deliver the child 
-	    game.state.remkl += 1
-	    q.klingons += 1
-	    if game.quadrant == w:
-                game.klhere += 1
-		game.enemies.append(newkling())
-	    # recompute time left
-            game.recompute()
-	    # report the disaster if we can 
-	    if communicating():
-		if game.quadrant == w:
-		    prout(_("Spock- sensors indicate the Klingons have"))
-		    prout(_("launched a warship from %s.") % q.planet)
-		else:
-		    prout(_("Uhura- Starfleet reports increased Klingon activity"))
-		    if q.planet != None:
-			proutn(_("near %s") % q.planet)
-		    prout(_("in Quadrant %s.") % w)
-				
-def wait():
-    # wait on events 
-    game.ididit = False
-    while True:
-	key = scan()
-	if key  != IHEOL:
-	    break
-	proutn(_("How long? "))
-    chew()
-    if key != IHREAL:
-	huh()
-	return
-    origTime = delay = aaitem
-    if delay <= 0.0:
-	return
-    if delay >= game.state.remtime or len(game.enemies) != 0:
-	proutn(_("Are you sure? "))
-	if ja() == False:
-	    return
-    # Alternate resting periods (events) with attacks 
-    game.resting = True
-    while True:
-	if delay <= 0:
-	    game.resting = False
-	if not game.resting:
-	    prout(_("%d stardates left.") % int(game.state.remtime))
-	    return
-	temp = game.optime = delay
-	if len(game.enemies):
-	    rtime = randreal(1.0, 2.0)
-	    if rtime < temp:
-		temp = rtime
-	    game.optime = temp
-	if game.optime < delay:
-	    attack(torps_ok=False)
-	if game.alldone:
-	    return
-	events()
-	game.ididit = True
-	if game.alldone:
-	    return
-	delay -= temp
-	# Repair Deathray if long rest at starbase 
-	if origTime-delay >= 9.99 and game.condition == "docked":
-	    game.damage[DDRAY] = 0.0
-	# leave if quadrant supernovas
-        if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
-            break
-    game.resting = False
-    game.optime = 0
-
-# A nova occurs.  It is the result of having a star hit with a
-# photon torpedo, or possibly of a probe warhead going off.
-# Stars that go nova cause stars which surround them to undergo
-# the same probabilistic process.  Klingons next to them are
-# destroyed.  And if the starship is next to it, it gets zapped.
-# If the zap is too much, it gets destroyed.
-        
-def nova(nov):
-    # star goes nova 
-    course = (0.0, 10.5, 12.0, 1.5, 9.0, 0.0, 3.0, 7.5, 6.0, 4.5)
-    newc = coord(); neighbor = coord(); bump = coord(0, 0)
-    if withprob(0.05):
-	# Wow! We've supernova'ed 
-	supernova(False, nov)
-	return
-    # handle initial nova 
-    game.quad[nov.x][nov.y] = IHDOT
-    crmena(False, IHSTAR, "sector", nov)
-    prout(_(" novas."))
-    game.state.galaxy[game.quadrant.x][game.quadrant.y].stars -= 1
-    game.state.starkl += 1
-    # Set up queue to recursively trigger adjacent stars 
-    hits = [nov]
-    kount = 0
-    while hits:
-        offset = coord()
-        start = hits.pop()
-        for offset.x in range(-1, 1+1):
-            for offset.y in range(-1, 1+1):
-                if offset.y==0 and offset.x==0:
-                    continue
-                neighbor = start + offset
-                if not VALID_SECTOR(neighbor.y, neighbor.x):
-                    continue
-                iquad = game.quad[neighbor.x][neighbor.y]
-                # Empty space ends reaction
-                if iquad in (IHDOT, IHQUEST, IHBLANK, IHT, IHWEB):
-                    pass
-                elif iquad == IHSTAR: # Affect another star 
-                    if withprob(0.05):
-                        # This star supernovas 
-                        supernova(False)
-                        return
-                    else:
-                        hits.append(neighbor)
-			game.state.galaxy[game.quadrant.x][game.quadrant.y].stars -= 1
-			game.state.starkl += 1
-			crmena(True, IHSTAR, "sector", neighbor)
-			prout(_(" novas."))
-                        game.quad[neighbor.x][neighbor.y] = IHDOT
-                        kount += 1
-                elif iquad in (IHP, IHW): # Destroy planet 
-                    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = None
-                    if iquad == IHP:
-                        game.state.nplankl += 1
-                    else:
-                        game.state.worldkl += 1
-                    crmena(True, iquad, "sector", neighbor)
-                    prout(_(" destroyed."))
-                    game.iplnet.pclass = "destroyed"
-                    game.iplnet = None
-                    invalidate(game.plnet)
-                    if game.landed:
-                        finish(FPNOVA)
-                        return
-                    game.quad[neighbor.x][neighbor.y] = IHDOT
-                elif iquad == IHB: # Destroy base 
-                    game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase = False
-                    for i in range(game.state.rembase):
-                        if game.state.baseq[i] == game.quadrant: 
-                            break
-                    game.state.baseq[i] = game.state.baseq[game.state.rembase]
-                    game.state.rembase -= 1
-                    invalidate(game.base)
-                    game.state.basekl += 1
-                    newcnd()
-                    crmena(True, IHB, "sector", neighbor)
-                    prout(_(" destroyed."))
-                    game.quad[neighbor.x][neighbor.y] = IHDOT
-                elif iquad in (IHE, IHF): # Buffet ship 
-                    prout(_("***Starship buffeted by nova."))
-                    if game.shldup:
-                        if game.shield >= 2000.0:
-                            game.shield -= 2000.0
-                        else:
-                            diff = 2000.0 - game.shield
-                            game.energy -= diff
-                            game.shield = 0.0
-                            game.shldup = False
-                            prout(_("***Shields knocked out."))
-                            game.damage[DSHIELD] += 0.005*game.damfac*randreal()*diff
-                    else:
-                        game.energy -= 2000.0
-                    if game.energy <= 0:
-                        finish(FNOVA)
-                        return
-                    # add in course nova contributes to kicking starship
-                    bump += (game.sector-hits[mm]).sgn()
-                elif iquad == IHK: # kill klingon 
-                    deadkl(neighbor, iquad, neighbor)
-                elif iquad in (IHC,IHS,IHR): # Damage/destroy big enemies 
-                    for ll in range(len(game.enemies)):
-                        if game.enemies[ll].kloc == neighbor:
-                            break
-                    game.enemies[ll].kpower -= 800.0 # If firepower is lost, die 
-                    if game.enemies[ll].kpower <= 0.0:
-                        deadkl(neighbor, iquad, neighbor)
-                        break
-                    newc = neighbor + neighbor - hits[mm]
-                    crmena(True, iquad, "sector", neighbor)
-                    proutn(_(" damaged"))
-                    if not VALID_SECTOR(newc.x, newc.y):
-                        # can't leave quadrant 
-                        skip(1)
-                        break
-                    iquad1 = game.quad[newc.x][newc.y]
-                    if iquad1 == IHBLANK:
-                        proutn(_(", blasted into "))
-                        crmena(False, IHBLANK, "sector", newc)
-                        skip(1)
-                        deadkl(neighbor, iquad, newc)
-                        break
-                    if iquad1 != IHDOT:
-                        # can't move into something else 
-                        skip(1)
-                        break
-                    proutn(_(", buffeted to Sector %s") % newc)
-                    game.quad[neighbor.x][neighbor.y] = IHDOT
-                    game.quad[newc.x][newc.y] = iquad
-                    game.enemies[ll].move(newc)
-    # Starship affected by nova -- kick it away. 
-    game.dist = kount*0.1
-    game.direc = course[3*(bump.x+1)+bump.y+2]
-    if game.direc == 0.0:
-	game.dist = 0.0
-    if game.dist == 0.0:
-	return
-    game.optime = 10.0*game.dist/16.0
-    skip(1)
-    prout(_("Force of nova displaces starship."))
-    imove(novapush=True)
-    game.optime = 10.0*game.dist/16.0
-    return
-	
-def supernova(induced, w=None):
-    # star goes supernova 
-    num = 0; npdead = 0
-    nq = coord()
-    if w != None: 
-	nq = w
-    else:
-	stars = 0
-	# Scheduled supernova -- select star 
-	# logic changed here so that we won't favor quadrants in top
-        # left of universe 
-	for nq.x in range(GALSIZE):
-	    for nq.y in range(GALSIZE):
-		stars += game.state.galaxy[nq.x][nq.y].stars
-	if stars == 0:
-	    return # nothing to supernova exists 
-	num = randrange(stars) + 1
-	for nq.x in range(GALSIZE):
-	    for nq.y in range(GALSIZE):
-		num -= game.state.galaxy[nq.x][nq.y].stars
-		if num <= 0:
-		    break
-	    if num <=0:
-		break
-	if idebug:
-	    proutn("=== Super nova here?")
-	    if ja() == True:
-		nq = game.quadrant
-    if not nq == game.quadrant or game.justin:
-	# it isn't here, or we just entered (treat as enroute) 
-	if communicating():
-	    skip(1)
-	    prout(_("Message from Starfleet Command       Stardate %.2f") % game.state.date)
-	    prout(_("     Supernova in Quadrant %s; caution advised.") % nq)
-    else:
-	ns = coord()
-	# we are in the quadrant! 
-	num = randrange(game.state.galaxy[nq.x][nq.y].stars) + 1
-	for ns.x in range(QUADSIZE):
-	    for ns.y in range(QUADSIZE):
-		if game.quad[ns.x][ns.y]==IHSTAR:
-		    num -= 1
-		    if num==0:
-			break
-	    if num==0:
-		break
-	skip(1)
-	prouts(_("***RED ALERT!  RED ALERT!"))
-	skip(1)
-	prout(_("***Incipient supernova detected at Sector %s") % ns)
-	if square(ns.x-game.sector.x) + square(ns.y-game.sector.y) <= 2.1:
-	    proutn(_("Emergency override attempts t"))
-	    prouts("***************")
-	    skip(1)
-	    stars()
-	    game.alldone = True
-
-    # destroy any Klingons in supernovaed quadrant 
-    kldead = game.state.galaxy[nq.x][nq.y].klingons
-    game.state.galaxy[nq.x][nq.y].klingons = 0
-    if nq == game.state.kscmdr:
-	# did in the Supercommander! 
-	game.state.nscrem = game.state.kscmdr.x = game.state.kscmdr.y = game.isatb =  0
-	game.iscate = False
-	unschedule(FSCMOVE)
-	unschedule(FSCDBAS)
-    if game.state.remcom:
-	maxloop = game.state.remcom
-	for l in range(maxloop):
-	    if game.state.kcmdr[l] == nq:
-		game.state.kcmdr[l] = game.state.kcmdr[game.state.remcom]
-		invalidate(game.state.kcmdr[game.state.remcom])
-		game.state.remcom -= 1
-		kldead -= 1
-		if game.state.remcom==0:
-		    unschedule(FTBEAM)
-		break
-    game.state.remkl -= kldead
-    # destroy Romulans and planets in supernovaed quadrant 
-    nrmdead = game.state.galaxy[nq.x][nq.y].romulans
-    game.state.galaxy[nq.x][nq.y].romulans = 0
-    game.state.nromrem -= nrmdead
-    # Destroy planets 
-    for loop in range(game.inplan):
-	if game.state.planets[loop].w == nq:
-	    game.state.planets[loop].pclass = "destroyed"
-	    npdead += 1
-    # Destroy any base in supernovaed quadrant 
-    if game.state.rembase:
-	maxloop = game.state.rembase
-	for loop in range(maxloop):
-	    if game.state.baseq[loop] == nq:
-		game.state.baseq[loop] = game.state.baseq[game.state.rembase]
-		invalidate(game.state.baseq[game.state.rembase])
-		game.state.rembase -= 1
-		break
-    # If starship caused supernova, tally up destruction 
-    if induced:
-	game.state.starkl += game.state.galaxy[nq.x][nq.y].stars
-	game.state.basekl += game.state.galaxy[nq.x][nq.y].starbase
-	game.state.nplankl += npdead
-    # mark supernova in galaxy and in star chart 
-    if game.quadrant == nq or communicating():
-	game.state.galaxy[nq.x][nq.y].supernova = True
-    # If supernova destroys last Klingons give special message 
-    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0 and not nq == game.quadrant:
-	skip(2)
-	if not induced:
-	    prout(_("Lucky you!"))
-	proutn(_("A supernova in %s has just destroyed the last Klingons.") % nq)
-	finish(FWON)
-	return
-    # if some Klingons remain, continue or die in supernova 
-    if game.alldone:
-	finish(FSNOVAED)
-    return
-
-# Code from finish.c ends here.
-
-def selfdestruct():
-    # self-destruct maneuver 
-    # Finish with a BANG! 
-    chew()
-    if damaged(DCOMPTR):
-	prout(_("Computer damaged; cannot execute destruct sequence."))
-	return
-    prouts(_("---WORKING---")); skip(1)
-    prouts(_("SELF-DESTRUCT-SEQUENCE-ACTIVATED")); skip(1)
-    prouts("   10"); skip(1)
-    prouts("       9"); skip(1)
-    prouts("          8"); skip(1)
-    prouts("             7"); skip(1)
-    prouts("                6"); skip(1)
-    skip(1)
-    prout(_("ENTER-CORRECT-PASSWORD-TO-CONTINUE-"))
-    skip(1)
-    prout(_("SELF-DESTRUCT-SEQUENCE-OTHERWISE-"))
-    skip(1)
-    prout(_("SELF-DESTRUCT-SEQUENCE-WILL-BE-ABORTED"))
-    skip(1)
-    scan()
-    chew()
-    if game.passwd != citem:
-	prouts(_("PASSWORD-REJECTED;"))
-	skip(1)
-	prouts(_("CONTINUITY-EFFECTED"))
-	skip(2)
-	return
-    prouts(_("PASSWORD-ACCEPTED")); skip(1)
-    prouts("                   5"); skip(1)
-    prouts("                      4"); skip(1)
-    prouts("                         3"); skip(1)
-    prouts("                            2"); skip(1)
-    prouts("                              1"); skip(1)
-    if withprob(0.15):
-	prouts(_("GOODBYE-CRUEL-WORLD"))
-	skip(1)
-    kaboom()
-
-def kaboom():
-    stars()
-    if game.ship==IHE:
-	prouts("***")
-    prouts(_("********* Entropy of "))
-    crmshp()
-    prouts(_(" maximized *********"))
-    skip(1)
-    stars()
-    skip(1)
-    if len(game.enemies) != 0:
-	whammo = 25.0 * game.energy
-	l=1
-	while l <= len(game.enemies):
-	    if game.enemies[l].kpower*game.enemies[l].kdist <= whammo: 
-		deadkl(game.enemies[l].kloc, game.quad[game.enemies[l].kloc.x][game.enemies[l].kloc.y], game.enemies[l].kloc)
-	    l += 1
-    finish(FDILITHIUM)
-				
-def killrate():
-    "Compute our rate of kils over time."
-    elapsed = game.state.date - game.indate
-    if elapsed == 0:	# Avoid divide-by-zero error if calculated on turn 0
-        return 0
-    else:
-        starting = (game.inkling + game.incom + game.inscom)
-        remaining = (game.state.remkl + game.state.remcom + game.state.nscrem)
-        return (starting - remaining)/elapsed
-
-def badpoints():
-    "Compute demerits."
-    badpt = 5.0*game.state.starkl + \
-            game.casual + \
-            10.0*game.state.nplankl + \
-            300*game.state.nworldkl + \
-            45.0*game.nhelp +\
-            100.0*game.state.basekl +\
-            3.0*game.abandoned
-    if game.ship == IHF:
-        badpt += 100.0
-    elif game.ship == None:
-        badpt += 200.0
-    return badpt
-
-def finish(ifin):
-    # end the game, with appropriate notfications 
-    igotit = False
-    game.alldone = True
-    skip(3)
-    prout(_("It is stardate %.1f.") % game.state.date)
-    skip(1)
-    if ifin == FWON: # Game has been won
-	if game.state.nromrem != 0:
-	    prout(_("The remaining %d Romulans surrender to Starfleet Command.") %
-		  game.state.nromrem)
-
-	prout(_("You have smashed the Klingon invasion fleet and saved"))
-	prout(_("the Federation."))
-	game.gamewon = True
-	if game.alive:
-            badpt = badpoints()
-            if badpt < 100.0:
-                badpt = 0.0	# Close enough!
-            # killsPerDate >= RateMax
-	    if game.state.date-game.indate < 5.0 or \
-                killrate() >= 0.1*game.skill*(game.skill+1.0) + 0.1 + 0.008*badpt:
-		skip(1)
-		prout(_("In fact, you have done so well that Starfleet Command"))
-		if game.skill == SKILL_NOVICE:
-		    prout(_("promotes you one step in rank from \"Novice\" to \"Fair\"."))
-		elif game.skill == SKILL_FAIR:
-		    prout(_("promotes you one step in rank from \"Fair\" to \"Good\"."))
-		elif game.skill == SKILL_GOOD:
-		    prout(_("promotes you one step in rank from \"Good\" to \"Expert\"."))
-		elif game.skill == SKILL_EXPERT:
-		    prout(_("promotes you to Commodore Emeritus."))
-		    skip(1)
-		    prout(_("Now that you think you're really good, try playing"))
-		    prout(_("the \"Emeritus\" game. It will splatter your ego."))
-		elif game.skill == SKILL_EMERITUS:
-		    skip(1)
-		    proutn(_("Computer-  "))
-		    prouts(_("ERROR-ERROR-ERROR-ERROR"))
-		    skip(2)
-		    prouts(_("  YOUR-SKILL-HAS-EXCEEDED-THE-CAPACITY-OF-THIS-PROGRAM"))
-		    skip(1)
-		    prouts(_("  THIS-PROGRAM-MUST-SURVIVE"))
-		    skip(1)
-		    prouts(_("  THIS-PROGRAM-MUST-SURVIVE"))
-		    skip(1)
-		    prouts(_("  THIS-PROGRAM-MUST-SURVIVE"))
-		    skip(1)
-		    prouts(_("  THIS-PROGRAM-MUST?- MUST ? - SUR? ? -?  VI"))
-		    skip(2)
-		    prout(_("Now you can retire and write your own Star Trek game!"))
-		    skip(1)
-		elif game.skill >= SKILL_EXPERT:
-		    if game.thawed and not idebug:
-			prout(_("You cannot get a citation, so..."))
-		    else:
-			proutn(_("Do you want your Commodore Emeritus Citation printed? "))
-			chew()
-			if ja() == True:
-			    igotit = True
-	    # Only grant long life if alive (original didn't!)
-	    skip(1)
-	    prout(_("LIVE LONG AND PROSPER."))
-	score()
-	if igotit:
-	    plaque()	    
-	return
-    elif ifin == FDEPLETE: # Federation Resources Depleted
-	prout(_("Your time has run out and the Federation has been"))
-	prout(_("conquered.  Your starship is now Klingon property,"))
-	prout(_("and you are put on trial as a war criminal.  On the"))
-	proutn(_("basis of your record, you are "))
-	if (game.state.remkl + game.state.remcom + game.state.nscrem)*3.0 > (game.inkling + game.incom + game.inscom):
-	    prout(_("acquitted."))
-	    skip(1)
-	    prout(_("LIVE LONG AND PROSPER."))
-	else:
-	    prout(_("found guilty and"))
-	    prout(_("sentenced to death by slow torture."))
-	    game.alive = False
-	score()
-	return
-    elif ifin == FLIFESUP:
-	prout(_("Your life support reserves have run out, and"))
-	prout(_("you die of thirst, starvation, and asphyxiation."))
-	prout(_("Your starship is a derelict in space."))
-    elif ifin == FNRG:
-	prout(_("Your energy supply is exhausted."))
-	skip(1)
-	prout(_("Your starship is a derelict in space."))
-    elif ifin == FBATTLE:
-	proutn(_("The "))
-	crmshp()
-	prout(_(" has been destroyed in battle."))
-	skip(1)
-	prout(_("Dulce et decorum est pro patria mori."))
-    elif ifin == FNEG3:
-	prout(_("You have made three attempts to cross the negative energy"))
-	prout(_("barrier which surrounds the galaxy."))
-	skip(1)
-	prout(_("Your navigation is abominable."))
-	score()
-    elif ifin == FNOVA:
-	prout(_("Your starship has been destroyed by a nova."))
-	prout(_("That was a great shot."))
-	skip(1)
-    elif ifin == FSNOVAED:
-	proutn(_("The "))
-	crmshp()
-	prout(_(" has been fried by a supernova."))
-	prout(_("...Not even cinders remain..."))
-    elif ifin == FABANDN:
-	prout(_("You have been captured by the Klingons. If you still"))
-	prout(_("had a starbase to be returned to, you would have been"))
-	prout(_("repatriated and given another chance. Since you have"))
-	prout(_("no starbases, you will be mercilessly tortured to death."))
-    elif ifin == FDILITHIUM:
-	prout(_("Your starship is now an expanding cloud of subatomic particles"))
-    elif ifin == FMATERIALIZE:
-	prout(_("Starbase was unable to re-materialize your starship."))
-	prout(_("Sic transit gloria mundi"))
-    elif ifin == FPHASER:
-	proutn(_("The "))
-	crmshp()
-	prout(_(" has been cremated by its own phasers."))
-    elif ifin == FLOST:
-	prout(_("You and your landing party have been"))
-	prout(_("converted to energy, disipating through space."))
-    elif ifin == FMINING:
-	prout(_("You are left with your landing party on"))
-	prout(_("a wild jungle planet inhabited by primitive cannibals."))
-	skip(1)
-	prout(_("They are very fond of \"Captain Kirk\" soup."))
-	skip(1)
-	proutn(_("Without your leadership, the "))
-	crmshp()
-	prout(_(" is destroyed."))
-    elif ifin == FDPLANET:
-	prout(_("You and your mining party perish."))
-	skip(1)
-	prout(_("That was a great shot."))
-	skip(1)
-    elif ifin == FSSC:
-	prout(_("The Galileo is instantly annihilated by the supernova."))
-	prout(_("You and your mining party are atomized."))
-	skip(1)
-	proutn(_("Mr. Spock takes command of the "))
-	crmshp()
-	prout(_(" and"))
-	prout(_("joins the Romulans, reigning terror on the Federation."))
-    elif ifin == FPNOVA:
-	prout(_("You and your mining party are atomized."))
-	skip(1)
-	proutn(_("Mr. Spock takes command of the "))
-	crmshp()
-	prout(_(" and"))
-	prout(_("joins the Romulans, reigning terror on the Federation."))
-    elif ifin == FSTRACTOR:
-	prout(_("The shuttle craft Galileo is also caught,"))
-	prout(_("and breaks up under the strain."))
-	skip(1)
-	prout(_("Your debris is scattered for millions of miles."))
-	proutn(_("Without your leadership, the "))
-	crmshp()
-	prout(_(" is destroyed."))
-    elif ifin == FDRAY:
-	prout(_("The mutants attack and kill Spock."))
-	prout(_("Your ship is captured by Klingons, and"))
-	prout(_("your crew is put on display in a Klingon zoo."))
-    elif ifin == FTRIBBLE:
-	prout(_("Tribbles consume all remaining water,"))
-	prout(_("food, and oxygen on your ship."))
-	skip(1)
-	prout(_("You die of thirst, starvation, and asphyxiation."))
-	prout(_("Your starship is a derelict in space."))
-    elif ifin == FHOLE:
-	prout(_("Your ship is drawn to the center of the black hole."))
-	prout(_("You are crushed into extremely dense matter."))
-    elif ifin == FCREW:
-	prout(_("Your last crew member has died."))
-    if game.ship == IHF:
-	game.ship = None
-    elif game.ship == IHE:
-	game.ship = IHF
-    game.alive = False
-    if (game.state.remkl + game.state.remcom + game.state.nscrem) != 0:
-	goodies = game.state.remres/game.inresor
-	baddies = (game.state.remkl + 2.0*game.state.remcom)/(game.inkling+2.0*game.incom)
-	if goodies/baddies >= randreal(1.0, 1.5):
-	    prout(_("As a result of your actions, a treaty with the Klingon"))
-	    prout(_("Empire has been signed. The terms of the treaty are"))
-	    if goodies/baddies >= randreal(3.0):
-		prout(_("favorable to the Federation."))
-		skip(1)
-		prout(_("Congratulations!"))
-	    else:
-		prout(_("highly unfavorable to the Federation."))
-	else:
-	    prout(_("The Federation will be destroyed."))
-    else:
-	prout(_("Since you took the last Klingon with you, you are a"))
-	prout(_("martyr and a hero. Someday maybe they'll erect a"))
-	prout(_("statue in your memory. Rest in peace, and try not"))
-	prout(_("to think about pigeons."))
-	game.gamewon = True
-    score()
-
-def score():
-    # compute player's score 
-    timused = game.state.date - game.indate
-    iskill = game.skill
-    if (timused == 0 or (game.state.remkl + game.state.remcom + game.state.nscrem) != 0) and timused < 5.0:
-	timused = 5.0
-    perdate = killrate()
-    ithperd = 500*perdate + 0.5
-    iwon = 0
-    if game.gamewon:
-	iwon = 100*game.skill
-    if game.ship == IHE: 
-	klship = 0
-    elif game.ship == IHF: 
-	klship = 1
-    else:
-	klship = 2
-    if not game.gamewon:
-	game.state.nromrem = 0 # None captured if no win
-    iscore = 10*(game.inkling - game.state.remkl) \
-             + 50*(game.incom - game.state.remcom) \
-             + ithperd + iwon \
-             + 20*(game.inrom - game.state.nromrem) \
-             + 200*(game.inscom - game.state.nscrem) \
-    	     - game.state.nromrem \
-             - badpoints()
-    if not game.alive:
-	iscore -= 200
-    skip(2)
-    prout(_("Your score --"))
-    if game.inrom - game.state.nromrem:
-	prout(_("%6d Romulans destroyed                 %5d") %
-	      (game.inrom - game.state.nromrem, 20*(game.inrom - game.state.nromrem)))
-    if game.state.nromrem:
-	prout(_("%6d Romulans captured                  %5d") %
-	      (game.state.nromrem, game.state.nromrem))
-    if game.inkling - game.state.remkl:
-	prout(_("%6d ordinary Klingons destroyed        %5d") %
-	      (game.inkling - game.state.remkl, 10*(game.inkling - game.state.remkl)))
-    if game.incom - game.state.remcom:
-	prout(_("%6d Klingon commanders destroyed       %5d") %
-	      (game.incom - game.state.remcom, 50*(game.incom - game.state.remcom)))
-    if game.inscom - game.state.nscrem:
-	prout(_("%6d Super-Commander destroyed          %5d") %
-	      (game.inscom - game.state.nscrem, 200*(game.inscom - game.state.nscrem)))
-    if ithperd:
-	prout(_("%6.2f Klingons per stardate              %5d") %
-	      (perdate, ithperd))
-    if game.state.starkl:
-	prout(_("%6d stars destroyed by your action     %5d") %
-	      (game.state.starkl, -5*game.state.starkl))
-    if game.state.nplankl:
-	prout(_("%6d planets destroyed by your action   %5d") %
-	      (game.state.nplankl, -10*game.state.nplankl))
-    if (game.options & OPTION_WORLDS) and game.state.nworldkl:
-	prout(_("%6d inhabited planets destroyed by your action   %5d") %
-	      (game.state.nplankl, -300*game.state.nworldkl))
-    if game.state.basekl:
-	prout(_("%6d bases destroyed by your action     %5d") %
-	      (game.state.basekl, -100*game.state.basekl))
-    if game.nhelp:
-	prout(_("%6d calls for help from starbase       %5d") %
-	      (game.nhelp, -45*game.nhelp))
-    if game.casual:
-	prout(_("%6d casualties incurred                %5d") %
-	      (game.casual, -game.casual))
-    if game.abandoned:
-	prout(_("%6d crew abandoned in space            %5d") %
-	      (game.abandoned, -3*game.abandoned))
-    if klship:
-	prout(_("%6d ship(s) lost or destroyed          %5d") %
-	      (klship, -100*klship))
-    if not game.alive:
-	prout(_("Penalty for getting yourself killed        -200"))
-    if game.gamewon:
-	proutn(_("Bonus for winning "))
-	if game.skill   == SKILL_NOVICE:	proutn(_("Novice game  "))
-	elif game.skill == SKILL_FAIR:  	proutn(_("Fair game    "))
-	elif game.skill ==  SKILL_GOOD: 	proutn(_("Good game    "))
-	elif game.skill ==  SKILL_EXPERT:	proutn(_("Expert game  "))
-	elif game.skill ==  SKILL_EMERITUS:	proutn(_("Emeritus game"))
-	prout("           %5d" % iwon)
-    skip(1)
-    prout(_("TOTAL SCORE                               %5d") % iscore)
-
-def plaque():
-    # emit winner's commemmorative plaque 
-    skip(2)
-    while True:
-        proutn(_("File or device name for your plaque: "))
-        winner = cgetline()
-        try:
-            fp = open(winner, "w")
-            break
-        except IOError:
-            prout(_("Invalid name."))
-
-    proutn(_("Enter name to go on plaque (up to 30 characters): "))
-    winner = cgetline()
-    # The 38 below must be 64 for 132-column paper 
-    nskip = 38 - len(winner)/2
-    fp.write("\n\n\n\n")
-    # --------DRAW ENTERPRISE PICTURE. 
-    fp.write("                                       EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\n" )
-    fp.write("                                      EEE                      E  : :                                         :  E\n" )
-    fp.write("                                    EE   EEE                   E  : :                   NCC-1701              :  E\n")
-    fp.write("EEEEEEEEEEEEEEEE        EEEEEEEEEEEEEEE  : :                              : E\n")
-    fp.write(" E                                     EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\n")
-    fp.write("                      EEEEEEEEE               EEEEEEEEEEEEE                 E  E\n")
-    fp.write("                               EEEEEEE   EEEEE    E          E              E  E\n")
-    fp.write("                                      EEE           E          E            E  E\n")
-    fp.write("                                                       E         E          E  E\n")
-    fp.write("                                                         EEEEEEEEEEEEE      E  E\n")
-    fp.write("                                                      EEE :           EEEEEEE  EEEEEEEE\n")
-    fp.write("                                                    :E    :                 EEEE       E\n")
-    fp.write("                                                   .-E   -:-----                       E\n")
-    fp.write("                                                    :E    :                            E\n")
-    fp.write("                                                      EE  :                    EEEEEEEE\n")
-    fp.write("                                                       EEEEEEEEEEEEEEEEEEEEEEE\n")
-    fp.write("\n\n\n")
-    fp.write(_("                                                       U. S. S. ENTERPRISE\n"))
-    fp.write("\n\n\n\n")
-    fp.write(_("                                  For demonstrating outstanding ability as a starship captain\n"))
-    fp.write("\n")
-    fp.write(_("                                                Starfleet Command bestows to you\n"))
-    fp.write("\n")
-    fp.write("%*s%s\n\n" % (nskip, "", winner))
-    fp.write(_("                                                           the rank of\n\n"))
-    fp.write(_("                                                       \"Commodore Emeritus\"\n\n"))
-    fp.write("                                                          ")
-    if game.skill ==  SKILL_EXPERT:
-        fp.write(_(" Expert level\n\n"))
-    elif game.skill == SKILL_EMERITUS:
-        fp.write(_("Emeritus level\n\n"))
-    else:
-        fp.write(_(" Cheat level\n\n"))
-    timestring = ctime()
-    fp.write(_("                                                 This day of %.6s %.4s, %.8s\n\n") %
-                    (timestring+4, timestring+20, timestring+11))
-    fp.write(_("                                                        Your score:  %d\n\n") % iscore)
-    fp.write(_("                                                    Klingons per stardate:  %.2f\n") % perdate)
-    fp.close()
-
-# Code from io.c begins here
-
-rows = linecount = 0	# for paging 
-stdscr = None
-replayfp = None
-fullscreen_window = None
-srscan_window     = None
-report_window     = None
-status_window     = None
-lrscan_window     = None
-message_window    = None
-prompt_window     = None
-curwnd = None
-
-def outro():
-    "wrap up, either normally or due to signal"
-    if game.options & OPTION_CURSES:
-	#clear()
-	#curs_set(1)
-	#refresh()
-	#resetterm()
-	#echo()
-	curses.endwin()
-	sys.stdout.write('\n')
-    if logfp:
-	logfp.close()
-
-def iostart():
-    global stdscr, rows
-    #setlocale(LC_ALL, "")
-    #bindtextdomain(PACKAGE, LOCALEDIR)
-    #textdomain(PACKAGE)
-    if atexit.register(outro):
-	sys.stderr.write("Unable to register outro(), exiting...\n")
-	raise SysExit,1
-    if not (game.options & OPTION_CURSES):
-	ln_env = os.getenv("LINES")
-        if ln_env:
-            rows = ln_env
-        else:
-            rows = 25
-    else:
-	stdscr = curses.initscr()
-	stdscr.keypad(True)
-	#saveterm()
-	curses.nonl()
-	curses.cbreak()
-        curses.start_color()
-        curses.init_pair(curses.COLOR_BLACK, curses.COLOR_BLACK, curses.COLOR_BLACK)
-        curses.init_pair(curses.COLOR_GREEN, curses.COLOR_GREEN, curses.COLOR_BLACK)
-        curses.init_pair(curses.COLOR_RED, curses.COLOR_RED, curses.COLOR_BLACK)
-        curses.init_pair(curses.COLOR_CYAN, curses.COLOR_CYAN, curses.COLOR_BLACK)
-        curses.init_pair(curses.COLOR_WHITE, curses.COLOR_WHITE, curses.COLOR_BLACK)
-        curses.init_pair(curses.COLOR_MAGENTA, curses.COLOR_MAGENTA, curses.COLOR_BLACK)
-        curses.init_pair(curses.COLOR_BLUE, curses.COLOR_BLUE, curses.COLOR_BLACK)
-        curses.init_pair(curses.COLOR_YELLOW, curses.COLOR_YELLOW, curses.COLOR_BLACK)
-	#noecho()
-        global fullscreen_window, srscan_window, report_window, status_window
-        global lrscan_window, message_window, prompt_window
-        (rows, columns)   = stdscr.getmaxyx()
-	fullscreen_window = stdscr
-	srscan_window     = curses.newwin(12, 25, 0,       0)
-	report_window     = curses.newwin(11, 0,  1,       25)
-	status_window     = curses.newwin(10, 0,  1,       39)
-	lrscan_window     = curses.newwin(5,  0,  0,       64) 
-	message_window    = curses.newwin(0,  0,  12,      0)
-	prompt_window     = curses.newwin(1,  0,  rows-2,  0) 
-	message_window.scrollok(True)
-	setwnd(fullscreen_window)
-	textcolor(DEFAULT)
-
-def textcolor(color):
-    "Set text foreground color.  Presently a stub."
-    pass	# FIXME
-
-def ioend():
-    "Wrap up I/O.  Presently a stub."
-    pass
-
-def waitfor():
-    "Wait for user action -- OK to do nothing if on a TTY"
-    if game.options & OPTION_CURSES:
-	stsdcr.getch()
-
-def announce():
-    skip(1)
-    if game.skill > SKILL_FAIR:
-	prouts(_("[ANOUNCEMENT ARRIVING...]"))
-    else:
-	prouts(_("[IMPORTANT ANNOUNCEMENT ARRIVING -- PRESS ENTER TO CONTINUE]"))
-    skip(1)
-
-def pause_game():
-    if game.skill > SKILL_FAIR:
-        prompt = _("[CONTINUE?]")
-    else:
-        prompt = _("[PRESS ENTER TO CONTINUE]")
-
-    if game.options & OPTION_CURSES:
-        drawmaps(0)
-        setwnd(prompt_window)
-        prompt_window.wclear()
-        prompt_window.addstr(prompt)
-        prompt_window.getstr()
-        prompt_window.clear()
-        prompt_window.refresh()
-        setwnd(message_window)
-    else:
-        global linecount
-        sys.stdout.write('\n')
-        proutn(prompt)
-        raw_input()
-        for j in range(rows):
-            sys.stdout.write('\n')
-        linecount = 0
-
-def skip(i):
-    "Skip i lines.  Pause game if this would cause a scrolling event."
-    for dummy in range(i):
-	if game.options & OPTION_CURSES:
-            (y, x) = curwnd.getyx()
-            (my, mx) = curwnd.getmaxyx()
-	    if curwnd == message_window and y >= my - 3:
-		pause_game()
-		clrscr()
-	    else:
-		proutn("\n")
-	else:
-            global linecount
-	    linecount += 1
-	    if rows and linecount >= rows:
-		pause_game()
-	    else:
-		sys.stdout.write('\n')
-
-def proutn(line):
-    "Utter a line with no following line feed."
-    if game.options & OPTION_CURSES:
-	curwnd.addstr(line)
-	curwnd.refresh()
-    else:
-	sys.stdout.write(line)
-        sys.stdout.flush()
-
-def prout(line):
-    proutn(line)
-    skip(1)
-
-def prouts(line):
-    "print slowly!" 
-    for c in line:
-        if not replayfp or replayfp.closed:	# Don't slow down replays
-            time.sleep(0.03)
-	proutn(c)
-	if game.options & OPTION_CURSES:
-	    wrefresh(curwnd)
-	else:
-	    sys.stdout.flush()
-    if not replayfp or replayfp.closed:
-        time.sleep(0.03)
-
-def cgetline():
-    "Get a line of input."
-    if game.options & OPTION_CURSES:
-	line = curwnd.getstr() + "\n"
-	curwnd.refresh()
-    else:
-	if replayfp and not replayfp.closed:
-            while True:
-                line = replayfp.readline()
-                proutn(line)
-                if line == '':
-                    prout("*** Replay finished")
-                    replayfp.close()
-                    break
-                elif line[0] != "#":
-                    break
-	else:
-	    line = raw_input() + "\n"
-    if logfp:
-	logfp.write(line)
-    return line
-
-def setwnd(wnd):
-    "Change windows -- OK for this to be a no-op in tty mode."
-    global curwnd
-    if game.options & OPTION_CURSES:
-        curwnd = wnd
-        curses.curs_set(wnd == fullscreen_window or wnd == message_window or wnd == prompt_window)
-
-def clreol():
-    "Clear to end of line -- can be a no-op in tty mode" 
-    if game.options & OPTION_CURSES:
-        wclrtoeol(curwnd)
-        wrefresh(curwnd)
-
-def clrscr():
-    "Clear screen -- can be a no-op in tty mode."
-    global linecount
-    if game.options & OPTION_CURSES:
-       curwnd.clear()
-       curwnd.move(0, 0)
-       curwnd.refresh()
-    linecount = 0
-    
-def highvideo():
-    "Set highlight video, if this is reasonable."
-    if game.options & OPTION_CURSES:
-	curwnd.attron(curses.A_REVERSE)
- 
-#
-# Things past this point have policy implications.
-# 
-
-def drawmaps(mode):
-    "Hook to be called after moving to redraw maps."
-    if game.options & OPTION_CURSES:
-	if mode == 1:
-	    sensor()
-        setwnd(srscan_window)
-        curwnd.move(0, 0)
-        srscan()
-	if mode != 2:
-	    setwnd(status_window)
-	    status_window.clear()
-	    status_window.move(0, 0)
-	    setwnd(report_window)
-	    report_window.clear()
-	    report_window.move(0, 0)
-	    status()
-	    setwnd(lrscan_window)
-	    lrscan_window.clear()
-	    lrscan_window.move(0, 0)
-	    lrscan(silent=False)
-
-def put_srscan_sym(w, sym):
-    "Emit symbol for short-range scan."
-    srscan_window.move(w.x+1, w.y*2+2)
-    srscan_window.addch(sym)
-    srscan_window.refresh()
-
-def boom(w):
-    "Enemy fall down, go boom."  
-    if game.options & OPTION_CURSES:
-	drawmaps(2)
-	setwnd(srscan_window)
-	srscan_window.attron(curses.A_REVERSE)
-	put_srscan_sym(w, game.quad[w.x][w.y])
-	#sound(500)
-	#time.sleep(1.0)
-	#nosound()
-	srscan_window.attroff(curses.A_REVERSE)
-	put_srscan_sym(w, game.quad[w.x][w.y])
-	curses.delay_output(500)
-	setwnd(message_window) 
-
-def warble():
-    "Sound and visual effects for teleportation."
-    if game.options & OPTION_CURSES:
-	drawmaps(2)
-	setwnd(message_window)
-	#sound(50)
-    prouts("     . . . . .     ")
-    if game.options & OPTION_CURSES:
-	#curses.delay_output(1000)
-	#nosound()
-        pass
-
-def tracktorpedo(w, step, i, n, iquad):
-    "Torpedo-track animation." 
-    if not game.options & OPTION_CURSES:
-	if step == 1:
-	    if n != 1:
-		skip(1)
-		proutn(_("Track for torpedo number %d-  ") % i)
-	    else:
-		skip(1)
-		proutn(_("Torpedo track- "))
-	elif step==4 or step==9: 
-	    skip(1)
-	proutn("%s   " % w)
-    else:
-	if not damaged(DSRSENS) or game.condition=="docked":
-	    if i != 0 and step == 1:
-		drawmaps(2)
-		time.sleep(0.4)
-	    if (iquad==IHDOT) or (iquad==IHBLANK):
-		put_srscan_sym(w, '+')
-		#sound(step*10)
-		#time.sleep(0.1)
-		#nosound()
-		put_srscan_sym(w, iquad)
-	    else:
-		curwnd.attron(curses.A_REVERSE)
-		put_srscan_sym(w, iquad)
-		#sound(500)
-		#time.sleep(1.0)
-		#nosound()
-		curwnd.attroff(curses.A_REVERSE)
-		put_srscan_sym(w, iquad)
-	else:
-	    proutn("%s   " % w)
-
-def makechart():
-    "Display the current galaxy chart."
-    if game.options & OPTION_CURSES:
-	setwnd(message_window)
-	message_window.clear()
-    chart()
-    if game.options & OPTION_TTY:
-	skip(1)
-
-NSYM	= 14
-
-def prstat(txt, data):
-    proutn(txt)
-    if game.options & OPTION_CURSES:
-	skip(1)
-	setwnd(status_window)
-    else:
-        proutn(" " * (NSYM - len(txt)))
-    proutn(data)
-    skip(1)
-    if game.options & OPTION_CURSES:
-	setwnd(report_window)
-
-# Code from moving.c begins here
-
-def imove(novapush):
-    # movement execution for warp, impulse, supernova, and tractor-beam events 
-    w = coord(); final = coord()
-    trbeam = False
-
-    def no_quad_change():
-        # No quadrant change -- compute new average enemy distances 
-        game.quad[game.sector.x][game.sector.y] = game.ship
-        if len(game.enemies):
-            for m in range(len(game.enemies)):
-                finald = distance(w, game.enemies[m].kloc)
-                game.enemies[m].kavgd = 0.5 * (finald+game.enemies[m].kdist)
-                game.enemies[m].kdist = finald
-            game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
-            if not game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
-                attack(torps_ok=False)
-            for m in range(len(game.enemies)):
-                game.enemies[m].kavgd = game.enemies[m].kdist
-        newcnd()
-        drawmaps(0)
-        setwnd(message_window)
-    w.x = w.y = 0
-    if game.inorbit:
-	prout(_("Helmsman Sulu- \"Leaving standard orbit.\""))
-	game.inorbit = False
-    angle = ((15.0 - game.direc) * 0.5235988)
-    deltax = -math.sin(angle)
-    deltay = math.cos(angle)
-    if math.fabs(deltax) > math.fabs(deltay):
-	bigger = math.fabs(deltax)
-    else:
-	bigger = math.fabs(deltay)
-    deltay /= bigger
-    deltax /= bigger
-    # If tractor beam is to occur, don't move full distance 
-    if game.state.date+game.optime >= scheduled(FTBEAM):
-	trbeam = True
-	game.condition = "red"
-	game.dist = game.dist*(scheduled(FTBEAM)-game.state.date)/game.optime + 0.1
-	game.optime = scheduled(FTBEAM) - game.state.date + 1e-5
-    # Move within the quadrant 
-    game.quad[game.sector.x][game.sector.y] = IHDOT
-    x = game.sector.x
-    y = game.sector.y
-    n = int(10.0*game.dist*bigger+0.5)
-    if n > 0:
-	for m in range(1, n+1):
-            x += deltax
-            y += deltay
-	    w.x = int(round(x))
-	    w.y = int(round(y))
-	    if not VALID_SECTOR(w.x, w.y):
-		# Leaving quadrant -- allow final enemy attack 
-		# Don't do it if being pushed by Nova 
-		if len(game.enemies) != 0 and not novapush:
-		    newcnd()
-		    for m in range(len(game.enemies)):
-			finald = distance(w, game.enemies[m].kloc)
-			game.enemies[m].kavgd = 0.5 * (finald + game.enemies[m].kdist)
-		    #
-		    # Stas Sergeev added the condition
-		    # that attacks only happen if Klingons
-		    # are present and your skill is good.
-		    # 
-		    if game.skill > SKILL_GOOD and game.klhere > 0 and not game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
-			attack(torps_ok=False)
-		    if game.alldone:
-			return
-		# compute final position -- new quadrant and sector 
-		x = (QUADSIZE*game.quadrant.x)+game.sector.x
-		y = (QUADSIZE*game.quadrant.y)+game.sector.y
-		w.x = int(round(x+10.0*game.dist*bigger*deltax))
-		w.y = int(round(y+10.0*game.dist*bigger*deltay))
-		# check for edge of galaxy 
-		kinks = 0
-                while True:
-		    kink = False
-		    if w.x < 0:
-			w.x = -w.x
-			kink = True
-		    if w.y < 0:
-			w.y = -w.y
-			kink = True
-		    if w.x >= GALSIZE*QUADSIZE:
-			w.x = (GALSIZE*QUADSIZE*2) - w.x
-			kink = True
-		    if w.y >= GALSIZE*QUADSIZE:
-			w.y = (GALSIZE*QUADSIZE*2) - w.y
-			kink = True
-		    if kink:
-			kinks += 1
-                    else:
-                        break
-		if kinks:
-		    game.nkinks += 1
-		    if game.nkinks == 3:
-			# Three strikes -- you're out! 
-			finish(FNEG3)
-			return
-		    skip(1)
-		    prout(_("YOU HAVE ATTEMPTED TO CROSS THE NEGATIVE ENERGY BARRIER"))
-		    prout(_("AT THE EDGE OF THE GALAXY.  THE THIRD TIME YOU TRY THIS,"))
-		    prout(_("YOU WILL BE DESTROYED."))
-		# Compute final position in new quadrant 
-		if trbeam: # Don't bother if we are to be beamed 
-		    return
-		game.quadrant.x = w.x/QUADSIZE
-		game.quadrant.y = w.y/QUADSIZE
-		game.sector.x = w.x - (QUADSIZE*game.quadrant.x)
-		game.sector.y = w.y - (QUADSIZE*game.quadrant.y)
-		skip(1)
-		prout(_("Entering Quadrant %s.") % game.quadrant)
-		game.quad[game.sector.x][game.sector.y] = game.ship
-		newqad(False)
-		if game.skill>SKILL_NOVICE:
-		    attack(torps_ok=False)  
-		return
-	    iquad = game.quad[w.x][w.y]
-	    if iquad != IHDOT:
-		# object encountered in flight path 
-		stopegy = 50.0*game.dist/game.optime
-		game.dist = distance(game.sector, w) / (QUADSIZE * 1.0)
-                if iquad in (IHT, IHK, IHC, IHS, IHR, IHQUEST):
-		    game.sector = w
-                    for enemy in game.enemies:
-                        if enemy.kloc == game.sector:
-                            break
-		    collision(rammed=False, enemy=enemy)
-		    final = game.sector
-		elif iquad == IHBLANK:
-		    skip(1)
-		    prouts(_("***RED ALERT!  RED ALERT!"))
-		    skip(1)
-		    proutn("***")
-		    crmshp()
-		    proutn(_(" pulled into black hole at Sector %s") % w)
-		    #
-		    # Getting pulled into a black hole was certain
-		    # death in Almy's original.  Stas Sergeev added a
-		    # possibility that you'll get timewarped instead.
-		    # 
-		    n=0
-		    for m in range(NDEVICES):
-			if game.damage[m]>0: 
-			    n += 1
-		    probf=math.pow(1.4,(game.energy+game.shield)/5000.0-1.0)*math.pow(1.3,1.0/(n+1)-1.0)
-		    if (game.options & OPTION_BLKHOLE) and withprob(1-probf): 
-			timwrp()
-		    else: 
-			finish(FHOLE)
-		    return
-		else:
-		    # something else 
-		    skip(1)
-		    crmshp()
-		    if iquad == IHWEB:
-			proutn(_(" encounters Tholian web at %s;") % w)
-		    else:
-			proutn(_(" blocked by object at %s;") % w)
-		    proutn(_("Emergency stop required "))
-		    prout(_("%2d units of energy.") % int(stopegy))
-		    game.energy -= stopegy
-		    final.x = x-deltax+0.5
-		    final.y = y-deltay+0.5
-		    game.sector = final
-		    if game.energy <= 0:
-			finish(FNRG)
-			return
-                # We're here!
-		no_quad_change()
-                return
-	game.dist = distance(game.sector, w) / (QUADSIZE * 1.0)
-	game.sector = w
-    final = game.sector
-    no_quad_change()
-    return
-
-def dock(verbose):
-    # dock our ship at a starbase 
-    chew()
-    if game.condition == "docked" and verbose:
-	prout(_("Already docked."))
-	return
-    if game.inorbit:
-	prout(_("You must first leave standard orbit."))
-	return
-    if not is_valid(game.base) or abs(game.sector.x-game.base.x) > 1 or abs(game.sector.y-game.base.y) > 1:
-	crmshp()
-	prout(_(" not adjacent to base."))
-	return
-    game.condition = "docked"
-    if "verbose":
-	prout(_("Docked."))
-    game.ididit = True
-    if game.energy < game.inenrg:
-	game.energy = game.inenrg
-    game.shield = game.inshld
-    game.torps = game.intorps
-    game.lsupres = game.inlsr
-    game.state.crew = FULLCREW
-    if not damaged(DRADIO) and \
-	((is_scheduled(FCDBAS) or game.isatb == 1) and not game.iseenit):
-	# get attack report from base 
-	prout(_("Lt. Uhura- \"Captain, an important message from the starbase:\""))
-	attackreport(False)
-	game.iseenit = True
- 
-# This program originally required input in terms of a (clock)
-# direction and distance. Somewhere in history, it was changed to
-# cartesian coordinates. So we need to convert.  Probably
-# "manual" input should still be done this way -- it's a real
-# pain if the computer isn't working! Manual mode is still confusing
-# because it involves giving x and y motions, yet the coordinates
-# are always displayed y - x, where +y is downward!
-
-def getcourse(isprobe, akey):
-    # get course and distance
-    key = 0
-    dquad = copy.copy(game.quadrant)
-    navmode = "unspecified"
-    itemp = "curt"
-    dsect = coord()
-    iprompt = False
-    if game.landed and not isprobe:
-	prout(_("Dummy! You can't leave standard orbit until you"))
-	proutn(_("are back aboard the ship."))
-	chew()
-	return False
-    while navmode == "unspecified":
-	if damaged(DNAVSYS):
-	    if isprobe:
-		prout(_("Computer damaged; manual navigation only"))
-	    else:
-		prout(_("Computer damaged; manual movement only"))
-	    chew()
-	    navmode = "manual"
-	    key = IHEOL
-	    break
-	if isprobe and akey != -1:
-	    # For probe launch, use pre-scanned value first time 
-	    key = akey
-	    akey = -1
-	else: 
-	    key = scan()
-	if key == IHEOL:
-	    proutn(_("Manual or automatic- "))
-	    iprompt = True
-	    chew()
-	elif key == IHALPHA:
-            if isit("manual"):
-		navmode = "manual"
-		key = scan()
-		break
-            elif isit("automatic"):
-		navmode = "automatic"
-		key = scan()
-		break
-	    else:
-		huh()
-		chew()
-		return False
-	else: # numeric 
-	    if isprobe:
-		prout(_("(Manual navigation assumed.)"))
-	    else:
-		prout(_("(Manual movement assumed.)"))
-	    navmode = "manual"
-	    break
-    if navmode == "automatic":
-	while key == IHEOL:
-	    if isprobe:
-		proutn(_("Target quadrant or quadrant&sector- "))
-	    else:
-		proutn(_("Destination sector or quadrant&sector- "))
-	    chew()
-	    iprompt = True
-	    key = scan()
-	if key != IHREAL:
-	    huh()
-	    return False
-	xi = int(round(aaitem))-1
-	key = scan()
-	if key != IHREAL:
-	    huh()
-	    return False
-	xj = int(round(aaitem))-1
-	key = scan()
-	if key == IHREAL:
-	    # both quadrant and sector specified 
-	    xk = int(round(aaitem))-1
-	    key = scan()
-	    if key != IHREAL:
-		huh()
-		return False
-	    xl = int(round(aaitem))-1
-	    dquad.x = xi
-	    dquad.y = xj
-	    dsect.y = xk
-	    dsect.x = xl
-	else:
-            # only one pair of numbers was specified
-	    if isprobe:
-		# only quadrant specified -- go to center of dest quad 
-		dquad.x = xi
-		dquad.y = xj
-		dsect.y = dsect.x = 4	# preserves 1-origin behavior
-	    else:
-                # only sector specified
-		dsect.y = xi
-		dsect.x = xj
-	    itemp = "normal"
-	if not VALID_QUADRANT(dquad.y,dquad.x) or not VALID_SECTOR(dsect.x,dsect.y):
-	    huh()
-	    return False
-	skip(1)
-	if not isprobe:
-	    if itemp > "curt":
-		if iprompt:
-		    prout(_("Helmsman Sulu- \"Course locked in for Sector %s.\"") % dsect)
-	    else:
-		prout(_("Ensign Chekov- \"Course laid in, Captain.\""))
-        # the actual deltas get computed here
-	deltax = dquad.y-game.quadrant.y + 0.1*(dsect.x-game.sector.y)
-	deltay = game.quadrant.x-dquad.x + 0.1*(game.sector.x-dsect.y)
-    else: # manual 
-	while key == IHEOL:
-	    proutn(_("X and Y displacements- "))
-	    chew()
-	    iprompt = True
-	    key = scan()
-	itemp = "verbose"
-	if key != IHREAL:
-	    huh()
-	    return False
-	deltax = aaitem
-	key = scan()
-	if key != IHREAL:
-	    huh()
-	    return False
-	deltay = aaitem
-    # Check for zero movement 
-    if deltax == 0 and deltay == 0:
-	chew()
-	return False
-    if itemp == "verbose" and not isprobe:
-	skip(1)
-	prout(_("Helmsman Sulu- \"Aye, Sir.\""))
-    # Course actually laid in.
-    game.dist = math.sqrt(deltax*deltax + deltay*deltay)
-    game.direc = math.atan2(deltax, deltay)*1.90985932
-    if game.direc < 0.0:
-	game.direc += 12.0
-    chew()
-    return True
-
-def impulse():
-    # move under impulse power 
-    game.ididit = False
-    if damaged(DIMPULS):
-	chew()
-	skip(1)
-	prout(_("Engineer Scott- \"The impulse engines are damaged, Sir.\""))
-	return
-    if game.energy > 30.0:
-        if not getcourse(isprobe=False, akey=0):
-	    return
-	power = 20.0 + 100.0*game.dist
-    else:
-	power = 30.0
-    if power >= game.energy:
-	# Insufficient power for trip 
-	skip(1)
-	prout(_("First Officer Spock- \"Captain, the impulse engines"))
-	prout(_("require 20.0 units to engage, plus 100.0 units per"))
-	if game.energy > 30:
-	    proutn(_("quadrant.  We can go, therefore, a maximum of %d") %
-                     int(0.01 * (game.energy-20.0)-0.05))
-	    prout(_(" quadrants.\""))
-	else:
-	    prout(_("quadrant.  They are, therefore, useless.\""))
-	chew()
-	return
-    # Make sure enough time is left for the trip 
-    game.optime = game.dist/0.095
-    if game.optime >= game.state.remtime:
-	prout(_("First Officer Spock- \"Captain, our speed under impulse"))
-	prout(_("power is only 0.95 sectors per stardate. Are you sure"))
-	proutn(_("we dare spend the time?\" "))
-	if ja() == False:
-	    return
-    # Activate impulse engines and pay the cost 
-    imove(novapush=False)
-    game.ididit = True
-    if game.alldone:
-	return
-    power = 20.0 + 100.0*game.dist
-    game.energy -= power
-    game.optime = game.dist/0.095
-    if game.energy <= 0:
-	finish(FNRG)
-    return
-
-def warp(timewarp):
-    # move under warp drive 
-    blooey = False; twarp = False
-    if not timewarp: # Not WARPX entry 
-	game.ididit = False
-	if game.damage[DWARPEN] > 10.0:
-	    chew()
-	    skip(1)
-	    prout(_("Engineer Scott- \"The impulse engines are damaged, Sir.\""))
-	    return
-	if damaged(DWARPEN) and game.warpfac > 4.0:
-	    chew()
-	    skip(1)
-	    prout(_("Engineer Scott- \"Sorry, Captain. Until this damage"))
-	    prout(_("  is repaired, I can only give you warp 4.\""))
-	    return
-       	# Read in course and distance 
-        if not getcourse(isprobe=False, akey=0):
-	    return
-	# Make sure starship has enough energy for the trip 
-	power = (game.dist+0.05)*game.warpfac*game.warpfac*game.warpfac*(game.shldup+1)
-	if power >= game.energy:
-	    # Insufficient power for trip 
-	    game.ididit = False
-	    skip(1)
-	    prout(_("Engineering to bridge--"))
-	    if not game.shldup or 0.5*power > game.energy:
-		iwarp = math.pow((game.energy/(game.dist+0.05)), 0.333333333)
-		if iwarp <= 0:
-		    prout(_("We can't do it, Captain. We don't have enough energy."))
-		else:
-		    proutn(_("We don't have enough energy, but we could do it at warp %d") % iwarp)
-		    if game.shldup:
-			prout(",")
-			prout(_("if you'll lower the shields."))
-		    else:
-			prout(".")
-	    else:
-		prout(_("We haven't the energy to go that far with the shields up."))
-	    return
-						
-	# Make sure enough time is left for the trip 
-	game.optime = 10.0*game.dist/game.wfacsq
-	if game.optime >= 0.8*game.state.remtime:
-	    skip(1)
-	    prout(_("First Officer Spock- \"Captain, I compute that such"))
-	    proutn(_("  a trip would require approximately %2.0f") %
-		   (100.0*game.optime/game.state.remtime))
-	    prout(_(" percent of our"))
-	    proutn(_("  remaining time.  Are you sure this is wise?\" "))
-	    if ja() == False:
-		game.ididit = False
-		game.optime=0 
-		return
-    # Entry WARPX 
-    if game.warpfac > 6.0:
-	# Decide if engine damage will occur
-        # ESR: Seems wrong. Probability of damage goes *down* with distance? 
-	prob = game.dist*square(6.0-game.warpfac)/66.666666666
-	if prob > randreal():
-	    blooey = True
-	    game.dist = randreal(game.dist)
-	# Decide if time warp will occur 
-	if 0.5*game.dist*math.pow(7.0,game.warpfac-10.0) > randreal():
-	    twarp = True
-	if idebug and game.warpfac==10 and not twarp:
-	    blooey = False
-	    proutn("=== Force time warp? ")
-	    if ja() == True:
-		twarp = True
-	if blooey or twarp:
-	    # If time warp or engine damage, check path 
-	    # If it is obstructed, don't do warp or damage 
-	    angle = ((15.0-game.direc)*0.5235998)
-	    deltax = -math.sin(angle)
-	    deltay = math.cos(angle)
-	    if math.fabs(deltax) > math.fabs(deltay):
-		bigger = math.fabs(deltax)
-	    else:
-		bigger = math.fabs(deltay)
-			
-	    deltax /= bigger
-	    deltay /= bigger
-	    n = 10.0 * game.dist * bigger +0.5
-	    x = game.sector.x
-	    y = game.sector.y
-	    for l in range(1, n+1):
-		x += deltax
-		ix = x + 0.5
-		y += deltay
-		iy = y +0.5
-		if not VALID_SECTOR(ix, iy):
-		    break
-		if game.quad[ix][iy] != IHDOT:
-		    blooey = False
-		    twarp = False
-    # Activate Warp Engines and pay the cost 
-    imove(novapush=False)
-    if game.alldone:
-	return
-    game.energy -= game.dist*game.warpfac*game.warpfac*game.warpfac*(game.shldup+1)
-    if game.energy <= 0:
-	finish(FNRG)
-    game.optime = 10.0*game.dist/game.wfacsq
-    if twarp:
-	timwrp()
-    if blooey:
-	game.damage[DWARPEN] = game.damfac * randreal(1.0, 4.0)
-	skip(1)
-	prout(_("Engineering to bridge--"))
-	prout(_("  Scott here.  The warp engines are damaged."))
-	prout(_("  We'll have to reduce speed to warp 4."))
-    game.ididit = True
-    return
-
-def setwarp():
-    # change the warp factor 	
-    while True:
-        key=scan()
-        if key != IHEOL:
-            break
-	chew()
-	proutn(_("Warp factor- "))
-    chew()
-    if key != IHREAL:
-	huh()
-	return
-    if game.damage[DWARPEN] > 10.0:
-	prout(_("Warp engines inoperative."))
-	return
-    if damaged(DWARPEN) and aaitem > 4.0:
-	prout(_("Engineer Scott- \"I'm doing my best, Captain,"))
-	prout(_("  but right now we can only go warp 4.\""))
-	return
-    if aaitem > 10.0:
-	prout(_("Helmsman Sulu- \"Our top speed is warp 10, Captain.\""))
-	return
-    if aaitem < 1.0:
-	prout(_("Helmsman Sulu- \"We can't go below warp 1, Captain.\""))
-	return
-    oldfac = game.warpfac
-    game.warpfac = aaitem
-    game.wfacsq=game.warpfac*game.warpfac
-    if game.warpfac <= oldfac or game.warpfac <= 6.0:
-	prout(_("Helmsman Sulu- \"Warp factor %d, Captain.\"") %
-	       int(game.warpfac))
-	return
-    if game.warpfac < 8.00:
-	prout(_("Engineer Scott- \"Aye, but our maximum safe speed is warp 6.\""))
-	return
-    if game.warpfac == 10.0:
-	prout(_("Engineer Scott- \"Aye, Captain, we'll try it.\""))
-	return
-    prout(_("Engineer Scott- \"Aye, Captain, but our engines may not take it.\""))
-    return
-
-def atover(igrab):
-    # cope with being tossed out of quadrant by supernova or yanked by beam 
-    chew()
-    # is captain on planet? 
-    if game.landed:
-	if damaged(DTRANSP):
-	    finish(FPNOVA)
-	    return
-	prout(_("Scotty rushes to the transporter controls."))
-	if game.shldup:
-	    prout(_("But with the shields up it's hopeless."))
-	    finish(FPNOVA)
-	prouts(_("His desperate attempt to rescue you . . ."))
-	if withprob(0.5):
-	    prout(_("fails."))
-	    finish(FPNOVA)
-	    return
-	prout(_("SUCCEEDS!"))
-	if game.imine:
-	    game.imine = False
-	    proutn(_("The crystals mined were "))
-	    if withprob(0.25):
-		prout(_("lost."))
-	    else:
-		prout(_("saved."))
-		game.icrystl = True
-    if igrab:
-	return
-    # Check to see if captain in shuttle craft 
-    if game.icraft:
-	finish(FSTRACTOR)
-    if game.alldone:
-	return
-    # Inform captain of attempt to reach safety 
-    skip(1)
-    while True:
-	if game.justin:
-	    prouts(_("***RED ALERT!  RED ALERT!"))
-	    skip(1)
-	    proutn(_("The "))
-	    crmshp()
-	    prout(_(" has stopped in a quadrant containing"))
-	    prouts(_("   a supernova."))
-	    skip(2)
-	proutn(_("***Emergency automatic override attempts to hurl "))
-	crmshp()
-	skip(1)
-	prout(_("safely out of quadrant."))
-	if not damaged(DRADIO):
-	    game.state.galaxy[game.quadrant.x][game.quadrant.y].charted = True
-	# Try to use warp engines 
-	if damaged(DWARPEN):
-	    skip(1)
-	    prout(_("Warp engines damaged."))
-	    finish(FSNOVAED)
-	    return
-	game.warpfac = randreal(6.0, 8.0)
-	game.wfacsq = game.warpfac * game.warpfac
-	prout(_("Warp factor set to %d") % int(game.warpfac))
-	power = 0.75*game.energy
-	game.dist = power/(game.warpfac*game.warpfac*game.warpfac*(game.shldup+1))
-	distreq = randreal(math.sqrt(2))
-	if distreq < game.dist:
-	    game.dist = distreq
-	game.optime = 10.0*game.dist/game.wfacsq
-	game.direc = randreal(12)	# How dumb! 
-	game.justin = False
-	game.inorbit = False
-	warp(True)
-	if not game.justin:
-	    # This is bad news, we didn't leave quadrant. 
-	    if game.alldone:
-		return
-	    skip(1)
-	    prout(_("Insufficient energy to leave quadrant."))
-	    finish(FSNOVAED)
-	    return
-	# Repeat if another snova
-        if not game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
-            break
-    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0: 
-	finish(FWON) # Snova killed remaining enemy. 
-
-def timwrp():
-    # let's do the time warp again 
-    prout(_("***TIME WARP ENTERED."))
-    if game.state.snap and withprob(0.5):
-	# Go back in time 
-	prout(_("You are traveling backwards in time %d stardates.") %
-	      int(game.state.date-game.snapsht.date))
-	game.state = game.snapsht
-	game.state.snap = False
-	if game.state.remcom:
-	    schedule(FTBEAM, expran(game.intime/game.state.remcom))
-	    schedule(FBATTAK, expran(0.3*game.intime))
-	schedule(FSNOVA, expran(0.5*game.intime))
-	# next snapshot will be sooner 
-	schedule(FSNAP, expran(0.25*game.state.remtime))
-				
-	if game.state.nscrem:
-	    schedule(FSCMOVE, 0.2777)	    
-	game.isatb = 0
-	unschedule(FCDBAS)
-	unschedule(FSCDBAS)
-	invalidate(game.battle)
-
-	# Make sure Galileo is consistant -- Snapshot may have been taken
-        # when on planet, which would give us two Galileos! 
-	gotit = False
-	for l in range(game.inplan):
-	    if game.state.planets[l].known == "shuttle_down":
-		gotit = True
-		if game.iscraft == "onship" and game.ship==IHE:
-		    prout(_("Chekov-  \"Security reports the Galileo has disappeared, Sir!"))
-		    game.iscraft = "offship"
-	# Likewise, if in the original time the Galileo was abandoned, but
-	# was on ship earlier, it would have vanished -- let's restore it.
-	if game.iscraft == "offship" and not gotit and game.damage[DSHUTTL] >= 0.0:
-	    prout(_("Checkov-  \"Security reports the Galileo has reappeared in the dock!\""))
-	    game.iscraft = "onship"
-	# 
-#	 * There used to be code to do the actual reconstrction here,
-#	 * but the starchart is now part of the snapshotted galaxy state.
-#	 
-	prout(_("Spock has reconstructed a correct star chart from memory"))
-    else:
-	# Go forward in time 
-	game.optime = -0.5*game.intime*math.log(randreal())
-	prout(_("You are traveling forward in time %d stardates.") % int(game.optime))
-	# cheat to make sure no tractor beams occur during time warp 
-	postpone(FTBEAM, game.optime)
-	game.damage[DRADIO] += game.optime
-    newqad(False)
-    events()	# Stas Sergeev added this -- do pending events 
-
-def probe():
-    # launch deep-space probe 
-    # New code to launch a deep space probe 
-    if game.nprobes == 0:
-	chew()
-	skip(1)
-	if game.ship == IHE: 
-	    prout(_("Engineer Scott- \"We have no more deep space probes, Sir.\""))
-	else:
-	    prout(_("Ye Faerie Queene has no deep space probes."))
-	return
-    if damaged(DDSP):
-	chew()
-	skip(1)
-	prout(_("Engineer Scott- \"The probe launcher is damaged, Sir.\""))
-	return
-    if is_scheduled(FDSPROB):
-	chew()
-	skip(1)
-	if damaged(DRADIO) and game.condition != "docked":
-	    prout(_("Spock-  \"Records show the previous probe has not yet"))
-	    prout(_("   reached its destination.\""))
-	else:
-	    prout(_("Uhura- \"The previous probe is still reporting data, Sir.\""))
-	return
-    key = scan()
-    if key == IHEOL:
-	# slow mode, so let Kirk know how many probes there are left
-        if game.nprobes == 1:
-            prout(_("1 probe left."))
-        else:
-            prout(_("%d probes left") % game.nprobes)
-	proutn(_("Are you sure you want to fire a probe? "))
-	if ja() == False:
-	    return
-    game.isarmed = False
-    if key == IHALPHA and citem == "armed":
-	game.isarmed = True
-	key = scan()
-    elif key == IHEOL:
-	proutn(_("Arm NOVAMAX warhead? "))
-	game.isarmed = ja()
-    if not getcourse(isprobe=True, akey=key):
-	return
-    game.nprobes -= 1
-    angle = ((15.0 - game.direc) * 0.5235988)
-    game.probeinx = -math.sin(angle)
-    game.probeiny = math.cos(angle)
-    if math.fabs(game.probeinx) > math.fabs(game.probeiny):
-	bigger = math.fabs(game.probeinx)
-    else:
-	bigger = math.fabs(game.probeiny)
-    game.probeiny /= bigger
-    game.probeinx /= bigger
-    game.proben = 10.0*game.dist*bigger +0.5
-    game.probex = game.quadrant.x*QUADSIZE + game.sector.x - 1	# We will use better packing than original
-    game.probey = game.quadrant.y*QUADSIZE + game.sector.y - 1
-    game.probec = game.quadrant
-    schedule(FDSPROB, 0.01) # Time to move one sector
-    prout(_("Ensign Chekov-  \"The deep space probe is launched, Captain.\""))
-    game.ididit = True
-    return
-
-# Here's how the mayday code works:
-# 
-# First, the closest starbase is selected.  If there is a a starbase
-# in your own quadrant, you are in good shape.  This distance takes
-# quadrant distances into account only.
-#
-# A magic number is computed based on the distance which acts as the
-# probability that you will be rematerialized.  You get three tries.
-#
-# When it is determined that you should be able to be rematerialized
-# (i.e., when the probability thing mentioned above comes up
-# positive), you are put into that quadrant (anywhere).  Then, we try
-# to see if there is a spot adjacent to the star- base.  If not, you
-# can't be rematerialized!!!  Otherwise, it drops you there.  It only
-# tries five times to find a spot to drop you.  After that, it's your
-# problem.
-
-def mayday():
-    # yell for help from nearest starbase 
-    # There's more than one way to move in this game! 
-    line = 0
-    chew()
-    # Test for conditions which prevent calling for help 
-    if game.condition == "docked":
-	prout(_("Lt. Uhura-  \"But Captain, we're already docked.\""))
-	return
-    if damaged(DRADIO):
-	prout(_("Subspace radio damaged."))
-	return
-    if game.state.rembase==0:
-	prout(_("Lt. Uhura-  \"Captain, I'm not getting any response from Starbase.\""))
-	return
-    if game.landed:
-	proutn(_("You must be aboard the "))
-	crmshp()
-	prout(".")
-	return
-    # OK -- call for help from nearest starbase 
-    game.nhelp += 1
-    if game.base.x!=0:
-	# There's one in this quadrant 
-	ddist = distance(game.base, game.sector)
-    else:
-	ddist = FOREVER
-	for m in range(game.state.rembase):
-	    xdist = QUADSIZE * distance(game.state.baseq[m], game.quadrant)
-	    if xdist < ddist:
-		ddist = xdist
-		line = m
-	# Since starbase not in quadrant, set up new quadrant 
-	game.quadrant = game.state.baseq[line]
-	newqad(True)
-    # dematerialize starship 
-    game.quad[game.sector.x][game.sector.y]=IHDOT
-    proutn(_("Starbase in Quadrant %s responds--") % game.quadrant)
-    crmshp()
-    prout(_(" dematerializes."))
-    game.sector.x=0
-    for m in range(1, 5+1):
-        w = game.base.scatter() 
-	if VALID_SECTOR(ix,iy) and game.quad[ix][iy]==IHDOT:
-	    # found one -- finish up 
-            game.sector = w
-	    break
-    if not is_valid(game.sector):
-	prout(_("You have been lost in space..."))
-	finish(FMATERIALIZE)
-	return
-    # Give starbase three chances to rematerialize starship 
-    probf = math.pow((1.0 - math.pow(0.98,ddist)), 0.33333333)
-    for m in range(1, 3+1):
-	if m == 1: proutn(_("1st"))
-	elif m == 2: proutn(_("2nd"))
-	elif m == 3: proutn(_("3rd"))
-	proutn(_(" attempt to re-materialize "))
-	crmshp()
-	game.quad[ix][iy]=(IHMATER0,IHMATER1,IHMATER2)[m-1]
-	textcolor("red")
-	warble()
-	if randreal() > probf:
-	    break
-	prout(_("fails."))
-	curses.delay_output(500)
-	textcolor(None)
-    if m > 3:
-	game.quad[ix][iy]=IHQUEST
-	game.alive = False
-	drawmaps(1)
-	setwnd(message_window)
-	finish(FMATERIALIZE)
-	return
-    game.quad[ix][iy]=game.ship
-    textcolor("green")
-    prout(_("succeeds."))
-    textcolor(None)
-    dock(False)
-    skip(1)
-    prout(_("Lt. Uhura-  \"Captain, we made it!\""))
-
-# Abandon Ship (the BSD-Trek description)
-# 
-# The ship is abandoned.  If your current ship is the Faire
-# Queene, or if your shuttlecraft is dead, you're out of
-# luck.  You need the shuttlecraft in order for the captain
-# (that's you!!) to escape.
-# 
-# Your crew can beam to an inhabited starsystem in the
-# quadrant, if there is one and if the transporter is working.
-# If there is no inhabited starsystem, or if the transporter
-# is out, they are left to die in outer space.
-# 
-# If there are no starbases left, you are captured by the
-# Klingons, who torture you mercilessly.  However, if there
-# is at least one starbase, you are returned to the
-# Federation in a prisoner of war exchange.  Of course, this
-# can't happen unless you have taken some prisoners.
-
-def abandon():
-    # abandon ship 
-    chew()
-    if game.condition=="docked":
-	if game.ship!=IHE:
-	    prout(_("You cannot abandon Ye Faerie Queene."))
-	    return
-    else:
-	# Must take shuttle craft to exit 
-	if game.damage[DSHUTTL]==-1:
-	    prout(_("Ye Faerie Queene has no shuttle craft."))
-	    return
-	if game.damage[DSHUTTL]<0:
-	    prout(_("Shuttle craft now serving Big Macs."))
-	    return
-	if game.damage[DSHUTTL]>0:
-	    prout(_("Shuttle craft damaged."))
-	    return
-	if game.landed:
-	    prout(_("You must be aboard the ship."))
-	    return
-	if game.iscraft != "onship":
-	    prout(_("Shuttle craft not currently available."))
-	    return
-	# Print abandon ship messages 
-	skip(1)
-	prouts(_("***ABANDON SHIP!  ABANDON SHIP!"))
-	skip(1)
-	prouts(_("***ALL HANDS ABANDON SHIP!"))
-	skip(2)
-	prout(_("Captain and crew escape in shuttle craft."))
-	if game.state.rembase==0:
-	    # Oops! no place to go... 
-	    finish(FABANDN)
-	    return
-	q = game.state.galaxy[game.quadrant.x][game.quadrant.y]
-	# Dispose of crew 
-	if not (game.options & OPTION_WORLDS) and not damaged(DTRANSP):
-	    prout(_("Remainder of ship's complement beam down"))
-	    prout(_("to nearest habitable planet."))
-	elif q.planet != None and not damaged(DTRANSP):
-	    prout(_("Remainder of ship's complement beam down to %s.") %
-		    q.planet)
-	else:
-	    prout(_("Entire crew of %d left to die in outer space.") %
-		    game.state.crew)
-	    game.casual += game.state.crew
-	    game.abandoned += game.state.crew
-
-	# If at least one base left, give 'em the Faerie Queene 
-	skip(1)
-	game.icrystl = False # crystals are lost 
-	game.nprobes = 0 # No probes 
-	prout(_("You are captured by Klingons and released to"))
-	prout(_("the Federation in a prisoner-of-war exchange."))
-	nb = randrange(game.state.rembase)
-	# Set up quadrant and position FQ adjacient to base 
-	if not game.quadrant == game.state.baseq[nb]:
-	    game.quadrant = game.state.baseq[nb]
-	    game.sector.x = game.sector.y = 5
-	    newqad(True)
-	while True:
-	    # position next to base by trial and error 
-	    game.quad[game.sector.x][game.sector.y] = IHDOT
-	    for l in range(QUADSIZE):
-		game.sector = game.base.scatter()
-		if VALID_SECTOR(game.sector.x, game.sector.y) and \
-                       game.quad[game.sector.x][game.sector.y] == IHDOT:
-                    break
-	    if l < QUADSIZE+1:
-		break # found a spot 
-	    game.sector.x=QUADSIZE/2
-	    game.sector.y=QUADSIZE/2
-	    newqad(True)
-    # Get new commission 
-    game.quad[game.sector.x][game.sector.y] = game.ship = IHF
-    game.state.crew = FULLCREW
-    prout(_("Starfleet puts you in command of another ship,"))
-    prout(_("the Faerie Queene, which is antiquated but,"))
-    prout(_("still useable."))
-    if game.icrystl:
-	prout(_("The dilithium crystals have been moved."))
-    game.imine = False
-    game.iscraft = "offship" # Galileo disappears 
-    # Resupply ship 
-    game.condition="docked"
-    for l in range(NDEVICES): 
-	game.damage[l] = 0.0
-    game.damage[DSHUTTL] = -1
-    game.energy = game.inenrg = 3000.0
-    game.shield = game.inshld = 1250.0
-    game.torps = game.intorps = 6
-    game.lsupres=game.inlsr=3.0
-    game.shldup=False
-    game.warpfac=5.0
-    game.wfacsq=25.0
-    return
-
-# Code from planets.c begins here.
-
-def consumeTime():
-    # abort a lengthy operation if an event interrupts it 
-    game.ididit = True
-    events()
-    if game.alldone or game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova or game.justin: 
-	return True
-    return False
-
-def survey():
-    # report on (uninhabited) planets in the galaxy 
-    iknow = False
-    skip(1)
-    chew()
-    prout(_("Spock-  \"Planet report follows, Captain.\""))
-    skip(1)
-    for i in range(game.inplan):
-	if game.state.planets[i].pclass == "destroyed":
-	    continue
-	if (game.state.planets[i].known != "unknown" \
-            and not game.state.planets[i].inhabited) \
-            or idebug:
-	    iknow = True
-	    if idebug and game.state.planets[i].known=="unknown":
-		proutn("(Unknown) ")
-	    proutn(_("Quadrant %s") % game.state.planets[i].w)
-	    proutn(_("   class "))
-	    proutn(game.state.planets[i].pclass)
-	    proutn("   ")
-	    if game.state.planets[i].crystals != present:
-		proutn(_("no "))
-	    prout(_("dilithium crystals present."))
-	    if game.state.planets[i].known=="shuttle_down": 
-		prout(_("    Shuttle Craft Galileo on surface."))
-    if not iknow:
-	prout(_("No information available."))
-
-def orbit():
-    # enter standard orbit 
-    skip(1)
-    chew()
-    if game.inorbit:
-	prout(_("Already in standard orbit."))
-	return
-    if damaged(DWARPEN) and damaged(DIMPULS):
-	prout(_("Both warp and impulse engines damaged."))
-	return
-    if not is_valid(game.plnet) or abs(game.sector.x-game.plnet.x) > 1 or abs(game.sector.y-game.plnet.y) > 1:
-	crmshp()
-	prout(_(" not adjacent to planet."))
-	skip(1)
-	return
-    game.optime = randreal(0.02, 0.05)
-    prout(_("Helmsman Sulu-  \"Entering standard orbit, Sir.\""))
-    newcnd()
-    if consumeTime():
-	return
-    game.height = randreal(1400, 8600)
-    prout(_("Sulu-  \"Entered orbit at altitude %.2f kilometers.\"") % game.height)
-    game.inorbit = True
-    game.ididit = True
-
-def sensor():
-    # examine planets in this quadrant 
-    if damaged(DSRSENS):
-	if game.options & OPTION_TTY:
-	    prout(_("Short range sensors damaged."))
-	return
-    if game.iplnet == None:
-	if game.options & OPTION_TTY:
-	    prout(_("Spock- \"No planet in this quadrant, Captain.\""))
-	return
-    if game.iplnet.known == "unknown":
-	prout(_("Spock-  \"Sensor scan for Quadrant %s-") % game.quadrant)
-	skip(1)
-	prout(_("         Planet at Sector %s is of class %s.") %
-	      (game.plnet, game.iplnet.pclass))
-	if game.iplnet.known=="shuttle_down": 
-	    prout(_("         Sensors show Galileo still on surface."))
-	proutn(_("         Readings indicate"))
-	if game.iplnet.crystals != "present":
-	    proutn(_(" no"))
-	prout(_(" dilithium crystals present.\""))
-	if game.iplnet.known == "unknown":
-	    game.iplnet.known = "known"
-    elif game.iplnet.inhabited:
-        prout(_("Spock-  \"The inhabited planet %s ") % game.iplnet.name)
-        prout(_("        is located at Sector %s, Captain.\"") % game.plnet)
-
-def beam():
-    # use the transporter 
-    nrgneed = 0
-    chew()
-    skip(1)
-    if damaged(DTRANSP):
-	prout(_("Transporter damaged."))
-	if not damaged(DSHUTTL) and (game.iplnet.known=="shuttle_down" or game.iscraft == "onship"):
-	    skip(1)
-	    proutn(_("Spock-  \"May I suggest the shuttle craft, Sir?\" "))
-	    if ja() == True:
-		shuttle()
-	return
-    if not game.inorbit:
-	crmshp()
-	prout(_(" not in standard orbit."))
-	return
-    if game.shldup:
-	prout(_("Impossible to transport through shields."))
-	return
-    if game.iplnet.known=="unknown":
-	prout(_("Spock-  \"Captain, we have no information on this planet"))
-	prout(_("  and Starfleet Regulations clearly state that in this situation"))
-	prout(_("  you may not go down.\""))
-	return
-    if not game.landed and game.iplnet.crystals=="absent":
-	prout(_("Spock-  \"Captain, I fail to see the logic in"))
-	prout(_("  exploring a planet with no dilithium crystals."))
-	proutn(_("  Are you sure this is wise?\" "))
-	if ja() == False:
-	    chew()
-	    return
-    if not (game.options & OPTION_PLAIN):
-	nrgneed = 50 * game.skill + game.height / 100.0
-	if nrgneed > game.energy:
-    	    prout(_("Engineering to bridge--"))
-	    prout(_("  Captain, we don't have enough energy for transportation."))
-	    return
-	if not game.landed and nrgneed * 2 > game.energy:
-    	    prout(_("Engineering to bridge--"))
-	    prout(_("  Captain, we have enough energy only to transport you down to"))
-	    prout(_("  the planet, but there wouldn't be an energy for the trip back."))
-	    if game.iplnet.known == "shuttle_down":
-		prout(_("  Although the Galileo shuttle craft may still be on a surface."))
-	    proutn(_("  Are you sure this is wise?\" "))
-	    if ja() == False:
-		chew()
-		return
-    if game.landed:
-	# Coming from planet 
-	if game.iplnet.known=="shuttle_down":
-	    proutn(_("Spock-  \"Wouldn't you rather take the Galileo?\" "))
-	    if ja() == True:
-		chew()
-		return
-	    prout(_("Your crew hides the Galileo to prevent capture by aliens."))
-	prout(_("Landing party assembled, ready to beam up."))
-	skip(1)
-	prout(_("Kirk whips out communicator..."))
-	prouts(_("BEEP  BEEP  BEEP"))
-	skip(2)
-	prout(_("\"Kirk to enterprise-  Lock on coordinates...energize.\""))
-    else:
-	# Going to planet 
-	prout(_("Scotty-  \"Transporter room ready, Sir.\""))
-	skip(1)
-	prout(_("Kirk and landing party prepare to beam down to planet surface."))
-	skip(1)
-	prout(_("Kirk-  \"Energize.\""))
-    game.ididit = True
-    skip(1)
-    prouts("WWHOOOIIIIIRRRRREEEE.E.E.  .  .  .  .   .    .")
-    skip(2)
-    if withprob(0.98):
-	prouts("BOOOIIIOOOIIOOOOIIIOIING . . .")
-	skip(2)
-	prout(_("Scotty-  \"Oh my God!  I've lost them.\""))
-	finish(FLOST)
-	return
-    prouts(".    .   .  .  .  .  .E.E.EEEERRRRRIIIIIOOOHWW")
-    game.landed = not game.landed
-    game.energy -= nrgneed
-    skip(2)
-    prout(_("Transport complete."))
-    if game.landed and game.iplnet.known=="shuttle_down":
-	prout(_("The shuttle craft Galileo is here!"))
-    if not game.landed and game.imine:
-	game.icrystl = True
-	game.cryprob = 0.05
-    game.imine = False
-    return
-
-def mine():
-    # strip-mine a world for dilithium 
-    skip(1)
-    chew()
-    if not game.landed:
-	prout(_("Mining party not on planet."))
-	return
-    if game.iplnet.crystals == "mined":
-	prout(_("This planet has already been strip-mined for dilithium."))
-	return
-    elif game.iplnet.crystals == "absent":
-	prout(_("No dilithium crystals on this planet."))
-	return
-    if game.imine:
-	prout(_("You've already mined enough crystals for this trip."))
-	return
-    if game.icrystl and game.cryprob == 0.05:
-	proutn(_("With all those fresh crystals aboard the "))
-	crmshp()
-	skip(1)
-	prout(_("there's no reason to mine more at this time."))
-	return
-    game.optime = randreal(0.1, 0.3)*(ord(game.iplnet.pclass)-ord("L"))
-    if consumeTime():
-	return
-    prout(_("Mining operation complete."))
-    game.iplnet.crystals = "mined"
-    game.imine = game.ididit = True
-
-def usecrystals():
-    # use dilithium crystals 
-    game.ididit = False
-    skip(1)
-    chew()
-    if not game.icrystl:
-	prout(_("No dilithium crystals available."))
-	return
-    if game.energy >= 1000:
-	prout(_("Spock-  \"Captain, Starfleet Regulations prohibit such an operation"))
-	prout(_("  except when Condition Yellow exists."))
-	return
-    prout(_("Spock- \"Captain, I must warn you that loading"))
-    prout(_("  raw dilithium crystals into the ship's power"))
-    prout(_("  system may risk a severe explosion."))
-    proutn(_("  Are you sure this is wise?\" "))
-    if ja() == False:
-	chew()
-	return
-    skip(1)
-    prout(_("Engineering Officer Scott-  \"(GULP) Aye Sir."))
-    prout(_("  Mr. Spock and I will try it.\""))
-    skip(1)
-    prout(_("Spock-  \"Crystals in place, Sir."))
-    prout(_("  Ready to activate circuit.\""))
-    skip(1)
-    prouts(_("Scotty-  \"Keep your fingers crossed, Sir!\""))
-    skip(1)
-    if with(game.cryprob):
-	prouts(_("  \"Activating now! - - No good!  It's***"))
-	skip(2)
-	prouts(_("***RED ALERT!  RED A*L********************************"))
-	skip(1)
-	stars()
-	prouts(_("******************   KA-BOOM!!!!   *******************"))
-	skip(1)
-	kaboom()
-	return
-    game.energy += randreal(5000.0, 5500.0)
-    prouts(_("  \"Activating now! - - "))
-    prout(_("The instruments"))
-    prout(_("   are going crazy, but I think it's"))
-    prout(_("   going to work!!  Congratulations, Sir!\""))
-    game.cryprob *= 2.0
-    game.ididit = True
-
-def shuttle():
-    # use shuttlecraft for planetary jaunt 
-    chew()
-    skip(1)
-    if damaged(DSHUTTL):
-	if game.damage[DSHUTTL] == -1.0:
-	    if game.inorbit and game.iplnet.known == "shuttle_down":
-		prout(_("Ye Faerie Queene has no shuttle craft bay to dock it at."))
-	    else:
-		prout(_("Ye Faerie Queene had no shuttle craft."))
-	elif game.damage[DSHUTTL] > 0:
-	    prout(_("The Galileo is damaged."))
-	else: # game.damage[DSHUTTL] < 0  
-	    prout(_("Shuttle craft is now serving Big Macs."))
-	return
-    if not game.inorbit:
-	crmshp()
-	prout(_(" not in standard orbit."))
-	return
-    if (game.iplnet.known != "shuttle_down") and game.iscraft != "onship":
-	prout(_("Shuttle craft not currently available."))
-	return
-    if not game.landed and game.iplnet.known=="shuttle_down":
-	prout(_("You will have to beam down to retrieve the shuttle craft."))
-	return
-    if game.shldup or game.condition == "docked":
-	prout(_("Shuttle craft cannot pass through shields."))
-	return
-    if game.iplnet.known=="unknown":
-	prout(_("Spock-  \"Captain, we have no information on this planet"))
-	prout(_("  and Starfleet Regulations clearly state that in this situation"))
-	prout(_("  you may not fly down.\""))
-	return
-    game.optime = 3.0e-5*game.height
-    if game.optime >= 0.8*game.state.remtime:
-	prout(_("First Officer Spock-  \"Captain, I compute that such"))
-	proutn(_("  a maneuver would require approximately %2d%% of our") % \
-	       int(100*game.optime/game.state.remtime))
-	prout(_("remaining time."))
-	proutn(_("Are you sure this is wise?\" "))
-	if ja() == False:
-	    game.optime = 0.0
-	    return
-    if game.landed:
-	# Kirk on planet 
-	if game.iscraft == "onship":
-	    # Galileo on ship! 
-	    if not damaged(DTRANSP):
-		proutn(_("Spock-  \"Would you rather use the transporter?\" "))
-		if ja() == True:
-		    beam()
-		    return
-		proutn(_("Shuttle crew"))
-	    else:
-		proutn(_("Rescue party"))
-	    prout(_(" boards Galileo and swoops toward planet surface."))
-	    game.iscraft = "offship"
-	    skip(1)
-	    if consumeTime():
-		return
-	    game.iplnet.known="shuttle_down"
-	    prout(_("Trip complete."))
-	    return
-	else:
-	    # Ready to go back to ship 
-	    prout(_("You and your mining party board the"))
-	    prout(_("shuttle craft for the trip back to the Enterprise."))
-	    skip(1)
-	    prouts(_("The short hop begins . . ."))
-	    skip(1)
-	    game.iplnet.known="known"
-	    game.icraft = True
-	    skip(1)
-	    game.landed = False
-	    if consumeTime():
-		return
-	    game.iscraft = "onship"
-	    game.icraft = False
-	    if game.imine:
-		game.icrystl = True
-		game.cryprob = 0.05
-	    game.imine = False
-	    prout(_("Trip complete."))
-	    return
-    else:
-	# Kirk on ship 
-	# and so is Galileo 
-	prout(_("Mining party assembles in the hangar deck,"))
-	prout(_("ready to board the shuttle craft \"Galileo\"."))
-	skip(1)
-	prouts(_("The hangar doors open; the trip begins."))
-	skip(1)
-	game.icraft = True
-	game.iscraft = "offship"
-	if consumeTime():
-	    return
-	game.iplnet.known = "shuttle_down"
-	game.landed = True
-	game.icraft = False
-	prout(_("Trip complete."))
-	return
-
-def deathray():
-    # use the big zapper 
-    game.ididit = False
-    skip(1)
-    chew()
-    if game.ship != IHE:
-	prout(_("Ye Faerie Queene has no death ray."))
-	return
-    if len(game.enemies)==0:
-	prout(_("Sulu-  \"But Sir, there are no enemies in this quadrant.\""))
-	return
-    if damaged(DDRAY):
-	prout(_("Death Ray is damaged."))
-	return
-    prout(_("Spock-  \"Captain, the 'Experimental Death Ray'"))
-    prout(_("  is highly unpredictible.  Considering the alternatives,"))
-    proutn(_("  are you sure this is wise?\" "))
-    if ja() == False:
-	return
-    prout(_("Spock-  \"Acknowledged.\""))
-    skip(1)
-    game.ididit = True
-    prouts(_("WHOOEE ... WHOOEE ... WHOOEE ... WHOOEE"))
-    skip(1)
-    prout(_("Crew scrambles in emergency preparation."))
-    prout(_("Spock and Scotty ready the death ray and"))
-    prout(_("prepare to channel all ship's power to the device."))
-    skip(1)
-    prout(_("Spock-  \"Preparations complete, sir.\""))
-    prout(_("Kirk-  \"Engage!\""))
-    skip(1)
-    prouts(_("WHIRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"))
-    skip(1)
-    dprob = 0.30
-    if game.options & OPTION_PLAIN:
-	dprob = 0.5
-    r = randreal()
-    if r > dprob:
-	prouts(_("Sulu- \"Captain!  It's working!\""))
-	skip(2)
-	while len(game.enemies) > 0:
-	    deadkl(game.enemies[1].kloc, game.quad[game.enemies[1].kloc.x][game.enemies[1].kloc.y],game.enemies[1].kloc)
-	prout(_("Ensign Chekov-  \"Congratulations, Captain!\""))
-	if (game.state.remkl + game.state.remcom + game.state.nscrem) == 0:
-	    finish(FWON)    
-	if (game.options & OPTION_PLAIN) == 0:
-	    prout(_("Spock-  \"Captain, I believe the `Experimental Death Ray'"))
-	    if withprob(0.05):
-		prout(_("   is still operational.\""))
-	    else:
-		prout(_("   has been rendered nonfunctional.\""))
-		game.damage[DDRAY] = 39.95
-	return
-    r = randreal()	# Pick failure method 
-    if r <= 0.30:
-	prouts(_("Sulu- \"Captain!  It's working!\""))
-	skip(1)
-	prouts(_("***RED ALERT!  RED ALERT!"))
-	skip(1)
-	prout(_("***MATTER-ANTIMATTER IMPLOSION IMMINENT!"))
-	skip(1)
-	prouts(_("***RED ALERT!  RED A*L********************************"))
-	skip(1)
-	stars()
-	prouts(_("******************   KA-BOOM!!!!   *******************"))
-	skip(1)
-	kaboom()
-	return
-    if r <= 0.55:
-	prouts(_("Sulu- \"Captain!  Yagabandaghangrapl, brachriigringlanbla!\""))
-	skip(1)
-	prout(_("Lt. Uhura-  \"Graaeek!  Graaeek!\""))
-	skip(1)
-	prout(_("Spock-  \"Fascinating!  . . . All humans aboard"))
-	prout(_("  have apparently been transformed into strange mutations."))
-	prout(_("  Vulcans do not seem to be affected."))
-	skip(1)
-	prout(_("Kirk-  \"Raauch!  Raauch!\""))
-	finish(FDRAY)
-	return
-    if r <= 0.75:
-	intj
-	prouts(_("Sulu- \"Captain!  It's   --WHAT?!?!\""))
-	skip(2)
-	proutn(_("Spock-  \"I believe the word is"))
-	prouts(_(" *ASTONISHING*"))
-	prout(_(" Mr. Sulu."))
-	for i in range(QUADSIZE):
-	    for j in range(QUADSIZE):
-		if game.quad[i][j] == IHDOT:
-		    game.quad[i][j] = IHQUEST
-	prout(_("  Captain, our quadrant is now infested with"))
-	prouts(_(" - - - - - -  *THINGS*."))
-	skip(1)
-	prout(_("  I have no logical explanation.\""))
-	return
-    prouts(_("Sulu- \"Captain!  The Death Ray is creating tribbles!\""))
-    skip(1)
-    prout(_("Scotty-  \"There are so many tribbles down here"))
-    prout(_("  in Engineering, we can't move for 'em, Captain.\""))
-    finish(FTRIBBLE)
-    return
-
-# Code from reports.c begins here
-
-def attackreport(curt):
-    # report status of bases under attack 
-    if not curt:
-	if is_scheduled(FCDBAS):
-	    prout(_("Starbase in Quadrant %s is currently under Commander attack.") % game.battle)
-	    prout(_("It can hold out until Stardate %d.") % int(scheduled(FCDBAS)))
-	elif game.isatb == 1:
-	    prout(_("Starbase in Quadrant %s is under Super-commander attack.") % game.state.kscmdr)
-	    prout(_("It can hold out until Stardate %d.") % int(scheduled(FSCDBAS)))
-	else:
-	    prout(_("No Starbase is currently under attack."))
-    else:
-        if is_scheduled(FCDBAS):
-	    proutn(_("Base in %s attacked by C. Alive until %.1f") % (game.battle, scheduled(FCDBAS)))
-        if game.isatb:
-	    proutn(_("Base in %s attacked by S. Alive until %.1f") % (game.state.kscmdr, scheduled(FSCDBAS)))
-	clreol()
-
-def report():
-    # report on general game status 
-    chew()
-    s1 = "" and game.thawed and _("thawed ")
-    s2 = {1:"short", 2:"medium", 4:"long"}[game.length]
-    s3 = (None, _("novice"). _("fair"),
-          _("good"), _("expert"), _("emeritus"))[game.skill]
-    prout(_("You %s a %s%s %s game.") % ((_("were playing"), _("are playing"))[game.alldone], s1, s2, s3))
-    if game.skill>SKILL_GOOD and game.thawed and not game.alldone:
-	prout(_("No plaque is allowed."))
-    if game.tourn:
-	prout(_("This is tournament game %d.") % game.tourn)
-    prout(_("Your secret password is \"%s\"") % game.passwd)
-    proutn(_("%d of %d Klingons have been killed") % (((game.inkling + game.incom + game.inscom) - (game.state.remkl + game.state.remcom + game.state.nscrem)), 
-	   (game.inkling + game.incom + game.inscom)))
-    if game.incom - game.state.remcom:
-	prout(_(", including %d Commander%s.") % (game.incom - game.state.remcom, (_("s"), "")[(game.incom - game.state.remcom)==1]))
-    elif game.inkling - game.state.remkl + (game.inscom - game.state.nscrem) > 0:
-	prout(_(", but no Commanders."))
-    else:
-	prout(".")
-    if game.skill > SKILL_FAIR:
-	prout(_("The Super Commander has %sbeen destroyed.") % ("", _("not "))[game.state.nscrem])
-    if game.state.rembase != game.inbase:
-	proutn(_("There "))
-	if game.inbase-game.state.rembase==1:
-	    proutn(_("has been 1 base"))
-	else:
-	    proutn(_("have been %d bases") % (game.inbase-game.state.rembase))
-	prout(_(" destroyed, %d remaining.") % game.state.rembase)
-    else:
-	prout(_("There are %d bases.") % game.inbase)
-    if communicating() or game.iseenit:
-	# Don't report this if not seen and
-	# either the radio is dead or not at base!
-	attackreport(False)
-	game.iseenit = True
-    if game.casual: 
-	prout(_("%d casualt%s suffered so far.") % (game.casual, ("y", "ies")[game.casual!=1]))
-    if game.nhelp:
-	prout(_("There were %d call%s for help.") % (game.nhelp,  ("" , _("s"))[game.nhelp!=1]))
-    if game.ship == IHE:
-	proutn(_("You have "))
-	if game.nprobes:
-	    proutn("%d" % (game.nprobes))
-	else:
-	    proutn(_("no"))
-	proutn(_(" deep space probe"))
-	if game.nprobes!=1:
-	    proutn(_("s"))
-	prout(".")
-    if communicating() and is_scheduled(FDSPROB):
-	if game.isarmed: 
-	    proutn(_("An armed deep space probe is in "))
-	else:
-	    proutn(_("A deep space probe is in "))
-	prout("Quadrant %s." % game.probec)
-    if game.icrystl:
-	if game.cryprob <= .05:
-	    prout(_("Dilithium crystals aboard ship... not yet used."))
-	else:
-	    i=0
-	    ai = 0.05
-	    while game.cryprob > ai:
-		ai *= 2.0
-		i += 1
-	    prout(_("Dilithium crystals have been used %d time%s.") % \
-                  (i, (_("s"), "")[i==1]))
-    skip(1)
-	
-def lrscan(silent):
-    # long-range sensor scan 
-    if damaged(DLRSENS):
-	# Now allow base's sensors if docked 
-	if game.condition != "docked":
-            if not silent:
-                prout(_("LONG-RANGE SENSORS DAMAGED."))
-	    return
-        if not silent:
-            prout(_("Starbase's long-range scan"))
-    elif not silent:
-	prout(_("Long-range scan"))
-    for x in range(game.quadrant.x-1, game.quadrant.x+2):
-        if not silent:
-            proutn(" ")
-        for y in range(game.quadrant.y-1, game.quadrant.y+2):
-	    if not VALID_QUADRANT(x, y):
-                if not silent:
-                    proutn("  -1")
-	    else:
-		if not damaged(DRADIO):
-		    game.state.galaxy[x][y].charted = True
-		game.state.chart[x][y].klingons = game.state.galaxy[x][y].klingons
-		game.state.chart[x][y].starbase = game.state.galaxy[x][y].starbase
-		game.state.chart[x][y].stars = game.state.galaxy[x][y].stars
-		if not silent and game.state.galaxy[x][y].supernova: 
-		    proutn(" ***")
-		elif not silent:
-		    proutn(" %3d" % (game.state.chart[x][y].klingons*100 + game.state.chart[x][y].starbase * 10 + game.state.chart[x][y].stars))
-	prout(" ")
-
-def damagereport():
-    # damage report 
-    jdam = False
-    chew()
-
-    for i in range(NDEVICES):
-	if damaged(i):
-	    if not jdam:
-		prout(_("\tDEVICE\t\t\t-REPAIR TIMES-"))
-		prout(_("\t\t\tIN FLIGHT\t\tDOCKED"))
-		jdam = True
-	    prout("  %-26s\t%8.2f\t\t%8.2f" % (device[i],
-                                               game.damage[i]+0.05,
-                                               game.docfac*game.damage[i]+0.005))
-    if not jdam:
-	prout(_("All devices functional."))
-
-def rechart():
-    # update the chart in the Enterprise's computer from galaxy data 
-    game.lastchart = game.state.date
-    for i in range(GALSIZE):
-	for j in range(GALSIZE):
-	    if game.state.galaxy[i][j].charted:
-		game.state.chart[i][j].klingons = game.state.galaxy[i][j].klingons
-		game.state.chart[i][j].starbase = game.state.galaxy[i][j].starbase
-		game.state.chart[i][j].stars = game.state.galaxy[i][j].stars
-
-def chart():
-    # display the star chart  
-    chew()
-    if (game.options & OPTION_AUTOSCAN):
-        lrscan(silent=True)
-    if not damaged(DRADIO):
-	rechart()
-    if game.lastchart < game.state.date and game.condition == "docked":
-	prout(_("Spock-  \"I revised the Star Chart from the starbase's records.\""))
-	rechart()
-
-    prout(_("       STAR CHART FOR THE KNOWN GALAXY"))
-    if game.state.date > game.lastchart:
-	prout(_("(Last surveillance update %d stardates ago).") % ((int)(game.state.date-game.lastchart)))
-    prout("      1    2    3    4    5    6    7    8")
-    for i in range(GALSIZE):
-	proutn("%d |" % (i+1))
-	for j in range(GALSIZE):
-	    if (game.options & OPTION_SHOWME) and i == game.quadrant.x and j == game.quadrant.y:
-		proutn("<")
-	    else:
-		proutn(" ")
-	    if game.state.galaxy[i][j].supernova:
-		show = "***"
-	    elif not game.state.galaxy[i][j].charted and game.state.galaxy[i][j].starbase:
-		show = ".1."
-	    elif game.state.galaxy[i][j].charted:
-		show = "%3d" % (game.state.chart[i][j].klingons*100 + game.state.chart[i][j].starbase * 10 + game.state.chart[i][j].stars)
-	    else:
-		show = "..."
-	    proutn(show)
-	    if (game.options & OPTION_SHOWME) and i == game.quadrant.x and j == game.quadrant.y:
-		proutn(">")
-	    else:
-		proutn(" ")
-	proutn("  |")
-	if i<GALSIZE:
-	    skip(1)
-
-def sectscan(goodScan, i, j):
-    # light up an individual dot in a sector 
-    if goodScan or (abs(i-game.sector.x)<= 1 and abs(j-game.sector.y) <= 1):
-	if (game.quad[i][j]==IHMATER0) or (game.quad[i][j]==IHMATER1) or (game.quad[i][j]==IHMATER2) or (game.quad[i][j]==IHE) or (game.quad[i][j]==IHF):
-	    if game.condition   == "red": textcolor("red")
-	    elif game.condition == "green": textcolor("green")
-	    elif game.condition == "yellow": textcolor("yellow")
-	    elif game.condition == "docked": textcolor("cyan")
-	    elif game.condition == "dead": textcolor("brown")
-	    if game.quad[i][j] != game.ship: 
-		highvideo()
-	proutn("%c " % game.quad[i][j])
-	textcolor(None)
-    else:
-	proutn("- ")
-
-def status(req=0):
-    # print status report lines 
-
-    if not req or req == 1:
-	prstat(_("Stardate"), _("%.1f, Time Left %.2f") \
-               % (game.state.date, game.state.remtime))
-    if not req or req == 2:
-	if game.condition != "docked":
-	    newcnd()
-        dam = 0
-	for t in range(NDEVICES):
-	    if game.damage[t]>0: 
-		dam += 1
-	prstat(_("Condition"), _("%s, %i DAMAGES") % (game.condition.upper(), dam))
-    if not req or req == 3:
-	prstat(_("Position"), "%s , %s" % (game.quadrant, game.sector))
-    if not req or req == 4:
-	if damaged(DLIFSUP):
-	    if game.condition == "docked":
-		s = _("DAMAGED, Base provides")
-	    else:
-		s = _("DAMAGED, reserves=%4.2f") % game.lsupres
-	else:
-	    s = _("ACTIVE")
-	prstat(_("Life Support"), s)
-    if not req or req == 5:
-	prstat(_("Warp Factor"), "%.1f" % game.warpfac)
-    if not req or req == 6:
-        extra = ""
-        if game.icrystl and (game.options & OPTION_SHOWME):
-            extra = _(" (have crystals)")
-	prstat(_("Energy"), "%.2f%s" % (game.energy, extra))
-    if not req or req == 7:
-	prstat(_("Torpedoes"), "%d" % (game.torps))
-    if not req or req == 8:
-	if damaged(DSHIELD):
-	    s = _("DAMAGED,")
-	elif game.shldup:
-	    s = _("UP,")
-	else:
-	    s = _("DOWN,")
-	data = _(" %d%% %.1f units") \
-               % (int((100.0*game.shield)/game.inshld + 0.5), game.shield)
-	prstat(_("Shields"), s+data)
-    if not req or req == 9:
-        prstat(_("Klingons Left"), "%d" \
-               % (game.state.remkl + game.state.remcom + game.state.nscrem))
-    if not req or req == 10:
-	if game.options & OPTION_WORLDS:
-	    plnet = game.state.galaxy[game.quadrant.x][game.quadrant.y].planet
-	    if plnet and plnet.inhabited:
-		prstat(_("Major system"), plnet.name)
-	    else:
-		prout(_("Sector is uninhabited"))
-    elif not req or req == 11:
-	attackreport(not req)
-
-def request():
-    requests = ("da","co","po","ls","wa","en","to","sh","kl","sy", "ti")
-    while scan() == IHEOL:
-	proutn(_("Information desired? "))
-    chew()
-    if citem in requests:
-        status(requests.index(citem))
-    else:
-	prout(_("UNRECOGNIZED REQUEST. Legal requests are:"))
-	prout(("  date, condition, position, lsupport, warpfactor,"))
-	prout(("  energy, torpedoes, shields, klingons, system, time."))
-		
-def srscan():
-    # short-range scan 
-    goodScan=True
-    if damaged(DSRSENS):
-	# Allow base's sensors if docked 
-	if game.condition != "docked":
-	    prout(_("   S.R. SENSORS DAMAGED!"))
-	    goodScan=False
-	else:
-	    prout(_("  [Using Base's sensors]"))
-    else:
-	prout(_("     Short-range scan"))
-    if goodScan and not damaged(DRADIO): 
-	game.state.chart[game.quadrant.x][game.quadrant.y].klingons = game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons
-	game.state.chart[game.quadrant.x][game.quadrant.y].starbase = game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase
-	game.state.chart[game.quadrant.x][game.quadrant.y].stars = game.state.galaxy[game.quadrant.x][game.quadrant.y].stars
-	game.state.galaxy[game.quadrant.x][game.quadrant.y].charted = True
-    prout("    1 2 3 4 5 6 7 8 9 10")
-    if game.condition != "docked":
-	newcnd()
-    for i in range(QUADSIZE):
-	proutn("%2d  " % (i+1))
-	for j in range(QUADSIZE):
-	    sectscan(goodScan, i, j)
-	skip(1)
-			
-def eta():
-    # use computer to get estimated time of arrival for a warp jump 
-    w1 = coord(); w2 = coord()
-    prompt = False
-    if damaged(DCOMPTR):
-	prout(_("COMPUTER DAMAGED, USE A POCKET CALCULATOR."))
-	skip(1)
-	return
-    if scan() != IHREAL:
-	prompt = True
-	chew()
-	proutn(_("Destination quadrant and/or sector? "))
-	if scan()!=IHREAL:
-	    huh()
-	    return
-    w1.y = int(aaitem-0.5)
-    if scan() != IHREAL:
-	huh()
-	return
-    w1.x = int(aaitem-0.5)
-    if scan() == IHREAL:
-	w2.y = int(aaitem-0.5)
-	if scan() != IHREAL:
-	    huh()
-	    return
-	w2.x = int(aaitem-0.5)
-    else:
-	if game.quadrant.y>w1.x:
-	    w2.x = 0
-	else:
-	    w2.x=QUADSIZE-1
-	if game.quadrant.x>w1.y:
-	    w2.y = 0
-	else:
-	    w2.y=QUADSIZE-1
-    if not VALID_QUADRANT(w1.x, w1.y) or not VALID_SECTOR(w2.x, w2.y):
-	huh()
-	return
-    game.dist = math.sqrt(square(w1.y-game.quadrant.y+0.1*(w2.y-game.sector.y))+
-		square(w1.x-game.quadrant.x+0.1*(w2.x-game.sector.x)))
-    wfl = False
-    if prompt:
-	prout(_("Answer \"no\" if you don't know the value:"))
-    while True:
-	chew()
-	proutn(_("Time or arrival date? "))
-	if scan()==IHREAL:
-	    ttime = aaitem
-	    if ttime > game.state.date:
-		ttime -= game.state.date # Actually a star date
-            twarp=(math.floor(math.sqrt((10.0*game.dist)/ttime)*10.0)+1.0)/10.0
-            if ttime <= 1e-10 or twarp > 10:
-		prout(_("We'll never make it, sir."))
-		chew()
-		return
-	    if twarp < 1.0:
-		twarp = 1.0
-	    break
-	chew()
-	proutn(_("Warp factor? "))
-	if scan()== IHREAL:
-	    wfl = True
-	    twarp = aaitem
-	    if twarp<1.0 or twarp > 10.0:
-		huh()
-		return
-	    break
-	prout(_("Captain, certainly you can give me one of these."))
-    while True:
-	chew()
-	ttime = (10.0*game.dist)/square(twarp)
-	tpower = game.dist*twarp*twarp*twarp*(game.shldup+1)
-	if tpower >= game.energy:
-	    prout(_("Insufficient energy, sir."))
-	    if not game.shldup or tpower > game.energy*2.0:
-		if not wfl:
-		    return
-		proutn(_("New warp factor to try? "))
-		if scan() == IHREAL:
-		    wfl = True
-		    twarp = aaitem
-		    if twarp<1.0 or twarp > 10.0:
-			huh()
-			return
-		    continue
-		else:
-		    chew()
-		    skip(1)
-		    return
-	    prout(_("But if you lower your shields,"))
-	    proutn(_("remaining"))
-	    tpower /= 2
-	else:
-	    proutn(_("Remaining"))
-	prout(_(" energy will be %.2f.") % (game.energy-tpower))
-	if wfl:
-	    prout(_("And we will arrive at stardate %.2f.") % (game.state.date+ttime))
-	elif twarp==1.0:
-	    prout(_("Any warp speed is adequate."))
-	else:
-	    prout(_("Minimum warp needed is %.2f,") % (twarp))
-	    prout(_("and we will arrive at stardate %.2f.") % (game.state.date+ttime))
-	if game.state.remtime < ttime:
-	    prout(_("Unfortunately, the Federation will be destroyed by then."))
-	if twarp > 6.0:
-	    prout(_("You'll be taking risks at that speed, Captain"))
-	if (game.isatb==1 and game.state.kscmdr == w1 and \
-	     scheduled(FSCDBAS)< ttime+game.state.date) or \
-	    (scheduled(FCDBAS)<ttime+game.state.date and game.battle == w1):
-	    prout(_("The starbase there will be destroyed by then."))
-	proutn(_("New warp factor to try? "))
-	if scan() == IHREAL:
-	    wfl = True
-	    twarp = aaitem
-	    if twarp<1.0 or twarp > 10.0:
-		huh()
-		return
-	else:
-	    chew()
-	    skip(1)
-	    return
-			
-
-# Code from setup.c begins here
-
-def prelim():
-    # issue a historically correct banner 
-    skip(2)
-    prout(_("-SUPER- STAR TREK"))
-    skip(1)
-# From the FORTRAN original
-#    prout(_("Latest update-21 Sept 78"))
-#    skip(1)
-
-def freeze(boss):
-    # save game 
-    if boss:
-	citem = "emsave.trk"
-    else:
-        key = scan()
-	if key == IHEOL:
-	    proutn(_("File name: "))
-	    key = scan()
-	if key != IHALPHA:
-	    huh()
-	    return
-	chew()
-        if '.' not in citem:
-	    citem += ".trk"
-    try:
-        fp = open(citem, "wb")
-    except IOError:
-	prout(_("Can't freeze game as file %s") % citem)
-	return
-    cPickle.dump(game, fp)
-    fp.close()
-
-def thaw():
-    # retrieve saved game 
-    game.passwd[0] = '\0'
-    key = scan()
-    if key == IHEOL:
-	proutn(_("File name: "))
-	key = scan()
-    if key != IHALPHA:
-	huh()
-	return True
-    chew()
-    if '.' not in citem:
-        citem += ".trk"
-    try:
-        fp = open(citem, "rb")
-    except IOError:
-	prout(_("Can't thaw game in %s") % citem)
-	return
-    game = cPickle.load(fp)
-    fp.close()
-    return False
-
-# I used <http://www.memory-alpha.org> to find planets
-# with references in ST:TOS.  Eath and the Alpha Centauri
-# Colony have been omitted.
-# 
-# Some planets marked Class G and P here will be displayed as class M
-# because of the way planets are generated. This is a known bug.
-systnames = (
-    # Federation Worlds 
-    _("Andoria (Fesoan)"),	# several episodes 
-    _("Tellar Prime (Miracht)"),	# TOS: "Journey to Babel" 
-    _("Vulcan (T'Khasi)"),	# many episodes 
-    _("Medusa"),		# TOS: "Is There in Truth No Beauty?" 
-    _("Argelius II (Nelphia)"),# TOS: "Wolf in the Fold" ("IV" in BSD) 
-    _("Ardana"),		# TOS: "The Cloud Minders" 
-    _("Catulla (Cendo-Prae)"),	# TOS: "The Way to Eden" 
-    _("Gideon"),		# TOS: "The Mark of Gideon" 
-    _("Aldebaran III"),	# TOS: "The Deadly Years" 
-    _("Alpha Majoris I"),	# TOS: "Wolf in the Fold" 
-    _("Altair IV"),		# TOS: "Amok Time 
-    _("Ariannus"),		# TOS: "Let That Be Your Last Battlefield" 
-    _("Benecia"),		# TOS: "The Conscience of the King" 
-    _("Beta Niobe I (Sarpeidon)"),	# TOS: "All Our Yesterdays" 
-    _("Alpha Carinae II"),	# TOS: "The Ultimate Computer" 
-    _("Capella IV (Kohath)"),	# TOS: "Friday's Child" (Class G) 
-    _("Daran V"),		# TOS: "For the World is Hollow and I Have Touched the Sky" 
-    _("Deneb II"),		# TOS: "Wolf in the Fold" ("IV" in BSD) 
-    _("Eminiar VII"),		# TOS: "A Taste of Armageddon" 
-    _("Gamma Canaris IV"),	# TOS: "Metamorphosis" 
-    _("Gamma Tranguli VI (Vaalel)"),	# TOS: "The Apple" 
-    _("Ingraham B"),		# TOS: "Operation: Annihilate" 
-    _("Janus IV"),		# TOS: "The Devil in the Dark" 
-    _("Makus III"),		# TOS: "The Galileo Seven" 
-    _("Marcos XII"),		# TOS: "And the Children Shall Lead", 
-    _("Omega IV"),		# TOS: "The Omega Glory" 
-    _("Regulus V"),		# TOS: "Amok Time 
-    _("Deneva"),		# TOS: "Operation -- Annihilate!" 
-    # Worlds from BSD Trek 
-    _("Rigel II"),		# TOS: "Shore Leave" ("III" in BSD) 
-    _("Beta III"),		# TOS: "The Return of the Archons" 
-    _("Triacus"),		# TOS: "And the Children Shall Lead", 
-    _("Exo III"),		# TOS: "What Are Little Girls Made Of?" (Class P) 
-#	# Others 
-#    _("Hansen's Planet"),	# TOS: "The Galileo Seven" 
-#    _("Taurus IV"),		# TOS: "The Galileo Seven" (class G) 
-#    _("Antos IV (Doraphane)"),	# TOS: "Whom Gods Destroy", "Who Mourns for Adonais?" 
-#    _("Izar"),			# TOS: "Whom Gods Destroy" 
-#    _("Tiburon"),		# TOS: "The Way to Eden" 
-#    _("Merak II"),		# TOS: "The Cloud Minders" 
-#    _("Coridan (Desotriana)"),	# TOS: "Journey to Babel" 
-#    _("Iotia"),		# TOS: "A Piece of the Action" 
-)
-
-device = (
-	_("S. R. Sensors"), \
-	_("L. R. Sensors"), \
-	_("Phasers"), \
-	_("Photon Tubes"), \
-	_("Life Support"), \
-	_("Warp Engines"), \
-	_("Impulse Engines"), \
-	_("Shields"), \
-	_("Subspace Radio"), \
-	_("Shuttle Craft"), \
-	_("Computer"), \
-	_("Navigation System"), \
-	_("Transporter"), \
-	_("Shield Control"), \
-	_("Death Ray"), \
-	_("D. S. Probe"), \
-)
-
-def setup(needprompt):
-    # prepare to play, set up cosmos 
-    w = coord()
-    #  Decide how many of everything
-    if choose(needprompt):
-	return # frozen game
-    # Prepare the Enterprise
-    game.alldone = game.gamewon = False
-    game.ship = IHE
-    game.state.crew = FULLCREW
-    game.energy = game.inenrg = 5000.0
-    game.shield = game.inshld = 2500.0
-    game.shldchg = False
-    game.shldup = False
-    game.inlsr = 4.0
-    game.lsupres = 4.0
-    game.quadrant = randplace(GALSIZE)
-    game.sector = randplace(QUADSIZE)
-    game.torps = game.intorps = 10
-    game.nprobes = randrange(2, 5)
-    game.warpfac = 5.0
-    game.wfacsq = game.warpfac * game.warpfac
-    for i in range(NDEVICES): 
-	game.damage[i] = 0.0
-    # Set up assorted game parameters
-    game.battle = coord()
-    game.state.date = game.indate = 100.0 * randreal(20, 51)
-    game.nkinks = game.nhelp = game.casual = game.abandoned = 0
-    game.iscate = game.resting = game.imine = game.icrystl = game.icraft = False
-    game.isatb = game.state.nplankl = 0
-    game.state.starkl = game.state.basekl = 0
-    game.iscraft = "onship"
-    game.landed = False
-    game.alive = True
-    game.docfac = 0.25
-    for i in range(GALSIZE):
-	for j in range(GALSIZE):
-	    quad = game.state.galaxy[i][j]
-	    quad.charted = 0
-	    quad.planet = None
-	    quad.romulans = 0
-	    quad.klingons = 0
-	    quad.starbase = False
-	    quad.supernova = False
-	    quad.status = "secure"
-    # Initialize times for extraneous events
-    schedule(FSNOVA, expran(0.5 * game.intime))
-    schedule(FTBEAM, expran(1.5 * (game.intime / game.state.remcom)))
-    schedule(FSNAP, randreal(1.0, 2.0)) # Force an early snapshot
-    schedule(FBATTAK, expran(0.3*game.intime))
-    unschedule(FCDBAS)
-    if game.state.nscrem:
-	schedule(FSCMOVE, 0.2777)
-    else:
-	unschedule(FSCMOVE)
-    unschedule(FSCDBAS)
-    unschedule(FDSPROB)
-    if (game.options & OPTION_WORLDS) and game.skill >= SKILL_GOOD:
-	schedule(FDISTR, expran(1.0 + game.intime))
-    else:
-	unschedule(FDISTR)
-    unschedule(FENSLV)
-    unschedule(FREPRO)
-    # Starchart is functional but we've never seen it
-    game.lastchart = FOREVER
-    # Put stars in the galaxy
-    game.instar = 0
-    for i in range(GALSIZE):
-	for j in range(GALSIZE):
-	    k = randrange(1, QUADSIZE**2/10+1)
-	    game.instar += k
-	    game.state.galaxy[i][j].stars = k
-    # Locate star bases in galaxy
-    for i in range(game.inbase):
-        while True:
-            while True:
-                w = randplace(GALSIZE)
-                if not game.state.galaxy[w.x][w.y].starbase:
-                    break
-	    contflag = False
-            # C version: for (j = i-1; j > 0; j--)
-            # so it did them in the opposite order.
-            for j in range(1, i):
-		# Improved placement algorithm to spread out bases
-		distq = w.distance(game.state.baseq[j])
-		if distq < 6.0*(BASEMAX+1-game.inbase) and withprob(0.75):
-		    contflag = True
-		    if idebug:
-			prout("=== Abandoning base #%d at %s" % (i, w))
-		    break
-		elif distq < 6.0 * (BASEMAX+1-game.inbase):
-		    if idebug:
-			prout("=== Saving base #%d, close to #%d" % (i, j))
-            if not contflag:
-                break
-	game.state.baseq[i] = w
-	game.state.galaxy[w.x][w.y].starbase = True
-	game.state.chart[w.x][w.y].starbase = True
-    # Position ordinary Klingon Battle Cruisers
-    krem = game.inkling
-    klumper = 0.25*game.skill*(9.0-game.length)+1.0
-    if klumper > MAXKLQUAD: 
-	klumper = MAXKLQUAD
-    while True:
-	r = randreal()
-	klump = (1.0 - r*r)*klumper
-	if klump > krem:
-	    klump = krem
-	krem -= klump
-        while True:
-            w = randplace(GALSIZE)
-            if not game.state.galaxy[w.x][w.y].supernova and \
-               game.state.galaxy[w.x][w.y].klingons + klump <= MAXKLQUAD:
-                break
-	game.state.galaxy[w.x][w.y].klingons += int(klump)
-        if krem <= 0:
-            break
-    # Position Klingon Commander Ships
-    for i in range(1, game.incom+1):
-        while True:
-            w = randplace(GALSIZE)
-	    if (game.state.galaxy[w.x][w.y].klingons or withprob(0.25)) and \
-		   not game.state.galaxy[w.x][w.y].supernova and \
-		   game.state.galaxy[w.x][w.y].klingons <= MAXKLQUAD-1 and \
-                   not w in game.state.kcmdr[:i]:
-                break
-	game.state.galaxy[w.x][w.y].klingons += 1
-	game.state.kcmdr[i] = w
-    # Locate planets in galaxy
-    for i in range(game.inplan):
-        while True:
-            w = randplace(GALSIZE) 
-            if game.state.galaxy[w.x][w.y].planet == None:
-                break
-        new = planet()
-	new.w = w
-        new.crystals = "absent"
-	if (game.options & OPTION_WORLDS) and i < NINHAB:
-	    new.pclass = "M"	# All inhabited planets are class M
-	    new.crystals = "absent"
-	    new.known = "known"
-            new.name = systnames[i]
-	    new.inhabited = True
-	else:
-	    new.pclass = ("M", "N", "O")[randrange(0, 3)]
-            if withprob(0.33):
-                new.crystals = "present"
-	    new.known = "unknown"
-	    new.inhabited = False
-	game.state.galaxy[w.x][w.y].planet = new
-        game.state.planets.append(new)
-    # Locate Romulans
-    for i in range(game.state.nromrem):
-	w = randplace(GALSIZE)
-	game.state.galaxy[w.x][w.y].romulans += 1
-    # Locate the Super Commander
-    if game.state.nscrem > 0:
-        while True:
-            w = randplace(GALSIZE)
-            if not game.state.galaxy[w.x][w.y].supernova and game.state.galaxy[w.x][w.y].klingons <= MAXKLQUAD:
-                break
-	game.state.kscmdr = w
-	game.state.galaxy[w.x][w.y].klingons += 1
-    # Place thing (in tournament game, we don't want one!)
-    global thing
-    if game.tourn is None:
-        thing = randplace(GALSIZE)
-    skip(2)
-    game.state.snap = False
-    if game.skill == SKILL_NOVICE:
-	prout(_("It is stardate %d. The Federation is being attacked by") % int(game.state.date))
-	prout(_("a deadly Klingon invasion force. As captain of the United"))
-	prout(_("Starship U.S.S. Enterprise, it is your mission to seek out"))
-	prout(_("and destroy this invasion force of %d battle cruisers.") % ((game.inkling + game.incom + game.inscom)))
-	prout(_("You have an initial allotment of %d stardates to complete") % int(game.intime))
-	prout(_("your mission.  As you proceed you may be given more time."))
-	skip(1)
-	prout(_("You will have %d supporting starbases.") % (game.inbase))
-	proutn(_("Starbase locations-  "))
-    else:
-	prout(_("Stardate %d.") % int(game.state.date))
-	skip(1)
-	prout(_("%d Klingons.") % (game.inkling + game.incom + game.inscom))
-	prout(_("An unknown number of Romulans."))
-	if game.state.nscrem:
-	    prout(_("And one (GULP) Super-Commander."))
-	prout(_("%d stardates.") % int(game.intime))
-	proutn(_("%d starbases in ") % game.inbase)
-    for i in range(game.inbase):
-	proutn(`game.state.baseq[i]`)
-	proutn("  ")
-    skip(2)
-    proutn(_("The Enterprise is currently in Quadrant %s") % game.quadrant)
-    proutn(_(" Sector %s") % game.sector)
-    skip(2)
-    prout(_("Good Luck!"))
-    if game.state.nscrem:
-	prout(_("  YOU'LL NEED IT."))
-    waitfor()
-    newqad(False)
-    if len(game.enemies) - (thing == game.quadrant) - (game.tholian != None):
-	game.shldup = True
-    if game.neutz:	# bad luck to start in a Romulan Neutral Zone
-	attack(torps_ok=False)
-
-def choose(needprompt):
-    # choose your game type
-    global thing
-    while True:
-	game.tourn = 0
-	game.thawed = False
-	game.skill = SKILL_NONE
-	game.length = 0
-	if needprompt: # Can start with command line options 
-	    proutn(_("Would you like a regular, tournament, or saved game? "))
-	scan()
-	if len(citem)==0: # Try again
-	    continue
-        if isit("tournament"):
-	    while scan() == IHEOL:
-		proutn(_("Type in tournament number-"))
-	    if aaitem == 0:
-		chew()
-		continue # We don't want a blank entry
-	    game.tourn = int(round(aaitem))
-	    random.seed(aaitem)
-            if logfp:
-                logfp.write("# random.seed(%d)\n" % aaitem)
-	    break
-        if isit("saved") or isit("frozen"):
-	    if thaw():
-		continue
-	    chew()
-	    if game.passwd == None:
-		continue
-	    if not game.alldone:
-		game.thawed = True # No plaque if not finished
-	    report()
-	    waitfor()
-	    return True
-        if isit("regular"):
-	    break
-	proutn(_("What is \"%s\"?"), citem)
-	chew()
-    while game.length==0 or game.skill==SKILL_NONE:
-	if scan() == IHALPHA:
-            if isit("short"):
-		game.length = 1
-	    elif isit("medium"):
-		game.length = 2
-	    elif isit("long"):
-		game.length = 4
-	    elif isit("novice"):
-		game.skill = SKILL_NOVICE
-	    elif isit("fair"):
-		game.skill = SKILL_FAIR
-	    elif isit("good"):
-		game.skill = SKILL_GOOD
-	    elif isit("expert"):
-		game.skill = SKILL_EXPERT
-	    elif isit("emeritus"):
-		game.skill = SKILL_EMERITUS
-	    else:
-		proutn(_("What is \""))
-		proutn(citem)
-		prout("\"?")
-	else:
-	    chew()
-	    if game.length==0:
-		proutn(_("Would you like a Short, Medium, or Long game? "))
-	    elif game.skill == SKILL_NONE:
-		proutn(_("Are you a Novice, Fair, Good, Expert, or Emeritus player? "))
-    # Choose game options -- added by ESR for SST2K
-    if scan() != IHALPHA:
-	chew()
-	proutn(_("Choose your game style (or just press enter): "))
-	scan()
-    if isit("plain"):
-	# Approximates the UT FORTRAN version.
-	game.options &=~ (OPTION_THOLIAN | OPTION_PLANETS | OPTION_THINGY | OPTION_PROBE | OPTION_RAMMING | OPTION_MVBADDY | OPTION_BLKHOLE | OPTION_BASE | OPTION_WORLDS)
-	game.options |= OPTION_PLAIN
-    elif isit("almy"):
-	# Approximates Tom Almy's version.
-	game.options &=~ (OPTION_THINGY | OPTION_BLKHOLE | OPTION_BASE | OPTION_WORLDS)
-	game.options |= OPTION_ALMY
-    elif isit("fancy"):
-	pass
-    elif len(citem):
-        proutn(_("What is \"%s\"?") % citem)
-    setpassword()
-    if game.passwd == "debug":
-	idebug = True
-	fputs("=== Debug mode enabled\n", sys.stdout)
-
-    # Use parameters to generate initial values of things
-    game.damfac = 0.5 * game.skill
-    game.state.rembase = randrange(BASEMIN, BASEMAX+1)
-    game.inbase = game.state.rembase
-    game.inplan = 0
-    if game.options & OPTION_PLANETS:
-	game.inplan += randrange(MAXUNINHAB/2, MAXUNINHAB+1)
-    if game.options & OPTION_WORLDS:
-	game.inplan += int(NINHAB)
-    game.state.nromrem = game.inrom = randrange(2 *game.skill)
-    game.state.nscrem = game.inscom = (game.skill > SKILL_FAIR)
-    game.state.remtime = 7.0 * game.length
-    game.intime = game.state.remtime
-    game.state.remkl = game.inkling = 2.0*game.intime*((game.skill+1 - 2*randreal())*game.skill*0.1+.15)
-    game.incom = int(game.skill + 0.0625*game.inkling*randreal())
-    game.state.remcom = min(10, game.incom)
-    game.incom = game.state.remcom
-    game.state.remres = (game.inkling+4*game.incom)*game.intime
-    game.inresor = game.state.remres
-    if game.inkling > 50:
-        game.state.rembase += 1
-	game.inbase = game.state.rembase
-    return False
-
-def dropin(iquad=None):
-    # drop a feature on a random dot in the current quadrant 
-    w = coord()
-    while True:
-        w = randplace(QUADSIZE)
-        if game.quad[w.x][w.y] == IHDOT:
-            break
-    if iquad is not None:
-        game.quad[w.x][w.y] = iquad
-    return w
-
-def newcnd():
-    # update our alert status 
-    game.condition = "green"
-    if game.energy < 1000.0:
-	game.condition = "yellow"
-    if game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons or game.state.galaxy[game.quadrant.x][game.quadrant.y].romulans:
-	game.condition = "red"
-    if not game.alive:
-	game.condition="dead"
-
-def newkling():
-    # drop new Klingon into current quadrant
-    return enemy(IHK, loc=dropin(), power=randreal(300,450)+25.0*game.skill)
-
-def newqad(shutup):
-    # set up a new state of quadrant, for when we enter or re-enter it 
-    w = coord()
-    game.justin = True
-    game.klhere = 0
-    game.comhere = False
-    game.ishere = False
-    game.irhere = 0
-    game.iplnet = 0
-    game.neutz = False
-    game.inorbit = False
-    game.landed = False
-    game.ientesc = False
-    game.iseenit = False
-    # Create a blank quadrant
-    game.quad = fill2d(QUADSIZE, lambda i, j: IHDOT)
-    if game.iscate:
-	# Attempt to escape Super-commander, so tbeam back!
-	game.iscate = False
-	game.ientesc = True
-    q = game.state.galaxy[game.quadrant.x][game.quadrant.y]
-    # cope with supernova
-    if q.supernova:
-	return
-    game.klhere = q.klingons
-    game.irhere = q.romulans
-    # Position Starship
-    game.quad[game.sector.x][game.sector.y] = game.ship
-    game.enemies = []
-    if q.klingons:
-	# Position ordinary Klingons
-	for i in range(game.klhere):
-            newkling()
-	# If we need a commander, promote a Klingon
-	for i in range(game.state.remcom):
-	    if game.state.kcmdr[i] == game.quadrant:
-                e = game.enemies[game.klhere-1]
-                game.quad[e.kloc.x][e.kloc.y] = IHC
-                e.kpower = randreal(950,1350) + 50.0*game.skill
-                game.comhere = True
-		break	
-	# If we need a super-commander, promote a Klingon
-	if game.quadrant == game.state.kscmdr:
-            e = game.enemies[0]
-	    game.quad[e.kloc.x][e.kloc.y] = IHS
-	    e.kpower = randreal(1175.0,  1575.0) + 125.0*game.skill
-	    game.iscate = (game.state.remkl > 1)
-	    game.ishere = True
-    # Put in Romulans if needed
-    for i in range(game.klhere, len(game.enemies)):
-        enemy(IHR, loc=dropin(), power=randreal(400.0,850.0)+50.0*game.skill)
-    # If quadrant needs a starbase, put it in
-    if q.starbase:
-	game.base = dropin(IHB)
-    # If quadrant needs a planet, put it in
-    if q.planet:
-	game.iplnet = q.planet
-	if not q.planet.inhabited:
-	    game.plnet = dropin(IHP)
-	else:
-	    game.plnet = dropin(IHW)
-    # Check for condition
-    newcnd()
-    # Check for RNZ
-    if game.irhere > 0 and game.klhere == 0:
-	game.neutz = True
-	if not damaged(DRADIO):
-	    skip(1)
-	    prout(_("LT. Uhura- \"Captain, an urgent message."))
-	    prout(_("  I'll put it on audio.\"  CLICK"))
-	    skip(1)
-	    prout(_("INTRUDER! YOU HAVE VIOLATED THE ROMULAN NEUTRAL ZONE."))
-	    prout(_("LEAVE AT ONCE, OR YOU WILL BE DESTROYED!"))
-    if shutup==0:
-	# Put in THING if needed
-	if thing == game.quadrant:
-	    enemy(type=IHQUEST, loc=dropin(),
-                      power=randreal(6000,6500.0)+250.0*game.skill)
-	    if not damaged(DSRSENS):
-		skip(1)
-		prout(_("Mr. Spock- \"Captain, this is most unusual."))
-		prout(_("    Please examine your short-range scan.\""))
-    # Decide if quadrant needs a Tholian; lighten up if skill is low 
-    if game.options & OPTION_THOLIAN:
-	if (game.skill < SKILL_GOOD and withprob(0.02)) or \
-	    (game.skill == SKILL_GOOD and withprob(0.05)) or \
-            (game.skill > SKILL_GOOD and withprob(0.08)):
-            w = coord()
-            while True:
-		w.x = withprob(0.5) * (QUADSIZE-1)
-		w.y = withprob(0.5) * (QUADSIZE-1)
-                if game.quad[w.x][w.y] == IHDOT:
-                    break
-            game.tholian = enemy(type=IHT, loc=w,
-                                 power=randrange(100, 500) + 25.0*game.skill)
-	    # Reserve unoccupied corners 
-	    if game.quad[0][0]==IHDOT:
-		game.quad[0][0] = 'X'
-	    if game.quad[0][QUADSIZE-1]==IHDOT:
-		game.quad[0][QUADSIZE-1] = 'X'
-	    if game.quad[QUADSIZE-1][0]==IHDOT:
-		game.quad[QUADSIZE-1][0] = 'X'
-	    if game.quad[QUADSIZE-1][QUADSIZE-1]==IHDOT:
-		game.quad[QUADSIZE-1][QUADSIZE-1] = 'X'
-    game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
-    # And finally the stars
-    for i in range(q.stars):
-	dropin(IHSTAR)
-    # Put in a few black holes
-    for i in range(1, 3+1):
-	if withprob(0.5): 
-	    dropin(IHBLANK)
-    # Take out X's in corners if Tholian present
-    if game.tholian:
-	if game.quad[0][0]=='X':
-	    game.quad[0][0] = IHDOT
-	if game.quad[0][QUADSIZE-1]=='X':
-	    game.quad[0][QUADSIZE-1] = IHDOT
-	if game.quad[QUADSIZE-1][0]=='X':
-	    game.quad[QUADSIZE-1][0] = IHDOT
-	if game.quad[QUADSIZE-1][QUADSIZE-1]=='X':
-	    game.quad[QUADSIZE-1][QUADSIZE-1] = IHDOT
-
-def setpassword():
-    # set the self-destruct password 
-    if game.options & OPTION_PLAIN:
-	while True:
-	    chew()
-	    proutn(_("Please type in a secret password- "))
-	    scan()
-	    game.passwd = citem
-	    if game.passwd != None:
-		break
-    else:
-        game.passwd = ""
-        for i in range(3):
-	    game.passwd += chr(ord('a')+randrange(26))
-
-# Code from sst.c begins here
-
-commands = {
-    "SRSCAN":   	OPTION_TTY,
-    "STATUS":   	OPTION_TTY,
-    "REQUEST":  	OPTION_TTY,
-    "LRSCAN":   	OPTION_TTY,
-    "PHASERS":  	0,
-    "TORPEDO":  	0,
-    "PHOTONS":  	0,
-    "MOVE":     	0,
-    "SHIELDS":   	0,
-    "DOCK":     	0,
-    "DAMAGES":   	0,
-    "CHART":    	0,
-    "IMPULSE":  	0,
-    "REST":     	0,
-    "WARP":     	0,
-    "SCORE":    	0,
-    "SENSORS":  	OPTION_PLANETS,
-    "ORBIT":		OPTION_PLANETS,
-    "TRANSPORT":	OPTION_PLANETS,
-    "MINE":		OPTION_PLANETS,
-    "CRYSTALS":  	OPTION_PLANETS,
-    "SHUTTLE":  	OPTION_PLANETS,
-    "PLANETS":  	OPTION_PLANETS,
-    "REPORT":   	0,
-    "COMPUTER": 	0,
-    "COMMANDS": 	0,
-    "EMEXIT":		0,
-    "PROBE":		OPTION_PROBE,
-    "SAVE":		0,
-    "FREEZE":		0,	# Synonym for SAVE
-    "ABANDON":  	0,
-    "DESTRUCT": 	0,
-    "DEATHRAY": 	0,
-    "DEBUG":    	0,
-    "MAYDAY":		0,
-    "SOS":		0,	# Synonym for MAYDAY
-    "CALL":		0,	# Synonym for MAYDAY
-    "QUIT":		0,
-    "HELP":		0,
-    "SEED":		0,
-    "VISUAL":		0,
-}
-
-def ACCEPT(cmd):	return (not commands[cmd] or (commands[cmd] & game.options))
-
-def listCommands():
-    # generate a list of legal commands 
-    k = 0
-    proutn(_("LEGAL COMMANDS ARE:"))
-    for key in commands:
-	if ACCEPT(key):
-            if k % 5 == 0:
-                skip(1)
-            proutn("%-12s " % key) 
-            k += 1
-    skip(1)
-
-def helpme():
-    # browse on-line help 
-    # Give help on commands 
-    key = scan()
-    while True:
-	if key == IHEOL:
-	    setwnd(prompt_window)
-	    proutn(_("Help on what command? "))
-	    key = scan()
-	setwnd(message_window)
-	if key == IHEOL:
-	    return
-        if citem in commands or citem == "ABBREV":
-	    break
-	skip(1)
-	listCommands()
-	key = IHEOL
-	chew()
-	skip(1)
-    cmd = citem.upper()
-    try:
-        fp = open(SSTDOC, "r")
-    except IOError:
-        try:
-            fp = open(DOC_NAME, "r")
-        except IOError:
-            prout(_("Spock-  \"Captain, that information is missing from the"))
-            proutn(_("   computer. You need to find "))
-            proutn(DOC_NAME)
-            prout(_(" and put it in the"))
-            proutn(_("   current directory or to "))
-            proutn(SSTDOC)
-            prout(".\"")
-            #
-            # This used to continue: "You need to find SST.DOC and put 
-            # it in the current directory."
-            # 
-            return
-    while True:
-        linebuf = fp.readline()
-	if linebuf == '':
-	    prout(_("Spock- \"Captain, there is no information on that command.\""))
-	    fp.close()
-	    return
-	if linebuf[0] == '%' and linebuf[1] == '%' and linebuf[2] == ' ':
-            linebuf = linebuf[3:].strip()
-            if cmd == linebuf:
-		break
-    skip(1)
-    prout(_("Spock- \"Captain, I've found the following information:\""))
-    skip(1)
-    while linebuf in fp:
-        if "******" in linebuf:
-	    break
-	proutn(linebuf)
-    fp.close()
-
-def makemoves():
-    # command-interpretation loop 
-    v = 0
-    clrscr()
-    setwnd(message_window)
-    while True: 	# command loop 
-	drawmaps(1)
-        while True:	# get a command 
-	    hitme = False
-	    game.justin = False
-	    game.optime = 0.0
-	    chew()
-	    setwnd(prompt_window)
-	    clrscr()
-	    proutn("COMMAND> ")
-	    if scan() == IHEOL:
-		if game.options & OPTION_CURSES:
-		    makechart()
-		continue
-	    game.ididit = False
-	    clrscr()
-	    setwnd(message_window)
-	    clrscr()
-            candidates = filter(lambda x: x.startswith(citem.upper()),
-                                commands)
-            if len(candidates) == 1:
-                cmd = candidates[0]
-                break
-            elif candidates and not (game.options & OPTION_PLAIN):
-                prout("Commands with that prefix: " + " ".join(candidates))
-            else:
-                listCommands()
-                continue
-	if cmd == "SRSCAN":		# srscan
-	    srscan()
-	elif cmd == "STATUS":		# status
-	    status()
-	elif cmd == "REQUEST":		# status request 
-	    request()
-	elif cmd == "LRSCAN":		# long range scan
-	    lrscan(silent=False)
-	elif cmd == "PHASERS":		# phasers
-	    phasers()
-	    if game.ididit:
-		hitme = True
-	elif cmd == "TORPEDO":		# photon torpedos
-	    photon()
-	    if game.ididit:
-		hitme = True
-	elif cmd == "MOVE":		# move under warp
-	    warp(False)
-	elif cmd == "SHIELDS":		# shields
-	    doshield(shraise=False)
-	    if game.ididit:
-		hitme = True
-		game.shldchg = False
-	elif cmd == "DOCK":		# dock at starbase
-	    dock(True)
-	    if game.ididit:
-		attack(torps_ok=False)		
-	elif cmd == "DAMAGES":		# damage reports
-	    damagereport()
-	elif cmd == "CHART":		# chart
-	    makechart()
-	elif cmd == "IMPULSE":		# impulse
-	    impulse()
-	elif cmd == "REST":		# rest
-	    os.wait()
-	    if game.ididit:
-		hitme = True
-	elif cmd == "WARP":		# warp
-	    setwarp()
-	elif cmd == "SCORE":		# score
-	    score()
-	elif cmd == "SENSORS":		# sensors
-	    sensor()
-	elif cmd == "ORBIT":		# orbit
-	    orbit()
-	    if game.ididit:
-		hitme = True
-	elif cmd == "TRANSPORT":		# transport "beam"
-	    beam()
-	elif cmd == "MINE":		# mine
-	    mine()
-	    if game.ididit:
-		hitme = True
-	elif cmd == "CRYSTALS":		# crystals
-	    usecrystals()
-	    if game.ididit:
-		hitme = True
-	elif cmd == "SHUTTLE":		# shuttle
-	    shuttle()
-	    if game.ididit:
-		hitme = True
-	elif cmd == "PLANETS":		# Planet list
-	    survey()
-	elif cmd == "REPORT":		# Game Report 
-	    report()
-	elif cmd == "COMPUTER":		# use COMPUTER!
-	    eta()
-	elif cmd == "COMMANDS":
-	    listCommands()
-	elif cmd == "EMEXIT":		# Emergency exit
-	    clrscr()			# Hide screen
-	    freeze(True)		# forced save
-	    raise SysExit,1			# And quick exit
-	elif cmd == "PROBE":
-	    probe()			# Launch probe
-	    if game.ididit:
-		hitme = True
-	elif cmd == "ABANDON":		# Abandon Ship
-	    abandon()
-	elif cmd == "DESTRUCT":		# Self Destruct
-	    selfdestruct()
-	elif cmd == "SAVE":		# Save Game
-	    freeze(False)
-	    clrscr()
-	    if game.skill > SKILL_GOOD:
-		prout(_("WARNING--Saved games produce no plaques!"))
-	elif cmd == "DEATHRAY":		# Try a desparation measure
-	    deathray()
-	    if game.ididit:
-		hitme = True
-	elif cmd == "DEBUGCMD":		# What do we want for debug???
-	    debugme()
-	elif cmd == "MAYDAY":		# Call for help
-	    mayday()
-	    if game.ididit:
-		hitme = True
-	elif cmd == "QUIT":
-	    game.alldone = True		# quit the game
-	elif cmd == "HELP":
-	    helpme()			# get help
-	while True:
-	    if game.alldone:
-		break		# Game has ended
-	    if game.optime != 0.0:
-		events()
-		if game.alldone:
-		    break	# Events did us in
-	    if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
-		atover(False)
-		continue
-	    if hitme and not game.justin:
-		attack(torps_ok=True)
-		if game.alldone:
-		    break
-		if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
-		    atover(False)
-		    hitme = True
-		    continue
-	    break
-	if game.alldone:
-	    break
-    if idebug:
-	prout("=== Ending")
-
-def cramen(cmd):
-    # return an enemy 
-    if   cmd == IHR: s = _("Romulan")
-    elif cmd == IHK: s = _("Klingon")
-    elif cmd == IHC: s = _("Commander")
-    elif cmd == IHS: s = _("Super-commander")
-    elif cmd == IHSTAR: s = _("Star")
-    elif cmd == IHP: s = _("Planet")
-    elif cmd == IHB: s = _("Starbase")
-    elif cmd == IHBLANK: s = _("Black hole")
-    elif cmd == IHT: s = _("Tholian")
-    elif cmd == IHWEB: s = _("Tholian web")
-    elif cmd == IHQUEST: s = _("Stranger")
-    elif cmd == IHW: s = _("Inhabited World")
-    else: s = "Unknown??"
-    proutn(s)
-
-def crmena(stars, enemy, loctype, w):
-    # print an enemy and his location 
-    if stars:
-	proutn("***")
-    cramen(enemy)
-    proutn(_(" at "))
-    buf = ""
-    if loctype == "quadrant":
-	buf = _("Quadrant ")
-    elif loctype == "sector":
-	buf = _("Sector ")
-    proutn(buf + `w`)
-
-def crmshp():
-    # print our ship name 
-    if game.ship == IHE:
-        s = _("Enterprise")
-    elif game.ship == IHF:
-        s = _("Faerie Queene")
-    else:
-        s = "Ship???"
-    proutn(s)
-
-def stars():
-    # print a line of stars 
-    prouts("******************************************************")
-    skip(1)
-
-def expran(avrage):
-    return -avrage*math.log(1e-7 + randreal())
-
-def randplace(size):
-    # choose a random location  
-    w = coord()
-    w.x = randrange(size) 
-    w.y = randrange(size)
-    return w
-
-def chew():
-    # Demand input for next scan
-    global inqueue
-    inqueue = None
-
-def chew2():
-    # return IHEOL next time 
-    global inqueue
-    inqueue = []
-
-def scan():
-    # Get a token from the user
-    global inqueue, line, citem, aaitem
-    aaitem = 0.0
-    citem = ''
-
-    # Read a line if nothing here
-    if inqueue == None:
-	line = cgetline()
-	if curwnd==prompt_window:
-	    clrscr()
-	    setwnd(message_window)
-	    clrscr()
-        # Skip leading white space
-        line = line.lstrip()
-        if line:
-            inqueue = line.split()
-        else:
-            inqueue = []
-            return IHEOL
-    elif not inqueue:
-        return IHEOL
-    # From here on in it's all looking at the queue
-    citem = inqueue.pop(0)
-    if citem == IHEOL:
-        return IHEOL
-    try:
-        aaitem = float(citem)
-        return IHREAL
-    except ValueError:
-        pass
-    # Treat as alpha
-    citem = citem.lower()
-    return IHALPHA
-
-def ja():
-    # yes-or-no confirmation 
-    chew()
-    while True:
-	scan()
-	chew()
-	if citem == 'y':
-	    return True
-	if citem == 'n':
-	    return False
-	proutn(_("Please answer with \"y\" or \"n\": "))
-
-def huh():
-    # complain about unparseable input 
-    chew()
-    skip(1)
-    prout(_("Beg your pardon, Captain?"))
-
-def isit(s):
-    # compares s to citem and returns true if it matches to the length of s
-    return s.startswith(citem)
-
-def debugme():
-    # access to the internals for debugging 
-    proutn("Reset levels? ")
-    if ja() == True:
-	if game.energy < game.inenrg:
-	    game.energy = game.inenrg
-	game.shield = game.inshld
-	game.torps = game.intorps
-	game.lsupres = game.inlsr
-    proutn("Reset damage? ")
-    if ja() == True:
-	for i in range(NDEVICES): 
-	    if game.damage[i] > 0.0: 
-		game.damage[i] = 0.0
-    proutn("Toggle debug flag? ")
-    if ja() == True:
-	idebug = not idebug
-	if idebug:
-	    prout("Debug output ON")	    
-	else:
-	    prout("Debug output OFF")
-    proutn("Cause selective damage? ")
-    if ja() == True:
-	for i in range(NDEVICES):
-	    proutn("Kill ")
-	    proutn(device[i])
-	    proutn("? ")
-	    chew()
-	    key = scan()
-            if key == IHALPHA and isit("y"):
-		game.damage[i] = 10.0
-    proutn("Examine/change events? ")
-    if ja() == True:
-	ev = event()
-	w = coord()
-        legends = {
-            FSNOVA:  "Supernova       ",
-            FTBEAM:  "T Beam          ",
-            FSNAP:   "Snapshot        ",
-            FBATTAK: "Base Attack     ",
-            FCDBAS:  "Base Destroy    ",
-            FSCMOVE: "SC Move         ",
-            FSCDBAS: "SC Base Destroy ",
-            FDSPROB: "Probe Move      ",
-            FDISTR:  "Distress Call   ",
-            FENSLV:  "Enslavement     ",
-            FREPRO:  "Klingon Build   ",
-        }
-	for i in range(1, NEVENTS):
-            proutn(legends[i])
-	    if is_scheduled(i):
-		proutn("%.2f" % (scheduled(i)-game.state.date))
-		if i == FENSLV or i == FREPRO:
-		    ev = findevent(i)
-		    proutn(" in %s" % ev.quadrant)
-	    else:
-		proutn("never")
-	    proutn("? ")
-	    chew()
-	    key = scan()
-	    if key == 'n':
-		unschedule(i)
-		chew()
-	    elif key == IHREAL:
-		ev = schedule(i, aaitem)
-		if i == FENSLV or i == FREPRO:
-		    chew()
-		    proutn("In quadrant- ")
-		    key = scan()
-		    # IHEOL says to leave coordinates as they are 
-		    if key != IHEOL:
-			if key != IHREAL:
-			    prout("Event %d canceled, no x coordinate." % (i))
-			    unschedule(i)
-			    continue
-			w.x = int(round(aaitem))
-			key = scan()
-			if key != IHREAL:
-			    prout("Event %d canceled, no y coordinate." % (i))
-			    unschedule(i)
-			    continue
-			w.y = int(round(aaitem))
-			ev.quadrant = w
-	chew()
-    proutn("Induce supernova here? ")
-    if ja() == True:
-	game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova = True
-	atover(True)
-
-if __name__ == '__main__':
-    try:
-        global line, thing, game, idebug
-        game = citem = aaitem = inqueue = None
-        line = ''
-        thing = coord()
-        thing.angry = False
-        game = gamestate()
-        idebug = 0
-        game.options = OPTION_ALL &~ (OPTION_IOMODES | OPTION_PLAIN | OPTION_ALMY)
-        # Disable curses mode until the game logic is working.
-        #    if os.getenv("TERM"):
-        #	game.options |= OPTION_CURSES | OPTION_SHOWME
-        #    else:
-        game.options |= OPTION_TTY
-        seed = int(time.time())
-        (options, arguments) = getopt.getopt(sys.argv[1:], "r:tx")
-        for (switch, val) in options:
-            if switch == '-r':
-                try:
-                    replayfp = open(val, "r")
-                except IOError:
-                    sys.stderr.write("sst: can't open replay file %s\n" % val)
-                    raise SystemExit, 1
-                try:
-                    line = replayfp.readline().strip()
-                    (leader, key, seed) = line.split()
-                    seed = eval(seed)
-                    sys.stderr.write("sst2k: seed set to %s\n" % seed)
-                    line = replayfp.readline().strip()
-                    arguments += line.split()[2:]
-                except ValueError:
-                    sys.stderr.write("sst: replay file %s is ill-formed\n"% val)
-                    raise SystemExit(1)
-                game.options |= OPTION_TTY
-                game.options &=~ OPTION_CURSES
-            elif switch == '-t':
-                game.options |= OPTION_TTY
-                game.options &=~ OPTION_CURSES
-            elif switch == '-x':
-                idebug = True
-            else:
-                sys.stderr.write("usage: sst [-t] [-x] [startcommand...].\n")
-                raise SystemExit, 1
-        # where to save the input in case of bugs
-        try:
-            logfp = open("/usr/tmp/sst-input.log", "w")
-        except IOError:
-            sys.stderr.write("sst: warning, can't open logfile\n")
-        if logfp:
-            logfp.write("# seed %s\n" % seed)
-            logfp.write("# options %s\n" % " ".join(arguments))
-        random.seed(seed)
-        if arguments:
-            inqueue = arguments
-        else:
-            inqueue = None
-        try:
-            iostart()
-            while True: # Play a game 
-                setwnd(fullscreen_window)
-                clrscr()
-                prelim()
-                setup(needprompt=not inqueue)
-                if game.alldone:
-                    score()
-                    game.alldone = False
-                else:
-                    makemoves()
-                skip(1)
-                stars()
-                skip(1)
-                if game.tourn and game.alldone:
-                    proutn(_("Do you want your score recorded?"))
-                    if ja() == True:
-                        chew2()
-                        freeze(False)
-                chew()
-                proutn(_("Do you want to play again? "))
-                if not ja():
-                    break
-            skip(1)
-            prout(_("May the Great Bird of the Galaxy roost upon your home planet."))
-        finally:
-            ioend()
-        raise SystemExit, 0
-    except KeyboardInterrupt:
-        print""
-        pass



From esr at mail.berlios.de  Sun Oct  8 04:56:00 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sun, 8 Oct 2006 04:56:00 +0200
Subject: [Sst-commit-watch] r703 - trunk/src
Message-ID: <200610080256.k982u0a4022125@sheep.berlios.de>

Author: esr
Date: 2006-10-08 04:56:00 +0200 (Sun, 08 Oct 2006)
New Revision: 703

Modified:
   trunk/src/sst.py
Log:
Fix Tholian motion.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-07 08:35:56 UTC (rev 702)
+++ trunk/src/sst.py	2006-10-08 02:56:00 UTC (rev 703)
@@ -248,7 +248,7 @@
     def __add__(self, other):
         return coord(self.x+self.x, self.y+self.y)
     def __sub__(self, other):
-        return coord(self.x-self.x, self.y-self.y)
+        return coord(self.x-other.x, self.y-other.y)
     def distance(self, other):
         return math.sqrt((self.x - other.x)**2 + (self.y - other.y)**2)
     def sgn(self):
@@ -427,13 +427,17 @@
     def move(self, loc):
         motion = (loc != self.kloc)
         if self.kloc.x is not None and self.kloc.y is not None:
-            game.quad[self.kloc.x][self.kloc.y] = IHDOT
+            if motion:
+                if self.type == IHT:
+                    game.quad[self.kloc.x][self.kloc.y] = IHWEB
+                else:
+                    game.quad[self.kloc.x][self.kloc.y] = IHDOT
         if loc:
-            self.kloc = loc
+            self.kloc = copy.copy(loc)
             game.quad[self.kloc.x][self.kloc.y] = self.type
             self.kdist = self.kavgd = distance(game.sector, loc)
         else:
-            self.kloc = coord()	# enemy sector location
+            self.kloc = coord()
             self.kdist = self.kavgd = None
             game.enemies.remove(self)
         return motion
@@ -1043,41 +1047,40 @@
     return
 
 def movetholian():
-    # move the Tholian 
+    # move the Tholian
     if not game.tholian or game.justin:
 	return
+    id = coord()
     if game.tholian.kloc.x == 0 and game.tholian.kloc.y == 0:
-	idx = 0; idy = QUADSIZE-1
+	id.x = 0; id.y = QUADSIZE-1
     elif game.tholian.kloc.x == 0 and game.tholian.kloc.y == QUADSIZE-1:
-	idx = QUADSIZE-1; idy = QUADSIZE-1
+	id.x = QUADSIZE-1; id.y = QUADSIZE-1
     elif game.tholian.kloc.x == QUADSIZE-1 and game.tholian.kloc.y == QUADSIZE-1:
-	idx = QUADSIZE-1; idy = 0
+	id.x = QUADSIZE-1; id.y = 0
     elif game.tholian.kloc.x == QUADSIZE-1 and game.tholian.kloc.y == 0:
-	idx = 0; idy = 0
+	id.x = 0; id.y = 0
     else:
 	# something is wrong! 
-	game.tholian = None
+	game.tholian.move(None)
+        prout("***Internal error: Tholian in a bad spot.")
 	return
     # do nothing if we are blocked 
-    if game.quad[idx][idy]!= IHDOT and game.quad[idx][idy]!= IHWEB:
+    if game.quad[id.x][id.y] not in (IHDOT, IHWEB):
 	return
-    game.quad[game.tholian.kloc.x][game.tholian.kloc.y] = IHWEB
-    if game.tholian.kloc.x != idx:
-	# move in x axis 
-	im = math.fabs(idx - game.tholian.kloc.x)*1.0/(idx - game.tholian.kloc.x)
-	while game.tholian.kloc.x != idx:
-	    game.tholian.kloc.x += im
-	    if game.quad[game.tholian.kloc.x][game.tholian.kloc.y]==IHDOT:
-		game.quad[game.tholian.kloc.x][game.tholian.kloc.y] = IHWEB
-    elif game.tholian.kloc.y != idy:
-	# move in y axis 
-	im = math.fabs(idy - game.tholian.kloc.y)*1.0/(idy - game.tholian.kloc.y)
-	while game.tholian.kloc.y != idy:
-	    game.tholian.kloc.y += im
-	    if game.quad[game.tholian.kloc.x][game.tholian.kloc.y]==IHDOT:
-		game.quad[game.tholian.kloc.x][game.tholian.kloc.y] = IHWEB
-    game.quad[game.tholian.kloc.x][game.tholian.kloc.y] = IHT
-    #game.enemies[-1].kloc = game.tholian	#FIXME
+    here = copy.copy(game.tholian.kloc)
+    delta = (id - game.tholian.kloc).sgn()
+    # move in x axis 
+    while here.x != id.x:
+        #print "Moving in X", delta
+        here.x += delta.x
+        if game.quad[here.kloc.x][here.y]==IHDOT:
+            game.tholian.move(here)
+    # move in y axis 
+    while here.y != id.y:
+        #print "Moving in Y", delta
+        here.y += delta.y
+        if game.quad[here.x][here.y]==IHDOT:
+            game.tholian.move(here)
     # check to see if all holes plugged 
     for i in range(QUADSIZE):
 	if game.quad[0][i]!=IHWEB and game.quad[0][i]!=IHT:
@@ -1094,6 +1097,7 @@
     crmena(True, IHT, "sector", game.tholian)
     prout(_(" completes web."))
     game.tholian.move(None)
+    print "Tholian movement ends"
     return
 
 # Code from battle.c begins here
@@ -1995,7 +1999,7 @@
     automode = "NOTSET"
     key=0
     skip(1)
-    # SR sensors and Computer are needed fopr automode 
+    # SR sensors and Computer are needed for automode 
     if damaged(DSRSENS) or damaged(DCOMPTR):
 	itarg = False
     if game.condition == "docked":
@@ -2156,8 +2160,8 @@
 		skip(1)
 		msgflag = False
 		rpow = 0.0
-	    if damaged(DSRSENS) and not (abs(game.sector.x-aim.x) < 2 and abs(game.sector.y-aim.y) < 2) and \
-		(ienm == IHC or ienm == IHS):
+	    if damaged(DSRSENS) and \
+               not game.sector.distance(aim)<2**0.5 and ienm in (IHC, IHS):
 		cramen(ienm)
 		prout(_(" can't be located without short range scan."))
 		chew()
@@ -5959,7 +5963,7 @@
 	game.length = 0
 	if needprompt: # Can start with command line options 
 	    proutn(_("Would you like a regular, tournament, or saved game? "))
-	scan()
+        print "About to call scan()"
 	if len(citem)==0: # Try again
 	    continue
         if isit("tournament"):
@@ -6409,7 +6413,7 @@
 	elif cmd == "IMPULSE":		# impulse
 	    impulse()
 	elif cmd == "REST":		# rest
-	    os.wait()
+	    wait()
 	    if game.ididit:
 		hitme = True
 	elif cmd == "WARP":		# warp



From esr at mail.berlios.de  Sun Oct  8 07:49:11 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sun, 8 Oct 2006 07:49:11 +0200
Subject: [Sst-commit-watch] r704 - trunk/src
Message-ID: <200610080549.k985nBnY006501@sheep.berlios.de>

Author: esr
Date: 2006-10-08 07:49:11 +0200 (Sun, 08 Oct 2006)
New Revision: 704

Modified:
   trunk/src/sst.py
Log:
Oops -- fix a typo that broke the scanner.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-08 02:56:00 UTC (rev 703)
+++ trunk/src/sst.py	2006-10-08 05:49:11 UTC (rev 704)
@@ -5963,7 +5963,7 @@
 	game.length = 0
 	if needprompt: # Can start with command line options 
 	    proutn(_("Would you like a regular, tournament, or saved game? "))
-        print "About to call scan()"
+        scan()
 	if len(citem)==0: # Try again
 	    continue
         if isit("tournament"):



From esr at mail.berlios.de  Sun Oct  8 08:19:29 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sun, 8 Oct 2006 08:19:29 +0200
Subject: [Sst-commit-watch] r705 - trunk/src
Message-ID: <200610080619.k986JTXw009174@sheep.berlios.de>

Author: esr
Date: 2006-10-08 08:19:28 +0200 (Sun, 08 Oct 2006)
New Revision: 705

Modified:
   trunk/src/sst.py
Log:
Refactored lexical analyzer into a scanner class.   This will nmake it
easier to replace the patser, when we need to do that.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-08 05:49:11 UTC (rev 704)
+++ trunk/src/sst.py	2006-10-08 06:19:28 UTC (rev 705)
@@ -1109,18 +1109,18 @@
     if shraise:
 	action = "SHUP"
     else:
-	key = scan()
+	key = scanner.next()
 	if key == IHALPHA:
-	    if isit("transfer"):
+	    if scanner.sees("transfer"):
 		action = "NRG"
 	    else:
-		chew()
+		scanner.chew()
 		if damaged(DSHIELD):
 		    prout(_("Shields damaged and down."))
 		    return
-		if isit("up"):
+		if scanner.sees("up"):
 		    action = "SHUP"
-		elif isit("down"):
+		elif scanner.sees("down"):
 		    action = "SHDN"
 	if action=="NONE":
 	    proutn(_("Do you wish to change shield energy? "))
@@ -1135,14 +1135,14 @@
 		if ja() == True:
 		    action = "SHDN"
 		else:
-		    chew()
+		    scanner.chew()
 		    return
 	    else:
 		proutn(_("Shields are down. Do you want them up? "))
 		if ja() == True:
 		    action = "SHUP"
 		else:
-		    chew()
+		    scanner.chew()
 		    return    
     if action == "SHUP": # raise shields 
 	if game.shldup:
@@ -1170,24 +1170,24 @@
 	game.ididit = True
 	return
     elif action == "NRG":
-	while scan() != IHREAL:
-	    chew()
+	while scanner.next() != IHREAL:
+	    scanner.chew()
 	    proutn(_("Energy to transfer to shields- "))
-	chew()
-	if aaitem == 0:
+	scanner.chew()
+	if scanner.real == 0:
 	    return
-	if aaitem > game.energy:
+	if scanner.real > game.energy:
 	    prout(_("Insufficient ship energy."))
 	    return
 	game.ididit = True
-	if game.shield+aaitem >= game.inshld:
+	if game.shield+scanner.real >= game.inshld:
 	    prout(_("Shield energy maximized."))
-	    if game.shield+aaitem > game.inshld:
+	    if game.shield+scanner.real > game.inshld:
 		prout(_("Excess energy requested returned to ship energy"))
 	    game.energy -= game.inshld-game.shield
 	    game.shield = game.inshld
 	    return
-	if aaitem < 0.0 and game.energy-aaitem > game.inenrg:
+	if scanner.real < 0.0 and game.energy-scanner.real > game.inenrg:
 	    # Prevent shield drain loophole 
 	    skip(1)
 	    prout(_("Engineering to bridge--"))
@@ -1195,18 +1195,18 @@
 	    prout(_("  I can't drain the shields."))
 	    game.ididit = False
 	    return
-	if game.shield+aaitem < 0:
+	if game.shield+scanner.real < 0:
 	    prout(_("All shield energy transferred to ship."))
 	    game.energy += game.shield
 	    game.shield = 0.0
 	    return
 	proutn(_("Scotty- \""))
-	if aaitem > 0:
+	if scanner.real > 0:
 	    prout(_("Transferring energy to shields.\""))
 	else:
 	    prout(_("Draining energy from shields.\""))
-	game.shield += aaitem
-	game.energy -= aaitem
+	game.shield += scanner.real
+	game.energy -= scanner.real
 	return
 
 def randdevice():
@@ -1787,7 +1787,7 @@
 	prout(_("Spock-  \"Bridge to sickbay.  Dr. McCoy,"))
 	prout(_("  I recommend an immediate review of"))
 	prout(_("  the Captain's psychological profile.\""))
-	chew()
+	scanner.chew()
 	return None
     return 1.90985932*math.atan2(deltx, delty)
 
@@ -1797,41 +1797,41 @@
     game.ididit = False
     if damaged(DPHOTON):
 	prout(_("Photon tubes damaged."))
-	chew()
+	scanner.chew()
 	return
     if game.torps == 0:
 	prout(_("No torpedoes left."))
-	chew()
+	scanner.chew()
 	return
-    key = scan()
+    key = scanner.next()
     while True:
 	if key == IHALPHA:
 	    huh()
 	    return
 	elif key == IHEOL:
 	    prout(_("%d torpedoes left.") % game.torps)
-            chew()
+            scanner.chew()
 	    proutn(_("Number of torpedoes to fire- "))
-	    key = scan()
-	else: # key == IHREAL  {
-	    n = int(round(aaitem + 0.5))
+	    key = scanner.next()
+	else: # key == IHREAL
+	    n = scanner.int()
 	    if n <= 0: # abort command 
-		chew()
+		scanner.chew()
 		return
 	    if n > MAXBURST:
-		chew()
+		scanner.chew()
 		prout(_("Maximum of %d torpedoes per burst.") % MAXBURST)
 		key = IHEOL
 		return
 	    if n <= game.torps:
 		break
-	    chew()
+	    scanner.chew()
 	    key = IHEOL
     targ = []
     for i in range(MAXBURST):
         targ.append(coord())
     for i in range(n):
-	key = scan()
+	key = scanner.next()
 	if i==0 and key == IHEOL:
 	    break;	# we will try prompting 
 	if i==1 and key == IHEOL:
@@ -1844,31 +1844,31 @@
 	if key != IHREAL:
 	    huh()
 	    return
-	targ[i].x = aaitem
-	key = scan()
+	targ[i].x = scanner.real
+	key = scanner.next()
 	if key != IHREAL:
 	    huh()
 	    return
-	targ[i].y = aaitem
+	targ[i].y = scanner.real
 	course[i] = targetcheck(targ[i])
         if course[i] == None:
 	    return
-    chew()
+    scanner.chew()
     if i == 1 and key == IHEOL:
 	# prompt for each one 
 	for i in range(n):
 	    proutn(_("Target sector for torpedo number %d- ") % (i+1))
-	    key = scan()
+	    key = scanner.next()
 	    if key != IHREAL:
 		huh()
 		return
-	    targ[i].x = int(aaitem-0.5)
-	    key = scan()
+	    targ[i].x = int(scanner.real-0.5)
+	    key = scanner.next()
 	    if key != IHREAL:
 		huh()
 		return
-	    targ[i].y = int(aaitem-0.5)
-	    chew()
+	    targ[i].y = int(scanner.real-0.5)
+	    scanner.chew()
             course[i] = targetcheck(targ[i])
             if course[i] == None:
                 return
@@ -2004,46 +2004,46 @@
 	itarg = False
     if game.condition == "docked":
 	prout(_("Phasers can't be fired through base shields."))
-	chew()
+	scanner.chew()
 	return
     if damaged(DPHASER):
 	prout(_("Phaser control damaged."))
-	chew()
+	scanner.chew()
 	return
     if game.shldup:
 	if damaged(DSHCTRL):
 	    prout(_("High speed shield control damaged."))
-	    chew()
+	    scanner.chew()
 	    return
 	if game.energy <= 200.0:
 	    prout(_("Insufficient energy to activate high-speed shield control."))
-	    chew()
+	    scanner.chew()
 	    return
 	prout(_("Weapons Officer Sulu-  \"High-speed shield control enabled, sir.\""))
 	ifast = True
     # Original code so convoluted, I re-did it all
     # (That was Tom Almy talking about the C code, I think -- ESR)
     while automode=="NOTSET":
-	key=scan()
+	key=scanner.next()
 	if key == IHALPHA:
-	    if isit("manual"):
+	    if scanner.sees("manual"):
 		if len(game.enemies)==0:
 		    prout(_("There is no enemy present to select."))
-		    chew()
+		    scanner.chew()
 		    key = IHEOL
 		    automode="AUTOMATIC"
 		else:
 		    automode = "MANUAL"
-		    key = scan()
-	    elif isit("automatic"):
+		    key = scanner.next()
+	    elif scanner.sees("automatic"):
 		if (not itarg) and len(game.enemies) != 0:
 		    automode = "FORCEMAN"
 		else:
 		    if len(game.enemies)==0:
 			prout(_("Energy will be expended into space."))
 		    automode = "AUTOMATIC"
-		    key = scan()
-	    elif isit("no"):
+		    key = scanner.next()
+	    elif scanner.sees("no"):
 		no = True
 	    else:
 		huh()
@@ -2065,30 +2065,30 @@
 		automode = "FORCEMAN"
 	    else: 
 		proutn(_("Manual or automatic? "))
-                chew()
+                scanner.chew()
     avail = game.energy
     if ifast:
         avail -= 200.0
     if automode == "AUTOMATIC":
-	if key == IHALPHA and isit("no"):
+	if key == IHALPHA and scanner.sees("no"):
 	    no = True
-	    key = scan()
+	    key = scanner.next()
 	if key != IHREAL and len(game.enemies) != 0:
 	    prout(_("Phasers locked on target. Energy available: %.2f")%avail)
 	irec=0
         while True:
-	    chew()
+	    scanner.chew()
 	    if not kz:
 		for i in range(len(game.enemies)):
 		    irec += math.fabs(game.enemies[i].kpower)/(PHASEFAC*math.pow(0.90,game.enemies[i].kdist))*randreal(1.01, 1.06) + 1.0
 	    kz=1
 	    proutn(_("%d units required. ") % irec)
-	    chew()
+	    scanner.chew()
 	    proutn(_("Units to fire= "))
-	    key = scan()
+	    key = scanner.next()
 	    if key!=IHREAL:
 		return
-	    rpow = aaitem
+	    rpow = scanner.real
 	    if rpow > avail:
 		proutn(_("Energy available= %.2f") % avail)
 		skip(1)
@@ -2097,16 +2097,16 @@
                 break
 	if rpow<=0:
 	    # chicken out 
-	    chew()
+	    scanner.chew()
 	    return
-        key=scan()
-	if key == IHALPHA and isit("no"):
+        key=scanner.next()
+	if key == IHALPHA and scanner.sees("no"):
 	    no = True
 	if ifast:
 	    game.energy -= 200; # Go and do it! 
 	    if checkshctrl(rpow):
 		return
-	chew()
+	scanner.chew()
 	game.energy -= rpow
 	extra = rpow
 	if len(game.enemies):
@@ -2138,7 +2138,7 @@
 	    else:
 		prout(_("%d expended on empty space.") % int(extra))
     elif automode == "FORCEMAN":
-	chew()
+	scanner.chew()
 	key = IHEOL
 	if damaged(DCOMPTR):
 	    prout(_("Battle computer damaged, manual fire only."))
@@ -2164,13 +2164,13 @@
                not game.sector.distance(aim)<2**0.5 and ienm in (IHC, IHS):
 		cramen(ienm)
 		prout(_(" can't be located without short range scan."))
-		chew()
+		scanner.chew()
 		key = IHEOL
 		hits[k] = 0; # prevent overflow -- thanks to Alexei Voitenko 
 		k += 1
 		continue
 	    if key == IHEOL:
-		chew()
+		scanner.chew()
 		if itarg and k > kz:
 		    irec=(abs(game.enemies[k].kpower)/(PHASEFAC*math.pow(0.9,game.enemies[k].kdist))) *	randreal(1.01, 1.06) + 1.0
 		kz = k
@@ -2183,10 +2183,10 @@
 		proutn(_("units to fire at "))
 		crmena(False, ienm, "sector", aim)
 		proutn("-  ")
-		key = scan()
-	    if key == IHALPHA and isit("no"):
+		key = scanner.next()
+	    if key == IHALPHA and scanner.sees("no"):
 		no = True
-		key = scan()
+		key = scanner.next()
 		continue
 	    if key == IHALPHA:
 		huh()
@@ -2195,27 +2195,27 @@
 		if k==1: # Let me say I'm baffled by this 
 		    msgflag = True
 		continue
-	    if aaitem < 0:
+	    if scanner.real < 0:
 		# abort out 
-		chew()
+		scanner.chew()
 		return
-	    hits[k] = aaitem
-	    rpow += aaitem
+	    hits[k] = scanner.real
+	    rpow += scanner.real
 	    # If total requested is too much, inform and start over 
             if rpow > avail:
 		prout(_("Available energy exceeded -- try again."))
-		chew()
+		scanner.chew()
 		return
-	    key = scan(); # scan for next value 
+	    key = scanner.next(); # scan for next value 
 	    k += 1
 	if rpow == 0.0:
 	    # zero energy -- abort 
-	    chew()
+	    scanner.chew()
 	    return
-	if key == IHALPHA and isit("no"):
+	if key == IHALPHA and scanner.sees("no"):
 	    no = True
 	game.energy -= rpow
-	chew()
+	scanner.chew()
 	if ifast:
 	    game.energy -= 200.0
 	    if checkshctrl(rpow):
@@ -2695,15 +2695,15 @@
     # wait on events 
     game.ididit = False
     while True:
-	key = scan()
+	key = scanner.next()
 	if key  != IHEOL:
 	    break
 	proutn(_("How long? "))
-    chew()
+    scanner.chew()
     if key != IHREAL:
 	huh()
 	return
-    origTime = delay = aaitem
+    origTime = delay = scanner.real
     if delay <= 0.0:
 	return
     if delay >= game.state.remtime or len(game.enemies) != 0:
@@ -3008,7 +3008,7 @@
 def selfdestruct():
     # self-destruct maneuver 
     # Finish with a BANG! 
-    chew()
+    scanner.chew()
     if damaged(DCOMPTR):
 	prout(_("Computer damaged; cannot execute destruct sequence."))
 	return
@@ -3026,9 +3026,9 @@
     skip(1)
     prout(_("SELF-DESTRUCT-SEQUENCE-WILL-BE-ABORTED"))
     skip(1)
-    scan()
-    chew()
-    if game.passwd != citem:
+    scanner.next()
+    scanner.chew()
+    if game.passwd != scanner.token:
 	prouts(_("PASSWORD-REJECTED;"))
 	skip(1)
 	prouts(_("CONTINUITY-EFFECTED"))
@@ -3146,7 +3146,7 @@
 			prout(_("You cannot get a citation, so..."))
 		    else:
 			proutn(_("Do you want your Commodore Emeritus Citation printed? "))
-			chew()
+			scanner.chew()
 			if ja() == True:
 			    igotit = True
 	    # Only grant long life if alive (original didn't!)
@@ -3946,7 +3946,7 @@
 
 def dock(verbose):
     # dock our ship at a starbase 
-    chew()
+    scanner.chew()
     if game.condition == "docked" and verbose:
 	prout(_("Already docked."))
 	return
@@ -3993,7 +3993,7 @@
     if game.landed and not isprobe:
 	prout(_("Dummy! You can't leave standard orbit until you"))
 	proutn(_("are back aboard the ship."))
-	chew()
+	scanner.chew()
 	return False
     while navmode == "unspecified":
 	if damaged(DNAVSYS):
@@ -4001,7 +4001,7 @@
 		prout(_("Computer damaged; manual navigation only"))
 	    else:
 		prout(_("Computer damaged; manual movement only"))
-	    chew()
+	    scanner.chew()
 	    navmode = "manual"
 	    key = IHEOL
 	    break
@@ -4010,23 +4010,23 @@
 	    key = akey
 	    akey = -1
 	else: 
-	    key = scan()
+	    key = scanner.next()
 	if key == IHEOL:
 	    proutn(_("Manual or automatic- "))
 	    iprompt = True
-	    chew()
+	    scanner.chew()
 	elif key == IHALPHA:
-            if isit("manual"):
+            if scanner.sees("manual"):
 		navmode = "manual"
-		key = scan()
+		key = scanner.next()
 		break
-            elif isit("automatic"):
+            elif scanner.sees("automatic"):
 		navmode = "automatic"
-		key = scan()
+		key = scanner.next()
 		break
 	    else:
 		huh()
-		chew()
+		scanner.chew()
 		return False
 	else: # numeric 
 	    if isprobe:
@@ -4041,27 +4041,27 @@
 		proutn(_("Target quadrant or quadrant&sector- "))
 	    else:
 		proutn(_("Destination sector or quadrant&sector- "))
-	    chew()
+	    scanner.chew()
 	    iprompt = True
-	    key = scan()
+	    key = scanner.next()
 	if key != IHREAL:
 	    huh()
 	    return False
-	xi = int(round(aaitem))-1
-	key = scan()
+	xi = int(round(scanner.real))-1
+	key = scanner.next()
 	if key != IHREAL:
 	    huh()
 	    return False
-	xj = int(round(aaitem))-1
-	key = scan()
+	xj = int(round(scanner.real))-1
+	key = scanner.next()
 	if key == IHREAL:
 	    # both quadrant and sector specified 
-	    xk = int(round(aaitem))-1
-	    key = scan()
+	    xk = int(round(scanner.real))-1
+	    key = scanner.next()
 	    if key != IHREAL:
 		huh()
 		return False
-	    xl = int(round(aaitem))-1
+	    xl = int(round(scanner.real))-1
 	    dquad.x = xi
 	    dquad.y = xj
 	    dsect.y = xk
@@ -4094,22 +4094,22 @@
     else: # manual 
 	while key == IHEOL:
 	    proutn(_("X and Y displacements- "))
-	    chew()
+	    scanner.chew()
 	    iprompt = True
-	    key = scan()
+	    key = scanner.next()
 	itemp = "verbose"
 	if key != IHREAL:
 	    huh()
 	    return False
-	deltax = aaitem
-	key = scan()
+	deltax = scanner.real
+	key = scanner.next()
 	if key != IHREAL:
 	    huh()
 	    return False
-	deltay = aaitem
+	deltay = scanner.real
     # Check for zero movement 
     if deltax == 0 and deltay == 0:
-	chew()
+	scanner.chew()
 	return False
     if itemp == "verbose" and not isprobe:
 	skip(1)
@@ -4119,14 +4119,14 @@
     game.direc = math.atan2(deltax, deltay)*1.90985932
     if game.direc < 0.0:
 	game.direc += 12.0
-    chew()
+    scanner.chew()
     return True
 
 def impulse():
     # move under impulse power 
     game.ididit = False
     if damaged(DIMPULS):
-	chew()
+	scanner.chew()
 	skip(1)
 	prout(_("Engineer Scott- \"The impulse engines are damaged, Sir.\""))
 	return
@@ -4147,7 +4147,7 @@
 	    prout(_(" quadrants.\""))
 	else:
 	    prout(_("quadrant.  They are, therefore, useless.\""))
-	chew()
+	scanner.chew()
 	return
     # Make sure enough time is left for the trip 
     game.optime = game.dist/0.095
@@ -4175,12 +4175,12 @@
     if not timewarp: # Not WARPX entry 
 	game.ididit = False
 	if game.damage[DWARPEN] > 10.0:
-	    chew()
+	    scanner.chew()
 	    skip(1)
 	    prout(_("Engineer Scott- \"The impulse engines are damaged, Sir.\""))
 	    return
 	if damaged(DWARPEN) and game.warpfac > 4.0:
-	    chew()
+	    scanner.chew()
 	    skip(1)
 	    prout(_("Engineer Scott- \"Sorry, Captain. Until this damage"))
 	    prout(_("  is repaired, I can only give you warp 4.\""))
@@ -4287,30 +4287,30 @@
 def setwarp():
     # change the warp factor 	
     while True:
-        key=scan()
+        key=scanner.next()
         if key != IHEOL:
             break
-	chew()
+	scanner.chew()
 	proutn(_("Warp factor- "))
-    chew()
+    scanner.chew()
     if key != IHREAL:
 	huh()
 	return
     if game.damage[DWARPEN] > 10.0:
 	prout(_("Warp engines inoperative."))
 	return
-    if damaged(DWARPEN) and aaitem > 4.0:
+    if damaged(DWARPEN) and scanner.real > 4.0:
 	prout(_("Engineer Scott- \"I'm doing my best, Captain,"))
 	prout(_("  but right now we can only go warp 4.\""))
 	return
-    if aaitem > 10.0:
+    if scanner.real > 10.0:
 	prout(_("Helmsman Sulu- \"Our top speed is warp 10, Captain.\""))
 	return
-    if aaitem < 1.0:
+    if scanner.real < 1.0:
 	prout(_("Helmsman Sulu- \"We can't go below warp 1, Captain.\""))
 	return
     oldfac = game.warpfac
-    game.warpfac = aaitem
+    game.warpfac = scanner.real
     game.wfacsq=game.warpfac*game.warpfac
     if game.warpfac <= oldfac or game.warpfac <= 6.0:
 	prout(_("Helmsman Sulu- \"Warp factor %d, Captain.\"") %
@@ -4327,7 +4327,7 @@
 
 def atover(igrab):
     # cope with being tossed out of quadrant by supernova or yanked by beam 
-    chew()
+    scanner.chew()
     # is captain on planet? 
     if game.landed:
 	if damaged(DTRANSP):
@@ -4464,7 +4464,7 @@
     # launch deep-space probe 
     # New code to launch a deep space probe 
     if game.nprobes == 0:
-	chew()
+	scanner.chew()
 	skip(1)
 	if game.ship == IHE: 
 	    prout(_("Engineer Scott- \"We have no more deep space probes, Sir.\""))
@@ -4472,12 +4472,12 @@
 	    prout(_("Ye Faerie Queene has no deep space probes."))
 	return
     if damaged(DDSP):
-	chew()
+	scanner.chew()
 	skip(1)
 	prout(_("Engineer Scott- \"The probe launcher is damaged, Sir.\""))
 	return
     if is_scheduled(FDSPROB):
-	chew()
+	scanner.chew()
 	skip(1)
 	if damaged(DRADIO) and game.condition != "docked":
 	    prout(_("Spock-  \"Records show the previous probe has not yet"))
@@ -4485,7 +4485,7 @@
 	else:
 	    prout(_("Uhura- \"The previous probe is still reporting data, Sir.\""))
 	return
-    key = scan()
+    key = scanner.next()
     if key == IHEOL:
 	# slow mode, so let Kirk know how many probes there are left
         if game.nprobes == 1:
@@ -4496,9 +4496,9 @@
 	if ja() == False:
 	    return
     game.isarmed = False
-    if key == IHALPHA and citem == "armed":
+    if key == IHALPHA and scanner.token == "armed":
 	game.isarmed = True
-	key = scan()
+	key = scanner.next()
     elif key == IHEOL:
 	proutn(_("Arm NOVAMAX warhead? "))
 	game.isarmed = ja()
@@ -4544,7 +4544,7 @@
     # yell for help from nearest starbase 
     # There's more than one way to move in this game! 
     line = 0
-    chew()
+    scanner.chew()
     # Test for conditions which prevent calling for help 
     if game.condition == "docked":
 	prout(_("Lt. Uhura-  \"But Captain, we're already docked.\""))
@@ -4642,7 +4642,7 @@
 
 def abandon():
     # abandon ship 
-    chew()
+    scanner.chew()
     if game.condition=="docked":
 	if game.ship!=IHE:
 	    prout(_("You cannot abandon Ye Faerie Queene."))
@@ -4752,7 +4752,7 @@
     # report on (uninhabited) planets in the galaxy 
     iknow = False
     skip(1)
-    chew()
+    scanner.chew()
     prout(_("Spock-  \"Planet report follows, Captain.\""))
     skip(1)
     for i in range(game.inplan):
@@ -4779,7 +4779,7 @@
 def orbit():
     # enter standard orbit 
     skip(1)
-    chew()
+    scanner.chew()
     if game.inorbit:
 	prout(_("Already in standard orbit."))
 	return
@@ -4831,7 +4831,7 @@
 def beam():
     # use the transporter 
     nrgneed = 0
-    chew()
+    scanner.chew()
     skip(1)
     if damaged(DTRANSP):
 	prout(_("Transporter damaged."))
@@ -4858,7 +4858,7 @@
 	prout(_("  exploring a planet with no dilithium crystals."))
 	proutn(_("  Are you sure this is wise?\" "))
 	if ja() == False:
-	    chew()
+	    scanner.chew()
 	    return
     if not (game.options & OPTION_PLAIN):
 	nrgneed = 50 * game.skill + game.height / 100.0
@@ -4874,14 +4874,14 @@
 		prout(_("  Although the Galileo shuttle craft may still be on a surface."))
 	    proutn(_("  Are you sure this is wise?\" "))
 	    if ja() == False:
-		chew()
+		scanner.chew()
 		return
     if game.landed:
 	# Coming from planet 
 	if game.iplnet.known=="shuttle_down":
 	    proutn(_("Spock-  \"Wouldn't you rather take the Galileo?\" "))
 	    if ja() == True:
-		chew()
+		scanner.chew()
 		return
 	    prout(_("Your crew hides the Galileo to prevent capture by aliens."))
 	prout(_("Landing party assembled, ready to beam up."))
@@ -4923,7 +4923,7 @@
 def mine():
     # strip-mine a world for dilithium 
     skip(1)
-    chew()
+    scanner.chew()
     if not game.landed:
 	prout(_("Mining party not on planet."))
 	return
@@ -4953,7 +4953,7 @@
     # use dilithium crystals 
     game.ididit = False
     skip(1)
-    chew()
+    scanner.chew()
     if not game.icrystl:
 	prout(_("No dilithium crystals available."))
 	return
@@ -4966,7 +4966,7 @@
     prout(_("  system may risk a severe explosion."))
     proutn(_("  Are you sure this is wise?\" "))
     if ja() == False:
-	chew()
+	scanner.chew()
 	return
     skip(1)
     prout(_("Engineering Officer Scott-  \"(GULP) Aye Sir."))
@@ -4997,7 +4997,7 @@
 
 def shuttle():
     # use shuttlecraft for planetary jaunt 
-    chew()
+    scanner.chew()
     skip(1)
     if damaged(DSHUTTL):
 	if game.damage[DSHUTTL] == -1.0:
@@ -5101,7 +5101,7 @@
     # use the big zapper 
     game.ididit = False
     skip(1)
-    chew()
+    scanner.chew()
     if game.ship != IHE:
 	prout(_("Ye Faerie Queene has no death ray."))
 	return
@@ -5222,7 +5222,7 @@
 
 def report():
     # report on general game status 
-    chew()
+    scanner.chew()
     s1 = "" and game.thawed and _("thawed ")
     s2 = {1:"short", 2:"medium", 4:"long"}[game.length]
     s3 = (None, _("novice"). _("fair"),
@@ -5324,7 +5324,7 @@
 def damagereport():
     # damage report 
     jdam = False
-    chew()
+    scanner.chew()
 
     for i in range(NDEVICES):
 	if damaged(i):
@@ -5350,7 +5350,7 @@
 
 def chart():
     # display the star chart  
-    chew()
+    scanner.chew()
     if (game.options & OPTION_AUTOSCAN):
         lrscan(silent=True)
     if not damaged(DRADIO):
@@ -5462,11 +5462,11 @@
 
 def request():
     requests = ("da","co","po","ls","wa","en","to","sh","kl","sy", "ti")
-    while scan() == IHEOL:
+    while scanner.next() == IHEOL:
 	proutn(_("Information desired? "))
-    chew()
-    if citem in requests:
-        status(requests.index(citem))
+    scanner.chew()
+    if scanner.token in requests:
+        status(requests.index(scanner.token))
     else:
 	prout(_("UNRECOGNIZED REQUEST. Legal requests are:"))
 	prout(("  date, condition, position, lsupport, warpfactor,"))
@@ -5506,24 +5506,24 @@
 	prout(_("COMPUTER DAMAGED, USE A POCKET CALCULATOR."))
 	skip(1)
 	return
-    if scan() != IHREAL:
+    if scanner.next() != IHREAL:
 	prompt = True
-	chew()
+	scanner.chew()
 	proutn(_("Destination quadrant and/or sector? "))
-	if scan()!=IHREAL:
+	if scanner.next()!=IHREAL:
 	    huh()
 	    return
-    w1.y = int(aaitem-0.5)
-    if scan() != IHREAL:
+    w1.y = int(scanner.real-0.5)
+    if scanner.next() != IHREAL:
 	huh()
 	return
-    w1.x = int(aaitem-0.5)
-    if scan() == IHREAL:
-	w2.y = int(aaitem-0.5)
-	if scan() != IHREAL:
+    w1.x = int(scanner.real-0.5)
+    if scanner.next() == IHREAL:
+	w2.y = int(scanner.real-0.5)
+	if scanner.next() != IHREAL:
 	    huh()
 	    return
-	w2.x = int(aaitem-0.5)
+	w2.x = int(scanner.real-0.5)
     else:
 	if game.quadrant.y>w1.x:
 	    w2.x = 0
@@ -5542,32 +5542,32 @@
     if prompt:
 	prout(_("Answer \"no\" if you don't know the value:"))
     while True:
-	chew()
+	scanner.chew()
 	proutn(_("Time or arrival date? "))
-	if scan()==IHREAL:
-	    ttime = aaitem
+	if scanner.next()==IHREAL:
+	    ttime = scanner.real
 	    if ttime > game.state.date:
 		ttime -= game.state.date # Actually a star date
             twarp=(math.floor(math.sqrt((10.0*game.dist)/ttime)*10.0)+1.0)/10.0
             if ttime <= 1e-10 or twarp > 10:
 		prout(_("We'll never make it, sir."))
-		chew()
+		scanner.chew()
 		return
 	    if twarp < 1.0:
 		twarp = 1.0
 	    break
-	chew()
+	scanner.chew()
 	proutn(_("Warp factor? "))
-	if scan()== IHREAL:
+	if scanner.next()== IHREAL:
 	    wfl = True
-	    twarp = aaitem
+	    twarp = scanner.real
 	    if twarp<1.0 or twarp > 10.0:
 		huh()
 		return
 	    break
 	prout(_("Captain, certainly you can give me one of these."))
     while True:
-	chew()
+	scanner.chew()
 	ttime = (10.0*game.dist)/square(twarp)
 	tpower = game.dist*twarp*twarp*twarp*(game.shldup+1)
 	if tpower >= game.energy:
@@ -5576,15 +5576,15 @@
 		if not wfl:
 		    return
 		proutn(_("New warp factor to try? "))
-		if scan() == IHREAL:
+		if scanner.next() == IHREAL:
 		    wfl = True
-		    twarp = aaitem
+		    twarp = scanner.real
 		    if twarp<1.0 or twarp > 10.0:
 			huh()
 			return
 		    continue
 		else:
-		    chew()
+		    scanner.chew()
 		    skip(1)
 		    return
 	    prout(_("But if you lower your shields,"))
@@ -5609,14 +5609,14 @@
 	    (scheduled(FCDBAS)<ttime+game.state.date and game.battle == w1):
 	    prout(_("The starbase there will be destroyed by then."))
 	proutn(_("New warp factor to try? "))
-	if scan() == IHREAL:
+	if scanner.next() == IHREAL:
 	    wfl = True
-	    twarp = aaitem
+	    twarp = scanner.real
 	    if twarp<1.0 or twarp > 10.0:
 		huh()
 		return
 	else:
-	    chew()
+	    scanner.chew()
 	    skip(1)
 	    return
 			
@@ -5635,22 +5635,22 @@
 def freeze(boss):
     # save game 
     if boss:
-	citem = "emsave.trk"
+	scanner.token = "emsave.trk"
     else:
-        key = scan()
+        key = scanner.next()
 	if key == IHEOL:
 	    proutn(_("File name: "))
-	    key = scan()
+	    key = scanner.next()
 	if key != IHALPHA:
 	    huh()
 	    return
-	chew()
-        if '.' not in citem:
-	    citem += ".trk"
+	scanner.chew()
+        if '.' not in scanner.token:
+	    scanner.token += ".trk"
     try:
-        fp = open(citem, "wb")
+        fp = open(scanner.token, "wb")
     except IOError:
-	prout(_("Can't freeze game as file %s") % citem)
+	prout(_("Can't freeze game as file %s") % scanner.token)
 	return
     cPickle.dump(game, fp)
     fp.close()
@@ -5658,20 +5658,20 @@
 def thaw():
     # retrieve saved game 
     game.passwd[0] = '\0'
-    key = scan()
+    key = scanner.next()
     if key == IHEOL:
 	proutn(_("File name: "))
-	key = scan()
+	key = scanner.next()
     if key != IHALPHA:
 	huh()
 	return True
-    chew()
-    if '.' not in citem:
-        citem += ".trk"
+    scanner.chew()
+    if '.' not in scanner.token:
+        scanner.token += ".trk"
     try:
-        fp = open(citem, "rb")
+        fp = open(scanner.token, "rb")
     except IOError:
-	prout(_("Can't thaw game in %s") % citem)
+	prout(_("Can't thaw game in %s") % scanner.token)
 	return
     game = cPickle.load(fp)
     fp.close()
@@ -5748,11 +5748,11 @@
 	_("D. S. Probe"), \
 )
 
-def setup(needprompt):
+def setup():
     # prepare to play, set up cosmos 
     w = coord()
     #  Decide how many of everything
-    if choose(needprompt):
+    if choose():
 	return # frozen game
     # Prepare the Enterprise
     game.alldone = game.gamewon = False
@@ -5953,7 +5953,7 @@
     if game.neutz:	# bad luck to start in a Romulan Neutral Zone
 	attack(torps_ok=False)
 
-def choose(needprompt):
+def choose():
     # choose your game type
     global thing
     while True:
@@ -5961,26 +5961,26 @@
 	game.thawed = False
 	game.skill = SKILL_NONE
 	game.length = 0
-	if needprompt: # Can start with command line options 
+	if not scanner.inqueue: # Can start with command line options 
 	    proutn(_("Would you like a regular, tournament, or saved game? "))
-        scan()
-	if len(citem)==0: # Try again
+        scanner.next()
+	if len(scanner.token)==0: # Try again
 	    continue
-        if isit("tournament"):
-	    while scan() == IHEOL:
+        if scanner.sees("tournament"):
+	    while scanner.next() == IHEOL:
 		proutn(_("Type in tournament number-"))
-	    if aaitem == 0:
-		chew()
+	    if scanner.real == 0:
+		scanner.chew()
 		continue # We don't want a blank entry
-	    game.tourn = int(round(aaitem))
-	    random.seed(aaitem)
+	    game.tourn = int(round(scanner.real))
+	    random.seed(scanner.real)
             if logfp:
-                logfp.write("# random.seed(%d)\n" % aaitem)
+                logfp.write("# random.seed(%d)\n" % scanner.real)
 	    break
-        if isit("saved") or isit("frozen"):
+        if scanner.sees("saved") or scanner.sees("frozen"):
 	    if thaw():
 		continue
-	    chew()
+	    scanner.chew()
 	    if game.passwd == None:
 		continue
 	    if not game.alldone:
@@ -5988,55 +5988,55 @@
 	    report()
 	    waitfor()
 	    return True
-        if isit("regular"):
+        if scanner.sees("regular"):
 	    break
-	proutn(_("What is \"%s\"?"), citem)
-	chew()
+	proutn(_("What is \"%s\"?"), scanner.token)
+	scanner.chew()
     while game.length==0 or game.skill==SKILL_NONE:
-	if scan() == IHALPHA:
-            if isit("short"):
+	if scanner.next() == IHALPHA:
+            if scanner.sees("short"):
 		game.length = 1
-	    elif isit("medium"):
+	    elif scanner.sees("medium"):
 		game.length = 2
-	    elif isit("long"):
+	    elif scanner.sees("long"):
 		game.length = 4
-	    elif isit("novice"):
+	    elif scanner.sees("novice"):
 		game.skill = SKILL_NOVICE
-	    elif isit("fair"):
+	    elif scanner.sees("fair"):
 		game.skill = SKILL_FAIR
-	    elif isit("good"):
+	    elif scanner.sees("good"):
 		game.skill = SKILL_GOOD
-	    elif isit("expert"):
+	    elif scanner.sees("expert"):
 		game.skill = SKILL_EXPERT
-	    elif isit("emeritus"):
+	    elif scanner.sees("emeritus"):
 		game.skill = SKILL_EMERITUS
 	    else:
 		proutn(_("What is \""))
-		proutn(citem)
+		proutn(scanner.token)
 		prout("\"?")
 	else:
-	    chew()
+	    scanner.chew()
 	    if game.length==0:
 		proutn(_("Would you like a Short, Medium, or Long game? "))
 	    elif game.skill == SKILL_NONE:
 		proutn(_("Are you a Novice, Fair, Good, Expert, or Emeritus player? "))
     # Choose game options -- added by ESR for SST2K
-    if scan() != IHALPHA:
-	chew()
+    if scanner.next() != IHALPHA:
+	scanner.chew()
 	proutn(_("Choose your game style (or just press enter): "))
-	scan()
-    if isit("plain"):
+	scanner.next()
+    if scanner.sees("plain"):
 	# Approximates the UT FORTRAN version.
 	game.options &=~ (OPTION_THOLIAN | OPTION_PLANETS | OPTION_THINGY | OPTION_PROBE | OPTION_RAMMING | OPTION_MVBADDY | OPTION_BLKHOLE | OPTION_BASE | OPTION_WORLDS)
 	game.options |= OPTION_PLAIN
-    elif isit("almy"):
+    elif scanner.sees("almy"):
 	# Approximates Tom Almy's version.
 	game.options &=~ (OPTION_THINGY | OPTION_BLKHOLE | OPTION_BASE | OPTION_WORLDS)
 	game.options |= OPTION_ALMY
-    elif isit("fancy"):
+    elif scanner.sees("fancy"):
 	pass
-    elif len(citem):
-        proutn(_("What is \"%s\"?") % citem)
+    elif len(scanner.token):
+        proutn(_("What is \"%s\"?") % scanner.token)
     setpassword()
     if game.passwd == "debug":
 	idebug = True
@@ -6218,10 +6218,10 @@
     # set the self-destruct password 
     if game.options & OPTION_PLAIN:
 	while True:
-	    chew()
+	    scanner.chew()
 	    proutn(_("Please type in a secret password- "))
-	    scan()
-	    game.passwd = citem
+	    scanner.next()
+	    game.passwd = scanner.token
 	    if game.passwd != None:
 		break
     else:
@@ -6292,23 +6292,23 @@
 def helpme():
     # browse on-line help 
     # Give help on commands 
-    key = scan()
+    key = scanner.next()
     while True:
 	if key == IHEOL:
 	    setwnd(prompt_window)
 	    proutn(_("Help on what command? "))
-	    key = scan()
+	    key = scanner.next()
 	setwnd(message_window)
 	if key == IHEOL:
 	    return
-        if citem in commands or citem == "ABBREV":
+        if scanner.token in commands or scanner.token == "ABBREV":
 	    break
 	skip(1)
 	listCommands()
 	key = IHEOL
-	chew()
+	scanner.chew()
 	skip(1)
-    cmd = citem.upper()
+    cmd = scanner.token.upper()
     try:
         fp = open(SSTDOC, "r")
     except IOError:
@@ -6357,11 +6357,11 @@
 	    hitme = False
 	    game.justin = False
 	    game.optime = 0.0
-	    chew()
+	    scanner.chew()
 	    setwnd(prompt_window)
 	    clrscr()
 	    proutn("COMMAND> ")
-	    if scan() == IHEOL:
+	    if scanner.next() == IHEOL:
 		if game.options & OPTION_CURSES:
 		    makechart()
 		continue
@@ -6369,7 +6369,7 @@
 	    clrscr()
 	    setwnd(message_window)
 	    clrscr()
-            candidates = filter(lambda x: x.startswith(citem.upper()),
+            candidates = filter(lambda x: x.startswith(scanner.token.upper()),
                                 commands)
             if len(candidates) == 1:
                 cmd = candidates[0]
@@ -6558,72 +6558,85 @@
     w.y = randrange(size)
     return w
 
-def chew():
-    # Demand input for next scan
-    global inqueue
-    inqueue = None
-
-def chew2():
-    # return IHEOL next time 
-    global inqueue
-    inqueue = []
-
-def scan():
-    # Get a token from the user
-    global inqueue, line, citem, aaitem
-    aaitem = 0.0
-    citem = ''
-
-    # Read a line if nothing here
-    if inqueue == None:
-	line = cgetline()
-	if curwnd==prompt_window:
-	    clrscr()
-	    setwnd(message_window)
-	    clrscr()
-        # Skip leading white space
-        line = line.lstrip()
-        if line:
-            inqueue = line.split()
-        else:
-            inqueue = []
+class sstscanner:
+    def __init__(self):
+        self.type = None
+        self.token = None
+        self.real = 0.0
+        self.inqueue = []
+    def next(self):
+        # Get a token from the user
+        self.real = 0.0
+        self.token = ''
+        # Read a line if nothing here
+        if self.inqueue == None:
+            line = cgetline()
+            if curwnd==prompt_window:
+                clrscr()
+                setwnd(message_window)
+                clrscr()
+            # Skip leading white space
+            line = line.lstrip()
+            if line:
+                self.inqueue = line.split()
+            else:
+                self.inqueue = []
+                self.type = IHEOL
+                return IHEOL
+        elif not self.inqueue:
+            self.type = IHEOL
             return IHEOL
-    elif not inqueue:
-        return IHEOL
-    # From here on in it's all looking at the queue
-    citem = inqueue.pop(0)
-    if citem == IHEOL:
-        return IHEOL
-    try:
-        aaitem = float(citem)
-        return IHREAL
-    except ValueError:
-        pass
-    # Treat as alpha
-    citem = citem.lower()
-    return IHALPHA
+        # From here on in it's all looking at the queue
+        self.token = self.inqueue.pop(0)
+        if self.token == IHEOL:
+            self.type = IHEOL
+            return IHEOL
+        try:
+            self.real = float(self.token)
+            self.type = IHREAL
+            return IHREAL
+        except ValueError:
+            pass
+        # Treat as alpha
+        self.token = self.token.lower()
+        self.type = IHALPHA
+        self.real = None
+        return IHALPHA
+    def push(self, toklist):
+        self.inqueue += toklist
+    def chew(self):
+        # Demand input for next scan
+        self.inqueue = None
+        self.real = self.token = None
+    def chew2(self):
+        # return IHEOL next time 
+        self.inqueue = []
+        self.real = self.token = None
+    def sees(self, s):
+        # compares s to item and returns true if it matches to the length of s
+        return s.startswith(self.token)
+    def int(self):
+        # Round token value to nearest integer
+        return int(round(scanner.real + 0.5))
 
 def ja():
     # yes-or-no confirmation 
-    chew()
+    scanner.chew()
     while True:
-	scan()
-	chew()
-	if citem == 'y':
+	scanner.next()
+	scanner.chew()
+	if scanner.token == 'y':
 	    return True
-	if citem == 'n':
+	if scanner.token == 'n':
 	    return False
 	proutn(_("Please answer with \"y\" or \"n\": "))
 
 def huh():
     # complain about unparseable input 
-    chew()
+    scanner.chew()
     skip(1)
     prout(_("Beg your pardon, Captain?"))
 
-def isit(s):
-    # compares s to citem and returns true if it matches to the length of s
-    return s.startswith(citem)
 
 def debugme():
     # access to the internals for debugging 
@@ -6652,9 +6665,9 @@
 	    proutn("Kill ")
 	    proutn(device[i])
 	    proutn("? ")
-	    chew()
-	    key = scan()
-            if key == IHALPHA and isit("y"):
+	    scanner.chew()
+	    key = scanner.next()
+            if key == IHALPHA and scanner.sees("y"):
 		game.damage[i] = 10.0
     proutn("Examine/change events? ")
     if ja() == True:
@@ -6683,32 +6696,32 @@
 	    else:
 		proutn("never")
 	    proutn("? ")
-	    chew()
-	    key = scan()
+	    scanner.chew()
+	    key = scanner.next()
 	    if key == 'n':
 		unschedule(i)
-		chew()
+		scanner.chew()
 	    elif key == IHREAL:
-		ev = schedule(i, aaitem)
+		ev = schedule(i, scanner.real)
 		if i == FENSLV or i == FREPRO:
-		    chew()
+		    scanner.chew()
 		    proutn("In quadrant- ")
-		    key = scan()
+		    key = scanner.next()
 		    # IHEOL says to leave coordinates as they are 
 		    if key != IHEOL:
 			if key != IHREAL:
 			    prout("Event %d canceled, no x coordinate." % (i))
 			    unschedule(i)
 			    continue
-			w.x = int(round(aaitem))
-			key = scan()
+			w.x = int(round(scanner.real))
+			key = scanner.next()
 			if key != IHREAL:
 			    prout("Event %d canceled, no y coordinate." % (i))
 			    unschedule(i)
 			    continue
-			w.y = int(round(aaitem))
+			w.y = int(round(scanner.real))
 			ev.quadrant = w
-	chew()
+	scanner.chew()
     proutn("Induce supernova here? ")
     if ja() == True:
 	game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova = True
@@ -6717,8 +6730,7 @@
 if __name__ == '__main__':
     try:
         global line, thing, game, idebug
-        game = citem = aaitem = inqueue = None
-        line = ''
+        game = None
         thing = coord()
         thing.angry = False
         game = gamestate()
@@ -6767,17 +6779,15 @@
             logfp.write("# seed %s\n" % seed)
             logfp.write("# options %s\n" % " ".join(arguments))
         random.seed(seed)
-        if arguments:
-            inqueue = arguments
-        else:
-            inqueue = None
+        scanner = sstscanner()
+        scanner.push(arguments)
         try:
             iostart()
             while True: # Play a game 
                 setwnd(fullscreen_window)
                 clrscr()
                 prelim()
-                setup(needprompt=not inqueue)
+                setup()
                 if game.alldone:
                     score()
                     game.alldone = False
@@ -6789,9 +6799,9 @@
                 if game.tourn and game.alldone:
                     proutn(_("Do you want your score recorded?"))
                     if ja() == True:
-                        chew2()
+                        scanner.chew2()
                         freeze(False)
-                chew()
+                scanner.chew()
                 proutn(_("Do you want to play again? "))
                 if not ja():
                     break



From esr at mail.berlios.de  Sun Oct  8 08:35:39 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sun, 8 Oct 2006 08:35:39 +0200
Subject: [Sst-commit-watch] r706 - trunk/src
Message-ID: <200610080635.k986ZdED010228@sheep.berlios.de>

Author: esr
Date: 2006-10-08 08:35:38 +0200 (Sun, 08 Oct 2006)
New Revision: 706

Modified:
   trunk/src/sst.py
Log:
Simplify some corner cases in the scanner code.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-08 06:19:28 UTC (rev 705)
+++ trunk/src/sst.py	2006-10-08 06:35:38 UTC (rev 706)
@@ -6365,6 +6365,8 @@
 		if game.options & OPTION_CURSES:
 		    makechart()
 		continue
+            elif scanner.token == "":
+                continue
 	    game.ididit = False
 	    clrscr()
 	    setwnd(message_window)
@@ -6375,7 +6377,7 @@
                 cmd = candidates[0]
                 break
             elif candidates and not (game.options & OPTION_PLAIN):
-                prout("Commands with that prefix: " + " ".join(candidates))
+                prout("Commands with prefix '%s': %s" % (scanner.token, " ".join(candidates)))
             else:
                 listCommands()
                 continue
@@ -6568,24 +6570,21 @@
         # Get a token from the user
         self.real = 0.0
         self.token = ''
-        # Read a line if nothing here
-        if self.inqueue == None:
+        # Fill the token quue if nothing here
+        while self.inqueue == None:
             line = cgetline()
             if curwnd==prompt_window:
                 clrscr()
                 setwnd(message_window)
                 clrscr()
+            if line == '':
+                return None
             # Skip leading white space
             line = line.lstrip()
-            if line:
-                self.inqueue = line.split()
+            if not line:
+                continue
             else:
-                self.inqueue = []
-                self.type = IHEOL
-                return IHEOL
-        elif not self.inqueue:
-            self.type = IHEOL
-            return IHEOL
+                self.inqueue = line.lstrip().split() + [IHEOL] 
         # From here on in it's all looking at the queue
         self.token = self.inqueue.pop(0)
         if self.token == IHEOL:



From esr at mail.berlios.de  Sun Oct  8 09:59:36 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sun, 8 Oct 2006 09:59:36 +0200
Subject: [Sst-commit-watch] r707 - trunk/src
Message-ID: <200610080759.k987xair016726@sheep.berlios.de>

Author: esr
Date: 2006-10-08 09:59:35 +0200 (Sun, 08 Oct 2006)
New Revision: 707

Modified:
   trunk/src/sst.py
Log:
Torpedo logic still isn't right, but we're getting there.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-08 06:35:38 UTC (rev 706)
+++ trunk/src/sst.py	2006-10-08 07:59:35 UTC (rev 707)
@@ -602,9 +602,9 @@
 def randreal(*args):
     v = random.random()
     if len(args) == 1:
-        v *= args[0] 		# returns from [0, a1)
+        v *= args[0] 		# returns from [0, args[0])
     elif len(args) == 2:
-        v = args[0] + v*args[1]	# returns from [a1, a2)
+        v = args[0] + v*(args[1]-args[0])	# returns from [args[0], args[1])
     #logfp.write("# randreal%s -> %s at %s\n" % (args, v, traceback.extract_stack()[-2][1:]))
     return v
 
@@ -1073,7 +1073,7 @@
     while here.x != id.x:
         #print "Moving in X", delta
         here.x += delta.x
-        if game.quad[here.kloc.x][here.y]==IHDOT:
+        if game.quad[here.x][here.y]==IHDOT:
             game.tholian.move(here)
     # move in y axis 
     while here.y != id.y:
@@ -1114,7 +1114,6 @@
 	    if scanner.sees("transfer"):
 		action = "NRG"
 	    else:
-		scanner.chew()
 		if damaged(DSHIELD):
 		    prout(_("Shields damaged and down."))
 		    return
@@ -1336,7 +1335,7 @@
 	if not VALID_SECTOR(w.x, w.y):
 	    break
 	iquad=game.quad[w.x][w.y]
-	tracktorpedo(w, step, number, nburst, iquad)
+	tracktorpedo(origin, w, step, number, nburst, iquad)
 	if iquad==IHDOT:
 	    continue
 	# hit something 
@@ -1562,7 +1561,7 @@
     for (i, j) in enumerate(cdam):
 	proutn(device[j])
         if skipcount % 3 == 2 and i < len(cdam)-1:
-            skip()
+            skip(1)
         skipcount += 1
         if i < len(cdam)-1:
             proutn(_(" and "))
@@ -1844,17 +1843,17 @@
 	if key != IHREAL:
 	    huh()
 	    return
-	targ[i].x = scanner.real
+	targ[i].x = scanner.int()
 	key = scanner.next()
 	if key != IHREAL:
 	    huh()
 	    return
-	targ[i].y = scanner.real
+	targ[i].y = scanner.int()
 	course[i] = targetcheck(targ[i])
         if course[i] == None:
 	    return
     scanner.chew()
-    if i == 1 and key == IHEOL:
+    if i == 0 and key == IHEOL:
 	# prompt for each one 
 	for i in range(n):
 	    proutn(_("Target sector for torpedo number %d- ") % (i+1))
@@ -1862,12 +1861,12 @@
 	    if key != IHREAL:
 		huh()
 		return
-	    targ[i].x = int(scanner.real-0.5)
+	    targ[i].x = scanner.int()
 	    key = scanner.next()
 	    if key != IHREAL:
 		huh()
 		return
-	    targ[i].y = int(scanner.real-0.5)
+	    targ[i].y = scanner.int()
 	    scanner.chew()
             course[i] = targetcheck(targ[i])
             if course[i] == None:
@@ -1949,6 +1948,7 @@
     nenhr2 = len(game.enemies); kk=0
     w = coord()
     skip(1)
+    print "Hits are:", hits
     for (k, wham) in enumerate(hits):
 	if wham==0:
 	    continue
@@ -3707,13 +3707,13 @@
 	#nosound()
         pass
 
-def tracktorpedo(w, step, i, n, iquad):
+def tracktorpedo(origin, w, step, i, n, iquad):
     "Torpedo-track animation." 
     if not game.options & OPTION_CURSES:
 	if step == 1:
 	    if n != 1:
 		skip(1)
-		proutn(_("Track for torpedo number %d-  ") % i)
+		proutn(_("Track for %s torpedo number %d-  ") % (game.quad[origin.x][origin.y],i+1))
 	    else:
 		skip(1)
 		proutn(_("Torpedo track- "))
@@ -5990,7 +5990,7 @@
 	    return True
         if scanner.sees("regular"):
 	    break
-	proutn(_("What is \"%s\"?"), scanner.token)
+	proutn(_("What is \"%s\"?") % scanner.token)
 	scanner.chew()
     while game.length==0 or game.skill==SKILL_NONE:
 	if scanner.next() == IHALPHA:
@@ -6571,7 +6571,7 @@
         self.real = 0.0
         self.token = ''
         # Fill the token quue if nothing here
-        while self.inqueue == None:
+        while not self.inqueue:
             line = cgetline()
             if curwnd==prompt_window:
                 clrscr()
@@ -6616,7 +6616,7 @@
         return s.startswith(self.token)
     def int(self):
         # Round token value to nearest integer
-        return int(round(scanner.real + 0.5))
+        return int(round(scanner.real))
 
 def ja():
     # yes-or-no confirmation 



From esr at mail.berlios.de  Sun Oct  8 11:00:10 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sun, 8 Oct 2006 11:00:10 +0200
Subject: [Sst-commit-watch] r708 - trunk/src
Message-ID: <200610080900.k9890AMb023574@sheep.berlios.de>

Author: esr
Date: 2006-10-08 11:00:09 +0200 (Sun, 08 Oct 2006)
New Revision: 708

Modified:
   trunk/src/sst.py
Log:
Use object methods for vector calculations.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-08 07:59:35 UTC (rev 707)
+++ trunk/src/sst.py	2006-10-08 09:00:09 UTC (rev 708)
@@ -206,11 +206,6 @@
 def VALID_QUADRANT(x, y):	return ((x)>=0 and (x)<GALSIZE and (y)>=0 and (y)<GALSIZE)
 def VALID_SECTOR(x, y):	return ((x)>=0 and (x)<QUADSIZE and (y)>=0 and (y)<QUADSIZE)
 
-def square(i):		return ((i)*(i))
-def distance(c1, c2):	return math.sqrt(square(c1.x - c2.x) + square(c1.y - c2.y))
-def invalidate(w):	w.x = w.y = 0
-def is_valid(w):	return (w.x != 0 and w.y != 0)
-
 # How to represent features
 IHR = 'R',
 IHK = 'K',
@@ -249,7 +244,12 @@
         return coord(self.x+self.x, self.y+self.y)
     def __sub__(self, other):
         return coord(self.x-other.x, self.y-other.y)
-    def distance(self, other):
+    def __mul__(self, other):
+        return coord(self.x*other, self.y*other)
+    def __rmul__(self, other):
+        return coord(self.x*other, self.y*other)
+    def distance(self, other=None):
+        if not other: other = coord(0, 0)
         return math.sqrt((self.x - other.x)**2 + (self.y - other.y)**2)
     def sgn(self):
         s = coord()
@@ -262,6 +262,8 @@
         else:
             s.y = self.y / abs(self.y)
         return s
+    def course(self):
+        return 1.90985*math.atan2(self.y, self.x)
     def scatter(self):
         s = coord()
         s.x = self.x + randrange(-1, 2)
@@ -435,7 +437,7 @@
         if loc:
             self.kloc = copy.copy(loc)
             game.quad[self.kloc.x][self.kloc.y] = self.type
-            self.kdist = self.kavgd = distance(game.sector, loc)
+            self.kdist = self.kavgd = (game.sector - loc).distance()
         else:
             self.kloc = coord()
             self.kdist = self.kavgd = None
@@ -741,9 +743,9 @@
 	    motion = ((forces + randreal(200))/150.0) - 5.0
 	else:
             if forces > 1000.0: # Very strong -- move in for kill 
-		motion = (1.0-square(randreal()))*dist1 + 1.0
+		motion = (1.0 - randreal())**2 * dist1 + 1.0
 	    if game.condition=="docked" and (game.options & OPTION_BASE): # protected by base -- back off ! 
-		motion -= game.skill*(2.0-square(randreal()))
+		motion -= game.skill*(2.0-randreal()**2)
 	if idebug:
 	    proutn("=== MOTION = %d, FORCES = %1.2f, " % (motion, forces))
 	# don't move if no motion 
@@ -947,7 +949,7 @@
 	    return
 	sc = game.state.kscmdr
 	for i in range(game.state.rembase):
-	    basetbl.append((i, distance(game.state.baseq[i], sc)))
+	    basetbl.append((i, (game.state.baseq[i] - sc).distance()))
 	if game.state.rembase > 1:
             basetbl.sort(lambda x, y: cmp(x[1]. y[1]))
 	# look for nearest base without a commander, no Enterprise, and
@@ -1348,7 +1350,7 @@
 	    crmshp()
 	    prout(".")
 	    hit = 700.0 + randreal(100) - \
-		1000.0 * distance(w, origin) * math.fabs(math.sin(bullseye-angle))
+		1000.0 * (w-origin).distance() * math.fabs(math.sin(bullseye-angle))
 	    newcnd(); # we're blown out of dock 
 	    # We may be displaced. 
 	    if game.landed or game.condition=="docked":
@@ -1385,7 +1387,7 @@
 		    break
 	    kp = math.fabs(e.kpower)
 	    h1 = 700.0 + randrange(100) - \
-		1000.0 * distance(w, origin) * math.fabs(math.sin(bullseye-angle))
+		1000.0 * (w-origin).distance() * math.fabs(math.sin(bullseye-angle))
 	    h1 = math.fabs(h1)
 	    if kp < h1:
 		h1 = kp
@@ -1443,7 +1445,7 @@
 	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = None
 	    game.iplnet.pclass = "destroyed"
 	    game.iplnet = None
-	    invalidate(game.plnet)
+	    game.plnet.invalidate()
 	    game.quad[w.x][w.y] = IHDOT
 	    if game.landed:
 		# captain perishes on planet 
@@ -1456,7 +1458,7 @@
 	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = None
 	    game.iplnet.pclass = "destroyed"
 	    game.iplnet = None
-	    invalidate(game.plnet)
+	    game.plnet.invalidate()
 	    game.quad[w.x][w.y] = IHDOT
 	    if game.landed:
 		# captain perishes on planet 
@@ -1502,7 +1504,7 @@
 	    return None
 	elif iquad == IHT:  # Hit a Tholian 
 	    h1 = 700.0 + randrange(100) - \
-		1000.0 * distance(w, origin) * math.fabs(math.sin(bullseye-angle))
+		1000.0 * (w-origin).distance() * math.fabs(math.sin(bullseye-angle))
 	    h1 = math.fabs(h1)
 	    if h1 >= 600:
 		game.quad[w.x][w.y] = IHDOT
@@ -1533,7 +1535,7 @@
 	game.quad[jw.x][jw.y]=iquad
 	prout(_(" displaced by blast to Sector %s ") % jw)
 	for ll in range(len(game.enemies)):
-	    game.enemies[ll].kdist = game.enemies[ll].kavgd = distance(game.sector,game.enemies[ll].kloc)
+	    game.enemies[ll].kdist = game.enemies[ll].kavgd = (game.sector-game.enemies[ll]).kloc.distance()
         game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
 	return None
     skip(1)
@@ -1629,7 +1631,7 @@
 	    hit = enemy.kpower*math.pow(dustfac,enemy.kavgd)
 	    enemy.kpower *= 0.75
 	else: # Enemy uses photon torpedo 
-	    course = 1.90985*math.atan2(game.sector.y-enemy.kloc.y, enemy.kloc.x-game.sector.x)
+	    course = (enemy.kloc - game.sector).course()
 	    hit = 0
 	    proutn(_("***TORPEDO INCOMING"))
 	    if not damaged(DSRSENS):
@@ -1779,16 +1781,15 @@
     if not VALID_SECTOR(w.x, w.y):
 	huh()
 	return None
-    deltx = 0.1*(w.y - game.sector.y)
-    delty = 0.1*(w.x - game.sector.x)
-    if deltx==0 and delty== 0:
+    delt = 0.1*(w - game.sector)
+    if delt.x==0 and delt.y==0:
 	skip(1)
 	prout(_("Spock-  \"Bridge to sickbay.  Dr. McCoy,"))
 	prout(_("  I recommend an immediate review of"))
 	prout(_("  the Captain's psychological profile.\""))
 	scanner.chew()
 	return None
-    return 1.90985932*math.atan2(deltx, delty)
+    return delt.course()
 
 def photon():
     # launch photon torpedo
@@ -2161,7 +2162,7 @@
 		msgflag = False
 		rpow = 0.0
 	    if damaged(DSRSENS) and \
-               not game.sector.distance(aim)<2**0.5 and ienm in (IHC, IHS):
+                   (aim-game.sector).distance()>2**0.5 and ienm in (IHC, IHS):
 		cramen(ienm)
 		prout(_(" can't be located without short range scan."))
 		scanner.chew()
@@ -2371,7 +2372,7 @@
             game.battle = hold
             game.isatb = 0
         else:
-            invalidate(game.battle)
+            game.battle.invalidate()
 
     if idebug:
 	prout("=== EVENTS from %.2f to %.2f:" % (game.state.date, fintim))
@@ -2468,7 +2469,7 @@
                  (game.torps < 5 or damaged(DPHOTON))):
 		# Tractor-beam her! 
 		istract = ictbeam = True
-                tractorbeam(distance(game.state.kscmdr, game.quadrant))
+                tractorbeam((game.state.kscmdr-game.quadrant).distance())
 	    else:
 		return
 	elif evcode == FTBEAM: # Tractor beam 
@@ -2476,7 +2477,7 @@
                 unschedule(FTBEAM)
                 continue
             i = randrange(game.state.remcom)
-            yank = distance(game.state.kcmdr[i], game.quadrant)
+            yank = (game.state.kcmdr[i]-game.quadrant).distance()
             if istract or game.condition == "docked" or yank == 0:
                 # Drats! Have to reschedule 
                 schedule(FTBEAM, 
@@ -2543,7 +2544,7 @@
 		if i > game.state.remcom or game.state.rembase == 0 or \
 		    not game.state.galaxy[game.battle.x][game.battle.y].starbase:
 		    # No action to take after all 
-		    invalidate(game.battle)
+		    game.battle.invalidate()
 		    continue
             destroybase()
 	elif evcode == FSCMOVE: # Supercommander moves 
@@ -2803,7 +2804,7 @@
                     prout(_(" destroyed."))
                     game.iplnet.pclass = "destroyed"
                     game.iplnet = None
-                    invalidate(game.plnet)
+                    game.plnet.invalidate()
                     if game.landed:
                         finish(FPNOVA)
                         return
@@ -2815,7 +2816,7 @@
                             break
                     game.state.baseq[i] = game.state.baseq[game.state.rembase]
                     game.state.rembase -= 1
-                    invalidate(game.base)
+                    game.base.invalidate()
                     game.state.basekl += 1
                     newcnd()
                     crmena(True, IHB, "sector", neighbor)
@@ -2936,13 +2937,12 @@
 	prouts(_("***RED ALERT!  RED ALERT!"))
 	skip(1)
 	prout(_("***Incipient supernova detected at Sector %s") % ns)
-	if square(ns.x-game.sector.x) + square(ns.y-game.sector.y) <= 2.1:
+	if (ns-game - sector).distance() <= 2.1**0.5:
 	    proutn(_("Emergency override attempts t"))
 	    prouts("***************")
 	    skip(1)
 	    stars()
 	    game.alldone = True
-
     # destroy any Klingons in supernovaed quadrant 
     kldead = game.state.galaxy[nq.x][nq.y].klingons
     game.state.galaxy[nq.x][nq.y].klingons = 0
@@ -2952,17 +2952,13 @@
 	game.iscate = False
 	unschedule(FSCMOVE)
 	unschedule(FSCDBAS)
-    if game.state.remcom:
-	maxloop = game.state.remcom
-	for l in range(maxloop):
-	    if game.state.kcmdr[l] == nq:
-		game.state.kcmdr[l] = game.state.kcmdr[game.state.remcom]
-		invalidate(game.state.kcmdr[game.state.remcom])
-		game.state.remcom -= 1
-		kldead -= 1
-		if game.state.remcom==0:
-		    unschedule(FTBEAM)
-		break
+    survivors = filter(lambda w: w != nq, game.state.kcmdr)
+    comkills = len(game.state.kcmdr) - len(survivors)
+    game.state.kcmdr = survivors
+    kldead -= comkills
+    game.state.remcom -= comkills
+    if game.state.remcom==0:
+        unschedule(FTBEAM)
     game.state.remkl -= kldead
     # destroy Romulans and planets in supernovaed quadrant 
     nrmdead = game.state.galaxy[nq.x][nq.y].romulans
@@ -2979,7 +2975,7 @@
 	for loop in range(maxloop):
 	    if game.state.baseq[loop] == nq:
 		game.state.baseq[loop] = game.state.baseq[game.state.rembase]
-		invalidate(game.state.baseq[game.state.rembase])
+		game.state.baseq[game.state.rembase].invalidate()
 		game.state.rembase -= 1
 		break
     # If starship caused supernova, tally up destruction 
@@ -3775,16 +3771,16 @@
     def no_quad_change():
         # No quadrant change -- compute new average enemy distances 
         game.quad[game.sector.x][game.sector.y] = game.ship
-        if len(game.enemies):
-            for m in range(len(game.enemies)):
-                finald = distance(w, game.enemies[m].kloc)
-                game.enemies[m].kavgd = 0.5 * (finald+game.enemies[m].kdist)
-                game.enemies[m].kdist = finald
+        if game.enemies:
+            for enemy in game.enemies:
+                finald = (w-game.enemy.kloc).distance()
+                enemy.kavgd = 0.5 * (finald + ememy.kdist)
+                enemy.kdist = finald
             game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
             if not game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
                 attack(torps_ok=False)
-            for m in range(len(game.enemies)):
-                game.enemies[m].kavgd = game.enemies[m].kdist
+            for enemy in game.enemies:
+                enemy.kavgd = enemy.kdist
         newcnd()
         drawmaps(0)
         setwnd(message_window)
@@ -3823,9 +3819,9 @@
 		# Don't do it if being pushed by Nova 
 		if len(game.enemies) != 0 and not novapush:
 		    newcnd()
-		    for m in range(len(game.enemies)):
-			finald = distance(w, game.enemies[m].kloc)
-			game.enemies[m].kavgd = 0.5 * (finald + game.enemies[m].kdist)
+		    for enemy in game.enemies:
+			finald = (w - enemy.kloc).distance()
+			enemy.kavgd = 0.5 * (finald + enemy.kdist)
 		    #
 		    # Stas Sergeev added the condition
 		    # that attacks only happen if Klingons
@@ -3888,7 +3884,7 @@
 	    if iquad != IHDOT:
 		# object encountered in flight path 
 		stopegy = 50.0*game.dist/game.optime
-		game.dist = distance(game.sector, w) / (QUADSIZE * 1.0)
+		game.dist = (game.sector - w).distance() / (QUADSIZE * 1.0)
                 if iquad in (IHT, IHK, IHC, IHS, IHR, IHQUEST):
 		    game.sector = w
                     for enemy in game.enemies:
@@ -3953,7 +3949,7 @@
     if game.inorbit:
 	prout(_("You must first leave standard orbit."))
 	return
-    if not is_valid(game.base) or abs(game.sector.x-game.base.x) > 1 or abs(game.sector.y-game.base.y) > 1:
+    if not game.base.is_valid() or abs(game.sector.x-game.base.x) > 1 or abs(game.sector.y-game.base.y) > 1:
 	crmshp()
 	prout(_(" not adjacent to base."))
 	return
@@ -4115,8 +4111,8 @@
 	skip(1)
 	prout(_("Helmsman Sulu- \"Aye, Sir.\""))
     # Course actually laid in.
-    game.dist = math.sqrt(deltax*deltax + deltay*deltay)
-    game.direc = math.atan2(deltax, deltay)*1.90985932
+    game.dist = coord(deltax, deltay).distance()
+    game.direc = coord(deltax, deltay).course()
     if game.direc < 0.0:
 	game.direc += 12.0
     scanner.chew()
@@ -4227,7 +4223,7 @@
     if game.warpfac > 6.0:
 	# Decide if engine damage will occur
         # ESR: Seems wrong. Probability of damage goes *down* with distance? 
-	prob = game.dist*square(6.0-game.warpfac)/66.666666666
+	prob = game.dist*(6.0-game.warpfac)**2/66.666666666
 	if prob > randreal():
 	    blooey = True
 	    game.dist = randreal(game.dist)
@@ -4429,7 +4425,7 @@
 	game.isatb = 0
 	unschedule(FCDBAS)
 	unschedule(FSCDBAS)
-	invalidate(game.battle)
+	game.battle.invalidate()
 
 	# Make sure Galileo is consistant -- Snapshot may have been taken
         # when on planet, which would give us two Galileos! 
@@ -4564,11 +4560,11 @@
     game.nhelp += 1
     if game.base.x!=0:
 	# There's one in this quadrant 
-	ddist = distance(game.base, game.sector)
+	ddist = (game.base - game.sector).distance()
     else:
 	ddist = FOREVER
 	for m in range(game.state.rembase):
-	    xdist = QUADSIZE * distance(game.state.baseq[m], game.quadrant)
+	    xdist = QUADSIZE * (game.state.baseq[m] - game.quadrant).distance()
 	    if xdist < ddist:
 		ddist = xdist
 		line = m
@@ -4587,7 +4583,7 @@
 	    # found one -- finish up 
             game.sector = w
 	    break
-    if not is_valid(game.sector):
+    if not game.sector.is_valid():
 	prout(_("You have been lost in space..."))
 	finish(FMATERIALIZE)
 	return
@@ -4786,7 +4782,7 @@
     if damaged(DWARPEN) and damaged(DIMPULS):
 	prout(_("Both warp and impulse engines damaged."))
 	return
-    if not is_valid(game.plnet) or abs(game.sector.x-game.plnet.x) > 1 or abs(game.sector.y-game.plnet.y) > 1:
+    if not game.plnet.is_valid() or abs(game.sector.x-game.plnet.x) > 1 or abs(game.sector.y-game.plnet.y) > 1:
 	crmshp()
 	prout(_(" not adjacent to planet."))
 	skip(1)
@@ -5536,8 +5532,7 @@
     if not VALID_QUADRANT(w1.x, w1.y) or not VALID_SECTOR(w2.x, w2.y):
 	huh()
 	return
-    game.dist = math.sqrt(square(w1.y-game.quadrant.y+0.1*(w2.y-game.sector.y))+
-		square(w1.x-game.quadrant.x+0.1*(w2.x-game.sector.x)))
+    game.dist = ((w1 - game.quadrant) + 0.1 * (w2 - game.sector)).distance()
     wfl = False
     if prompt:
 	prout(_("Answer \"no\" if you don't know the value:"))
@@ -5568,7 +5563,7 @@
 	prout(_("Captain, certainly you can give me one of these."))
     while True:
 	scanner.chew()
-	ttime = (10.0*game.dist)/square(twarp)
+	ttime = (10.0*game.dist)/twarp**2
 	tpower = game.dist*twarp*twarp*twarp*(game.shldup+1)
 	if tpower >= game.energy:
 	    prout(_("Insufficient energy, sir."))
@@ -5832,7 +5827,7 @@
             # so it did them in the opposite order.
             for j in range(1, i):
 		# Improved placement algorithm to spread out bases
-		distq = w.distance(game.state.baseq[j])
+		distq = (w - game.state.baseq[j]).distance()
 		if distq < 6.0*(BASEMAX+1-game.inbase) and withprob(0.75):
 		    contflag = True
 		    if idebug:



From esr at mail.berlios.de  Sun Oct  8 22:36:52 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sun, 8 Oct 2006 22:36:52 +0200
Subject: [Sst-commit-watch] r709 - trunk/src
Message-ID: <200610082036.k98Kaq8Q024161@sheep.berlios.de>

Author: esr
Date: 2006-10-08 22:36:51 +0200 (Sun, 08 Oct 2006)
New Revision: 709

Modified:
   trunk/src/sst.py
Log:
Various minor port fixes.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-08 09:00:09 UTC (rev 708)
+++ trunk/src/sst.py	2006-10-08 20:36:51 UTC (rev 709)
@@ -1535,7 +1535,7 @@
 	game.quad[jw.x][jw.y]=iquad
 	prout(_(" displaced by blast to Sector %s ") % jw)
 	for ll in range(len(game.enemies)):
-	    game.enemies[ll].kdist = game.enemies[ll].kavgd = (game.sector-game.enemies[ll]).kloc.distance()
+	    game.enemies[ll].kdist = game.enemies[ll].kavgd = (game.sector-game.enemies[ll].kloc).distance()
         game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
 	return None
     skip(1)
@@ -1627,11 +1627,11 @@
 	    if game.condition == "docked":
 		continue; # Don't waste the effort! 
 	    attempt = True; # Attempt to attack 
-	    dustfac = 0.8 + randreal(0.5)
+	    dustfac = randreal(0.8, 0.85)
 	    hit = enemy.kpower*math.pow(dustfac,enemy.kavgd)
 	    enemy.kpower *= 0.75
 	else: # Enemy uses photon torpedo 
-	    course = (enemy.kloc - game.sector).course()
+	    course = 1.90985*math.atan2(game.sector.y-enemy.kloc.y, enemy.kloc.x-game.sector.x)
 	    hit = 0
 	    proutn(_("***TORPEDO INCOMING"))
 	    if not damaged(DSRSENS):
@@ -1781,15 +1781,16 @@
     if not VALID_SECTOR(w.x, w.y):
 	huh()
 	return None
-    delt = 0.1*(w - game.sector)
-    if delt.x==0 and delt.y==0:
+    deltx = 0.1*(w.y - game.sector.y)
+    delty = 0.1*(w.x - game.sector.x)
+    if deltx==0 and delty== 0:
 	skip(1)
 	prout(_("Spock-  \"Bridge to sickbay.  Dr. McCoy,"))
 	prout(_("  I recommend an immediate review of"))
 	prout(_("  the Captain's psychological profile.\""))
 	scanner.chew()
 	return None
-    return delt.course()
+    return 1.90985932*math.atan2(deltx, delty)
 
 def photon():
     # launch photon torpedo
@@ -2162,7 +2163,7 @@
 		msgflag = False
 		rpow = 0.0
 	    if damaged(DSRSENS) and \
-                   (aim-game.sector).distance()>2**0.5 and ienm in (IHC, IHS):
+               not game.sector.distance(aim)<2**0.5 and ienm in (IHC, IHS):
 		cramen(ienm)
 		prout(_(" can't be located without short range scan."))
 		scanner.chew()
@@ -2937,7 +2938,7 @@
 	prouts(_("***RED ALERT!  RED ALERT!"))
 	skip(1)
 	prout(_("***Incipient supernova detected at Sector %s") % ns)
-	if (ns-game - sector).distance() <= 2.1**0.5:
+	if (ns.x-game.sector.x)**2 + (ns.y-game.sector.y)**2 <= 2.1:
 	    proutn(_("Emergency override attempts t"))
 	    prouts("***************")
 	    skip(1)
@@ -2969,15 +2970,9 @@
 	if game.state.planets[loop].w == nq:
 	    game.state.planets[loop].pclass = "destroyed"
 	    npdead += 1
-    # Destroy any base in supernovaed quadrant 
-    if game.state.rembase:
-	maxloop = game.state.rembase
-	for loop in range(maxloop):
-	    if game.state.baseq[loop] == nq:
-		game.state.baseq[loop] = game.state.baseq[game.state.rembase]
-		game.state.baseq[game.state.rembase].invalidate()
-		game.state.rembase -= 1
-		break
+    # Destroy any base in supernovaed quadrant
+    game.state.baseq = filter(lambda x: x != nq, game.state.baseq)
+    game.state.rembase = len(game.state.baseq)
     # If starship caused supernova, tally up destruction 
     if induced:
 	game.state.starkl += game.state.galaxy[nq.x][nq.y].stars
@@ -3934,7 +3929,7 @@
                 # We're here!
 		no_quad_change()
                 return
-	game.dist = distance(game.sector, w) / (QUADSIZE * 1.0)
+	game.dist = (game.sector - w).distance() / (QUADSIZE * 1.0)
 	game.sector = w
     final = game.sector
     no_quad_change()
@@ -4111,8 +4106,8 @@
 	skip(1)
 	prout(_("Helmsman Sulu- \"Aye, Sir.\""))
     # Course actually laid in.
-    game.dist = coord(deltax, deltay).distance()
-    game.direc = coord(deltax, deltay).course()
+    game.dist = math.sqrt(deltax*deltax + deltay*deltay)
+    game.direc = math.atan2(deltax, deltay)*1.90985932
     if game.direc < 0.0:
 	game.direc += 12.0
     scanner.chew()
@@ -5532,7 +5527,8 @@
     if not VALID_QUADRANT(w1.x, w1.y) or not VALID_SECTOR(w2.x, w2.y):
 	huh()
 	return
-    game.dist = ((w1 - game.quadrant) + 0.1 * (w2 - game.sector)).distance()
+    game.dist = math.sqrt((w1.y-game.quadrant.y+0.1*(w2.y-game.sector.y))**2+
+		(w1.x-game.quadrant.x+0.1*(w2.x-game.sector.x))**2)
     wfl = False
     if prompt:
 	prout(_("Answer \"no\" if you don't know the value:"))
@@ -5861,7 +5857,7 @@
         if krem <= 0:
             break
     # Position Klingon Commander Ships
-    for i in range(1, game.incom+1):
+    for i in range(game.incom):
         while True:
             w = randplace(GALSIZE)
 	    if (game.state.galaxy[w.x][w.y].klingons or withprob(0.25)) and \



From esr at mail.berlios.de  Sun Oct  8 23:02:00 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sun, 8 Oct 2006 23:02:00 +0200
Subject: [Sst-commit-watch] r710 - trunk/src
Message-ID: <200610082102.k98L20K6027575@sheep.berlios.de>

Author: esr
Date: 2006-10-08 23:01:59 +0200 (Sun, 08 Oct 2006)
New Revision: 710

Modified:
   trunk/src/sst.py
Log:
Found the bad distance/direction calculation.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-08 20:36:51 UTC (rev 709)
+++ trunk/src/sst.py	2006-10-08 21:01:59 UTC (rev 710)
@@ -251,6 +251,9 @@
     def distance(self, other=None):
         if not other: other = coord(0, 0)
         return math.sqrt((self.x - other.x)**2 + (self.y - other.y)**2)
+    def bearing(self, other=None):
+        if not other: other = coord(0, 0)
+        return 1.90985*math.atan2(self.x-other.x, self.y-other.y)
     def sgn(self):
         s = coord()
         if self.x == 0:
@@ -262,8 +265,6 @@
         else:
             s.y = self.y / abs(self.y)
         return s
-    def course(self):
-        return 1.90985*math.atan2(self.y, self.x)
     def scatter(self):
         s = coord()
         s.x = self.x + randrange(-1, 2)
@@ -1631,6 +1632,7 @@
 	    hit = enemy.kpower*math.pow(dustfac,enemy.kavgd)
 	    enemy.kpower *= 0.75
 	else: # Enemy uses photon torpedo 
+	    #course2 = (enemy.kloc-game.sector).bearing()
 	    course = 1.90985*math.atan2(game.sector.y-enemy.kloc.y, enemy.kloc.x-game.sector.x)
 	    hit = 0
 	    proutn(_("***TORPEDO INCOMING"))
@@ -1777,20 +1779,19 @@
     return
 
 def targetcheck(w):
-    # Return None if target is invalid 
+    # Return None if target is invalid, otherwise return a course angle
     if not VALID_SECTOR(w.x, w.y):
 	huh()
 	return None
-    deltx = 0.1*(w.y - game.sector.y)
-    delty = 0.1*(w.x - game.sector.x)
-    if deltx==0 and delty== 0:
+    delta = 0.1*(w - game.sector)
+    if delta.x==0 and delta.y== 0:
 	skip(1)
 	prout(_("Spock-  \"Bridge to sickbay.  Dr. McCoy,"))
 	prout(_("  I recommend an immediate review of"))
 	prout(_("  the Captain's psychological profile.\""))
 	scanner.chew()
 	return None
-    return 1.90985932*math.atan2(deltx, delty)
+    return delta.bearing()
 
 def photon():
     # launch photon torpedo
@@ -3768,8 +3769,8 @@
         game.quad[game.sector.x][game.sector.y] = game.ship
         if game.enemies:
             for enemy in game.enemies:
-                finald = (w-game.enemy.kloc).distance()
-                enemy.kavgd = 0.5 * (finald + ememy.kdist)
+                finald = (w-enemy.kloc).distance()
+                enemy.kavgd = 0.5 * (finald + enemy.kdist)
                 enemy.kdist = finald
             game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
             if not game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
@@ -4080,8 +4081,9 @@
 	    else:
 		prout(_("Ensign Chekov- \"Course laid in, Captain.\""))
         # the actual deltas get computed here
-	deltax = dquad.y-game.quadrant.y + 0.1*(dsect.x-game.sector.y)
-	deltay = game.quadrant.x-dquad.x + 0.1*(game.sector.x-dsect.y)
+        delta = coord()
+	delta.x = dquad.y-game.quadrant.y + 0.1*(dsect.x-game.sector.y)
+	delta.y = game.quadrant.x-dquad.x + 0.1*(game.sector.x-dsect.y)
     else: # manual 
 	while key == IHEOL:
 	    proutn(_("X and Y displacements- "))
@@ -4092,22 +4094,22 @@
 	if key != IHREAL:
 	    huh()
 	    return False
-	deltax = scanner.real
+	delta.x = scanner.real
 	key = scanner.next()
 	if key != IHREAL:
 	    huh()
 	    return False
-	deltay = scanner.real
+	delta.y = scanner.real
     # Check for zero movement 
-    if deltax == 0 and deltay == 0:
+    if delta.x == 0 and delta.y == 0:
 	scanner.chew()
 	return False
     if itemp == "verbose" and not isprobe:
 	skip(1)
 	prout(_("Helmsman Sulu- \"Aye, Sir.\""))
     # Course actually laid in.
-    game.dist = math.sqrt(deltax*deltax + deltay*deltay)
-    game.direc = math.atan2(deltax, deltay)*1.90985932
+    game.dist = delta.distance()
+    game.direc = delta.bearing()
     if game.direc < 0.0:
 	game.direc += 12.0
     scanner.chew()



From esr at mail.berlios.de  Mon Oct  9 00:18:26 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 9 Oct 2006 00:18:26 +0200
Subject: [Sst-commit-watch] r711 - trunk/src
Message-ID: <200610082218.k98MIQwO002391@sheep.berlios.de>

Author: esr
Date: 2006-10-09 00:18:25 +0200 (Mon, 09 Oct 2006)
New Revision: 711

Modified:
   trunk/src/sst.py
Log:
Use Python list operations to get rid of a lot of FORTRANish for loops.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-08 21:01:59 UTC (rev 710)
+++ trunk/src/sst.py	2006-10-08 22:18:25 UTC (rev 711)
@@ -281,7 +281,7 @@
 class planet:
     def __init__(self):
         self.name = None	# string-valued if inhabited
-        self.w = coord()	# quadrant located
+        self.quadrant = coord()	# quadrant located
         self.pclass = None	# could be ""M", "N", "O", or "destroyed"
         self.crystals = "absent"# could be "mined", "present", "absent"
         self.known = "unknown"	# could be "unknown", "known", "shuttle_down"
@@ -320,9 +320,7 @@
         self.snap = False	# snapshot taken
         self.crew = 0   	# crew complement
 	self.remkl = 0  	# remaining klingons
-	self.remcom = 0  	# remaining commanders
 	self.nscrem = 0		# remaining super commanders
-	self.rembase = 0	# remaining bases
 	self.starkl = 0 	# destroyed stars
 	self.basekl = 0 	# destroyed bases
 	self.nromrem = 0	# Romulans remaining
@@ -333,11 +331,7 @@
 	self.remres = 0 	# remaining resources
 	self.remtime = 0	# remaining time
         self.baseq = [] 	# Base quadrant coordinates
-        for i in range(BASEMAX):
-            self.baseq.append(coord())
         self.kcmdr = [] 	# Commander quadrant coordinates
-        for i in range(QUADSIZE):
-            self.kcmdr.append(coord())
 	self.kscmdr = coord()	# Supercommander quadrant coordinates
         # the galaxy (subscript 0 not used)
         self.galaxy = fill2d(GALSIZE, lambda i, j: quadrant())
@@ -472,8 +466,6 @@
         self.justin = False	# just entered quadrant
         self.shldup = False	# shields are up
         self.shldchg = False	# shield is changing (affects efficiency)
-        self.comhere = False	# commander here
-        self.ishere = False	# super-commander in quadrant
         self.iscate = False	# super commander is here
         self.ientesc = False	# attempted escape from supercommander
         self.resting = False	# rest time
@@ -537,12 +529,12 @@
         self.height = 0.0	# height of orbit around planet
     def recompute(self):
         # Stas thinks this should be (C expression): 
-        # game.state.remkl + game.state.remcom > 0 ?
-	#	game.state.remres/(game.state.remkl + 4*game.state.remcom) : 99
+        # game.state.remkl + len(game.state.kcmdr) > 0 ?
+	#	game.state.remres/(game.state.remkl + 4*len(game.state.kcmdr)) : 99
         # He says the existing expression is prone to divide-by-zero errors
         # after killing the last klingon when score is shown -- perhaps also
         # if the only remaining klingon is SCOM.
-        game.state.remtime = game.state.remres/(game.state.remkl + 4*game.state.remcom)
+        game.state.remtime = game.state.remres/(game.state.remkl + 4*len(game.state.kcmdr))
 # From enumerated type 'feature'
 IHR = 'R'
 IHK = 'K'
@@ -627,9 +619,8 @@
     if not irun:
 	# avoid intruding on another commander's territory 
 	if enemy.type == IHC:
-	    for n in range(game.state.remcom):
-		if game.state.kcmdr[n] == iq:
-		    return False
+            if iq in game.state.kcmdr:
+                return False
 	    # refuse to leave if currently attacking starbase 
 	    if game.battle == game.quadrant:
 		return False
@@ -651,7 +642,6 @@
     game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons -= 1
     game.state.galaxy[iq.x][iq.y].klingons += 1
     if enemy.type==IHS:
-	game.ishere = False
 	game.iscate = False
 	game.ientesc = False
 	game.isatb = 0
@@ -659,11 +649,10 @@
 	unschedule(FSCDBAS)
 	game.state.kscmdr=iq
     else:
-	for n in range(game.state.remcom):
-	    if game.state.kcmdr[n] == game.quadrant:
-		game.state.kcmdr[n]=iq
+	for cmdr in game.state.kcmdr:
+	    if cmdr == game.quadrant:
+		game.state.kcmdr[n] = iq
 		break
-	game.comhere = False
     return True; # success 
 
 #
@@ -710,11 +699,11 @@
     # tactical movement for the bad guys 
     next = coord(); look = coord()
     irun = False
-    # This should probably be just game.comhere + game.ishere 
+    # This should probably be just (game.quadrant in game.state.kcmdr) + (game.state.kscmdr==game.quadrant) 
     if game.skill >= SKILL_EXPERT:
-	nbaddys = ((game.comhere*2 + game.ishere*2+game.klhere*1.23+game.irhere*1.5)/2.0)
+	nbaddys = (((game.quadrant in game.state.kcmdr)*2 + (game.state.kscmdr==game.quadrant)*2+game.klhere*1.23+game.irhere*1.5)/2.0)
     else:
-	nbaddys = game.comhere + game.ishere
+	nbaddys = (game.quadrant in game.state.kcmdr) + (game.state.kscmdr==game.quadrant)
     dist1 = enemy.kdist
     mdist = int(dist1 + 0.5); # Nearest integer distance 
     # If SC, check with spy to see if should hi-tail it 
@@ -861,11 +850,11 @@
 	prout("== MOVCOM")
     # Figure out which Klingon is the commander (or Supercommander)
     # and do move
-    if game.comhere:
+    if game.quadrant in game.state.kcmdr:
         for enemy in game.enemies:
 	    if enemy.type == IHC:
 		movebaddy(enemy)
-    if game.ishere:
+    if game.state.kscmdr==game.quadrant:
         for enemy in game.enemies:
 	    if enemy.type == IHS:
 		movebaddy(enemy)
@@ -885,22 +874,19 @@
 	game.state.galaxy[iq.x][iq.y].supernova or \
 	game.state.galaxy[iq.x][iq.y].klingons > MAXKLQUAD-1:
 	return 1
-    if avoid:
-	# Avoid quadrants with bases if we want to avoid Enterprise 
-	for i in range(game.state.rembase):
-	    if game.state.baseq[i] == iq:
-		return True
+    # Avoid quadrants with bases if we want to avoid Enterprise 
+    if avoid and iq in game.state.baseq:
+        return True
     if game.justin and not game.iscate:
 	return True
     # do the move 
     game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].klingons -= 1
     game.state.kscmdr = iq
     game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].klingons += 1
-    if game.ishere:
+    if game.state.kscmdr==game.quadrant:
 	# SC has scooted, Remove him from current quadrant 
 	game.iscate=False
 	game.isatb=0
-	game.ishere = False
 	game.ientesc = False
 	unschedule(FSCDBAS)
 	for enemy in game.enemies:
@@ -913,7 +899,7 @@
         game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
     # check for a helpful planet 
     for i in range(game.inplan):
-	if game.state.planets[i].w == game.state.kscmdr and \
+	if game.state.planets[i].quadrant == game.state.kscmdr and \
 	    game.state.planets[i].crystals == "present":
 	    # destroy the planet 
 	    game.state.planets[i].pclass = "destroyed"
@@ -933,7 +919,7 @@
     if idebug:
 	prout("== SUPERCOMMANDER")
     # Decide on being active or passive 
-    avoid = ((game.incom - game.state.remcom + game.inkling - game.state.remkl)/(game.state.date+0.01-game.indate) < 0.1*game.skill*(game.skill+1.0) or \
+    avoid = ((game.incom - len(game.state.kcmdr) + game.inkling - game.state.remkl)/(game.state.date+0.01-game.indate) < 0.1*game.skill*(game.skill+1.0) or \
 	    (game.state.date-game.indate) < 3.0)
     if not game.iscate and avoid:
 	# compute move away from Enterprise 
@@ -944,33 +930,32 @@
 	    idelta.y = game.quadrant.x-game.state.kscmdr.x
     else:
 	# compute distances to starbases 
-	if game.state.rembase <= 0:
+	if not game.state.baseq:
 	    # nothing left to do 
 	    unschedule(FSCMOVE)
 	    return
 	sc = game.state.kscmdr
-	for i in range(game.state.rembase):
-	    basetbl.append((i, (game.state.baseq[i] - sc).distance()))
-	if game.state.rembase > 1:
+        for base in game.state.baseq:
+	    basetbl.append((i, (base - sc).distance()))
+	if game.state.baseq > 1:
             basetbl.sort(lambda x, y: cmp(x[1]. y[1]))
 	# look for nearest base without a commander, no Enterprise, and
         # without too many Klingons, and not already under attack. 
 	ifindit = iwhichb = 0
-	for i2 in range(game.state.rembase):
+	for (i2, base) in enumerate(game.state.baseq):
 	    i = basetbl[i2][0];	# bug in original had it not finding nearest
-	    ibq = game.state.baseq[i]
-	    if ibq == game.quadrant or ibq == game.battle or \
-		game.state.galaxy[ibq.x][ibq.y].supernova or \
-		game.state.galaxy[ibq.x][ibq.y].klingons > MAXKLQUAD-1:
+	    if base == game.quadrant or base == game.battle or \
+		game.state.galaxy[base.x][base.y].supernova or \
+		game.state.galaxy[base.x][base.y].klingons > MAXKLQUAD-1:
 		continue
 	    # if there is a commander, and no other base is appropriate,
-	    #   we will take the one with the commander
-	    for j in range(game.state.remcom):
-		if ibq == game.state.kcmdr[j] and ifindit!= 2:
+	    # we will take the one with the commander
+            for cmdr in game.state.kcmdr:
+		if base == cmdr and ifindit != 2:
 		    ifindit = 2
 		    iwhichb = i
 		    break
-	    if j > game.state.remcom: # no commander -- use this one 
+	    else:	# no commander -- use this one 
 		ifindit = 1
 		iwhichb = i
 		break
@@ -1007,11 +992,10 @@
 		iq.x = game.state.kscmdr.x
 		movescom(iq, avoid)
     # check for a base 
-    if game.state.rembase == 0:
+    if len(game.state.baseq) == 0:
 	unschedule(FSCMOVE)
     else:
-	for i in range(game.state.rembase):
-	    ibq = game.state.baseq[i]
+        for (i, ibq) in enumerate(game.state.baseq):
 	    if ibq == game.state.kscmdr and game.state.kscmdr == game.battle:
 		# attack the base 
 		if avoid:
@@ -1303,7 +1287,7 @@
 	game.damage[dev] += game.optime + extradm
     game.shldup = False
     prout(_("***Shields are down."))
-    if game.state.remkl + game.state.remcom + game.state.nscrem:
+    if game.state.remkl + len(game.state.kcmdr) + game.state.nscrem:
 	announce()
 	damagereport()
     else:
@@ -1427,13 +1411,9 @@
 	elif iquad == IHB: # Hit a base 
 	    skip(1)
 	    prout(_("***STARBASE DESTROYED.."))
-	    for ll in range(game.state.rembase):
-		if game.state.baseq[ll] == game.quadrant:
-		    game.state.baseq[ll]=game.state.baseq[game.state.rembase]
-		    break
+            game.state.baseq = filter(lambda x: x != game.quadrant, game.state.baseq)
 	    game.quad[w.x][w.y]=IHDOT
-	    game.state.rembase -= 1
-	    game.base.x=game.base.y=0
+	    game.base.invalidate()
 	    game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase -= 1
 	    game.state.chart[game.quadrant.x][game.quadrant.y].starbase -= 1
 	    game.state.basekl += 1
@@ -1592,7 +1572,7 @@
 	game.neutz = False
 	return
     # commanders get a chance to tac-move towards you 
-    if (((game.comhere or game.ishere) and not game.justin) or game.skill == SKILL_EMERITUS) and torps_ok:
+    if (((game.quadrant in game.state.kcmdr or game.state.kscmdr==game.quadrant) and not game.justin) or game.skill == SKILL_EMERITUS) and torps_ok:
 	moveklings()
     # if no enemies remain after movement, we're done 
     if len(game.enemies)==0 or (len(game.enemies)==1 and thing == game.quadrant and not thing.angry):
@@ -1644,7 +1624,7 @@
 	    dispersion = (randreal()+randreal())*0.5 - 0.5
 	    dispersion += 0.002*enemy.kpower*dispersion
 	    hit = torpedo(course, dispersion, origin=enemy.kloc, number=1, nburst=1)
-	    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
+	    if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem)==0:
 		finish(FWON); # Klingons did themselves in! 
 	    if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova or game.alldone:
 		return # Supernova or finished 
@@ -1744,31 +1724,24 @@
         game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons -= 1
         game.klhere -= 1
         if type == IHC:
-            game.comhere = False
-            for i in range(game.state.remcom):
-                if game.state.kcmdr[i] == game.quadrant:
-                    break
-            game.state.kcmdr[i] = game.state.kcmdr[game.state.remcom]
-            game.state.kcmdr[game.state.remcom].x = 0
-            game.state.kcmdr[game.state.remcom].y = 0
-            game.state.remcom -= 1
+            game.state.kcmdr.remove(game.quadrant)
             unschedule(FTBEAM)
-            if game.state.remcom != 0:
-                schedule(FTBEAM, expran(1.0*game.incom/game.state.remcom))
+            if game.state.kcmdr:
+                schedule(FTBEAM, expran(1.0*game.incom/len(game.state.kcmdr)))
             if is_scheduled(FCDBAS) and game.battle == game.quadrant:
                 unschedule(FCDBAS)    
         elif type ==  IHK:
             game.state.remkl -= 1
         elif type ==  IHS:
             game.state.nscrem -= 1
-            game.ishere = False
-            game.state.kscmdr.x = game.state.kscmdr.y = game.isatb = 0
+            game.state.kscmdr.invalidate()
+            game.isatb = 0
             game.iscate = False
             unschedule(FSCMOVE)
             unschedule(FSCDBAS)
     # For each kind of enemy, finish message to player 
     prout(_(" destroyed."))
-    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
+    if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem)==0:
 	return
     game.recompute()
     # Remove enemy ship from arrays describing local conditions
@@ -1899,7 +1872,7 @@
 	torpedo(course[i], dispersion, origin=game.sector, number=i, nburst=n)
 	if game.alldone or game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
 	    return
-    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
+    if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem)==0:
 	finish(FWON);
 
 def overheat(rpow):
@@ -1980,7 +1953,7 @@
 	skip(1)
 	if kpow == 0:
 	    deadkl(w, ienm, w)
-	    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0:
+	    if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem)==0:
 		finish(FWON);		
 	    if game.alldone:
 		return
@@ -2336,10 +2309,10 @@
         # Adjust finish time to time of tractor beaming 
         fintim = game.state.date+game.optime
         attack(torps_ok=False)
-        if game.state.remcom <= 0:
+        if not game.state.kcmdr:
             unschedule(FTBEAM)
         else: 
-            schedule(FTBEAM, game.optime+expran(1.5*game.intime/game.state.remcom))
+            schedule(FTBEAM, game.optime+expran(1.5*game.intime/len(game.state.kcmdr)))
 
     def destroybase():
         # Code merges here for any commander destroying base 
@@ -2348,11 +2321,11 @@
         if game.battle == game.quadrant:
             game.state.chart[game.battle.x][game.battle.y].starbase = False
             game.quad[game.base.x][game.base.y] = IHDOT
-            game.base.x=game.base.y=0
+            game.base.invalidate()
             newcnd()
             skip(1)
             prout(_("Spock-  \"Captain, I believe the starbase has been destroyed.\""))
-        elif game.state.rembase != 1 and communicating():
+        elif game.state.baseq and communicating():
             # Get word via subspace radio 
             announce()
             skip(1)
@@ -2365,10 +2338,7 @@
             game.state.chart[game.battle.x][game.battle.y].starbase = False
         # Remove Starbase from galaxy 
         game.state.galaxy[game.battle.x][game.battle.y].starbase = False
-        for i in range(1, game.state.rembase+1):
-            if game.state.baseq[i] == game.battle:
-                game.state.baseq[i] = game.state.baseq[game.state.rembase]
-        game.state.rembase -= 1
+        game.state.baseq = filter(lambda x: x != game.battle, game.state.baseq)
         if game.isatb == 2:
             # reinstate a commander's base attack 
             game.battle = hold
@@ -2411,7 +2381,7 @@
 	xtime = datemin-game.state.date
 	game.state.date = datemin
 	# Decrement Federation resources and recompute remaining time 
-	game.state.remres -= (game.state.remkl+4*game.state.remcom)*xtime
+	game.state.remres -= (game.state.remkl+4*len(game.state.kcmdr))*xtime
         game.recompute()
 	if game.state.remtime <=0:
 	    finish(FDEPLETE)
@@ -2475,15 +2445,15 @@
 	    else:
 		return
 	elif evcode == FTBEAM: # Tractor beam 
-            if game.state.remcom == 0:
+            if not game.state.kcmdr:
                 unschedule(FTBEAM)
                 continue
-            i = randrange(game.state.remcom)
+            i = randrange(len(game.state.kcmdr))
             yank = (game.state.kcmdr[i]-game.quadrant).distance()
             if istract or game.condition == "docked" or yank == 0:
                 # Drats! Have to reschedule 
                 schedule(FTBEAM, 
-                         game.optime + expran(1.5*game.intime/game.state.remcom))
+                         game.optime + expran(1.5*game.intime/len(game.state.kcmdr)))
                 continue
             ictbeam = True
             tractorbeam(yank)
@@ -2492,21 +2462,17 @@
 	    game.state.snap = True
 	    schedule(FSNAP, expran(0.5 * game.intime))
 	elif evcode == FBATTAK: # Commander attacks starbase 
-	    if game.state.remcom==0 or game.state.rembase==0:
+	    if not game.state.kcmdr or not game.state.baseq:
 		# no can do 
 		unschedule(FBATTAK)
 		unschedule(FCDBAS)
                 continue
-	    i = 0
-	    for j in range(game.state.rembase):
-		for k in range(game.state.remcom):
-		    if game.state.baseq[j] == game.state.kcmdr[k] and \
-			not game.state.baseq[j] == game.quadrant and \
-                        not game.state.baseq[j] == game.state.kscmdr:
-			i = 1
-		if i == 1:
-		    continue
-	    if j>game.state.rembase:
+            try:
+                for ibq in game.state.baseq:
+                   for cmdr in game.state.kcmdr: 
+                       if ibq == cmdr and ibq != game.quadrant and ibq != game.state.kscmdr:
+                           raise "foundit"
+            except "foundit":
 		# no match found -- try later 
 		schedule(FBATTAK, expran(0.3*game.intime))
 		unschedule(FCDBAS)
@@ -2539,14 +2505,16 @@
 	elif evcode == FCDBAS: # Commander succeeds in destroying base 
 	    if evcode==FCDBAS:
 		unschedule(FCDBAS)
+                if not game.state.baseq() \
+                       or not game.state.galaxy[game.battle.x][game.battle.y].starbase:
+		    game.battle.invalidate()
+                    continue
 		# find the lucky pair 
-		for i in range(game.state.remcom):
-		    if game.state.kcmdr[i] == game.battle: 
+		for cmdr in game.state.kcmdr:
+		    if cmdr == game.battle: 
 			break
-		if i > game.state.remcom or game.state.rembase == 0 or \
-		    not game.state.galaxy[game.battle.x][game.battle.y].starbase:
+                else:
 		    # No action to take after all 
-		    game.battle.invalidate()
 		    continue
             destroybase()
 	elif evcode == FSCMOVE: # Supercommander moves 
@@ -2813,11 +2781,7 @@
                     game.quad[neighbor.x][neighbor.y] = IHDOT
                 elif iquad == IHB: # Destroy base 
                     game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase = False
-                    for i in range(game.state.rembase):
-                        if game.state.baseq[i] == game.quadrant: 
-                            break
-                    game.state.baseq[i] = game.state.baseq[game.state.rembase]
-                    game.state.rembase -= 1
+                    game.state.baseq = filter(lambda x: x!= game.quadrant, game.state.baseq)
                     game.base.invalidate()
                     game.state.basekl += 1
                     newcnd()
@@ -2958,8 +2922,7 @@
     comkills = len(game.state.kcmdr) - len(survivors)
     game.state.kcmdr = survivors
     kldead -= comkills
-    game.state.remcom -= comkills
-    if game.state.remcom==0:
+    if not game.state.kcmdr:
         unschedule(FTBEAM)
     game.state.remkl -= kldead
     # destroy Romulans and planets in supernovaed quadrant 
@@ -2968,12 +2931,11 @@
     game.state.nromrem -= nrmdead
     # Destroy planets 
     for loop in range(game.inplan):
-	if game.state.planets[loop].w == nq:
+	if game.state.planets[loop].quadrant == nq:
 	    game.state.planets[loop].pclass = "destroyed"
 	    npdead += 1
     # Destroy any base in supernovaed quadrant
     game.state.baseq = filter(lambda x: x != nq, game.state.baseq)
-    game.state.rembase = len(game.state.baseq)
     # If starship caused supernova, tally up destruction 
     if induced:
 	game.state.starkl += game.state.galaxy[nq.x][nq.y].stars
@@ -2983,7 +2945,7 @@
     if game.quadrant == nq or communicating():
 	game.state.galaxy[nq.x][nq.y].supernova = True
     # If supernova destroys last Klingons give special message 
-    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0 and not nq == game.quadrant:
+    if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem)==0 and not nq == game.quadrant:
 	skip(2)
 	if not induced:
 	    prout(_("Lucky you!"))
@@ -3063,7 +3025,7 @@
         return 0
     else:
         starting = (game.inkling + game.incom + game.inscom)
-        remaining = (game.state.remkl + game.state.remcom + game.state.nscrem)
+        remaining = (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem)
         return (starting - remaining)/elapsed
 
 def badpoints():
@@ -3153,7 +3115,7 @@
 	prout(_("conquered.  Your starship is now Klingon property,"))
 	prout(_("and you are put on trial as a war criminal.  On the"))
 	proutn(_("basis of your record, you are "))
-	if (game.state.remkl + game.state.remcom + game.state.nscrem)*3.0 > (game.inkling + game.incom + game.inscom):
+	if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem)*3.0 > (game.inkling + game.incom + game.inscom):
 	    prout(_("acquitted."))
 	    skip(1)
 	    prout(_("LIVE LONG AND PROSPER."))
@@ -3266,9 +3228,9 @@
     elif game.ship == IHE:
 	game.ship = IHF
     game.alive = False
-    if (game.state.remkl + game.state.remcom + game.state.nscrem) != 0:
+    if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem) != 0:
 	goodies = game.state.remres/game.inresor
-	baddies = (game.state.remkl + 2.0*game.state.remcom)/(game.inkling+2.0*game.incom)
+	baddies = (game.state.remkl + 2.0*len(game.state.kcmdr))/(game.inkling+2.0*game.incom)
 	if goodies/baddies >= randreal(1.0, 1.5):
 	    prout(_("As a result of your actions, a treaty with the Klingon"))
 	    prout(_("Empire has been signed. The terms of the treaty are"))
@@ -3292,7 +3254,7 @@
     # compute player's score 
     timused = game.state.date - game.indate
     iskill = game.skill
-    if (timused == 0 or (game.state.remkl + game.state.remcom + game.state.nscrem) != 0) and timused < 5.0:
+    if (timused == 0 or (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem) != 0) and timused < 5.0:
 	timused = 5.0
     perdate = killrate()
     ithperd = 500*perdate + 0.5
@@ -3308,7 +3270,7 @@
     if not game.gamewon:
 	game.state.nromrem = 0 # None captured if no win
     iscore = 10*(game.inkling - game.state.remkl) \
-             + 50*(game.incom - game.state.remcom) \
+             + 50*(game.incom - len(game.state.kcmdr)) \
              + ithperd + iwon \
              + 20*(game.inrom - game.state.nromrem) \
              + 200*(game.inscom - game.state.nscrem) \
@@ -3327,9 +3289,9 @@
     if game.inkling - game.state.remkl:
 	prout(_("%6d ordinary Klingons destroyed        %5d") %
 	      (game.inkling - game.state.remkl, 10*(game.inkling - game.state.remkl)))
-    if game.incom - game.state.remcom:
+    if game.incom - len(game.state.kcmdr):
 	prout(_("%6d Klingon commanders destroyed       %5d") %
-	      (game.incom - game.state.remcom, 50*(game.incom - game.state.remcom)))
+	      (game.incom - len(game.state.kcmdr), 50*(game.incom - len(game.state.kcmdr))))
     if game.inscom - game.state.nscrem:
 	prout(_("%6d Super-Commander destroyed          %5d") %
 	      (game.inscom - game.state.nscrem, 200*(game.inscom - game.state.nscrem)))
@@ -4398,7 +4360,7 @@
 	# Repeat if another snova
         if not game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
             break
-    if (game.state.remkl + game.state.remcom + game.state.nscrem)==0: 
+    if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem)==0: 
 	finish(FWON) # Snova killed remaining enemy. 
 
 def timwrp():
@@ -4410,8 +4372,8 @@
 	      int(game.state.date-game.snapsht.date))
 	game.state = game.snapsht
 	game.state.snap = False
-	if game.state.remcom:
-	    schedule(FTBEAM, expran(game.intime/game.state.remcom))
+	if len(game.state.kcmdr):
+	    schedule(FTBEAM, expran(game.intime/len(game.state.kcmdr)))
 	    schedule(FBATTAK, expran(0.3*game.intime))
 	schedule(FSNOVA, expran(0.5*game.intime))
 	# next snapshot will be sooner 
@@ -4536,7 +4498,6 @@
 def mayday():
     # yell for help from nearest starbase 
     # There's more than one way to move in this game! 
-    line = 0
     scanner.chew()
     # Test for conditions which prevent calling for help 
     if game.condition == "docked":
@@ -4545,7 +4506,7 @@
     if damaged(DRADIO):
 	prout(_("Subspace radio damaged."))
 	return
-    if game.state.rembase==0:
+    if not game.state.baseq:
 	prout(_("Lt. Uhura-  \"Captain, I'm not getting any response from Starbase.\""))
 	return
     if game.landed:
@@ -4560,13 +4521,12 @@
 	ddist = (game.base - game.sector).distance()
     else:
 	ddist = FOREVER
-	for m in range(game.state.rembase):
-	    xdist = QUADSIZE * (game.state.baseq[m] - game.quadrant).distance()
+        for ibq in game.state.baseq:
+	    xdist = QUADSIZE * (ibq - game.quadrant).distance()
 	    if xdist < ddist:
 		ddist = xdist
-		line = m
 	# Since starbase not in quadrant, set up new quadrant 
-	game.quadrant = game.state.baseq[line]
+	game.quadrant = ibq
 	newqad(True)
     # dematerialize starship 
     game.quad[game.sector.x][game.sector.y]=IHDOT
@@ -4664,7 +4624,7 @@
 	prouts(_("***ALL HANDS ABANDON SHIP!"))
 	skip(2)
 	prout(_("Captain and crew escape in shuttle craft."))
-	if game.state.rembase==0:
+	if not game.state.baseq:
 	    # Oops! no place to go... 
 	    finish(FABANDN)
 	    return
@@ -4688,7 +4648,7 @@
 	game.nprobes = 0 # No probes 
 	prout(_("You are captured by Klingons and released to"))
 	prout(_("the Federation in a prisoner-of-war exchange."))
-	nb = randrange(game.state.rembase)
+	nb = randrange(len(game.state.baseq))
 	# Set up quadrant and position FQ adjacient to base 
 	if not game.quadrant == game.state.baseq[nb]:
 	    game.quadrant = game.state.baseq[nb]
@@ -4757,7 +4717,7 @@
 	    iknow = True
 	    if idebug and game.state.planets[i].known=="unknown":
 		proutn("(Unknown) ")
-	    proutn(_("Quadrant %s") % game.state.planets[i].w)
+	    proutn(_("Quadrant %s") % game.state.planets[i].quadrant)
 	    proutn(_("   class "))
 	    proutn(game.state.planets[i].pclass)
 	    proutn("   ")
@@ -5133,7 +5093,7 @@
 	while len(game.enemies) > 0:
 	    deadkl(game.enemies[1].kloc, game.quad[game.enemies[1].kloc.x][game.enemies[1].kloc.y],game.enemies[1].kloc)
 	prout(_("Ensign Chekov-  \"Congratulations, Captain!\""))
-	if (game.state.remkl + game.state.remcom + game.state.nscrem) == 0:
+	if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem) == 0:
 	    finish(FWON)    
 	if (game.options & OPTION_PLAIN) == 0:
 	    prout(_("Spock-  \"Captain, I believe the `Experimental Death Ray'"))
@@ -5226,23 +5186,23 @@
     if game.tourn:
 	prout(_("This is tournament game %d.") % game.tourn)
     prout(_("Your secret password is \"%s\"") % game.passwd)
-    proutn(_("%d of %d Klingons have been killed") % (((game.inkling + game.incom + game.inscom) - (game.state.remkl + game.state.remcom + game.state.nscrem)), 
+    proutn(_("%d of %d Klingons have been killed") % (((game.inkling + game.incom + game.inscom) - (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem)), 
 	   (game.inkling + game.incom + game.inscom)))
-    if game.incom - game.state.remcom:
-	prout(_(", including %d Commander%s.") % (game.incom - game.state.remcom, (_("s"), "")[(game.incom - game.state.remcom)==1]))
+    if game.incom - len(game.state.kcmdr):
+	prout(_(", including %d Commander%s.") % (game.incom - len(game.state.kcmdr), (_("s"), "")[(game.incom - len(game.state.kcmdr))==1]))
     elif game.inkling - game.state.remkl + (game.inscom - game.state.nscrem) > 0:
 	prout(_(", but no Commanders."))
     else:
 	prout(".")
     if game.skill > SKILL_FAIR:
 	prout(_("The Super Commander has %sbeen destroyed.") % ("", _("not "))[game.state.nscrem])
-    if game.state.rembase != game.inbase:
+    if len(game.state.baseq) != game.inbase:
 	proutn(_("There "))
-	if game.inbase-game.state.rembase==1:
+	if game.inbase-len(game.state.baseq)==1:
 	    proutn(_("has been 1 base"))
 	else:
-	    proutn(_("have been %d bases") % (game.inbase-game.state.rembase))
-	prout(_(" destroyed, %d remaining.") % game.state.rembase)
+	    proutn(_("have been %d bases") % (game.inbase-len(game.state.baseq)))
+	prout(_(" destroyed, %d remaining.") % len(game.state.baseq))
     else:
 	prout(_("There are %d bases.") % game.inbase)
     if communicating() or game.iseenit:
@@ -5442,7 +5402,7 @@
 	prstat(_("Shields"), s+data)
     if not req or req == 9:
         prstat(_("Klingons Left"), "%d" \
-               % (game.state.remkl + game.state.remcom + game.state.nscrem))
+               % (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem))
     if not req or req == 10:
 	if game.options & OPTION_WORLDS:
 	    plnet = game.state.galaxy[game.quadrant.x][game.quadrant.y].planet
@@ -5786,24 +5746,6 @@
 	    quad.starbase = False
 	    quad.supernova = False
 	    quad.status = "secure"
-    # Initialize times for extraneous events
-    schedule(FSNOVA, expran(0.5 * game.intime))
-    schedule(FTBEAM, expran(1.5 * (game.intime / game.state.remcom)))
-    schedule(FSNAP, randreal(1.0, 2.0)) # Force an early snapshot
-    schedule(FBATTAK, expran(0.3*game.intime))
-    unschedule(FCDBAS)
-    if game.state.nscrem:
-	schedule(FSCMOVE, 0.2777)
-    else:
-	unschedule(FSCMOVE)
-    unschedule(FSCDBAS)
-    unschedule(FDSPROB)
-    if (game.options & OPTION_WORLDS) and game.skill >= SKILL_GOOD:
-	schedule(FDISTR, expran(1.0 + game.intime))
-    else:
-	unschedule(FDISTR)
-    unschedule(FENSLV)
-    unschedule(FREPRO)
     # Starchart is functional but we've never seen it
     game.lastchart = FOREVER
     # Put stars in the galaxy
@@ -5836,7 +5778,7 @@
 			prout("=== Saving base #%d, close to #%d" % (i, j))
             if not contflag:
                 break
-	game.state.baseq[i] = w
+	game.state.baseq.append(w)
 	game.state.galaxy[w.x][w.y].starbase = True
 	game.state.chart[w.x][w.y].starbase = True
     # Position ordinary Klingon Battle Cruisers
@@ -5868,7 +5810,7 @@
                    not w in game.state.kcmdr[:i]:
                 break
 	game.state.galaxy[w.x][w.y].klingons += 1
-	game.state.kcmdr[i] = w
+	game.state.kcmdr.append(w)
     # Locate planets in galaxy
     for i in range(game.inplan):
         while True:
@@ -5876,7 +5818,7 @@
             if game.state.galaxy[w.x][w.y].planet == None:
                 break
         new = planet()
-	new.w = w
+	new.quadrant = w
         new.crystals = "absent"
 	if (game.options & OPTION_WORLDS) and i < NINHAB:
 	    new.pclass = "M"	# All inhabited planets are class M
@@ -5904,6 +5846,24 @@
                 break
 	game.state.kscmdr = w
 	game.state.galaxy[w.x][w.y].klingons += 1
+    # Initialize times for extraneous events
+    schedule(FSNOVA, expran(0.5 * game.intime))
+    schedule(FTBEAM, expran(1.5 * (game.intime / len(game.state.kcmdr))))
+    schedule(FSNAP, randreal(1.0, 2.0)) # Force an early snapshot
+    schedule(FBATTAK, expran(0.3*game.intime))
+    unschedule(FCDBAS)
+    if game.state.nscrem:
+	schedule(FSCMOVE, 0.2777)
+    else:
+	unschedule(FSCMOVE)
+    unschedule(FSCDBAS)
+    unschedule(FDSPROB)
+    if (game.options & OPTION_WORLDS) and game.skill >= SKILL_GOOD:
+	schedule(FDISTR, expran(1.0 + game.intime))
+    else:
+	unschedule(FDISTR)
+    unschedule(FENSLV)
+    unschedule(FREPRO)
     # Place thing (in tournament game, we don't want one!)
     global thing
     if game.tourn is None:
@@ -6037,8 +5997,7 @@
 
     # Use parameters to generate initial values of things
     game.damfac = 0.5 * game.skill
-    game.state.rembase = randrange(BASEMIN, BASEMAX+1)
-    game.inbase = game.state.rembase
+    game.inbase = randrange(BASEMIN, BASEMAX+1)
     game.inplan = 0
     if game.options & OPTION_PLANETS:
 	game.inplan += randrange(MAXUNINHAB/2, MAXUNINHAB+1)
@@ -6049,14 +6008,11 @@
     game.state.remtime = 7.0 * game.length
     game.intime = game.state.remtime
     game.state.remkl = game.inkling = 2.0*game.intime*((game.skill+1 - 2*randreal())*game.skill*0.1+.15)
-    game.incom = int(game.skill + 0.0625*game.inkling*randreal())
-    game.state.remcom = min(10, game.incom)
-    game.incom = game.state.remcom
+    game.incom = min(10, int(game.skill + 0.0625*game.inkling*randreal()))
     game.state.remres = (game.inkling+4*game.incom)*game.intime
     game.inresor = game.state.remres
     if game.inkling > 50:
-        game.state.rembase += 1
-	game.inbase = game.state.rembase
+        game.state.inbase += 1
     return False
 
 def dropin(iquad=None):
@@ -6089,8 +6045,6 @@
     w = coord()
     game.justin = True
     game.klhere = 0
-    game.comhere = False
-    game.ishere = False
     game.irhere = 0
     game.iplnet = 0
     game.neutz = False
@@ -6118,12 +6072,11 @@
 	for i in range(game.klhere):
             newkling()
 	# If we need a commander, promote a Klingon
-	for i in range(game.state.remcom):
-	    if game.state.kcmdr[i] == game.quadrant:
+        for cmdr in game.state.kcmdr:
+	    if cmdr == game.quadrant:
                 e = game.enemies[game.klhere-1]
                 game.quad[e.kloc.x][e.kloc.y] = IHC
                 e.kpower = randreal(950,1350) + 50.0*game.skill
-                game.comhere = True
 		break	
 	# If we need a super-commander, promote a Klingon
 	if game.quadrant == game.state.kscmdr:
@@ -6131,7 +6084,6 @@
 	    game.quad[e.kloc.x][e.kloc.y] = IHS
 	    e.kpower = randreal(1175.0,  1575.0) + 125.0*game.skill
 	    game.iscate = (game.state.remkl > 1)
-	    game.ishere = True
     # Put in Romulans if needed
     for i in range(game.klhere, len(game.enemies)):
         enemy(IHR, loc=dropin(), power=randreal(400.0,850.0)+50.0*game.skill)



From esr at mail.berlios.de  Mon Oct  9 00:28:32 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 9 Oct 2006 00:28:32 +0200
Subject: [Sst-commit-watch] r712 - trunk/src
Message-ID: <200610082228.k98MSW3U003231@sheep.berlios.de>

Author: esr
Date: 2006-10-09 00:28:32 +0200 (Mon, 09 Oct 2006)
New Revision: 712

Modified:
   trunk/src/sst.py
Log:
More refactoring of the Python version.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-08 22:18:25 UTC (rev 711)
+++ trunk/src/sst.py	2006-10-08 22:28:32 UTC (rev 712)
@@ -201,6 +201,7 @@
 FULLCREW	= 428	# BSD Trek was 387, that's wrong 
 FOREVER 	= 1e30
 MAXBURST	= 3
+MINCMDR 	= 10
 
 # These functions hide the difference between 0-origin and 1-origin addressing.
 def VALID_QUADRANT(x, y):	return ((x)>=0 and (x)<GALSIZE and (y)>=0 and (y)<GALSIZE)
@@ -605,15 +606,20 @@
 
 # Code from ai.c begins here
 
+def welcoming(iq):
+    # Would this quadrant welcome another Klingon?
+    return VALID_QUADRANT(iq.x,iq.y) and \
+	not game.state.galaxy[iq.x][iq.y].supernova or \
+	game.state.galaxy[iq.x][iq.y].klingons < MAXKLQUAD
+
+
 def tryexit(enemy, look, irun):
     # a bad guy attempts to bug out 
     iq = coord()
     iq.x = game.quadrant.x+(look.x+(QUADSIZE-1))/QUADSIZE - 1
     iq.y = game.quadrant.y+(look.y+(QUADSIZE-1))/QUADSIZE - 1
-    if not VALID_QUADRANT(iq.x,iq.y) or \
-	game.state.galaxy[iq.x][iq.y].supernova or \
-	game.state.galaxy[iq.x][iq.y].klingons > MAXKLQUAD-1:
-	return False; # no can do -- neg energy, supernovae, or >MAXKLQUAD-1 Klingons 
+    if not welcoming(iq):
+	return False;
     if enemy.type == IHR:
 	return False; # Romulans cannot escape! 
     if not irun:
@@ -870,13 +876,9 @@
 
 def movescom(iq, avoid):
     # commander movement helper 
-    if iq == game.quadrant or not VALID_QUADRANT(iq.x, iq.y) or \
-	game.state.galaxy[iq.x][iq.y].supernova or \
-	game.state.galaxy[iq.x][iq.y].klingons > MAXKLQUAD-1:
-	return 1
     # Avoid quadrants with bases if we want to avoid Enterprise 
-    if avoid and iq in game.state.baseq:
-        return True
+    if not welcoming(iq) or (avoid and iq in game.state.baseq):
+	return True
     if game.justin and not game.iscate:
 	return True
     # do the move 
@@ -944,9 +946,7 @@
 	ifindit = iwhichb = 0
 	for (i2, base) in enumerate(game.state.baseq):
 	    i = basetbl[i2][0];	# bug in original had it not finding nearest
-	    if base == game.quadrant or base == game.battle or \
-		game.state.galaxy[base.x][base.y].supernova or \
-		game.state.galaxy[base.x][base.y].klingons > MAXKLQUAD-1:
+	    if base==game.quadrant or base==game.battle or not welcoming(base):
 		continue
 	    # if there is a commander, and no other base is appropriate,
 	    # we will take the one with the commander
@@ -5842,7 +5842,7 @@
     if game.state.nscrem > 0:
         while True:
             w = randplace(GALSIZE)
-            if not game.state.galaxy[w.x][w.y].supernova and game.state.galaxy[w.x][w.y].klingons <= MAXKLQUAD:
+            if not welcoming(w):
                 break
 	game.state.kscmdr = w
 	game.state.galaxy[w.x][w.y].klingons += 1
@@ -6008,7 +6008,7 @@
     game.state.remtime = 7.0 * game.length
     game.intime = game.state.remtime
     game.state.remkl = game.inkling = 2.0*game.intime*((game.skill+1 - 2*randreal())*game.skill*0.1+.15)
-    game.incom = min(10, int(game.skill + 0.0625*game.inkling*randreal()))
+    game.incom = min(MINCMDR, int(game.skill + 0.0625*game.inkling*randreal()))
     game.state.remres = (game.inkling+4*game.incom)*game.intime
     game.inresor = game.state.remres
     if game.inkling > 50:



From esr at mail.berlios.de  Mon Oct  9 02:14:36 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 9 Oct 2006 02:14:36 +0200
Subject: [Sst-commit-watch] r713 - trunk/src
Message-ID: <200610090014.k990EaJ9020028@sheep.berlios.de>

Author: esr
Date: 2006-10-09 02:14:35 +0200 (Mon, 09 Oct 2006)
New Revision: 713

Modified:
   trunk/src/sst.py
Log:
Small port fixes.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-08 22:28:32 UTC (rev 712)
+++ trunk/src/sst.py	2006-10-09 00:14:35 UTC (rev 713)
@@ -292,14 +292,14 @@
 
 class quadrant:
     def __init__(self):
-        self.stars = None
+        self.stars = 0
         self.planet = None
-	self.starbase = None
-	self.klingons = None
-	self.romulans = None
-	self.supernova = None
-	self.charted = None
-        self.status = None	# Could be "secure", "distressed", "enslaved"
+	self.starbase = False
+	self.klingons = 0
+	self.romulans = 0
+	self.supernova = False
+	self.charted = False
+        self.status = "secure"	# Could be "secure", "distressed", "enslaved"
 
 class page:
     def __init__(self):
@@ -4739,7 +4739,10 @@
     if damaged(DWARPEN) and damaged(DIMPULS):
 	prout(_("Both warp and impulse engines damaged."))
 	return
-    if not game.plnet.is_valid() or abs(game.sector.x-game.plnet.x) > 1 or abs(game.sector.y-game.plnet.y) > 1:
+    if not game.plnet.is_valid():
+        prout("There is no planet in this sector.")
+        return
+    if abs(game.sector.x-game.plnet.x)>1 or abs(game.sector.y-game.plnet.y)>1:
 	crmshp()
 	prout(_(" not adjacent to planet."))
 	skip(1)
@@ -5736,16 +5739,6 @@
     game.landed = False
     game.alive = True
     game.docfac = 0.25
-    for i in range(GALSIZE):
-	for j in range(GALSIZE):
-	    quad = game.state.galaxy[i][j]
-	    quad.charted = 0
-	    quad.planet = None
-	    quad.romulans = 0
-	    quad.klingons = 0
-	    quad.starbase = False
-	    quad.supernova = False
-	    quad.status = "secure"
     # Starchart is functional but we've never seen it
     game.lastchart = FOREVER
     # Put stars in the galaxy
@@ -5779,8 +5772,7 @@
             if not contflag:
                 break
 	game.state.baseq.append(w)
-	game.state.galaxy[w.x][w.y].starbase = True
-	game.state.chart[w.x][w.y].starbase = True
+	game.state.galaxy[w.x][w.y].starbase = game.state.chart[w.x][w.y].starbase = True
     # Position ordinary Klingon Battle Cruisers
     krem = game.inkling
     klumper = 0.25*game.skill*(9.0-game.length)+1.0
@@ -5804,10 +5796,9 @@
     for i in range(game.incom):
         while True:
             w = randplace(GALSIZE)
-	    if (game.state.galaxy[w.x][w.y].klingons or withprob(0.25)) and \
-		   not game.state.galaxy[w.x][w.y].supernova and \
-		   game.state.galaxy[w.x][w.y].klingons <= MAXKLQUAD-1 and \
-                   not w in game.state.kcmdr[:i]:
+            if not welcoming(w) or w in game.state.kcmdr:
+                continue
+            if (game.state.galaxy[w.x][w.y].klingons or withprob(0.25)):
                 break
 	game.state.galaxy[w.x][w.y].klingons += 1
 	game.state.kcmdr.append(w)
@@ -6097,6 +6088,7 @@
 	    game.plnet = dropin(IHP)
 	else:
 	    game.plnet = dropin(IHW)
+        
     # Check for condition
     newcnd()
     # Check for RNZ
@@ -6171,7 +6163,7 @@
 		break
     else:
         game.passwd = ""
-        for i in range(3):
+        for i in range(8):
 	    game.passwd += chr(ord('a')+randrange(26))
 
 # Code from sst.c begins here



From esr at mail.berlios.de  Mon Oct  9 02:51:35 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 9 Oct 2006 02:51:35 +0200
Subject: [Sst-commit-watch] r714 - trunk/src
Message-ID: <200610090051.k990pZ10024406@sheep.berlios.de>

Author: esr
Date: 2006-10-09 02:51:34 +0200 (Mon, 09 Oct 2006)
New Revision: 714

Modified:
   trunk/src/sst.py
Log:
Add -s option to Python version.  Fix more minor bugs.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-09 00:14:35 UTC (rev 713)
+++ trunk/src/sst.py	2006-10-09 00:51:34 UTC (rev 714)
@@ -440,7 +440,7 @@
             game.enemies.remove(self)
         return motion
     def __repr__(self):
-        return "<%s=%f>" % (self.kloc, self.kpower)	# For debugging
+        return "<%s,%s.%f>" % (self.type, self.kloc, self.kpower)	# For debugging
 
 class gamestate:
     def __init__(self):
@@ -3877,14 +3877,14 @@
 		    skip(1)
 		    crmshp()
 		    if iquad == IHWEB:
-			proutn(_(" encounters Tholian web at %s;") % w)
+			prout(_(" encounters Tholian web at %s;") % w)
 		    else:
-			proutn(_(" blocked by object at %s;") % w)
+			prout(_(" blocked by object at %s;") % w)
 		    proutn(_("Emergency stop required "))
 		    prout(_("%2d units of energy.") % int(stopegy))
 		    game.energy -= stopegy
-		    final.x = x-deltax+0.5
-		    final.y = y-deltay+0.5
+		    final.x = int(round(deltax))
+		    final.y = int(round(deltay))
 		    game.sector = final
 		    if game.energy <= 0:
 			finish(FNRG)
@@ -5829,11 +5829,11 @@
     for i in range(game.state.nromrem):
 	w = randplace(GALSIZE)
 	game.state.galaxy[w.x][w.y].romulans += 1
-    # Locate the Super Commander
+    # Place the Super-Commander if needed
     if game.state.nscrem > 0:
         while True:
             w = randplace(GALSIZE)
-            if not welcoming(w):
+            if welcoming(w):
                 break
 	game.state.kscmdr = w
 	game.state.galaxy[w.x][w.y].klingons += 1
@@ -6076,7 +6076,7 @@
 	    e.kpower = randreal(1175.0,  1575.0) + 125.0*game.skill
 	    game.iscate = (game.state.remkl > 1)
     # Put in Romulans if needed
-    for i in range(game.klhere, len(game.enemies)):
+    for i in range(q.romulans):
         enemy(IHR, loc=dropin(), power=randreal(400.0,850.0)+50.0*game.skill)
     # If quadrant needs a starbase, put it in
     if q.starbase:
@@ -6088,7 +6088,6 @@
 	    game.plnet = dropin(IHP)
 	else:
 	    game.plnet = dropin(IHW)
-        
     # Check for condition
     newcnd()
     # Check for RNZ
@@ -6208,8 +6207,6 @@
     "CALL":		0,	# Synonym for MAYDAY
     "QUIT":		0,
     "HELP":		0,
-    "SEED":		0,
-    "VISUAL":		0,
 }
 
 def ACCEPT(cmd):	return (not commands[cmd] or (commands[cmd] & game.options))
@@ -6573,7 +6570,6 @@
     skip(1)
     prout(_("Beg your pardon, Captain?"))
 
-
 def debugme():
     # access to the internals for debugging 
     proutn("Reset levels? ")
@@ -6678,7 +6674,7 @@
         #    else:
         game.options |= OPTION_TTY
         seed = int(time.time())
-        (options, arguments) = getopt.getopt(sys.argv[1:], "r:tx")
+        (options, arguments) = getopt.getopt(sys.argv[1:], "r:s:tx")
         for (switch, val) in options:
             if switch == '-r':
                 try:
@@ -6698,6 +6694,8 @@
                     raise SystemExit(1)
                 game.options |= OPTION_TTY
                 game.options &=~ OPTION_CURSES
+            elif switch == '-s':
+                seed = int(val)
             elif switch == '-t':
                 game.options |= OPTION_TTY
                 game.options &=~ OPTION_CURSES



From esr at mail.berlios.de  Mon Oct  9 14:55:21 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 9 Oct 2006 14:55:21 +0200
Subject: [Sst-commit-watch] r715 - trunk/src
Message-ID: <200610091255.k99CtLjB001878@sheep.berlios.de>

Author: esr
Date: 2006-10-09 14:55:21 +0200 (Mon, 09 Oct 2006)
New Revision: 715

Modified:
   trunk/src/sst.py
Log:
Python logic for torpedo-salvo input seems to work now,
There's still a glitch in the course computation.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-09 00:51:34 UTC (rev 714)
+++ trunk/src/sst.py	2006-10-09 12:55:21 UTC (rev 715)
@@ -249,6 +249,12 @@
         return coord(self.x*other, self.y*other)
     def __rmul__(self, other):
         return coord(self.x*other, self.y*other)
+    def __div__(self, other):
+        return coord(self.x/other, self.y/other)
+    def __rdiv__(self, other):
+        return coord(self.x/other, self.y/other)
+    def snaptogrid(self):
+        return coord(int(round(self.x)), int(round(self.y)))
     def distance(self, other=None):
         if not other: other = coord(0, 0)
         return math.sqrt((self.x - other.x)**2 + (self.y - other.y)**2)
@@ -607,14 +613,14 @@
 # Code from ai.c begins here
 
 def welcoming(iq):
-    # Would this quadrant welcome another Klingon?
+    "Would this quadrant welcome another Klingon?"
     return VALID_QUADRANT(iq.x,iq.y) and \
 	not game.state.galaxy[iq.x][iq.y].supernova or \
 	game.state.galaxy[iq.x][iq.y].klingons < MAXKLQUAD
 
 
 def tryexit(enemy, look, irun):
-    # a bad guy attempts to bug out 
+    "A bad guy attempts to bug out."
     iq = coord()
     iq.x = game.quadrant.x+(look.x+(QUADSIZE-1))/QUADSIZE - 1
     iq.y = game.quadrant.y+(look.y+(QUADSIZE-1))/QUADSIZE - 1
@@ -633,7 +639,7 @@
 	# don't leave if over 1000 units of energy 
 	if enemy.kpower > 1000.0:
 	    return False
-    # print escape message and move out of quadrant.
+    # emit escape message and move out of quadrant.
     # we know this if either short or long range sensors are working
     if not damaged(DSRSENS) or not damaged(DLRSENS) or \
 	game.condition == "docked":
@@ -702,7 +708,7 @@
 # 
 
 def movebaddy(enemy):
-    # tactical movement for the bad guys 
+    "Tactical movement for the bad guys."
     next = coord(); look = coord()
     irun = False
     # This should probably be just (game.quadrant in game.state.kcmdr) + (game.state.kscmdr==game.quadrant) 
@@ -851,7 +857,7 @@
 	    prout("Sector %s." % next)
 
 def moveklings():
-    # Klingon tactical movement 
+    "Sequence Klingon tactical movement."
     if idebug:
 	prout("== MOVCOM")
     # Figure out which Klingon is the commander (or Supercommander)
@@ -875,7 +881,7 @@
     game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
 
 def movescom(iq, avoid):
-    # commander movement helper 
+    "Commander movement helper." 
     # Avoid quadrants with bases if we want to avoid Enterprise 
     if not welcoming(iq) or (avoid and iq in game.state.baseq):
 	return True
@@ -915,7 +921,7 @@
     return False; # looks good! 
 			
 def supercommander():
-    # move the Super Commander 
+    "Move the Super Commander." 
     iq = coord(); sc = coord(); ibq = coord(); idelta = coord()
     basetbl = []
     if idebug:
@@ -1034,7 +1040,7 @@
     return
 
 def movetholian():
-    # move the Tholian
+    "Move the Tholian."
     if not game.tholian or game.justin:
 	return
     id = coord()
@@ -1058,13 +1064,11 @@
     delta = (id - game.tholian.kloc).sgn()
     # move in x axis 
     while here.x != id.x:
-        #print "Moving in X", delta
         here.x += delta.x
         if game.quad[here.x][here.y]==IHDOT:
             game.tholian.move(here)
     # move in y axis 
     while here.y != id.y:
-        #print "Moving in Y", delta
         here.y += delta.y
         if game.quad[here.x][here.y]==IHDOT:
             game.tholian.move(here)
@@ -1084,13 +1088,12 @@
     crmena(True, IHT, "sector", game.tholian)
     prout(_(" completes web."))
     game.tholian.move(None)
-    print "Tholian movement ends"
     return
 
 # Code from battle.c begins here
 
 def doshield(shraise):
-    # change shield status 
+    "Change shield status."
     action = "NONE"
     game.ididit = False
     if shraise:
@@ -1248,7 +1251,7 @@
     return None;	# we should never get here
 
 def collision(rammed, enemy):
-    # collision handling
+    "Collision handling fot rammong events."
     prouts(_("***RED ALERT!  RED ALERT!"))
     skip(1)
     prout(_("***COLLISION IMMINENT."))
@@ -1295,7 +1298,7 @@
     return
 
 def torpedo(course, dispersion, origin, number, nburst):
-    # let a photon torpedo fly 
+    "Let a photon torpedo fly" 
     iquad = 0
     shoved = False
     ac = course + 0.25*dispersion
@@ -1524,7 +1527,7 @@
     return None;
 
 def fry(hit):
-    # critical-hit resolution 
+    "Critical-hit resolution." 
     if hit < (275.0-25.0*game.skill)*randreal(1.0, 1.5):
 	return
     ncrit = int(1.0 + hit/(500.0+randreal(100)))
@@ -1677,7 +1680,7 @@
 	# Shields fully protect ship 
 	proutn(_("Enemy attack reduces shield strength to "))
     else:
-	# Print message if starship suffered hit(s) 
+	# Emit message if starship suffered hit(s) 
 	skip(1)
 	proutn(_("Energy left %2d    shields ") % int(game.energy))
 	if game.shldup:
@@ -1703,7 +1706,7 @@
     return
 		
 def deadkl(w, type, mv):
-    # kill a Klingon, Tholian, Romulan, or Thingy 
+    "Kill a Klingon, Tholian, Romulan, or Thingy." 
     # Added mv to allow enemy to "move" before dying 
     crmena(True, type, "sector", mv)
     # Decide what kind of enemy it is and update appropriately 
@@ -1752,7 +1755,7 @@
     return
 
 def targetcheck(w):
-    # Return None if target is invalid, otherwise return a course angle
+    "Return None if target is invalid, otherwise return a course angle."
     if not VALID_SECTOR(w.x, w.y):
 	huh()
 	return None
@@ -1767,7 +1770,7 @@
     return delta.bearing()
 
 def photon():
-    # launch photon torpedo
+    "Launch photon torpedo."
     course = [0.0] * MAXBURST
     game.ididit = False
     if damaged(DPHOTON):
@@ -1778,16 +1781,17 @@
 	prout(_("No torpedoes left."))
 	scanner.chew()
 	return
-    key = scanner.next()
+    # First, get torpedo count
     while True:
-	if key == IHALPHA:
+        scanner.next()
+	if scanner.token == IHALPHA:
 	    huh()
 	    return
-	elif key == IHEOL:
+	elif scanner.token == IHEOL or not scanner.waiting():
 	    prout(_("%d torpedoes left.") % game.torps)
             scanner.chew()
 	    proutn(_("Number of torpedoes to fire- "))
-	    key = scanner.next()
+            continue	# Go back around to get a number
 	else: # key == IHREAL
 	    n = scanner.int()
 	    if n <= 0: # abort command 
@@ -1796,57 +1800,43 @@
 	    if n > MAXBURST:
 		scanner.chew()
 		prout(_("Maximum of %d torpedoes per burst.") % MAXBURST)
-		key = IHEOL
 		return
-	    if n <= game.torps:
-		break
-	    scanner.chew()
-	    key = IHEOL
-    targ = []
-    for i in range(MAXBURST):
-        targ.append(coord())
+            if n > game.torps:
+                scanner.chew()	# User requested more torps than available
+                continue	# Go back around
+            break	# All is good, go to next stage
+    # Next, get targets
+    target = []
     for i in range(n):
 	key = scanner.next()
 	if i==0 and key == IHEOL:
-	    break;	# we will try prompting 
+	    break;	# no coordinate waiting, we will try prompting 
 	if i==1 and key == IHEOL:
 	    # direct all torpedoes at one target 
-	    while i <= n:
-		targ[i] = targ[0]
-		course[i] = course[0]
+	    while i < n:
+		target.append(targets[0])
+		course.append(course[0])
 		i += 1
 	    break
-	if key != IHREAL:
-	    huh()
-	    return
-	targ[i].x = scanner.int()
-	key = scanner.next()
-	if key != IHREAL:
-	    huh()
-	    return
-	targ[i].y = scanner.int()
-	course[i] = targetcheck(targ[i])
+        scanner.push(key)
+        target.append(scanner.getcoord())
+        if target[-1] == None:
+            return
+        course.append(targetcheck(target[1]))
         if course[i] == None:
 	    return
     scanner.chew()
-    if i == 0 and key == IHEOL:
+    if i == 0:
 	# prompt for each one 
 	for i in range(n):
 	    proutn(_("Target sector for torpedo number %d- ") % (i+1))
-	    key = scanner.next()
-	    if key != IHREAL:
-		huh()
-		return
-	    targ[i].x = scanner.int()
-	    key = scanner.next()
-	    if key != IHREAL:
-		huh()
-		return
-	    targ[i].y = scanner.int()
 	    scanner.chew()
-            course[i] = targetcheck(targ[i])
-            if course[i] == None:
+            target.append(scanner.getcoord())
+            if target[-1] == None:
                 return
+            course.append(targetcheck(target[-1]))
+            if course[-1] == None:
+                return
     game.ididit = True
     # Loop for moving <n> torpedoes 
     for i in range(n):
@@ -1876,7 +1866,7 @@
 	finish(FWON);
 
 def overheat(rpow):
-    # check for phasers overheating 
+    "Check for phasers overheating."
     if rpow > 1500:
         checkburn = (rpow-1500.0)*0.00038
         if withprob(checkburn):
@@ -1884,7 +1874,7 @@
 	    game.damage[DPHASER] = game.damfac* randreal(1.0, 2.0) * (1.0+checkburn)
 
 def checkshctrl(rpow):
-    # check shield control 
+    "Check shield control."
     skip(1)
     if withprob(0.998):
 	prout(_("Shields lowered."))
@@ -1920,11 +1910,10 @@
     return True;
 
 def hittem(hits):
-    # register a phaser hit on Klingons and Romulans
+    "Register a phaser hit on Klingons and Romulans."
     nenhr2 = len(game.enemies); kk=0
     w = coord()
     skip(1)
-    print "Hits are:", hits
     for (k, wham) in enumerate(hits):
 	if wham==0:
 	    continue
@@ -1968,7 +1957,7 @@
     return
 
 def phasers():
-    # fire phasers 
+    "Fire phasers at bad guys."
     hits = []
     kz = 0; k = 1; irec=0 # Cheating inhibitor 
     ifast = False; no = False; itarg = True; msgflag = True; rpow=0
@@ -2223,29 +2212,29 @@
 # BSD Trek, from which we swiped the idea, can have up to 5.
 
 def unschedule(evtype):
-    # remove an event from the schedule 
+    "Remove an event from the schedule."
     game.future[evtype].date = FOREVER
     return game.future[evtype]
 
 def is_scheduled(evtype):
-    # is an event of specified type scheduled 
+    "Is an event of specified type scheduled."
     return game.future[evtype].date != FOREVER
 
 def scheduled(evtype):
-    # when will this event happen? 
+    "When will this event happen?"
     return game.future[evtype].date
 
 def schedule(evtype, offset):
-    # schedule an event of specified type
+    "Schedule an event of specified type."
     game.future[evtype].date = game.state.date + offset
     return game.future[evtype]
 
 def postpone(evtype, offset):
-    # postpone a scheduled event 
+    "Postpone a scheduled event."
     game.future[evtype].date += offset
 
 def cancelrest():
-    # rest period is interrupted by event 
+    "Rest period is interrupted by event."
     if game.resting:
 	skip(1)
 	proutn(_("Mr. Spock-  \"Captain, shall we cancel the rest period?\""))
@@ -2256,7 +2245,7 @@
     return False
 
 def events():
-    # run through the event queue looking for things to do 
+    "Run through the event queue looking for things to do."
     i=0
     fintim = game.state.date + game.optime; yank=0
     ictbeam = False; istract = False
@@ -2264,7 +2253,7 @@
     ev = event(); ev2 = event()
 
     def tractorbeam(yank):
-        # tractor beaming cases merge here 
+        "Tractor-beaming cases merge here." 
         announce()
         game.optime = (10.0/(7.5*7.5))*yank # 7.5 is yank rate (warp 7.5) 
         skip(1)
@@ -2315,7 +2304,7 @@
             schedule(FTBEAM, game.optime+expran(1.5*game.intime/len(game.state.kcmdr)))
 
     def destroybase():
-        # Code merges here for any commander destroying base 
+        "Code merges here for any commander destroying a starbase." 
         # Not perfect, but will have to do 
         # Handle case where base is in same quadrant as starship 
         if game.battle == game.quadrant:
@@ -2345,7 +2334,6 @@
             game.isatb = 0
         else:
             game.battle.invalidate()
-
     if idebug:
 	prout("=== EVENTS from %.2f to %.2f:" % (game.state.date, fintim))
 	for i in range(1, NEVENTS):
@@ -2663,7 +2651,7 @@
 		    prout(_("in Quadrant %s.") % w)
 				
 def wait():
-    # wait on events 
+    "Wait on events."
     game.ididit = False
     while True:
 	key = scanner.next()
@@ -2721,7 +2709,7 @@
 # If the zap is too much, it gets destroyed.
         
 def nova(nov):
-    # star goes nova 
+    "Star goes nova." 
     course = (0.0, 10.5, 12.0, 1.5, 9.0, 0.0, 3.0, 7.5, 6.0, 4.5)
     newc = coord(); neighbor = coord(); bump = coord(0, 0)
     if withprob(0.05):
@@ -2854,7 +2842,7 @@
     return
 	
 def supernova(induced, w=None):
-    # star goes supernova 
+    "Star goes supernova."
     num = 0; npdead = 0
     nq = coord()
     if w != None: 
@@ -2960,8 +2948,7 @@
 # Code from finish.c ends here.
 
 def selfdestruct():
-    # self-destruct maneuver 
-    # Finish with a BANG! 
+    "Self-destruct maneuver. Finish with a BANG!" 
     scanner.chew()
     if damaged(DCOMPTR):
 	prout(_("Computer damaged; cannot execute destruct sequence."))
@@ -3251,7 +3238,7 @@
     score()
 
 def score():
-    # compute player's score 
+    "Compute player's score."
     timused = game.state.date - game.indate
     iskill = game.skill
     if (timused == 0 or (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem) != 0) and timused < 5.0:
@@ -3336,7 +3323,7 @@
     prout(_("TOTAL SCORE                               %5d") % iscore)
 
 def plaque():
-    # emit winner's commemmorative plaque 
+    "Emit winner's commemmorative plaque." 
     skip(2)
     while True:
         proutn(_("File or device name for your plaque: "))
@@ -3408,7 +3395,7 @@
 curwnd = None
 
 def outro():
-    "wrap up, either normally or due to signal"
+    "Wrap up, either normally or due to signal"
     if game.options & OPTION_CURSES:
 	#clear()
 	#curs_set(1)
@@ -3542,7 +3529,7 @@
     skip(1)
 
 def prouts(line):
-    "print slowly!" 
+    "Emit slowly!" 
     for c in line:
         if not replayfp or replayfp.closed:	# Don't slow down replays
             time.sleep(0.03)
@@ -3722,7 +3709,7 @@
 # Code from moving.c begins here
 
 def imove(novapush):
-    # movement execution for warp, impulse, supernova, and tractor-beam events 
+    "Movement execution for warp, impulse, supernova, and tractor-beam events."
     w = coord(); final = coord()
     trbeam = False
 
@@ -3899,7 +3886,7 @@
     return
 
 def dock(verbose):
-    # dock our ship at a starbase 
+    "Dock our ship at a starbase."
     scanner.chew()
     if game.condition == "docked" and verbose:
 	prout(_("Already docked."))
@@ -3937,7 +3924,7 @@
 # are always displayed y - x, where +y is downward!
 
 def getcourse(isprobe, akey):
-    # get course and distance
+    "Get a course and distance from the user."
     key = 0
     dquad = copy.copy(game.quadrant)
     navmode = "unspecified"
@@ -4078,7 +4065,7 @@
     return True
 
 def impulse():
-    # move under impulse power 
+    "Move under impulse power."
     game.ididit = False
     if damaged(DIMPULS):
 	scanner.chew()
@@ -4125,7 +4112,7 @@
     return
 
 def warp(timewarp):
-    # move under warp drive 
+    "ove under warp drive."
     blooey = False; twarp = False
     if not timewarp: # Not WARPX entry 
 	game.ididit = False
@@ -4240,7 +4227,7 @@
     return
 
 def setwarp():
-    # change the warp factor 	
+    "Change the warp factor."
     while True:
         key=scanner.next()
         if key != IHEOL:
@@ -4281,7 +4268,7 @@
     return
 
 def atover(igrab):
-    # cope with being tossed out of quadrant by supernova or yanked by beam 
+    "Cope with being tossed out of quadrant by supernova or yanked by beam."
     scanner.chew()
     # is captain on planet? 
     if game.landed:
@@ -4364,7 +4351,7 @@
 	finish(FWON) # Snova killed remaining enemy. 
 
 def timwrp():
-    # let's do the time warp again 
+    "Let's do the time warp again."
     prout(_("***TIME WARP ENTERED."))
     if game.state.snap and withprob(0.5):
 	# Go back in time 
@@ -4400,10 +4387,8 @@
 	if game.iscraft == "offship" and not gotit and game.damage[DSHUTTL] >= 0.0:
 	    prout(_("Checkov-  \"Security reports the Galileo has reappeared in the dock!\""))
 	    game.iscraft = "onship"
-	# 
-#	 * There used to be code to do the actual reconstrction here,
-#	 * but the starchart is now part of the snapshotted galaxy state.
-#	 
+        # There used to be code to do the actual reconstrction here,
+        # but the starchart is now part of the snapshotted galaxy state.
 	prout(_("Spock has reconstructed a correct star chart from memory"))
     else:
 	# Go forward in time 
@@ -4416,7 +4401,7 @@
     events()	# Stas Sergeev added this -- do pending events 
 
 def probe():
-    # launch deep-space probe 
+    "Launch deep-space probe." 
     # New code to launch a deep space probe 
     if game.nprobes == 0:
 	scanner.chew()
@@ -4496,7 +4481,7 @@
 # problem.
 
 def mayday():
-    # yell for help from nearest starbase 
+    "Yell for help from nearest starbase."
     # There's more than one way to move in this game! 
     scanner.chew()
     # Test for conditions which prevent calling for help 
@@ -4594,7 +4579,7 @@
 # can't happen unless you have taken some prisoners.
 
 def abandon():
-    # abandon ship 
+    "Abandon ship."
     scanner.chew()
     if game.condition=="docked":
 	if game.ship!=IHE:
@@ -4617,7 +4602,7 @@
 	if game.iscraft != "onship":
 	    prout(_("Shuttle craft not currently available."))
 	    return
-	# Print abandon ship messages 
+	# Emit abandon ship messages 
 	skip(1)
 	prouts(_("***ABANDON SHIP!  ABANDON SHIP!"))
 	skip(1)
@@ -4694,7 +4679,7 @@
 # Code from planets.c begins here.
 
 def consumeTime():
-    # abort a lengthy operation if an event interrupts it 
+    "Abort a lengthy operation if an event interrupts it." 
     game.ididit = True
     events()
     if game.alldone or game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova or game.justin: 
@@ -4702,7 +4687,7 @@
     return False
 
 def survey():
-    # report on (uninhabited) planets in the galaxy 
+    "Report on (uninhabited) planets in the galaxy."
     iknow = False
     skip(1)
     scanner.chew()
@@ -4730,7 +4715,7 @@
 	prout(_("No information available."))
 
 def orbit():
-    # enter standard orbit 
+    "Enter standard orbit." 
     skip(1)
     scanner.chew()
     if game.inorbit:
@@ -4758,7 +4743,7 @@
     game.ididit = True
 
 def sensor():
-    # examine planets in this quadrant 
+    "Examine planets in this quadrant."
     if damaged(DSRSENS):
 	if game.options & OPTION_TTY:
 	    prout(_("Short range sensors damaged."))
@@ -4785,7 +4770,7 @@
         prout(_("        is located at Sector %s, Captain.\"") % game.plnet)
 
 def beam():
-    # use the transporter 
+    "Use the transporter."
     nrgneed = 0
     scanner.chew()
     skip(1)
@@ -4877,7 +4862,7 @@
     return
 
 def mine():
-    # strip-mine a world for dilithium 
+    "Strip-mine a world for dilithium."
     skip(1)
     scanner.chew()
     if not game.landed:
@@ -4906,7 +4891,7 @@
     game.imine = game.ididit = True
 
 def usecrystals():
-    # use dilithium crystals 
+    "Use dilithium crystals."
     game.ididit = False
     skip(1)
     scanner.chew()
@@ -4952,7 +4937,7 @@
     game.ididit = True
 
 def shuttle():
-    # use shuttlecraft for planetary jaunt 
+    "Use shuttlecraft for planetary jaunt."
     scanner.chew()
     skip(1)
     if damaged(DSHUTTL):
@@ -5036,8 +5021,7 @@
 	    prout(_("Trip complete."))
 	    return
     else:
-	# Kirk on ship 
-	# and so is Galileo 
+	# Kirk on ship and so is Galileo 
 	prout(_("Mining party assembles in the hangar deck,"))
 	prout(_("ready to board the shuttle craft \"Galileo\"."))
 	skip(1)
@@ -5054,7 +5038,7 @@
 	return
 
 def deathray():
-    # use the big zapper 
+    "Use the big zapper."
     game.ididit = False
     skip(1)
     scanner.chew()
@@ -5159,7 +5143,7 @@
 # Code from reports.c begins here
 
 def attackreport(curt):
-    # report status of bases under attack 
+    "eport status of bases under attack."
     if not curt:
 	if is_scheduled(FCDBAS):
 	    prout(_("Starbase in Quadrant %s is currently under Commander attack.") % game.battle)
@@ -5247,7 +5231,7 @@
     skip(1)
 	
 def lrscan(silent):
-    # long-range sensor scan 
+    "Long-range sensor scan."
     if damaged(DLRSENS):
 	# Now allow base's sensors if docked 
 	if game.condition != "docked":
@@ -5278,7 +5262,7 @@
 	prout(" ")
 
 def damagereport():
-    # damage report 
+    "Damage report."
     jdam = False
     scanner.chew()
 
@@ -5295,7 +5279,7 @@
 	prout(_("All devices functional."))
 
 def rechart():
-    # update the chart in the Enterprise's computer from galaxy data 
+    "Update the chart in the Enterprise's computer from galaxy data."
     game.lastchart = game.state.date
     for i in range(GALSIZE):
 	for j in range(GALSIZE):
@@ -5305,7 +5289,7 @@
 		game.state.chart[i][j].stars = game.state.galaxy[i][j].stars
 
 def chart():
-    # display the star chart  
+    "Display the star chart."
     scanner.chew()
     if (game.options & OPTION_AUTOSCAN):
         lrscan(silent=True)
@@ -5314,7 +5298,6 @@
     if game.lastchart < game.state.date and game.condition == "docked":
 	prout(_("Spock-  \"I revised the Star Chart from the starbase's records.\""))
 	rechart()
-
     prout(_("       STAR CHART FOR THE KNOWN GALAXY"))
     if game.state.date > game.lastchart:
 	prout(_("(Last surveillance update %d stardates ago).") % ((int)(game.state.date-game.lastchart)))
@@ -5344,7 +5327,7 @@
 	    skip(1)
 
 def sectscan(goodScan, i, j):
-    # light up an individual dot in a sector 
+    "Light up an individual dot in a sector."
     if goodScan or (abs(i-game.sector.x)<= 1 and abs(j-game.sector.y) <= 1):
 	if (game.quad[i][j]==IHMATER0) or (game.quad[i][j]==IHMATER1) or (game.quad[i][j]==IHMATER2) or (game.quad[i][j]==IHE) or (game.quad[i][j]==IHF):
 	    if game.condition   == "red": textcolor("red")
@@ -5360,8 +5343,7 @@
 	proutn("- ")
 
 def status(req=0):
-    # print status report lines 
-
+    "Emit status report lines"
     if not req or req == 1:
 	prstat(_("Stardate"), _("%.1f, Time Left %.2f") \
                % (game.state.date, game.state.remtime))
@@ -5417,6 +5399,7 @@
 	attackreport(not req)
 
 def request():
+    "Request specified status data, a historical relic from slow TTYs."
     requests = ("da","co","po","ls","wa","en","to","sh","kl","sy", "ti")
     while scanner.next() == IHEOL:
 	proutn(_("Information desired? "))
@@ -5429,7 +5412,7 @@
 	prout(("  energy, torpedoes, shields, klingons, system, time."))
 		
 def srscan():
-    # short-range scan 
+    "Short-range scan." 
     goodScan=True
     if damaged(DSRSENS):
 	# Allow base's sensors if docked 
@@ -5455,7 +5438,7 @@
 	skip(1)
 			
 def eta():
-    # use computer to get estimated time of arrival for a warp jump 
+    "Use computer to get estimated time of arrival for a warp jump."
     w1 = coord(); w2 = coord()
     prompt = False
     if damaged(DCOMPTR):
@@ -5580,7 +5563,7 @@
 # Code from setup.c begins here
 
 def prelim():
-    # issue a historically correct banner 
+    "Issue a historically correct banner."
     skip(2)
     prout(_("-SUPER- STAR TREK"))
     skip(1)
@@ -5589,7 +5572,7 @@
 #    skip(1)
 
 def freeze(boss):
-    # save game 
+    "Save game."
     if boss:
 	scanner.token = "emsave.trk"
     else:
@@ -5612,7 +5595,7 @@
     fp.close()
 
 def thaw():
-    # retrieve saved game 
+    "Retrieve saved game." 
     game.passwd[0] = '\0'
     key = scanner.next()
     if key == IHEOL:
@@ -5705,7 +5688,7 @@
 )
 
 def setup():
-    # prepare to play, set up cosmos 
+    "Prepare to play, set up cosmos."
     w = coord()
     #  Decide how many of everything
     if choose():
@@ -5898,7 +5881,7 @@
 	attack(torps_ok=False)
 
 def choose():
-    # choose your game type
+    "Choose your game type."
     global thing
     while True:
 	game.tourn = 0
@@ -5984,8 +5967,7 @@
     setpassword()
     if game.passwd == "debug":
 	idebug = True
-	fputs("=== Debug mode enabled\n", sys.stdout)
-
+	prout("=== Debug mode enabled.")
     # Use parameters to generate initial values of things
     game.damfac = 0.5 * game.skill
     game.inbase = randrange(BASEMIN, BASEMAX+1)
@@ -6007,7 +5989,7 @@
     return False
 
 def dropin(iquad=None):
-    # drop a feature on a random dot in the current quadrant 
+    "Drop a feature on a random dot in the current quadrant."
     w = coord()
     while True:
         w = randplace(QUADSIZE)
@@ -6018,7 +6000,7 @@
     return w
 
 def newcnd():
-    # update our alert status 
+    "Update our alert status."
     game.condition = "green"
     if game.energy < 1000.0:
 	game.condition = "yellow"
@@ -6028,11 +6010,11 @@
 	game.condition="dead"
 
 def newkling():
-    # drop new Klingon into current quadrant
+    "Drop new Klingon into current quadrant."
     return enemy(IHK, loc=dropin(), power=randreal(300,450)+25.0*game.skill)
 
 def newqad(shutup):
-    # set up a new state of quadrant, for when we enter or re-enter it 
+    "Set up a new state of quadrant, for when we enter or re-enter it."
     w = coord()
     game.justin = True
     game.klhere = 0
@@ -6151,7 +6133,7 @@
 	    game.quad[QUADSIZE-1][QUADSIZE-1] = IHDOT
 
 def setpassword():
-    # set the self-destruct password 
+    "Set the self-destruct password."
     if game.options & OPTION_PLAIN:
 	while True:
 	    scanner.chew()
@@ -6212,7 +6194,7 @@
 def ACCEPT(cmd):	return (not commands[cmd] or (commands[cmd] & game.options))
 
 def listCommands():
-    # generate a list of legal commands 
+    "Generate a list of legal commands."
     k = 0
     proutn(_("LEGAL COMMANDS ARE:"))
     for key in commands:
@@ -6224,8 +6206,7 @@
     skip(1)
 
 def helpme():
-    # browse on-line help 
-    # Give help on commands 
+    "Browse on-line help."
     key = scanner.next()
     while True:
 	if key == IHEOL:
@@ -6281,7 +6262,7 @@
     fp.close()
 
 def makemoves():
-    # command-interpretation loop 
+    "Command-interpretation loop."
     v = 0
     clrscr()
     setwnd(message_window)
@@ -6440,7 +6421,7 @@
 	prout("=== Ending")
 
 def cramen(cmd):
-    # return an enemy 
+    "Emit the name of an enemy or feature." 
     if   cmd == IHR: s = _("Romulan")
     elif cmd == IHK: s = _("Klingon")
     elif cmd == IHC: s = _("Commander")
@@ -6457,7 +6438,7 @@
     proutn(s)
 
 def crmena(stars, enemy, loctype, w):
-    # print an enemy and his location 
+    "Emit the name of an enemy and his location." 
     if stars:
 	proutn("***")
     cramen(enemy)
@@ -6470,7 +6451,7 @@
     proutn(buf + `w`)
 
 def crmshp():
-    # print our ship name 
+    "Emit our ship name." 
     if game.ship == IHE:
         s = _("Enterprise")
     elif game.ship == IHF:
@@ -6480,7 +6461,7 @@
     proutn(s)
 
 def stars():
-    # print a line of stars 
+    "Emit a line of stars" 
     prouts("******************************************************")
     skip(1)
 
@@ -6488,7 +6469,7 @@
     return -avrage*math.log(1e-7 + randreal())
 
 def randplace(size):
-    # choose a random location  
+    "Choose a random location."
     w = coord()
     w.x = randrange(size) 
     w.y = randrange(size)
@@ -6535,15 +6516,17 @@
         self.type = IHALPHA
         self.real = None
         return IHALPHA
-    def push(self, toklist):
-        self.inqueue += toklist
+    def push(self, tok):
+        self.inqueue.append(tok)
+    def waiting(self):
+        return self.inqueue
     def chew(self):
         # Demand input for next scan
-        self.inqueue = None
+        self.inqueue = []
         self.real = self.token = None
     def chew2(self):
         # return IHEOL next time 
-        self.inqueue = []
+        self.inqueue = [IHEOL]
         self.real = self.token = None
     def sees(self, s):
         # compares s to item and returns true if it matches to the length of s
@@ -6551,9 +6534,22 @@
     def int(self):
         # Round token value to nearest integer
         return int(round(scanner.real))
+    def getcoord(self):
+        s = coord()
+        scanner.next()
+    	if scanner.type != IHREAL:
+	    huh()
+	    return None
+	s.x = scanner.int()-1
+        scanner.next()
+	if scanner.type != IHREAL:
+	    huh()
+	    return None
+	s.y = scanner.int()-1
+        return s
 
 def ja():
-    # yes-or-no confirmation 
+    "Yes-or-no confirmation."
     scanner.chew()
     while True:
 	scanner.next()
@@ -6565,13 +6561,13 @@
 	proutn(_("Please answer with \"y\" or \"n\": "))
 
 def huh():
-    # complain about unparseable input 
+    "Complain about unparseable input."
     scanner.chew()
     skip(1)
     prout(_("Beg your pardon, Captain?"))
 
 def debugme():
-    # access to the internals for debugging 
+    "Access to the internals for debugging."
     proutn("Reset levels? ")
     if ja() == True:
 	if game.energy < game.inenrg:
@@ -6714,7 +6710,7 @@
             logfp.write("# options %s\n" % " ".join(arguments))
         random.seed(seed)
         scanner = sstscanner()
-        scanner.push(arguments)
+        map(scanner.push, arguments)
         try:
             iostart()
             while True: # Play a game 



From esr at mail.berlios.de  Mon Oct  9 15:31:31 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 9 Oct 2006 15:31:31 +0200
Subject: [Sst-commit-watch] r716 - trunk/src
Message-ID: <200610091331.k99DVVRJ006591@sheep.berlios.de>

Author: esr
Date: 2006-10-09 15:31:30 +0200 (Mon, 09 Oct 2006)
New Revision: 716

Modified:
   trunk/src/sst.py
Log:
More code slimming in the Python version.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-09 12:55:21 UTC (rev 715)
+++ trunk/src/sst.py	2006-10-09 13:31:30 UTC (rev 716)
@@ -643,8 +643,8 @@
     # we know this if either short or long range sensors are working
     if not damaged(DSRSENS) or not damaged(DLRSENS) or \
 	game.condition == "docked":
-	crmena(True, enemy.type, "sector", enemy.kloc)
-	prout(_(" escapes to Quadrant %s (and regains strength).") % q)
+	prout(crmena(True, enemy.type, "sector", enemy.kloc) + \
+              (_(" escapes to Quadrant %s (and regains strength).") % q))
     # handle local matters related to escape
     enemy.move(None)
     game.klhere -= 1
@@ -847,9 +847,7 @@
 	skip(1)
     if enemy.move(next):
 	if not damaged(DSRSENS) or game.condition == "docked":
-	    proutn("***")
-	    cramen(enemy.type)
-	    proutn(_(" from Sector %s") % enemy.kloc)
+	    proutn(_("*** %s from Sector %s") % (cramen(enemy.type), enemy.kloc))
 	    if enemy.kdist < dist1:
 		proutn(_(" advances to "))
 	    else:
@@ -1085,8 +1083,7 @@
     # All plugged up -- Tholian splits 
     game.quad[game.tholian.kloc.x][game.tholian.kloc.y]=IHWEB
     dropin(IHBLANK)
-    crmena(True, IHT, "sector", game.tholian)
-    prout(_(" completes web."))
+    prout(crmena(True, IHT, "sector", game.tholian) + _(" completes web."))
     game.tholian.move(None)
     return
 
@@ -1257,20 +1254,18 @@
     prout(_("***COLLISION IMMINENT."))
     skip(2)
     proutn("***")
-    crmshp()
+    proutn(crmshp())
     hardness = {IHR:1.5, IHC:2.0, IHS:2.5, IHT:0.5, IHQUEST:4.0}.get(enemy.type, 1.0)
     if rammed:
         proutn(_(" rammed by "))
     else:
         proutn(_(" rams "))
-    crmena(False, enemy.type, "sector", enemy.kloc)
+    proutn(crmena(False, enemy.type, "sector", enemy.kloc))
     if rammed:
 	proutn(_(" (original position)"))
     skip(1)
     deadkl(enemy.kloc, enemy.type, game.sector)
-    proutn("***")
-    crmshp()
-    prout(_(" heavily damaged."))
+    proutn("***" + crmship() + " heavily damaged.")
     icas = randrange(10, 30)
     prout(_("***Sickbay reports %d casualties"), icas)
     game.casual += icas
@@ -1307,8 +1302,7 @@
     deltax = -math.sin(angle);
     deltay = math.cos(angle);
     x = origin.x; y = origin.y
-    w = coord(); jw = coord()
-    w.x = w.y = jw.x = jw.y = 0
+    w = coord(0, 0); jw = coord(0, 0)
     bigger = max(math.fabs(deltax), math.fabs(deltay))
     deltax /= bigger
     deltay /= bigger
@@ -1334,9 +1328,7 @@
 	    skip(1);	# start new line after text track 
 	if iquad in (IHE, IHF): # Hit our ship 
 	    skip(1)
-	    proutn(_("Torpedo hits "))
-	    crmshp()
-	    prout(".")
+	    prout(_("Torpedo hits %s.") % crmshp())
 	    hit = 700.0 + randreal(100) - \
 		1000.0 * (w-origin).distance() * math.fabs(math.sin(bullseye-angle))
 	    newcnd(); # we're blown out of dock 
@@ -1360,12 +1352,11 @@
 		# can't move into object 
 		return hit
 	    game.sector = jw
-	    crmshp()
+	    proutn(crmshp())
 	    shoved = True
 	elif iquad in (IHC, IHS): # Hit a commander 
 	    if withprob(0.05):
-		crmena(True, iquad, "sector", w)
-		prout(_(" uses anti-photon device;"))
+		prout(crmena(True, iquad, "sector", w) + _(" uses anti-photon device;"))
 		prout(_("   torpedo neutralized."))
 		return None
 	elif iquad in (IHR, IHK): # Hit a regular enemy 
@@ -1386,7 +1377,7 @@
 	    if enemy.kpower == 0:
 		deadkl(w, iquad, w)
 		return None
-	    crmena(True, iquad, "sector", w)
+	    proutn(crmena(True, iquad, "sector", w))
 	    # If enemy damaged but not destroyed, try to displace 
 	    ang = angle + 2.5*(randreal()-0.5)
 	    temp = math.fabs(math.sin(ang))
@@ -1423,8 +1414,7 @@
 	    newcnd()
 	    return None
 	elif iquad == IHP: # Hit a planet 
-	    crmena(True, iquad, "sector", w)
-	    prout(_(" destroyed."))
+	    prout(crmena(True, iquad, "sector", w) + _(" destroyed."))
 	    game.state.nplankl += 1
 	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = None
 	    game.iplnet.pclass = "destroyed"
@@ -1436,8 +1426,7 @@
 		finish(FDPLANET)
 	    return None
 	elif iquad == IHW: # Hit an inhabited world -- very bad! 
-	    crmena(True, iquad, "sector", w)
-	    prout(_(" destroyed."))
+	    prout(crmena(True, iquad, "sector", w) + _(" destroyed."))
 	    game.state.nworldkl += 1
 	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = None
 	    game.iplnet.pclass = "destroyed"
@@ -1454,8 +1443,7 @@
 	    if withprob(0.9):
 		nova(w)
             else:
-                crmena(True, IHSTAR, "sector", w)
-                prout(_(" unaffected by photon blast."))
+                prout(crmena(True, IHSTAR, "sector", w) + _(" unaffected by photon blast."))
 	    return None
 	elif iquad == IHQUEST: # Hit a thingy 
 	    if not (game.options & OPTION_THINGY) or withprob(0.3):
@@ -1479,8 +1467,7 @@
 	    return None
 	elif iquad == IHBLANK: # Black hole 
 	    skip(1)
-	    crmena(True, IHBLANK, "sector", w)
-	    prout(_(" swallows torpedo."))
+	    prout(crmena(True, IHBLANK, "sector", w) + _(" swallows torpedo."))
 	    return None
 	elif iquad == IHWEB: # hit the web 
 	    skip(1)
@@ -1496,7 +1483,7 @@
 		game.tholian = None
 		return None
 	    skip(1)
-	    crmena(True, IHT, "sector", w)
+	    proutn(crmena(True, IHT, "sector", w))
 	    if withprob(0.05):
 		prout(_(" survives photon blast."))
 		return None
@@ -1508,7 +1495,7 @@
         else: # Problem!
 	    skip(1)
 	    proutn("Don't know how to handle torpedo collision with ")
-	    crmena(True, iquad, "sector", w)
+	    proutn(crmena(True, iquad, "sector", w))
 	    skip(1)
 	    return None
 	break
@@ -1620,8 +1607,7 @@
 	    hit = 0
 	    proutn(_("***TORPEDO INCOMING"))
 	    if not damaged(DSRSENS):
-		proutn(_(" From "))
-		crmena(False, enemy.type, where, enemy.kloc)
+		proutn(_(" From ") + crmena(False, enemy.type, where, enemy.kloc))
 	    attempt = True
 	    prout("  ")
 	    dispersion = (randreal()+randreal())*0.5 - 0.5
@@ -1657,11 +1643,9 @@
 	ihurt = True
 	proutn(_("%d unit hit") % int(hit))
 	if (damaged(DSRSENS) and usephasers) or game.skill<=SKILL_FAIR:
-	    proutn(_(" on the "))
-	    crmshp()
+	    proutn(_(" on the ") + crmshp())
 	if not damaged(DSRSENS) and usephasers:
-	    proutn(_(" from "))
-	    crmena(False, enemy.type, where, enemy.kloc)
+	    prout(_(" from ") + crmena(False, enemy.type, where, enemy.kloc))
 	skip(1)
 	# Decide if hit is critical 
 	if hit > hitmax:
@@ -1708,7 +1692,7 @@
 def deadkl(w, type, mv):
     "Kill a Klingon, Tholian, Romulan, or Thingy." 
     # Added mv to allow enemy to "move" before dying 
-    crmena(True, type, "sector", mv)
+    proutn(crmena(True, type, "sector", mv))
     # Decide what kind of enemy it is and update appropriately 
     if type == IHR:
         # chalk up a Romulan 
@@ -1938,7 +1922,7 @@
 	ienm = game.quad[w.x][w.y]
 	if ienm==IHQUEST:
 	    thing.angry = True
-	crmena(False, ienm, "sector", w)
+	proutn(crmena(False, ienm, "sector", w))
 	skip(1)
 	if kpow == 0:
 	    deadkl(w, ienm, w)
@@ -2127,8 +2111,7 @@
 		rpow = 0.0
 	    if damaged(DSRSENS) and \
                not game.sector.distance(aim)<2**0.5 and ienm in (IHC, IHS):
-		cramen(ienm)
-		prout(_(" can't be located without short range scan."))
+		prout(cramen(ienm) + _(" can't be located without short range scan."))
 		scanner.chew()
 		key = IHEOL
 		hits[k] = 0; # prevent overflow -- thanks to Alexei Voitenko 
@@ -2145,9 +2128,8 @@
 		else:
 		    proutn("??")
 		proutn(")  ")
-		proutn(_("units to fire at "))
-		crmena(False, ienm, "sector", aim)
-		proutn("-  ")
+		proutn(_("units to fire at %s-  ") % crmena(False, ienm, "sector", aim))
+		
 		key = scanner.next()
 	    if key == IHALPHA and scanner.sees("no"):
 		no = True
@@ -2257,9 +2239,7 @@
         announce()
         game.optime = (10.0/(7.5*7.5))*yank # 7.5 is yank rate (warp 7.5) 
         skip(1)
-        proutn("***")
-        crmshp()
-        prout(_(" caught in long range tractor beam--"))
+        prout("***" + crmshp() + _(" caught in long range tractor beam--"))
         # If Kirk & Co. screwing around on planet, handle 
         atover(True) # atover(true) is Grab 
         if game.alldone:
@@ -2282,8 +2262,7 @@
         else:
             game.quadrant = game.state.kcmdr[i]
         game.sector = randplace(QUADSIZE)
-        crmshp()
-        prout(_(" is pulled to Quadrant %s, Sector %s") \
+        prout(crmshp() + _(" is pulled to Quadrant %s, Sector %s") \
                % (game.quadrant, game.sector))
         if game.resting:
             prout(_("(Remainder of rest/repair period cancelled.)"))
@@ -2718,8 +2697,7 @@
 	return
     # handle initial nova 
     game.quad[nov.x][nov.y] = IHDOT
-    crmena(False, IHSTAR, "sector", nov)
-    prout(_(" novas."))
+    prout(crmena(False, IHSTAR, "sector", nov) + _(" novas."))
     game.state.galaxy[game.quadrant.x][game.quadrant.y].stars -= 1
     game.state.starkl += 1
     # Set up queue to recursively trigger adjacent stars 
@@ -2748,7 +2726,7 @@
                         hits.append(neighbor)
 			game.state.galaxy[game.quadrant.x][game.quadrant.y].stars -= 1
 			game.state.starkl += 1
-			crmena(True, IHSTAR, "sector", neighbor)
+			proutn(crmena(True, IHSTAR, "sector", neighbor))
 			prout(_(" novas."))
                         game.quad[neighbor.x][neighbor.y] = IHDOT
                         kount += 1
@@ -2758,8 +2736,7 @@
                         game.state.nplankl += 1
                     else:
                         game.state.worldkl += 1
-                    crmena(True, iquad, "sector", neighbor)
-                    prout(_(" destroyed."))
+                    prout(crmena(True, IHB, "sector", neighbor) + _(" destroyed."))
                     game.iplnet.pclass = "destroyed"
                     game.iplnet = None
                     game.plnet.invalidate()
@@ -2773,8 +2750,7 @@
                     game.base.invalidate()
                     game.state.basekl += 1
                     newcnd()
-                    crmena(True, IHB, "sector", neighbor)
-                    prout(_(" destroyed."))
+                    prout(crmena(True, IHB, "sector", neighbor) + _(" destroyed."))
                     game.quad[neighbor.x][neighbor.y] = IHDOT
                 elif iquad in (IHE, IHF): # Buffet ship 
                     prout(_("***Starship buffeted by nova."))
@@ -2806,16 +2782,14 @@
                         deadkl(neighbor, iquad, neighbor)
                         break
                     newc = neighbor + neighbor - hits[mm]
-                    crmena(True, iquad, "sector", neighbor)
-                    proutn(_(" damaged"))
+                    proutn(crmena(True, iquad, "sector", neighbor) + _(" damaged"))
                     if not VALID_SECTOR(newc.x, newc.y):
                         # can't leave quadrant 
                         skip(1)
                         break
                     iquad1 = game.quad[newc.x][newc.y]
                     if iquad1 == IHBLANK:
-                        proutn(_(", blasted into "))
-                        crmena(False, IHBLANK, "sector", newc)
+                        proutn(_(", blasted into ") + crmena(False, IHBLANK, "sector", newc))
                         skip(1)
                         deadkl(neighbor, iquad, newc)
                         break
@@ -2990,9 +2964,7 @@
     stars()
     if game.ship==IHE:
 	prouts("***")
-    prouts(_("********* Entropy of "))
-    crmshp()
-    prouts(_(" maximized *********"))
+    prouts(_("********* Entropy of %s maximized *********") % crmshp())
     skip(1)
     stars()
     skip(1)
@@ -3121,9 +3093,7 @@
 	skip(1)
 	prout(_("Your starship is a derelict in space."))
     elif ifin == FBATTLE:
-	proutn(_("The "))
-	crmshp()
-	prout(_(" has been destroyed in battle."))
+	prout(_("The %s has been destroyed in battle.") % crmshp())
 	skip(1)
 	prout(_("Dulce et decorum est pro patria mori."))
     elif ifin == FNEG3:
@@ -3137,9 +3107,7 @@
 	prout(_("That was a great shot."))
 	skip(1)
     elif ifin == FSNOVAED:
-	proutn(_("The "))
-	crmshp()
-	prout(_(" has been fried by a supernova."))
+	prout(_("The %s has been fried by a supernova.") % crmshp())
 	prout(_("...Not even cinders remain..."))
     elif ifin == FABANDN:
 	prout(_("You have been captured by the Klingons. If you still"))
@@ -3152,9 +3120,7 @@
 	prout(_("Starbase was unable to re-materialize your starship."))
 	prout(_("Sic transit gloria mundi"))
     elif ifin == FPHASER:
-	proutn(_("The "))
-	crmshp()
-	prout(_(" has been cremated by its own phasers."))
+	prout(_("The %s has been cremated by its own phasers.") % crmshp())
     elif ifin == FLOST:
 	prout(_("You and your landing party have been"))
 	prout(_("converted to energy, disipating through space."))
@@ -3164,9 +3130,7 @@
 	skip(1)
 	prout(_("They are very fond of \"Captain Kirk\" soup."))
 	skip(1)
-	proutn(_("Without your leadership, the "))
-	crmshp()
-	prout(_(" is destroyed."))
+	prout(_("Without your leadership, the %s is destroyed.") % crmshp())
     elif ifin == FDPLANET:
 	prout(_("You and your mining party perish."))
 	skip(1)
@@ -3176,25 +3140,19 @@
 	prout(_("The Galileo is instantly annihilated by the supernova."))
 	prout(_("You and your mining party are atomized."))
 	skip(1)
-	proutn(_("Mr. Spock takes command of the "))
-	crmshp()
-	prout(_(" and"))
-	prout(_("joins the Romulans, reigning terror on the Federation."))
+	prout(_("Mr. Spock takes command of the %s and") % crmshp())
+	prout(_("joins the Romulans, wreaking terror on the Federation."))
     elif ifin == FPNOVA:
 	prout(_("You and your mining party are atomized."))
 	skip(1)
-	proutn(_("Mr. Spock takes command of the "))
-	crmshp()
-	prout(_(" and"))
-	prout(_("joins the Romulans, reigning terror on the Federation."))
+	prout(_("Mr. Spock takes command of the %s and") % crmshp())
+	prout(_("joins the Romulans, wreaking terror on the Federation."))
     elif ifin == FSTRACTOR:
 	prout(_("The shuttle craft Galileo is also caught,"))
 	prout(_("and breaks up under the strain."))
 	skip(1)
 	prout(_("Your debris is scattered for millions of miles."))
-	proutn(_("Without your leadership, the "))
-	crmshp()
-	prout(_(" is destroyed."))
+	prout(_("Without your leadership, the %s is destroyed.") % crmshp())
     elif ifin == FDRAY:
 	prout(_("The mutants attack and kill Spock."))
 	prout(_("Your ship is captured by Klingons, and"))
@@ -3841,8 +3799,7 @@
 		    skip(1)
 		    prouts(_("***RED ALERT!  RED ALERT!"))
 		    skip(1)
-		    proutn("***")
-		    crmshp()
+		    proutn("***" + crmshp())
 		    proutn(_(" pulled into black hole at Sector %s") % w)
 		    #
 		    # Getting pulled into a black hole was certain
@@ -3862,7 +3819,7 @@
 		else:
 		    # something else 
 		    skip(1)
-		    crmshp()
+		    proutn(crmshp())
 		    if iquad == IHWEB:
 			prout(_(" encounters Tholian web at %s;") % w)
 		    else:
@@ -3895,8 +3852,7 @@
 	prout(_("You must first leave standard orbit."))
 	return
     if not game.base.is_valid() or abs(game.sector.x-game.base.x) > 1 or abs(game.sector.y-game.base.y) > 1:
-	crmshp()
-	prout(_(" not adjacent to base."))
+	prout(crmshp() + _(" not adjacent to base."))
 	return
     game.condition = "docked"
     if "verbose":
@@ -4306,13 +4262,10 @@
 	if game.justin:
 	    prouts(_("***RED ALERT!  RED ALERT!"))
 	    skip(1)
-	    proutn(_("The "))
-	    crmshp()
-	    prout(_(" has stopped in a quadrant containing"))
+	    proutn(_("The %s has stopped in a quadrant containing") % crmshp())
 	    prouts(_("   a supernova."))
 	    skip(2)
-	proutn(_("***Emergency automatic override attempts to hurl "))
-	crmshp()
+	prout(_("***Emergency automatic override attempts to hurl ")+crmshp())
 	skip(1)
 	prout(_("safely out of quadrant."))
 	if not damaged(DRADIO):
@@ -4495,9 +4448,7 @@
 	prout(_("Lt. Uhura-  \"Captain, I'm not getting any response from Starbase.\""))
 	return
     if game.landed:
-	proutn(_("You must be aboard the "))
-	crmshp()
-	prout(".")
+	prout(_("You must be aboard the %s.") % crmshp())
 	return
     # OK -- call for help from nearest starbase 
     game.nhelp += 1
@@ -4515,13 +4466,12 @@
 	newqad(True)
     # dematerialize starship 
     game.quad[game.sector.x][game.sector.y]=IHDOT
-    proutn(_("Starbase in Quadrant %s responds--") % game.quadrant)
-    crmshp()
-    prout(_(" dematerializes."))
-    game.sector.x=0
+    proutn(_("Starbase in Quadrant %s responds--%s dematerializes") \
+           % (game.quadrant, crmshp()))
+    game.sector.invalidate()
     for m in range(1, 5+1):
         w = game.base.scatter() 
-	if VALID_SECTOR(ix,iy) and game.quad[ix][iy]==IHDOT:
+	if VALID_SECTOR(w.x,w.y) and game.quad[w.x][w.y]==IHDOT:
 	    # found one -- finish up 
             game.sector = w
 	    break
@@ -4535,8 +4485,7 @@
 	if m == 1: proutn(_("1st"))
 	elif m == 2: proutn(_("2nd"))
 	elif m == 3: proutn(_("3rd"))
-	proutn(_(" attempt to re-materialize "))
-	crmshp()
+	proutn(_(" attempt to re-materialize ") + crmshp())
 	game.quad[ix][iy]=(IHMATER0,IHMATER1,IHMATER2)[m-1]
 	textcolor("red")
 	warble()
@@ -4728,8 +4677,7 @@
         prout("There is no planet in this sector.")
         return
     if abs(game.sector.x-game.plnet.x)>1 or abs(game.sector.y-game.plnet.y)>1:
-	crmshp()
-	prout(_(" not adjacent to planet."))
+	prout(crmshp() + _(" not adjacent to planet."))
 	skip(1)
 	return
     game.optime = randreal(0.02, 0.05)
@@ -4783,8 +4731,7 @@
 		shuttle()
 	return
     if not game.inorbit:
-	crmshp()
-	prout(_(" not in standard orbit."))
+	prout(crmshp() + _(" not in standard orbit."))
 	return
     if game.shldup:
 	prout(_("Impossible to transport through shields."))
@@ -4878,9 +4825,7 @@
 	prout(_("You've already mined enough crystals for this trip."))
 	return
     if game.icrystl and game.cryprob == 0.05:
-	proutn(_("With all those fresh crystals aboard the "))
-	crmshp()
-	skip(1)
+	prout(_("With all those fresh crystals aboard the ") + crmshp())
 	prout(_("there's no reason to mine more at this time."))
 	return
     game.optime = randreal(0.1, 0.3)*(ord(game.iplnet.pclass)-ord("L"))
@@ -4952,8 +4897,7 @@
 	    prout(_("Shuttle craft is now serving Big Macs."))
 	return
     if not game.inorbit:
-	crmshp()
-	prout(_(" not in standard orbit."))
+	prout(crmshp() + _(" not in standard orbit."))
 	return
     if (game.iplnet.known != "shuttle_down") and game.iscraft != "onship":
 	prout(_("Shuttle craft not currently available."))
@@ -6420,35 +6364,34 @@
     if idebug:
 	prout("=== Ending")
 
-def cramen(cmd):
+def cramen(type):
     "Emit the name of an enemy or feature." 
-    if   cmd == IHR: s = _("Romulan")
-    elif cmd == IHK: s = _("Klingon")
-    elif cmd == IHC: s = _("Commander")
-    elif cmd == IHS: s = _("Super-commander")
-    elif cmd == IHSTAR: s = _("Star")
-    elif cmd == IHP: s = _("Planet")
-    elif cmd == IHB: s = _("Starbase")
-    elif cmd == IHBLANK: s = _("Black hole")
-    elif cmd == IHT: s = _("Tholian")
-    elif cmd == IHWEB: s = _("Tholian web")
-    elif cmd == IHQUEST: s = _("Stranger")
-    elif cmd == IHW: s = _("Inhabited World")
+    if   type == IHR: s = _("Romulan")
+    elif type == IHK: s = _("Klingon")
+    elif type == IHC: s = _("Commander")
+    elif type == IHS: s = _("Super-commander")
+    elif type == IHSTAR: s = _("Star")
+    elif type == IHP: s = _("Planet")
+    elif type == IHB: s = _("Starbase")
+    elif type == IHBLANK: s = _("Black hole")
+    elif type == IHT: s = _("Tholian")
+    elif type == IHWEB: s = _("Tholian web")
+    elif type == IHQUEST: s = _("Stranger")
+    elif type == IHW: s = _("Inhabited World")
     else: s = "Unknown??"
-    proutn(s)
+    return s
 
 def crmena(stars, enemy, loctype, w):
-    "Emit the name of an enemy and his location." 
-    if stars:
-	proutn("***")
-    cramen(enemy)
-    proutn(_(" at "))
+    "Emit the name of an enemy and his location."
     buf = ""
+    if stars:
+	buf += "***"
+    buf += cramen(enemy) + _(" at ")
     if loctype == "quadrant":
-	buf = _("Quadrant ")
+	buf += _("Quadrant ")
     elif loctype == "sector":
-	buf = _("Sector ")
-    proutn(buf + `w`)
+	buf += _("Sector ")
+    return buf + `w`
 
 def crmshp():
     "Emit our ship name." 
@@ -6458,7 +6401,7 @@
         s = _("Faerie Queene")
     else:
         s = "Ship???"
-    proutn(s)
+    return s
 
 def stars():
     "Emit a line of stars" 



From stsp at mail.berlios.de  Mon Oct  9 19:41:35 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Mon, 9 Oct 2006 19:41:35 +0200
Subject: [Sst-commit-watch] r717 - trunk/src
Message-ID: <200610091741.k99HfZVa007063@sheep.berlios.de>

Author: stsp
Date: 2006-10-09 19:41:34 +0200 (Mon, 09 Oct 2006)
New Revision: 717

Modified:
   trunk/src/io.c
   trunk/src/sst.py
Log:
announce doesnt ask for enter

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-10-09 13:31:30 UTC (rev 716)
+++ trunk/src/io.c	2006-10-09 17:41:34 UTC (rev 717)
@@ -92,10 +92,7 @@
 void announce(void)
 {
     skip(1);
-    if (game.skill > SKILL_FAIR)
-	prouts(_("[ANOUNCEMENT ARRIVING...]"));
-    else
-	prouts(_("[IMPORTANT ANNOUNCEMENT ARRIVING -- PRESS ENTER TO CONTINUE]"));
+    prouts(_("[ANOUNCEMENT ARRIVING...]"));
     skip(1);
 }
 

Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-09 13:31:30 UTC (rev 716)
+++ trunk/src/sst.py	2006-10-09 17:41:34 UTC (rev 717)
@@ -3424,10 +3424,7 @@
 
 def announce():
     skip(1)
-    if game.skill > SKILL_FAIR:
-	prouts(_("[ANOUNCEMENT ARRIVING...]"))
-    else:
-	prouts(_("[IMPORTANT ANNOUNCEMENT ARRIVING -- PRESS ENTER TO CONTINUE]"))
+    prouts(_("[ANOUNCEMENT ARRIVING...]"))
     skip(1)
 
 def pause_game():



From esr at mail.berlios.de  Mon Oct  9 20:33:56 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 9 Oct 2006 20:33:56 +0200
Subject: [Sst-commit-watch] r718 - trunk/src
Message-ID: <200610091833.k99IXuSI011821@sheep.berlios.de>

Author: esr
Date: 2006-10-09 20:33:55 +0200 (Mon, 09 Oct 2006)
New Revision: 718

Modified:
   trunk/src/sst.py
Log:
Dead-code removal.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-09 17:41:34 UTC (rev 717)
+++ trunk/src/sst.py	2006-10-09 18:33:55 UTC (rev 718)
@@ -1196,8 +1196,7 @@
 	return
 
 def randdevice():
-    # choose a device to damage, at random. 
-    #
+    "Choose a device to damage, at random."
     # Quoth Eric Allman in the code of BSD-Trek:
     # "Under certain conditions you can get a critical hit.  This
     # sort of hit damages devices.  The probability that a given
@@ -1220,7 +1219,6 @@
     # We don't have a cloaking device.  The shuttle got the allocation
     # for the cloaking device, then we shaved a half-percent off
     # everything to have some weight to give DSHCTRL/DDRAY/DDSP.
-    # 
     weights = (
 	105,	# DSRSENS: short range scanners	10.5% 
 	105,	# DLRSENS: long range scanners		10.5% 
@@ -1270,11 +1268,9 @@
     prout(_("***Sickbay reports %d casualties"), icas)
     game.casual += icas
     game.state.crew -= icas
-    #
     # In the pre-SST2K version, all devices got equiprobably damaged,
     # which was silly.  Instead, pick up to half the devices at
     # random according to our weighting table,
-    # 
     ncrits = randrange(NDEVICES/2)
     for m in range(ncrits):
 	dev = randdevice()
@@ -4144,7 +4140,6 @@
 		bigger = math.fabs(deltax)
 	    else:
 		bigger = math.fabs(deltay)
-			
 	    deltax /= bigger
 	    deltay /= bigger
 	    n = 10.0 * game.dist * bigger +0.5
@@ -4572,7 +4567,6 @@
 		    game.state.crew)
 	    game.casual += game.state.crew
 	    game.abandoned += game.state.crew
-
 	# If at least one base left, give 'em the Faerie Queene 
 	skip(1)
 	game.icrystl = False # crystals are lost 
@@ -5499,7 +5493,6 @@
 	    scanner.chew()
 	    skip(1)
 	    return
-			
 
 # Code from setup.c begins here
 
@@ -5931,7 +5924,6 @@
 
 def dropin(iquad=None):
     "Drop a feature on a random dot in the current quadrant."
-    w = coord()
     while True:
         w = randplace(QUADSIZE)
         if game.quad[w.x][w.y] == IHDOT:
@@ -6132,18 +6124,14 @@
     "HELP":		0,
 }
 
-def ACCEPT(cmd):	return (not commands[cmd] or (commands[cmd] & game.options))
-
 def listCommands():
     "Generate a list of legal commands."
-    k = 0
     proutn(_("LEGAL COMMANDS ARE:"))
-    for key in commands:
-	if ACCEPT(key):
+    for (k, key) in enumerate(commands):
+	if not commands[cmd] or (commands[key] & game.options):
             if k % 5 == 0:
                 skip(1)
             proutn("%-12s " % key) 
-            k += 1
     skip(1)
 
 def helpme():
@@ -6204,7 +6192,6 @@
 
 def makemoves():
     "Command-interpretation loop."
-    v = 0
     clrscr()
     setwnd(message_window)
     while True: 	# command loop 
@@ -6392,13 +6379,7 @@
 
 def crmshp():
     "Emit our ship name." 
-    if game.ship == IHE:
-        s = _("Enterprise")
-    elif game.ship == IHF:
-        s = _("Faerie Queene")
-    else:
-        s = "Ship???"
-    return s
+    return{IHE:_("Enterprise"),IHF:_("Faerie Queene")}.get(game.ship,"Ship???")
 
 def stars():
     "Emit a line of stars" 
@@ -6530,9 +6511,7 @@
     proutn("Cause selective damage? ")
     if ja() == True:
 	for i in range(NDEVICES):
-	    proutn("Kill ")
-	    proutn(device[i])
-	    proutn("? ")
+	    proutn("Kill %s?" % device[i])
 	    scanner.chew()
 	    key = scanner.next()
             if key == IHALPHA and scanner.sees("y"):



From esr at mail.berlios.de  Mon Oct  9 20:53:42 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 9 Oct 2006 20:53:42 +0200
Subject: [Sst-commit-watch] r719 - trunk/src
Message-ID: <200610091853.k99Irg4V013556@sheep.berlios.de>

Author: esr
Date: 2006-10-09 20:53:42 +0200 (Mon, 09 Oct 2006)
New Revision: 719

Modified:
   trunk/src/sst.py
Log:
Get rid of a special case in the old code.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-09 18:33:55 UTC (rev 718)
+++ trunk/src/sst.py	2006-10-09 18:53:42 UTC (rev 719)
@@ -1453,11 +1453,9 @@
 		skip(1)
 		deadkl(w, iquad, w)
 	    else:
-		#
 		# Stas Sergeev added the possibility that
 		# you can shove the Thingy and piss it off.
 		# It then becomes an enemy and may fire at you.
-		#
 		thing.angry = True
 		shoved = True
 	    return None
@@ -1542,12 +1540,12 @@
 def attack(torps_ok):
     # bad guy attacks us 
     # torps_ok == False forces use of phasers in an attack 
-    attempt = False; ihurt = False;
-    hitmax=0.0; hittot=0.0; chgfac=1.0
-    where = "neither"
     # game could be over at this point, check 
     if game.alldone:
 	return
+    attempt = False; ihurt = False;
+    hitmax=0.0; hittot=0.0; chgfac=1.0
+    where = "neither"
     if idebug:
 	prout("=== ATTACK!")
     # Tholian gets to move before attacking 
@@ -2124,8 +2122,7 @@
 		else:
 		    proutn("??")
 		proutn(")  ")
-		proutn(_("units to fire at %s-  ") % crmena(False, ienm, "sector", aim))
-		
+		proutn(_("units to fire at %s-  ") % crmena(False, ienm, "sector", aim))		
 		key = scanner.next()
 	    if key == IHALPHA and scanner.sees("no"):
 		no = True
@@ -2269,7 +2266,7 @@
                 game.shldchg = False
             else:
                 prout(_("(Shields not currently useable.)"))
-        newqad(False)
+        newqad()
         # Adjust finish time to time of tractor beaming 
         fintim = game.state.date+game.optime
         attack(torps_ok=False)
@@ -2604,8 +2601,7 @@
                     else:
                         continue	# search for eligible quadrant failed
                 except "FOUNDIT":
-                    w.x = i
-                    w.y = j
+                    w.x = i; w.y = j
 	    # deliver the child 
 	    game.state.remkl += 1
 	    q.klingons += 1
@@ -3772,7 +3768,7 @@
 		skip(1)
 		prout(_("Entering Quadrant %s.") % game.quadrant)
 		game.quad[game.sector.x][game.sector.y] = game.ship
-		newqad(False)
+		newqad()
 		if game.skill>SKILL_NOVICE:
 		    attack(torps_ok=False)  
 		return
@@ -4342,7 +4338,7 @@
 	# cheat to make sure no tractor beams occur during time warp 
 	postpone(FTBEAM, game.optime)
 	game.damage[DRADIO] += game.optime
-    newqad(False)
+    newqad()
     events()	# Stas Sergeev added this -- do pending events 
 
 def probe():
@@ -4455,7 +4451,7 @@
 		ddist = xdist
 	# Since starbase not in quadrant, set up new quadrant 
 	game.quadrant = ibq
-	newqad(True)
+	newqad()
     # dematerialize starship 
     game.quad[game.sector.x][game.sector.y]=IHDOT
     proutn(_("Starbase in Quadrant %s responds--%s dematerializes") \
@@ -4578,7 +4574,7 @@
 	if not game.quadrant == game.state.baseq[nb]:
 	    game.quadrant = game.state.baseq[nb]
 	    game.sector.x = game.sector.y = 5
-	    newqad(True)
+	    newqad()
 	while True:
 	    # position next to base by trial and error 
 	    game.quad[game.sector.x][game.sector.y] = IHDOT
@@ -4591,7 +4587,7 @@
 		break # found a spot 
 	    game.sector.x=QUADSIZE/2
 	    game.sector.y=QUADSIZE/2
-	    newqad(True)
+	    newqad()
     # Get new commission 
     game.quad[game.sector.x][game.sector.y] = game.ship = IHF
     game.state.crew = FULLCREW
@@ -5773,9 +5769,14 @@
     unschedule(FENSLV)
     unschedule(FREPRO)
     # Place thing (in tournament game, we don't want one!)
+    # New in SST2K: never place the Thing near a starbase.
+    # This makes sense and avoids a special case in the old code.
     global thing
     if game.tourn is None:
-        thing = randplace(GALSIZE)
+        while True:
+            thing = randplace(GALSIZE)
+            if thing not in game.state.baseq:
+                break
     skip(2)
     game.state.snap = False
     if game.skill == SKILL_NOVICE:
@@ -5808,7 +5809,7 @@
     if game.state.nscrem:
 	prout(_("  YOU'LL NEED IT."))
     waitfor()
-    newqad(False)
+    newqad()
     if len(game.enemies) - (thing == game.quadrant) - (game.tholian != None):
 	game.shldup = True
     if game.neutz:	# bad luck to start in a Romulan Neutral Zone
@@ -5946,18 +5947,12 @@
     "Drop new Klingon into current quadrant."
     return enemy(IHK, loc=dropin(), power=randreal(300,450)+25.0*game.skill)
 
-def newqad(shutup):
+def newqad():
     "Set up a new state of quadrant, for when we enter or re-enter it."
-    w = coord()
     game.justin = True
-    game.klhere = 0
-    game.irhere = 0
-    game.iplnet = 0
-    game.neutz = False
-    game.inorbit = False
-    game.landed = False
-    game.ientesc = False
-    game.iseenit = False
+    game.iplnet = None
+    game.neutz = game.inorbit = game.landed = False
+    game.ientesc = game.iseenit = False
     # Create a blank quadrant
     game.quad = fill2d(QUADSIZE, lambda i, j: IHDOT)
     if game.iscate:
@@ -6015,15 +6010,14 @@
 	    skip(1)
 	    prout(_("INTRUDER! YOU HAVE VIOLATED THE ROMULAN NEUTRAL ZONE."))
 	    prout(_("LEAVE AT ONCE, OR YOU WILL BE DESTROYED!"))
-    if shutup==0:
-	# Put in THING if needed
-	if thing == game.quadrant:
-	    enemy(type=IHQUEST, loc=dropin(),
-                      power=randreal(6000,6500.0)+250.0*game.skill)
-	    if not damaged(DSRSENS):
-		skip(1)
-		prout(_("Mr. Spock- \"Captain, this is most unusual."))
-		prout(_("    Please examine your short-range scan.\""))
+    # Put in THING if needed
+    if thing == game.quadrant:
+        enemy(type=IHQUEST, loc=dropin(),
+                  power=randreal(6000,6500.0)+250.0*game.skill)
+        if not damaged(DSRSENS):
+            skip(1)
+            prout(_("Mr. Spock- \"Captain, this is most unusual."))
+            prout(_("    Please examine your short-range scan.\""))
     # Decide if quadrant needs a Tholian; lighten up if skill is low 
     if game.options & OPTION_THOLIAN:
 	if (game.skill < SKILL_GOOD and withprob(0.02)) or \



From esr at mail.berlios.de  Mon Oct  9 22:59:21 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 9 Oct 2006 22:59:21 +0200
Subject: [Sst-commit-watch] r720 - trunk/src
Message-ID: <200610092059.k99KxLlR027035@sheep.berlios.de>

Author: esr
Date: 2006-10-09 22:59:19 +0200 (Mon, 09 Oct 2006)
New Revision: 720

Modified:
   trunk/src/sst.py
Log:
Aha!  Found the lurking bug in the Python torpedo code.  Now to clean up.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-09 18:53:42 UTC (rev 719)
+++ trunk/src/sst.py	2006-10-09 20:59:19 UTC (rev 720)
@@ -1288,30 +1288,26 @@
 	finish(FWON)
     return
 
-def torpedo(course, dispersion, origin, number, nburst):
+def torpedo(origin, course, dispersion, number, nburst):
     "Let a photon torpedo fly" 
-    iquad = 0
     shoved = False
     ac = course + 0.25*dispersion
     angle = (15.0-ac)*0.5235988
     bullseye = (15.0 - course)*0.5235988
-    deltax = -math.sin(angle);
-    deltay = math.cos(angle);
+    delta = coord(-math.sin(angle), math.cos(angle))          
+    bigger = max(abs(delta.x), abs(delta.y))
+    delta /= bigger
     x = origin.x; y = origin.y
     w = coord(0, 0); jw = coord(0, 0)
-    bigger = max(math.fabs(deltax), math.fabs(deltay))
-    deltax /= bigger
-    deltay /= bigger
     if not damaged(DSRSENS) or game.condition=="docked":
 	setwnd(srscan_window)
     else: 
 	setwnd(message_window)
     # Loop to move a single torpedo 
     for step in range(1, 15+1):
-	x += deltax
-	w.x = int(x + 0.5)
-	y += deltay
-	w.y = int(y + 0.5)
+	x += delta.x
+	y += delta.y
+	w = coord(x, y).snaptogrid()
 	if not VALID_SECTOR(w.x, w.y):
 	    break
 	iquad=game.quad[w.x][w.y]
@@ -1358,9 +1354,9 @@
 	elif iquad in (IHR, IHK): # Hit a regular enemy 
 	    # find the enemy 
             for enemy in game.enemies:
-		if w == game.enemies[ll].kloc:
+		if w == enemy.kloc:
 		    break
-	    kp = math.fabs(e.kpower)
+	    kp = math.fabs(enemy.kpower)
 	    h1 = 700.0 + randrange(100) - \
 		1000.0 * (w-origin).distance() * math.fabs(math.sin(bullseye-angle))
 	    h1 = math.fabs(h1)
@@ -1606,7 +1602,7 @@
 	    prout("  ")
 	    dispersion = (randreal()+randreal())*0.5 - 0.5
 	    dispersion += 0.002*enemy.kpower*dispersion
-	    hit = torpedo(course, dispersion, origin=enemy.kloc, number=1, nburst=1)
+	    hit = torpedo(enemy.kloc, course, dispersion, number=1, nburst=1)
 	    if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem)==0:
 		finish(FWON); # Klingons did themselves in! 
 	    if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova or game.alldone:
@@ -1737,19 +1733,22 @@
     if not VALID_SECTOR(w.x, w.y):
 	huh()
 	return None
-    delta = 0.1*(w - game.sector)
-    if delta.x==0 and delta.y== 0:
+    delta = coord()
+    # FIXME: C code this was translated from is wacky -- why the sign reversal?
+    delta.y = 0.1*(w.y - game.sector.y);
+    delta.x = 0.1*(game.sector.x - w.x);
+    if delta == coord(0, 0):
 	skip(1)
 	prout(_("Spock-  \"Bridge to sickbay.  Dr. McCoy,"))
 	prout(_("  I recommend an immediate review of"))
 	prout(_("  the Captain's psychological profile.\""))
 	scanner.chew()
 	return None
-    return delta.bearing()
+    return 1.90985932*math.atan2(delta.y, delta.x)
 
 def photon():
     "Launch photon torpedo."
-    course = [0.0] * MAXBURST
+    course = []
     game.ididit = False
     if damaged(DPHOTON):
 	prout(_("Photon tubes damaged."))
@@ -1837,7 +1836,7 @@
 	    break
 	if game.shldup or game.condition == "docked":
 	    dispersion *= 1.0 + 0.0001*game.shield
-	torpedo(course[i], dispersion, origin=game.sector, number=i, nburst=n)
+	torpedo(game.sector, course[i], dispersion, number=i, nburst=n)
 	if game.alldone or game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
 	    return
     if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem)==0:



From esr at mail.berlios.de  Mon Oct  9 23:53:58 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 9 Oct 2006 23:53:58 +0200
Subject: [Sst-commit-watch] r721 - trunk/src
Message-ID: <200610092153.k99LrwtT000024@sheep.berlios.de>

Author: esr
Date: 2006-10-09 23:53:56 +0200 (Mon, 09 Oct 2006)
New Revision: 721

Modified:
   trunk/src/sst.py
Log:
This version of the Python does both navigation and torps correctly,
but the use of trig and variables is unbelievably snarled (legacy from
the C and FORTRAN code).


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-09 20:59:19 UTC (rev 720)
+++ trunk/src/sst.py	2006-10-09 21:53:56 UTC (rev 721)
@@ -242,7 +242,7 @@
     def __eq__(self, other):
         return other != None and self.x == other.y and self.x == other.y
     def __add__(self, other):
-        return coord(self.x+self.x, self.y+self.y)
+        return coord(self.x+other.x, self.y+other.y)
     def __sub__(self, other):
         return coord(self.x-other.x, self.y-other.y)
     def __mul__(self, other):
@@ -615,10 +615,9 @@
 def welcoming(iq):
     "Would this quadrant welcome another Klingon?"
     return VALID_QUADRANT(iq.x,iq.y) and \
-	not game.state.galaxy[iq.x][iq.y].supernova or \
+	not game.state.galaxy[iq.x][iq.y].supernova and \
 	game.state.galaxy[iq.x][iq.y].klingons < MAXKLQUAD
 
-
 def tryexit(enemy, look, irun):
     "A bad guy attempts to bug out."
     iq = coord()
@@ -3987,12 +3986,12 @@
 	if key != IHREAL:
 	    huh()
 	    return False
-	delta.x = scanner.real
+	delta.y = scanner.real
 	key = scanner.next()
 	if key != IHREAL:
 	    huh()
 	    return False
-	delta.y = scanner.real
+	delta.x = scanner.real
     # Check for zero movement 
     if delta.x == 0 and delta.y == 0:
 	scanner.chew()



From esr at mail.berlios.de  Tue Oct 10 00:40:22 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 00:40:22 +0200
Subject: [Sst-commit-watch] r722 - trunk/src
Message-ID: <200610092240.k99MeMTL030042@sheep.berlios.de>

Author: esr
Date: 2006-10-10 00:40:21 +0200 (Tue, 10 Oct 2006)
New Revision: 722

Modified:
   trunk/src/sst.py
Log:
Fix a rather basic error in vecvtor comparisons.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-09 21:53:56 UTC (rev 721)
+++ trunk/src/sst.py	2006-10-09 22:40:21 UTC (rev 722)
@@ -240,7 +240,7 @@
     def is_valid(self):
         return self.x != None and self.y != None
     def __eq__(self, other):
-        return other != None and self.x == other.y and self.x == other.y
+        return other != None and self.x == other.y and self.y == other.y
     def __add__(self, other):
         return coord(self.x+other.x, self.y+other.y)
     def __sub__(self, other):
@@ -1734,8 +1734,8 @@
 	return None
     delta = coord()
     # FIXME: C code this was translated from is wacky -- why the sign reversal?
-    delta.y = 0.1*(w.y - game.sector.y);
-    delta.x = 0.1*(game.sector.x - w.x);
+    delta.y = (w.y - game.sector.y);
+    delta.x = (game.sector.x - w.x);
     if delta == coord(0, 0):
 	skip(1)
 	prout(_("Spock-  \"Bridge to sickbay.  Dr. McCoy,"))



From esr at mail.berlios.de  Tue Oct 10 00:51:26 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 00:51:26 +0200
Subject: [Sst-commit-watch] r723 - trunk/src
Message-ID: <200610092251.k99MpQui016421@sheep.berlios.de>

Author: esr
Date: 2006-10-10 00:51:25 +0200 (Tue, 10 Oct 2006)
New Revision: 723

Modified:
   trunk/src/sst.py
Log:
Fix another basic error.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-09 22:40:21 UTC (rev 722)
+++ trunk/src/sst.py	2006-10-09 22:51:25 UTC (rev 723)
@@ -240,7 +240,7 @@
     def is_valid(self):
         return self.x != None and self.y != None
     def __eq__(self, other):
-        return other != None and self.x == other.y and self.y == other.y
+        return other != None and self.x == other.x and self.y == other.y
     def __add__(self, other):
         return coord(self.x+other.x, self.y+other.y)
     def __sub__(self, other):
@@ -1535,7 +1535,7 @@
 def attack(torps_ok):
     # bad guy attacks us 
     # torps_ok == False forces use of phasers in an attack 
-    # game could be over at this point, check 
+    # game could be over at this point, check
     if game.alldone:
 	return
     attempt = False; ihurt = False;



From esr at mail.berlios.de  Tue Oct 10 01:14:12 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 01:14:12 +0200
Subject: [Sst-commit-watch] r724 - trunk/src
Message-ID: <200610092314.k99NECjV013388@sheep.berlios.de>

Author: esr
Date: 2006-10-10 01:14:11 +0200 (Tue, 10 Oct 2006)
New Revision: 724

Modified:
   trunk/src/sst.py
Log:
Two sources of vast confusuion in reading the C code are these:

(1) she code uses x and y as though they're Cartesian coordinate
variables, but (inconsistently) swaps them around so that "x" 
variables usually refer to the y direction in the output charts.

(2) Coordinates in the y direction (whether they are x variables or
not) increase *downwards* (charts are printed row zero first).

There is extremely ugly and confusing code in targetcheck() and
getcourse() where two opposite sets of conventions bump up against 
each other.  

As a first step, towards untangling this mess, we'll change the
nomenclature so that coordinate names refer to 'i' and 'j'
directions, as in matrix indices (i vertical, increasing downwards,
and j horizontal, increasing rightwards).  This patch does that for
the coord class members, also fixing two small bugs that turned 
up during testing.

More steps will be necessary...


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-09 22:51:25 UTC (rev 723)
+++ trunk/src/sst.py	2006-10-09 23:14:11 UTC (rev 724)
@@ -233,56 +233,56 @@
 
 class coord:
     def __init__(self, x=None, y=None):
-        self.x = x
-        self.y = y
+        self.i = x
+        self.j = y
     def invalidate(self):
-        self.x = self.y = None
+        self.i = self.j = None
     def is_valid(self):
-        return self.x != None and self.y != None
+        return self.i != None and self.j != None
     def __eq__(self, other):
-        return other != None and self.x == other.x and self.y == other.y
+        return other != None and self.i == other.i and self.j == other.j
     def __add__(self, other):
-        return coord(self.x+other.x, self.y+other.y)
+        return coord(self.i+other.i, self.j+other.j)
     def __sub__(self, other):
-        return coord(self.x-other.x, self.y-other.y)
+        return coord(self.i-other.i, self.j-other.j)
     def __mul__(self, other):
-        return coord(self.x*other, self.y*other)
+        return coord(self.i*other, self.j*other)
     def __rmul__(self, other):
-        return coord(self.x*other, self.y*other)
+        return coord(self.i*other, self.j*other)
     def __div__(self, other):
-        return coord(self.x/other, self.y/other)
+        return coord(self.i/other, self.j/other)
     def __rdiv__(self, other):
-        return coord(self.x/other, self.y/other)
+        return coord(self.i/other, self.j/other)
     def snaptogrid(self):
-        return coord(int(round(self.x)), int(round(self.y)))
+        return coord(int(round(self.i)), int(round(self.j)))
     def distance(self, other=None):
         if not other: other = coord(0, 0)
-        return math.sqrt((self.x - other.x)**2 + (self.y - other.y)**2)
+        return math.sqrt((self.i - other.i)**2 + (self.j - other.j)**2)
     def bearing(self, other=None):
         if not other: other = coord(0, 0)
-        return 1.90985*math.atan2(self.x-other.x, self.y-other.y)
+        return 1.90985*math.atan2(self.i-other.i, self.j-other.j)
     def sgn(self):
         s = coord()
-        if self.x == 0:
-            s.x = 0
+        if self.i == 0:
+            s.i = 0
         else:
-            s.x = self.x / abs(self.x)
-        if self.y == 0:
-            s.y = 0
+            s.i = self.i / abs(self.i)
+        if self.j == 0:
+            s.j = 0
         else:
-            s.y = self.y / abs(self.y)
+            s.j = self.j / abs(self.j)
         return s
     def scatter(self):
         s = coord()
-        s.x = self.x + randrange(-1, 2)
-        s.y = self.y + randrange(-1, 2)
+        s.i = self.i + randrange(-1, 2)
+        s.j = self.j + randrange(-1, 2)
         return s
     def __hash__(self):
         return hash((x, y))
     def __str__(self):
-        if self.x == None or self.y == None:
+        if self.i == None or self.j == None:
             return "Nowhere"
-        return "%s - %s" % (self.x+1, self.y+1)
+        return "%s - %s" % (self.i+1, self.j+1)
     __repr__ = __str__
 
 class planet:
@@ -430,15 +430,15 @@
         game.enemies.append(self)
     def move(self, loc):
         motion = (loc != self.kloc)
-        if self.kloc.x is not None and self.kloc.y is not None:
+        if self.kloc.i is not None and self.kloc.j is not None:
             if motion:
                 if self.type == IHT:
-                    game.quad[self.kloc.x][self.kloc.y] = IHWEB
+                    game.quad[self.kloc.i][self.kloc.j] = IHWEB
                 else:
-                    game.quad[self.kloc.x][self.kloc.y] = IHDOT
+                    game.quad[self.kloc.i][self.kloc.j] = IHDOT
         if loc:
             self.kloc = copy.copy(loc)
-            game.quad[self.kloc.x][self.kloc.y] = self.type
+            game.quad[self.kloc.i][self.kloc.j] = self.type
             self.kdist = self.kavgd = (game.sector - loc).distance()
         else:
             self.kloc = coord()
@@ -614,15 +614,15 @@
 
 def welcoming(iq):
     "Would this quadrant welcome another Klingon?"
-    return VALID_QUADRANT(iq.x,iq.y) and \
-	not game.state.galaxy[iq.x][iq.y].supernova and \
-	game.state.galaxy[iq.x][iq.y].klingons < MAXKLQUAD
+    return VALID_QUADRANT(iq.i,iq.j) and \
+	not game.state.galaxy[iq.i][iq.j].supernova and \
+	game.state.galaxy[iq.i][iq.j].klingons < MAXKLQUAD
 
 def tryexit(enemy, look, irun):
     "A bad guy attempts to bug out."
     iq = coord()
-    iq.x = game.quadrant.x+(look.x+(QUADSIZE-1))/QUADSIZE - 1
-    iq.y = game.quadrant.y+(look.y+(QUADSIZE-1))/QUADSIZE - 1
+    iq.i = game.quadrant.i+(look.i+(QUADSIZE-1))/QUADSIZE - 1
+    iq.j = game.quadrant.j+(look.j+(QUADSIZE-1))/QUADSIZE - 1
     if not welcoming(iq):
 	return False;
     if enemy.type == IHR:
@@ -650,8 +650,8 @@
     if game.condition != "docked":
 	newcnd()
     # Handle global matters related to escape 
-    game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons -= 1
-    game.state.galaxy[iq.x][iq.y].klingons += 1
+    game.state.galaxy[game.quadrant.i][game.quadrant.j].klingons -= 1
+    game.state.galaxy[iq.i][iq.j].klingons += 1
     if enemy.type==IHS:
 	game.iscate = False
 	game.ientesc = False
@@ -773,20 +773,20 @@
 	proutn("NSTEPS = %d:" % nsteps)
     # Compute preferred values of delta X and Y 
     m = game.sector - enemy.kloc
-    if 2.0 * abs(m.x) < abs(m.y):
-	m.x = 0
-    if 2.0 * abs(m.y) < abs(game.sector.x-enemy.kloc.x):
-	m.y = 0
-    if m.x != 0:
-        if m.x*motion < 0:
-            m.x = -1
+    if 2.0 * abs(m.i) < abs(m.j):
+	m.i = 0
+    if 2.0 * abs(m.j) < abs(game.sector.i-enemy.kloc.i):
+	m.j = 0
+    if m.i != 0:
+        if m.i*motion < 0:
+            m.i = -1
         else:
-            m.x = 1
-    if m.y != 0:
-        if m.y*motion < 0:
-            m.y = -1
+            m.i = 1
+    if m.j != 0:
+        if m.j*motion < 0:
+            m.j = -1
         else:
-            m.y = 1
+            m.j = 1
     next = enemy.kloc
     # main move loop 
     for ll in range(nsteps):
@@ -794,11 +794,11 @@
 	    proutn(" %d" % (ll+1))
 	# Check if preferred position available 
 	look = next + m
-        if m.x < 0:
+        if m.i < 0:
             krawlx = 1
         else:
             krawlx = -1
-        if m.y < 0:
+        if m.j < 0:
             krawly = 1
         else:
             krawly = -1
@@ -806,31 +806,31 @@
 	attempts = 0; # Settle mysterious hang problem 
 	while attempts < 20 and not success:
             attempts += 1
-	    if look.x < 0 or look.x >= QUADSIZE:
+	    if look.i < 0 or look.i >= QUADSIZE:
 		if motion < 0 and tryexit(enemy, look, irun):
 		    return
-		if krawlx == m.x or m.y == 0:
+		if krawlx == m.i or m.j == 0:
 		    break
-		look.x = next.x + krawlx
+		look.i = next.i + krawlx
 		krawlx = -krawlx
-	    elif look.y < 0 or look.y >= QUADSIZE:
+	    elif look.j < 0 or look.j >= QUADSIZE:
 		if motion < 0 and tryexit(enemy, look, irun):
 		    return
-		if krawly == m.y or m.x == 0:
+		if krawly == m.j or m.i == 0:
 		    break
-		look.y = next.y + krawly
+		look.j = next.j + krawly
 		krawly = -krawly
-	    elif (game.options & OPTION_RAMMING) and game.quad[look.x][look.y] != IHDOT:
+	    elif (game.options & OPTION_RAMMING) and game.quad[look.i][look.j] != IHDOT:
 		# See if enemy should ram ship 
-		if game.quad[look.x][look.y] == game.ship and \
+		if game.quad[look.i][look.j] == game.ship and \
 		    (enemy.type == IHC or enemy.type == IHS):
 		    collision(rammed=True, enemy=enemy)
 		    return
-		if krawlx != m.x and m.y != 0:
-		    look.x = next.x + krawlx
+		if krawlx != m.i and m.j != 0:
+		    look.i = next.i + krawlx
 		    krawlx = -krawlx
-		elif krawly != m.y and m.x != 0:
-		    look.y = next.y + krawly
+		elif krawly != m.j and m.i != 0:
+		    look.j = next.j + krawly
 		    krawly = -krawly
 		else:
 		    break; # we have failed 
@@ -885,9 +885,9 @@
     if game.justin and not game.iscate:
 	return True
     # do the move 
-    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].klingons -= 1
+    game.state.galaxy[game.state.kscmdr.i][game.state.kscmdr.j].klingons -= 1
     game.state.kscmdr = iq
-    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].klingons += 1
+    game.state.galaxy[game.state.kscmdr.i][game.state.kscmdr.j].klingons += 1
     if game.state.kscmdr==game.quadrant:
 	# SC has scooted, Remove him from current quadrant 
 	game.iscate=False
@@ -908,7 +908,7 @@
 	    game.state.planets[i].crystals == "present":
 	    # destroy the planet 
 	    game.state.planets[i].pclass = "destroyed"
-	    game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].planet = None
+	    game.state.galaxy[game.state.kscmdr.i][game.state.kscmdr.j].planet = None
 	    if communicating():
 		announce()
 		prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"))
@@ -929,10 +929,10 @@
     if not game.iscate and avoid:
 	# compute move away from Enterprise 
 	idelta = game.state.kscmdr-game.quadrant
-	if math.sqrt(idelta.x*idelta.x+idelta.y*idelta.y) > 2.0:
+	if math.sqrt(idelta.i*idelta.i+idelta.j*idelta.j) > 2.0:
 	    # circulate in space 
-	    idelta.x = game.state.kscmdr.y-game.quadrant.y
-	    idelta.y = game.quadrant.x-game.state.kscmdr.x
+	    idelta.i = game.state.kscmdr.j-game.quadrant.j
+	    idelta.j = game.quadrant.i-game.state.kscmdr.i
     else:
 	# compute distances to starbases 
 	if not game.state.baseq:
@@ -975,24 +975,24 @@
     iq = game.state.kscmdr + idelta
     if movescom(iq, avoid):
 	# failed -- try some other maneuvers 
-	if idelta.x==0 or idelta.y==0:
+	if idelta.i==0 or idelta.j==0:
 	    # attempt angle move 
-	    if idelta.x != 0:
-		iq.y = game.state.kscmdr.y + 1
+	    if idelta.i != 0:
+		iq.j = game.state.kscmdr.j + 1
 		if movescom(iq, avoid):
-		    iq.y = game.state.kscmdr.y - 1
+		    iq.j = game.state.kscmdr.j - 1
 		    movescom(iq, avoid)
 	    else:
-		iq.x = game.state.kscmdr.x + 1
+		iq.i = game.state.kscmdr.i + 1
 		if movescom(iq, avoid):
-		    iq.x = game.state.kscmdr.x - 1
+		    iq.i = game.state.kscmdr.i - 1
 		    movescom(iq, avoid)
 	else:
 	    # try moving just in x or y 
-	    iq.y = game.state.kscmdr.y
+	    iq.j = game.state.kscmdr.j
 	    if movescom(iq, avoid):
-		iq.y = game.state.kscmdr.y + idelta.y
-		iq.x = game.state.kscmdr.x
+		iq.j = game.state.kscmdr.j + idelta.j
+		iq.i = game.state.kscmdr.i
 		movescom(iq, avoid)
     # check for a base 
     if len(game.state.baseq) == 0:
@@ -1029,7 +1029,7 @@
     if not idebug and \
 	(withprob(0.8) or \
 	 (not communicating()) or \
-	 not game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].charted):
+	 not game.state.galaxy[game.state.kscmdr.i][game.state.kscmdr.j].charted):
 	return
     announce()
     prout(_("Lt. Uhura-  \"Captain, Starfleet Intelligence reports"))
@@ -1041,33 +1041,33 @@
     if not game.tholian or game.justin:
 	return
     id = coord()
-    if game.tholian.kloc.x == 0 and game.tholian.kloc.y == 0:
-	id.x = 0; id.y = QUADSIZE-1
-    elif game.tholian.kloc.x == 0 and game.tholian.kloc.y == QUADSIZE-1:
-	id.x = QUADSIZE-1; id.y = QUADSIZE-1
-    elif game.tholian.kloc.x == QUADSIZE-1 and game.tholian.kloc.y == QUADSIZE-1:
-	id.x = QUADSIZE-1; id.y = 0
-    elif game.tholian.kloc.x == QUADSIZE-1 and game.tholian.kloc.y == 0:
-	id.x = 0; id.y = 0
+    if game.tholian.kloc.i == 0 and game.tholian.kloc.j == 0:
+	id.i = 0; id.j = QUADSIZE-1
+    elif game.tholian.kloc.i == 0 and game.tholian.kloc.j == QUADSIZE-1:
+	id.i = QUADSIZE-1; id.j = QUADSIZE-1
+    elif game.tholian.kloc.i == QUADSIZE-1 and game.tholian.kloc.j == QUADSIZE-1:
+	id.i = QUADSIZE-1; id.j = 0
+    elif game.tholian.kloc.i == QUADSIZE-1 and game.tholian.kloc.j == 0:
+	id.i = 0; id.j = 0
     else:
 	# something is wrong! 
 	game.tholian.move(None)
         prout("***Internal error: Tholian in a bad spot.")
 	return
     # do nothing if we are blocked 
-    if game.quad[id.x][id.y] not in (IHDOT, IHWEB):
+    if game.quad[id.i][id.j] not in (IHDOT, IHWEB):
 	return
     here = copy.copy(game.tholian.kloc)
     delta = (id - game.tholian.kloc).sgn()
     # move in x axis 
-    while here.x != id.x:
-        here.x += delta.x
-        if game.quad[here.x][here.y]==IHDOT:
+    while here.i != id.i:
+        here.i += delta.i
+        if game.quad[here.i][here.j]==IHDOT:
             game.tholian.move(here)
     # move in y axis 
-    while here.y != id.y:
-        here.y += delta.y
-        if game.quad[here.x][here.y]==IHDOT:
+    while here.j != id.j:
+        here.j += delta.j
+        if game.quad[here.i][here.j]==IHDOT:
             game.tholian.move(here)
     # check to see if all holes plugged 
     for i in range(QUADSIZE):
@@ -1080,7 +1080,7 @@
 	if game.quad[i][QUADSIZE]!=IHWEB and game.quad[i][QUADSIZE]!=IHT:
 	    return
     # All plugged up -- Tholian splits 
-    game.quad[game.tholian.kloc.x][game.tholian.kloc.y]=IHWEB
+    game.quad[game.tholian.kloc.i][game.tholian.kloc.j]=IHWEB
     dropin(IHBLANK)
     prout(crmena(True, IHT, "sector", game.tholian) + _(" completes web."))
     game.tholian.move(None)
@@ -1294,9 +1294,9 @@
     angle = (15.0-ac)*0.5235988
     bullseye = (15.0 - course)*0.5235988
     delta = coord(-math.sin(angle), math.cos(angle))          
-    bigger = max(abs(delta.x), abs(delta.y))
+    bigger = max(abs(delta.i), abs(delta.j))
     delta /= bigger
-    x = origin.x; y = origin.y
+    x = origin.i; y = origin.j
     w = coord(0, 0); jw = coord(0, 0)
     if not damaged(DSRSENS) or game.condition=="docked":
 	setwnd(srscan_window)
@@ -1304,12 +1304,12 @@
 	setwnd(message_window)
     # Loop to move a single torpedo 
     for step in range(1, 15+1):
-	x += delta.x
-	y += delta.y
+	x += delta.i
+	y += delta.j
 	w = coord(x, y).snaptogrid()
-	if not VALID_SECTOR(w.x, w.y):
+	if not VALID_SECTOR(w.i, w.j):
 	    break
-	iquad=game.quad[w.x][w.y]
+	iquad=game.quad[w.i][w.j]
 	tracktorpedo(origin, w, step, number, nburst, iquad)
 	if iquad==IHDOT:
 	    continue
@@ -1332,14 +1332,14 @@
 		temp = math.fabs(math.cos(ang))
 	    xx = -math.sin(ang)/temp
 	    yy = math.cos(ang)/temp
-	    jw.x = int(w.x+xx+0.5)
-	    jw.y = int(w.y+yy+0.5)
-	    if not VALID_SECTOR(jw.x, jw.y):
+	    jw.i = int(w.i+xx+0.5)
+	    jw.j = int(w.j+yy+0.5)
+	    if not VALID_SECTOR(jw.i, jw.j):
 		return hit
-	    if game.quad[jw.x][jw.y]==IHBLANK:
+	    if game.quad[jw.i][jw.j]==IHBLANK:
 		finish(FHOLE)
 		return hit
-	    if game.quad[jw.x][jw.y]!=IHDOT:
+	    if game.quad[jw.i][jw.j]!=IHDOT:
 		# can't move into object 
 		return hit
 	    game.sector = jw
@@ -1376,16 +1376,16 @@
 		temp = math.fabs(math.cos(ang))
 	    xx = -math.sin(ang)/temp
 	    yy = math.cos(ang)/temp
-	    jw.x = int(w.x+xx+0.5)
-	    jw.y = int(w.y+yy+0.5)
-	    if not VALID_SECTOR(jw.x, jw.y):
+	    jw.i = int(w.i+xx+0.5)
+	    jw.j = int(w.j+yy+0.5)
+	    if not VALID_SECTOR(jw.i, jw.j):
 		prout(_(" damaged but not destroyed."))
 		return
-	    if game.quad[jw.x][jw.y]==IHBLANK:
+	    if game.quad[jw.i][jw.j]==IHBLANK:
 		prout(_(" buffeted into black hole."))
 		deadkl(w, iquad, jw)
 		return None
-	    if game.quad[jw.x][jw.y]!=IHDOT:
+	    if game.quad[jw.i][jw.j]!=IHDOT:
 		# can't move into object 
 		prout(_(" damaged but not destroyed."))
 		return None
@@ -1397,21 +1397,21 @@
 	    skip(1)
 	    prout(_("***STARBASE DESTROYED.."))
             game.state.baseq = filter(lambda x: x != game.quadrant, game.state.baseq)
-	    game.quad[w.x][w.y]=IHDOT
+	    game.quad[w.i][w.j]=IHDOT
 	    game.base.invalidate()
-	    game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase -= 1
-	    game.state.chart[game.quadrant.x][game.quadrant.y].starbase -= 1
+	    game.state.galaxy[game.quadrant.i][game.quadrant.j].starbase -= 1
+	    game.state.chart[game.quadrant.i][game.quadrant.j].starbase -= 1
 	    game.state.basekl += 1
 	    newcnd()
 	    return None
 	elif iquad == IHP: # Hit a planet 
 	    prout(crmena(True, iquad, "sector", w) + _(" destroyed."))
 	    game.state.nplankl += 1
-	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = None
+	    game.state.galaxy[game.quadrant.i][game.quadrant.j].planet = None
 	    game.iplnet.pclass = "destroyed"
 	    game.iplnet = None
 	    game.plnet.invalidate()
-	    game.quad[w.x][w.y] = IHDOT
+	    game.quad[w.i][w.j] = IHDOT
 	    if game.landed:
 		# captain perishes on planet 
 		finish(FDPLANET)
@@ -1419,11 +1419,11 @@
 	elif iquad == IHW: # Hit an inhabited world -- very bad! 
 	    prout(crmena(True, iquad, "sector", w) + _(" destroyed."))
 	    game.state.nworldkl += 1
-	    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = None
+	    game.state.galaxy[game.quadrant.i][game.quadrant.j].planet = None
 	    game.iplnet.pclass = "destroyed"
 	    game.iplnet = None
 	    game.plnet.invalidate()
-	    game.quad[w.x][w.y] = IHDOT
+	    game.quad[w.i][w.j] = IHDOT
 	    if game.landed:
 		# captain perishes on planet 
 		finish(FDPLANET)
@@ -1467,7 +1467,7 @@
 		1000.0 * (w-origin).distance() * math.fabs(math.sin(bullseye-angle))
 	    h1 = math.fabs(h1)
 	    if h1 >= 600:
-		game.quad[w.x][w.y] = IHDOT
+		game.quad[w.i][w.j] = IHDOT
 		deadkl(w, iquad, w)
 		game.tholian = None
 		return None
@@ -1478,7 +1478,7 @@
 		return None
 	    prout(_(" disappears."))
 	    game.tholian.move(None)
-	    game.quad[w.x][w.y] = IHWEB
+	    game.quad[w.i][w.j] = IHWEB
 	    dropin(IHBLANK)
 	    return None
         else: # Problem!
@@ -1491,8 +1491,8 @@
     if curwnd!=message_window:
 	setwnd(message_window)
     if shoved:
-	game.quad[w.x][w.y]=IHDOT
-	game.quad[jw.x][jw.y]=iquad
+	game.quad[w.i][w.j]=IHDOT
+	game.quad[jw.i][jw.j]=iquad
 	prout(_(" displaced by blast to Sector %s ") % jw)
 	for ll in range(len(game.enemies)):
 	    game.enemies[ll].kdist = game.enemies[ll].kavgd = (game.sector-game.enemies[ll].kloc).distance()
@@ -1592,7 +1592,7 @@
 	    enemy.kpower *= 0.75
 	else: # Enemy uses photon torpedo 
 	    #course2 = (enemy.kloc-game.sector).bearing()
-	    course = 1.90985*math.atan2(game.sector.y-enemy.kloc.y, enemy.kloc.x-game.sector.x)
+	    course = 1.90985*math.atan2(game.sector.j-enemy.kloc.j, enemy.kloc.i-game.sector.i)
 	    hit = 0
 	    proutn(_("***TORPEDO INCOMING"))
 	    if not damaged(DSRSENS):
@@ -1604,7 +1604,7 @@
 	    hit = torpedo(enemy.kloc, course, dispersion, number=1, nburst=1)
 	    if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem)==0:
 		finish(FWON); # Klingons did themselves in! 
-	    if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova or game.alldone:
+	    if game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova or game.alldone:
 		return # Supernova or finished 
 	    if hit == None:
 		continue
@@ -1685,7 +1685,7 @@
     # Decide what kind of enemy it is and update appropriately 
     if type == IHR:
         # chalk up a Romulan 
-        game.state.galaxy[game.quadrant.x][game.quadrant.y].romulans -= 1
+        game.state.galaxy[game.quadrant.i][game.quadrant.j].romulans -= 1
         game.irhere -= 1
         game.state.nromrem -= 1
     elif type == IHT:
@@ -1697,7 +1697,7 @@
         thing = None
     else:
         # Some type of a Klingon 
-        game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons -= 1
+        game.state.galaxy[game.quadrant.i][game.quadrant.j].klingons -= 1
         game.klhere -= 1
         if type == IHC:
             game.state.kcmdr.remove(game.quadrant)
@@ -1729,13 +1729,13 @@
 
 def targetcheck(w):
     "Return None if target is invalid, otherwise return a course angle."
-    if not VALID_SECTOR(w.x, w.y):
+    if not VALID_SECTOR(w.i, w.j):
 	huh()
 	return None
     delta = coord()
     # FIXME: C code this was translated from is wacky -- why the sign reversal?
-    delta.y = (w.y - game.sector.y);
-    delta.x = (game.sector.x - w.x);
+    delta.j = (w.j - game.sector.j);
+    delta.i = (game.sector.i - w.i);
     if delta == coord(0, 0):
 	skip(1)
 	prout(_("Spock-  \"Bridge to sickbay.  Dr. McCoy,"))
@@ -1743,7 +1743,7 @@
 	prout(_("  the Captain's psychological profile.\""))
 	scanner.chew()
 	return None
-    return 1.90985932*math.atan2(delta.y, delta.x)
+    return 1.90985932*math.atan2(delta.j, delta.i)
 
 def photon():
     "Launch photon torpedo."
@@ -1836,7 +1836,7 @@
 	if game.shldup or game.condition == "docked":
 	    dispersion *= 1.0 + 0.0001*game.shield
 	torpedo(game.sector, course[i], dispersion, number=i, nburst=n)
-	if game.alldone or game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
+	if game.alldone or game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova:
 	    return
     if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem)==0:
 	finish(FWON);
@@ -1911,7 +1911,7 @@
 	    proutn(_("%d unit hit on ") % int(hit))
 	else:
 	    proutn(_("Very small hit on "))
-	ienm = game.quad[w.x][w.y]
+	ienm = game.quad[w.i][w.j]
 	if ienm==IHQUEST:
 	    thing.angry = True
 	proutn(crmena(False, ienm, "sector", w))
@@ -2095,7 +2095,7 @@
 	rpow = 0.0
         for k in range(len(game.enemies)):
 	    aim = game.enemies[k].kloc
-	    ienm = game.quad[aim.x][aim.y]
+	    ienm = game.quad[aim.i][aim.j]
 	    if msgflag:
 		proutn(_("Energy available= %.2f") % (avail-0.006))
 		skip(1)
@@ -2278,8 +2278,8 @@
         # Not perfect, but will have to do 
         # Handle case where base is in same quadrant as starship 
         if game.battle == game.quadrant:
-            game.state.chart[game.battle.x][game.battle.y].starbase = False
-            game.quad[game.base.x][game.base.y] = IHDOT
+            game.state.chart[game.battle.i][game.battle.j].starbase = False
+            game.quad[game.base.i][game.base.j] = IHDOT
             game.base.invalidate()
             newcnd()
             skip(1)
@@ -2294,9 +2294,9 @@
                 prout(_("the Klingon Super-Commander"))
             else:
                 prout(_("a Klingon Commander"))
-            game.state.chart[game.battle.x][game.battle.y].starbase = False
+            game.state.chart[game.battle.i][game.battle.j].starbase = False
         # Remove Starbase from galaxy 
-        game.state.galaxy[game.battle.x][game.battle.y].starbase = False
+        game.state.galaxy[game.battle.i][game.battle.j].starbase = False
         game.state.baseq = filter(lambda x: x != game.battle, game.state.baseq)
         if game.isatb == 2:
             # reinstate a commander's base attack 
@@ -2323,7 +2323,7 @@
 	    else:
 		prout("never")
     radio_was_broken = damaged(DRADIO)
-    hold.x = hold.y = 0
+    hold.i = hold.j = 0
     while True:
 	# Select earliest extraneous event, evcode==0 if no events 
 	evcode = FSPY
@@ -2384,7 +2384,7 @@
 	    announce()
 	    supernova(False)
 	    schedule(FSNOVA, expran(0.5*game.intime))
-	    if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
+	    if game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova:
 		return
 	elif evcode == FSPY: # Check with spy to see if SC should tractor beam 
 	    if game.state.nscrem == 0 or \
@@ -2436,7 +2436,7 @@
 		unschedule(FCDBAS)
 		continue
 	    # commander + starbase combination found -- launch attack 
-	    game.battle = game.state.baseq[j]
+	    game.battle = ibq
 	    schedule(FCDBAS, randreal(1.0, 4.0))
 	    if game.isatb: # extra time if SC already attacking 
 		postpone(FCDBAS, scheduled(FSCDBAS)-game.state.date)
@@ -2455,7 +2455,7 @@
 	elif evcode == FSCDBAS: # Supercommander destroys base 
 	    unschedule(FSCDBAS)
 	    game.isatb = 2
-	    if not game.state.galaxy[game.state.kscmdr.x][game.state.kscmdr.y].starbase: 
+	    if not game.state.galaxy[game.state.kscmdr.i][game.state.kscmdr.j].starbase: 
 		continue # WAS RETURN! 
 	    hold = game.battle
 	    game.battle = game.state.kscmdr
@@ -2464,7 +2464,7 @@
 	    if evcode==FCDBAS:
 		unschedule(FCDBAS)
                 if not game.state.baseq() \
-                       or not game.state.galaxy[game.battle.x][game.battle.y].starbase:
+                       or not game.state.galaxy[game.battle.i][game.battle.j].starbase:
 		    game.battle.invalidate()
                     continue
 		# find the lucky pair 
@@ -2486,11 +2486,11 @@
 	    game.probey += game.probeiny
 	    i = (int)(game.probex/QUADSIZE +0.05)
 	    j = (int)(game.probey/QUADSIZE + 0.05)
-	    if game.probec.x != i or game.probec.y != j:
-		game.probec.x = i
-		game.probec.y = j
+	    if game.probec.i != i or game.probec.j != j:
+		game.probec.i = i
+		game.probec.j = j
 		if not VALID_QUADRANT(i, j) or \
-		    game.state.galaxy[game.probec.x][game.probec.y].supernova:
+		    game.state.galaxy[game.probec.i][game.probec.j].supernova:
 		    # Left galaxy or ran into supernova
                     if comunicating():
 			announce()
@@ -2507,10 +2507,10 @@
 		    announce()
 		    skip(1)
 		    proutn(_("Lt. Uhura-  \"The deep space probe is now in Quadrant %s.\"") % game.probec)
-	    pdest = game.state.galaxy[game.probec.x][game.probec.y]
+	    pdest = game.state.galaxy[game.probec.i][game.probec.j]
 	    # Update star chart if Radio is working or have access to radio
 	    if communicating():
-		chp = game.state.chart[game.probec.x][game.probec.y]
+		chp = game.state.chart[game.probec.i][game.probec.j]
 		chp.klingons = pdest.klingons
 		chp.starbase = pdest.starbase
 		chp.stars = pdest.stars
@@ -2520,7 +2520,7 @@
 		# lets blow the sucker! 
 		supernova(True, game.probec)
 		unschedule(FDSPROB)
-		if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova: 
+		if game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova: 
 		    return
 	elif evcode == FDISTR: # inhabited system issues distress call 
 	    unschedule(FDISTR)
@@ -2531,7 +2531,7 @@
 		# not already under attack, which is not
 		# supernova'ed, and which has some Klingons in it
 		w = randplace(GALSIZE)
-		q = game.state.galaxy[w.x][w.y]
+		q = game.state.galaxy[w.i][w.j]
                 if not (game.quadrant == w or q.planet == None or \
 		      not q.planet.inhabited or \
 		      q.supernova or q.status!="secure" or q.klingons<=0):
@@ -2544,8 +2544,7 @@
 	    # got one!!  Schedule its enslavement 
 	    ev = schedule(FENSLV, expran(game.intime))
 	    ev.quadrant = w
-	    q.status = distressed
-
+	    q.status = "distressed"
 	    # tell the captain about it if we can 
 	    if communicating():
 		prout(_("Uhura- Captain, %s in Quadrant %s reports it is under attack") \
@@ -2556,7 +2555,7 @@
 	elif evcode == FENSLV:		# starsystem is enslaved 
 	    ev = unschedule(FENSLV)
 	    # see if current distress call still active 
-	    q = game.state.galaxy[ev.quadrant.x][ev.quadrant.y]
+	    q = game.state.galaxy[ev.quadrant.i][ev.quadrant.j]
 	    if q.klingons <= 0:
 		q.status = "secure"
 		continue
@@ -2576,7 +2575,7 @@
 	    # explicitly retrieve and restore the x and y.
 	    ev = schedule(FREPRO, expran(1.0 * game.intime))
 	    # see if current distress call still active 
-	    q = game.state.galaxy[ev.quadrant.x][ev.quadrant.y]
+	    q = game.state.galaxy[ev.quadrant.i][ev.quadrant.j]
 	    if q.klingons <= 0:
 		q.status = "secure"
 		continue
@@ -2587,11 +2586,11 @@
 	    if game.klhere >= MAXKLQUAD:
                 try:
                     # this quadrant not ok, pick an adjacent one 
-                    for i in range(w.x - 1, w.x + 2):
-                        for j in range(w.y - 1, w.y + 2):
+                    for i in range(w.i - 1, w.i + 2):
+                        for j in range(w.j - 1, w.j + 2):
                             if not VALID_QUADRANT(i, j):
                                 continue
-                            q = game.state.galaxy[w.x][w.y]
+                            q = game.state.galaxy[w.i][w.j]
                             # check for this quad ok (not full & no snova) 
                             if q.klingons >= MAXKLQUAD or q.supernova:
                                 continue
@@ -2599,7 +2598,7 @@
                     else:
                         continue	# search for eligible quadrant failed
                 except "FOUNDIT":
-                    w.x = i; w.y = j
+                    w.i = i; w.j = j
 	    # deliver the child 
 	    game.state.remkl += 1
 	    q.klingons += 1
@@ -2665,7 +2664,7 @@
 	if origTime-delay >= 9.99 and game.condition == "docked":
 	    game.damage[DDRAY] = 0.0
 	# leave if quadrant supernovas
-        if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
+        if game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova:
             break
     game.resting = False
     game.optime = 0
@@ -2686,9 +2685,9 @@
 	supernova(False, nov)
 	return
     # handle initial nova 
-    game.quad[nov.x][nov.y] = IHDOT
+    game.quad[nov.i][nov.j] = IHDOT
     prout(crmena(False, IHSTAR, "sector", nov) + _(" novas."))
-    game.state.galaxy[game.quadrant.x][game.quadrant.y].stars -= 1
+    game.state.galaxy[game.quadrant.i][game.quadrant.j].stars -= 1
     game.state.starkl += 1
     # Set up queue to recursively trigger adjacent stars 
     hits = [nov]
@@ -2696,14 +2695,14 @@
     while hits:
         offset = coord()
         start = hits.pop()
-        for offset.x in range(-1, 1+1):
-            for offset.y in range(-1, 1+1):
-                if offset.y==0 and offset.x==0:
+        for offset.i in range(-1, 1+1):
+            for offset.j in range(-1, 1+1):
+                if offset.j==0 and offset.i==0:
                     continue
                 neighbor = start + offset
-                if not VALID_SECTOR(neighbor.y, neighbor.x):
+                if not VALID_SECTOR(neighbor.j, neighbor.i):
                     continue
-                iquad = game.quad[neighbor.x][neighbor.y]
+                iquad = game.quad[neighbor.i][neighbor.j]
                 # Empty space ends reaction
                 if iquad in (IHDOT, IHQUEST, IHBLANK, IHT, IHWEB):
                     pass
@@ -2714,14 +2713,14 @@
                         return
                     else:
                         hits.append(neighbor)
-			game.state.galaxy[game.quadrant.x][game.quadrant.y].stars -= 1
+			game.state.galaxy[game.quadrant.i][game.quadrant.j].stars -= 1
 			game.state.starkl += 1
 			proutn(crmena(True, IHSTAR, "sector", neighbor))
 			prout(_(" novas."))
-                        game.quad[neighbor.x][neighbor.y] = IHDOT
+                        game.quad[neighbor.i][neighbor.j] = IHDOT
                         kount += 1
                 elif iquad in (IHP, IHW): # Destroy planet 
-                    game.state.galaxy[game.quadrant.x][game.quadrant.y].planet = None
+                    game.state.galaxy[game.quadrant.i][game.quadrant.j].planet = None
                     if iquad == IHP:
                         game.state.nplankl += 1
                     else:
@@ -2733,15 +2732,15 @@
                     if game.landed:
                         finish(FPNOVA)
                         return
-                    game.quad[neighbor.x][neighbor.y] = IHDOT
+                    game.quad[neighbor.i][neighbor.j] = IHDOT
                 elif iquad == IHB: # Destroy base 
-                    game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase = False
+                    game.state.galaxy[game.quadrant.i][game.quadrant.j].starbase = False
                     game.state.baseq = filter(lambda x: x!= game.quadrant, game.state.baseq)
                     game.base.invalidate()
                     game.state.basekl += 1
                     newcnd()
                     prout(crmena(True, IHB, "sector", neighbor) + _(" destroyed."))
-                    game.quad[neighbor.x][neighbor.y] = IHDOT
+                    game.quad[neighbor.i][neighbor.j] = IHDOT
                 elif iquad in (IHE, IHF): # Buffet ship 
                     prout(_("***Starship buffeted by nova."))
                     if game.shldup:
@@ -2773,11 +2772,11 @@
                         break
                     newc = neighbor + neighbor - hits[mm]
                     proutn(crmena(True, iquad, "sector", neighbor) + _(" damaged"))
-                    if not VALID_SECTOR(newc.x, newc.y):
+                    if not VALID_SECTOR(newc.i, newc.j):
                         # can't leave quadrant 
                         skip(1)
                         break
-                    iquad1 = game.quad[newc.x][newc.y]
+                    iquad1 = game.quad[newc.i][newc.j]
                     if iquad1 == IHBLANK:
                         proutn(_(", blasted into ") + crmena(False, IHBLANK, "sector", newc))
                         skip(1)
@@ -2788,12 +2787,12 @@
                         skip(1)
                         break
                     proutn(_(", buffeted to Sector %s") % newc)
-                    game.quad[neighbor.x][neighbor.y] = IHDOT
-                    game.quad[newc.x][newc.y] = iquad
+                    game.quad[neighbor.i][neighbor.j] = IHDOT
+                    game.quad[newc.i][newc.j] = iquad
                     game.enemies[ll].move(newc)
     # Starship affected by nova -- kick it away. 
     game.dist = kount*0.1
-    game.direc = course[3*(bump.x+1)+bump.y+2]
+    game.direc = course[3*(bump.i+1)+bump.j+2]
     if game.direc == 0.0:
 	game.dist = 0.0
     if game.dist == 0.0:
@@ -2816,15 +2815,15 @@
 	# Scheduled supernova -- select star 
 	# logic changed here so that we won't favor quadrants in top
         # left of universe 
-	for nq.x in range(GALSIZE):
-	    for nq.y in range(GALSIZE):
-		stars += game.state.galaxy[nq.x][nq.y].stars
+	for nq.i in range(GALSIZE):
+	    for nq.j in range(GALSIZE):
+		stars += game.state.galaxy[nq.i][nq.j].stars
 	if stars == 0:
 	    return # nothing to supernova exists 
 	num = randrange(stars) + 1
-	for nq.x in range(GALSIZE):
-	    for nq.y in range(GALSIZE):
-		num -= game.state.galaxy[nq.x][nq.y].stars
+	for nq.i in range(GALSIZE):
+	    for nq.j in range(GALSIZE):
+		num -= game.state.galaxy[nq.i][nq.j].stars
 		if num <= 0:
 		    break
 	    if num <=0:
@@ -2842,10 +2841,10 @@
     else:
 	ns = coord()
 	# we are in the quadrant! 
-	num = randrange(game.state.galaxy[nq.x][nq.y].stars) + 1
-	for ns.x in range(QUADSIZE):
-	    for ns.y in range(QUADSIZE):
-		if game.quad[ns.x][ns.y]==IHSTAR:
+	num = randrange(game.state.galaxy[nq.i][nq.j].stars) + 1
+	for ns.i in range(QUADSIZE):
+	    for ns.j in range(QUADSIZE):
+		if game.quad[ns.i][ns.j]==IHSTAR:
 		    num -= 1
 		    if num==0:
 			break
@@ -2855,18 +2854,18 @@
 	prouts(_("***RED ALERT!  RED ALERT!"))
 	skip(1)
 	prout(_("***Incipient supernova detected at Sector %s") % ns)
-	if (ns.x-game.sector.x)**2 + (ns.y-game.sector.y)**2 <= 2.1:
+	if (ns.i-game.sector.i)**2 + (ns.j-game.sector.j)**2 <= 2.1:
 	    proutn(_("Emergency override attempts t"))
 	    prouts("***************")
 	    skip(1)
 	    stars()
 	    game.alldone = True
     # destroy any Klingons in supernovaed quadrant 
-    kldead = game.state.galaxy[nq.x][nq.y].klingons
-    game.state.galaxy[nq.x][nq.y].klingons = 0
+    kldead = game.state.galaxy[nq.i][nq.j].klingons
+    game.state.galaxy[nq.i][nq.j].klingons = 0
     if nq == game.state.kscmdr:
 	# did in the Supercommander! 
-	game.state.nscrem = game.state.kscmdr.x = game.state.kscmdr.y = game.isatb =  0
+	game.state.nscrem = game.state.kscmdr.i = game.state.kscmdr.j = game.isatb =  0
 	game.iscate = False
 	unschedule(FSCMOVE)
 	unschedule(FSCDBAS)
@@ -2878,8 +2877,8 @@
         unschedule(FTBEAM)
     game.state.remkl -= kldead
     # destroy Romulans and planets in supernovaed quadrant 
-    nrmdead = game.state.galaxy[nq.x][nq.y].romulans
-    game.state.galaxy[nq.x][nq.y].romulans = 0
+    nrmdead = game.state.galaxy[nq.i][nq.j].romulans
+    game.state.galaxy[nq.i][nq.j].romulans = 0
     game.state.nromrem -= nrmdead
     # Destroy planets 
     for loop in range(game.inplan):
@@ -2890,12 +2889,12 @@
     game.state.baseq = filter(lambda x: x != nq, game.state.baseq)
     # If starship caused supernova, tally up destruction 
     if induced:
-	game.state.starkl += game.state.galaxy[nq.x][nq.y].stars
-	game.state.basekl += game.state.galaxy[nq.x][nq.y].starbase
+	game.state.starkl += game.state.galaxy[nq.i][nq.j].stars
+	game.state.basekl += game.state.galaxy[nq.i][nq.j].starbase
 	game.state.nplankl += npdead
     # mark supernova in galaxy and in star chart 
     if game.quadrant == nq or communicating():
-	game.state.galaxy[nq.x][nq.y].supernova = True
+	game.state.galaxy[nq.i][nq.j].supernova = True
     # If supernova destroys last Klingons give special message 
     if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem)==0 and not nq == game.quadrant:
 	skip(2)
@@ -2963,7 +2962,7 @@
 	l=1
 	while l <= len(game.enemies):
 	    if game.enemies[l].kpower*game.enemies[l].kdist <= whammo: 
-		deadkl(game.enemies[l].kloc, game.quad[game.enemies[l].kloc.x][game.enemies[l].kloc.y], game.enemies[l].kloc)
+		deadkl(game.enemies[l].kloc, game.quad[game.enemies[l].kloc.i][game.enemies[l].kloc.j], game.enemies[l].kloc)
 	    l += 1
     finish(FDILITHIUM)
 				
@@ -3562,7 +3561,7 @@
 
 def put_srscan_sym(w, sym):
     "Emit symbol for short-range scan."
-    srscan_window.move(w.x+1, w.y*2+2)
+    srscan_window.move(w.i+1, w.j*2+2)
     srscan_window.addch(sym)
     srscan_window.refresh()
 
@@ -3572,12 +3571,12 @@
 	drawmaps(2)
 	setwnd(srscan_window)
 	srscan_window.attron(curses.A_REVERSE)
-	put_srscan_sym(w, game.quad[w.x][w.y])
+	put_srscan_sym(w, game.quad[w.i][w.j])
 	#sound(500)
 	#time.sleep(1.0)
 	#nosound()
 	srscan_window.attroff(curses.A_REVERSE)
-	put_srscan_sym(w, game.quad[w.x][w.y])
+	put_srscan_sym(w, game.quad[w.i][w.j])
 	curses.delay_output(500)
 	setwnd(message_window) 
 
@@ -3599,7 +3598,7 @@
 	if step == 1:
 	    if n != 1:
 		skip(1)
-		proutn(_("Track for %s torpedo number %d-  ") % (game.quad[origin.x][origin.y],i+1))
+		proutn(_("Track for %s torpedo number %d-  ") % (game.quad[origin.i][origin.j],i+1))
 	    else:
 		skip(1)
 		proutn(_("Torpedo track- "))
@@ -3660,21 +3659,21 @@
 
     def no_quad_change():
         # No quadrant change -- compute new average enemy distances 
-        game.quad[game.sector.x][game.sector.y] = game.ship
+        game.quad[game.sector.i][game.sector.j] = game.ship
         if game.enemies:
             for enemy in game.enemies:
                 finald = (w-enemy.kloc).distance()
                 enemy.kavgd = 0.5 * (finald + enemy.kdist)
                 enemy.kdist = finald
             game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
-            if not game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
+            if not game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova:
                 attack(torps_ok=False)
             for enemy in game.enemies:
                 enemy.kavgd = enemy.kdist
         newcnd()
         drawmaps(0)
         setwnd(message_window)
-    w.x = w.y = 0
+    w.i = w.j = 0
     if game.inorbit:
 	prout(_("Helmsman Sulu- \"Leaving standard orbit.\""))
 	game.inorbit = False
@@ -3694,17 +3693,17 @@
 	game.dist = game.dist*(scheduled(FTBEAM)-game.state.date)/game.optime + 0.1
 	game.optime = scheduled(FTBEAM) - game.state.date + 1e-5
     # Move within the quadrant 
-    game.quad[game.sector.x][game.sector.y] = IHDOT
-    x = game.sector.x
-    y = game.sector.y
+    game.quad[game.sector.i][game.sector.j] = IHDOT
+    x = game.sector.i
+    y = game.sector.j
     n = int(10.0*game.dist*bigger+0.5)
     if n > 0:
 	for m in range(1, n+1):
             x += deltax
             y += deltay
-	    w.x = int(round(x))
-	    w.y = int(round(y))
-	    if not VALID_SECTOR(w.x, w.y):
+	    w.i = int(round(x))
+	    w.j = int(round(y))
+	    if not VALID_SECTOR(w.i, w.j):
 		# Leaving quadrant -- allow final enemy attack 
 		# Don't do it if being pushed by Nova 
 		if len(game.enemies) != 0 and not novapush:
@@ -3717,30 +3716,30 @@
 		    # that attacks only happen if Klingons
 		    # are present and your skill is good.
 		    # 
-		    if game.skill > SKILL_GOOD and game.klhere > 0 and not game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
+		    if game.skill > SKILL_GOOD and game.klhere > 0 and not game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova:
 			attack(torps_ok=False)
 		    if game.alldone:
 			return
 		# compute final position -- new quadrant and sector 
-		x = (QUADSIZE*game.quadrant.x)+game.sector.x
-		y = (QUADSIZE*game.quadrant.y)+game.sector.y
-		w.x = int(round(x+10.0*game.dist*bigger*deltax))
-		w.y = int(round(y+10.0*game.dist*bigger*deltay))
+		x = (QUADSIZE*game.quadrant.i)+game.sector.i
+		y = (QUADSIZE*game.quadrant.j)+game.sector.j
+		w.i = int(round(x+10.0*game.dist*bigger*deltax))
+		w.j = int(round(y+10.0*game.dist*bigger*deltay))
 		# check for edge of galaxy 
 		kinks = 0
                 while True:
 		    kink = False
-		    if w.x < 0:
-			w.x = -w.x
+		    if w.i < 0:
+			w.i = -w.i
 			kink = True
-		    if w.y < 0:
-			w.y = -w.y
+		    if w.j < 0:
+			w.j = -w.j
 			kink = True
-		    if w.x >= GALSIZE*QUADSIZE:
-			w.x = (GALSIZE*QUADSIZE*2) - w.x
+		    if w.i >= GALSIZE*QUADSIZE:
+			w.i = (GALSIZE*QUADSIZE*2) - w.i
 			kink = True
-		    if w.y >= GALSIZE*QUADSIZE:
-			w.y = (GALSIZE*QUADSIZE*2) - w.y
+		    if w.j >= GALSIZE*QUADSIZE:
+			w.j = (GALSIZE*QUADSIZE*2) - w.j
 			kink = True
 		    if kink:
 			kinks += 1
@@ -3759,18 +3758,18 @@
 		# Compute final position in new quadrant 
 		if trbeam: # Don't bother if we are to be beamed 
 		    return
-		game.quadrant.x = w.x/QUADSIZE
-		game.quadrant.y = w.y/QUADSIZE
-		game.sector.x = w.x - (QUADSIZE*game.quadrant.x)
-		game.sector.y = w.y - (QUADSIZE*game.quadrant.y)
+		game.quadrant.i = w.i/QUADSIZE
+		game.quadrant.j = w.j/QUADSIZE
+		game.sector.i = w.i - (QUADSIZE*game.quadrant.i)
+		game.sector.j = w.j - (QUADSIZE*game.quadrant.j)
 		skip(1)
 		prout(_("Entering Quadrant %s.") % game.quadrant)
-		game.quad[game.sector.x][game.sector.y] = game.ship
+		game.quad[game.sector.i][game.sector.j] = game.ship
 		newqad()
 		if game.skill>SKILL_NOVICE:
 		    attack(torps_ok=False)  
 		return
-	    iquad = game.quad[w.x][w.y]
+	    iquad = game.quad[w.i][w.j]
 	    if iquad != IHDOT:
 		# object encountered in flight path 
 		stopegy = 50.0*game.dist/game.optime
@@ -3814,8 +3813,8 @@
 		    proutn(_("Emergency stop required "))
 		    prout(_("%2d units of energy.") % int(stopegy))
 		    game.energy -= stopegy
-		    final.x = int(round(deltax))
-		    final.y = int(round(deltay))
+		    final.i = int(round(deltax))
+		    final.j = int(round(deltay))
 		    game.sector = final
 		    if game.energy <= 0:
 			finish(FNRG)
@@ -3838,7 +3837,7 @@
     if game.inorbit:
 	prout(_("You must first leave standard orbit."))
 	return
-    if not game.base.is_valid() or abs(game.sector.x-game.base.x) > 1 or abs(game.sector.y-game.base.y) > 1:
+    if not game.base.is_valid() or abs(game.sector.i-game.base.i) > 1 or abs(game.sector.j-game.base.j) > 1:
 	prout(crmshp() + _(" not adjacent to base."))
 	return
     game.condition = "docked"
@@ -3946,23 +3945,23 @@
 		huh()
 		return False
 	    xl = int(round(scanner.real))-1
-	    dquad.x = xi
-	    dquad.y = xj
-	    dsect.y = xk
-	    dsect.x = xl
+	    dquad.i = xi
+	    dquad.j = xj
+	    dsect.j = xk
+	    dsect.i = xl
 	else:
             # only one pair of numbers was specified
 	    if isprobe:
 		# only quadrant specified -- go to center of dest quad 
-		dquad.x = xi
-		dquad.y = xj
-		dsect.y = dsect.x = 4	# preserves 1-origin behavior
+		dquad.i = xi
+		dquad.j = xj
+		dsect.j = dsect.i = 4	# preserves 1-origin behavior
 	    else:
                 # only sector specified
-		dsect.y = xi
-		dsect.x = xj
+		dsect.j = xi
+		dsect.i = xj
 	    itemp = "normal"
-	if not VALID_QUADRANT(dquad.y,dquad.x) or not VALID_SECTOR(dsect.x,dsect.y):
+	if not VALID_QUADRANT(dquad.j,dquad.i) or not VALID_SECTOR(dsect.i,dsect.j):
 	    huh()
 	    return False
 	skip(1)
@@ -3974,8 +3973,8 @@
 		prout(_("Ensign Chekov- \"Course laid in, Captain.\""))
         # the actual deltas get computed here
         delta = coord()
-	delta.x = dquad.y-game.quadrant.y + 0.1*(dsect.x-game.sector.y)
-	delta.y = game.quadrant.x-dquad.x + 0.1*(game.sector.x-dsect.y)
+	delta.i = dquad.j-game.quadrant.j + 0.1*(dsect.i-game.sector.j)
+	delta.j = game.quadrant.i-dquad.i + 0.1*(game.sector.i-dsect.j)
     else: # manual 
 	while key == IHEOL:
 	    proutn(_("X and Y displacements- "))
@@ -3986,14 +3985,14 @@
 	if key != IHREAL:
 	    huh()
 	    return False
-	delta.y = scanner.real
+	delta.j = scanner.real
 	key = scanner.next()
 	if key != IHREAL:
 	    huh()
 	    return False
-	delta.x = scanner.real
+	delta.i = scanner.real
     # Check for zero movement 
-    if delta.x == 0 and delta.y == 0:
+    if delta.i == 0 and delta.j == 0:
 	scanner.chew()
 	return False
     if itemp == "verbose" and not isprobe:
@@ -4137,8 +4136,8 @@
 	    deltax /= bigger
 	    deltay /= bigger
 	    n = 10.0 * game.dist * bigger +0.5
-	    x = game.sector.x
-	    y = game.sector.y
+	    x = game.sector.i
+	    y = game.sector.j
 	    for l in range(1, n+1):
 		x += deltax
 		ix = x + 0.5
@@ -4255,7 +4254,7 @@
 	skip(1)
 	prout(_("safely out of quadrant."))
 	if not damaged(DRADIO):
-	    game.state.galaxy[game.quadrant.x][game.quadrant.y].charted = True
+	    game.state.galaxy[game.quadrant.i][game.quadrant.j].charted = True
 	# Try to use warp engines 
 	if damaged(DWARPEN):
 	    skip(1)
@@ -4284,7 +4283,7 @@
 	    finish(FSNOVAED)
 	    return
 	# Repeat if another snova
-        if not game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
+        if not game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova:
             break
     if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem)==0: 
 	finish(FWON) # Snova killed remaining enemy. 
@@ -4394,8 +4393,8 @@
     game.probeiny /= bigger
     game.probeinx /= bigger
     game.proben = 10.0*game.dist*bigger +0.5
-    game.probex = game.quadrant.x*QUADSIZE + game.sector.x - 1	# We will use better packing than original
-    game.probey = game.quadrant.y*QUADSIZE + game.sector.y - 1
+    game.probex = game.quadrant.i*QUADSIZE + game.sector.i - 1	# We will use better packing than original
+    game.probey = game.quadrant.j*QUADSIZE + game.sector.j - 1
     game.probec = game.quadrant
     schedule(FDSPROB, 0.01) # Time to move one sector
     prout(_("Ensign Chekov-  \"The deep space probe is launched, Captain.\""))
@@ -4438,7 +4437,7 @@
 	return
     # OK -- call for help from nearest starbase 
     game.nhelp += 1
-    if game.base.x!=0:
+    if game.base.i!=0:
 	# There's one in this quadrant 
 	ddist = (game.base - game.sector).distance()
     else:
@@ -4451,13 +4450,13 @@
 	game.quadrant = ibq
 	newqad()
     # dematerialize starship 
-    game.quad[game.sector.x][game.sector.y]=IHDOT
+    game.quad[game.sector.i][game.sector.j]=IHDOT
     proutn(_("Starbase in Quadrant %s responds--%s dematerializes") \
            % (game.quadrant, crmshp()))
     game.sector.invalidate()
     for m in range(1, 5+1):
         w = game.base.scatter() 
-	if VALID_SECTOR(w.x,w.y) and game.quad[w.x][w.y]==IHDOT:
+	if VALID_SECTOR(w.i,w.j) and game.quad[w.i][w.j]==IHDOT:
 	    # found one -- finish up 
             game.sector = w
 	    break
@@ -4548,7 +4547,7 @@
 	    # Oops! no place to go... 
 	    finish(FABANDN)
 	    return
-	q = game.state.galaxy[game.quadrant.x][game.quadrant.y]
+	q = game.state.galaxy[game.quadrant.i][game.quadrant.j]
 	# Dispose of crew 
 	if not (game.options & OPTION_WORLDS) and not damaged(DTRANSP):
 	    prout(_("Remainder of ship's complement beam down"))
@@ -4571,23 +4570,23 @@
 	# Set up quadrant and position FQ adjacient to base 
 	if not game.quadrant == game.state.baseq[nb]:
 	    game.quadrant = game.state.baseq[nb]
-	    game.sector.x = game.sector.y = 5
+	    game.sector.i = game.sector.j = 5
 	    newqad()
 	while True:
 	    # position next to base by trial and error 
-	    game.quad[game.sector.x][game.sector.y] = IHDOT
+	    game.quad[game.sector.i][game.sector.j] = IHDOT
 	    for l in range(QUADSIZE):
 		game.sector = game.base.scatter()
-		if VALID_SECTOR(game.sector.x, game.sector.y) and \
-                       game.quad[game.sector.x][game.sector.y] == IHDOT:
+		if VALID_SECTOR(game.sector.i, game.sector.j) and \
+                       game.quad[game.sector.i][game.sector.j] == IHDOT:
                     break
 	    if l < QUADSIZE+1:
 		break # found a spot 
-	    game.sector.x=QUADSIZE/2
-	    game.sector.y=QUADSIZE/2
+	    game.sector.i=QUADSIZE/2
+	    game.sector.j=QUADSIZE/2
 	    newqad()
     # Get new commission 
-    game.quad[game.sector.x][game.sector.y] = game.ship = IHF
+    game.quad[game.sector.i][game.sector.j] = game.ship = IHF
     game.state.crew = FULLCREW
     prout(_("Starfleet puts you in command of another ship,"))
     prout(_("the Faerie Queene, which is antiquated but,"))
@@ -4616,7 +4615,7 @@
     "Abort a lengthy operation if an event interrupts it." 
     game.ididit = True
     events()
-    if game.alldone or game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova or game.justin: 
+    if game.alldone or game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova or game.justin: 
 	return True
     return False
 
@@ -4661,7 +4660,7 @@
     if not game.plnet.is_valid():
         prout("There is no planet in this sector.")
         return
-    if abs(game.sector.x-game.plnet.x)>1 or abs(game.sector.y-game.plnet.y)>1:
+    if abs(game.sector.i-game.plnet.i)>1 or abs(game.sector.j-game.plnet.j)>1:
 	prout(crmshp() + _(" not adjacent to planet."))
 	skip(1)
 	return
@@ -5007,7 +5006,7 @@
 	prouts(_("Sulu- \"Captain!  It's working!\""))
 	skip(2)
 	while len(game.enemies) > 0:
-	    deadkl(game.enemies[1].kloc, game.quad[game.enemies[1].kloc.x][game.enemies[1].kloc.y],game.enemies[1].kloc)
+	    deadkl(game.enemies[1].kloc, game.quad[game.enemies[1].kloc.i][game.enemies[1].kloc.j],game.enemies[1].kloc)
 	prout(_("Ensign Chekov-  \"Congratulations, Captain!\""))
 	if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem) == 0:
 	    finish(FWON)    
@@ -5171,10 +5170,10 @@
             prout(_("Starbase's long-range scan"))
     elif not silent:
 	prout(_("Long-range scan"))
-    for x in range(game.quadrant.x-1, game.quadrant.x+2):
+    for x in range(game.quadrant.i-1, game.quadrant.i+2):
         if not silent:
             proutn(" ")
-        for y in range(game.quadrant.y-1, game.quadrant.y+2):
+        for y in range(game.quadrant.j-1, game.quadrant.j+2):
 	    if not VALID_QUADRANT(x, y):
                 if not silent:
                     proutn("  -1")
@@ -5234,7 +5233,7 @@
     for i in range(GALSIZE):
 	proutn("%d |" % (i+1))
 	for j in range(GALSIZE):
-	    if (game.options & OPTION_SHOWME) and i == game.quadrant.x and j == game.quadrant.y:
+	    if (game.options & OPTION_SHOWME) and i == game.quadrant.i and j == game.quadrant.j:
 		proutn("<")
 	    else:
 		proutn(" ")
@@ -5247,7 +5246,7 @@
 	    else:
 		show = "..."
 	    proutn(show)
-	    if (game.options & OPTION_SHOWME) and i == game.quadrant.x and j == game.quadrant.y:
+	    if (game.options & OPTION_SHOWME) and i == game.quadrant.i and j == game.quadrant.j:
 		proutn(">")
 	    else:
 		proutn(" ")
@@ -5257,7 +5256,7 @@
 
 def sectscan(goodScan, i, j):
     "Light up an individual dot in a sector."
-    if goodScan or (abs(i-game.sector.x)<= 1 and abs(j-game.sector.y) <= 1):
+    if goodScan or (abs(i-game.sector.i)<= 1 and abs(j-game.sector.j) <= 1):
 	if (game.quad[i][j]==IHMATER0) or (game.quad[i][j]==IHMATER1) or (game.quad[i][j]==IHMATER2) or (game.quad[i][j]==IHE) or (game.quad[i][j]==IHF):
 	    if game.condition   == "red": textcolor("red")
 	    elif game.condition == "green": textcolor("green")
@@ -5319,7 +5318,7 @@
                % (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem))
     if not req or req == 10:
 	if game.options & OPTION_WORLDS:
-	    plnet = game.state.galaxy[game.quadrant.x][game.quadrant.y].planet
+	    plnet = game.state.galaxy[game.quadrant.i][game.quadrant.j].planet
 	    if plnet and plnet.inhabited:
 		prstat(_("Major system"), plnet.name)
 	    else:
@@ -5353,10 +5352,10 @@
     else:
 	prout(_("     Short-range scan"))
     if goodScan and not damaged(DRADIO): 
-	game.state.chart[game.quadrant.x][game.quadrant.y].klingons = game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons
-	game.state.chart[game.quadrant.x][game.quadrant.y].starbase = game.state.galaxy[game.quadrant.x][game.quadrant.y].starbase
-	game.state.chart[game.quadrant.x][game.quadrant.y].stars = game.state.galaxy[game.quadrant.x][game.quadrant.y].stars
-	game.state.galaxy[game.quadrant.x][game.quadrant.y].charted = True
+	game.state.chart[game.quadrant.i][game.quadrant.j].klingons = game.state.galaxy[game.quadrant.i][game.quadrant.j].klingons
+	game.state.chart[game.quadrant.i][game.quadrant.j].starbase = game.state.galaxy[game.quadrant.i][game.quadrant.j].starbase
+	game.state.chart[game.quadrant.i][game.quadrant.j].stars = game.state.galaxy[game.quadrant.i][game.quadrant.j].stars
+	game.state.galaxy[game.quadrant.i][game.quadrant.j].charted = True
     prout("    1 2 3 4 5 6 7 8 9 10")
     if game.condition != "docked":
 	newcnd()
@@ -5381,31 +5380,31 @@
 	if scanner.next()!=IHREAL:
 	    huh()
 	    return
-    w1.y = int(scanner.real-0.5)
+    w1.j = int(scanner.real-0.5)
     if scanner.next() != IHREAL:
 	huh()
 	return
-    w1.x = int(scanner.real-0.5)
+    w1.i = int(scanner.real-0.5)
     if scanner.next() == IHREAL:
-	w2.y = int(scanner.real-0.5)
+	w2.j = int(scanner.real-0.5)
 	if scanner.next() != IHREAL:
 	    huh()
 	    return
-	w2.x = int(scanner.real-0.5)
+	w2.i = int(scanner.real-0.5)
     else:
-	if game.quadrant.y>w1.x:
-	    w2.x = 0
+	if game.quadrant.j>w1.i:
+	    w2.i = 0
 	else:
-	    w2.x=QUADSIZE-1
-	if game.quadrant.x>w1.y:
-	    w2.y = 0
+	    w2.i=QUADSIZE-1
+	if game.quadrant.i>w1.j:
+	    w2.j = 0
 	else:
-	    w2.y=QUADSIZE-1
-    if not VALID_QUADRANT(w1.x, w1.y) or not VALID_SECTOR(w2.x, w2.y):
+	    w2.j=QUADSIZE-1
+    if not VALID_QUADRANT(w1.i, w1.j) or not VALID_SECTOR(w2.i, w2.j):
 	huh()
 	return
-    game.dist = math.sqrt((w1.y-game.quadrant.y+0.1*(w2.y-game.sector.y))**2+
-		(w1.x-game.quadrant.x+0.1*(w2.x-game.sector.x))**2)
+    game.dist = math.sqrt((w1.j-game.quadrant.j+0.1*(w2.j-game.sector.j))**2+
+		(w1.i-game.quadrant.i+0.1*(w2.i-game.sector.i))**2)
     wfl = False
     if prompt:
 	prout(_("Answer \"no\" if you don't know the value:"))
@@ -5664,7 +5663,7 @@
         while True:
             while True:
                 w = randplace(GALSIZE)
-                if not game.state.galaxy[w.x][w.y].starbase:
+                if not game.state.galaxy[w.i][w.j].starbase:
                     break
 	    contflag = False
             # C version: for (j = i-1; j > 0; j--)
@@ -5683,7 +5682,7 @@
             if not contflag:
                 break
 	game.state.baseq.append(w)
-	game.state.galaxy[w.x][w.y].starbase = game.state.chart[w.x][w.y].starbase = True
+	game.state.galaxy[w.i][w.j].starbase = game.state.chart[w.i][w.j].starbase = True
     # Position ordinary Klingon Battle Cruisers
     krem = game.inkling
     klumper = 0.25*game.skill*(9.0-game.length)+1.0
@@ -5697,10 +5696,10 @@
 	krem -= klump
         while True:
             w = randplace(GALSIZE)
-            if not game.state.galaxy[w.x][w.y].supernova and \
-               game.state.galaxy[w.x][w.y].klingons + klump <= MAXKLQUAD:
+            if not game.state.galaxy[w.i][w.j].supernova and \
+               game.state.galaxy[w.i][w.j].klingons + klump <= MAXKLQUAD:
                 break
-	game.state.galaxy[w.x][w.y].klingons += int(klump)
+	game.state.galaxy[w.i][w.j].klingons += int(klump)
         if krem <= 0:
             break
     # Position Klingon Commander Ships
@@ -5709,15 +5708,15 @@
             w = randplace(GALSIZE)
             if not welcoming(w) or w in game.state.kcmdr:
                 continue
-            if (game.state.galaxy[w.x][w.y].klingons or withprob(0.25)):
+            if (game.state.galaxy[w.i][w.j].klingons or withprob(0.25)):
                 break
-	game.state.galaxy[w.x][w.y].klingons += 1
+	game.state.galaxy[w.i][w.j].klingons += 1
 	game.state.kcmdr.append(w)
     # Locate planets in galaxy
     for i in range(game.inplan):
         while True:
             w = randplace(GALSIZE) 
-            if game.state.galaxy[w.x][w.y].planet == None:
+            if game.state.galaxy[w.i][w.j].planet == None:
                 break
         new = planet()
 	new.quadrant = w
@@ -5734,12 +5733,12 @@
                 new.crystals = "present"
 	    new.known = "unknown"
 	    new.inhabited = False
-	game.state.galaxy[w.x][w.y].planet = new
+	game.state.galaxy[w.i][w.j].planet = new
         game.state.planets.append(new)
     # Locate Romulans
     for i in range(game.state.nromrem):
 	w = randplace(GALSIZE)
-	game.state.galaxy[w.x][w.y].romulans += 1
+	game.state.galaxy[w.i][w.j].romulans += 1
     # Place the Super-Commander if needed
     if game.state.nscrem > 0:
         while True:
@@ -5747,7 +5746,7 @@
             if welcoming(w):
                 break
 	game.state.kscmdr = w
-	game.state.galaxy[w.x][w.y].klingons += 1
+	game.state.galaxy[w.i][w.j].klingons += 1
     # Initialize times for extraneous events
     schedule(FSNOVA, expran(0.5 * game.intime))
     schedule(FTBEAM, expran(1.5 * (game.intime / len(game.state.kcmdr))))
@@ -5925,10 +5924,10 @@
     "Drop a feature on a random dot in the current quadrant."
     while True:
         w = randplace(QUADSIZE)
-        if game.quad[w.x][w.y] == IHDOT:
+        if game.quad[w.i][w.j] == IHDOT:
             break
     if iquad is not None:
-        game.quad[w.x][w.y] = iquad
+        game.quad[w.i][w.j] = iquad
     return w
 
 def newcnd():
@@ -5936,7 +5935,7 @@
     game.condition = "green"
     if game.energy < 1000.0:
 	game.condition = "yellow"
-    if game.state.galaxy[game.quadrant.x][game.quadrant.y].klingons or game.state.galaxy[game.quadrant.x][game.quadrant.y].romulans:
+    if game.state.galaxy[game.quadrant.i][game.quadrant.j].klingons or game.state.galaxy[game.quadrant.i][game.quadrant.j].romulans:
 	game.condition = "red"
     if not game.alive:
 	game.condition="dead"
@@ -5957,14 +5956,14 @@
 	# Attempt to escape Super-commander, so tbeam back!
 	game.iscate = False
 	game.ientesc = True
-    q = game.state.galaxy[game.quadrant.x][game.quadrant.y]
+    q = game.state.galaxy[game.quadrant.i][game.quadrant.j]
     # cope with supernova
     if q.supernova:
 	return
     game.klhere = q.klingons
     game.irhere = q.romulans
     # Position Starship
-    game.quad[game.sector.x][game.sector.y] = game.ship
+    game.quad[game.sector.i][game.sector.j] = game.ship
     game.enemies = []
     if q.klingons:
 	# Position ordinary Klingons
@@ -5974,13 +5973,13 @@
         for cmdr in game.state.kcmdr:
 	    if cmdr == game.quadrant:
                 e = game.enemies[game.klhere-1]
-                game.quad[e.kloc.x][e.kloc.y] = IHC
+                game.quad[e.kloc.i][e.kloc.j] = IHC
                 e.kpower = randreal(950,1350) + 50.0*game.skill
 		break	
 	# If we need a super-commander, promote a Klingon
 	if game.quadrant == game.state.kscmdr:
             e = game.enemies[0]
-	    game.quad[e.kloc.x][e.kloc.y] = IHS
+	    game.quad[e.kloc.i][e.kloc.j] = IHS
 	    e.kpower = randreal(1175.0,  1575.0) + 125.0*game.skill
 	    game.iscate = (game.state.remkl > 1)
     # Put in Romulans if needed
@@ -6023,9 +6022,9 @@
             (game.skill > SKILL_GOOD and withprob(0.08)):
             w = coord()
             while True:
-		w.x = withprob(0.5) * (QUADSIZE-1)
-		w.y = withprob(0.5) * (QUADSIZE-1)
-                if game.quad[w.x][w.y] == IHDOT:
+		w.i = withprob(0.5) * (QUADSIZE-1)
+		w.j = withprob(0.5) * (QUADSIZE-1)
+                if game.quad[w.i][w.j] == IHDOT:
                     break
             game.tholian = enemy(type=IHT, loc=w,
                                  power=randrange(100, 500) + 25.0*game.skill)
@@ -6120,7 +6119,7 @@
     "Generate a list of legal commands."
     proutn(_("LEGAL COMMANDS ARE:"))
     for (k, key) in enumerate(commands):
-	if not commands[cmd] or (commands[key] & game.options):
+	if not commands[key] or (commands[key] & game.options):
             if k % 5 == 0:
                 skip(1)
             proutn("%-12s " % key) 
@@ -6323,14 +6322,14 @@
 		events()
 		if game.alldone:
 		    break	# Events did us in
-	    if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
+	    if game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova:
 		atover(False)
 		continue
 	    if hitme and not game.justin:
 		attack(torps_ok=True)
 		if game.alldone:
 		    break
-		if game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova:
+		if game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova:
 		    atover(False)
 		    hitme = True
 		    continue
@@ -6384,8 +6383,8 @@
 def randplace(size):
     "Choose a random location."
     w = coord()
-    w.x = randrange(size) 
-    w.y = randrange(size)
+    w.i = randrange(size) 
+    w.j = randrange(size)
     return w
 
 class sstscanner:
@@ -6453,12 +6452,12 @@
     	if scanner.type != IHREAL:
 	    huh()
 	    return None
-	s.x = scanner.int()-1
+	s.i = scanner.int()-1
         scanner.next()
 	if scanner.type != IHREAL:
 	    huh()
 	    return None
-	s.y = scanner.int()-1
+	s.j = scanner.int()-1
         return s
 
 def ja():
@@ -6552,18 +6551,18 @@
 			    prout("Event %d canceled, no x coordinate." % (i))
 			    unschedule(i)
 			    continue
-			w.x = int(round(scanner.real))
+			w.i = int(round(scanner.real))
 			key = scanner.next()
 			if key != IHREAL:
 			    prout("Event %d canceled, no y coordinate." % (i))
 			    unschedule(i)
 			    continue
-			w.y = int(round(scanner.real))
+			w.j = int(round(scanner.real))
 			ev.quadrant = w
 	scanner.chew()
     proutn("Induce supernova here? ")
     if ja() == True:
-	game.state.galaxy[game.quadrant.x][game.quadrant.y].supernova = True
+	game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova = True
 	atover(True)
 
 if __name__ == '__main__':



From esr at mail.berlios.de  Tue Oct 10 03:14:37 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 03:14:37 +0200
Subject: [Sst-commit-watch] r725 - trunk/src
Message-ID: <200610100114.k9A1EbaE026620@sheep.berlios.de>

Author: esr
Date: 2006-10-10 03:14:36 +0200 (Tue, 10 Oct 2006)
New Revision: 725

Modified:
   trunk/src/sst.py
Log:
More nomenclature fixes.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-09 23:14:11 UTC (rev 724)
+++ trunk/src/sst.py	2006-10-10 01:14:36 UTC (rev 725)
@@ -795,13 +795,13 @@
 	# Check if preferred position available 
 	look = next + m
         if m.i < 0:
-            krawlx = 1
+            krawli = 1
         else:
-            krawlx = -1
+            krawli = -1
         if m.j < 0:
-            krawly = 1
+            krawlj = 1
         else:
-            krawly = -1
+            krawlj = -1
 	success = False
 	attempts = 0; # Settle mysterious hang problem 
 	while attempts < 20 and not success:
@@ -809,29 +809,29 @@
 	    if look.i < 0 or look.i >= QUADSIZE:
 		if motion < 0 and tryexit(enemy, look, irun):
 		    return
-		if krawlx == m.i or m.j == 0:
+		if krawli == m.i or m.j == 0:
 		    break
-		look.i = next.i + krawlx
-		krawlx = -krawlx
+		look.i = next.i + krawli
+		krawli = -krawli
 	    elif look.j < 0 or look.j >= QUADSIZE:
 		if motion < 0 and tryexit(enemy, look, irun):
 		    return
-		if krawly == m.j or m.i == 0:
+		if krawlj == m.j or m.i == 0:
 		    break
-		look.j = next.j + krawly
-		krawly = -krawly
+		look.j = next.j + krawlj
+		krawlj = -krawlj
 	    elif (game.options & OPTION_RAMMING) and game.quad[look.i][look.j] != IHDOT:
 		# See if enemy should ram ship 
 		if game.quad[look.i][look.j] == game.ship and \
 		    (enemy.type == IHC or enemy.type == IHS):
 		    collision(rammed=True, enemy=enemy)
 		    return
-		if krawlx != m.i and m.j != 0:
-		    look.i = next.i + krawlx
-		    krawlx = -krawlx
-		elif krawly != m.j and m.i != 0:
-		    look.j = next.j + krawly
-		    krawly = -krawly
+		if krawli != m.i and m.j != 0:
+		    look.i = next.i + krawli
+		    krawli = -krawli
+		elif krawlj != m.j and m.i != 0:
+		    look.j = next.j + krawlj
+		    krawlj = -krawlj
 		else:
 		    break; # we have failed 
 	    else:
@@ -2382,7 +2382,7 @@
 	game.optime -= xtime
 	if evcode == FSNOVA: # Supernova 
 	    announce()
-	    supernova(False)
+	    supernova(None)
 	    schedule(FSNOVA, expran(0.5*game.intime))
 	    if game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova:
 		return
@@ -2518,7 +2518,7 @@
 	    game.proben -= 1 # One less to travel
 	    if game.proben == 0 and game.isarmed and pdest.stars:
 		# lets blow the sucker! 
-		supernova(True, game.probec)
+		supernova(game.probec)
 		unschedule(FDSPROB)
 		if game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova: 
 		    return
@@ -2682,7 +2682,7 @@
     newc = coord(); neighbor = coord(); bump = coord(0, 0)
     if withprob(0.05):
 	# Wow! We've supernova'ed 
-	supernova(False, nov)
+	supernova(game.quadrant)
 	return
     # handle initial nova 
     game.quad[nov.i][nov.j] = IHDOT
@@ -2709,7 +2709,7 @@
                 elif iquad == IHSTAR: # Affect another star 
                     if withprob(0.05):
                         # This star supernovas 
-                        supernova(False)
+                        supernova(game.quadrant)
                         return
                     else:
                         hits.append(neighbor)
@@ -2804,17 +2804,15 @@
     game.optime = 10.0*game.dist/16.0
     return
 	
-def supernova(induced, w=None):
+def supernova(w):
     "Star goes supernova."
     num = 0; npdead = 0
-    nq = coord()
     if w != None: 
-	nq = w
+	nq = copy.copy(w)
     else:
+	# Scheduled supernova -- select star at random. 
 	stars = 0
-	# Scheduled supernova -- select star 
-	# logic changed here so that we won't favor quadrants in top
-        # left of universe 
+        nq = coord()
 	for nq.i in range(GALSIZE):
 	    for nq.j in range(GALSIZE):
 		stars += game.state.galaxy[nq.i][nq.j].stars
@@ -2860,7 +2858,7 @@
 	    skip(1)
 	    stars()
 	    game.alldone = True
-    # destroy any Klingons in supernovaed quadrant 
+    # destroy any Klingons in supernovaed quadrant
     kldead = game.state.galaxy[nq.i][nq.j].klingons
     game.state.galaxy[nq.i][nq.j].klingons = 0
     if nq == game.state.kscmdr:
@@ -2888,7 +2886,7 @@
     # Destroy any base in supernovaed quadrant
     game.state.baseq = filter(lambda x: x != nq, game.state.baseq)
     # If starship caused supernova, tally up destruction 
-    if induced:
+    if w != None:
 	game.state.starkl += game.state.galaxy[nq.i][nq.j].stars
 	game.state.basekl += game.state.galaxy[nq.i][nq.j].starbase
 	game.state.nplankl += npdead
@@ -2898,7 +2896,7 @@
     # If supernova destroys last Klingons give special message 
     if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem)==0 and not nq == game.quadrant:
 	skip(2)
-	if not induced:
+	if w == None:
 	    prout(_("Lucky you!"))
 	proutn(_("A supernova in %s has just destroyed the last Klingons.") % nq)
 	finish(FWON)
@@ -3947,8 +3945,8 @@
 	    xl = int(round(scanner.real))-1
 	    dquad.i = xi
 	    dquad.j = xj
-	    dsect.j = xk
-	    dsect.i = xl
+	    dsect.i = xk
+	    dsect.j = xl
 	else:
             # only one pair of numbers was specified
 	    if isprobe:
@@ -3958,10 +3956,10 @@
 		dsect.j = dsect.i = 4	# preserves 1-origin behavior
 	    else:
                 # only sector specified
-		dsect.j = xi
-		dsect.i = xj
+		dsect.i = xi
+		dsect.j = xj
 	    itemp = "normal"
-	if not VALID_QUADRANT(dquad.j,dquad.i) or not VALID_SECTOR(dsect.i,dsect.j):
+	if not VALID_QUADRANT(dquad.i,dquad.j) or not VALID_SECTOR(dsect.i,dsect.j):
 	    huh()
 	    return False
 	skip(1)
@@ -3973,8 +3971,8 @@
 		prout(_("Ensign Chekov- \"Course laid in, Captain.\""))
         # the actual deltas get computed here
         delta = coord()
-	delta.i = dquad.j-game.quadrant.j + 0.1*(dsect.i-game.sector.j)
-	delta.j = game.quadrant.i-dquad.i + 0.1*(game.sector.i-dsect.j)
+	delta.i = dquad.j-game.quadrant.j + 0.1*(dsect.j-game.sector.j)
+	delta.j = game.quadrant.i-dquad.i + 0.1*(game.sector.i-dsect.i)
     else: # manual 
 	while key == IHEOL:
 	    proutn(_("X and Y displacements- "))
@@ -6465,11 +6463,11 @@
     scanner.chew()
     while True:
 	scanner.next()
-	scanner.chew()
 	if scanner.token == 'y':
 	    return True
 	if scanner.token == 'n':
 	    return False
+	scanner.chew()
 	proutn(_("Please answer with \"y\" or \"n\": "))
 
 def huh():



From esr at mail.berlios.de  Tue Oct 10 03:56:32 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 03:56:32 +0200
Subject: [Sst-commit-watch] r726 - trunk/src
Message-ID: <200610100156.k9A1uWSY030818@sheep.berlios.de>

Author: esr
Date: 2006-10-10 03:56:31 +0200 (Tue, 10 Oct 2006)
New Revision: 726

Modified:
   trunk/src/sst.py
Log:
Fix translation error that prevented commanders from being hit by torps.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 01:14:36 UTC (rev 725)
+++ trunk/src/sst.py	2006-10-10 01:56:31 UTC (rev 726)
@@ -1345,13 +1345,12 @@
 	    game.sector = jw
 	    proutn(crmshp())
 	    shoved = True
-	elif iquad in (IHC, IHS): # Hit a commander 
+	elif iquad in (IHC, IHS, IHR, IHK): # Hit a regular enemy 
+	    # find the enemy 
 	    if withprob(0.05):
 		prout(crmena(True, iquad, "sector", w) + _(" uses anti-photon device;"))
 		prout(_("   torpedo neutralized."))
 		return None
-	elif iquad in (IHR, IHK): # Hit a regular enemy 
-	    # find the enemy 
             for enemy in game.enemies:
 		if w == enemy.kloc:
 		    break
@@ -2429,12 +2428,14 @@
                 for ibq in game.state.baseq:
                    for cmdr in game.state.kcmdr: 
                        if ibq == cmdr and ibq != game.quadrant and ibq != game.state.kscmdr:
-                           raise "foundit"
-            except "foundit":
-		# no match found -- try later 
-		schedule(FBATTAK, expran(0.3*game.intime))
-		unschedule(FCDBAS)
-		continue
+                           raise ibq
+                else:
+                    # no match found -- try later 
+                    schedule(FBATTAK, expran(0.3*game.intime))
+                    unschedule(FCDBAS)
+                    continue
+            except coord:
+                pass
 	    # commander + starbase combination found -- launch attack 
 	    game.battle = ibq
 	    schedule(FCDBAS, randreal(1.0, 4.0))



From esr at mail.berlios.de  Tue Oct 10 04:09:11 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 04:09:11 +0200
Subject: [Sst-commit-watch] r727 - trunk/src
Message-ID: <200610100209.k9A29Bt4032236@sheep.berlios.de>

Author: esr
Date: 2006-10-10 04:09:10 +0200 (Tue, 10 Oct 2006)
New Revision: 727

Modified:
   trunk/src/sst.py
Log:
Make some constants into strings for better debugging messages.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 01:56:31 UTC (rev 726)
+++ trunk/src/sst.py	2006-10-10 02:09:10 UTC (rev 727)
@@ -227,10 +227,6 @@
 IHMATER1 = 'o',
 IHMATER2 = '0'
 
-IHEOL = '\n'
-IHREAL = 0.0
-IHALPHA = " "
-
 class coord:
     def __init__(self, x=None, y=None):
         self.i = x
@@ -1096,7 +1092,7 @@
 	action = "SHUP"
     else:
 	key = scanner.next()
-	if key == IHALPHA:
+	if key == "IHALPHA":
 	    if scanner.sees("transfer"):
 		action = "NRG"
 	    else:
@@ -1155,7 +1151,7 @@
 	game.ididit = True
 	return
     elif action == "NRG":
-	while scanner.next() != IHREAL:
+	while scanner.next() != "IHREAL":
 	    scanner.chew()
 	    proutn(_("Energy to transfer to shields- "))
 	scanner.chew()
@@ -1759,15 +1755,15 @@
     # First, get torpedo count
     while True:
         scanner.next()
-	if scanner.token == IHALPHA:
+	if scanner.token == "IHALPHA":
 	    huh()
 	    return
-	elif scanner.token == IHEOL or not scanner.waiting():
+	elif scanner.token == "IHEOL" or not scanner.waiting():
 	    prout(_("%d torpedoes left.") % game.torps)
             scanner.chew()
 	    proutn(_("Number of torpedoes to fire- "))
             continue	# Go back around to get a number
-	else: # key == IHREAL
+	else: # key == "IHREAL"
 	    n = scanner.int()
 	    if n <= 0: # abort command 
 		scanner.chew()
@@ -1784,9 +1780,9 @@
     target = []
     for i in range(n):
 	key = scanner.next()
-	if i==0 and key == IHEOL:
+	if i==0 and key == "IHEOL":
 	    break;	# no coordinate waiting, we will try prompting 
-	if i==1 and key == IHEOL:
+	if i==1 and key == "IHEOL":
 	    # direct all torpedoes at one target 
 	    while i < n:
 		target.append(targets[0])
@@ -1965,12 +1961,12 @@
     # (That was Tom Almy talking about the C code, I think -- ESR)
     while automode=="NOTSET":
 	key=scanner.next()
-	if key == IHALPHA:
+	if key == "IHALPHA":
 	    if scanner.sees("manual"):
 		if len(game.enemies)==0:
 		    prout(_("There is no enemy present to select."))
 		    scanner.chew()
-		    key = IHEOL
+		    key = "IHEOL"
 		    automode="AUTOMATIC"
 		else:
 		    automode = "MANUAL"
@@ -1988,7 +1984,7 @@
 	    else:
 		huh()
 		return
-	elif key == IHREAL:
+	elif key == "IHREAL":
 	    if len(game.enemies)==0:
 		prout(_("Energy will be expended into space."))
 		automode = "AUTOMATIC"
@@ -1997,7 +1993,7 @@
 	    else:
 		automode = "AUTOMATIC"
 	else:
-	    # IHEOL 
+	    # "IHEOL" 
 	    if len(game.enemies)==0:
 		prout(_("Energy will be expended into space."))
 		automode = "AUTOMATIC"
@@ -2010,10 +2006,10 @@
     if ifast:
         avail -= 200.0
     if automode == "AUTOMATIC":
-	if key == IHALPHA and scanner.sees("no"):
+	if key == "IHALPHA" and scanner.sees("no"):
 	    no = True
 	    key = scanner.next()
-	if key != IHREAL and len(game.enemies) != 0:
+	if key != "IHREAL" and len(game.enemies) != 0:
 	    prout(_("Phasers locked on target. Energy available: %.2f")%avail)
 	irec=0
         while True:
@@ -2026,13 +2022,13 @@
 	    scanner.chew()
 	    proutn(_("Units to fire= "))
 	    key = scanner.next()
-	    if key!=IHREAL:
+	    if key!="IHREAL":
 		return
 	    rpow = scanner.real
 	    if rpow > avail:
 		proutn(_("Energy available= %.2f") % avail)
 		skip(1)
-		key = IHEOL
+		key = "IHEOL"
             if not rpow > avail:
                 break
 	if rpow<=0:
@@ -2040,7 +2036,7 @@
 	    scanner.chew()
 	    return
         key=scanner.next()
-	if key == IHALPHA and scanner.sees("no"):
+	if key == "IHALPHA" and scanner.sees("no"):
 	    no = True
 	if ifast:
 	    game.energy -= 200; # Go and do it! 
@@ -2079,7 +2075,7 @@
 		prout(_("%d expended on empty space.") % int(extra))
     elif automode == "FORCEMAN":
 	scanner.chew()
-	key = IHEOL
+	key = "IHEOL"
 	if damaged(DCOMPTR):
 	    prout(_("Battle computer damaged, manual fire only."))
 	else:
@@ -2104,11 +2100,11 @@
                not game.sector.distance(aim)<2**0.5 and ienm in (IHC, IHS):
 		prout(cramen(ienm) + _(" can't be located without short range scan."))
 		scanner.chew()
-		key = IHEOL
+		key = "IHEOL"
 		hits[k] = 0; # prevent overflow -- thanks to Alexei Voitenko 
 		k += 1
 		continue
-	    if key == IHEOL:
+	    if key == "IHEOL":
 		scanner.chew()
 		if itarg and k > kz:
 		    irec=(abs(game.enemies[k].kpower)/(PHASEFAC*math.pow(0.9,game.enemies[k].kdist))) *	randreal(1.01, 1.06) + 1.0
@@ -2121,14 +2117,14 @@
 		proutn(")  ")
 		proutn(_("units to fire at %s-  ") % crmena(False, ienm, "sector", aim))		
 		key = scanner.next()
-	    if key == IHALPHA and scanner.sees("no"):
+	    if key == "IHALPHA" and scanner.sees("no"):
 		no = True
 		key = scanner.next()
 		continue
-	    if key == IHALPHA:
+	    if key == "IHALPHA":
 		huh()
 		return
-	    if key == IHEOL:
+	    if key == "IHEOL":
 		if k==1: # Let me say I'm baffled by this 
 		    msgflag = True
 		continue
@@ -2149,7 +2145,7 @@
 	    # zero energy -- abort 
 	    scanner.chew()
 	    return
-	if key == IHALPHA and scanner.sees("no"):
+	if key == "IHALPHA" and scanner.sees("no"):
 	    no = True
 	game.energy -= rpow
 	scanner.chew()
@@ -2624,11 +2620,11 @@
     game.ididit = False
     while True:
 	key = scanner.next()
-	if key  != IHEOL:
+	if key  != "IHEOL":
 	    break
 	proutn(_("How long? "))
     scanner.chew()
-    if key != IHREAL:
+    if key != "IHREAL":
 	huh()
 	return
     origTime = delay = scanner.real
@@ -3885,7 +3881,7 @@
 		prout(_("Computer damaged; manual movement only"))
 	    scanner.chew()
 	    navmode = "manual"
-	    key = IHEOL
+	    key = "IHEOL"
 	    break
 	if isprobe and akey != -1:
 	    # For probe launch, use pre-scanned value first time 
@@ -3893,11 +3889,11 @@
 	    akey = -1
 	else: 
 	    key = scanner.next()
-	if key == IHEOL:
+	if key == "IHEOL":
 	    proutn(_("Manual or automatic- "))
 	    iprompt = True
 	    scanner.chew()
-	elif key == IHALPHA:
+	elif key == "IHALPHA":
             if scanner.sees("manual"):
 		navmode = "manual"
 		key = scanner.next()
@@ -3918,7 +3914,7 @@
 	    navmode = "manual"
 	    break
     if navmode == "automatic":
-	while key == IHEOL:
+	while key == "IHEOL":
 	    if isprobe:
 		proutn(_("Target quadrant or quadrant&sector- "))
 	    else:
@@ -3926,21 +3922,21 @@
 	    scanner.chew()
 	    iprompt = True
 	    key = scanner.next()
-	if key != IHREAL:
+	if key != "IHREAL":
 	    huh()
 	    return False
 	xi = int(round(scanner.real))-1
 	key = scanner.next()
-	if key != IHREAL:
+	if key != "IHREAL":
 	    huh()
 	    return False
 	xj = int(round(scanner.real))-1
 	key = scanner.next()
-	if key == IHREAL:
+	if key == "IHREAL":
 	    # both quadrant and sector specified 
 	    xk = int(round(scanner.real))-1
 	    key = scanner.next()
-	    if key != IHREAL:
+	    if key != "IHREAL":
 		huh()
 		return False
 	    xl = int(round(scanner.real))-1
@@ -3975,18 +3971,18 @@
 	delta.i = dquad.j-game.quadrant.j + 0.1*(dsect.j-game.sector.j)
 	delta.j = game.quadrant.i-dquad.i + 0.1*(game.sector.i-dsect.i)
     else: # manual 
-	while key == IHEOL:
+	while key == "IHEOL":
 	    proutn(_("X and Y displacements- "))
 	    scanner.chew()
 	    iprompt = True
 	    key = scanner.next()
 	itemp = "verbose"
-	if key != IHREAL:
+	if key != "IHREAL":
 	    huh()
 	    return False
 	delta.j = scanner.real
 	key = scanner.next()
-	if key != IHREAL:
+	if key != "IHREAL":
 	    huh()
 	    return False
 	delta.i = scanner.real
@@ -4170,12 +4166,12 @@
     "Change the warp factor."
     while True:
         key=scanner.next()
-        if key != IHEOL:
+        if key != "IHEOL":
             break
 	scanner.chew()
 	proutn(_("Warp factor- "))
     scanner.chew()
-    if key != IHREAL:
+    if key != "IHREAL":
 	huh()
 	return
     if game.damage[DWARPEN] > 10.0:
@@ -4363,7 +4359,7 @@
 	    prout(_("Uhura- \"The previous probe is still reporting data, Sir.\""))
 	return
     key = scanner.next()
-    if key == IHEOL:
+    if key == "IHEOL":
 	# slow mode, so let Kirk know how many probes there are left
         if game.nprobes == 1:
             prout(_("1 probe left."))
@@ -4373,10 +4369,10 @@
 	if ja() == False:
 	    return
     game.isarmed = False
-    if key == IHALPHA and scanner.token == "armed":
+    if key == "IHALPHA" and scanner.token == "armed":
 	game.isarmed = True
 	key = scanner.next()
-    elif key == IHEOL:
+    elif key == "IHEOL":
 	proutn(_("Arm NOVAMAX warhead? "))
 	game.isarmed = ja()
     if not getcourse(isprobe=True, akey=key):
@@ -5328,7 +5324,7 @@
 def request():
     "Request specified status data, a historical relic from slow TTYs."
     requests = ("da","co","po","ls","wa","en","to","sh","kl","sy", "ti")
-    while scanner.next() == IHEOL:
+    while scanner.next() == "IHEOL":
 	proutn(_("Information desired? "))
     scanner.chew()
     if scanner.token in requests:
@@ -5372,21 +5368,21 @@
 	prout(_("COMPUTER DAMAGED, USE A POCKET CALCULATOR."))
 	skip(1)
 	return
-    if scanner.next() != IHREAL:
+    if scanner.next() != "IHREAL":
 	prompt = True
 	scanner.chew()
 	proutn(_("Destination quadrant and/or sector? "))
-	if scanner.next()!=IHREAL:
+	if scanner.next()!="IHREAL":
 	    huh()
 	    return
     w1.j = int(scanner.real-0.5)
-    if scanner.next() != IHREAL:
+    if scanner.next() != "IHREAL":
 	huh()
 	return
     w1.i = int(scanner.real-0.5)
-    if scanner.next() == IHREAL:
+    if scanner.next() == "IHREAL":
 	w2.j = int(scanner.real-0.5)
-	if scanner.next() != IHREAL:
+	if scanner.next() != "IHREAL":
 	    huh()
 	    return
 	w2.i = int(scanner.real-0.5)
@@ -5410,7 +5406,7 @@
     while True:
 	scanner.chew()
 	proutn(_("Time or arrival date? "))
-	if scanner.next()==IHREAL:
+	if scanner.next()=="IHREAL":
 	    ttime = scanner.real
 	    if ttime > game.state.date:
 		ttime -= game.state.date # Actually a star date
@@ -5424,7 +5420,7 @@
 	    break
 	scanner.chew()
 	proutn(_("Warp factor? "))
-	if scanner.next()== IHREAL:
+	if scanner.next()== "IHREAL":
 	    wfl = True
 	    twarp = scanner.real
 	    if twarp<1.0 or twarp > 10.0:
@@ -5442,7 +5438,7 @@
 		if not wfl:
 		    return
 		proutn(_("New warp factor to try? "))
-		if scanner.next() == IHREAL:
+		if scanner.next() == "IHREAL":
 		    wfl = True
 		    twarp = scanner.real
 		    if twarp<1.0 or twarp > 10.0:
@@ -5475,7 +5471,7 @@
 	    (scheduled(FCDBAS)<ttime+game.state.date and game.battle == w1):
 	    prout(_("The starbase there will be destroyed by then."))
 	proutn(_("New warp factor to try? "))
-	if scanner.next() == IHREAL:
+	if scanner.next() == "IHREAL":
 	    wfl = True
 	    twarp = scanner.real
 	    if twarp<1.0 or twarp > 10.0:
@@ -5503,10 +5499,10 @@
 	scanner.token = "emsave.trk"
     else:
         key = scanner.next()
-	if key == IHEOL:
+	if key == "IHEOL":
 	    proutn(_("File name: "))
 	    key = scanner.next()
-	if key != IHALPHA:
+	if key != "IHALPHA":
 	    huh()
 	    return
 	scanner.chew()
@@ -5524,10 +5520,10 @@
     "Retrieve saved game." 
     game.passwd[0] = '\0'
     key = scanner.next()
-    if key == IHEOL:
+    if key == "IHEOL":
 	proutn(_("File name: "))
 	key = scanner.next()
-    if key != IHALPHA:
+    if key != "IHALPHA":
 	huh()
 	return True
     scanner.chew()
@@ -5825,7 +5821,7 @@
 	if len(scanner.token)==0: # Try again
 	    continue
         if scanner.sees("tournament"):
-	    while scanner.next() == IHEOL:
+	    while scanner.next() == "IHEOL":
 		proutn(_("Type in tournament number-"))
 	    if scanner.real == 0:
 		scanner.chew()
@@ -5851,7 +5847,7 @@
 	proutn(_("What is \"%s\"?") % scanner.token)
 	scanner.chew()
     while game.length==0 or game.skill==SKILL_NONE:
-	if scanner.next() == IHALPHA:
+	if scanner.next() == "IHALPHA":
             if scanner.sees("short"):
 		game.length = 1
 	    elif scanner.sees("medium"):
@@ -5879,7 +5875,7 @@
 	    elif game.skill == SKILL_NONE:
 		proutn(_("Are you a Novice, Fair, Good, Expert, or Emeritus player? "))
     # Choose game options -- added by ESR for SST2K
-    if scanner.next() != IHALPHA:
+    if scanner.next() != "IHALPHA":
 	scanner.chew()
 	proutn(_("Choose your game style (or just press enter): "))
 	scanner.next()
@@ -6128,18 +6124,18 @@
     "Browse on-line help."
     key = scanner.next()
     while True:
-	if key == IHEOL:
+	if key == "IHEOL":
 	    setwnd(prompt_window)
 	    proutn(_("Help on what command? "))
 	    key = scanner.next()
 	setwnd(message_window)
-	if key == IHEOL:
+	if key == "IHEOL":
 	    return
         if scanner.token in commands or scanner.token == "ABBREV":
 	    break
 	skip(1)
 	listCommands()
-	key = IHEOL
+	key = "IHEOL"
 	scanner.chew()
 	skip(1)
     cmd = scanner.token.upper()
@@ -6194,7 +6190,7 @@
 	    setwnd(prompt_window)
 	    clrscr()
 	    proutn("COMMAND> ")
-	    if scanner.next() == IHEOL:
+	    if scanner.next() == "IHEOL":
 		if game.options & OPTION_CURSES:
 		    makechart()
 		continue
@@ -6410,23 +6406,23 @@
             if not line:
                 continue
             else:
-                self.inqueue = line.lstrip().split() + [IHEOL] 
+                self.inqueue = line.lstrip().split() + ["IHEOL"] 
         # From here on in it's all looking at the queue
         self.token = self.inqueue.pop(0)
-        if self.token == IHEOL:
-            self.type = IHEOL
-            return IHEOL
+        if self.token == "IHEOL":
+            self.type = "IHEOL"
+            return "IHEOL"
         try:
             self.real = float(self.token)
-            self.type = IHREAL
-            return IHREAL
+            self.type = "IHREAL"
+            return "IHREAL"
         except ValueError:
             pass
         # Treat as alpha
         self.token = self.token.lower()
-        self.type = IHALPHA
+        self.type = "IHALPHA"
         self.real = None
-        return IHALPHA
+        return "IHALPHA"
     def push(self, tok):
         self.inqueue.append(tok)
     def waiting(self):
@@ -6436,8 +6432,8 @@
         self.inqueue = []
         self.real = self.token = None
     def chew2(self):
-        # return IHEOL next time 
-        self.inqueue = [IHEOL]
+        # return "IHEOL" next time 
+        self.inqueue = ["IHEOL"]
         self.real = self.token = None
     def sees(self, s):
         # compares s to item and returns true if it matches to the length of s
@@ -6448,16 +6444,18 @@
     def getcoord(self):
         s = coord()
         scanner.next()
-    	if scanner.type != IHREAL:
+    	if scanner.type != "IHREAL":
 	    huh()
 	    return None
 	s.i = scanner.int()-1
         scanner.next()
-	if scanner.type != IHREAL:
+	if scanner.type != "IHREAL":
 	    huh()
 	    return None
 	s.j = scanner.int()-1
         return s
+    def __repr__(str):
+        return "<sstcanner: token=%s, type=%s, queue=%s>" % (scanner.token, scanner.type, scanner.inqueue)
 
 def ja():
     "Yes-or-no confirmation."
@@ -6504,7 +6502,7 @@
 	    proutn("Kill %s?" % device[i])
 	    scanner.chew()
 	    key = scanner.next()
-            if key == IHALPHA and scanner.sees("y"):
+            if key == "IHALPHA" and scanner.sees("y"):
 		game.damage[i] = 10.0
     proutn("Examine/change events? ")
     if ja() == True:
@@ -6538,21 +6536,21 @@
 	    if key == 'n':
 		unschedule(i)
 		scanner.chew()
-	    elif key == IHREAL:
+	    elif key == "IHREAL":
 		ev = schedule(i, scanner.real)
 		if i == FENSLV or i == FREPRO:
 		    scanner.chew()
 		    proutn("In quadrant- ")
 		    key = scanner.next()
-		    # IHEOL says to leave coordinates as they are 
-		    if key != IHEOL:
-			if key != IHREAL:
+		    # "IHEOL" says to leave coordinates as they are 
+		    if key != "IHEOL":
+			if key != "IHREAL":
 			    prout("Event %d canceled, no x coordinate." % (i))
 			    unschedule(i)
 			    continue
 			w.i = int(round(scanner.real))
 			key = scanner.next()
-			if key != IHREAL:
+			if key != "IHREAL":
 			    prout("Event %d canceled, no y coordinate." % (i))
 			    unschedule(i)
 			    continue



From esr at mail.berlios.de  Tue Oct 10 04:18:10 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 04:18:10 +0200
Subject: [Sst-commit-watch] r728 - trunk/src
Message-ID: <200610100218.k9A2IAUE000416@sheep.berlios.de>

Author: esr
Date: 2006-10-10 04:18:09 +0200 (Tue, 10 Oct 2006)
New Revision: 728

Modified:
   trunk/src/sst.py
Log:
Get rid of a duplicative variable.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 02:09:10 UTC (rev 727)
+++ trunk/src/sst.py	2006-10-10 02:18:09 UTC (rev 728)
@@ -4090,7 +4090,7 @@
 	    return
 						
 	# Make sure enough time is left for the trip 
-	game.optime = 10.0*game.dist/game.wfacsq
+	game.optime = 10.0*game.dist/game.warpfac**2
 	if game.optime >= 0.8*game.state.remtime:
 	    skip(1)
 	    prout(_("First Officer Spock- \"Captain, I compute that such"))
@@ -4150,7 +4150,7 @@
     game.energy -= game.dist*game.warpfac*game.warpfac*game.warpfac*(game.shldup+1)
     if game.energy <= 0:
 	finish(FNRG)
-    game.optime = 10.0*game.dist/game.wfacsq
+    game.optime = 10.0*game.dist/game.warpfac**2
     if twarp:
 	timwrp()
     if blooey:
@@ -4189,7 +4189,6 @@
 	return
     oldfac = game.warpfac
     game.warpfac = scanner.real
-    game.wfacsq=game.warpfac*game.warpfac
     if game.warpfac <= oldfac or game.warpfac <= 6.0:
 	prout(_("Helmsman Sulu- \"Warp factor %d, Captain.\"") %
 	       int(game.warpfac))
@@ -4257,14 +4256,13 @@
 	    finish(FSNOVAED)
 	    return
 	game.warpfac = randreal(6.0, 8.0)
-	game.wfacsq = game.warpfac * game.warpfac
 	prout(_("Warp factor set to %d") % int(game.warpfac))
 	power = 0.75*game.energy
 	game.dist = power/(game.warpfac*game.warpfac*game.warpfac*(game.shldup+1))
 	distreq = randreal(math.sqrt(2))
 	if distreq < game.dist:
 	    game.dist = distreq
-	game.optime = 10.0*game.dist/game.wfacsq
+	game.optime = 10.0*game.dist/game.warpfac**2
 	game.direc = randreal(12)	# How dumb! 
 	game.justin = False
 	game.inorbit = False
@@ -4601,7 +4599,6 @@
     game.lsupres=game.inlsr=3.0
     game.shldup=False
     game.warpfac=5.0
-    game.wfacsq=25.0
     return
 
 # Code from planets.c begins here.
@@ -5616,13 +5613,11 @@
     if choose():
 	return # frozen game
     # Prepare the Enterprise
-    game.alldone = game.gamewon = False
+    game.alldone = game.gamewon = game.shldchg = game.shldup = False
     game.ship = IHE
     game.state.crew = FULLCREW
     game.energy = game.inenrg = 5000.0
     game.shield = game.inshld = 2500.0
-    game.shldchg = False
-    game.shldup = False
     game.inlsr = 4.0
     game.lsupres = 4.0
     game.quadrant = randplace(GALSIZE)
@@ -5630,7 +5625,6 @@
     game.torps = game.intorps = 10
     game.nprobes = randrange(2, 5)
     game.warpfac = 5.0
-    game.wfacsq = game.warpfac * game.warpfac
     for i in range(NDEVICES): 
 	game.damage[i] = 0.0
     # Set up assorted game parameters



From esr at mail.berlios.de  Tue Oct 10 08:21:56 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 08:21:56 +0200
Subject: [Sst-commit-watch] r729 - trunk/src
Message-ID: <200610100621.k9A6LuMg027261@sheep.berlios.de>

Author: esr
Date: 2006-10-10 08:21:55 +0200 (Tue, 10 Oct 2006)
New Revision: 729

Modified:
   trunk/src/sst.py
Log:
Simplify tac movement, handle more torpedo input cases correctly.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 02:18:09 UTC (rev 728)
+++ trunk/src/sst.py	2006-10-10 06:21:55 UTC (rev 729)
@@ -755,10 +755,7 @@
             else:
                 motion = game.skill
     # calculate preferred number of steps 
-    if motion < 0:
-        nsteps = -motion
-    else:
-        nsteps = motion
+    nsteps = abs(int(motion))
     if motion > 0 and nsteps > mdist:
 	nsteps = mdist; # don't overshoot 
     if nsteps > QUADSIZE:
@@ -773,16 +770,7 @@
 	m.i = 0
     if 2.0 * abs(m.j) < abs(game.sector.i-enemy.kloc.i):
 	m.j = 0
-    if m.i != 0:
-        if m.i*motion < 0:
-            m.i = -1
-        else:
-            m.i = 1
-    if m.j != 0:
-        if m.j*motion < 0:
-            m.j = -1
-        else:
-            m.j = 1
+    m = (motion * m).sgn()
     next = enemy.kloc
     # main move loop 
     for ll in range(nsteps):
@@ -1285,6 +1273,10 @@
 
 def torpedo(origin, course, dispersion, number, nburst):
     "Let a photon torpedo fly" 
+    if not damaged(DSRSENS) or game.condition=="docked":
+	setwnd(srscan_window)
+    else: 
+	setwnd(message_window)
     shoved = False
     ac = course + 0.25*dispersion
     angle = (15.0-ac)*0.5235988
@@ -1292,17 +1284,12 @@
     delta = coord(-math.sin(angle), math.cos(angle))          
     bigger = max(abs(delta.i), abs(delta.j))
     delta /= bigger
-    x = origin.i; y = origin.j
     w = coord(0, 0); jw = coord(0, 0)
-    if not damaged(DSRSENS) or game.condition=="docked":
-	setwnd(srscan_window)
-    else: 
-	setwnd(message_window)
+    ungridded = copy.copy(origin)
     # Loop to move a single torpedo 
-    for step in range(1, 15+1):
-	x += delta.i
-	y += delta.j
-	w = coord(x, y).snaptogrid()
+    for step in range(1, QUADSIZE*2):
+	ungridded += delta
+	w = ungridded.snaptogrid()
 	if not VALID_SECTOR(w.i, w.j):
 	    break
 	iquad=game.quad[w.i][w.j]
@@ -1785,19 +1772,19 @@
 	if i==1 and key == "IHEOL":
 	    # direct all torpedoes at one target 
 	    while i < n:
-		target.append(targets[0])
+		target.append(target[0])
 		course.append(course[0])
 		i += 1
 	    break
-        scanner.push(key)
+        scanner.push(scanner.token)
         target.append(scanner.getcoord())
         if target[-1] == None:
             return
-        course.append(targetcheck(target[1]))
-        if course[i] == None:
+        course.append(targetcheck(target[-1]))
+        if course[-1] == None:
 	    return
     scanner.chew()
-    if i == 0:
+    if len(target) == 0:
 	# prompt for each one 
 	for i in range(n):
 	    proutn(_("Target sector for torpedo number %d- ") % (i+1))
@@ -6395,8 +6382,6 @@
                 clrscr()
             if line == '':
                 return None
-            # Skip leading white space
-            line = line.lstrip()
             if not line:
                 continue
             else:
@@ -6417,8 +6402,10 @@
         self.type = "IHALPHA"
         self.real = None
         return "IHALPHA"
-    def push(self, tok):
+    def append(self, tok):
         self.inqueue.append(tok)
+    def push(self, tok):
+        self.inqueue.insert(0, tok)
     def waiting(self):
         return self.inqueue
     def chew(self):
@@ -6611,7 +6598,7 @@
             logfp.write("# options %s\n" % " ".join(arguments))
         random.seed(seed)
         scanner = sstscanner()
-        map(scanner.push, arguments)
+        map(scanner.append, arguments)
         try:
             iostart()
             while True: # Play a game 
@@ -6642,5 +6629,5 @@
             ioend()
         raise SystemExit, 0
     except KeyboardInterrupt:
-        print""
+        print ""
         pass



From esr at mail.berlios.de  Tue Oct 10 09:06:47 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 09:06:47 +0200
Subject: [Sst-commit-watch] r730 - trunk/src
Message-ID: <200610100706.k9A76lPh031373@sheep.berlios.de>

Author: esr
Date: 2006-10-10 09:06:46 +0200 (Tue, 10 Oct 2006)
New Revision: 730

Modified:
   trunk/src/sst.py
Log:
Time to make curses work.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 06:21:55 UTC (rev 729)
+++ trunk/src/sst.py	2006-10-10 07:06:46 UTC (rev 730)
@@ -1573,7 +1573,7 @@
 	    hit = enemy.kpower*math.pow(dustfac,enemy.kavgd)
 	    enemy.kpower *= 0.75
 	else: # Enemy uses photon torpedo 
-	    #course2 = (enemy.kloc-game.sector).bearing()
+	    # We should be able to make the bearing() method work here
 	    course = 1.90985*math.atan2(game.sector.j-enemy.kloc.j, enemy.kloc.i-game.sector.i)
 	    hit = 0
 	    proutn(_("***TORPEDO INCOMING"))
@@ -6552,11 +6552,10 @@
         game = gamestate()
         idebug = 0
         game.options = OPTION_ALL &~ (OPTION_IOMODES | OPTION_PLAIN | OPTION_ALMY)
-        # Disable curses mode until the game logic is working.
-        #    if os.getenv("TERM"):
-        #	game.options |= OPTION_CURSES | OPTION_SHOWME
-        #    else:
-        game.options |= OPTION_TTY
+        if os.getenv("TERM"):
+            game.options |= OPTION_CURSES
+        else:
+            game.options |= OPTION_TTY
         seed = int(time.time())
         (options, arguments) = getopt.getopt(sys.argv[1:], "r:s:tx")
         for (switch, val) in options:



From esr at mail.berlios.de  Tue Oct 10 09:22:58 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 09:22:58 +0200
Subject: [Sst-commit-watch] r731 - trunk/src
Message-ID: <200610100722.k9A7Mw2p000535@sheep.berlios.de>

Author: esr
Date: 2006-10-10 09:22:57 +0200 (Tue, 10 Oct 2006)
New Revision: 731

Modified:
   trunk/src/sst.py
Log:
Don't try to do color initialization in Python yet, direct C
translation of that code doesn't work.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 07:06:46 UTC (rev 730)
+++ trunk/src/sst.py	2006-10-10 07:22:57 UTC (rev 731)
@@ -3353,19 +3353,9 @@
     else:
 	stdscr = curses.initscr()
 	stdscr.keypad(True)
-	#saveterm()
 	curses.nonl()
 	curses.cbreak()
         curses.start_color()
-        curses.init_pair(curses.COLOR_BLACK, curses.COLOR_BLACK, curses.COLOR_BLACK)
-        curses.init_pair(curses.COLOR_GREEN, curses.COLOR_GREEN, curses.COLOR_BLACK)
-        curses.init_pair(curses.COLOR_RED, curses.COLOR_RED, curses.COLOR_BLACK)
-        curses.init_pair(curses.COLOR_CYAN, curses.COLOR_CYAN, curses.COLOR_BLACK)
-        curses.init_pair(curses.COLOR_WHITE, curses.COLOR_WHITE, curses.COLOR_BLACK)
-        curses.init_pair(curses.COLOR_MAGENTA, curses.COLOR_MAGENTA, curses.COLOR_BLACK)
-        curses.init_pair(curses.COLOR_BLUE, curses.COLOR_BLUE, curses.COLOR_BLACK)
-        curses.init_pair(curses.COLOR_YELLOW, curses.COLOR_YELLOW, curses.COLOR_BLACK)
-	#noecho()
         global fullscreen_window, srscan_window, report_window, status_window
         global lrscan_window, message_window, prompt_window
         (rows, columns)   = stdscr.getmaxyx()



From esr at mail.berlios.de  Tue Oct 10 09:41:34 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 09:41:34 +0200
Subject: [Sst-commit-watch] r732 - trunk/src
Message-ID: <200610100741.k9A7fYw8002262@sheep.berlios.de>

Author: esr
Date: 2006-10-10 09:41:34 +0200 (Tue, 10 Oct 2006)
New Revision: 732

Modified:
   trunk/src/sst.py
Log:
Atexit was screwing up the Python curses bindings. Weird.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 07:22:57 UTC (rev 731)
+++ trunk/src/sst.py	2006-10-10 07:41:34 UTC (rev 732)
@@ -3323,27 +3323,8 @@
 prompt_window     = None
 curwnd = None
 
-def outro():
-    "Wrap up, either normally or due to signal"
-    if game.options & OPTION_CURSES:
-	#clear()
-	#curs_set(1)
-	#refresh()
-	#resetterm()
-	#echo()
-	curses.endwin()
-	sys.stdout.write('\n')
-    if logfp:
-	logfp.close()
-
 def iostart():
     global stdscr, rows
-    #setlocale(LC_ALL, "")
-    #bindtextdomain(PACKAGE, LOCALEDIR)
-    #textdomain(PACKAGE)
-    if atexit.register(outro):
-	sys.stderr.write("Unable to register outro(), exiting...\n")
-	raise SysExit,1
     if not (game.options & OPTION_CURSES):
 	ln_env = os.getenv("LINES")
         if ln_env:
@@ -3355,7 +3336,6 @@
 	stdscr.keypad(True)
 	curses.nonl()
 	curses.cbreak()
-        curses.start_color()
         global fullscreen_window, srscan_window, report_window, status_window
         global lrscan_window, message_window, prompt_window
         (rows, columns)   = stdscr.getmaxyx()
@@ -3368,20 +3348,18 @@
 	prompt_window     = curses.newwin(1,  0,  rows-2,  0) 
 	message_window.scrollok(True)
 	setwnd(fullscreen_window)
-	textcolor(DEFAULT)
 
-def textcolor(color):
-    "Set text foreground color.  Presently a stub."
-    pass	# FIXME
-
 def ioend():
     "Wrap up I/O.  Presently a stub."
-    pass
+    stdscr.keypad(False)
+    curses.echo()
+    curses.nocbreak()
+    curses.endwin()
 
 def waitfor():
     "Wait for user action -- OK to do nothing if on a TTY"
     if game.options & OPTION_CURSES:
-	stsdcr.getch()
+	stdscr.getch()
 
 def announce():
     skip(1)
@@ -4442,13 +4420,13 @@
 	elif m == 3: proutn(_("3rd"))
 	proutn(_(" attempt to re-materialize ") + crmshp())
 	game.quad[ix][iy]=(IHMATER0,IHMATER1,IHMATER2)[m-1]
-	textcolor("red")
+	#textcolor("red")
 	warble()
 	if randreal() > probf:
 	    break
 	prout(_("fails."))
 	curses.delay_output(500)
-	textcolor(None)
+	#textcolor(None)
     if m > 3:
 	game.quad[ix][iy]=IHQUEST
 	game.alive = False
@@ -4457,9 +4435,9 @@
 	finish(FMATERIALIZE)
 	return
     game.quad[ix][iy]=game.ship
-    textcolor("green")
+    #textcolor("green")
     prout(_("succeeds."))
-    textcolor(None)
+    #textcolor(None)
     dock(False)
     skip(1)
     prout(_("Lt. Uhura-  \"Captain, we made it!\""))
@@ -5227,15 +5205,15 @@
     "Light up an individual dot in a sector."
     if goodScan or (abs(i-game.sector.i)<= 1 and abs(j-game.sector.j) <= 1):
 	if (game.quad[i][j]==IHMATER0) or (game.quad[i][j]==IHMATER1) or (game.quad[i][j]==IHMATER2) or (game.quad[i][j]==IHE) or (game.quad[i][j]==IHF):
-	    if game.condition   == "red": textcolor("red")
-	    elif game.condition == "green": textcolor("green")
-	    elif game.condition == "yellow": textcolor("yellow")
-	    elif game.condition == "docked": textcolor("cyan")
-	    elif game.condition == "dead": textcolor("brown")
+	    #if game.condition   == "red": textcolor("red")
+	    #elif game.condition == "green": textcolor("green")
+	    #elif game.condition == "yellow": textcolor("yellow")
+	    #elif game.condition == "docked": textcolor("cyan")
+	    #elif game.condition == "dead": textcolor("brown")
 	    if game.quad[i][j] != game.ship: 
 		highvideo()
 	proutn("%c " % game.quad[i][j])
-	textcolor(None)
+	#textcolor(None)
     else:
 	proutn("- ")
 
@@ -6618,5 +6596,7 @@
             ioend()
         raise SystemExit, 0
     except KeyboardInterrupt:
+        if logfp:
+            logfp.close()
         print ""
         pass



From esr at mail.berlios.de  Tue Oct 10 09:57:49 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 09:57:49 +0200
Subject: [Sst-commit-watch] r733 - trunk/src
Message-ID: <200610100757.k9A7vnTZ003492@sheep.berlios.de>

Author: esr
Date: 2006-10-10 09:57:49 +0200 (Tue, 10 Oct 2006)
New Revision: 733

Modified:
   trunk/src/sst.py
Log:
curses interface seems to work!


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 07:41:34 UTC (rev 732)
+++ trunk/src/sst.py	2006-10-10 07:57:49 UTC (rev 733)
@@ -3400,7 +3400,10 @@
 		pause_game()
 		clrscr()
 	    else:
-		proutn("\n")
+                try:
+                    curwnd.move(y+1, 0)
+                except curses.error:
+                    pass
 	else:
             global linecount
 	    linecount += 1
@@ -5311,7 +5314,7 @@
 	for j in range(QUADSIZE):
 	    sectscan(goodScan, i, j)
 	skip(1)
-			
+		
 def eta():
     "Use computer to get estimated time of arrival for a warp jump."
     w1 = coord(); w2 = coord()



From esr at mail.berlios.de  Tue Oct 10 10:21:00 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 10:21:00 +0200
Subject: [Sst-commit-watch] r734 - trunk/src
Message-ID: <200610100821.k9A8L0A8005816@sheep.berlios.de>

Author: esr
Date: 2006-10-10 10:20:59 +0200 (Tue, 10 Oct 2006)
New Revision: 734

Modified:
   trunk/src/sst.py
Log:
Fix listCommands.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 07:57:49 UTC (rev 733)
+++ trunk/src/sst.py	2006-10-10 08:20:59 UTC (rev 734)
@@ -6064,12 +6064,14 @@
 
 def listCommands():
     "Generate a list of legal commands."
-    proutn(_("LEGAL COMMANDS ARE:"))
-    for (k, key) in enumerate(commands):
+    prout(_("LEGAL COMMANDS ARE:"))
+    emitted = 0
+    for key in commands:
 	if not commands[key] or (commands[key] & game.options):
-            if k % 5 == 0:
+            proutn("%-12s " % key)
+            emitted += 1
+            if emitted % 5 == 4:
                 skip(1)
-            proutn("%-12s " % key) 
     skip(1)
 
 def helpme():



From esr at mail.berlios.de  Tue Oct 10 10:38:34 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 10:38:34 +0200
Subject: [Sst-commit-watch] r735 - trunk/src
Message-ID: <200610100838.k9A8cYtR007365@sheep.berlios.de>

Author: esr
Date: 2006-10-10 10:38:33 +0200 (Tue, 10 Oct 2006)
New Revision: 735

Modified:
   trunk/src/sst.py
Log:
Unscramble some of the trig-formula mess.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 08:20:59 UTC (rev 734)
+++ trunk/src/sst.py	2006-10-10 08:38:33 UTC (rev 735)
@@ -256,7 +256,7 @@
         return math.sqrt((self.i - other.i)**2 + (self.j - other.j)**2)
     def bearing(self, other=None):
         if not other: other = coord(0, 0)
-        return 1.90985*math.atan2(self.i-other.i, self.j-other.j)
+        return 1.90985*math.atan2(self.j-other.j, self.i-other.i)
     def sgn(self):
         s = coord()
         if self.i == 0:
@@ -1330,7 +1330,7 @@
 	    shoved = True
 	elif iquad in (IHC, IHS, IHR, IHK): # Hit a regular enemy 
 	    # find the enemy 
-	    if withprob(0.05):
+	    if iquad in (IHC, IHS) and withprob(0.05):
 		prout(crmena(True, iquad, "sector", w) + _(" uses anti-photon device;"))
 		prout(_("   torpedo neutralized."))
 		return None
@@ -1725,7 +1725,7 @@
 	prout(_("  the Captain's psychological profile.\""))
 	scanner.chew()
 	return None
-    return 1.90985932*math.atan2(delta.j, delta.i)
+    return delta.bearing()
 
 def photon():
     "Launch photon torpedo."
@@ -3926,8 +3926,8 @@
 		prout(_("Ensign Chekov- \"Course laid in, Captain.\""))
         # the actual deltas get computed here
         delta = coord()
-	delta.i = dquad.j-game.quadrant.j + 0.1*(dsect.j-game.sector.j)
-	delta.j = game.quadrant.i-dquad.i + 0.1*(game.sector.i-dsect.i)
+	delta.j = dquad.j-game.quadrant.j + 0.1*(dsect.j-game.sector.j)
+	delta.i = game.quadrant.i-dquad.i + 0.1*(game.sector.i-dsect.i)
     else: # manual 
 	while key == "IHEOL":
 	    proutn(_("X and Y displacements- "))



From esr at mail.berlios.de  Tue Oct 10 10:51:43 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 10:51:43 +0200
Subject: [Sst-commit-watch] r736 - trunk/src
Message-ID: <200610100851.k9A8phD9008481@sheep.berlios.de>

Author: esr
Date: 2006-10-10 10:51:43 +0200 (Tue, 10 Oct 2006)
New Revision: 736

Modified:
   trunk/src/sst.py
Log:
Fix range error in Tholian movement.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 08:38:33 UTC (rev 735)
+++ trunk/src/sst.py	2006-10-10 08:51:43 UTC (rev 736)
@@ -1057,11 +1057,11 @@
     for i in range(QUADSIZE):
 	if game.quad[0][i]!=IHWEB and game.quad[0][i]!=IHT:
 	    return
-	if game.quad[QUADSIZE][i]!=IHWEB and game.quad[QUADSIZE][i]!=IHT:
+	if game.quad[QUADSIZE-1][i]!=IHWEB and game.quad[QUADSIZE-1][i]!=IHT:
 	    return
 	if game.quad[i][0]!=IHWEB and game.quad[i][0]!=IHT:
 	    return
-	if game.quad[i][QUADSIZE]!=IHWEB and game.quad[i][QUADSIZE]!=IHT:
+	if game.quad[i][QUADSIZE-1]!=IHWEB and game.quad[i][QUADSIZE-1]!=IHT:
 	    return
     # All plugged up -- Tholian splits 
     game.quad[game.tholian.kloc.i][game.tholian.kloc.j]=IHWEB
@@ -3432,7 +3432,7 @@
             time.sleep(0.03)
 	proutn(c)
 	if game.options & OPTION_CURSES:
-	    wrefresh(curwnd)
+	    curwnd.refresh()
 	else:
 	    sys.stdout.flush()
     if not replayfp or replayfp.closed:



From esr at mail.berlios.de  Tue Oct 10 11:25:54 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 11:25:54 +0200
Subject: [Sst-commit-watch] r737 - trunk/src
Message-ID: <200610100925.k9A9PsvQ012157@sheep.berlios.de>

Author: esr
Date: 2006-10-10 11:25:53 +0200 (Tue, 10 Oct 2006)
New Revision: 737

Added:
   trunk/src/replay
Modified:
   trunk/src/io.c
   trunk/src/sst.py
Log:
Put a timestamp an email in lofiles.  Add the replay debugging script.
And a tiny tweak to io.c.


Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-10-10 08:51:43 UTC (rev 736)
+++ trunk/src/io.c	2006-10-10 09:25:53 UTC (rev 737)
@@ -86,7 +86,7 @@
 /* wait for user action -- OK to do nothing if on a TTY */
 {
     if (game.options & OPTION_CURSES)
-	getch();
+	wgetch(prompt_window);
 }
 
 void announce(void)

Added: trunk/src/replay
===================================================================
--- trunk/src/replay	2006-10-10 08:51:43 UTC (rev 736)
+++ trunk/src/replay	2006-10-10 09:25:53 UTC (rev 737)
@@ -0,0 +1,14 @@
+#!/bin/sh
+# Replay the last SST game. With arg, use only that many lines of the log
+#
+# Because the replay log captures the random-number seed,
+# repeating this any number of times should produce identical games,
+# unless the code changes.
+#
+if [ $1 ]
+then
+    head -n `expr $1 + 2` </usr/tmp/sst-input.log >replay.log
+else
+    mv /usr/tmp/sst-input.log replay.log
+fi
+python sst.py -t -r replay.log


Property changes on: trunk/src/replay
___________________________________________________________________
Name: svn:executable
   + *

Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 08:51:43 UTC (rev 736)
+++ trunk/src/sst.py	2006-10-10 09:25:53 UTC (rev 737)
@@ -180,7 +180,7 @@
 the LRSCAN command is no longer needed.  (Controlled by OPTION_AUTOSCAN
 and turned off if game type is "plain" or "almy".)
 """
-import os,sys,math,curses,time,atexit,readline,cPickle,random,getopt,copy
+import os, sys, math, curses, time, readline, cPickle, random, copy
 
 SSTDOC  	= "/usr/share/doc/sst/sst.doc"
 DOC_NAME	= "sst.doc"
@@ -6517,6 +6517,7 @@
 	atover(True)
 
 if __name__ == '__main__':
+    import getopt, socket
     try:
         global line, thing, game, idebug
         game = None
@@ -6568,6 +6569,8 @@
         if logfp:
             logfp.write("# seed %s\n" % seed)
             logfp.write("# options %s\n" % " ".join(arguments))
+            logfp.write("# recorded by %s@%s on %s\n" % \
+                    (os.getenv("LOGNAME"),socket.gethostname(),time.ctime()))
         random.seed(seed)
         scanner = sstscanner()
         map(scanner.append, arguments)



From esr at mail.berlios.de  Tue Oct 10 11:38:54 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 11:38:54 +0200
Subject: [Sst-commit-watch] r738 - trunk/src
Message-ID: <200610100938.k9A9csMl013701@sheep.berlios.de>

Author: esr
Date: 2006-10-10 11:38:53 +0200 (Tue, 10 Oct 2006)
New Revision: 738

Modified:
   trunk/src/sst.py
Log:
Remove some scaffolding, comments that were guidance for code now working.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 09:25:53 UTC (rev 737)
+++ trunk/src/sst.py	2006-10-10 09:38:53 UTC (rev 738)
@@ -2,10 +2,9 @@
 """
 sst.py =-- Super Star Trek in Python
 
-This code is a Python translation of a C translation of a FORTRAN original.
-The FORTRANness still shows in many ways, notably the use of a lot of
-parallel arrays where a more modern language would use structures
-or objects.  (However, 1-origin array indexing was fixed.)
+This code is a Python translation of a C translation of a FORTRAN
+original dating back to 1973.  Beautiful Python it is not.  But it
+works.
 
 Dave Matuszek says:
 
@@ -46,11 +45,11 @@
 features that I liked. I also took a peek at the DECUS version (a
 port, less sources, to the PDP-10), and some other variations.
 
-1, Compared to the original UT version, I've changed the "help" command to
-"call" and the "terminate" command to "quit" to better match
-user expectations. The DECUS version apparently made those changes
-as well as changing "freeze" to "save". However I like "freeze".
-(Both "freeze" and "save" work in SST2K.)
+1, Compared to the original UT version, I've changed the "help"
+command to "call" and the "terminate" command to "quit" to better
+match user expectations. The DECUS version apparently made those
+changes as well as changing "freeze" to "save". However I like
+"freeze".  (Both "freeze" and "save" work in SST2K.)
 
 2. The experimental deathray originally had only a 5% chance of
 success, but could be used repeatedly. I guess after a couple
@@ -2653,13 +2652,6 @@
     game.resting = False
     game.optime = 0
 
-# A nova occurs.  It is the result of having a star hit with a
-# photon torpedo, or possibly of a probe warhead going off.
-# Stars that go nova cause stars which surround them to undergo
-# the same probabilistic process.  Klingons next to them are
-# destroyed.  And if the starship is next to it, it gets zapped.
-# If the zap is too much, it gets destroyed.
-        
 def nova(nov):
     "Star goes nova." 
     course = (0.0, 10.5, 12.0, 1.5, 9.0, 0.0, 3.0, 7.5, 6.0, 4.5)
@@ -4352,23 +4344,6 @@
     game.ididit = True
     return
 
-# Here's how the mayday code works:
-# 
-# First, the closest starbase is selected.  If there is a a starbase
-# in your own quadrant, you are in good shape.  This distance takes
-# quadrant distances into account only.
-#
-# A magic number is computed based on the distance which acts as the
-# probability that you will be rematerialized.  You get three tries.
-#
-# When it is determined that you should be able to be rematerialized
-# (i.e., when the probability thing mentioned above comes up
-# positive), you are put into that quadrant (anywhere).  Then, we try
-# to see if there is a spot adjacent to the star- base.  If not, you
-# can't be rematerialized!!!  Otherwise, it drops you there.  It only
-# tries five times to find a spot to drop you.  After that, it's your
-# problem.
-
 def mayday():
     "Yell for help from nearest starbase."
     # There's more than one way to move in this game! 
@@ -4445,24 +4420,6 @@
     skip(1)
     prout(_("Lt. Uhura-  \"Captain, we made it!\""))
 
-# Abandon Ship (the BSD-Trek description)
-# 
-# The ship is abandoned.  If your current ship is the Faire
-# Queene, or if your shuttlecraft is dead, you're out of
-# luck.  You need the shuttlecraft in order for the captain
-# (that's you!!) to escape.
-# 
-# Your crew can beam to an inhabited starsystem in the
-# quadrant, if there is one and if the transporter is working.
-# If there is no inhabited starsystem, or if the transporter
-# is out, they are left to die in outer space.
-# 
-# If there are no starbases left, you are captured by the
-# Klingons, who torture you mercilessly.  However, if there
-# is at least one starbase, you are returned to the
-# Federation in a prisoner of war exchange.  Of course, this
-# can't happen unless you have taken some prisoners.
-
 def abandon():
     "Abandon ship."
     scanner.chew()



From esr at mail.berlios.de  Tue Oct 10 11:41:29 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 11:41:29 +0200
Subject: [Sst-commit-watch] r739 - trunk/src
Message-ID: <200610100941.k9A9fTVW014227@sheep.berlios.de>

Author: esr
Date: 2006-10-10 11:41:28 +0200 (Tue, 10 Oct 2006)
New Revision: 739

Removed:
   trunk/src/xio.c
Log:
Now the Python version work, let's deep-six this so nobody is tempted to
go through the pain...


Deleted: trunk/src/xio.c
===================================================================
--- trunk/src/xio.c	2006-10-10 09:38:53 UTC (rev 738)
+++ trunk/src/xio.c	2006-10-10 09:41:28 UTC (rev 739)
@@ -1,202 +0,0 @@
-/*
- * Problems with this code:
- *   1. The text window behaves like it's only a few lines high, 
- *      scrolling in response to Return when the insertion point 
- *      is nowhere near the last line.
- *   2. The attempt to insert text with XawTextReplace() core dumps.
- *   3. I haven't found a way to write a callback that triggers on Return 
- *      and yields the line before the return.  The explanation at
- *      http://www.linuxjunkies.org/programming/GUI/xwindow/x11/text.html
- *      hints that this may be difficult.
- *
- * The functional goal is this:
- *    1. Button pushes should be able to insert commands at the buffer's
- *       current insertion point.
- *    2. When a user finishes a command with Return, a callback should
- *       receive the line of input typed.
- * 
- * All the input passed to the game in back of this will be lines full
- * of commands generated either by typing into the text buffer directly 
- * or by button presses that generate text unto the buffer.
- */
-#include <stdlib.h>
-#include <stdio.h>
-#include <X11/Intrinsic.h>
-#include <X11/StringDefs.h>
-#include <X11/Shell.h>
-#include <X11/Xaw/Box.h>
-#include <X11/Xaw/Form.h>
-#include <X11/Xaw/Command.h>
-#include <X11/Xaw/AsciiText.h>
-//#include "sst.h"
-#define OPTION_PLANETS	1
-#define OPTION_PROBE	2
-
-static XtAppContext app_context;
-static Widget toplevel, text, form; 
-static Widget navigation, weapons, planets, misc; 
-static Widget navlabel, weaplabel, planlabel, misclabel;
-
-static String fallback[] = {
-    "*text.resizable: true",
-    "*text.resize: ResizeBoth",
-    "*text.width: 640",
-    "*text.height: 200",
-    "*text.autoFill: True",
-    "*text.scrollVertical: Always",
-    "*text.scrollHorizontal: WhenNeeded",
-    "*text.displayCaret: True",
-    "*navigation.fromVert: text",
-    "*navigation.borderWidth: 0",
-    "*navlabel.label: Navigation:   ",
-    "*navlabel.borderWidth: 0",
-    "*weapons.fromVert: navigation",
-    "*weapons.borderWidth: 0",
-    "*weaplabel.label: Weapons:      ",
-    "*weaplabel.borderWidth: 0",
-    "*planets.fromVert: weapons",
-    "*planets.borderWidth: 0",
-    "*planlabel.label: Planets:      ",
-    "*planlabel.borderWidth: 0",
-    "*misc.fromVert: planets",
-    "*misc.borderWidth: 0",
-    "*misclabel.label: Miscellaneous:",
-    "*misclabel.borderWidth: 0",
-    NULL,
-};
-
-struct cmd_t {
-    char *name;
-    void (*callback)(Widget, XtPointer, XtPointer);
-    Widget *parent;
-    int enable;
-    Widget widget;
-
-};
-
-static void quit_proc(Widget w, XtPointer client_data, XtPointer call_data)
-{ 
-    XtDestroyApplicationContext (app_context);
-    exit (0);
-}
-
-static void text_append_to(Widget w, String str)
-/* append text to a specified text widget */
-{
-    XawTextBlock txtblk;
-    XawTextPosition textend = XawTextGetInsertionPoint(w);
-
-    txtblk.ptr = str;
-    txtblk.length = strlen(str);
-    txtblk.firstPos = 0;
-    txtblk.format = FMT8BIT;
-
-    XawTextReplace(w, textend, textend, &txtblk);
-}
-
-static void noargs_proc(Widget w, XtPointer client_data, XtPointer call_data)
-/* use this for commands that take no arguments */
-{
-    /* currently a stub */
-    text_append_to(w, XtName(w));
-    printf("Button %s pressed\n", XtName(w));
-}
-
-static struct cmd_t commands[] = {
-    {"Move",		NULL,		&navigation,	0},
-    {"Dock",		noargs_proc,	&navigation,	0},
-    {"Chart",		noargs_proc,	&navigation,	0},
-    {"Impulse",		NULL,		&navigation,	0},
-    {"Rest",		NULL,		&navigation,	0},
-    {"Warp",		NULL,		&navigation,	0},
-    {"Probe",		NULL,		&navigation,	OPTION_PROBE},
-
-    {"Phasers",		NULL,		&weapons,	0},
-    {"Torpedo",		NULL,		&weapons,	0},
-    {"Shields",		NULL,		&weapons,	0},
-    {"Damages",		noargs_proc,	&weapons,	0},
-    {"Abandon",		noargs_proc,	&weapons,	0},
-    {"Destruct",	noargs_proc,	&weapons,	0},
-    {"Deathray",	noargs_proc,	&weapons,	0},
-    {"Mayday",		noargs_proc,	&weapons,	0},
-
-    {"Sensors",		noargs_proc,	&planets,	OPTION_PLANETS},
-    {"Orbit",		noargs_proc,	&planets,	OPTION_PLANETS},
-    {"Transport",	noargs_proc,	&planets,	OPTION_PLANETS},
-    {"Mine",		noargs_proc,	&planets,	OPTION_PLANETS},
-    {"Crystals",	noargs_proc,	&planets,	OPTION_PLANETS},
-    {"Shuttle",		noargs_proc,	&planets,	OPTION_PLANETS},
-    {"Planets",		noargs_proc,	&planets,	OPTION_PLANETS},
-
-    {"Score",		noargs_proc,	&misc,		0},
-    {"Report",		noargs_proc,	&misc,		0},
-    {"Computer",	noargs_proc,   	&misc,		0},
-    {"Save",		NULL,		&misc,		0},
-    {"Quit",		quit_proc,	&misc,		0},
-    {"Help",		noargs_proc,	&misc,		0},
-};
-
-static void instantiate_main(int argc, char **argv)
-{ 
-    struct cmd_t *cp;
-
-    toplevel = XtVaOpenApplication(&app_context, "sst2k", NULL, 0, &argc,
-				    argv, fallback, 
-				    applicationShellWidgetClass,
-				    XtNallowShellResize, True, NULL);
-    form = XtVaCreateManagedWidget("form", formWidgetClass, toplevel, NULL);
-    /* the command window */
-    text = XtVaCreateManagedWidget("text", 
-				   asciiTextWidgetClass, form,
-				   XtNeditType, XawtextEdit,
-				   NULL);
-    /* The button panels */
-    navigation  = XtVaCreateManagedWidget("navigation", 
-					  boxWidgetClass, form,
-					  XtNorientation, XtorientHorizontal,
-					  NULL); 
-    navlabel  = XtVaCreateManagedWidget("navlabel", 
-					labelWidgetClass, navigation,
-					NULL); 
-    weapons  = XtVaCreateManagedWidget("weapons", 
-				       boxWidgetClass, form,
-				       XtNorientation, XtorientHorizontal,
-				       NULL); 
-    weaplabel  = XtVaCreateManagedWidget("weaplabel", 
-					 labelWidgetClass, weapons,
-					 NULL); 
-    planets  = XtVaCreateManagedWidget("planets", 
-				       boxWidgetClass, form,
-				       XtNorientation, XtorientHorizontal,
-				       NULL); 
-    planlabel  = XtVaCreateManagedWidget("planlabel", 
-					 labelWidgetClass, planets,
-					 XtNborderWidth, 0,
-					 NULL); 
-    misc  = XtVaCreateManagedWidget("misc", 
-				       boxWidgetClass, form,
-				       XtNorientation, XtorientHorizontal,
-				       NULL); 
-    misclabel  = XtVaCreateManagedWidget("misclabel", 
-					 labelWidgetClass, misc,
-					 NULL); 
-    for (cp = commands; cp < commands + ARRAY_SIZE(commands); cp++) {
-	cp->widget = XtVaCreateManagedWidget(cp->name, 
-					     commandWidgetClass, 
-					     *cp->parent, 
-					     XtNlabel, cp->name,
-					     NULL);
-	if (cp->callback)
-	    XtAddCallback (cp->widget, XtNcallback, cp->callback, NULL);
-    }
-    XtRealizeWidget(toplevel);
-    XtAppMainLoop(app_context);
-    /* loop may be interrupted */
-    XtDestroyApplicationContext(app_context);
-}
-
-int main(int argc, char **argv)
-{
-    instantiate_main(argc, argv);
-    exit(0);
-}



From esr at mail.berlios.de  Tue Oct 10 12:03:10 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 12:03:10 +0200
Subject: [Sst-commit-watch] r740 - trunk/src
Message-ID: <200610101003.k9AA3AbV016372@sheep.berlios.de>

Author: esr
Date: 2006-10-10 12:03:10 +0200 (Tue, 10 Oct 2006)
New Revision: 740

Modified:
   trunk/src/sst.py
Log:
Better wrapup on replays.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 09:41:28 UTC (rev 739)
+++ trunk/src/sst.py	2006-10-10 10:03:10 UTC (rev 740)
@@ -3342,11 +3342,12 @@
 	setwnd(fullscreen_window)
 
 def ioend():
-    "Wrap up I/O.  Presently a stub."
-    stdscr.keypad(False)
-    curses.echo()
-    curses.nocbreak()
-    curses.endwin()
+    "Wrap up I/O."
+    if game.options & OPTION_CURSES:
+        stdscr.keypad(False)
+        curses.echo()
+        curses.nocbreak()
+        curses.endwin()
 
 def waitfor():
     "Wait for user action -- OK to do nothing if on a TTY"



From esr at mail.berlios.de  Tue Oct 10 17:38:49 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 17:38:49 +0200
Subject: [Sst-commit-watch] r741 - trunk/src
Message-ID: <200610101538.k9AFcnV6013415@sheep.berlios.de>

Author: esr
Date: 2006-10-10 17:38:45 +0200 (Tue, 10 Oct 2006)
New Revision: 741

Modified:
   trunk/src/sst.py
Log:
Debug the logic for deep-space probes.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 10:03:10 UTC (rev 740)
+++ trunk/src/sst.py	2006-10-10 15:38:45 UTC (rev 741)
@@ -335,9 +335,9 @@
         self.baseq = [] 	# Base quadrant coordinates
         self.kcmdr = [] 	# Commander quadrant coordinates
 	self.kscmdr = coord()	# Supercommander quadrant coordinates
-        # the galaxy (subscript 0 not used)
+        # the galaxy
         self.galaxy = fill2d(GALSIZE, lambda i, j: quadrant())
-        # the starchart (subscript 0 not used)
+        # the starchart
     	self.chart = fill2d(GALSIZE, lambda i, j: page())
 
 class event:
@@ -524,10 +524,8 @@
         self.damfac = 0.0	# damage factor
         self.lastchart = 0.0	# time star chart was last updated
         self.cryprob = 0.0	# probability that crystal will work
-        self.probex = 0.0	# location of probe
-        self.probey = 0.0	#
-        self.probeinx = 0.0	# probe x,y increment
-        self.probeiny = 0.0	#
+        self.probe = None	# location of probe
+        self.probein = None	# probe i,j increment
         self.height = 0.0	# height of orbit around planet
     def recompute(self):
         # Stas thinks this should be (C expression): 
@@ -537,7 +535,7 @@
         # after killing the last klingon when score is shown -- perhaps also
         # if the only remaining klingon is SCOM.
         game.state.remtime = game.state.remres/(game.state.remkl + 4*len(game.state.kcmdr))
-# From enumerated type 'feature'
+
 IHR = 'R'
 IHK = 'K'
 IHC = 'C'
@@ -557,8 +555,6 @@
 IHMATER1 = 'o'
 IHMATER2 = '0'
 
-
-# From enumerated type 'FINTYPE'
 FWON = 0
 FDEPLETE = 1
 FLIFESUP = 2
@@ -582,10 +578,6 @@
 FHOLE = 20
 FCREW = 21
 
-# Log the results of pulling random numbers so we can check determinism.
-
-import traceback
-
 def withprob(p):
     v = random.random()
     #logfp.write("# withprob(%s) -> %f (%s) at %s\n" % (p, v, v<p, traceback.extract_stack()[-2][1:]))
@@ -2465,21 +2457,20 @@
 		supercommander()
 	elif evcode == FDSPROB: # Move deep space probe 
 	    schedule(FDSPROB, 0.01)
-	    game.probex += game.probeinx
-	    game.probey += game.probeiny
-	    i = (int)(game.probex/QUADSIZE +0.05)
-	    j = (int)(game.probey/QUADSIZE + 0.05)
+	    game.probe += game.probein
+	    i = int(round(game.probe.i/float(QUADSIZE)))
+	    j = int(round(game.probe.j/float(QUADSIZE)))
 	    if game.probec.i != i or game.probec.j != j:
 		game.probec.i = i
 		game.probec.j = j
 		if not VALID_QUADRANT(i, j) or \
 		    game.state.galaxy[game.probec.i][game.probec.j].supernova:
 		    # Left galaxy or ran into supernova
-                    if comunicating():
+                    if communicating():
 			announce()
 			skip(1)
 			proutn(_("Lt. Uhura-  \"The deep space probe "))
-			if not VALID_QUADRANT(j, i):
+			if not VALID_QUADRANT(i, j):
 			    proutn(_("has left the galaxy"))
 			else:
 			    proutn(_("is no longer transmitting"))
@@ -2500,8 +2491,7 @@
 		pdest.charted = True
 	    game.proben -= 1 # One less to travel
 	    if game.proben == 0 and game.isarmed and pdest.stars:
-		# lets blow the sucker! 
-		supernova(game.probec)
+		supernova(game.probec)		# fire in the hole!
 		unschedule(FDSPROB)
 		if game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova: 
 		    return
@@ -3811,7 +3801,7 @@
 # because it involves giving x and y motions, yet the coordinates
 # are always displayed y - x, where +y is downward!
 
-def getcourse(isprobe, akey):
+def getcourse(isprobe):
     "Get a course and distance from the user."
     key = 0
     dquad = copy.copy(game.quadrant)
@@ -3834,12 +3824,7 @@
 	    navmode = "manual"
 	    key = "IHEOL"
 	    break
-	if isprobe and akey != -1:
-	    # For probe launch, use pre-scanned value first time 
-	    key = akey
-	    akey = -1
-	else: 
-	    key = scanner.next()
+        key = scanner.next()
 	if key == "IHEOL":
 	    proutn(_("Manual or automatic- "))
 	    iprompt = True
@@ -3961,7 +3946,7 @@
 	prout(_("Engineer Scott- \"The impulse engines are damaged, Sir.\""))
 	return
     if game.energy > 30.0:
-        if not getcourse(isprobe=False, akey=0):
+        if not getcourse(isprobe=False):
 	    return
 	power = 20.0 + 100.0*game.dist
     else:
@@ -4016,7 +4001,7 @@
 	    prout(_("  is repaired, I can only give you warp 4.\""))
 	    return
        	# Read in course and distance 
-        if not getcourse(isprobe=False, akey=0):
+        if not getcourse(isprobe=False):
 	    return
 	# Make sure starship has enough energy for the trip 
 	power = (game.dist+0.05)*game.warpfac*game.warpfac*game.warpfac*(game.shldup+1)
@@ -4195,8 +4180,7 @@
 	    proutn(_("The %s has stopped in a quadrant containing") % crmshp())
 	    prouts(_("   a supernova."))
 	    skip(2)
-	prout(_("***Emergency automatic override attempts to hurl ")+crmshp())
-	skip(1)
+	proutn(_("***Emergency automatic override attempts to hurl ")+crmshp())
 	prout(_("safely out of quadrant."))
 	if not damaged(DRADIO):
 	    game.state.galaxy[game.quadrant.i][game.quadrant.j].charted = True
@@ -4309,7 +4293,6 @@
 	return
     key = scanner.next()
     if key == "IHEOL":
-	# slow mode, so let Kirk know how many probes there are left
         if game.nprobes == 1:
             prout(_("1 probe left."))
         else:
@@ -4324,22 +4307,19 @@
     elif key == "IHEOL":
 	proutn(_("Arm NOVAMAX warhead? "))
 	game.isarmed = ja()
-    if not getcourse(isprobe=True, akey=key):
+    elif key == "IHREAL":		# first element of course
+        scanner.push(scanner.token)
+    if not getcourse(isprobe=True):
 	return
     game.nprobes -= 1
     angle = ((15.0 - game.direc) * 0.5235988)
-    game.probeinx = -math.sin(angle)
-    game.probeiny = math.cos(angle)
-    if math.fabs(game.probeinx) > math.fabs(game.probeiny):
-	bigger = math.fabs(game.probeinx)
-    else:
-	bigger = math.fabs(game.probeiny)
-    game.probeiny /= bigger
-    game.probeinx /= bigger
+    game.probein = coord(-math.sin(angle), math.cos(angle))
+    bigger = max(abs(game.probein.i), abs(game.probein.j))
+    game.probein /= bigger
     game.proben = 10.0*game.dist*bigger +0.5
-    game.probex = game.quadrant.i*QUADSIZE + game.sector.i - 1	# We will use better packing than original
-    game.probey = game.quadrant.j*QUADSIZE + game.sector.j - 1
-    game.probec = game.quadrant
+    game.probe = coord(game.quadrant.i*QUADSIZE + game.sector.i, 
+                       game.quadrant.j*QUADSIZE + game.sector.j)
+    game.probec = copy.copy(game.quadrant)
     schedule(FDSPROB, 0.01) # Time to move one sector
     prout(_("Ensign Chekov-  \"The deep space probe is launched, Captain.\""))
     game.ididit = True



From esr at mail.berlios.de  Tue Oct 10 18:14:14 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 18:14:14 +0200
Subject: [Sst-commit-watch] r742 - trunk/src
Message-ID: <200610101614.k9AGEEal017332@sheep.berlios.de>

Author: esr
Date: 2006-10-10 18:14:13 +0200 (Tue, 10 Oct 2006)
New Revision: 742

Modified:
   trunk/src/sst.py
Log:
Get rid of some magic numbers, simplify the scanner.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 15:38:45 UTC (rev 741)
+++ trunk/src/sst.py	2006-10-10 16:14:13 UTC (rev 742)
@@ -653,7 +653,6 @@
 		break
     return True; # success 
 
-#
 # The bad-guy movement algorithm:
 # 
 # 1. Enterprise has "force" based on condition of phaser and photon torpedoes.
@@ -691,7 +690,6 @@
 # retreat, especially at high skill levels.
 # 
 # 5.  Motion is limited to skill level, except for SC hi-tailing it out.
-# 
 
 def movebaddy(enemy):
     "Tactical movement for the bad guys."
@@ -904,7 +902,7 @@
     if not game.iscate and avoid:
 	# compute move away from Enterprise 
 	idelta = game.state.kscmdr-game.quadrant
-	if math.sqrt(idelta.i*idelta.i+idelta.j*idelta.j) > 2.0:
+	if idelta.distance() > 2.0:
 	    # circulate in space 
 	    idelta.i = game.state.kscmdr.j-game.quadrant.j
 	    idelta.j = game.quadrant.i-game.state.kscmdr.i
@@ -3904,8 +3902,8 @@
 		prout(_("Ensign Chekov- \"Course laid in, Captain.\""))
         # the actual deltas get computed here
         delta = coord()
-	delta.j = dquad.j-game.quadrant.j + 0.1*(dsect.j-game.sector.j)
-	delta.i = game.quadrant.i-dquad.i + 0.1*(game.sector.i-dsect.i)
+	delta.j = dquad.j-game.quadrant.j + (dsect.j-game.sector.j)/(QUADSIZE*1.0)
+	delta.i = game.quadrant.i-dquad.i + (game.sector.i-dsect.i)/(QUADSIZE*1.0)
     else: # manual 
 	while key == "IHEOL":
 	    proutn(_("X and Y displacements- "))
@@ -5291,8 +5289,8 @@
     if not VALID_QUADRANT(w1.i, w1.j) or not VALID_SECTOR(w2.i, w2.j):
 	huh()
 	return
-    game.dist = math.sqrt((w1.j-game.quadrant.j+0.1*(w2.j-game.sector.j))**2+
-		(w1.i-game.quadrant.i+0.1*(w2.i-game.sector.i))**2)
+    game.dist = math.sqrt((w1.j-game.quadrant.j+(w2.j-game.sector.j)/(QUADSIZE*1.0))**2+
+		(w1.i-game.quadrant.i+(w2.i-game.sector.i)/(QUADSIZE*1.0))**2)
     wfl = False
     if prompt:
 	prout(_("Answer \"no\" if you don't know the value:"))
@@ -5443,11 +5441,11 @@
     _("Tellar Prime (Miracht)"),	# TOS: "Journey to Babel" 
     _("Vulcan (T'Khasi)"),	# many episodes 
     _("Medusa"),		# TOS: "Is There in Truth No Beauty?" 
-    _("Argelius II (Nelphia)"),# TOS: "Wolf in the Fold" ("IV" in BSD) 
+    _("Argelius II (Nelphia)"),	# TOS: "Wolf in the Fold" ("IV" in BSD) 
     _("Ardana"),		# TOS: "The Cloud Minders" 
     _("Catulla (Cendo-Prae)"),	# TOS: "The Way to Eden" 
     _("Gideon"),		# TOS: "The Mark of Gideon" 
-    _("Aldebaran III"),	# TOS: "The Deadly Years" 
+    _("Aldebaran III"),		# TOS: "The Deadly Years" 
     _("Alpha Majoris I"),	# TOS: "Wolf in the Fold" 
     _("Altair IV"),		# TOS: "Amok Time 
     _("Ariannus"),		# TOS: "Let That Be Your Last Battlefield" 
@@ -5708,8 +5706,6 @@
 	if not scanner.inqueue: # Can start with command line options 
 	    proutn(_("Would you like a regular, tournament, or saved game? "))
         scanner.next()
-	if len(scanner.token)==0: # Try again
-	    continue
         if scanner.sees("tournament"):
 	    while scanner.next() == "IHEOL":
 		proutn(_("Type in tournament number-"))
@@ -6323,10 +6319,6 @@
         # Demand input for next scan
         self.inqueue = []
         self.real = self.token = None
-    def chew2(self):
-        # return "IHEOL" next time 
-        self.inqueue = ["IHEOL"]
-        self.real = self.token = None
     def sees(self, s):
         # compares s to item and returns true if it matches to the length of s
         return s.startswith(self.token)
@@ -6530,7 +6522,8 @@
                 if game.tourn and game.alldone:
                     proutn(_("Do you want your score recorded?"))
                     if ja() == True:
-                        scanner.chew2()
+                        scanner.chew()
+                        scanner.push("\n")
                         freeze(False)
                 scanner.chew()
                 proutn(_("Do you want to play again? "))
@@ -6545,4 +6538,3 @@
         if logfp:
             logfp.close()
         print ""
-        pass



From stsp at mail.berlios.de  Tue Oct 10 19:09:08 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Tue, 10 Oct 2006 19:09:08 +0200
Subject: [Sst-commit-watch] r743 - trunk/src
Message-ID: <200610101709.k9AH98wt015538@sheep.berlios.de>

Author: stsp
Date: 2006-10-10 19:09:07 +0200 (Tue, 10 Oct 2006)
New Revision: 743

Modified:
   trunk/src/sst.py
Log:
Enabled the gettext support. However:
1. The path is hardcoded and suits *my* configuration.
2. It is still unclear how to build the translation catalog without automake.
How can I solve these?

Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 16:14:13 UTC (rev 742)
+++ trunk/src/sst.py	2006-10-10 17:09:07 UTC (rev 743)
@@ -179,13 +179,12 @@
 the LRSCAN command is no longer needed.  (Controlled by OPTION_AUTOSCAN
 and turned off if game type is "plain" or "almy".)
 """
-import os, sys, math, curses, time, readline, cPickle, random, copy
+import os, sys, math, curses, time, readline, cPickle, random, copy, gettext
 
 SSTDOC  	= "/usr/share/doc/sst/sst.doc"
 DOC_NAME	= "sst.doc"
 
-# Stub to be replaced
-def _(str): return str
+def _(str): return gettext.gettext(str)
 
 PHASEFAC	= 2.0
 GALSIZE 	= 8
@@ -3305,6 +3304,8 @@
 
 def iostart():
     global stdscr, rows
+    gettext.bindtextdomain("sst", "/usr/local/share/locale")
+    gettext.textdomain("sst")
     if not (game.options & OPTION_CURSES):
 	ln_env = os.getenv("LINES")
         if ln_env:



From esr at mail.berlios.de  Tue Oct 10 19:46:04 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 19:46:04 +0200
Subject: [Sst-commit-watch] r744 - trunk/src
Message-ID: <200610101746.k9AHk4Um031465@sheep.berlios.de>

Author: esr
Date: 2006-10-10 19:46:03 +0200 (Tue, 10 Oct 2006)
New Revision: 744

Modified:
   trunk/src/sst.py
Log:
Minor fixes to curses interface.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 17:09:07 UTC (rev 743)
+++ trunk/src/sst.py	2006-10-10 17:46:03 UTC (rev 744)
@@ -3357,7 +3357,7 @@
     if game.options & OPTION_CURSES:
         drawmaps(0)
         setwnd(prompt_window)
-        prompt_window.wclear()
+        prompt_window.clear()
         prompt_window.addstr(prompt)
         prompt_window.getstr()
         prompt_window.clear()
@@ -3452,8 +3452,8 @@
 def clreol():
     "Clear to end of line -- can be a no-op in tty mode" 
     if game.options & OPTION_CURSES:
-        wclrtoeol(curwnd)
-        wrefresh(curwnd)
+        curwnd.clrtoeol()
+        curwnd.refresh()
 
 def clrscr():
     "Clear screen -- can be a no-op in tty mode."



From esr at mail.berlios.de  Tue Oct 10 22:09:00 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 22:09:00 +0200
Subject: [Sst-commit-watch] r745 - trunk/src
Message-ID: <200610102009.k9AK902Y021593@sheep.berlios.de>

Author: esr
Date: 2006-10-10 22:08:59 +0200 (Tue, 10 Oct 2006)
New Revision: 745

Modified:
   trunk/src/sst.py
Log:
Lexer fixes for Stas.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 17:46:03 UTC (rev 744)
+++ trunk/src/sst.py	2006-10-10 20:08:59 UTC (rev 745)
@@ -5388,18 +5388,17 @@
 def freeze(boss):
     "Save game."
     if boss:
-	scanner.token = "emsave.trk"
-    else:
+	scanner.push("emsave.trk")
+    key = scanner.next()
+    if key == "IHEOL":
+        proutn(_("File name: "))
         key = scanner.next()
-	if key == "IHEOL":
-	    proutn(_("File name: "))
-	    key = scanner.next()
-	if key != "IHALPHA":
-	    huh()
-	    return
-	scanner.chew()
-        if '.' not in scanner.token:
-	    scanner.token += ".trk"
+    if key != "IHALPHA":
+        huh()
+        return
+    scanner.chew()
+    if '.' not in scanner.token:
+        scanner.token += ".trk"
     try:
         fp = open(scanner.token, "wb")
     except IOError:
@@ -5774,7 +5773,7 @@
 	# Approximates Tom Almy's version.
 	game.options &=~ (OPTION_THINGY | OPTION_BLKHOLE | OPTION_BASE | OPTION_WORLDS)
 	game.options |= OPTION_ALMY
-    elif scanner.sees("fancy"):
+    elif scanner.sees("fancy") or scanner.sees("\n"):
 	pass
     elif len(scanner.token):
         proutn(_("What is \"%s\"?") % scanner.token)
@@ -6293,10 +6292,10 @@
             if not line:
                 continue
             else:
-                self.inqueue = line.lstrip().split() + ["IHEOL"] 
+                self.inqueue = line.lstrip().split() + ["\n"]
         # From here on in it's all looking at the queue
         self.token = self.inqueue.pop(0)
-        if self.token == "IHEOL":
+        if self.token == "\n":
             self.type = "IHEOL"
             return "IHEOL"
         try:



From esr at mail.berlios.de  Tue Oct 10 23:07:40 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 10 Oct 2006 23:07:40 +0200
Subject: [Sst-commit-watch] r746 - trunk/src
Message-ID: <200610102107.k9AL7eve030059@sheep.berlios.de>

Author: esr
Date: 2006-10-10 23:07:40 +0200 (Tue, 10 Oct 2006)
New Revision: 746

Modified:
   trunk/src/sst.py
Log:
Invert the sense of a test for better readability.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 20:08:59 UTC (rev 745)
+++ trunk/src/sst.py	2006-10-10 21:07:40 UTC (rev 746)
@@ -853,9 +853,9 @@
     "Commander movement helper." 
     # Avoid quadrants with bases if we want to avoid Enterprise 
     if not welcoming(iq) or (avoid and iq in game.state.baseq):
-	return True
+	return False
     if game.justin and not game.iscate:
-	return True
+	return False
     # do the move 
     game.state.galaxy[game.state.kscmdr.i][game.state.kscmdr.j].klingons -= 1
     game.state.kscmdr = iq
@@ -887,7 +887,7 @@
 		proutn(_("   a planet in Quadrant %s has been destroyed") % game.state.kscmdr)
 		prout(_("   by the Super-commander.\""))
 	    break
-    return False; # looks good! 
+    return True; # looks good! 
 			
 def supercommander():
     "Move the Super Commander." 
@@ -945,24 +945,24 @@
     # there was what looked like a bug in the Almy C code here,
     # but it might be this translation is just wrong.
     iq = game.state.kscmdr + idelta
-    if movescom(iq, avoid):
+    if not movescom(iq, avoid):
 	# failed -- try some other maneuvers 
 	if idelta.i==0 or idelta.j==0:
 	    # attempt angle move 
 	    if idelta.i != 0:
 		iq.j = game.state.kscmdr.j + 1
-		if movescom(iq, avoid):
+		if not movescom(iq, avoid):
 		    iq.j = game.state.kscmdr.j - 1
 		    movescom(iq, avoid)
-	    else:
+	    elif idelta.j != 0:
 		iq.i = game.state.kscmdr.i + 1
-		if movescom(iq, avoid):
+		if not movescom(iq, avoid):
 		    iq.i = game.state.kscmdr.i - 1
 		    movescom(iq, avoid)
 	else:
 	    # try moving just in x or y 
 	    iq.j = game.state.kscmdr.j
-	    if movescom(iq, avoid):
+	    if not movescom(iq, avoid):
 		iq.j = game.state.kscmdr.j + idelta.j
 		iq.i = game.state.kscmdr.i
 		movescom(iq, avoid)
@@ -970,7 +970,7 @@
     if len(game.state.baseq) == 0:
 	unschedule(FSCMOVE)
     else:
-        for (i, ibq) in enumerate(game.state.baseq):
+        for ibq in game.state.baseq:
 	    if ibq == game.state.kscmdr and game.state.kscmdr == game.battle:
 		# attack the base 
 		if avoid:
@@ -1654,7 +1654,7 @@
     proutn(crmena(True, type, "sector", mv))
     # Decide what kind of enemy it is and update appropriately 
     if type == IHR:
-        # chalk up a Romulan 
+        # Chalk up a Romulan 
         game.state.galaxy[game.quadrant.i][game.quadrant.j].romulans -= 1
         game.irhere -= 1
         game.state.nromrem -= 1
@@ -1666,7 +1666,7 @@
         global thing
         thing = None
     else:
-        # Some type of a Klingon 
+        # Killed some type of Klingon 
         game.state.galaxy[game.quadrant.i][game.quadrant.j].klingons -= 1
         game.klhere -= 1
         if type == IHC:



From esr at mail.berlios.de  Wed Oct 11 02:52:27 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 11 Oct 2006 02:52:27 +0200
Subject: [Sst-commit-watch] r747 - trunk/src
Message-ID: <200610110052.k9B0qRQi018123@sheep.berlios.de>

Author: esr
Date: 2006-10-11 02:52:25 +0200 (Wed, 11 Oct 2006)
New Revision: 747

Modified:
   trunk/src/sst.py
Log:
Simplify the probe code.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-10 21:07:40 UTC (rev 746)
+++ trunk/src/sst.py	2006-10-11 00:52:25 UTC (rev 747)
@@ -2455,26 +2455,23 @@
 	elif evcode == FDSPROB: # Move deep space probe 
 	    schedule(FDSPROB, 0.01)
 	    game.probe += game.probein
-	    i = int(round(game.probe.i/float(QUADSIZE)))
-	    j = int(round(game.probe.j/float(QUADSIZE)))
-	    if game.probec.i != i or game.probec.j != j:
-		game.probec.i = i
-		game.probec.j = j
-		if not VALID_QUADRANT(i, j) or \
+            newloc = (game.probe / float(QUADSIZE)).snaptogrid()
+            if newloc != game.probec:
+                game.probec = newloc
+		if not VALID_QUADRANT(game.probec.i, game.probec.j) or \
 		    game.state.galaxy[game.probec.i][game.probec.j].supernova:
 		    # Left galaxy or ran into supernova
                     if communicating():
 			announce()
 			skip(1)
 			proutn(_("Lt. Uhura-  \"The deep space probe "))
-			if not VALID_QUADRANT(i, j):
-			    proutn(_("has left the galaxy"))
+			if not VALID_QUADRANT(game.probec.i, game.probec.j):
+			    proutn(_("has left the galaxy.\""))
 			else:
-			    proutn(_("is no longer transmitting"))
-			prout(".\"")
+			    proutn(_("is no longer transmitting.\""))
 		    unschedule(FDSPROB)
 		    continue
-                if not communicating():
+                if communicating():
 		    announce()
 		    skip(1)
 		    proutn(_("Lt. Uhura-  \"The deep space probe is now in Quadrant %s.\"") % game.probec)



From esr at mail.berlios.de  Wed Oct 11 13:17:49 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 11 Oct 2006 13:17:49 +0200
Subject: [Sst-commit-watch] r748 - trunk/src
Message-ID: <200610111117.k9BBHnkx021097@sheep.berlios.de>

Author: esr
Date: 2006-10-11 13:17:48 +0200 (Wed, 11 Oct 2006)
New Revision: 748

Modified:
   trunk/src/moving.c
Log:
Fix typo noticed while working on the Python translation.


Modified: trunk/src/moving.c
===================================================================
--- trunk/src/moving.c	2006-10-11 00:52:25 UTC (rev 747)
+++ trunk/src/moving.c	2006-10-11 11:17:48 UTC (rev 748)
@@ -511,7 +511,7 @@
 	if (game.damage[DWARPEN] > 10.0) {
 	    chew();
 	    skip(1);
-	    prout(_("Engineer Scott- \"The impulse engines are damaged, Sir.\""));
+	    prout(_("Engineer Scott- \"The warp engines are damaged, Sir.\""));
 	    return;
 	}
 	if (damaged(DWARPEN) && game.warpfac > 4.0) {



From esr at mail.berlios.de  Wed Oct 11 15:04:39 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 11 Oct 2006 15:04:39 +0200
Subject: [Sst-commit-watch] r749 - trunk/src
Message-ID: <200610111304.k9BD4dS1006715@sheep.berlios.de>

Author: esr
Date: 2006-10-11 15:04:38 +0200 (Wed, 11 Oct 2006)
New Revision: 749

Modified:
   trunk/src/sst.py
Log:
New probe logic mostly looks good, but there is a glitch in the
initial course computation.

This change introduces a course object, which (someday) should unify
all the messy trigonometry in one place.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-11 11:17:48 UTC (rev 748)
+++ trunk/src/sst.py	2006-10-11 13:04:38 UTC (rev 749)
@@ -225,6 +225,9 @@
 IHMATER1 = 'o',
 IHMATER2 = '0'
 
+class TrekError:
+    pass
+
 class coord:
     def __init__(self, x=None, y=None):
         self.i = x
@@ -235,6 +238,8 @@
         return self.i != None and self.j != None
     def __eq__(self, other):
         return other != None and self.i == other.i and self.j == other.j
+    def __ne__(self, other):
+        return other == None or self.i != other.i or self.j != other.j
     def __add__(self, other):
         return coord(self.i+other.i, self.j+other.j)
     def __sub__(self, other):
@@ -460,7 +465,6 @@
         self.base = None	# position of base in current quadrant
         self.battle = None	# base coordinates being attacked
         self.plnet = None	# location of planet in quadrant
-        self.probec = None	# current probe quadrant
         self.gamewon = False	# Finished!
         self.ididit = False	# action taken -- allows enemy to attack
         self.alive = False	# we are alive (not killed)
@@ -503,7 +507,6 @@
         self.irhere = 0		# Romulans in quadrant
         self.isatb = 0		# =1 if super commander is attacking base
         self.tourn = None	# tournament number
-        self.proben = 0		# number of moves for probe
         self.nprobes = 0	# number of probes available
         self.inresor = 0.0	# initial resources
         self.intime = 0.0	# initial time
@@ -516,15 +519,12 @@
         self.warpfac = 0.0	# warp speed
         self.wfacsq = 0.0	# squared warp factor
         self.lsupres = 0.0	# life support reserves
-        self.dist = 0.0		# movement distance
-        self.direc = 0.0	# movement direction
         self.optime = 0.0	# time taken by current operation
         self.docfac = 0.0	# repair factor when docking (constant?)
         self.damfac = 0.0	# damage factor
         self.lastchart = 0.0	# time star chart was last updated
         self.cryprob = 0.0	# probability that crystal will work
-        self.probe = None	# location of probe
-        self.probein = None	# probe i,j increment
+        self.probe = None	# object holding probe course info
         self.height = 0.0	# height of orbit around planet
     def recompute(self):
         # Stas thinks this should be (C expression): 
@@ -2454,38 +2454,34 @@
 		supercommander()
 	elif evcode == FDSPROB: # Move deep space probe 
 	    schedule(FDSPROB, 0.01)
-	    game.probe += game.probein
-            newloc = (game.probe / float(QUADSIZE)).snaptogrid()
-            if newloc != game.probec:
-                game.probec = newloc
-		if not VALID_QUADRANT(game.probec.i, game.probec.j) or \
-		    game.state.galaxy[game.probec.i][game.probec.j].supernova:
+            if game.probe.next():
+		if not VALID_QUADRANT(game.probe.loc.i, game.probe.loc.j) or \
+		    game.state.galaxy[game.probe.loc.i][game.probe.loc.j].supernova:
 		    # Left galaxy or ran into supernova
                     if communicating():
 			announce()
 			skip(1)
 			proutn(_("Lt. Uhura-  \"The deep space probe "))
-			if not VALID_QUADRANT(game.probec.i, game.probec.j):
+			if not VALID_QUADRANT(game.probe.loc.i, game.probe.loc.j):
 			    proutn(_("has left the galaxy.\""))
 			else:
 			    proutn(_("is no longer transmitting.\""))
 		    unschedule(FDSPROB)
 		    continue
                 if communicating():
-		    announce()
+		    #announce()
 		    skip(1)
-		    proutn(_("Lt. Uhura-  \"The deep space probe is now in Quadrant %s.\"") % game.probec)
-	    pdest = game.state.galaxy[game.probec.i][game.probec.j]
-	    # Update star chart if Radio is working or have access to radio
+		    prout(_("Lt. Uhura-  \"The deep space probe is now in Quadrant %s.\"") % game.probe.loc)
+	    pdest = game.state.galaxy[game.probe.loc.i][game.probe.loc.j]
 	    if communicating():
-		chp = game.state.chart[game.probec.i][game.probec.j]
+		chp = game.state.chart[game.probe.loc.i][game.probe.loc.j]
 		chp.klingons = pdest.klingons
 		chp.starbase = pdest.starbase
 		chp.stars = pdest.stars
 		pdest.charted = True
-	    game.proben -= 1 # One less to travel
-	    if game.proben == 0 and game.isarmed and pdest.stars:
-		supernova(game.probec)		# fire in the hole!
+	    game.probe.moves -= 1 # One less to travel
+	    if game.probe.moves == 0 and game.isarmed and pdest.stars:
+		supernova(game.probe)		# fire in the hole!
 		unschedule(FDSPROB)
 		if game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova: 
 		    return
@@ -2751,17 +2747,18 @@
                     game.quad[newc.i][newc.j] = iquad
                     game.enemies[ll].move(newc)
     # Starship affected by nova -- kick it away. 
-    game.dist = kount*0.1
-    game.direc = course[3*(bump.i+1)+bump.j+2]
-    if game.direc == 0.0:
-	game.dist = 0.0
-    if game.dist == 0.0:
+    dist = kount*0.1
+    direc = course[3*(bump.i+1)+bump.j+2]
+    if direc == 0.0:
+	dist = 0.0
+    if dist == 0.0:
 	return
-    game.optime = 10.0*game.dist/16.0
+    course = course(distance=dist, bearing=direc, warp=4)
+    game.optime = course.time()
     skip(1)
     prout(_("Force of nova displaces starship."))
-    imove(novapush=True)
-    game.optime = 10.0*game.dist/16.0
+    imove(course, novapush=True)
+    game.optime = course.time()
     return
 	
 def supernova(w):
@@ -3278,7 +3275,7 @@
         fp.write(_("Emeritus level\n\n"))
     else:
         fp.write(_(" Cheat level\n\n"))
-    timestring = ctime()
+    timestring = time.ctime()
     fp.write(_("                                                 This day of %.6s %.4s, %.8s\n\n") %
                     (timestring+4, timestring+20, timestring+11))
     fp.write(_("                                                        Your score:  %d\n\n") % iscore)
@@ -3342,7 +3339,7 @@
 
 def announce():
     skip(1)
-    prouts(_("[ANOUNCEMENT ARRIVING...]"))
+    prouts(_("[ANNOUNCEMENT ARRIVING...]"))
     skip(1)
 
 def pause_game():
@@ -3584,7 +3581,7 @@
 
 # Code from moving.c begins here
 
-def imove(novapush):
+def imove(course=None, novapush=False):
     "Movement execution for warp, impulse, supernova, and tractor-beam events."
     w = coord(); final = coord()
     trbeam = False
@@ -3609,7 +3606,7 @@
     if game.inorbit:
 	prout(_("Helmsman Sulu- \"Leaving standard orbit.\""))
 	game.inorbit = False
-    angle = ((15.0 - game.direc) * 0.5235988)
+    angle = ((15.0 - course.bearing) * 0.5235988)
     deltax = -math.sin(angle)
     deltay = math.cos(angle)
     if math.fabs(deltax) > math.fabs(deltay):
@@ -3622,13 +3619,13 @@
     if game.state.date+game.optime >= scheduled(FTBEAM):
 	trbeam = True
 	game.condition = "red"
-	game.dist = game.dist*(scheduled(FTBEAM)-game.state.date)/game.optime + 0.1
+	course.distance = course.distance*(scheduled(FTBEAM)-game.state.date)/game.optime + 0.1
 	game.optime = scheduled(FTBEAM) - game.state.date + 1e-5
     # Move within the quadrant 
     game.quad[game.sector.i][game.sector.j] = IHDOT
     x = game.sector.i
     y = game.sector.j
-    n = int(10.0*game.dist*bigger+0.5)
+    n = int(10.0*course.distance*bigger+0.5)
     if n > 0:
 	for m in range(1, n+1):
             x += deltax
@@ -3655,8 +3652,8 @@
 		# compute final position -- new quadrant and sector 
 		x = (QUADSIZE*game.quadrant.i)+game.sector.i
 		y = (QUADSIZE*game.quadrant.j)+game.sector.j
-		w.i = int(round(x+10.0*game.dist*bigger*deltax))
-		w.j = int(round(y+10.0*game.dist*bigger*deltay))
+		w.i = int(round(x+QUADSIZE*course.distance*bigger*deltax))
+		w.j = int(round(y+QUADSIZE*course.distance*bigger*deltay))
 		# check for edge of galaxy 
 		kinks = 0
                 while True:
@@ -3704,8 +3701,8 @@
 	    iquad = game.quad[w.i][w.j]
 	    if iquad != IHDOT:
 		# object encountered in flight path 
-		stopegy = 50.0*game.dist/game.optime
-		game.dist = (game.sector - w).distance() / (QUADSIZE * 1.0)
+		stopegy = 50.0*course.dist/game.optime
+		course.distance = (game.sector - w).distance() / (QUADSIZE * 1.0)
                 if iquad in (IHT, IHK, IHC, IHS, IHR, IHQUEST):
 		    game.sector = w
                     for enemy in game.enemies:
@@ -3719,11 +3716,9 @@
 		    skip(1)
 		    proutn("***" + crmshp())
 		    proutn(_(" pulled into black hole at Sector %s") % w)
-		    #
 		    # Getting pulled into a black hole was certain
 		    # death in Almy's original.  Stas Sergeev added a
 		    # possibility that you'll get timewarped instead.
-		    # 
 		    n=0
 		    for m in range(NDEVICES):
 			if game.damage[m]>0: 
@@ -3754,7 +3749,7 @@
                 # We're here!
 		no_quad_change()
                 return
-	game.dist = (game.sector - w).distance() / (QUADSIZE * 1.0)
+	course.distance = (game.sector - w).distance() / (QUADSIZE * 1.0)
 	game.sector = w
     final = game.sector
     no_quad_change()
@@ -3809,7 +3804,7 @@
 	prout(_("Dummy! You can't leave standard orbit until you"))
 	proutn(_("are back aboard the ship."))
 	scanner.chew()
-	return False
+	raise TrekError
     while navmode == "unspecified":
 	if damaged(DNAVSYS):
 	    if isprobe:
@@ -3837,7 +3832,7 @@
 	    else:
 		huh()
 		scanner.chew()
-		return False
+		raise TrekError
 	else: # numeric 
 	    if isprobe:
 		prout(_("(Manual navigation assumed.)"))
@@ -3856,12 +3851,12 @@
 	    key = scanner.next()
 	if key != "IHREAL":
 	    huh()
-	    return False
+	    raise TrekError
 	xi = int(round(scanner.real))-1
 	key = scanner.next()
 	if key != "IHREAL":
 	    huh()
-	    return False
+	    raise TrekError
 	xj = int(round(scanner.real))-1
 	key = scanner.next()
 	if key == "IHREAL":
@@ -3870,7 +3865,7 @@
 	    key = scanner.next()
 	    if key != "IHREAL":
 		huh()
-		return False
+		raise TrekError
 	    xl = int(round(scanner.real))-1
 	    dquad.i = xi
 	    dquad.j = xj
@@ -3890,7 +3885,7 @@
 	    itemp = "normal"
 	if not VALID_QUADRANT(dquad.i,dquad.j) or not VALID_SECTOR(dsect.i,dsect.j):
 	    huh()
-	    return False
+	    raise TrekError
 	skip(1)
 	if not isprobe:
 	    if itemp > "curt":
@@ -3911,28 +3906,60 @@
 	itemp = "verbose"
 	if key != "IHREAL":
 	    huh()
-	    return False
+	    raise TrekError
 	delta.j = scanner.real
 	key = scanner.next()
 	if key != "IHREAL":
 	    huh()
-	    return False
+	    raise TrekError
 	delta.i = scanner.real
     # Check for zero movement 
     if delta.i == 0 and delta.j == 0:
 	scanner.chew()
-	return False
+	raise TrekError
     if itemp == "verbose" and not isprobe:
 	skip(1)
 	prout(_("Helmsman Sulu- \"Aye, Sir.\""))
-    # Course actually laid in.
-    game.dist = delta.distance()
-    game.direc = delta.bearing()
-    if game.direc < 0.0:
-	game.direc += 12.0
     scanner.chew()
-    return True
+    return course(delta.distance(), delta.bearing(), isprobe=isprobe)
 
+class course:
+    # Eventually, we want to consolidate all course compuation here,
+    # including for torpedos and the Enterprise.
+    def __init__(self, distance, bearing, warp=None, isprobe=False): 
+        # Course actually laid in -- thisis straight from the old getcd().
+        self.distance = distance
+        self.bearing = bearing
+        self.warp = warp or game.warpfac
+        self.isprobe = isprobe
+        # This odd relic suggests that the bearing() code we inherited from
+        # FORTRAN is actually computing clockface directions.
+        if self.bearing < 0.0:
+            self.bearing += 12.0
+        # This code was moved from the probe() routine
+        if isprobe:
+            angle = ((15.0 - self.bearing) * 0.5235988)
+            self.increment = coord(-math.sin(angle), math.cos(angle))
+            bigger = max(abs(self.increment.i), abs(self.increment.j))
+            self.increment /= bigger
+            self.location = coord(game.quadrant.i*QUADSIZE + game.sector.i, 
+                               game.quadrant.j*QUADSIZE + game.sector.j)
+            self.loc = copy.copy(game.quadrant)
+            self.moves = 10.0*self.distance*bigger +0.5
+    def power(self):
+	return self.distance*(self.warp**3)*(game.shldup+1)
+    def time(self):
+        return 10.0*self.distance/self.warp**2
+    def next(self):
+        "Next location on course, currently only at quadrant granularity."
+        self.location += self.increment
+        newloc = (self.location / float(QUADSIZE)).snaptogrid()
+        if not newloc == self.loc:
+            self.loc = newloc
+            return True
+        else:
+            return False
+
 def impulse():
     "Move under impulse power."
     game.ididit = False
@@ -3942,9 +3969,11 @@
 	prout(_("Engineer Scott- \"The impulse engines are damaged, Sir.\""))
 	return
     if game.energy > 30.0:
-        if not getcourse(isprobe=False):
+        try:
+            course = getcourse(isprobe=False)
+        except TrekError:
 	    return
-	power = 20.0 + 100.0*game.dist
+	power = 20.0 + 100.0*course.distance
     else:
 	power = 30.0
     if power >= game.energy:
@@ -3961,7 +3990,7 @@
 	scanner.chew()
 	return
     # Make sure enough time is left for the trip 
-    game.optime = game.dist/0.095
+    game.optime = course.dist/0.095
     if game.optime >= game.state.remtime:
 	prout(_("First Officer Spock- \"Captain, our speed under impulse"))
 	prout(_("power is only 0.95 sectors per stardate. Are you sure"))
@@ -3969,26 +3998,26 @@
 	if ja() == False:
 	    return
     # Activate impulse engines and pay the cost 
-    imove(novapush=False)
+    imove(course, novapush=False)
     game.ididit = True
     if game.alldone:
 	return
-    power = 20.0 + 100.0*game.dist
+    power = 20.0 + 100.0*course.dist
     game.energy -= power
-    game.optime = game.dist/0.095
+    game.optime = course.dist/0.095
     if game.energy <= 0:
 	finish(FNRG)
     return
 
-def warp(timewarp):
+def warp(course, involuntary):
     "ove under warp drive."
     blooey = False; twarp = False
-    if not timewarp: # Not WARPX entry 
+    if not involuntary: # Not WARPX entry 
 	game.ididit = False
 	if game.damage[DWARPEN] > 10.0:
 	    scanner.chew()
 	    skip(1)
-	    prout(_("Engineer Scott- \"The impulse engines are damaged, Sir.\""))
+	    prout(_("Engineer Scott- \"The warp engines are damaged, Sir.\""))
 	    return
 	if damaged(DWARPEN) and game.warpfac > 4.0:
 	    scanner.chew()
@@ -3996,18 +4025,22 @@
 	    prout(_("Engineer Scott- \"Sorry, Captain. Until this damage"))
 	    prout(_("  is repaired, I can only give you warp 4.\""))
 	    return
-       	# Read in course and distance 
-        if not getcourse(isprobe=False):
-	    return
-	# Make sure starship has enough energy for the trip 
-	power = (game.dist+0.05)*game.warpfac*game.warpfac*game.warpfac*(game.shldup+1)
-	if power >= game.energy:
+       	# Read in course and distance
+        if course==None:
+            try:
+                course = getcourse(isprobe=False)
+            except TrekError:
+                return
+	# Make sure starship has enough energy for the trip
+        # Note: this formula is slightly different from the C version,
+        # and lets you skate a bit closer to the edge.
+	if course.power() >= game.energy:
 	    # Insufficient power for trip 
 	    game.ididit = False
 	    skip(1)
 	    prout(_("Engineering to bridge--"))
 	    if not game.shldup or 0.5*power > game.energy:
-		iwarp = math.pow((game.energy/(game.dist+0.05)), 0.333333333)
+		iwarp = (game.energy/(course.dist+0.05)) ** 0.333333333
 		if iwarp <= 0:
 		    prout(_("We can't do it, Captain. We don't have enough energy."))
 		else:
@@ -4019,10 +4052,9 @@
 			prout(".")
 	    else:
 		prout(_("We haven't the energy to go that far with the shields up."))
-	    return
-						
+	    return				
 	# Make sure enough time is left for the trip 
-	game.optime = 10.0*game.dist/game.warpfac**2
+	game.optime = course.time()
 	if game.optime >= 0.8*game.state.remtime:
 	    skip(1)
 	    prout(_("First Officer Spock- \"Captain, I compute that such"))
@@ -4038,12 +4070,12 @@
     if game.warpfac > 6.0:
 	# Decide if engine damage will occur
         # ESR: Seems wrong. Probability of damage goes *down* with distance? 
-	prob = game.dist*(6.0-game.warpfac)**2/66.666666666
+	prob = course.dist*(6.0-game.warpfac)**2/66.666666666
 	if prob > randreal():
 	    blooey = True
-	    game.dist = randreal(game.dist)
+	    course.distance = randreal(course.distance)
 	# Decide if time warp will occur 
-	if 0.5*game.dist*math.pow(7.0,game.warpfac-10.0) > randreal():
+	if 0.5*course.dist*math.pow(7.0,game.warpfac-10.0) > randreal():
 	    twarp = True
 	if idebug and game.warpfac==10 and not twarp:
 	    blooey = False
@@ -4053,7 +4085,7 @@
 	if blooey or twarp:
 	    # If time warp or engine damage, check path 
 	    # If it is obstructed, don't do warp or damage 
-	    angle = ((15.0-game.direc)*0.5235998)
+	    angle = ((15.0-course.bearing)*0.5235998)
 	    deltax = -math.sin(angle)
 	    deltay = math.cos(angle)
 	    if math.fabs(deltax) > math.fabs(deltay):
@@ -4062,7 +4094,7 @@
 		bigger = math.fabs(deltay)
 	    deltax /= bigger
 	    deltay /= bigger
-	    n = 10.0 * game.dist * bigger +0.5
+	    n = 10.0 * course.distance * bigger +0.5
 	    x = game.sector.i
 	    y = game.sector.j
 	    for l in range(1, n+1):
@@ -4076,13 +4108,13 @@
 		    blooey = False
 		    twarp = False
     # Activate Warp Engines and pay the cost 
-    imove(novapush=False)
+    imove(course, novapush=False)
     if game.alldone:
 	return
-    game.energy -= game.dist*game.warpfac*game.warpfac*game.warpfac*(game.shldup+1)
+    game.energy -= course.power()
     if game.energy <= 0:
 	finish(FNRG)
-    game.optime = 10.0*game.dist/game.warpfac**2
+    game.optime = course.time()
     if twarp:
 	timwrp()
     if blooey:
@@ -4189,15 +4221,15 @@
 	game.warpfac = randreal(6.0, 8.0)
 	prout(_("Warp factor set to %d") % int(game.warpfac))
 	power = 0.75*game.energy
-	game.dist = power/(game.warpfac*game.warpfac*game.warpfac*(game.shldup+1))
+	dist = power/(game.warpfac*game.warpfac*game.warpfac*(game.shldup+1))
 	distreq = randreal(math.sqrt(2))
 	if distreq < game.dist:
-	    game.dist = distreq
-	game.optime = 10.0*game.dist/game.warpfac**2
-	game.direc = randreal(12)	# How dumb! 
+	    dist = distreq
+        course = course(distance=dist, bearing=randreal(12))	# How dumb!
+	game.optime = course.time()
 	game.justin = False
 	game.inorbit = False
-	warp(True)
+	warp(course, involuntary=True)
 	if not game.justin:
 	    # This is bad news, we didn't leave quadrant. 
 	    if game.alldone:
@@ -4234,7 +4266,6 @@
 	unschedule(FCDBAS)
 	unschedule(FSCDBAS)
 	game.battle.invalidate()
-
 	# Make sure Galileo is consistant -- Snapshot may have been taken
         # when on planet, which would give us two Galileos! 
 	gotit = False
@@ -4305,17 +4336,11 @@
 	game.isarmed = ja()
     elif key == "IHREAL":		# first element of course
         scanner.push(scanner.token)
-    if not getcourse(isprobe=True):
-	return
+    try:
+        game.probe = getcourse(isprobe=True)
+    except TrekError:
+        return
     game.nprobes -= 1
-    angle = ((15.0 - game.direc) * 0.5235988)
-    game.probein = coord(-math.sin(angle), math.cos(angle))
-    bigger = max(abs(game.probein.i), abs(game.probein.j))
-    game.probein /= bigger
-    game.proben = 10.0*game.dist*bigger +0.5
-    game.probe = coord(game.quadrant.i*QUADSIZE + game.sector.i, 
-                       game.quadrant.j*QUADSIZE + game.sector.j)
-    game.probec = copy.copy(game.quadrant)
     schedule(FDSPROB, 0.01) # Time to move one sector
     prout(_("Ensign Chekov-  \"The deep space probe is launched, Captain.\""))
     game.ididit = True
@@ -5287,7 +5312,7 @@
     if not VALID_QUADRANT(w1.i, w1.j) or not VALID_SECTOR(w2.i, w2.j):
 	huh()
 	return
-    game.dist = math.sqrt((w1.j-game.quadrant.j+(w2.j-game.sector.j)/(QUADSIZE*1.0))**2+
+    dist = math.sqrt((w1.j-game.quadrant.j+(w2.j-game.sector.j)/(QUADSIZE*1.0))**2+
 		(w1.i-game.quadrant.i+(w2.i-game.sector.i)/(QUADSIZE*1.0))**2)
     wfl = False
     if prompt:
@@ -5299,7 +5324,7 @@
 	    ttime = scanner.real
 	    if ttime > game.state.date:
 		ttime -= game.state.date # Actually a star date
-            twarp=(math.floor(math.sqrt((10.0*game.dist)/ttime)*10.0)+1.0)/10.0
+            twarp=(math.floor(math.sqrt((10.0*dist)/ttime)*10.0)+1.0)/10.0
             if ttime <= 1e-10 or twarp > 10:
 		prout(_("We'll never make it, sir."))
 		scanner.chew()
@@ -5320,7 +5345,7 @@
     while True:
 	scanner.chew()
 	ttime = (10.0*game.dist)/twarp**2
-	tpower = game.dist*twarp*twarp*twarp*(game.shldup+1)
+	tpower = dist*twarp*twarp*twarp*(game.shldup+1)
 	if tpower >= game.energy:
 	    prout(_("Insufficient energy, sir."))
 	    if not game.shldup or tpower > game.energy*2.0:
@@ -6037,10 +6062,8 @@
             proutn(_("   current directory or to "))
             proutn(SSTDOC)
             prout(".\"")
-            #
             # This used to continue: "You need to find SST.DOC and put 
             # it in the current directory."
-            # 
             return
     while True:
         linebuf = fp.readline()
@@ -6112,7 +6135,7 @@
 	    if game.ididit:
 		hitme = True
 	elif cmd == "MOVE":		# move under warp
-	    warp(False)
+	    warp(course=None, involuntary=False)
 	elif cmd == "SHIELDS":		# shields
 	    doshield(shraise=False)
 	    if game.ididit:



From esr at mail.berlios.de  Wed Oct 11 23:22:08 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 11 Oct 2006 23:22:08 +0200
Subject: [Sst-commit-watch] r750 - trunk/src
Message-ID: <200610112122.k9BLM8tg031511@sheep.berlios.de>

Author: esr
Date: 2006-10-11 23:22:07 +0200 (Wed, 11 Oct 2006)
New Revision: 750

Modified:
   trunk/src/sst.py
Log:
Fix the probe bug.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-11 13:04:38 UTC (rev 749)
+++ trunk/src/sst.py	2006-10-11 21:22:07 UTC (rev 750)
@@ -252,8 +252,10 @@
         return coord(self.i/other, self.j/other)
     def __rdiv__(self, other):
         return coord(self.i/other, self.j/other)
-    def snaptogrid(self):
+    def roundtogrid(self):
         return coord(int(round(self.i)), int(round(self.j)))
+    def trunctogrid(self):
+        return coord(int(round(self.i)), int(round(self.j)))
     def distance(self, other=None):
         if not other: other = coord(0, 0)
         return math.sqrt((self.i - other.i)**2 + (self.j - other.j)**2)
@@ -1277,7 +1279,7 @@
     # Loop to move a single torpedo 
     for step in range(1, QUADSIZE*2):
 	ungridded += delta
-	w = ungridded.snaptogrid()
+	w = ungridded.roundtogrid()
 	if not VALID_SECTOR(w.i, w.j):
 	    break
 	iquad=game.quad[w.i][w.j]
@@ -2454,7 +2456,7 @@
 		supercommander()
 	elif evcode == FDSPROB: # Move deep space probe 
 	    schedule(FDSPROB, 0.01)
-            if game.probe.next():
+            if game.probe.nextquad():
 		if not VALID_QUADRANT(game.probe.loc.i, game.probe.loc.j) or \
 		    game.state.galaxy[game.probe.loc.i][game.probe.loc.j].supernova:
 		    # Left galaxy or ran into supernova
@@ -3950,10 +3952,10 @@
 	return self.distance*(self.warp**3)*(game.shldup+1)
     def time(self):
         return 10.0*self.distance/self.warp**2
-    def next(self):
-        "Next location on course, currently only at quadrant granularity."
+    def nextquad(self):
+        "Next location on course, at quadrant granularity."
         self.location += self.increment
-        newloc = (self.location / float(QUADSIZE)).snaptogrid()
+        newloc = (self.location / float(QUADSIZE)).trunctogrid()
         if not newloc == self.loc:
             self.loc = newloc
             return True



From esr at mail.berlios.de  Thu Oct 12 12:37:23 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 12 Oct 2006 12:37:23 +0200
Subject: [Sst-commit-watch] r751 - trunk/src
Message-ID: <200610121037.k9CAbN6s012757@sheep.berlios.de>

Author: esr
Date: 2006-10-12 12:37:21 +0200 (Thu, 12 Oct 2006)
New Revision: 751

Modified:
   trunk/src/sst.py
Log:
Probe navigation is now handled completely by the course object.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-11 21:22:07 UTC (rev 750)
+++ trunk/src/sst.py	2006-10-12 10:37:21 UTC (rev 751)
@@ -1261,24 +1261,22 @@
 	finish(FWON)
     return
 
-def torpedo(origin, course, dispersion, number, nburst):
+def torpedo(origin, bearing, dispersion, number, nburst):
     "Let a photon torpedo fly" 
     if not damaged(DSRSENS) or game.condition=="docked":
 	setwnd(srscan_window)
     else: 
 	setwnd(message_window)
     shoved = False
-    ac = course + 0.25*dispersion
-    angle = (15.0-ac)*0.5235988
-    bullseye = (15.0 - course)*0.5235988
-    delta = coord(-math.sin(angle), math.cos(angle))          
-    bigger = max(abs(delta.i), abs(delta.j))
-    delta /= bigger
+    ac = bearing + 0.25*dispersion	# dispersion is a random variable
+    bullseye = (15.0 - bearing)*0.5235988
+    track = course(bearing=ac, distance=QUADSIZE, origin=cartesian(origin)) 
+    # delta === track.increment
     w = coord(0, 0); jw = coord(0, 0)
     ungridded = copy.copy(origin)
     # Loop to move a single torpedo 
     for step in range(1, QUADSIZE*2):
-	ungridded += delta
+	ungridded += track.increment
 	w = ungridded.roundtogrid()
 	if not VALID_SECTOR(w.i, w.j):
 	    break
@@ -1299,7 +1297,7 @@
 	    # We may be displaced. 
 	    if game.landed or game.condition=="docked":
 		return hit # Cheat if on a planet 
-	    ang = angle + 2.5*(randreal()-0.5)
+	    ang = track.angle + 2.5*(randreal()-0.5)
 	    temp = math.fabs(math.sin(ang))
 	    if math.fabs(math.cos(ang)) > temp:
 		temp = math.fabs(math.cos(ang))
@@ -1329,7 +1327,7 @@
 		    break
 	    kp = math.fabs(enemy.kpower)
 	    h1 = 700.0 + randrange(100) - \
-		1000.0 * (w-origin).distance() * math.fabs(math.sin(bullseye-angle))
+		1000.0 * (w-origin).distance() * math.fabs(math.sin(bullseye-track.angle))
 	    h1 = math.fabs(h1)
 	    if kp < h1:
 		h1 = kp
@@ -1342,7 +1340,7 @@
 		return None
 	    proutn(crmena(True, iquad, "sector", w))
 	    # If enemy damaged but not destroyed, try to displace 
-	    ang = angle + 2.5*(randreal()-0.5)
+	    ang = track.angle + 2.5*(randreal()-0.5)
 	    temp = math.fabs(math.sin(ang))
 	    if math.fabs(math.cos(ang)) > temp:
 		temp = math.fabs(math.cos(ang))
@@ -2456,27 +2454,27 @@
 		supercommander()
 	elif evcode == FDSPROB: # Move deep space probe 
 	    schedule(FDSPROB, 0.01)
-            if game.probe.nextquad():
-		if not VALID_QUADRANT(game.probe.loc.i, game.probe.loc.j) or \
-		    game.state.galaxy[game.probe.loc.i][game.probe.loc.j].supernova:
+            if game.probe.next(grain=QUADSIZE):
+		if not VALID_QUADRANT(game.probe.quadrant().i, game.probe.quadrant().j) or \
+		    game.state.galaxy[game.probe.quadrant().i][game.probe.quadrant().j].supernova:
 		    # Left galaxy or ran into supernova
                     if communicating():
 			announce()
 			skip(1)
 			proutn(_("Lt. Uhura-  \"The deep space probe "))
-			if not VALID_QUADRANT(game.probe.loc.i, game.probe.loc.j):
-			    proutn(_("has left the galaxy.\""))
+			if not VALID_QUADRANT(game.probe.quadrant().i, game.probe.quadrant().j):
+			    prout(_("has left the galaxy.\""))
 			else:
-			    proutn(_("is no longer transmitting.\""))
+			    prout(_("is no longer transmitting.\""))
 		    unschedule(FDSPROB)
 		    continue
                 if communicating():
 		    #announce()
 		    skip(1)
-		    prout(_("Lt. Uhura-  \"The deep space probe is now in Quadrant %s.\"") % game.probe.loc)
-	    pdest = game.state.galaxy[game.probe.loc.i][game.probe.loc.j]
+		    prout(_("Lt. Uhura-  \"The deep space probe is now in Quadrant %s.\"") % game.probe.quadrant())
+	    pdest = game.state.galaxy[game.probe.quadrant().i][game.probe.quadrant().j]
 	    if communicating():
-		chp = game.state.chart[game.probe.loc.i][game.probe.loc.j]
+		chp = game.state.chart[game.probe.quadrant().i][game.probe.quadrant().j]
 		chp.klingons = pdest.klingons
 		chp.starbase = pdest.starbase
 		chp.stars = pdest.stars
@@ -2485,7 +2483,7 @@
 	    if game.probe.moves == 0 and game.isarmed and pdest.stars:
 		supernova(game.probe)		# fire in the hole!
 		unschedule(FDSPROB)
-		if game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova: 
+		if game.state.galaxy[game.quadrant().i][game.quadrant().j].supernova: 
 		    return
 	elif evcode == FDISTR: # inhabited system issues distress call 
 	    unschedule(FDISTR)
@@ -2755,12 +2753,12 @@
 	dist = 0.0
     if dist == 0.0:
 	return
-    course = course(distance=dist, bearing=direc, warp=4)
-    game.optime = course.time()
+    course = course(bearing=direc, distance=dist)
+    game.optime = course.time(warp=4)
     skip(1)
     prout(_("Force of nova displaces starship."))
     imove(course, novapush=True)
-    game.optime = course.time()
+    game.optime = course.time(warp=4)
     return
 	
 def supernova(w):
@@ -3794,6 +3792,14 @@
 # because it involves giving x and y motions, yet the coordinates
 # are always displayed y - x, where +y is downward!
 
+def cartesian(loc1=None, loc2=None):
+    if loc1 is None:
+        return game.quadrant * QUADSIZE + game.sector
+    elif loc2 is None:
+        return game.quadrant * QUADSIZE + loc1
+    else:
+        return loc1 * QUADSIZE + loc2
+
 def getcourse(isprobe):
     "Get a course and distance from the user."
     key = 0
@@ -3842,6 +3848,7 @@
 		prout(_("(Manual movement assumed.)"))
 	    navmode = "manual"
 	    break
+    delta = coord()
     if navmode == "automatic":
 	while key == "IHEOL":
 	    if isprobe:
@@ -3896,7 +3903,6 @@
 	    else:
 		prout(_("Ensign Chekov- \"Course laid in, Captain.\""))
         # the actual deltas get computed here
-        delta = coord()
 	delta.j = dquad.j-game.quadrant.j + (dsect.j-game.sector.j)/(QUADSIZE*1.0)
 	delta.i = game.quadrant.i-dquad.i + (game.sector.i-dsect.i)/(QUADSIZE*1.0)
     else: # manual 
@@ -3923,44 +3929,42 @@
 	skip(1)
 	prout(_("Helmsman Sulu- \"Aye, Sir.\""))
     scanner.chew()
-    return course(delta.distance(), delta.bearing(), isprobe=isprobe)
+    return course(bearing=delta.bearing(), distance=delta.distance())
 
 class course:
-    # Eventually, we want to consolidate all course compuation here,
-    # including for torpedos and the Enterprise.
-    def __init__(self, distance, bearing, warp=None, isprobe=False): 
-        # Course actually laid in -- thisis straight from the old getcd().
+    def __init__(self, bearing, distance, origin=None): 
         self.distance = distance
         self.bearing = bearing
-        self.warp = warp or game.warpfac
-        self.isprobe = isprobe
-        # This odd relic suggests that the bearing() code we inherited from
-        # FORTRAN is actually computing clockface directions.
+        # The bearing() code we inherited from FORTRAN is actually computing
+        # clockface directions!
         if self.bearing < 0.0:
             self.bearing += 12.0
-        # This code was moved from the probe() routine
-        if isprobe:
-            angle = ((15.0 - self.bearing) * 0.5235988)
-            self.increment = coord(-math.sin(angle), math.cos(angle))
-            bigger = max(abs(self.increment.i), abs(self.increment.j))
-            self.increment /= bigger
-            self.location = coord(game.quadrant.i*QUADSIZE + game.sector.i, 
-                               game.quadrant.j*QUADSIZE + game.sector.j)
-            self.loc = copy.copy(game.quadrant)
-            self.moves = 10.0*self.distance*bigger +0.5
-    def power(self):
-	return self.distance*(self.warp**3)*(game.shldup+1)
-    def time(self):
-        return 10.0*self.distance/self.warp**2
-    def nextquad(self):
-        "Next location on course, at quadrant granularity."
-        self.location += self.increment
-        newloc = (self.location / float(QUADSIZE)).trunctogrid()
-        if not newloc == self.loc:
-            self.loc = newloc
+        self.angle = ((15.0 - self.bearing) * 0.5235988)
+        if origin is None:
+            self.location = cartesian(game.quadrant, game.sector)
+        self.increment = coord(-math.sin(self.angle), math.cos(self.angle))
+        bigger = max(abs(self.increment.i), abs(self.increment.j))
+        self.increment /= bigger
+        self.moves = 10*self.distance*bigger +0.5
+    def next(self, grain=1):
+        "Next step on course."
+        self.moves -=1
+        self.nextlocation = self.location + self.increment
+        oldloc = (self.location/grain).roundtogrid()
+        newloc = (self.nextlocation/grain).roundtogrid()
+        self.location = self.nextlocation
+        if newloc != oldloc:
             return True
         else:
             return False
+    def quadrant(self):
+        return (self.location / QUADSIZE).roundtogrid()
+    def sector(self):
+        return coord(self.location.i % QUADSIZE, self.location.j % QUADSIZE)
+    def power(self, warp):
+	return self.distance*(warp**3)*(game.shldup+1)
+    def time(self, warp):
+        return 10.0*self.distance/warp**2
 
 def impulse():
     "Move under impulse power."
@@ -4036,7 +4040,7 @@
 	# Make sure starship has enough energy for the trip
         # Note: this formula is slightly different from the C version,
         # and lets you skate a bit closer to the edge.
-	if course.power() >= game.energy:
+	if course.power(game.warpfac) >= game.energy:
 	    # Insufficient power for trip 
 	    game.ididit = False
 	    skip(1)
@@ -4056,7 +4060,7 @@
 		prout(_("We haven't the energy to go that far with the shields up."))
 	    return				
 	# Make sure enough time is left for the trip 
-	game.optime = course.time()
+	game.optime = course.time(game.warpfac)
 	if game.optime >= 0.8*game.state.remtime:
 	    skip(1)
 	    prout(_("First Officer Spock- \"Captain, I compute that such"))
@@ -4113,10 +4117,10 @@
     imove(course, novapush=False)
     if game.alldone:
 	return
-    game.energy -= course.power()
+    game.energy -= course.power(game.warpfac)
     if game.energy <= 0:
 	finish(FNRG)
-    game.optime = course.time()
+    game.optime = course.time(game.warpfac)
     if twarp:
 	timwrp()
     if blooey:
@@ -4227,7 +4231,7 @@
 	distreq = randreal(math.sqrt(2))
 	if distreq < game.dist:
 	    dist = distreq
-        course = course(distance=dist, bearing=randreal(12))	# How dumb!
+        course = course(bearing=randreal(12), distance=dist)	# How dumb!
 	game.optime = course.time()
 	game.justin = False
 	game.inorbit = False
@@ -5104,7 +5108,6 @@
     "Damage report."
     jdam = False
     scanner.chew()
-
     for i in range(NDEVICES):
 	if damaged(i):
 	    if not jdam:



From esr at mail.berlios.de  Thu Oct 12 14:01:05 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 12 Oct 2006 14:01:05 +0200
Subject: [Sst-commit-watch] r752 - trunk/src
Message-ID: <200610121201.k9CC15wv008498@sheep.berlios.de>

Author: esr
Date: 2006-10-12 14:01:04 +0200 (Thu, 12 Oct 2006)
New Revision: 752

Modified:
   trunk/src/sst.py
Log:
Torpedo-track computation now done by course object.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-12 10:37:21 UTC (rev 751)
+++ trunk/src/sst.py	2006-10-12 12:01:04 UTC (rev 752)
@@ -1271,13 +1271,11 @@
     ac = bearing + 0.25*dispersion	# dispersion is a random variable
     bullseye = (15.0 - bearing)*0.5235988
     track = course(bearing=ac, distance=QUADSIZE, origin=cartesian(origin)) 
-    # delta === track.increment
-    w = coord(0, 0); jw = coord(0, 0)
-    ungridded = copy.copy(origin)
+    jw = coord(0, 0)
     # Loop to move a single torpedo 
     for step in range(1, QUADSIZE*2):
-	ungridded += track.increment
-	w = ungridded.roundtogrid()
+	track.next()
+        w = track.sector()
 	if not VALID_SECTOR(w.i, w.j):
 	    break
 	iquad=game.quad[w.i][w.j]
@@ -3942,6 +3940,8 @@
         self.angle = ((15.0 - self.bearing) * 0.5235988)
         if origin is None:
             self.location = cartesian(game.quadrant, game.sector)
+        else:
+            self.location = cartesian(game.quadrant, origin)
         self.increment = coord(-math.sin(self.angle), math.cos(self.angle))
         bigger = max(abs(self.increment.i), abs(self.increment.j))
         self.increment /= bigger
@@ -3960,7 +3960,7 @@
     def quadrant(self):
         return (self.location / QUADSIZE).roundtogrid()
     def sector(self):
-        return coord(self.location.i % QUADSIZE, self.location.j % QUADSIZE)
+        return coord(int(round(self.location.i)) % QUADSIZE, int(round(self.location.j)) % QUADSIZE)
     def power(self, warp):
 	return self.distance*(warp**3)*(game.shldup+1)
     def time(self, warp):



From esr at mail.berlios.de  Thu Oct 12 15:27:14 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 12 Oct 2006 15:27:14 +0200
Subject: [Sst-commit-watch] r753 - trunk/src
Message-ID: <200610121327.k9CDREF9019134@sheep.berlios.de>

Author: esr
Date: 2006-10-12 15:27:13 +0200 (Thu, 12 Oct 2006)
New Revision: 753

Modified:
   trunk/src/sst.py
Log:
Eliminate traces of some macros.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-12 12:01:04 UTC (rev 752)
+++ trunk/src/sst.py	2006-10-12 13:27:13 UTC (rev 753)
@@ -201,10 +201,6 @@
 MAXBURST	= 3
 MINCMDR 	= 10
 
-# These functions hide the difference between 0-origin and 1-origin addressing.
-def VALID_QUADRANT(x, y):	return ((x)>=0 and (x)<GALSIZE and (y)>=0 and (y)<GALSIZE)
-def VALID_SECTOR(x, y):	return ((x)>=0 and (x)<QUADSIZE and (y)>=0 and (y)<QUADSIZE)
-
 # How to represent features
 IHR = 'R',
 IHK = 'K',
@@ -232,6 +228,10 @@
     def __init__(self, x=None, y=None):
         self.i = x
         self.j = y
+    def valid_quadrant(self):
+        return self.i>=0 and self.i<GALSIZE and self.j>=0 and self.j<GALSIZE
+    def valid_sector(self):
+	return self.i>=0 and self.i<QUADSIZE and self.j>=0 and self.j<QUADSIZE
     def invalidate(self):
         self.i = self.j = None
     def is_valid(self):
@@ -602,7 +602,7 @@
 
 def welcoming(iq):
     "Would this quadrant welcome another Klingon?"
-    return VALID_QUADRANT(iq.i,iq.j) and \
+    return iq.valid_quadrant() and \
 	not game.state.galaxy[iq.i][iq.j].supernova and \
 	game.state.galaxy[iq.i][iq.j].klingons < MAXKLQUAD
 
@@ -1276,7 +1276,7 @@
     for step in range(1, QUADSIZE*2):
 	track.next()
         w = track.sector()
-	if not VALID_SECTOR(w.i, w.j):
+	if not w.valid_sector():
 	    break
 	iquad=game.quad[w.i][w.j]
 	tracktorpedo(origin, w, step, number, nburst, iquad)
@@ -1303,7 +1303,7 @@
 	    yy = math.cos(ang)/temp
 	    jw.i = int(w.i+xx+0.5)
 	    jw.j = int(w.j+yy+0.5)
-	    if not VALID_SECTOR(jw.i, jw.j):
+	    if not jw.valid_sector():
 		return hit
 	    if game.quad[jw.i][jw.j]==IHBLANK:
 		finish(FHOLE)
@@ -1346,7 +1346,7 @@
 	    yy = math.cos(ang)/temp
 	    jw.i = int(w.i+xx+0.5)
 	    jw.j = int(w.j+yy+0.5)
-	    if not VALID_SECTOR(jw.i, jw.j):
+            if not jw.valid_sector():
 		prout(_(" damaged but not destroyed."))
 		return
 	    if game.quad[jw.i][jw.j]==IHBLANK:
@@ -1697,7 +1697,7 @@
 
 def targetcheck(w):
     "Return None if target is invalid, otherwise return a course angle."
-    if not VALID_SECTOR(w.i, w.j):
+    if not w.valid_sector():
 	huh()
 	return None
     delta = coord()
@@ -2453,14 +2453,14 @@
 	elif evcode == FDSPROB: # Move deep space probe 
 	    schedule(FDSPROB, 0.01)
             if game.probe.next(grain=QUADSIZE):
-		if not VALID_QUADRANT(game.probe.quadrant().i, game.probe.quadrant().j) or \
+		if not game.probe.quadrant().valid_quadrant() or \
 		    game.state.galaxy[game.probe.quadrant().i][game.probe.quadrant().j].supernova:
 		    # Left galaxy or ran into supernova
                     if communicating():
 			announce()
 			skip(1)
 			proutn(_("Lt. Uhura-  \"The deep space probe "))
-			if not VALID_QUADRANT(game.probe.quadrant().i, game.probe.quadrant().j):
+			if not game.probe.quadrant().valid_quadrant():
 			    prout(_("has left the galaxy.\""))
 			else:
 			    prout(_("is no longer transmitting.\""))
@@ -2544,14 +2544,15 @@
 		continue		# full right now 
 	    # reproduce one Klingon 
 	    w = ev.quadrant
+            m = coord()
 	    if game.klhere >= MAXKLQUAD:
                 try:
                     # this quadrant not ok, pick an adjacent one 
-                    for i in range(w.i - 1, w.i + 2):
-                        for j in range(w.j - 1, w.j + 2):
-                            if not VALID_QUADRANT(i, j):
+                    for m.i in range(w.i - 1, w.i + 2):
+                        for m.j in range(w.j - 1, w.j + 2):
+                            if not m.valid_quadrant():
                                 continue
-                            q = game.state.galaxy[w.i][w.j]
+                            q = game.state.galaxy[m.i][m.j]
                             # check for this quad ok (not full & no snova) 
                             if q.klingons >= MAXKLQUAD or q.supernova:
                                 continue
@@ -2559,7 +2560,7 @@
                     else:
                         continue	# search for eligible quadrant failed
                 except "FOUNDIT":
-                    w.i = i; w.j = j
+                    w = m
 	    # deliver the child 
 	    game.state.remkl += 1
 	    q.klingons += 1
@@ -2568,7 +2569,6 @@
 		game.enemies.append(newkling())
 	    # recompute time left
             game.recompute()
-	    # report the disaster if we can 
 	    if communicating():
 		if game.quadrant == w:
 		    prout(_("Spock- sensors indicate the Klingons have"))
@@ -2654,7 +2654,7 @@
                 if offset.j==0 and offset.i==0:
                     continue
                 neighbor = start + offset
-                if not VALID_SECTOR(neighbor.j, neighbor.i):
+                if not neighbor.valid_sector():
                     continue
                 iquad = game.quad[neighbor.i][neighbor.j]
                 # Empty space ends reaction
@@ -2726,7 +2726,7 @@
                         break
                     newc = neighbor + neighbor - hits[mm]
                     proutn(crmena(True, iquad, "sector", neighbor) + _(" damaged"))
-                    if not VALID_SECTOR(newc.i, newc.j):
+                    if not newc.valid_sector():
                         # can't leave quadrant 
                         skip(1)
                         break
@@ -3630,7 +3630,7 @@
             y += deltay
 	    w.i = int(round(x))
 	    w.j = int(round(y))
-	    if not VALID_SECTOR(w.i, w.j):
+	    if not w.valid_sector():
 		# Leaving quadrant -- allow final enemy attack 
 		# Don't do it if being pushed by Nova 
 		if len(game.enemies) != 0 and not novapush:
@@ -3890,7 +3890,7 @@
 		dsect.i = xi
 		dsect.j = xj
 	    itemp = "normal"
-	if not VALID_QUADRANT(dquad.i,dquad.j) or not VALID_SECTOR(dsect.i,dsect.j):
+	if not dquad.valid_quadrant() or not dsect.valid_sector():
 	    huh()
 	    raise TrekError
 	skip(1)
@@ -4108,7 +4108,7 @@
 		ix = x + 0.5
 		y += deltay
 		iy = y +0.5
-		if not VALID_SECTOR(ix, iy):
+		if not coord(ix, iy).valid_sector():
 		    break
 		if game.quad[ix][iy] != IHDOT:
 		    blooey = False
@@ -4390,7 +4390,7 @@
     game.sector.invalidate()
     for m in range(1, 5+1):
         w = game.base.scatter() 
-	if VALID_SECTOR(w.i,w.j) and game.quad[w.i][w.j]==IHDOT:
+	if w.valid_sector() and game.quad[w.i][w.j]==IHDOT:
 	    # found one -- finish up 
             game.sector = w
 	    break
@@ -4493,7 +4493,7 @@
 	    game.quad[game.sector.i][game.sector.j] = IHDOT
 	    for l in range(QUADSIZE):
 		game.sector = game.base.scatter()
-		if VALID_SECTOR(game.sector.i, game.sector.j) and \
+		if game.sector.valid_sector() and \
                        game.quad[game.sector.i][game.sector.j] == IHDOT:
                     break
 	    if l < QUADSIZE+1:
@@ -5089,7 +5089,7 @@
         if not silent:
             proutn(" ")
         for y in range(game.quadrant.j-1, game.quadrant.j+2):
-	    if not VALID_QUADRANT(x, y):
+	    if not coord(x, y).valid_quadrant():
                 if not silent:
                     proutn("  -1")
 	    else:
@@ -5314,7 +5314,7 @@
 	    w2.j = 0
 	else:
 	    w2.j=QUADSIZE-1
-    if not VALID_QUADRANT(w1.i, w1.j) or not VALID_SECTOR(w2.i, w2.j):
+    if not w1.valid_quadrant() or not w2.valid_sector():
 	huh()
 	return
     dist = math.sqrt((w1.j-game.quadrant.j+(w2.j-game.sector.j)/(QUADSIZE*1.0))**2+



From esr at mail.berlios.de  Thu Oct 12 15:43:32 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 12 Oct 2006 15:43:32 +0200
Subject: [Sst-commit-watch] r754 - trunk/src
Message-ID: <200610121343.k9CDhW1a020856@sheep.berlios.de>

Author: esr
Date: 2006-10-12 15:43:31 +0200 (Thu, 12 Oct 2006)
New Revision: 754

Modified:
   trunk/src/sst.py
Log:
Another step towards pulling all trig into the course object.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-12 13:27:13 UTC (rev 753)
+++ trunk/src/sst.py	2006-10-12 13:43:31 UTC (rev 754)
@@ -1271,7 +1271,7 @@
     ac = bearing + 0.25*dispersion	# dispersion is a random variable
     bullseye = (15.0 - bearing)*0.5235988
     track = course(bearing=ac, distance=QUADSIZE, origin=cartesian(origin)) 
-    jw = coord(0, 0)
+    bumpto = coord(0, 0)
     # Loop to move a single torpedo 
     for step in range(1, QUADSIZE*2):
 	track.next()
@@ -1290,9 +1290,8 @@
 	    skip(1)
 	    prout(_("Torpedo hits %s.") % crmshp())
 	    hit = 700.0 + randreal(100) - \
-		1000.0 * (w-origin).distance() * math.fabs(math.sin(bullseye-angle))
+		1000.0 * (w-origin).distance() * math.fabs(math.sin(bullseye-track.angle))
 	    newcnd(); # we're blown out of dock 
-	    # We may be displaced. 
 	    if game.landed or game.condition=="docked":
 		return hit # Cheat if on a planet 
 	    ang = track.angle + 2.5*(randreal()-0.5)
@@ -1301,17 +1300,17 @@
 		temp = math.fabs(math.cos(ang))
 	    xx = -math.sin(ang)/temp
 	    yy = math.cos(ang)/temp
-	    jw.i = int(w.i+xx+0.5)
-	    jw.j = int(w.j+yy+0.5)
-	    if not jw.valid_sector():
+	    bumpto.i = int(w.i+xx+0.5)
+	    bumpto.j = int(w.j+yy+0.5)
+	    if not bumpto.valid_sector():
 		return hit
-	    if game.quad[jw.i][jw.j]==IHBLANK:
+	    if game.quad[bumpto.i][bumpto.j]==IHBLANK:
 		finish(FHOLE)
 		return hit
-	    if game.quad[jw.i][jw.j]!=IHDOT:
+	    if game.quad[bumpto.i][bumpto.j]!=IHDOT:
 		# can't move into object 
 		return hit
-	    game.sector = jw
+	    game.sector = bumpto
 	    proutn(crmshp())
 	    shoved = True
 	elif iquad in (IHC, IHS, IHR, IHK): # Hit a regular enemy 
@@ -1344,21 +1343,21 @@
 		temp = math.fabs(math.cos(ang))
 	    xx = -math.sin(ang)/temp
 	    yy = math.cos(ang)/temp
-	    jw.i = int(w.i+xx+0.5)
-	    jw.j = int(w.j+yy+0.5)
-            if not jw.valid_sector():
+	    bumpto.i = int(w.i+xx+0.5)
+	    bumpto.j = int(w.j+yy+0.5)
+            if not bumpto.valid_sector():
 		prout(_(" damaged but not destroyed."))
 		return
-	    if game.quad[jw.i][jw.j]==IHBLANK:
+	    if game.quad[bumpto.i][bumpto.j] == IHBLANK:
 		prout(_(" buffeted into black hole."))
-		deadkl(w, iquad, jw)
+		deadkl(w, iquad, bumpto)
 		return None
-	    if game.quad[jw.i][jw.j]!=IHDOT:
+	    if game.quad[bumpto.i][bumpto.j] != IHDOT:
 		# can't move into object 
 		prout(_(" damaged but not destroyed."))
 		return None
 	    proutn(_(" damaged--"))
-	    enemy.kloc = jw
+	    enemy.kloc = bumpto
 	    shoved = True
 	    break
 	elif iquad == IHB: # Hit a base 
@@ -1460,8 +1459,8 @@
 	setwnd(message_window)
     if shoved:
 	game.quad[w.i][w.j]=IHDOT
-	game.quad[jw.i][jw.j]=iquad
-	prout(_(" displaced by blast to Sector %s ") % jw)
+	game.quad[bumpto.i][bumpto.j]=iquad
+	prout(_(" displaced by blast to Sector %s ") % bumpto)
 	for ll in range(len(game.enemies)):
 	    game.enemies[ll].kdist = game.enemies[ll].kavgd = (game.sector-game.enemies[ll].kloc).distance()
         game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))



From esr at mail.berlios.de  Thu Oct 12 23:48:49 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Thu, 12 Oct 2006 23:48:49 +0200
Subject: [Sst-commit-watch] r755 - trunk/src
Message-ID: <200610122148.k9CLmnVH024328@sheep.berlios.de>

Author: esr
Date: 2006-10-12 23:48:48 +0200 (Thu, 12 Oct 2006)
New Revision: 755

Modified:
   trunk/src/sst.py
Log:
Simplify the torpedo code preparatory to refactoring it.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-12 13:43:31 UTC (rev 754)
+++ trunk/src/sst.py	2006-10-12 21:48:48 UTC (rev 755)
@@ -1267,12 +1267,12 @@
 	setwnd(srscan_window)
     else: 
 	setwnd(message_window)
-    shoved = False
     ac = bearing + 0.25*dispersion	# dispersion is a random variable
     bullseye = (15.0 - bearing)*0.5235988
     track = course(bearing=ac, distance=QUADSIZE, origin=cartesian(origin)) 
     bumpto = coord(0, 0)
     # Loop to move a single torpedo 
+    setwnd(message_window)
     for step in range(1, QUADSIZE*2):
 	track.next()
         w = track.sector()
@@ -1283,7 +1283,6 @@
 	if iquad==IHDOT:
 	    continue
 	# hit something 
-	setwnd(message_window)
 	if damaged(DSRSENS) and not game.condition=="docked":
 	    skip(1);	# start new line after text track 
 	if iquad in (IHE, IHF): # Hit our ship 
@@ -1312,7 +1311,13 @@
 		return hit
 	    game.sector = bumpto
 	    proutn(crmshp())
-	    shoved = True
+            game.quad[w.i][w.j]=IHDOT
+            game.quad[bumpto.i][bumpto.j]=iquad
+            prout(_(" displaced by blast to Sector %s ") % bumpto)
+            for enemy in game.enemies:
+                enemy.kdist = enemy.kavgd = (game.sector-enemy.kloc).distance()
+            game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
+            return None
 	elif iquad in (IHC, IHS, IHR, IHK): # Hit a regular enemy 
 	    # find the enemy 
 	    if iquad in (IHC, IHS) and withprob(0.05):
@@ -1358,7 +1363,13 @@
 		return None
 	    proutn(_(" damaged--"))
 	    enemy.kloc = bumpto
-	    shoved = True
+            game.quad[w.i][w.j]=IHDOT
+            game.quad[bumpto.i][bumpto.j]=iquad
+            prout(_(" displaced by blast to Sector %s ") % bumpto)
+            for enemy in game.enemies:
+                enemy.kdist = enemy.kavgd = (game.sector-enemy.kloc).distance()
+            game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
+            return None
 	    break
 	elif iquad == IHB: # Hit a base 
 	    skip(1)
@@ -1455,16 +1466,6 @@
 	    skip(1)
 	    return None
 	break
-    if curwnd!=message_window:
-	setwnd(message_window)
-    if shoved:
-	game.quad[w.i][w.j]=IHDOT
-	game.quad[bumpto.i][bumpto.j]=iquad
-	prout(_(" displaced by blast to Sector %s ") % bumpto)
-	for ll in range(len(game.enemies)):
-	    game.enemies[ll].kdist = game.enemies[ll].kavgd = (game.sector-game.enemies[ll].kloc).distance()
-        game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
-	return None
     skip(1)
     prout(_("Torpedo missed."))
     return None;



From esr at mail.berlios.de  Fri Oct 13 00:04:28 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 13 Oct 2006 00:04:28 +0200
Subject: [Sst-commit-watch] r756 - trunk/src
Message-ID: <200610122204.k9CM4SfL025844@sheep.berlios.de>

Author: esr
Date: 2006-10-13 00:04:27 +0200 (Fri, 13 Oct 2006)
New Revision: 756

Modified:
   trunk/src/sst.py
Log:
Another refactoring step.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-12 21:48:48 UTC (rev 755)
+++ trunk/src/sst.py	2006-10-12 22:04:27 UTC (rev 756)
@@ -1356,21 +1356,17 @@
 	    if game.quad[bumpto.i][bumpto.j] == IHBLANK:
 		prout(_(" buffeted into black hole."))
 		deadkl(w, iquad, bumpto)
-		return None
 	    if game.quad[bumpto.i][bumpto.j] != IHDOT:
-		# can't move into object 
 		prout(_(" damaged but not destroyed."))
-		return None
-	    proutn(_(" damaged--"))
-	    enemy.kloc = bumpto
-            game.quad[w.i][w.j]=IHDOT
-            game.quad[bumpto.i][bumpto.j]=iquad
-            prout(_(" displaced by blast to Sector %s ") % bumpto)
-            for enemy in game.enemies:
-                enemy.kdist = enemy.kavgd = (game.sector-enemy.kloc).distance()
-            game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
+            else:
+                prout(_(" damaged-- displaced by blast to Sector %s ")%bumpto)
+                enemy.kloc = bumpto
+                game.quad[w.i][w.j]=IHDOT
+                game.quad[bumpto.i][bumpto.j]=iquad
+                for enemy in game.enemies:
+                    enemy.kdist = enemy.kavgd = (game.sector-enemy.kloc).distance()
+                game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
             return None
-	    break
 	elif iquad == IHB: # Hit a base 
 	    skip(1)
 	    prout(_("***STARBASE DESTROYED.."))



From esr at mail.berlios.de  Fri Oct 13 00:15:06 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 13 Oct 2006 00:15:06 +0200
Subject: [Sst-commit-watch] r757 - trunk/src
Message-ID: <200610122215.k9CMF6IX027007@sheep.berlios.de>

Author: esr
Date: 2006-10-13 00:15:05 +0200 (Fri, 13 Oct 2006)
New Revision: 757

Modified:
   trunk/src/sst.py
Log:
Restore some display behavior.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-12 22:04:27 UTC (rev 756)
+++ trunk/src/sst.py	2006-10-12 22:15:05 UTC (rev 757)
@@ -1283,7 +1283,7 @@
 	if iquad==IHDOT:
 	    continue
 	# hit something 
-	if damaged(DSRSENS) and not game.condition=="docked":
+	if not damaged(DSRSENS) or game.condition == "docked":
 	    skip(1);	# start new line after text track 
 	if iquad in (IHE, IHF): # Hit our ship 
 	    skip(1)
@@ -3521,7 +3521,7 @@
 	if step == 1:
 	    if n != 1:
 		skip(1)
-		proutn(_("Track for %s torpedo number %d-  ") % (game.quad[origin.i][origin.j],i+1))
+		proutn(_("Track for torpedo number %d-  ") % (i+1))
 	    else:
 		skip(1)
 		proutn(_("Torpedo track- "))



From esr at mail.berlios.de  Fri Oct 13 04:46:17 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 13 Oct 2006 04:46:17 +0200
Subject: [Sst-commit-watch] r758 - trunk/src
Message-ID: <200610130246.k9D2kH54027151@sheep.berlios.de>

Author: esr
Date: 2006-10-13 04:46:16 +0200 (Fri, 13 Oct 2006)
New Revision: 758

Modified:
   trunk/src/sst.py
Log:
Another step in subsuming navigation into the course object.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-12 22:15:05 UTC (rev 757)
+++ trunk/src/sst.py	2006-10-13 02:46:16 UTC (rev 758)
@@ -3619,9 +3619,9 @@
     game.quad[game.sector.i][game.sector.j] = IHDOT
     x = game.sector.i
     y = game.sector.j
-    n = int(10.0*course.distance*bigger+0.5)
+    n = course.moves
     if n > 0:
-	for m in range(1, n+1):
+	for m in range(n):
             x += deltax
             y += deltay
 	    w.i = int(round(x))
@@ -3941,7 +3941,7 @@
         self.increment = coord(-math.sin(self.angle), math.cos(self.angle))
         bigger = max(abs(self.increment.i), abs(self.increment.j))
         self.increment /= bigger
-        self.moves = 10*self.distance*bigger +0.5
+        self.moves = int(round(10*self.distance*bigger))
     def next(self, grain=1):
         "Next step on course."
         self.moves -=1



From esr at mail.berlios.de  Fri Oct 13 04:50:48 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 13 Oct 2006 04:50:48 +0200
Subject: [Sst-commit-watch] r759 - trunk/src
Message-ID: <200610130250.k9D2omqf027585@sheep.berlios.de>

Author: esr
Date: 2006-10-13 04:50:47 +0200 (Fri, 13 Oct 2006)
New Revision: 759

Modified:
   trunk/src/sst.py
Log:
More course-object refactoring.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-13 02:46:16 UTC (rev 758)
+++ trunk/src/sst.py	2006-10-13 02:50:47 UTC (rev 759)
@@ -3619,130 +3619,128 @@
     game.quad[game.sector.i][game.sector.j] = IHDOT
     x = game.sector.i
     y = game.sector.j
-    n = course.moves
-    if n > 0:
-	for m in range(n):
-            x += deltax
-            y += deltay
-	    w.i = int(round(x))
-	    w.j = int(round(y))
-	    if not w.valid_sector():
-		# Leaving quadrant -- allow final enemy attack 
-		# Don't do it if being pushed by Nova 
-		if len(game.enemies) != 0 and not novapush:
-		    newcnd()
-		    for enemy in game.enemies:
-			finald = (w - enemy.kloc).distance()
-			enemy.kavgd = 0.5 * (finald + enemy.kdist)
-		    #
-		    # Stas Sergeev added the condition
-		    # that attacks only happen if Klingons
-		    # are present and your skill is good.
-		    # 
-		    if game.skill > SKILL_GOOD and game.klhere > 0 and not game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova:
-			attack(torps_ok=False)
-		    if game.alldone:
-			return
-		# compute final position -- new quadrant and sector 
-		x = (QUADSIZE*game.quadrant.i)+game.sector.i
-		y = (QUADSIZE*game.quadrant.j)+game.sector.j
-		w.i = int(round(x+QUADSIZE*course.distance*bigger*deltax))
-		w.j = int(round(y+QUADSIZE*course.distance*bigger*deltay))
-		# check for edge of galaxy 
-		kinks = 0
-                while True:
-		    kink = False
-		    if w.i < 0:
-			w.i = -w.i
-			kink = True
-		    if w.j < 0:
-			w.j = -w.j
-			kink = True
-		    if w.i >= GALSIZE*QUADSIZE:
-			w.i = (GALSIZE*QUADSIZE*2) - w.i
-			kink = True
-		    if w.j >= GALSIZE*QUADSIZE:
-			w.j = (GALSIZE*QUADSIZE*2) - w.j
-			kink = True
-		    if kink:
-			kinks += 1
-                    else:
+    for m in range(course.moves):
+        x += deltax
+        y += deltay
+        w.i = int(round(x))
+        w.j = int(round(y))
+        if not w.valid_sector():
+            # Leaving quadrant -- allow final enemy attack 
+            # Don't do it if being pushed by Nova 
+            if len(game.enemies) != 0 and not novapush:
+                newcnd()
+                for enemy in game.enemies:
+                    finald = (w - enemy.kloc).distance()
+                    enemy.kavgd = 0.5 * (finald + enemy.kdist)
+                #
+                # Stas Sergeev added the condition
+                # that attacks only happen if Klingons
+                # are present and your skill is good.
+                # 
+                if game.skill > SKILL_GOOD and game.klhere > 0 and not game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova:
+                    attack(torps_ok=False)
+                if game.alldone:
+                    return
+            # compute final position -- new quadrant and sector 
+            x = (QUADSIZE*game.quadrant.i)+game.sector.i
+            y = (QUADSIZE*game.quadrant.j)+game.sector.j
+            w.i = int(round(x+QUADSIZE*course.distance*bigger*deltax))
+            w.j = int(round(y+QUADSIZE*course.distance*bigger*deltay))
+            # check for edge of galaxy 
+            kinks = 0
+            while True:
+                kink = False
+                if w.i < 0:
+                    w.i = -w.i
+                    kink = True
+                if w.j < 0:
+                    w.j = -w.j
+                    kink = True
+                if w.i >= GALSIZE*QUADSIZE:
+                    w.i = (GALSIZE*QUADSIZE*2) - w.i
+                    kink = True
+                if w.j >= GALSIZE*QUADSIZE:
+                    w.j = (GALSIZE*QUADSIZE*2) - w.j
+                    kink = True
+                if kink:
+                    kinks += 1
+                else:
+                    break
+            if kinks:
+                game.nkinks += 1
+                if game.nkinks == 3:
+                    # Three strikes -- you're out! 
+                    finish(FNEG3)
+                    return
+                skip(1)
+                prout(_("YOU HAVE ATTEMPTED TO CROSS THE NEGATIVE ENERGY BARRIER"))
+                prout(_("AT THE EDGE OF THE GALAXY.  THE THIRD TIME YOU TRY THIS,"))
+                prout(_("YOU WILL BE DESTROYED."))
+            # Compute final position in new quadrant 
+            if trbeam: # Don't bother if we are to be beamed 
+                return
+            game.quadrant.i = w.i/QUADSIZE
+            game.quadrant.j = w.j/QUADSIZE
+            game.sector.i = w.i - (QUADSIZE*game.quadrant.i)
+            game.sector.j = w.j - (QUADSIZE*game.quadrant.j)
+            skip(1)
+            prout(_("Entering Quadrant %s.") % game.quadrant)
+            game.quad[game.sector.i][game.sector.j] = game.ship
+            newqad()
+            if game.skill>SKILL_NOVICE:
+                attack(torps_ok=False)  
+            return
+        iquad = game.quad[w.i][w.j]
+        if iquad != IHDOT:
+            # object encountered in flight path 
+            stopegy = 50.0*course.dist/game.optime
+            course.distance = (game.sector - w).distance() / (QUADSIZE * 1.0)
+            if iquad in (IHT, IHK, IHC, IHS, IHR, IHQUEST):
+                game.sector = w
+                for enemy in game.enemies:
+                    if enemy.kloc == game.sector:
                         break
-		if kinks:
-		    game.nkinks += 1
-		    if game.nkinks == 3:
-			# Three strikes -- you're out! 
-			finish(FNEG3)
-			return
-		    skip(1)
-		    prout(_("YOU HAVE ATTEMPTED TO CROSS THE NEGATIVE ENERGY BARRIER"))
-		    prout(_("AT THE EDGE OF THE GALAXY.  THE THIRD TIME YOU TRY THIS,"))
-		    prout(_("YOU WILL BE DESTROYED."))
-		# Compute final position in new quadrant 
-		if trbeam: # Don't bother if we are to be beamed 
-		    return
-		game.quadrant.i = w.i/QUADSIZE
-		game.quadrant.j = w.j/QUADSIZE
-		game.sector.i = w.i - (QUADSIZE*game.quadrant.i)
-		game.sector.j = w.j - (QUADSIZE*game.quadrant.j)
-		skip(1)
-		prout(_("Entering Quadrant %s.") % game.quadrant)
-		game.quad[game.sector.i][game.sector.j] = game.ship
-		newqad()
-		if game.skill>SKILL_NOVICE:
-		    attack(torps_ok=False)  
-		return
-	    iquad = game.quad[w.i][w.j]
-	    if iquad != IHDOT:
-		# object encountered in flight path 
-		stopegy = 50.0*course.dist/game.optime
-		course.distance = (game.sector - w).distance() / (QUADSIZE * 1.0)
-                if iquad in (IHT, IHK, IHC, IHS, IHR, IHQUEST):
-		    game.sector = w
-                    for enemy in game.enemies:
-                        if enemy.kloc == game.sector:
-                            break
-		    collision(rammed=False, enemy=enemy)
-		    final = game.sector
-		elif iquad == IHBLANK:
-		    skip(1)
-		    prouts(_("***RED ALERT!  RED ALERT!"))
-		    skip(1)
-		    proutn("***" + crmshp())
-		    proutn(_(" pulled into black hole at Sector %s") % w)
-		    # Getting pulled into a black hole was certain
-		    # death in Almy's original.  Stas Sergeev added a
-		    # possibility that you'll get timewarped instead.
-		    n=0
-		    for m in range(NDEVICES):
-			if game.damage[m]>0: 
-			    n += 1
-		    probf=math.pow(1.4,(game.energy+game.shield)/5000.0-1.0)*math.pow(1.3,1.0/(n+1)-1.0)
-		    if (game.options & OPTION_BLKHOLE) and withprob(1-probf): 
-			timwrp()
-		    else: 
-			finish(FHOLE)
-		    return
-		else:
-		    # something else 
-		    skip(1)
-		    proutn(crmshp())
-		    if iquad == IHWEB:
-			prout(_(" encounters Tholian web at %s;") % w)
-		    else:
-			prout(_(" blocked by object at %s;") % w)
-		    proutn(_("Emergency stop required "))
-		    prout(_("%2d units of energy.") % int(stopegy))
-		    game.energy -= stopegy
-		    final.i = int(round(deltax))
-		    final.j = int(round(deltay))
-		    game.sector = final
-		    if game.energy <= 0:
-			finish(FNRG)
-			return
-                # We're here!
-		no_quad_change()
+                collision(rammed=False, enemy=enemy)
+                final = game.sector
+            elif iquad == IHBLANK:
+                skip(1)
+                prouts(_("***RED ALERT!  RED ALERT!"))
+                skip(1)
+                proutn("***" + crmshp())
+                proutn(_(" pulled into black hole at Sector %s") % w)
+                # Getting pulled into a black hole was certain
+                # death in Almy's original.  Stas Sergeev added a
+                # possibility that you'll get timewarped instead.
+                n=0
+                for m in range(NDEVICES):
+                    if game.damage[m]>0: 
+                        n += 1
+                probf=math.pow(1.4,(game.energy+game.shield)/5000.0-1.0)*math.pow(1.3,1.0/(n+1)-1.0)
+                if (game.options & OPTION_BLKHOLE) and withprob(1-probf): 
+                    timwrp()
+                else: 
+                    finish(FHOLE)
                 return
+            else:
+                # something else 
+                skip(1)
+                proutn(crmshp())
+                if iquad == IHWEB:
+                    prout(_(" encounters Tholian web at %s;") % w)
+                else:
+                    prout(_(" blocked by object at %s;") % w)
+                proutn(_("Emergency stop required "))
+                prout(_("%2d units of energy.") % int(stopegy))
+                game.energy -= stopegy
+                final.i = int(round(deltax))
+                final.j = int(round(deltay))
+                game.sector = final
+                if game.energy <= 0:
+                    finish(FNRG)
+                    return
+            # We're here!
+            no_quad_change()
+            return
 	course.distance = (game.sector - w).distance() / (QUADSIZE * 1.0)
 	game.sector = w
     final = game.sector



From esr at mail.berlios.de  Fri Oct 13 12:23:22 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 13 Oct 2006 12:23:22 +0200
Subject: [Sst-commit-watch] r760 - trunk/src
Message-ID: <200610131023.k9DANM4u021042@sheep.berlios.de>

Author: esr
Date: 2006-10-13 12:23:21 +0200 (Fri, 13 Oct 2006)
New Revision: 760

Modified:
   trunk/src/sst.py
Log:
Fix two minor bugs.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-13 02:50:47 UTC (rev 759)
+++ trunk/src/sst.py	2006-10-13 10:23:21 UTC (rev 760)
@@ -2130,7 +2130,7 @@
     if ifast:
 	skip(1)
 	if no == 0:
-	    if withprob(0.99):
+	    if withprob(0.01):
 		prout(_("Sulu-  \"Sir, the high-speed shield control has malfunctioned . . ."))
 		prouts(_("         CLICK   CLICK   POP  . . ."))
 		prout(_(" No response, sir!"))
@@ -3693,7 +3693,7 @@
         iquad = game.quad[w.i][w.j]
         if iquad != IHDOT:
             # object encountered in flight path 
-            stopegy = 50.0*course.dist/game.optime
+            stopegy = 50.0*course.distance/game.optime
             course.distance = (game.sector - w).distance() / (QUADSIZE * 1.0)
             if iquad in (IHT, IHK, IHC, IHS, IHR, IHQUEST):
                 game.sector = w
@@ -3940,6 +3940,7 @@
         bigger = max(abs(self.increment.i), abs(self.increment.j))
         self.increment /= bigger
         self.moves = int(round(10*self.distance*bigger))
+        self.final = self.location + distance*bigger*self.increment
     def next(self, grain=1):
         "Next step on course."
         self.moves -=1



From esr at mail.berlios.de  Fri Oct 13 12:32:37 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 13 Oct 2006 12:32:37 +0200
Subject: [Sst-commit-watch] r761 - trunk/src
Message-ID: <200610131032.k9DAWbJs030600@sheep.berlios.de>

Author: esr
Date: 2006-10-13 12:32:35 +0200 (Fri, 13 Oct 2006)
New Revision: 761

Modified:
   trunk/src/sst.py
Log:
Compute final member in course object.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-13 10:23:21 UTC (rev 760)
+++ trunk/src/sst.py	2006-10-13 10:32:35 UTC (rev 761)
@@ -3641,12 +3641,8 @@
                     attack(torps_ok=False)
                 if game.alldone:
                     return
-            # compute final position -- new quadrant and sector 
-            x = (QUADSIZE*game.quadrant.i)+game.sector.i
-            y = (QUADSIZE*game.quadrant.j)+game.sector.j
-            w.i = int(round(x+QUADSIZE*course.distance*bigger*deltax))
-            w.j = int(round(y+QUADSIZE*course.distance*bigger*deltay))
             # check for edge of galaxy 
+            w = course.final
             kinks = 0
             while True:
                 kink = False
@@ -3940,7 +3936,7 @@
         bigger = max(abs(self.increment.i), abs(self.increment.j))
         self.increment /= bigger
         self.moves = int(round(10*self.distance*bigger))
-        self.final = self.location + distance*bigger*self.increment
+        self.final = (self.location + self.moves*self.increment).roundtogrid()
     def next(self, grain=1):
         "Next step on course."
         self.moves -=1



From esr at mail.berlios.de  Fri Oct 13 13:39:38 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 13 Oct 2006 13:39:38 +0200
Subject: [Sst-commit-watch] r762 - trunk/src
Message-ID: <200610131139.k9DBdcHc000803@sheep.berlios.de>

Author: esr
Date: 2006-10-13 13:39:37 +0200 (Fri, 13 Oct 2006)
New Revision: 762

Modified:
   trunk/src/sst.py
Log:
More vector-arithmetic abstraction.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-13 10:32:35 UTC (rev 761)
+++ trunk/src/sst.py	2006-10-13 11:39:37 UTC (rev 762)
@@ -250,12 +250,12 @@
         return coord(self.i*other, self.j*other)
     def __div__(self, other):
         return coord(self.i/other, self.j/other)
+    def __mod__(self, other):
+        return coord(self.i % other, self.j % other)
     def __rdiv__(self, other):
         return coord(self.i/other, self.j/other)
     def roundtogrid(self):
         return coord(int(round(self.i)), int(round(self.j)))
-    def trunctogrid(self):
-        return coord(int(round(self.i)), int(round(self.j)))
     def distance(self, other=None):
         if not other: other = coord(0, 0)
         return math.sqrt((self.i - other.i)**2 + (self.j - other.j)**2)
@@ -273,13 +273,15 @@
         else:
             s.j = self.j / abs(self.j)
         return s
+    def quadrant(self):
+        return (self / QUADSIZE).roundtogrid()
+    def sector(self):
+        return self.roundtogrid() % QUADSIZE
     def scatter(self):
         s = coord()
         s.i = self.i + randrange(-1, 2)
         s.j = self.j + randrange(-1, 2)
         return s
-    def __hash__(self):
-        return hash((x, y))
     def __str__(self):
         if self.i == None or self.j == None:
             return "Nowhere"
@@ -3923,6 +3925,10 @@
     def __init__(self, bearing, distance, origin=None): 
         self.distance = distance
         self.bearing = bearing
+        if origin is None:
+            self.origin = cartesian(game.quadrant, game.sector)
+        else:
+            self.origin = origin
         # The bearing() code we inherited from FORTRAN is actually computing
         # clockface directions!
         if self.bearing < 0.0:
@@ -3949,9 +3955,9 @@
         else:
             return False
     def quadrant(self):
-        return (self.location / QUADSIZE).roundtogrid()
+        return self.location.quadrant()
     def sector(self):
-        return coord(int(round(self.location.i)) % QUADSIZE, int(round(self.location.j)) % QUADSIZE)
+        return self.location.sector()
     def power(self, warp):
 	return self.distance*(warp**3)*(game.shldup+1)
     def time(self, warp):



From esr at mail.berlios.de  Fri Oct 13 14:08:36 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 13 Oct 2006 14:08:36 +0200
Subject: [Sst-commit-watch] r763 - trunk/src
Message-ID: <200610131208.k9DC8agX003613@sheep.berlios.de>

Author: esr
Date: 2006-10-13 14:08:36 +0200 (Fri, 13 Oct 2006)
New Revision: 763

Modified:
   trunk/src/sst.py
Log:
Navigation is finally subsumed by the course object.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-13 11:39:37 UTC (rev 762)
+++ trunk/src/sst.py	2006-10-13 12:08:36 UTC (rev 763)
@@ -274,7 +274,8 @@
             s.j = self.j / abs(self.j)
         return s
     def quadrant(self):
-        return (self / QUADSIZE).roundtogrid()
+        #print "Location %s -> %s" % (self, (self / QUADSIZE).roundtogrid())
+        return self.roundtogrid() / QUADSIZE
     def sector(self):
         return self.roundtogrid() % QUADSIZE
     def scatter(self):
@@ -3598,19 +3599,10 @@
         newcnd()
         drawmaps(0)
         setwnd(message_window)
-    w.i = w.j = 0
+
     if game.inorbit:
 	prout(_("Helmsman Sulu- \"Leaving standard orbit.\""))
 	game.inorbit = False
-    angle = ((15.0 - course.bearing) * 0.5235988)
-    deltax = -math.sin(angle)
-    deltay = math.cos(angle)
-    if math.fabs(deltax) > math.fabs(deltay):
-	bigger = math.fabs(deltax)
-    else:
-	bigger = math.fabs(deltay)
-    deltay /= bigger
-    deltax /= bigger
     # If tractor beam is to occur, don't move full distance 
     if game.state.date+game.optime >= scheduled(FTBEAM):
 	trbeam = True
@@ -3619,14 +3611,10 @@
 	game.optime = scheduled(FTBEAM) - game.state.date + 1e-5
     # Move within the quadrant 
     game.quad[game.sector.i][game.sector.j] = IHDOT
-    x = game.sector.i
-    y = game.sector.j
     for m in range(course.moves):
-        x += deltax
-        y += deltay
-        w.i = int(round(x))
-        w.j = int(round(y))
-        if not w.valid_sector():
+        course.next()
+        w = course.sector()
+        if course.origin.quadrant() != course.location.quadrant():
             # Leaving quadrant -- allow final enemy attack 
             # Don't do it if being pushed by Nova 
             if len(game.enemies) != 0 and not novapush:
@@ -3634,31 +3622,28 @@
                 for enemy in game.enemies:
                     finald = (w - enemy.kloc).distance()
                     enemy.kavgd = 0.5 * (finald + enemy.kdist)
-                #
                 # Stas Sergeev added the condition
                 # that attacks only happen if Klingons
                 # are present and your skill is good.
-                # 
                 if game.skill > SKILL_GOOD and game.klhere > 0 and not game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova:
                     attack(torps_ok=False)
                 if game.alldone:
                     return
             # check for edge of galaxy 
-            w = course.final
             kinks = 0
             while True:
                 kink = False
-                if w.i < 0:
-                    w.i = -w.i
+                if course.final.i < 0:
+                    course.final.i = -course.final.i
                     kink = True
-                if w.j < 0:
-                    w.j = -w.j
+                if course.final.j < 0:
+                    course.final.j = -course.final.j
                     kink = True
-                if w.i >= GALSIZE*QUADSIZE:
-                    w.i = (GALSIZE*QUADSIZE*2) - w.i
+                if course.final.i >= GALSIZE*QUADSIZE:
+                    course.final.i = (GALSIZE*QUADSIZE*2) - course.final.i
                     kink = True
-                if w.j >= GALSIZE*QUADSIZE:
-                    w.j = (GALSIZE*QUADSIZE*2) - w.j
+                if course.final.j >= GALSIZE*QUADSIZE:
+                    course.final.j = (GALSIZE*QUADSIZE*2) - course.final.j
                     kink = True
                 if kink:
                     kinks += 1
@@ -3677,10 +3662,8 @@
             # Compute final position in new quadrant 
             if trbeam: # Don't bother if we are to be beamed 
                 return
-            game.quadrant.i = w.i/QUADSIZE
-            game.quadrant.j = w.j/QUADSIZE
-            game.sector.i = w.i - (QUADSIZE*game.quadrant.i)
-            game.sector.j = w.j - (QUADSIZE*game.quadrant.j)
+            game.quadrant = course.final.quadrant()
+            game.sector = course.final.sector()
             skip(1)
             prout(_("Entering Quadrant %s.") % game.quadrant)
             game.quad[game.sector.i][game.sector.j] = game.ship
@@ -3693,8 +3676,8 @@
             # object encountered in flight path 
             stopegy = 50.0*course.distance/game.optime
             course.distance = (game.sector - w).distance() / (QUADSIZE * 1.0)
+            game.sector = w
             if iquad in (IHT, IHK, IHC, IHS, IHR, IHQUEST):
-                game.sector = w
                 for enemy in game.enemies:
                     if enemy.kloc == game.sector:
                         break
@@ -3730,9 +3713,7 @@
                 proutn(_("Emergency stop required "))
                 prout(_("%2d units of energy.") % int(stopegy))
                 game.energy -= stopegy
-                final.i = int(round(deltax))
-                final.j = int(round(deltay))
-                game.sector = final
+                game.sector = w
                 if game.energy <= 0:
                     finish(FNRG)
                     return



From esr at mail.berlios.de  Fri Oct 13 18:54:21 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 13 Oct 2006 18:54:21 +0200
Subject: [Sst-commit-watch] r764 - trunk/src
Message-ID: <200610131654.k9DGsLCc014553@sheep.berlios.de>

Author: esr
Date: 2006-10-13 18:54:21 +0200 (Fri, 13 Oct 2006)
New Revision: 764

Modified:
   trunk/src/sst.py
Log:
Subsume more trig into the course object.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-13 12:08:36 UTC (rev 763)
+++ trunk/src/sst.py	2006-10-13 16:54:21 UTC (rev 764)
@@ -4069,26 +4069,12 @@
 	if blooey or twarp:
 	    # If time warp or engine damage, check path 
 	    # If it is obstructed, don't do warp or damage 
-	    angle = ((15.0-course.bearing)*0.5235998)
-	    deltax = -math.sin(angle)
-	    deltay = math.cos(angle)
-	    if math.fabs(deltax) > math.fabs(deltay):
-		bigger = math.fabs(deltax)
-	    else:
-		bigger = math.fabs(deltay)
-	    deltax /= bigger
-	    deltay /= bigger
-	    n = 10.0 * course.distance * bigger +0.5
-	    x = game.sector.i
-	    y = game.sector.j
-	    for l in range(1, n+1):
-		x += deltax
-		ix = x + 0.5
-		y += deltay
-		iy = y +0.5
-		if not coord(ix, iy).valid_sector():
-		    break
-		if game.quad[ix][iy] != IHDOT:
+            for m in range(course.moves):
+                course.next()
+                w = course.sector()
+                if not w.valid_sector():
+                    break
+		if game.quad[w.x][w.y] != IHDOT:
 		    blooey = False
 		    twarp = False
     # Activate Warp Engines and pay the cost 



From esr at mail.berlios.de  Fri Oct 13 19:10:10 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 13 Oct 2006 19:10:10 +0200
Subject: [Sst-commit-watch] r765 - trunk/src
Message-ID: <200610131710.k9DHAAap027750@sheep.berlios.de>

Author: esr
Date: 2006-10-13 19:10:08 +0200 (Fri, 13 Oct 2006)
New Revision: 765

Modified:
   trunk/src/sst.py
Log:
Make it possible to reset a course object.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-13 16:54:21 UTC (rev 764)
+++ trunk/src/sst.py	2006-10-13 17:10:08 UTC (rev 765)
@@ -2477,7 +2477,7 @@
 		chp.stars = pdest.stars
 		pdest.charted = True
 	    game.probe.moves -= 1 # One less to travel
-	    if game.probe.moves == 0 and game.isarmed and pdest.stars:
+	    if game.probe.arrived() and game.isarmed and pdest.stars:
 		supernova(game.probe)		# fire in the hole!
 		unschedule(FDSPROB)
 		if game.state.galaxy[game.quadrant().i][game.quadrant().j].supernova: 
@@ -3916,17 +3916,23 @@
             self.bearing += 12.0
         self.angle = ((15.0 - self.bearing) * 0.5235988)
         if origin is None:
-            self.location = cartesian(game.quadrant, game.sector)
+            self.origin = cartesian(game.quadrant, game.sector)
         else:
-            self.location = cartesian(game.quadrant, origin)
+            self.origin = cartesian(game.quadrant, origin)
         self.increment = coord(-math.sin(self.angle), math.cos(self.angle))
         bigger = max(abs(self.increment.i), abs(self.increment.j))
         self.increment /= bigger
         self.moves = int(round(10*self.distance*bigger))
+        self.reset()
         self.final = (self.location + self.moves*self.increment).roundtogrid()
+    def reset(self):
+        self.location = self.origin
+        self.step = 0
+    def arrived(self):
+        return self.location.roundtogrid() == self.final
     def next(self, grain=1):
         "Next step on course."
-        self.moves -=1
+        self.step += 1
         self.nextlocation = self.location + self.increment
         oldloc = (self.location/grain).roundtogrid()
         newloc = (self.nextlocation/grain).roundtogrid()
@@ -4077,6 +4083,7 @@
 		if game.quad[w.x][w.y] != IHDOT:
 		    blooey = False
 		    twarp = False
+            course.reset()
     # Activate Warp Engines and pay the cost 
     imove(course, novapush=False)
     if game.alldone:



From esr at mail.berlios.de  Mon Oct 16 04:19:42 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 16 Oct 2006 04:19:42 +0200
Subject: [Sst-commit-watch] r766 - trunk/src
Message-ID: <200610160219.k9G2Jg5O018279@sheep.berlios.de>

Author: esr
Date: 2006-10-16 04:19:40 +0200 (Mon, 16 Oct 2006)
New Revision: 766

Modified:
   trunk/src/sst.py
Log:
Clean up and refactor the movement code, fix minor translation bugs.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-13 17:10:08 UTC (rev 765)
+++ trunk/src/sst.py	2006-10-16 02:19:40 UTC (rev 766)
@@ -259,9 +259,8 @@
     def distance(self, other=None):
         if not other: other = coord(0, 0)
         return math.sqrt((self.i - other.i)**2 + (self.j - other.j)**2)
-    def bearing(self, other=None):
-        if not other: other = coord(0, 0)
-        return 1.90985*math.atan2(self.j-other.j, self.i-other.i)
+    def bearing(self):
+        return 1.90985*math.atan2(self.j, self.i)
     def sgn(self):
         s = coord()
         if self.i == 0:
@@ -1404,8 +1403,7 @@
 	    if game.landed:
 		# captain perishes on planet 
 		finish(FDPLANET)
-	    prout(_("You have just destroyed an inhabited planet."))
-	    prout(_("Celebratory rallies are being held on the Klingon homeworld."))
+	    prout(_("The torpedo destroyed an inhabited planet."))
 	    return None
 	elif iquad == IHSTAR: # Hit a star 
 	    if withprob(0.9):
@@ -2754,7 +2752,7 @@
     game.optime = course.time(warp=4)
     skip(1)
     prout(_("Force of nova displaces starship."))
-    imove(course, novapush=True)
+    imove(course, noattack=True)
     game.optime = course.time(warp=4)
     return
 	
@@ -3578,117 +3576,84 @@
 
 # Code from moving.c begins here
 
-def imove(course=None, novapush=False):
+def imove(course=None, noattack=False):
     "Movement execution for warp, impulse, supernova, and tractor-beam events."
-    w = coord(); final = coord()
-    trbeam = False
+    w = coord()
 
-    def no_quad_change():
-        # No quadrant change -- compute new average enemy distances 
-        game.quad[game.sector.i][game.sector.j] = game.ship
-        if game.enemies:
+    def newquadrant(noattack):
+        # Leaving quadrant -- allow final enemy attack 
+        # Don't do it if being pushed by Nova 
+        if len(game.enemies) != 0 and not noattack:
+            newcnd()
             for enemy in game.enemies:
-                finald = (w-enemy.kloc).distance()
+                finald = (w - enemy.kloc).distance()
                 enemy.kavgd = 0.5 * (finald + enemy.kdist)
-                enemy.kdist = finald
-            game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
-            if not game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova:
+            # Stas Sergeev added the condition
+            # that attacks only happen if Klingons
+            # are present and your skill is good.
+            if game.skill > SKILL_GOOD and game.klhere > 0 and not game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova:
                 attack(torps_ok=False)
-            for enemy in game.enemies:
-                enemy.kavgd = enemy.kdist
-        newcnd()
-        drawmaps(0)
-        setwnd(message_window)
-
-    if game.inorbit:
-	prout(_("Helmsman Sulu- \"Leaving standard orbit.\""))
-	game.inorbit = False
-    # If tractor beam is to occur, don't move full distance 
-    if game.state.date+game.optime >= scheduled(FTBEAM):
-	trbeam = True
-	game.condition = "red"
-	course.distance = course.distance*(scheduled(FTBEAM)-game.state.date)/game.optime + 0.1
-	game.optime = scheduled(FTBEAM) - game.state.date + 1e-5
-    # Move within the quadrant 
-    game.quad[game.sector.i][game.sector.j] = IHDOT
-    for m in range(course.moves):
-        course.next()
-        w = course.sector()
-        if course.origin.quadrant() != course.location.quadrant():
-            # Leaving quadrant -- allow final enemy attack 
-            # Don't do it if being pushed by Nova 
-            if len(game.enemies) != 0 and not novapush:
-                newcnd()
-                for enemy in game.enemies:
-                    finald = (w - enemy.kloc).distance()
-                    enemy.kavgd = 0.5 * (finald + enemy.kdist)
-                # Stas Sergeev added the condition
-                # that attacks only happen if Klingons
-                # are present and your skill is good.
-                if game.skill > SKILL_GOOD and game.klhere > 0 and not game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova:
-                    attack(torps_ok=False)
-                if game.alldone:
-                    return
-            # check for edge of galaxy 
-            kinks = 0
-            while True:
-                kink = False
-                if course.final.i < 0:
-                    course.final.i = -course.final.i
-                    kink = True
-                if course.final.j < 0:
-                    course.final.j = -course.final.j
-                    kink = True
-                if course.final.i >= GALSIZE*QUADSIZE:
-                    course.final.i = (GALSIZE*QUADSIZE*2) - course.final.i
-                    kink = True
-                if course.final.j >= GALSIZE*QUADSIZE:
-                    course.final.j = (GALSIZE*QUADSIZE*2) - course.final.j
-                    kink = True
-                if kink:
-                    kinks += 1
-                else:
-                    break
-            if kinks:
-                game.nkinks += 1
-                if game.nkinks == 3:
-                    # Three strikes -- you're out! 
-                    finish(FNEG3)
-                    return
-                skip(1)
-                prout(_("YOU HAVE ATTEMPTED TO CROSS THE NEGATIVE ENERGY BARRIER"))
-                prout(_("AT THE EDGE OF THE GALAXY.  THE THIRD TIME YOU TRY THIS,"))
-                prout(_("YOU WILL BE DESTROYED."))
-            # Compute final position in new quadrant 
-            if trbeam: # Don't bother if we are to be beamed 
+            if game.alldone:
                 return
-            game.quadrant = course.final.quadrant()
-            game.sector = course.final.sector()
+        # check for edge of galaxy 
+        kinks = 0
+        while True:
+            kink = False
+            if course.final.i < 0:
+                course.final.i = -course.final.i
+                kink = True
+            if course.final.j < 0:
+                course.final.j = -course.final.j
+                kink = True
+            if course.final.i >= GALSIZE*QUADSIZE:
+                course.final.i = (GALSIZE*QUADSIZE*2) - course.final.i
+                kink = True
+            if course.final.j >= GALSIZE*QUADSIZE:
+                course.final.j = (GALSIZE*QUADSIZE*2) - course.final.j
+                kink = True
+            if kink:
+                kinks += 1
+            else:
+                break
+        if kinks:
+            game.nkinks += 1
+            if game.nkinks == 3:
+                # Three strikes -- you're out! 
+                finish(FNEG3)
+                return
             skip(1)
-            prout(_("Entering Quadrant %s.") % game.quadrant)
-            game.quad[game.sector.i][game.sector.j] = game.ship
-            newqad()
-            if game.skill>SKILL_NOVICE:
-                attack(torps_ok=False)  
+            prout(_("YOU HAVE ATTEMPTED TO CROSS THE NEGATIVE ENERGY BARRIER"))
+            prout(_("AT THE EDGE OF THE GALAXY.  THE THIRD TIME YOU TRY THIS,"))
+            prout(_("YOU WILL BE DESTROYED."))
+        # Compute final position in new quadrant 
+        if trbeam: # Don't bother if we are to be beamed 
             return
-        iquad = game.quad[w.i][w.j]
+        game.quadrant = course.final.quadrant()
+        game.sector = course.final.sector()
+        skip(1)
+        prout(_("Entering Quadrant %s.") % game.quadrant)
+        game.quad[game.sector.i][game.sector.j] = game.ship
+        newqad()
+        if game.skill>SKILL_NOVICE:
+            attack(torps_ok=False)  
+
+    def check_collision(h):
+        iquad = game.quad[h.i][h.j]
         if iquad != IHDOT:
             # object encountered in flight path 
             stopegy = 50.0*course.distance/game.optime
-            course.distance = (game.sector - w).distance() / (QUADSIZE * 1.0)
-            game.sector = w
             if iquad in (IHT, IHK, IHC, IHS, IHR, IHQUEST):
                 for enemy in game.enemies:
                     if enemy.kloc == game.sector:
                         break
                 collision(rammed=False, enemy=enemy)
-                final = game.sector
+                return True
             elif iquad == IHBLANK:
                 skip(1)
                 prouts(_("***RED ALERT!  RED ALERT!"))
                 skip(1)
                 proutn("***" + crmshp())
-                proutn(_(" pulled into black hole at Sector %s") % w)
+                proutn(_(" pulled into black hole at Sector %s") % h)
                 # Getting pulled into a black hole was certain
                 # death in Almy's original.  Stas Sergeev added a
                 # possibility that you'll get timewarped instead.
@@ -3701,29 +3666,61 @@
                     timwrp()
                 else: 
                     finish(FHOLE)
-                return
+                return True
             else:
                 # something else 
                 skip(1)
                 proutn(crmshp())
                 if iquad == IHWEB:
-                    prout(_(" encounters Tholian web at %s;") % w)
+                    prout(_(" encounters Tholian web at %s;") % h)
                 else:
-                    prout(_(" blocked by object at %s;") % w)
+                    prout(_(" blocked by object at %s;") % h)
                 proutn(_("Emergency stop required "))
                 prout(_("%2d units of energy.") % int(stopegy))
                 game.energy -= stopegy
-                game.sector = w
                 if game.energy <= 0:
                     finish(FNRG)
-                    return
-            # We're here!
-            no_quad_change()
-            return
-	course.distance = (game.sector - w).distance() / (QUADSIZE * 1.0)
-	game.sector = w
-    final = game.sector
-    no_quad_change()
+                return True
+        return False
+
+    trbeam = False
+    if game.inorbit:
+	prout(_("Helmsman Sulu- \"Leaving standard orbit.\""))
+	game.inorbit = False
+    # If tractor beam is to occur, don't move full distance 
+    if game.state.date+game.optime >= scheduled(FTBEAM):
+	trbeam = True
+	game.condition = "red"
+	course.distance = course.distance*(scheduled(FTBEAM)-game.state.date)/game.optime + 0.1
+	game.optime = scheduled(FTBEAM) - game.state.date + 1e-5
+    # Move out
+    game.quad[game.sector.i][game.sector.j] = IHDOT
+    for m in range(course.moves):
+        course.next()
+        w = course.sector()
+        if course.origin.quadrant() != course.location.quadrant():
+            newquadrant(noattack)
+            break
+        elif check_collision(w):
+            print "Collision detected"
+            break
+        else:
+            game.sector = w
+    # We're in destination quadrant -- compute new average enemy distances
+    game.quad[game.sector.i][game.sector.j] = game.ship
+    if game.enemies:
+        for enemy in game.enemies:
+            finald = (w-enemy.kloc).distance()
+            enemy.kavgd = 0.5 * (finald + enemy.kdist)
+            enemy.kdist = finald
+        game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
+        if not game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova:
+            attack(torps_ok=False)
+        for enemy in game.enemies:
+            enemy.kavgd = enemy.kdist
+    newcnd()
+    drawmaps(0)
+    setwnd(message_window)
     return
 
 def dock(verbose):
@@ -3988,7 +3985,7 @@
 	if ja() == False:
 	    return
     # Activate impulse engines and pay the cost 
-    imove(course, novapush=False)
+    imove(course, noattack=False)
     game.ididit = True
     if game.alldone:
 	return
@@ -4060,12 +4057,12 @@
     if game.warpfac > 6.0:
 	# Decide if engine damage will occur
         # ESR: Seems wrong. Probability of damage goes *down* with distance? 
-	prob = course.dist*(6.0-game.warpfac)**2/66.666666666
+	prob = course.distance*(6.0-game.warpfac)**2/66.666666666
 	if prob > randreal():
 	    blooey = True
 	    course.distance = randreal(course.distance)
 	# Decide if time warp will occur 
-	if 0.5*course.dist*math.pow(7.0,game.warpfac-10.0) > randreal():
+	if 0.5*course.distance*math.pow(7.0,game.warpfac-10.0) > randreal():
 	    twarp = True
 	if idebug and game.warpfac==10 and not twarp:
 	    blooey = False
@@ -4080,12 +4077,12 @@
                 w = course.sector()
                 if not w.valid_sector():
                     break
-		if game.quad[w.x][w.y] != IHDOT:
+		if game.quad[w.i][w.j] != IHDOT:
 		    blooey = False
 		    twarp = False
             course.reset()
     # Activate Warp Engines and pay the cost 
-    imove(course, novapush=False)
+    imove(course, noattack=False)
     if game.alldone:
 	return
     game.energy -= course.power(game.warpfac)
@@ -4185,7 +4182,7 @@
 	    proutn(_("The %s has stopped in a quadrant containing") % crmshp())
 	    prouts(_("   a supernova."))
 	    skip(2)
-	proutn(_("***Emergency automatic override attempts to hurl ")+crmshp())
+	prout(_("***Emergency automatic override attempts to hurl ")+crmshp())
 	prout(_("safely out of quadrant."))
 	if not damaged(DRADIO):
 	    game.state.galaxy[game.quadrant.i][game.quadrant.j].charted = True
@@ -4199,14 +4196,12 @@
 	prout(_("Warp factor set to %d") % int(game.warpfac))
 	power = 0.75*game.energy
 	dist = power/(game.warpfac*game.warpfac*game.warpfac*(game.shldup+1))
-	distreq = randreal(math.sqrt(2))
-	if distreq < game.dist:
-	    dist = distreq
-        course = course(bearing=randreal(12), distance=dist)	# How dumb!
-	game.optime = course.time()
+	dist = max(dist, randreal(math.sqrt(2)))
+        bugout = course(bearing=randreal(12), distance=dist)	# How dumb!
+	game.optime = bugout.time(game.warpfac)
 	game.justin = False
 	game.inorbit = False
-	warp(course, involuntary=True)
+	warp(bugout, involuntary=True)
 	if not game.justin:
 	    # This is bad news, we didn't leave quadrant. 
 	    if game.alldone:
@@ -5200,7 +5195,7 @@
 	prstat(_("Shields"), s+data)
     if not req or req == 9:
         prstat(_("Klingons Left"), "%d" \
-               % (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem))
+               % (game.state.remkl+len(game.state.kcmdr)+game.state.nscrem))
     if not req or req == 10:
 	if game.options & OPTION_WORLDS:
 	    plnet = game.state.galaxy[game.quadrant.i][game.quadrant.j].planet
@@ -5320,7 +5315,7 @@
 	prout(_("Captain, certainly you can give me one of these."))
     while True:
 	scanner.chew()
-	ttime = (10.0*game.dist)/twarp**2
+	ttime = (10.0*dist)/twarp**2
 	tpower = dist*twarp*twarp*twarp*(game.shldup+1)
 	if tpower >= game.energy:
 	    prout(_("Insufficient energy, sir."))



From esr at mail.berlios.de  Mon Oct 16 14:39:49 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 16 Oct 2006 14:39:49 +0200
Subject: [Sst-commit-watch] r767 - trunk/src
Message-ID: <200610161239.k9GCdnd2009548@sheep.berlios.de>

Author: esr
Date: 2006-10-16 14:39:48 +0200 (Mon, 16 Oct 2006)
New Revision: 767

Modified:
   trunk/src/sst.py
Log:
Prevent torpedo wraparound.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-16 02:19:40 UTC (rev 766)
+++ trunk/src/sst.py	2006-10-16 12:39:48 UTC (rev 767)
@@ -1276,7 +1276,7 @@
     # Loop to move a single torpedo 
     setwnd(message_window)
     for step in range(1, QUADSIZE*2):
-	track.next()
+        if not track.next(): break
         w = track.sector()
 	if not w.valid_sector():
 	    break
@@ -2449,7 +2449,7 @@
 		supercommander()
 	elif evcode == FDSPROB: # Move deep space probe 
 	    schedule(FDSPROB, 0.01)
-            if game.probe.next(grain=QUADSIZE):
+            if not game.probe.next():
 		if not game.probe.quadrant().valid_quadrant() or \
 		    game.state.galaxy[game.probe.quadrant().i][game.probe.quadrant().j].supernova:
 		    # Left galaxy or ran into supernova
@@ -3927,17 +3927,13 @@
         self.step = 0
     def arrived(self):
         return self.location.roundtogrid() == self.final
-    def next(self, grain=1):
+    def next(self):
         "Next step on course."
         self.step += 1
         self.nextlocation = self.location + self.increment
-        oldloc = (self.location/grain).roundtogrid()
-        newloc = (self.nextlocation/grain).roundtogrid()
+        samequad = (self.location.quadrant() == self.nextlocation.quadrant())
         self.location = self.nextlocation
-        if newloc != oldloc:
-            return True
-        else:
-            return False
+        return samequad
     def quadrant(self):
         return self.location.quadrant()
     def sector(self):



From esr at mail.berlios.de  Mon Oct 16 15:41:47 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 16 Oct 2006 15:41:47 +0200
Subject: [Sst-commit-watch] r768 - trunk/src
Message-ID: <200610161341.k9GDflCq015959@sheep.berlios.de>

Author: esr
Date: 2006-10-16 15:41:47 +0200 (Mon, 16 Oct 2006)
New Revision: 768

Modified:
   trunk/src/sst.py
Log:
More trig refactoring.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-16 12:39:48 UTC (rev 767)
+++ trunk/src/sst.py	2006-10-16 13:41:47 UTC (rev 768)
@@ -1295,14 +1295,11 @@
 	    newcnd(); # we're blown out of dock 
 	    if game.landed or game.condition=="docked":
 		return hit # Cheat if on a planet 
-	    ang = track.angle + 2.5*(randreal()-0.5)
-	    temp = math.fabs(math.sin(ang))
-	    if math.fabs(math.cos(ang)) > temp:
-		temp = math.fabs(math.cos(ang))
-	    xx = -math.sin(ang)/temp
-	    yy = math.cos(ang)/temp
-	    bumpto.i = int(w.i+xx+0.5)
-	    bumpto.j = int(w.j+yy+0.5)
+            # In the C/FORTRAN version, dispersion was 2.5 radians, which
+            # is 143 degrees, which is almost exactly 4.8 clockface units
+            displacement = course(track.bearing+randreal(-2.4,2.4), distance=2**0.5)
+            displacement.next()
+            bumpto = displacement.sector()
 	    if not bumpto.valid_sector():
 		return hit
 	    if game.quad[bumpto.i][bumpto.j]==IHBLANK:
@@ -1343,15 +1340,9 @@
 		deadkl(w, iquad, w)
 		return None
 	    proutn(crmena(True, iquad, "sector", w))
-	    # If enemy damaged but not destroyed, try to displace 
-	    ang = track.angle + 2.5*(randreal()-0.5)
-	    temp = math.fabs(math.sin(ang))
-	    if math.fabs(math.cos(ang)) > temp:
-		temp = math.fabs(math.cos(ang))
-	    xx = -math.sin(ang)/temp
-	    yy = math.cos(ang)/temp
-	    bumpto.i = int(w.i+xx+0.5)
-	    bumpto.j = int(w.j+yy+0.5)
+            displacement = course(track.bearing+randreal(-2.4,2.4), distance=2**0.5)
+            displacement.next()
+            bumpto = displacement.sector()
             if not bumpto.valid_sector():
 		prout(_(" damaged but not destroyed."))
 		return



From esr at mail.berlios.de  Mon Oct 16 16:55:37 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Mon, 16 Oct 2006 16:55:37 +0200
Subject: [Sst-commit-watch] r769 - trunk/src
Message-ID: <200610161455.k9GEtbSC023007@sheep.berlios.de>

Author: esr
Date: 2006-10-16 16:55:36 +0200 (Mon, 16 Oct 2006)
New Revision: 769

Modified:
   trunk/src/sst.py
Log:
A bit more code compression.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-16 13:41:47 UTC (rev 768)
+++ trunk/src/sst.py	2006-10-16 14:55:36 UTC (rev 769)
@@ -5145,11 +5145,8 @@
     if not req or req == 2:
 	if game.condition != "docked":
 	    newcnd()
-        dam = 0
-	for t in range(NDEVICES):
-	    if game.damage[t]>0: 
-		dam += 1
-	prstat(_("Condition"), _("%s, %i DAMAGES") % (game.condition.upper(), dam))
+	prstat(_("Condition"), _("%s, %i DAMAGES") % \
+               (game.condition.upper(), sum(map(lambda x: x > 0, damages))))
     if not req or req == 3:
 	prstat(_("Position"), "%s , %s" % (game.quadrant, game.sector))
     if not req or req == 4:



From esr at mail.berlios.de  Tue Oct 17 16:08:29 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 17 Oct 2006 16:08:29 +0200
Subject: [Sst-commit-watch] r770 - trunk/src
Message-ID: <200610171408.k9HE8T9a017418@sheep.berlios.de>

Author: esr
Date: 2006-10-17 16:08:28 +0200 (Tue, 17 Oct 2006)
New Revision: 770

Modified:
   trunk/src/sst.py
Log:
Fix an embarassing last-minute bug.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-16 14:55:36 UTC (rev 769)
+++ trunk/src/sst.py	2006-10-17 14:08:28 UTC (rev 770)
@@ -5146,7 +5146,7 @@
 	if game.condition != "docked":
 	    newcnd()
 	prstat(_("Condition"), _("%s, %i DAMAGES") % \
-               (game.condition.upper(), sum(map(lambda x: x > 0, damages))))
+               (game.condition.upper(), sum(map(lambda x: x > 0, game.damage))))
     if not req or req == 3:
 	prstat(_("Position"), "%s , %s" % (game.quadrant, game.sector))
     if not req or req == 4:



From esr at mail.berlios.de  Tue Oct 17 17:09:46 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 17 Oct 2006 17:09:46 +0200
Subject: [Sst-commit-watch] r771 - in trunk: . doc src
Message-ID: <200610171509.k9HF9kol031712@sheep.berlios.de>

Author: esr
Date: 2006-10-17 17:09:45 +0200 (Tue, 17 Oct 2006)
New Revision: 771

Added:
   trunk/doc/HACKING
Modified:
   trunk/TODO
   trunk/doc/sst-doc.xml
   trunk/src/io.c
   trunk/src/sst.py
Log:
Imprive documentation, fix a typo, add the hacking guide.


Modified: trunk/TODO
===================================================================
--- trunk/TODO	2006-10-17 14:08:28 UTC (rev 770)
+++ trunk/TODO	2006-10-17 15:09:45 UTC (rev 771)
@@ -9,9 +9,12 @@
 
 * Add the attacked inhabited planets to the status report
 
-
 Long-term items:
 
+* Python's random module supports the von Mises distribution (circular
+  equivalent of the Gaussian).  Tweak the code that handles dispersion
+  in torpedos and explosion displacements to use it.
+
 * Wrap a GUI around it.
 
 * Wandering planet-killer as in "The Doomsday Machine";

Added: trunk/doc/HACKING
===================================================================
--- trunk/doc/HACKING	2006-10-17 14:08:28 UTC (rev 770)
+++ trunk/doc/HACKING	2006-10-17 15:09:45 UTC (rev 771)
@@ -0,0 +1,247 @@
+This is the hackers' guide to SST2K.  Read it before messing with the code.
+
+It consists of an introduction, a history, suggestions for regression testing,
+some notes on the Python translation.  For a to-do list, see TODO in the
+top-level directory.
+
+INTRODUCTION:
+
+SST2K is a Python translation of a C translation of a FORTRAN
+original dating back to 1973.  Beautiful Python it is not, but it
+works. 
+
+The intention of SST2K is to be able to replicate precisely the 
+experience of the original game, while allowing new features to be
+added under option control.  Therefore, be very conservative about
+what changes are visible under the 'plain' option.
+
+HISTORY:
+
+Dave Matuszek, one of the two original authors, says:
+
+SRSCAN, MOVE, PHASERS, CALL, STATUS, IMPULSE, PHOTONS, ABANDON,
+LRSCAN, WARP, SHIELDS, DESTRUCT, CHART, REST, DOCK, QUIT, and DAMAGE
+were in the original non-"super" version of UT FORTRAN Star Trek.
+
+Tholians were not in the original. Dave is dubious about their merits.
+(They are now controlled by OPTION_THOLIAN and turned off if the game
+type is "plain".)
+
+Planets and dilithium crystals were not in the original.  Dave is OK
+with this idea. (It's now controlled by OPTION_PLANETS and turned 
+off if the game type is "plain".)
+
+Dave says the bit about the Galileo getting turned into a
+McDonald's is "consistant with our original vision".  (This has been
+left permanently enabled, as it can only happen if OPTION_PLANETS
+is on.)
+
+Dave also says the Space Thingy should not be preserved across saved
+games, so you can't prove to others that you've seen it.  He says it
+shouldn't fire back, either.  It should do nothing except scream and
+disappear when hit by photon torpedos.  It's OK that it may move
+when attacked, but it didn't in the original.  (Whether the Thingy
+can fire back is now controlled by OPTION_THINGY and turned off if the
+game type is "plain" or "almy".  The no-save behavior has been restored.)
+
+The Faerie Queen, black holes, and time warping were in the original.
+
+Here are Tom Almy's changes:
+
+In early 1997, I got the bright idea to look for references to
+"Super Star Trek" on the World Wide Web. There weren't many hits,
+but there was one that came up with 1979 Fortran sources! This
+version had a few additional features that mine didn't have,
+however mine had some feature it didn't have. So I merged its
+features that I liked. I also took a peek at the DECUS version (a
+port, less sources, to the PDP-10), and some other variations.
+
+1, Compared to the original UT version, I've changed the "help"
+command to "call" and the "terminate" command to "quit" to better
+match user expectations. The DECUS version apparently made those
+changes as well as changing "freeze" to "save". However I like
+"freeze".  (Both "freeze" and "save" work in SST2K.)
+
+2. The experimental deathray originally had only a 5% chance of
+success, but could be used repeatedly. I guess after a couple
+years of use, it was less "experimental" because the 1979
+version had a 70% success rate. However it was prone to breaking
+after use. I upgraded the deathray, but kept the original set of
+failure modes (great humor!).  (Now controlled by OPTION_DEATHRAY
+and turned off if game type is "plain".)
+
+3. The 1979 version also mentions srscan and lrscan working when
+docked (using the starbase's scanners), so I made some changes here
+to do this (and indicating that fact to the player), and then realized
+the base would have a subspace radio as well -- doing a Chart when docked
+updates the star chart, and all radio reports will be heard. The Dock
+command will also give a report if a base is under attack.
+
+4. Tholian Web from the 1979 version.  (Now controlled by
+OPTION_THOLIAN and turned off if game type is "plain".)
+
+5. Enemies can ram the Enterprise. (Now controlled by OPTION_RAMMING
+and turned off if game type is "plain".)
+
+6. Regular Klingons and Romulans can move in Expert and Emeritus games. 
+This code could use improvement. (Now controlled by OPTION_MVBADDY
+and turned off if game type is "plain".)
+
+7. The deep-space probe feature from the DECUS version.  (Now controlled
+by OPTION_PROBE and turned off if game type is "plain").
+
+8. 'emexit' command from the 1979 version.
+
+9. Bugfix: Klingon commander movements are no longer reported if long-range 
+sensors are damaged.
+
+10. Bugfix: Better base positioning at startup (more spread out).
+That made sense to add because most people abort games with 
+bad base placement.
+
+In June 2002, I fixed two known bugs and a documentation typo.
+In June 2004 I fixed a number of bugs involving: 1) parsing invalid
+numbers, 2) manual phasers when SR scan is damaged and commander is
+present, 3) time warping into the future, 4) hang when moving
+klingons in crowded quadrants.  (These fixes are in SST2K.)
+
+Here are Stas Sergeev's changes:
+
+1. The Space Thingy can be shoved, if you ram it, and can fire back if 
+fired upon. (Now controlled by OPTION_THINGY and turned off if game 
+type is "plain" or "almy".)
+
+2. When you are docked, base covers you with an almost invincible shield. 
+(A commander can still ram you, or a Romulan can destroy the base,
+or a SCom can even succeed with direct attack IIRC, but this rarely 
+happens.)  (Now controlled by OPTION_BASE and turned off if game 
+type is "plain" or "almy".)
+
+3. Ramming a black hole is no longer instant death.  There is a
+chance you might get timewarped instead. (Now controlled by 
+OPTION_BLKHOLE and turned off if game type is "plain" or "almy".)
+
+4. The Tholian can be hit with phasers.
+
+5. SCom can't escape from you if no more enemies remain 
+(without this, chasing SCom can take an eternity).
+
+6. Probe target you enter is now the destination quadrant. Before I don't 
+remember what it was, but it was something I had difficulty using.
+
+7. Secret password is now autogenerated.
+
+8. "Plaque" is adjusted for A4 paper :-)
+
+9. Phasers now tells you how much energy needed, but only if the computer 
+is alive.
+
+10. Planets are auto-scanned when you enter the quadrant.
+
+11. Mining or using crystals in presense of enemy now yields an attack.
+There are other minor adjustments to what yields an attack
+and what does not.
+
+12. "freeze" command reverts to "save", most people will understand this
+better anyway. (SST2K recognizes both.)
+
+13. Screen-oriented interface, with sensor scans always up.  (SST2K
+supports both screen-oriented and TTY modes.)
+
+Eric Raymond's changes:
+
+Mainly, I translated this C code out of FORTRAN into C -- created #defines
+for a lot of magic numbers and refactored the heck out of it.
+
+1. "sos" and "call" becomes "mayday", "freeze" and "save" are both good.
+
+2. Status report now indicates when dilithium crystals are on board.
+
+3. Per Dave Matuszek's remarks, Thingy state is never saved across games.
+
+4. Added game option selection so you can play a close (but not bug-for-
+bug identical) approximation of older versions.
+
+5. Half the quadrants now have inhabited planets, from which one 
+cannot mine dilithium (there will still be the same additional number
+of dilithium-bearing planets).  Torpedoing an inhabited world is *bad*.
+There is BSD-Trek-like logic for Klingons to attack and enslave 
+inhabited worlds, producing more ships (only is skill is 'good' or 
+better). (Controlled by OPTION_WORLDS and turned off if game 
+type is "plain" or "almy".)
+
+6. User input is now logged so we can do regression testing.
+
+7. More BSD-Trek features: You can now lose if your entire crew
+dies in battle.  When abandoning ship in a game with inhabited
+worlds enabled, they must have one in the quadrant to beam down
+to; otherwise they die in space and this counts heavily against
+your score.  Docking at a starbase replenishes your crew.
+
+8. Still more BSD-Trek: we now have a weighted damage table.
+Also, the nav subsystem (enabling automatic course
+setting) can be damaged separately from the main computer (which
+handles weapons targeting, ETA calculation, and self-destruct).
+
+After these features were added, I translated this into Python and added
+more:
+
+9. A long-range scan is done silently whenever you call CHART; thus
+the LRSCAN command is no longer needed.  (Controlled by OPTION_AUTOSCAN
+and turned off if game type is "plain" or "almy".)
+
+TESTING:
+
+This code has been designed to be tested.  A simple shellscript
+included in the distribution, 'replay', automatically reruns the
+last game you played.
+
+Here are some interesting seeds for debugging and regression testing
+For each one, I list the seed, the options, and the last svn revision
+for which it is known to have given the described behavior.
+
+1160647745 regular short good fancy	(r769)
+
+Starts you in a quadrant with the Super-Commander in it.  Slamming three
+torps at him will kill him.  You can use this to regression-test both
+torpedo tracks and the Deep Space Probe. Known bug: "probe aut 2 8"
+triggers manual navigation.
+
+1160707235 regular short good fancy	(r769)
+
+Do sr/mov aut 5 4/sr/sensors/orbit/transport; you'll get a transporter
+failure.
+
+NOTES ON THE PYTHON TRANSLATION:
+
+The Python translation was done with a regexp-based C-to-Python
+translator I wrote for the purpose (I expect to release this as a
+separate project).  I then hand-tuned and refactored the result.
+
+The LOC count dropped by almost exactly 20% during this process, from
+a bit over 8100 lines to a bit over 6500 lines.  If the code is still
+shorter than that when you read thism, it's because this file comtains
+nost of what used to be a huge header comment.  
+
+SST is not a data-structure- intensive program, so it compresses less
+under translation to Python than the 50% drop in LOC I've found to be
+more typical.  The gain in readability, though impossible to quantify,
+is much greater than the drop in line count would suggest.
+
+Some parts of the code, such as the finish() and score() functions, 
+have barely been touched.  Code in the general category of report 
+generators has tended to change little, especially since we've tried
+to preserve the look and feel of the original.
+
+On the other hand, the vector-arithmetic code around navigation and
+torpedos, and deep-space-probe handling changed a lot.  All that 
+stuff is now centralized in a 'course' object that hides the
+trigonometric calculations.  
+
+The course object builds on a 'coord' object, which I actually had
+introduced while refactoring the C version.  Large parts of SST2K are,
+perforce, an exercise in 2D vector arithmetic.  In the original
+FORTRAN all the vector representation was done with parallel arrays;
+in C, I introduced a struct; in Python, the class has a complete
+repertoire of vector-algebra operations.
+

Modified: trunk/doc/sst-doc.xml
===================================================================
--- trunk/doc/sst-doc.xml	2006-10-17 14:08:28 UTC (rev 770)
+++ trunk/doc/sst-doc.xml	2006-10-17 15:09:45 UTC (rev 771)
@@ -2004,7 +2004,7 @@
 
 <appendix><title>Setting the Wayback Machine</title>
 
-<para>SSTK and its ancestors have a long history.  One of the
+<para>SST2K and its ancestors have a long history.  One of the
 objectives of this project is to make that history available.
 Accordingly, here is a timeline of the development of SST2K and
 its ancestors, as closely as we can reconstruct it.  Someday this
@@ -2029,7 +2029,7 @@
 version to PDP-11 FORTRAN.</para></listitem>
 
 <listitem><para>21 September 1978 &mdash; This was the date on the
-first version Tom Almy saw, on which he based his C
+first version Tom Almy saw, on which he based his later C
 translation.</para></listitem>
 
 <listitem><para>1979 &mdash; Marc Newman adds Tholians, black holes,
@@ -2038,7 +2038,7 @@
 <listitem><para>1995-1996 &mdash; Tom Almy translates his FORTRAN
 port to ANSI C.</para></listitem>
 
-<listitem><para>1997 &mdash; Tom Almy finds the sources for the UT
+<listitem><para>1997 &mdash; Tom Almy finds the sources for UT
 FORTRAN on the Web and merges in features new since the 1978 version:
 EMEXIT, Tholian Web, improved death ray.  He adds deep-space probes
 from the DECUS version.</para></listitem>
@@ -2056,6 +2056,9 @@
 <listitem><para>September 2006 &mdash; BSD features merged
 in. Inhabited-worlds features and weighted critical hits date from
 this time.</para></listitem>
+
+<listitem><para>9 October 2006 &mdash; Translation to
+Python.</para></listitem>
 </itemizedlist>
 
 <para>One as-yet unanswered question is when the code changed from

Modified: trunk/src/io.c
===================================================================
--- trunk/src/io.c	2006-10-17 14:08:28 UTC (rev 770)
+++ trunk/src/io.c	2006-10-17 15:09:45 UTC (rev 771)
@@ -92,7 +92,7 @@
 void announce(void)
 {
     skip(1);
-    prouts(_("[ANOUNCEMENT ARRIVING...]"));
+    prouts(_("[ANNOUNCEMENT ARRIVING...]"));
     skip(1);
 }
 

Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-17 14:08:28 UTC (rev 770)
+++ trunk/src/sst.py	2006-10-17 15:09:45 UTC (rev 771)
@@ -1,183 +1,15 @@
 #!/usr/bin/env python
 """
-sst.py =-- Super Star Trek in Python
+sst.py -- Super Star Trek 2K
 
-This code is a Python translation of a C translation of a FORTRAN
-original dating back to 1973.  Beautiful Python it is not.  But it
-works.
+SST2K is a Python translation of a C translation of a FORTRAN
+original dating back to 1973.  Beautiful Python it is not, but it
+works.  Translation by Eric S. Raymond; original game by David Matuszek
+and Paul Reynolds, with modifications by Don Smith, Tom Almy,
+Stas Sergeev, and Eric S. Raymond.
 
-Dave Matuszek says:
-
-SRSCAN, MOVE, PHASERS, CALL, STATUS, IMPULSE, PHOTONS, ABANDON,
-LRSCAN, WARP, SHIELDS, DESTRUCT, CHART, REST, DOCK, QUIT, and DAMAGE
-were in the original non-"super" version of UT FORTRAN Star Trek.
-
-Tholians were not in the original. Dave is dubious about their merits.
-(They are now controlled by OPTION_THOLIAN and turned off if the game
-type is "plain".)
-
-Planets and dilithium crystals were not in the original.  Dave is OK
-with this idea. (It's now controlled by OPTION_PLANETS and turned 
-off if the game type is "plain".)
-
-Dave says the bit about the Galileo getting turned into a
-McDonald's is "consistant with our original vision".  (This has been
-left permanently enabled, as it can only happen if OPTION_PLANETS
-is on.)
-
-Dave also says the Space Thingy should not be preserved across saved
-games, so you can't prove to others that you've seen it.  He says it
-shouldn't fire back, either.  It should do nothing except scream and
-disappear when hit by photon torpedos.  It's OK that it may move
-when attacked, but it didn't in the original.  (Whether the Thingy
-can fire back is now controlled by OPTION_THINGY and turned off if the
-game type is "plain" or "almy".  The no-save behavior has been restored.)
-
-The Faerie Queen, black holes, and time warping were in the original.
-
-Here are Tom Almy's changes:
-
-In early 1997, I got the bright idea to look for references to
-"Super Star Trek" on the World Wide Web. There weren't many hits,
-but there was one that came up with 1979 Fortran sources! This
-version had a few additional features that mine didn't have,
-however mine had some feature it didn't have. So I merged its
-features that I liked. I also took a peek at the DECUS version (a
-port, less sources, to the PDP-10), and some other variations.
-
-1, Compared to the original UT version, I've changed the "help"
-command to "call" and the "terminate" command to "quit" to better
-match user expectations. The DECUS version apparently made those
-changes as well as changing "freeze" to "save". However I like
-"freeze".  (Both "freeze" and "save" work in SST2K.)
-
-2. The experimental deathray originally had only a 5% chance of
-success, but could be used repeatedly. I guess after a couple
-years of use, it was less "experimental" because the 1979
-version had a 70% success rate. However it was prone to breaking
-after use. I upgraded the deathray, but kept the original set of
-failure modes (great humor!).  (Now controlled by OPTION_DEATHRAY
-and turned off if game type is "plain".)
-
-3. The 1979 version also mentions srscan and lrscan working when
-docked (using the starbase's scanners), so I made some changes here
-to do this (and indicating that fact to the player), and then realized
-the base would have a subspace radio as well -- doing a Chart when docked
-updates the star chart, and all radio reports will be heard. The Dock
-command will also give a report if a base is under attack.
-
-4. Tholian Web from the 1979 version.  (Now controlled by
-OPTION_THOLIAN and turned off if game type is "plain".)
-
-5. Enemies can ram the Enterprise. (Now controlled by OPTION_RAMMING
-and turned off if game type is "plain".)
-
-6. Regular Klingons and Romulans can move in Expert and Emeritus games. 
-This code could use improvement. (Now controlled by OPTION_MVBADDY
-and turned off if game type is "plain".)
-
-7. The deep-space probe feature from the DECUS version.  (Now controlled
-by OPTION_PROBE and turned off if game type is "plain").
-
-8. 'emexit' command from the 1979 version.
-
-9. Bugfix: Klingon commander movements are no longer reported if long-range 
-sensors are damaged.
-
-10. Bugfix: Better base positioning at startup (more spread out).
-That made sense to add because most people abort games with 
-bad base placement.
-
-In June 2002, I fixed two known bugs and a documentation typo.
-In June 2004 I fixed a number of bugs involving: 1) parsing invalid
-numbers, 2) manual phasers when SR scan is damaged and commander is
-present, 3) time warping into the future, 4) hang when moving
-klingons in crowded quadrants.  (These fixes are in SST2K.)
-
-Here are Stas Sergeev's changes:
-
-1. The Space Thingy can be shoved, if you ram it, and can fire back if 
-fired upon. (Now controlled by OPTION_THINGY and turned off if game 
-type is "plain" or "almy".)
-
-2. When you are docked, base covers you with an almost invincible shield. 
-(A commander can still ram you, or a Romulan can destroy the base,
-or a SCom can even succeed with direct attack IIRC, but this rarely 
-happens.)  (Now controlled by OPTION_BASE and turned off if game 
-type is "plain" or "almy".)
-
-3. Ramming a black hole is no longer instant death.  There is a
-chance you might get timewarped instead. (Now controlled by 
-OPTION_BLKHOLE and turned off if game type is "plain" or "almy".)
-
-4. The Tholian can be hit with phasers.
-
-5. SCom can't escape from you if no more enemies remain 
-(without this, chasing SCom can take an eternity).
-
-6. Probe target you enter is now the destination quadrant. Before I don't 
-remember what it was, but it was something I had difficulty using.
-
-7. Secret password is now autogenerated.
-
-8. "Plaque" is adjusted for A4 paper :-)
-
-9. Phasers now tells you how much energy needed, but only if the computer 
-is alive.
-
-10. Planets are auto-scanned when you enter the quadrant.
-
-11. Mining or using crystals in presense of enemy now yields an attack.
-There are other minor adjustments to what yields an attack
-and what does not.
-
-12. "freeze" command reverts to "save", most people will understand this
-better anyway. (SST2K recognizes both.)
-
-13. Screen-oriented interface, with sensor scans always up.  (SST2K
-supports both screen-oriented and TTY modes.)
-
-Eric Raymond's changes:
-
-Mainly, I translated this C code out of FORTRAN into C -- created #defines
-for a lot of magic numbers and refactored the heck out of it.
-
-1. "sos" and "call" becomes "mayday", "freeze" and "save" are both good.
-
-2. Status report now indicates when dilithium crystals are on board.
-
-3. Per Dave Matuszek's remarks, Thingy state is never saved across games.
-
-4. Added game option selection so you can play a close (but not bug-for-
-bug identical) approximation of older versions.
-
-5. Half the quadrants now have inhabited planets, from which one 
-cannot mine dilithium (there will still be the same additional number
-of dilithium-bearing planets).  Torpedoing an inhabited world is *bad*.
-There is BSD-Trek-like logic for Klingons to attack and enslave 
-inhabited worlds, producing more ships (only is skill is 'good' or 
-better). (Controlled by OPTION_WORLDS and turned off if game 
-type is "plain" or "almy".)
-
-6. User input is now logged so we can do regression testing.
-
-7. More BSD-Trek features: You can now lose if your entire crew
-dies in battle.  When abandoning ship in a game with inhabited
-worlds enabled, they must have one in the quadrant to beam down
-to; otherwise they die in space and this counts heavily against
-your score.  Docking at a starbase replenishes your crew.
-
-8. Still more BSD-Trek: we now have a weighted damage table.
-Also, the nav subsystem (enabling automatic course
-setting) can be damaged separately from the main computer (which
-handles weapons targeting, ETA calculation, and self-destruct).
-
-After these features were added, I translated this into Python and added
-more:
-
-9. A long-range scan is done silently whenever you call CHART; thus
-the LRSCAN command is no longer needed.  (Controlled by OPTION_AUTOSCAN
-and turned off if game type is "plain" or "almy".)
+See the doc/HACKING file in the distribution for designers notes and advice
+ion how to modify (and how not to modify!) this code.
 """
 import os, sys, math, curses, time, readline, cPickle, random, copy, gettext
 



From esr at mail.berlios.de  Tue Oct 17 19:31:53 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 17 Oct 2006 19:31:53 +0200
Subject: [Sst-commit-watch] r772 - trunk/src
Message-ID: <200610171731.k9HHVrJQ000095@sheep.berlios.de>

Author: esr
Date: 2006-10-17 19:31:52 +0200 (Tue, 17 Oct 2006)
New Revision: 772

Modified:
   trunk/src/sst.py
Log:
Equates for display character names made sense when the values were
FORTRAN literals, but in Python it makes better readability to just let the 
name of the display character be itself.  Search and replace is easy.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-17 15:09:45 UTC (rev 771)
+++ trunk/src/sst.py	2006-10-17 17:31:52 UTC (rev 772)
@@ -33,26 +33,6 @@
 MAXBURST	= 3
 MINCMDR 	= 10
 
-# How to represent features
-IHR = 'R',
-IHK = 'K',
-IHC = 'C',
-IHS = 'S',
-IHSTAR = '*',
-IHP = 'P',
-IHW = '@',
-IHB = 'B',
-IHBLANK = ' ',
-IHDOT = '.',
-IHQUEST = '?',
-IHE = 'E',
-IHF = 'F',
-IHT = 'T',
-IHWEB = '#',
-IHMATER0 = '-',
-IHMATER1 = 'o',
-IHMATER2 = '0'
-
 class TrekError:
     pass
 
@@ -267,10 +247,10 @@
         motion = (loc != self.kloc)
         if self.kloc.i is not None and self.kloc.j is not None:
             if motion:
-                if self.type == IHT:
-                    game.quad[self.kloc.i][self.kloc.j] = IHWEB
+                if self.type == 'T':
+                    game.quad[self.kloc.i][self.kloc.j] = '#'
                 else:
-                    game.quad[self.kloc.i][self.kloc.j] = IHDOT
+                    game.quad[self.kloc.i][self.kloc.j] = '.'
         if loc:
             self.kloc = copy.copy(loc)
             game.quad[self.kloc.i][self.kloc.j] = self.type
@@ -371,25 +351,6 @@
         # if the only remaining klingon is SCOM.
         game.state.remtime = game.state.remres/(game.state.remkl + 4*len(game.state.kcmdr))
 
-IHR = 'R'
-IHK = 'K'
-IHC = 'C'
-IHS = 'S'
-IHSTAR = '*'
-IHP = 'P'
-IHW = '@'
-IHB = 'B'
-IHBLANK = ' '
-IHDOT = '.'
-IHQUEST = '?'
-IHE = 'E'
-IHF = 'F'
-IHT = 'T'
-IHWEB = '#'
-IHMATER0 = '-'
-IHMATER1 = 'o'
-IHMATER2 = '0'
-
 FWON = 0
 FDEPLETE = 1
 FLIFESUP = 2
@@ -447,11 +408,11 @@
     iq.j = game.quadrant.j+(look.j+(QUADSIZE-1))/QUADSIZE - 1
     if not welcoming(iq):
 	return False;
-    if enemy.type == IHR:
+    if enemy.type == 'R':
 	return False; # Romulans cannot escape! 
     if not irun:
 	# avoid intruding on another commander's territory 
-	if enemy.type == IHC:
+	if enemy.type == 'C':
             if iq in game.state.kcmdr:
                 return False
 	    # refuse to leave if currently attacking starbase 
@@ -474,7 +435,7 @@
     # Handle global matters related to escape 
     game.state.galaxy[game.quadrant.i][game.quadrant.j].klingons -= 1
     game.state.galaxy[iq.i][iq.j].klingons += 1
-    if enemy.type==IHS:
+    if enemy.type=='S':
 	game.iscate = False
 	game.ientesc = False
 	game.isatb = 0
@@ -538,7 +499,7 @@
     dist1 = enemy.kdist
     mdist = int(dist1 + 0.5); # Nearest integer distance 
     # If SC, check with spy to see if should hi-tail it 
-    if enemy.type==IHS and \
+    if enemy.type=='S' and \
 	(enemy.kpower <= 500.0 or (game.condition=="docked" and not damaged(DPHOTON))):
 	irun = True
 	motion = -QUADSIZE
@@ -628,10 +589,10 @@
 		    break
 		look.j = next.j + krawlj
 		krawlj = -krawlj
-	    elif (game.options & OPTION_RAMMING) and game.quad[look.i][look.j] != IHDOT:
+	    elif (game.options & OPTION_RAMMING) and game.quad[look.i][look.j] != '.':
 		# See if enemy should ram ship 
 		if game.quad[look.i][look.j] == game.ship and \
-		    (enemy.type == IHC or enemy.type == IHS):
+		    (enemy.type == 'C' or enemy.type == 'S'):
 		    collision(rammed=True, enemy=enemy)
 		    return
 		if krawli != m.i and m.j != 0:
@@ -669,11 +630,11 @@
     # and do move
     if game.quadrant in game.state.kcmdr:
         for enemy in game.enemies:
-	    if enemy.type == IHC:
+	    if enemy.type == 'C':
 		movebaddy(enemy)
     if game.state.kscmdr==game.quadrant:
         for enemy in game.enemies:
-	    if enemy.type == IHS:
+	    if enemy.type == 'S':
 		movebaddy(enemy)
 		break
     # If skill level is high, move other Klingons and Romulans too!
@@ -681,7 +642,7 @@
     # commander(s) do.
     if game.skill >= SKILL_EXPERT and (game.options & OPTION_MVBADDY):
         for enemy in game.enemies:
-            if enemy.type in (IHK, IHR):
+            if enemy.type in ('K', 'R'):
 		movebaddy(enemy)
     game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
 
@@ -703,7 +664,7 @@
 	game.ientesc = False
 	unschedule(FSCDBAS)
 	for enemy in game.enemies:
-	    if enemy.type == IHS:
+	    if enemy.type == 'S':
 		break
 	enemy.move(None)
 	game.klhere -= 1
@@ -863,34 +824,34 @@
         prout("***Internal error: Tholian in a bad spot.")
 	return
     # do nothing if we are blocked 
-    if game.quad[id.i][id.j] not in (IHDOT, IHWEB):
+    if game.quad[id.i][id.j] not in ('.', '#'):
 	return
     here = copy.copy(game.tholian.kloc)
     delta = (id - game.tholian.kloc).sgn()
     # move in x axis 
     while here.i != id.i:
         here.i += delta.i
-        if game.quad[here.i][here.j]==IHDOT:
+        if game.quad[here.i][here.j]=='.':
             game.tholian.move(here)
     # move in y axis 
     while here.j != id.j:
         here.j += delta.j
-        if game.quad[here.i][here.j]==IHDOT:
+        if game.quad[here.i][here.j]=='.':
             game.tholian.move(here)
     # check to see if all holes plugged 
     for i in range(QUADSIZE):
-	if game.quad[0][i]!=IHWEB and game.quad[0][i]!=IHT:
+	if game.quad[0][i]!='#' and game.quad[0][i]!='T':
 	    return
-	if game.quad[QUADSIZE-1][i]!=IHWEB and game.quad[QUADSIZE-1][i]!=IHT:
+	if game.quad[QUADSIZE-1][i]!='#' and game.quad[QUADSIZE-1][i]!='T':
 	    return
-	if game.quad[i][0]!=IHWEB and game.quad[i][0]!=IHT:
+	if game.quad[i][0]!='#' and game.quad[i][0]!='T':
 	    return
-	if game.quad[i][QUADSIZE-1]!=IHWEB and game.quad[i][QUADSIZE-1]!=IHT:
+	if game.quad[i][QUADSIZE-1]!='#' and game.quad[i][QUADSIZE-1]!='T':
 	    return
     # All plugged up -- Tholian splits 
-    game.quad[game.tholian.kloc.i][game.tholian.kloc.j]=IHWEB
-    dropin(IHBLANK)
-    prout(crmena(True, IHT, "sector", game.tholian) + _(" completes web."))
+    game.quad[game.tholian.kloc.i][game.tholian.kloc.j]='#'
+    dropin(' ')
+    prout(crmena(True, 'T', "sector", game.tholian) + _(" completes web."))
     game.tholian.move(None)
     return
 
@@ -1060,7 +1021,7 @@
     skip(2)
     proutn("***")
     proutn(crmshp())
-    hardness = {IHR:1.5, IHC:2.0, IHS:2.5, IHT:0.5, IHQUEST:4.0}.get(enemy.type, 1.0)
+    hardness = {'R':1.5, 'C':2.0, 'S':2.5, 'T':0.5, '?':4.0}.get(enemy.type, 1.0)
     if rammed:
         proutn(_(" rammed by "))
     else:
@@ -1114,12 +1075,12 @@
 	    break
 	iquad=game.quad[w.i][w.j]
 	tracktorpedo(origin, w, step, number, nburst, iquad)
-	if iquad==IHDOT:
+	if iquad=='.':
 	    continue
 	# hit something 
 	if not damaged(DSRSENS) or game.condition == "docked":
 	    skip(1);	# start new line after text track 
-	if iquad in (IHE, IHF): # Hit our ship 
+	if iquad in ('E', 'F'): # Hit our ship 
 	    skip(1)
 	    prout(_("Torpedo hits %s.") % crmshp())
 	    hit = 700.0 + randreal(100) - \
@@ -1134,24 +1095,24 @@
             bumpto = displacement.sector()
 	    if not bumpto.valid_sector():
 		return hit
-	    if game.quad[bumpto.i][bumpto.j]==IHBLANK:
+	    if game.quad[bumpto.i][bumpto.j]==' ':
 		finish(FHOLE)
 		return hit
-	    if game.quad[bumpto.i][bumpto.j]!=IHDOT:
+	    if game.quad[bumpto.i][bumpto.j]!='.':
 		# can't move into object 
 		return hit
 	    game.sector = bumpto
 	    proutn(crmshp())
-            game.quad[w.i][w.j]=IHDOT
+            game.quad[w.i][w.j]='.'
             game.quad[bumpto.i][bumpto.j]=iquad
             prout(_(" displaced by blast to Sector %s ") % bumpto)
             for enemy in game.enemies:
                 enemy.kdist = enemy.kavgd = (game.sector-enemy.kloc).distance()
             game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
             return None
-	elif iquad in (IHC, IHS, IHR, IHK): # Hit a regular enemy 
+	elif iquad in ('C', 'S', 'R', 'K'): # Hit a regular enemy 
 	    # find the enemy 
-	    if iquad in (IHC, IHS) and withprob(0.05):
+	    if iquad in ('C', 'S') and withprob(0.05):
 		prout(crmena(True, iquad, "sector", w) + _(" uses anti-photon device;"))
 		prout(_("   torpedo neutralized."))
 		return None
@@ -1178,63 +1139,63 @@
             if not bumpto.valid_sector():
 		prout(_(" damaged but not destroyed."))
 		return
-	    if game.quad[bumpto.i][bumpto.j] == IHBLANK:
+	    if game.quad[bumpto.i][bumpto.j] == ' ':
 		prout(_(" buffeted into black hole."))
 		deadkl(w, iquad, bumpto)
-	    if game.quad[bumpto.i][bumpto.j] != IHDOT:
+	    if game.quad[bumpto.i][bumpto.j] != '.':
 		prout(_(" damaged but not destroyed."))
             else:
                 prout(_(" damaged-- displaced by blast to Sector %s ")%bumpto)
                 enemy.kloc = bumpto
-                game.quad[w.i][w.j]=IHDOT
+                game.quad[w.i][w.j]='.'
                 game.quad[bumpto.i][bumpto.j]=iquad
                 for enemy in game.enemies:
                     enemy.kdist = enemy.kavgd = (game.sector-enemy.kloc).distance()
                 game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
             return None
-	elif iquad == IHB: # Hit a base 
+	elif iquad == 'B': # Hit a base 
 	    skip(1)
 	    prout(_("***STARBASE DESTROYED.."))
             game.state.baseq = filter(lambda x: x != game.quadrant, game.state.baseq)
-	    game.quad[w.i][w.j]=IHDOT
+	    game.quad[w.i][w.j]='.'
 	    game.base.invalidate()
 	    game.state.galaxy[game.quadrant.i][game.quadrant.j].starbase -= 1
 	    game.state.chart[game.quadrant.i][game.quadrant.j].starbase -= 1
 	    game.state.basekl += 1
 	    newcnd()
 	    return None
-	elif iquad == IHP: # Hit a planet 
+	elif iquad == 'P': # Hit a planet 
 	    prout(crmena(True, iquad, "sector", w) + _(" destroyed."))
 	    game.state.nplankl += 1
 	    game.state.galaxy[game.quadrant.i][game.quadrant.j].planet = None
 	    game.iplnet.pclass = "destroyed"
 	    game.iplnet = None
 	    game.plnet.invalidate()
-	    game.quad[w.i][w.j] = IHDOT
+	    game.quad[w.i][w.j] = '.'
 	    if game.landed:
 		# captain perishes on planet 
 		finish(FDPLANET)
 	    return None
-	elif iquad == IHW: # Hit an inhabited world -- very bad! 
+	elif iquad == '@': # Hit an inhabited world -- very bad! 
 	    prout(crmena(True, iquad, "sector", w) + _(" destroyed."))
 	    game.state.nworldkl += 1
 	    game.state.galaxy[game.quadrant.i][game.quadrant.j].planet = None
 	    game.iplnet.pclass = "destroyed"
 	    game.iplnet = None
 	    game.plnet.invalidate()
-	    game.quad[w.i][w.j] = IHDOT
+	    game.quad[w.i][w.j] = '.'
 	    if game.landed:
 		# captain perishes on planet 
 		finish(FDPLANET)
 	    prout(_("The torpedo destroyed an inhabited planet."))
 	    return None
-	elif iquad == IHSTAR: # Hit a star 
+	elif iquad == '*': # Hit a star 
 	    if withprob(0.9):
 		nova(w)
             else:
-                prout(crmena(True, IHSTAR, "sector", w) + _(" unaffected by photon blast."))
+                prout(crmena(True, '*', "sector", w) + _(" unaffected by photon blast."))
 	    return None
-	elif iquad == IHQUEST: # Hit a thingy 
+	elif iquad == '?': # Hit a thingy 
 	    if not (game.options & OPTION_THINGY) or withprob(0.3):
 		skip(1)
 		prouts(_("AAAAIIIIEEEEEEEEAAAAAAAAUUUUUGGGGGHHHHHHHHHHHH!!!"))
@@ -1252,32 +1213,32 @@
 		thing.angry = True
 		shoved = True
 	    return None
-	elif iquad == IHBLANK: # Black hole 
+	elif iquad == ' ': # Black hole 
 	    skip(1)
-	    prout(crmena(True, IHBLANK, "sector", w) + _(" swallows torpedo."))
+	    prout(crmena(True, ' ', "sector", w) + _(" swallows torpedo."))
 	    return None
-	elif iquad == IHWEB: # hit the web 
+	elif iquad == '#': # hit the web 
 	    skip(1)
 	    prout(_("***Torpedo absorbed by Tholian web."))
 	    return None
-	elif iquad == IHT:  # Hit a Tholian 
+	elif iquad == 'T':  # Hit a Tholian 
 	    h1 = 700.0 + randrange(100) - \
 		1000.0 * (w-origin).distance() * math.fabs(math.sin(bullseye-angle))
 	    h1 = math.fabs(h1)
 	    if h1 >= 600:
-		game.quad[w.i][w.j] = IHDOT
+		game.quad[w.i][w.j] = '.'
 		deadkl(w, iquad, w)
 		game.tholian = None
 		return None
 	    skip(1)
-	    proutn(crmena(True, IHT, "sector", w))
+	    proutn(crmena(True, 'T', "sector", w))
 	    if withprob(0.05):
 		prout(_(" survives photon blast."))
 		return None
 	    prout(_(" disappears."))
 	    game.tholian.move(None)
-	    game.quad[w.i][w.j] = IHWEB
-	    dropin(IHBLANK)
+	    game.quad[w.i][w.j] = '#'
+	    dropin(' ')
 	    return None
         else: # Problem!
 	    skip(1)
@@ -1362,15 +1323,15 @@
 	    r *= 0.25
 	if enemy.kpower < 500:
 	    r *= 0.25; 
-	if enemy.type==IHT or (enemy.type==IHQUEST and not thing.angry):
+	if enemy.type=='T' or (enemy.type=='?' and not thing.angry):
 	    continue
 	# different enemies have different probabilities of throwing a torp 
 	usephasers = not torps_ok or \
-	    (enemy.type == IHK and r > 0.0005) or \
-	    (enemy.type==IHC and r > 0.015) or \
-	    (enemy.type==IHR and r > 0.3) or \
-	    (enemy.type==IHS and r > 0.07) or \
-	    (enemy.type==IHQUEST and r > 0.05)
+	    (enemy.type == 'K' and r > 0.0005) or \
+	    (enemy.type=='C' and r > 0.015) or \
+	    (enemy.type=='R' and r > 0.3) or \
+	    (enemy.type=='S' and r > 0.07) or \
+	    (enemy.type=='?' and r > 0.05)
 	if usephasers:	    # Enemy uses phasers 
 	    if game.condition == "docked":
 		continue; # Don't waste the effort! 
@@ -1471,15 +1432,15 @@
     # Added mv to allow enemy to "move" before dying 
     proutn(crmena(True, type, "sector", mv))
     # Decide what kind of enemy it is and update appropriately 
-    if type == IHR:
+    if type == 'R':
         # Chalk up a Romulan 
         game.state.galaxy[game.quadrant.i][game.quadrant.j].romulans -= 1
         game.irhere -= 1
         game.state.nromrem -= 1
-    elif type == IHT:
+    elif type == 'T':
         # Killed a Tholian 
         game.tholian = None
-    elif type == IHQUEST:
+    elif type == '?':
         # Killed a Thingy
         global thing
         thing = None
@@ -1487,16 +1448,16 @@
         # Killed some type of Klingon 
         game.state.galaxy[game.quadrant.i][game.quadrant.j].klingons -= 1
         game.klhere -= 1
-        if type == IHC:
+        if type == 'C':
             game.state.kcmdr.remove(game.quadrant)
             unschedule(FTBEAM)
             if game.state.kcmdr:
                 schedule(FTBEAM, expran(1.0*game.incom/len(game.state.kcmdr)))
             if is_scheduled(FCDBAS) and game.battle == game.quadrant:
                 unschedule(FCDBAS)    
-        elif type ==  IHK:
+        elif type ==  'K':
             game.state.remkl -= 1
-        elif type ==  IHS:
+        elif type ==  'S':
             game.state.nscrem -= 1
             game.state.kscmdr.invalidate()
             game.isatb = 0
@@ -1700,7 +1661,7 @@
 	else:
 	    proutn(_("Very small hit on "))
 	ienm = game.quad[w.i][w.j]
-	if ienm==IHQUEST:
+	if ienm=='?':
 	    thing.angry = True
 	proutn(crmena(False, ienm, "sector", w))
 	skip(1)
@@ -1890,7 +1851,7 @@
 		msgflag = False
 		rpow = 0.0
 	    if damaged(DSRSENS) and \
-               not game.sector.distance(aim)<2**0.5 and ienm in (IHC, IHS):
+               not game.sector.distance(aim)<2**0.5 and ienm in ('C', 'S'):
 		prout(cramen(ienm) + _(" can't be located without short range scan."))
 		scanner.chew()
 		key = "IHEOL"
@@ -2067,7 +2028,7 @@
         # Handle case where base is in same quadrant as starship 
         if game.battle == game.quadrant:
             game.state.chart[game.battle.i][game.battle.j].starbase = False
-            game.quad[game.base.i][game.base.j] = IHDOT
+            game.quad[game.base.i][game.base.j] = '.'
             game.base.invalidate()
             newcnd()
             skip(1)
@@ -2459,8 +2420,8 @@
 	supernova(game.quadrant)
 	return
     # handle initial nova 
-    game.quad[nov.i][nov.j] = IHDOT
-    prout(crmena(False, IHSTAR, "sector", nov) + _(" novas."))
+    game.quad[nov.i][nov.j] = '.'
+    prout(crmena(False, '*', "sector", nov) + _(" novas."))
     game.state.galaxy[game.quadrant.i][game.quadrant.j].stars -= 1
     game.state.starkl += 1
     # Set up queue to recursively trigger adjacent stars 
@@ -2478,9 +2439,9 @@
                     continue
                 iquad = game.quad[neighbor.i][neighbor.j]
                 # Empty space ends reaction
-                if iquad in (IHDOT, IHQUEST, IHBLANK, IHT, IHWEB):
+                if iquad in ('.', '?', ' ', 'T', '#'):
                     pass
-                elif iquad == IHSTAR: # Affect another star 
+                elif iquad == '*': # Affect another star 
                     if withprob(0.05):
                         # This star supernovas 
                         supernova(game.quadrant)
@@ -2489,33 +2450,33 @@
                         hits.append(neighbor)
 			game.state.galaxy[game.quadrant.i][game.quadrant.j].stars -= 1
 			game.state.starkl += 1
-			proutn(crmena(True, IHSTAR, "sector", neighbor))
+			proutn(crmena(True, '*', "sector", neighbor))
 			prout(_(" novas."))
-                        game.quad[neighbor.i][neighbor.j] = IHDOT
+                        game.quad[neighbor.i][neighbor.j] = '.'
                         kount += 1
-                elif iquad in (IHP, IHW): # Destroy planet 
+                elif iquad in ('P', '@'): # Destroy planet 
                     game.state.galaxy[game.quadrant.i][game.quadrant.j].planet = None
-                    if iquad == IHP:
+                    if iquad == 'P':
                         game.state.nplankl += 1
                     else:
                         game.state.worldkl += 1
-                    prout(crmena(True, IHB, "sector", neighbor) + _(" destroyed."))
+                    prout(crmena(True, 'B', "sector", neighbor) + _(" destroyed."))
                     game.iplnet.pclass = "destroyed"
                     game.iplnet = None
                     game.plnet.invalidate()
                     if game.landed:
                         finish(FPNOVA)
                         return
-                    game.quad[neighbor.i][neighbor.j] = IHDOT
-                elif iquad == IHB: # Destroy base 
+                    game.quad[neighbor.i][neighbor.j] = '.'
+                elif iquad == 'B': # Destroy base 
                     game.state.galaxy[game.quadrant.i][game.quadrant.j].starbase = False
                     game.state.baseq = filter(lambda x: x!= game.quadrant, game.state.baseq)
                     game.base.invalidate()
                     game.state.basekl += 1
                     newcnd()
-                    prout(crmena(True, IHB, "sector", neighbor) + _(" destroyed."))
-                    game.quad[neighbor.i][neighbor.j] = IHDOT
-                elif iquad in (IHE, IHF): # Buffet ship 
+                    prout(crmena(True, 'B', "sector", neighbor) + _(" destroyed."))
+                    game.quad[neighbor.i][neighbor.j] = '.'
+                elif iquad in ('E', 'F'): # Buffet ship 
                     prout(_("***Starship buffeted by nova."))
                     if game.shldup:
                         if game.shield >= 2000.0:
@@ -2534,9 +2495,9 @@
                         return
                     # add in course nova contributes to kicking starship
                     bump += (game.sector-hits[mm]).sgn()
-                elif iquad == IHK: # kill klingon 
+                elif iquad == 'K': # kill klingon 
                     deadkl(neighbor, iquad, neighbor)
-                elif iquad in (IHC,IHS,IHR): # Damage/destroy big enemies 
+                elif iquad in ('C','S','R'): # Damage/destroy big enemies 
                     for ll in range(len(game.enemies)):
                         if game.enemies[ll].kloc == neighbor:
                             break
@@ -2551,17 +2512,17 @@
                         skip(1)
                         break
                     iquad1 = game.quad[newc.i][newc.j]
-                    if iquad1 == IHBLANK:
-                        proutn(_(", blasted into ") + crmena(False, IHBLANK, "sector", newc))
+                    if iquad1 == ' ':
+                        proutn(_(", blasted into ") + crmena(False, ' ', "sector", newc))
                         skip(1)
                         deadkl(neighbor, iquad, newc)
                         break
-                    if iquad1 != IHDOT:
+                    if iquad1 != '.':
                         # can't move into something else 
                         skip(1)
                         break
                     proutn(_(", buffeted to Sector %s") % newc)
-                    game.quad[neighbor.i][neighbor.j] = IHDOT
+                    game.quad[neighbor.i][neighbor.j] = '.'
                     game.quad[newc.i][newc.j] = iquad
                     game.enemies[ll].move(newc)
     # Starship affected by nova -- kick it away. 
@@ -2617,7 +2578,7 @@
 	num = randrange(game.state.galaxy[nq.i][nq.j].stars) + 1
 	for ns.i in range(QUADSIZE):
 	    for ns.j in range(QUADSIZE):
-		if game.quad[ns.i][ns.j]==IHSTAR:
+		if game.quad[ns.i][ns.j]=='*':
 		    num -= 1
 		    if num==0:
 			break
@@ -2724,7 +2685,7 @@
 
 def kaboom():
     stars()
-    if game.ship==IHE:
+    if game.ship=='E':
 	prouts("***")
     prouts(_("********* Entropy of %s maximized *********") % crmshp())
     skip(1)
@@ -2758,7 +2719,7 @@
             45.0*game.nhelp +\
             100.0*game.state.basekl +\
             3.0*game.abandoned
-    if game.ship == IHF:
+    if game.ship == 'F':
         badpt += 100.0
     elif game.ship == None:
         badpt += 200.0
@@ -2930,10 +2891,10 @@
 	prout(_("You are crushed into extremely dense matter."))
     elif ifin == FCREW:
 	prout(_("Your last crew member has died."))
-    if game.ship == IHF:
+    if game.ship == 'F':
 	game.ship = None
-    elif game.ship == IHE:
-	game.ship = IHF
+    elif game.ship == 'E':
+	game.ship = 'F'
     game.alive = False
     if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem) != 0:
 	goodies = game.state.remres/game.inresor
@@ -2968,9 +2929,9 @@
     iwon = 0
     if game.gamewon:
 	iwon = 100*game.skill
-    if game.ship == IHE: 
+    if game.ship == 'E': 
 	klship = 0
-    elif game.ship == IHF: 
+    elif game.ship == 'F': 
 	klship = 1
     else:
 	klship = 2
@@ -3276,11 +3237,6 @@
        curwnd.refresh()
     linecount = 0
     
-def highvideo():
-    "Set highlight video, if this is reasonable."
-    if game.options & OPTION_CURSES:
-	curwnd.attron(curses.A_REVERSE)
- 
 #
 # Things past this point have policy implications.
 # 
@@ -3357,7 +3313,7 @@
 	    if i != 0 and step == 1:
 		drawmaps(2)
 		time.sleep(0.4)
-	    if (iquad==IHDOT) or (iquad==IHBLANK):
+	    if (iquad=='.') or (iquad==' '):
 		put_srscan_sym(w, '+')
 		#sound(step*10)
 		#time.sleep(0.1)
@@ -3462,16 +3418,16 @@
 
     def check_collision(h):
         iquad = game.quad[h.i][h.j]
-        if iquad != IHDOT:
+        if iquad != '.':
             # object encountered in flight path 
             stopegy = 50.0*course.distance/game.optime
-            if iquad in (IHT, IHK, IHC, IHS, IHR, IHQUEST):
+            if iquad in ('T', 'K', 'C', 'S', 'R', '?'):
                 for enemy in game.enemies:
                     if enemy.kloc == game.sector:
                         break
                 collision(rammed=False, enemy=enemy)
                 return True
-            elif iquad == IHBLANK:
+            elif iquad == ' ':
                 skip(1)
                 prouts(_("***RED ALERT!  RED ALERT!"))
                 skip(1)
@@ -3494,7 +3450,7 @@
                 # something else 
                 skip(1)
                 proutn(crmshp())
-                if iquad == IHWEB:
+                if iquad == '#':
                     prout(_(" encounters Tholian web at %s;") % h)
                 else:
                     prout(_(" blocked by object at %s;") % h)
@@ -3517,7 +3473,7 @@
 	course.distance = course.distance*(scheduled(FTBEAM)-game.state.date)/game.optime + 0.1
 	game.optime = scheduled(FTBEAM) - game.state.date + 1e-5
     # Move out
-    game.quad[game.sector.i][game.sector.j] = IHDOT
+    game.quad[game.sector.i][game.sector.j] = '.'
     for m in range(course.moves):
         course.next()
         w = course.sector()
@@ -3896,7 +3852,7 @@
                 w = course.sector()
                 if not w.valid_sector():
                     break
-		if game.quad[w.i][w.j] != IHDOT:
+		if game.quad[w.i][w.j] != '.':
 		    blooey = False
 		    twarp = False
             course.reset()
@@ -4063,7 +4019,7 @@
 	for l in range(game.inplan):
 	    if game.state.planets[l].known == "shuttle_down":
 		gotit = True
-		if game.iscraft == "onship" and game.ship==IHE:
+		if game.iscraft == "onship" and game.ship=='E':
 		    prout(_("Chekov-  \"Security reports the Galileo has disappeared, Sir!"))
 		    game.iscraft = "offship"
 	# Likewise, if in the original time the Galileo was abandoned, but
@@ -4090,7 +4046,7 @@
     if game.nprobes == 0:
 	scanner.chew()
 	skip(1)
-	if game.ship == IHE: 
+	if game.ship == 'E': 
 	    prout(_("Engineer Scott- \"We have no more deep space probes, Sir.\""))
 	else:
 	    prout(_("Ye Faerie Queene has no deep space probes."))
@@ -4169,13 +4125,13 @@
 	game.quadrant = ibq
 	newqad()
     # dematerialize starship 
-    game.quad[game.sector.i][game.sector.j]=IHDOT
+    game.quad[game.sector.i][game.sector.j]='.'
     proutn(_("Starbase in Quadrant %s responds--%s dematerializes") \
            % (game.quadrant, crmshp()))
     game.sector.invalidate()
     for m in range(1, 5+1):
         w = game.base.scatter() 
-	if w.valid_sector() and game.quad[w.i][w.j]==IHDOT:
+	if w.valid_sector() and game.quad[w.i][w.j]=='.':
 	    # found one -- finish up 
             game.sector = w
 	    break
@@ -4190,25 +4146,21 @@
 	elif m == 2: proutn(_("2nd"))
 	elif m == 3: proutn(_("3rd"))
 	proutn(_(" attempt to re-materialize ") + crmshp())
-	game.quad[ix][iy]=(IHMATER0,IHMATER1,IHMATER2)[m-1]
-	#textcolor("red")
+	game.quad[ix][iy]=('-','o','O')[m-1]
 	warble()
 	if randreal() > probf:
 	    break
 	prout(_("fails."))
 	curses.delay_output(500)
-	#textcolor(None)
     if m > 3:
-	game.quad[ix][iy]=IHQUEST
+	game.quad[ix][iy]='?'
 	game.alive = False
 	drawmaps(1)
 	setwnd(message_window)
 	finish(FMATERIALIZE)
 	return
     game.quad[ix][iy]=game.ship
-    #textcolor("green")
     prout(_("succeeds."))
-    #textcolor(None)
     dock(False)
     skip(1)
     prout(_("Lt. Uhura-  \"Captain, we made it!\""))
@@ -4217,7 +4169,7 @@
     "Abandon ship."
     scanner.chew()
     if game.condition=="docked":
-	if game.ship!=IHE:
+	if game.ship!='E':
 	    prout(_("You cannot abandon Ye Faerie Queene."))
 	    return
     else:
@@ -4275,11 +4227,11 @@
 	    newqad()
 	while True:
 	    # position next to base by trial and error 
-	    game.quad[game.sector.i][game.sector.j] = IHDOT
+	    game.quad[game.sector.i][game.sector.j] = '.'
 	    for l in range(QUADSIZE):
 		game.sector = game.base.scatter()
 		if game.sector.valid_sector() and \
-                       game.quad[game.sector.i][game.sector.j] == IHDOT:
+                       game.quad[game.sector.i][game.sector.j] == '.':
                     break
 	    if l < QUADSIZE+1:
 		break # found a spot 
@@ -4287,7 +4239,7 @@
 	    game.sector.j=QUADSIZE/2
 	    newqad()
     # Get new commission 
-    game.quad[game.sector.i][game.sector.j] = game.ship = IHF
+    game.quad[game.sector.i][game.sector.j] = game.ship = 'F'
     game.state.crew = FULLCREW
     prout(_("Starfleet puts you in command of another ship,"))
     prout(_("the Faerie Queene, which is antiquated but,"))
@@ -4670,7 +4622,7 @@
     game.ididit = False
     skip(1)
     scanner.chew()
-    if game.ship != IHE:
+    if game.ship != 'E':
 	prout(_("Ye Faerie Queene has no death ray."))
 	return
     if len(game.enemies)==0:
@@ -4754,8 +4706,8 @@
 	prout(_(" Mr. Sulu."))
 	for i in range(QUADSIZE):
 	    for j in range(QUADSIZE):
-		if game.quad[i][j] == IHDOT:
-		    game.quad[i][j] = IHQUEST
+		if game.quad[i][j] == '.':
+		    game.quad[i][j] = '?'
 	prout(_("  Captain, our quadrant is now infested with"))
 	prouts(_(" - - - - - -  *THINGS*."))
 	skip(1)
@@ -4829,7 +4781,7 @@
 	prout(_("%d casualt%s suffered so far.") % (game.casual, ("y", "ies")[game.casual!=1]))
     if game.nhelp:
 	prout(_("There were %d call%s for help.") % (game.nhelp,  ("" , _("s"))[game.nhelp!=1]))
-    if game.ship == IHE:
+    if game.ship == 'E':
 	proutn(_("You have "))
 	if game.nprobes:
 	    proutn("%d" % (game.nprobes))
@@ -4956,16 +4908,7 @@
 def sectscan(goodScan, i, j):
     "Light up an individual dot in a sector."
     if goodScan or (abs(i-game.sector.i)<= 1 and abs(j-game.sector.j) <= 1):
-	if (game.quad[i][j]==IHMATER0) or (game.quad[i][j]==IHMATER1) or (game.quad[i][j]==IHMATER2) or (game.quad[i][j]==IHE) or (game.quad[i][j]==IHF):
-	    #if game.condition   == "red": textcolor("red")
-	    #elif game.condition == "green": textcolor("green")
-	    #elif game.condition == "yellow": textcolor("yellow")
-	    #elif game.condition == "docked": textcolor("cyan")
-	    #elif game.condition == "dead": textcolor("brown")
-	    if game.quad[i][j] != game.ship: 
-		highvideo()
 	proutn("%c " % game.quad[i][j])
-	#textcolor(None)
     else:
 	proutn("- ")
 
@@ -5317,7 +5260,7 @@
 	return # frozen game
     # Prepare the Enterprise
     game.alldone = game.gamewon = game.shldchg = game.shldup = False
-    game.ship = IHE
+    game.ship = 'E'
     game.state.crew = FULLCREW
     game.energy = game.inenrg = 5000.0
     game.shield = game.inshld = 2500.0
@@ -5614,7 +5557,7 @@
     "Drop a feature on a random dot in the current quadrant."
     while True:
         w = randplace(QUADSIZE)
-        if game.quad[w.i][w.j] == IHDOT:
+        if game.quad[w.i][w.j] == '.':
             break
     if iquad is not None:
         game.quad[w.i][w.j] = iquad
@@ -5632,7 +5575,7 @@
 
 def newkling():
     "Drop new Klingon into current quadrant."
-    return enemy(IHK, loc=dropin(), power=randreal(300,450)+25.0*game.skill)
+    return enemy('K', loc=dropin(), power=randreal(300,450)+25.0*game.skill)
 
 def newqad():
     "Set up a new state of quadrant, for when we enter or re-enter it."
@@ -5641,7 +5584,7 @@
     game.neutz = game.inorbit = game.landed = False
     game.ientesc = game.iseenit = False
     # Create a blank quadrant
-    game.quad = fill2d(QUADSIZE, lambda i, j: IHDOT)
+    game.quad = fill2d(QUADSIZE, lambda i, j: '.')
     if game.iscate:
 	# Attempt to escape Super-commander, so tbeam back!
 	game.iscate = False
@@ -5663,28 +5606,28 @@
         for cmdr in game.state.kcmdr:
 	    if cmdr == game.quadrant:
                 e = game.enemies[game.klhere-1]
-                game.quad[e.kloc.i][e.kloc.j] = IHC
+                game.quad[e.kloc.i][e.kloc.j] = 'C'
                 e.kpower = randreal(950,1350) + 50.0*game.skill
 		break	
 	# If we need a super-commander, promote a Klingon
 	if game.quadrant == game.state.kscmdr:
             e = game.enemies[0]
-	    game.quad[e.kloc.i][e.kloc.j] = IHS
+	    game.quad[e.kloc.i][e.kloc.j] = 'S'
 	    e.kpower = randreal(1175.0,  1575.0) + 125.0*game.skill
 	    game.iscate = (game.state.remkl > 1)
     # Put in Romulans if needed
     for i in range(q.romulans):
-        enemy(IHR, loc=dropin(), power=randreal(400.0,850.0)+50.0*game.skill)
+        enemy('R', loc=dropin(), power=randreal(400.0,850.0)+50.0*game.skill)
     # If quadrant needs a starbase, put it in
     if q.starbase:
-	game.base = dropin(IHB)
+	game.base = dropin('B')
     # If quadrant needs a planet, put it in
     if q.planet:
 	game.iplnet = q.planet
 	if not q.planet.inhabited:
-	    game.plnet = dropin(IHP)
+	    game.plnet = dropin('P')
 	else:
-	    game.plnet = dropin(IHW)
+	    game.plnet = dropin('@')
     # Check for condition
     newcnd()
     # Check for RNZ
@@ -5699,7 +5642,7 @@
 	    prout(_("LEAVE AT ONCE, OR YOU WILL BE DESTROYED!"))
     # Put in THING if needed
     if thing == game.quadrant:
-        enemy(type=IHQUEST, loc=dropin(),
+        enemy(type='?', loc=dropin(),
                   power=randreal(6000,6500.0)+250.0*game.skill)
         if not damaged(DSRSENS):
             skip(1)
@@ -5714,37 +5657,37 @@
             while True:
 		w.i = withprob(0.5) * (QUADSIZE-1)
 		w.j = withprob(0.5) * (QUADSIZE-1)
-                if game.quad[w.i][w.j] == IHDOT:
+                if game.quad[w.i][w.j] == '.':
                     break
-            game.tholian = enemy(type=IHT, loc=w,
+            game.tholian = enemy(type='T', loc=w,
                                  power=randrange(100, 500) + 25.0*game.skill)
 	    # Reserve unoccupied corners 
-	    if game.quad[0][0]==IHDOT:
+	    if game.quad[0][0]=='.':
 		game.quad[0][0] = 'X'
-	    if game.quad[0][QUADSIZE-1]==IHDOT:
+	    if game.quad[0][QUADSIZE-1]=='.':
 		game.quad[0][QUADSIZE-1] = 'X'
-	    if game.quad[QUADSIZE-1][0]==IHDOT:
+	    if game.quad[QUADSIZE-1][0]=='.':
 		game.quad[QUADSIZE-1][0] = 'X'
-	    if game.quad[QUADSIZE-1][QUADSIZE-1]==IHDOT:
+	    if game.quad[QUADSIZE-1][QUADSIZE-1]=='.':
 		game.quad[QUADSIZE-1][QUADSIZE-1] = 'X'
     game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
     # And finally the stars
     for i in range(q.stars):
-	dropin(IHSTAR)
+	dropin('*')
     # Put in a few black holes
     for i in range(1, 3+1):
 	if withprob(0.5): 
-	    dropin(IHBLANK)
+	    dropin(' ')
     # Take out X's in corners if Tholian present
     if game.tholian:
 	if game.quad[0][0]=='X':
-	    game.quad[0][0] = IHDOT
+	    game.quad[0][0] = '.'
 	if game.quad[0][QUADSIZE-1]=='X':
-	    game.quad[0][QUADSIZE-1] = IHDOT
+	    game.quad[0][QUADSIZE-1] = '.'
 	if game.quad[QUADSIZE-1][0]=='X':
-	    game.quad[QUADSIZE-1][0] = IHDOT
+	    game.quad[QUADSIZE-1][0] = '.'
 	if game.quad[QUADSIZE-1][QUADSIZE-1]=='X':
-	    game.quad[QUADSIZE-1][QUADSIZE-1] = IHDOT
+	    game.quad[QUADSIZE-1][QUADSIZE-1] = '.'
 
 def setpassword():
     "Set the self-destruct password."
@@ -6031,18 +5974,18 @@
 
 def cramen(type):
     "Emit the name of an enemy or feature." 
-    if   type == IHR: s = _("Romulan")
-    elif type == IHK: s = _("Klingon")
-    elif type == IHC: s = _("Commander")
-    elif type == IHS: s = _("Super-commander")
-    elif type == IHSTAR: s = _("Star")
-    elif type == IHP: s = _("Planet")
-    elif type == IHB: s = _("Starbase")
-    elif type == IHBLANK: s = _("Black hole")
-    elif type == IHT: s = _("Tholian")
-    elif type == IHWEB: s = _("Tholian web")
-    elif type == IHQUEST: s = _("Stranger")
-    elif type == IHW: s = _("Inhabited World")
+    if   type == 'R': s = _("Romulan")
+    elif type == 'K': s = _("Klingon")
+    elif type == 'C': s = _("Commander")
+    elif type == 'S': s = _("Super-commander")
+    elif type == '*': s = _("Star")
+    elif type == 'P': s = _("Planet")
+    elif type == 'B': s = _("Starbase")
+    elif type == ' ': s = _("Black hole")
+    elif type == 'T': s = _("Tholian")
+    elif type == '#': s = _("Tholian web")
+    elif type == '?': s = _("Stranger")
+    elif type == '@': s = _("Inhabited World")
     else: s = "Unknown??"
     return s
 
@@ -6060,7 +6003,7 @@
 
 def crmshp():
     "Emit our ship name." 
-    return{IHE:_("Enterprise"),IHF:_("Faerie Queene")}.get(game.ship,"Ship???")
+    return{'E':_("Enterprise"),'F':_("Faerie Queene")}.get(game.ship,"Ship???")
 
 def stars():
     "Emit a line of stars" 



From esr at mail.berlios.de  Tue Oct 17 19:47:38 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Tue, 17 Oct 2006 19:47:38 +0200
Subject: [Sst-commit-watch] r773 - in trunk: doc src
Message-ID: <200610171747.k9HHlc7F003168@sheep.berlios.de>

Author: esr
Date: 2006-10-17 19:47:37 +0200 (Tue, 17 Oct 2006)
New Revision: 773

Modified:
   trunk/doc/HACKING
   trunk/src/sst.py
Log:
More documentation improvements.


Modified: trunk/doc/HACKING
===================================================================
--- trunk/doc/HACKING	2006-10-17 17:31:52 UTC (rev 772)
+++ trunk/doc/HACKING	2006-10-17 17:47:37 UTC (rev 773)
@@ -245,3 +245,25 @@
 in C, I introduced a struct; in Python, the class has a complete
 repertoire of vector-algebra operations.
 
+There's one weird archeological detail about the nav code that
+deserves a remark.  This program originally required input in terms of
+a (clock) direction and distance -- essentially, directions were real
+numbers modulo 12 with zero being north.  Somewhere in history, it was
+changed to Cartesian coordinates.  But the bearing method still computes
+polar coordinates in clockface units -- that's the reason for the
+wacky constant 1.90985, inherited straight from the ancestral FORTRAN.
+Elsewhere, there were a bunch of computations, now centralized in the
+course object, that looked like (15.0 - bearing)*0.5235988; this is a 
+conversion from clockface units to radians with zero on the X axis.
+
+As a previous maintainer, probably Tom Almy, observed: Probably
+"manual" input should still be done this way -- it's a real pain if
+the computer isn't working! Manual mode is still confusing because it
+involves giving x and y motions, yet the coordinates are always
+displayed y - x, where +y is downward!
+
+Because I think he's arguably right, I haven't ripped out all the
+clockface-to-radian conversions.  For this reason, and others, the 
+trig code is still a bit wacky and obscure.  Modify with caution
+and test thoroughly.
+

Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-17 17:31:52 UTC (rev 772)
+++ trunk/src/sst.py	2006-10-17 17:47:37 UTC (rev 773)
@@ -3530,14 +3530,6 @@
 	prout(_("Lt. Uhura- \"Captain, an important message from the starbase:\""))
 	attackreport(False)
 	game.iseenit = True
- 
-# This program originally required input in terms of a (clock)
-# direction and distance. Somewhere in history, it was changed to
-# cartesian coordinates. So we need to convert.  Probably
-# "manual" input should still be done this way -- it's a real
-# pain if the computer isn't working! Manual mode is still confusing
-# because it involves giving x and y motions, yet the coordinates
-# are always displayed y - x, where +y is downward!
 
 def cartesian(loc1=None, loc2=None):
     if loc1 is None:



From esr at mail.berlios.de  Wed Oct 18 03:13:01 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Wed, 18 Oct 2006 03:13:01 +0200
Subject: [Sst-commit-watch] r774 - trunk/src
Message-ID: <200610180113.k9I1D1NN000725@sheep.berlios.de>

Author: esr
Date: 2006-10-18 03:13:00 +0200 (Wed, 18 Oct 2006)
New Revision: 774

Modified:
   trunk/src/sst.py
Log:
Rename some class members to remove the holdover assumption that all
enemies are Klingons.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-17 17:47:37 UTC (rev 773)
+++ trunk/src/sst.py	2006-10-18 01:13:00 UTC (rev 774)
@@ -229,39 +229,37 @@
 FREPRO	= 11	# Klingons build a ship in an enslaved system
 NEVENTS	= 12
 
-#
-# abstract out the event handling -- underlying data structures will change
-# when we implement stateful events
-# 
+# Abstract out the event handling -- underlying data structures will change
+# when we implement stateful events 
 def findevent(evtype):	return game.future[evtype]
 
 class enemy:
     def __init__(self, type=None, loc=None, power=None):
         self.type = type
-        self.kloc = coord()
+        self.location = coord()
         if loc:
             self.move(loc)
-        self.kpower = power	# enemy energy level
+        self.power = power	# enemy energy level
         game.enemies.append(self)
     def move(self, loc):
-        motion = (loc != self.kloc)
-        if self.kloc.i is not None and self.kloc.j is not None:
+        motion = (loc != self.location)
+        if self.location.i is not None and self.location.j is not None:
             if motion:
                 if self.type == 'T':
-                    game.quad[self.kloc.i][self.kloc.j] = '#'
+                    game.quad[self.location.i][self.location.j] = '#'
                 else:
-                    game.quad[self.kloc.i][self.kloc.j] = '.'
+                    game.quad[self.location.i][self.location.j] = '.'
         if loc:
-            self.kloc = copy.copy(loc)
-            game.quad[self.kloc.i][self.kloc.j] = self.type
+            self.location = copy.copy(loc)
+            game.quad[self.location.i][self.location.j] = self.type
             self.kdist = self.kavgd = (game.sector - loc).distance()
         else:
-            self.kloc = coord()
+            self.location = coord()
             self.kdist = self.kavgd = None
             game.enemies.remove(self)
         return motion
     def __repr__(self):
-        return "<%s,%s.%f>" % (self.type, self.kloc, self.kpower)	# For debugging
+        return "<%s,%s.%f>" % (self.type, self.location, self.power)	# For debugging
 
 class gamestate:
     def __init__(self):
@@ -419,13 +417,13 @@
 	    if game.battle == game.quadrant:
 		return False
 	# don't leave if over 1000 units of energy 
-	if enemy.kpower > 1000.0:
+	if enemy.power > 1000.0:
 	    return False
     # emit escape message and move out of quadrant.
     # we know this if either short or long range sensors are working
     if not damaged(DSRSENS) or not damaged(DLRSENS) or \
 	game.condition == "docked":
-	prout(crmena(True, enemy.type, "sector", enemy.kloc) + \
+	prout(crmena(True, enemy.type, "sector", enemy.location) + \
               (_(" escapes to Quadrant %s (and regains strength).") % q))
     # handle local matters related to escape
     enemy.move(None)
@@ -500,12 +498,12 @@
     mdist = int(dist1 + 0.5); # Nearest integer distance 
     # If SC, check with spy to see if should hi-tail it 
     if enemy.type=='S' and \
-	(enemy.kpower <= 500.0 or (game.condition=="docked" and not damaged(DPHOTON))):
+	(enemy.power <= 500.0 or (game.condition=="docked" and not damaged(DPHOTON))):
 	irun = True
 	motion = -QUADSIZE
     else:
 	# decide whether to advance, retreat, or hold position 
-	forces = enemy.kpower+100.0*len(game.enemies)+400*(nbaddys-1)
+	forces = enemy.power+100.0*len(game.enemies)+400*(nbaddys-1)
 	if not game.shldup:
 	    forces += 1000; # Good for enemy if shield is down! 
 	if not damaged(DPHASER) or not damaged(DPHOTON):
@@ -550,13 +548,13 @@
     if idebug:
 	proutn("NSTEPS = %d:" % nsteps)
     # Compute preferred values of delta X and Y 
-    m = game.sector - enemy.kloc
+    m = game.sector - enemy.location
     if 2.0 * abs(m.i) < abs(m.j):
 	m.i = 0
-    if 2.0 * abs(m.j) < abs(game.sector.i-enemy.kloc.i):
+    if 2.0 * abs(m.j) < abs(game.sector.i-enemy.location.i):
 	m.j = 0
     m = (motion * m).sgn()
-    next = enemy.kloc
+    next = enemy.location
     # main move loop 
     for ll in range(nsteps):
 	if idebug:
@@ -615,7 +613,7 @@
 	skip(1)
     if enemy.move(next):
 	if not damaged(DSRSENS) or game.condition == "docked":
-	    proutn(_("*** %s from Sector %s") % (cramen(enemy.type), enemy.kloc))
+	    proutn(_("*** %s from Sector %s") % (cramen(enemy.type), enemy.location))
 	    if enemy.kdist < dist1:
 		proutn(_(" advances to "))
 	    else:
@@ -810,13 +808,13 @@
     if not game.tholian or game.justin:
 	return
     id = coord()
-    if game.tholian.kloc.i == 0 and game.tholian.kloc.j == 0:
+    if game.tholian.location.i == 0 and game.tholian.location.j == 0:
 	id.i = 0; id.j = QUADSIZE-1
-    elif game.tholian.kloc.i == 0 and game.tholian.kloc.j == QUADSIZE-1:
+    elif game.tholian.location.i == 0 and game.tholian.location.j == QUADSIZE-1:
 	id.i = QUADSIZE-1; id.j = QUADSIZE-1
-    elif game.tholian.kloc.i == QUADSIZE-1 and game.tholian.kloc.j == QUADSIZE-1:
+    elif game.tholian.location.i == QUADSIZE-1 and game.tholian.location.j == QUADSIZE-1:
 	id.i = QUADSIZE-1; id.j = 0
-    elif game.tholian.kloc.i == QUADSIZE-1 and game.tholian.kloc.j == 0:
+    elif game.tholian.location.i == QUADSIZE-1 and game.tholian.location.j == 0:
 	id.i = 0; id.j = 0
     else:
 	# something is wrong! 
@@ -826,8 +824,8 @@
     # do nothing if we are blocked 
     if game.quad[id.i][id.j] not in ('.', '#'):
 	return
-    here = copy.copy(game.tholian.kloc)
-    delta = (id - game.tholian.kloc).sgn()
+    here = copy.copy(game.tholian.location)
+    delta = (id - game.tholian.location).sgn()
     # move in x axis 
     while here.i != id.i:
         here.i += delta.i
@@ -849,7 +847,7 @@
 	if game.quad[i][QUADSIZE-1]!='#' and game.quad[i][QUADSIZE-1]!='T':
 	    return
     # All plugged up -- Tholian splits 
-    game.quad[game.tholian.kloc.i][game.tholian.kloc.j]='#'
+    game.quad[game.tholian.location.i][game.tholian.location.j]='#'
     dropin(' ')
     prout(crmena(True, 'T', "sector", game.tholian) + _(" completes web."))
     game.tholian.move(None)
@@ -1026,11 +1024,11 @@
         proutn(_(" rammed by "))
     else:
         proutn(_(" rams "))
-    proutn(crmena(False, enemy.type, "sector", enemy.kloc))
+    proutn(crmena(False, enemy.type, "sector", enemy.location))
     if rammed:
 	proutn(_(" (original position)"))
     skip(1)
-    deadkl(enemy.kloc, enemy.type, game.sector)
+    deadkl(enemy.location, enemy.type, game.sector)
     proutn("***" + crmship() + " heavily damaged.")
     icas = randrange(10, 30)
     prout(_("***Sickbay reports %d casualties"), icas)
@@ -1107,7 +1105,7 @@
             game.quad[bumpto.i][bumpto.j]=iquad
             prout(_(" displaced by blast to Sector %s ") % bumpto)
             for enemy in game.enemies:
-                enemy.kdist = enemy.kavgd = (game.sector-enemy.kloc).distance()
+                enemy.kdist = enemy.kavgd = (game.sector-enemy.location).distance()
             game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
             return None
 	elif iquad in ('C', 'S', 'R', 'K'): # Hit a regular enemy 
@@ -1117,19 +1115,19 @@
 		prout(_("   torpedo neutralized."))
 		return None
             for enemy in game.enemies:
-		if w == enemy.kloc:
+		if w == enemy.location:
 		    break
-	    kp = math.fabs(enemy.kpower)
+	    kp = math.fabs(enemy.power)
 	    h1 = 700.0 + randrange(100) - \
 		1000.0 * (w-origin).distance() * math.fabs(math.sin(bullseye-track.angle))
 	    h1 = math.fabs(h1)
 	    if kp < h1:
 		h1 = kp
-            if enemy.kpower < 0:
-                enemy.kpower -= -h1
+            if enemy.power < 0:
+                enemy.power -= -h1
             else:
-                enemy.kpower -= h1
-	    if enemy.kpower == 0:
+                enemy.power -= h1
+	    if enemy.power == 0:
 		deadkl(w, iquad, w)
 		return None
 	    proutn(crmena(True, iquad, "sector", w))
@@ -1146,11 +1144,11 @@
 		prout(_(" damaged but not destroyed."))
             else:
                 prout(_(" damaged-- displaced by blast to Sector %s ")%bumpto)
-                enemy.kloc = bumpto
+                enemy.location = bumpto
                 game.quad[w.i][w.j]='.'
                 game.quad[bumpto.i][bumpto.j]=iquad
                 for enemy in game.enemies:
-                    enemy.kdist = enemy.kavgd = (game.sector-enemy.kloc).distance()
+                    enemy.kdist = enemy.kavgd = (game.sector-enemy.location).distance()
                 game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
             return None
 	elif iquad == 'B': # Hit a base 
@@ -1314,14 +1312,14 @@
     if game.skill <= SKILL_FAIR:
 	where = "sector"
     for enemy in game.enemies:
-	if enemy.kpower < 0:
+	if enemy.power < 0:
 	    continue;	# too weak to attack 
 	# compute hit strength and diminish shield power 
 	r = randreal()
 	# Increase chance of photon torpedos if docked or enemy energy is low 
 	if game.condition == "docked":
 	    r *= 0.25
-	if enemy.kpower < 500:
+	if enemy.power < 500:
 	    r *= 0.25; 
 	if enemy.type=='T' or (enemy.type=='?' and not thing.angry):
 	    continue
@@ -1337,20 +1335,20 @@
 		continue; # Don't waste the effort! 
 	    attempt = True; # Attempt to attack 
 	    dustfac = randreal(0.8, 0.85)
-	    hit = enemy.kpower*math.pow(dustfac,enemy.kavgd)
-	    enemy.kpower *= 0.75
+	    hit = enemy.power*math.pow(dustfac,enemy.kavgd)
+	    enemy.power *= 0.75
 	else: # Enemy uses photon torpedo 
 	    # We should be able to make the bearing() method work here
-	    course = 1.90985*math.atan2(game.sector.j-enemy.kloc.j, enemy.kloc.i-game.sector.i)
+	    course = 1.90985*math.atan2(game.sector.j-enemy.location.j, enemy.location.i-game.sector.i)
 	    hit = 0
 	    proutn(_("***TORPEDO INCOMING"))
 	    if not damaged(DSRSENS):
-		proutn(_(" From ") + crmena(False, enemy.type, where, enemy.kloc))
+		proutn(_(" From ") + crmena(False, enemy.type, where, enemy.location))
 	    attempt = True
 	    prout("  ")
 	    dispersion = (randreal()+randreal())*0.5 - 0.5
-	    dispersion += 0.002*enemy.kpower*dispersion
-	    hit = torpedo(enemy.kloc, course, dispersion, number=1, nburst=1)
+	    dispersion += 0.002*enemy.power*dispersion
+	    hit = torpedo(enemy.location, course, dispersion, number=1, nburst=1)
 	    if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem)==0:
 		finish(FWON); # Klingons did themselves in! 
 	    if game.state.galaxy[game.quadrant.i][game.quadrant.j].supernova or game.alldone:
@@ -1383,7 +1381,7 @@
 	if (damaged(DSRSENS) and usephasers) or game.skill<=SKILL_FAIR:
 	    proutn(_(" on the ") + crmshp())
 	if not damaged(DSRSENS) and usephasers:
-	    prout(_(" from ") + crmena(False, enemy.type, where, enemy.kloc))
+	    prout(_(" from ") + crmena(False, enemy.type, where, enemy.location))
 	skip(1)
 	# Decide if hit is critical 
 	if hit > hitmax:
@@ -1471,7 +1469,7 @@
     game.recompute()
     # Remove enemy ship from arrays describing local conditions
     for e in game.enemies:
-	if e.kloc == w:
+	if e.location == w:
             e.move(None)
 	    break
     return
@@ -1644,16 +1642,16 @@
 	    continue
 	dustfac = randreal(0.9, 1.0)
 	hit = wham*math.pow(dustfac,game.enemies[kk].kdist)
-	kpini = game.enemies[kk].kpower
+	kpini = game.enemies[kk].power
 	kp = math.fabs(kpini)
 	if PHASEFAC*hit < kp:
 	    kp = PHASEFAC*hit
-        if game.enemies[kk].kpower < 0:
-            game.enemies[kk].kpower -= -kp
+        if game.enemies[kk].power < 0:
+            game.enemies[kk].power -= -kp
         else:
-            game.enemies[kk].kpower -= kp
-	kpow = game.enemies[kk].kpower
-	w = game.enemies[kk].kloc
+            game.enemies[kk].power -= kp
+	kpow = game.enemies[kk].power
+	w = game.enemies[kk].location
 	if hit > 0.005:
 	    if not damaged(DSRSENS):
 		boom(w)
@@ -1677,7 +1675,7 @@
 	    if kpow>0 and withprob(0.9) and kpow <= randreal(0.4, 0.8)*kpini:
 		prout(_("***Mr. Spock-  \"Captain, the vessel at Sector %s")%w)
 		prout(_("   has just lost its firepower.\""))
-		game.enemies[kk].kpower = -kpow
+		game.enemies[kk].power = -kpow
         kk += 1
     return
 
@@ -1770,7 +1768,7 @@
 	    scanner.chew()
 	    if not kz:
 		for i in range(len(game.enemies)):
-		    irec += math.fabs(game.enemies[i].kpower)/(PHASEFAC*math.pow(0.90,game.enemies[i].kdist))*randreal(1.01, 1.06) + 1.0
+		    irec += math.fabs(game.enemies[i].power)/(PHASEFAC*math.pow(0.90,game.enemies[i].kdist))*randreal(1.01, 1.06) + 1.0
 	    kz=1
 	    proutn(_("%d units required. ") % irec)
 	    scanner.chew()
@@ -1806,7 +1804,7 @@
 		hits.append(0.0)
 		if powrem <= 0:
 		    continue
-		hits[i] = math.fabs(game.enemies[i].kpower)/(PHASEFAC*math.pow(0.90,game.enemies[i].kdist))
+		hits[i] = math.fabs(game.enemies[i].power)/(PHASEFAC*math.pow(0.90,game.enemies[i].kdist))
 		over = randreal(1.01, 1.06) * hits[i]
 		temp = powrem
 		powrem -= hits[i] + over
@@ -1843,7 +1841,7 @@
     elif automode == "MANUAL":
 	rpow = 0.0
         for k in range(len(game.enemies)):
-	    aim = game.enemies[k].kloc
+	    aim = game.enemies[k].location
 	    ienm = game.quad[aim.i][aim.j]
 	    if msgflag:
 		proutn(_("Energy available= %.2f") % (avail-0.006))
@@ -1861,7 +1859,7 @@
 	    if key == "IHEOL":
 		scanner.chew()
 		if itarg and k > kz:
-		    irec=(abs(game.enemies[k].kpower)/(PHASEFAC*math.pow(0.9,game.enemies[k].kdist))) *	randreal(1.01, 1.06) + 1.0
+		    irec=(abs(game.enemies[k].power)/(PHASEFAC*math.pow(0.9,game.enemies[k].kdist))) *	randreal(1.01, 1.06) + 1.0
 		kz = k
 		proutn("(")
 		if not damaged(DCOMPTR):
@@ -2499,10 +2497,10 @@
                     deadkl(neighbor, iquad, neighbor)
                 elif iquad in ('C','S','R'): # Damage/destroy big enemies 
                     for ll in range(len(game.enemies)):
-                        if game.enemies[ll].kloc == neighbor:
+                        if game.enemies[ll].location == neighbor:
                             break
-                    game.enemies[ll].kpower -= 800.0 # If firepower is lost, die 
-                    if game.enemies[ll].kpower <= 0.0:
+                    game.enemies[ll].power -= 800.0 # If firepower is lost, die 
+                    if game.enemies[ll].power <= 0.0:
                         deadkl(neighbor, iquad, neighbor)
                         break
                     newc = neighbor + neighbor - hits[mm]
@@ -2695,8 +2693,8 @@
 	whammo = 25.0 * game.energy
 	l=1
 	while l <= len(game.enemies):
-	    if game.enemies[l].kpower*game.enemies[l].kdist <= whammo: 
-		deadkl(game.enemies[l].kloc, game.quad[game.enemies[l].kloc.i][game.enemies[l].kloc.j], game.enemies[l].kloc)
+	    if game.enemies[l].power*game.enemies[l].kdist <= whammo: 
+		deadkl(game.enemies[l].location, game.quad[game.enemies[l].location.i][game.enemies[l].location.j], game.enemies[l].location)
 	    l += 1
     finish(FDILITHIUM)
 				
@@ -3365,7 +3363,7 @@
         if len(game.enemies) != 0 and not noattack:
             newcnd()
             for enemy in game.enemies:
-                finald = (w - enemy.kloc).distance()
+                finald = (w - enemy.location).distance()
                 enemy.kavgd = 0.5 * (finald + enemy.kdist)
             # Stas Sergeev added the condition
             # that attacks only happen if Klingons
@@ -3423,7 +3421,7 @@
             stopegy = 50.0*course.distance/game.optime
             if iquad in ('T', 'K', 'C', 'S', 'R', '?'):
                 for enemy in game.enemies:
-                    if enemy.kloc == game.sector:
+                    if enemy.location == game.sector:
                         break
                 collision(rammed=False, enemy=enemy)
                 return True
@@ -3489,7 +3487,7 @@
     game.quad[game.sector.i][game.sector.j] = game.ship
     if game.enemies:
         for enemy in game.enemies:
-            finald = (w-enemy.kloc).distance()
+            finald = (w-enemy.location).distance()
             enemy.kavgd = 0.5 * (finald + enemy.kdist)
             enemy.kdist = finald
         game.enemies.sort(lambda x, y: cmp(x.kdist, y.kdist))
@@ -4650,7 +4648,7 @@
 	prouts(_("Sulu- \"Captain!  It's working!\""))
 	skip(2)
 	while len(game.enemies) > 0:
-	    deadkl(game.enemies[1].kloc, game.quad[game.enemies[1].kloc.i][game.enemies[1].kloc.j],game.enemies[1].kloc)
+	    deadkl(game.enemies[1].location, game.quad[game.enemies[1].location.i][game.enemies[1].location.j],game.enemies[1].location)
 	prout(_("Ensign Chekov-  \"Congratulations, Captain!\""))
 	if (game.state.remkl + len(game.state.kcmdr) + game.state.nscrem) == 0:
 	    finish(FWON)    
@@ -5598,14 +5596,14 @@
         for cmdr in game.state.kcmdr:
 	    if cmdr == game.quadrant:
                 e = game.enemies[game.klhere-1]
-                game.quad[e.kloc.i][e.kloc.j] = 'C'
-                e.kpower = randreal(950,1350) + 50.0*game.skill
+                game.quad[e.location.i][e.location.j] = 'C'
+                e.power = randreal(950,1350) + 50.0*game.skill
 		break	
 	# If we need a super-commander, promote a Klingon
 	if game.quadrant == game.state.kscmdr:
             e = game.enemies[0]
-	    game.quad[e.kloc.i][e.kloc.j] = 'S'
-	    e.kpower = randreal(1175.0,  1575.0) + 125.0*game.skill
+	    game.quad[e.location.i][e.location.j] = 'S'
+	    e.power = randreal(1175.0,  1575.0) + 125.0*game.skill
 	    game.iscate = (game.state.remkl > 1)
     # Put in Romulans if needed
     for i in range(q.romulans):



From esr at mail.berlios.de  Fri Oct 20 21:57:39 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 20 Oct 2006 21:57:39 +0200
Subject: [Sst-commit-watch] r775 - trunk/src
Message-ID: <200610201957.k9KJvdcL010850@sheep.berlios.de>

Author: esr
Date: 2006-10-20 21:57:38 +0200 (Fri, 20 Oct 2006)
New Revision: 775

Modified:
   trunk/src/sst.py
Log:
Use a better way of getting the username.  Also, fix a typo.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-18 01:13:00 UTC (rev 774)
+++ trunk/src/sst.py	2006-10-20 19:57:38 UTC (rev 775)
@@ -11,7 +11,7 @@
 See the doc/HACKING file in the distribution for designers notes and advice
 ion how to modify (and how not to modify!) this code.
 """
-import os, sys, math, curses, time, readline, cPickle, random, copy, gettext
+import os, sys, math, curses, time, readline, cPickle, random, copy, gettext, getpass
 
 SSTDOC  	= "/usr/share/doc/sst/sst.doc"
 DOC_NAME	= "sst.doc"
@@ -4015,7 +4015,7 @@
 	# Likewise, if in the original time the Galileo was abandoned, but
 	# was on ship earlier, it would have vanished -- let's restore it.
 	if game.iscraft == "offship" and not gotit and game.damage[DSHUTTL] >= 0.0:
-	    prout(_("Checkov-  \"Security reports the Galileo has reappeared in the dock!\""))
+	    prout(_("Chekov-  \"Security reports the Galileo has reappeared in the dock!\""))
 	    game.iscraft = "onship"
         # There used to be code to do the actual reconstrction here,
         # but the starchart is now part of the snapshotted galaxy state.
@@ -6240,7 +6240,7 @@
             logfp.write("# seed %s\n" % seed)
             logfp.write("# options %s\n" % " ".join(arguments))
             logfp.write("# recorded by %s@%s on %s\n" % \
-                    (os.getenv("LOGNAME"),socket.gethostname(),time.ctime()))
+                    (getpass.getuser(),socket.gethostname(),time.ctime()))
         random.seed(seed)
         scanner = sstscanner()
         map(scanner.append, arguments)



From esr at mail.berlios.de  Fri Oct 20 22:51:16 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 20 Oct 2006 22:51:16 +0200
Subject: [Sst-commit-watch] r776 - trunk/src
Message-ID: <200610202051.k9KKpG0n018564@sheep.berlios.de>

Author: esr
Date: 2006-10-20 22:51:15 +0200 (Fri, 20 Oct 2006)
New Revision: 776

Modified:
   trunk/src/sst.py
Log:
Getv rid of some scaffolding.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-20 19:57:38 UTC (rev 775)
+++ trunk/src/sst.py	2006-10-20 20:51:15 UTC (rev 776)
@@ -373,22 +373,17 @@
 FCREW = 21
 
 def withprob(p):
-    v = random.random()
-    #logfp.write("# withprob(%s) -> %f (%s) at %s\n" % (p, v, v<p, traceback.extract_stack()[-2][1:]))
-    return v < p
+    return random.random() < p
 
 def randrange(*args):
-    v = random.randrange(*args)
-    #logfp.write("# randrange%s -> %s at %s\n" % (args, v, traceback.extract_stack()[-2][1:]))
-    return v
+    return random.randrange(*args)
 
 def randreal(*args):
     v = random.random()
     if len(args) == 1:
-        v *= args[0] 		# returns from [0, args[0])
+        v *= args[0] 		# from [0, args[0])
     elif len(args) == 2:
-        v = args[0] + v*(args[1]-args[0])	# returns from [args[0], args[1])
-    #logfp.write("# randreal%s -> %s at %s\n" % (args, v, traceback.extract_stack()[-2][1:]))
+        v = args[0] + v*(args[1]-args[0])	# from [args[0], args[1])
     return v
 
 # Code from ai.c begins here



From esr at mail.berlios.de  Fri Oct 20 23:35:04 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Fri, 20 Oct 2006 23:35:04 +0200
Subject: [Sst-commit-watch] r777 - in trunk: doc src
Message-ID: <200610202135.k9KLZ4Cj025515@sheep.berlios.de>

Author: esr
Date: 2006-10-20 23:35:03 +0200 (Fri, 20 Oct 2006)
New Revision: 777

Modified:
   trunk/doc/HACKING
   trunk/src/sst.py
Log:
Move a comment that really belonged in the design notes.


Modified: trunk/doc/HACKING
===================================================================
--- trunk/doc/HACKING	2006-10-20 20:51:15 UTC (rev 776)
+++ trunk/doc/HACKING	2006-10-20 21:35:03 UTC (rev 777)
@@ -178,13 +178,33 @@
 to; otherwise they die in space and this counts heavily against
 your score.  Docking at a starbase replenishes your crew.
 
-8. Still more BSD-Trek: we now have a weighted damage table.
+8. Still more BSD-Trek: we now have a weighted damage table.  Quoth
+Eric Allman in the code of BSD-Trek: "Under certain conditions you can
+get a critical hit.  This sort of hit damages devices.  The
+probability that a given device is damaged depends on the device.
+Well protected devices (such as the computer, which is in the core of
+the ship and has considerable redundancy) almost never get damaged,
+whereas devices which are exposed (such as the warp engines) or which
+are particularly delicate (such as the transporter) have a much higher
+probability of being damaged."
+
+This is one place where OPTION_PLAIN does not restore the original
+behavior, which was equiprobable damage across all devices.  If we
+wanted that, we'd return randrange(NDEVICES) and have done with it.
+Also, in the original game, DNAVYS and DCOMPTR were the same device.
+
+Instead, we use a table of weights similar to the one from BSD Trek.
+BSD doesn't have the shuttle, shield controller, death ray, or probes.
+We don't have a cloaking device.  The shuttle got the allocation for
+the cloaking device, then we shaved a half-percent off everything to
+have some weight to give DSHCTRL/DDRAY/DDSP.
+
 Also, the nav subsystem (enabling automatic course
 setting) can be damaged separately from the main computer (which
 handles weapons targeting, ETA calculation, and self-destruct).
 
-After these features were added, I translated this into Python and added
-more:
+After these features were added, I translated this program into Python
+and added more:
 
 9. A long-range scan is done silently whenever you call CHART; thus
 the LRSCAN command is no longer needed.  (Controlled by OPTION_AUTOSCAN

Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-20 20:51:15 UTC (rev 776)
+++ trunk/src/sst.py	2006-10-20 21:35:03 UTC (rev 777)
@@ -958,34 +958,12 @@
 
 def randdevice():
     "Choose a device to damage, at random."
-    # Quoth Eric Allman in the code of BSD-Trek:
-    # "Under certain conditions you can get a critical hit.  This
-    # sort of hit damages devices.  The probability that a given
-    # device is damaged depends on the device.  Well protected
-    # devices (such as the computer, which is in the core of the
-    # ship and has considerable redundancy) almost never get
-    # damaged, whereas devices which are exposed (such as the
-    # warp engines) or which are particularly delicate (such as
-    # the transporter) have a much higher probability of being
-    # damaged."
-    # 
-    # This is one place where OPTION_PLAIN does not restore the
-    # original behavior, which was equiprobable damage across
-    # all devices.  If we wanted that, we'd return randrange(NDEVICES)
-    # and have done with it.  Also, in the original game, DNAVYS
-    # and DCOMPTR were the same device. 
-    # 
-    # Instead, we use a table of weights similar to the one from BSD Trek.
-    # BSD doesn't have the shuttle, shield controller, death ray, or probes. 
-    # We don't have a cloaking device.  The shuttle got the allocation
-    # for the cloaking device, then we shaved a half-percent off
-    # everything to have some weight to give DSHCTRL/DDRAY/DDSP.
     weights = (
 	105,	# DSRSENS: short range scanners	10.5% 
 	105,	# DLRSENS: long range scanners		10.5% 
 	120,	# DPHASER: phasers			12.0% 
 	120,	# DPHOTON: photon torpedoes		12.0% 
-	25,	# DLIFSUP: life support		 2.5% 
+	25,	# DLIFSUP: life support			 2.5% 
 	65,	# DWARPEN: warp drive			 6.5% 
 	70,	# DIMPULS: impulse engines		 6.5% 
 	145,	# DSHIELD: deflector shields		14.5% 



From esr at mail.berlios.de  Sat Oct 21 21:49:35 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sat, 21 Oct 2006 21:49:35 +0200
Subject: [Sst-commit-watch] r778 - trunk/src
Message-ID: <200610211949.k9LJnZIR019939@sheep.berlios.de>

Author: esr
Date: 2006-10-21 21:49:34 +0200 (Sat, 21 Oct 2006)
New Revision: 778

Modified:
   trunk/src/sst.py
Log:
Spot a use of normal distribution that wasn't encapsulated.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-20 21:35:03 UTC (rev 777)
+++ trunk/src/sst.py	2006-10-21 19:49:34 UTC (rev 778)
@@ -3995,7 +3995,7 @@
 	prout(_("Spock has reconstructed a correct star chart from memory"))
     else:
 	# Go forward in time 
-	game.optime = -0.5*game.intime*math.log(randreal())
+	game.optime = expran(0.5*game.intime)
 	prout(_("You are traveling forward in time %d stardates.") % int(game.optime))
 	# cheat to make sure no tractor beams occur during time warp 
 	postpone(FTBEAM, game.optime)
@@ -5412,12 +5412,10 @@
 
 def choose():
     "Choose your game type."
-    global thing
     while True:
-	game.tourn = 0
+	game.tourn = game.length = 0
 	game.thawed = False
 	game.skill = SKILL_NONE
-	game.length = 0
 	if not scanner.inqueue: # Can start with command line options 
 	    proutn(_("Would you like a regular, tournament, or saved game? "))
         scanner.next()
@@ -5785,8 +5783,7 @@
 	drawmaps(1)
         while True:	# get a command 
 	    hitme = False
-	    game.justin = False
-	    game.optime = 0.0
+	    game.optime = game.justin = False
 	    scanner.chew()
 	    setwnd(prompt_window)
 	    clrscr()



From esr at mail.berlios.de  Sun Oct 22 15:13:47 2006
From: esr at mail.berlios.de (esr at BerliOS)
Date: Sun, 22 Oct 2006 15:13:47 +0200
Subject: [Sst-commit-watch] r779 - trunk/src
Message-ID: <200610221313.k9MDDl55027141@sheep.berlios.de>

Author: esr
Date: 2006-10-22 15:13:46 +0200 (Sun, 22 Oct 2006)
New Revision: 779

Modified:
   trunk/src/sst.py
Log:
Clean up and document constants.


Modified: trunk/src/sst.py
===================================================================
--- trunk/src/sst.py	2006-10-21 19:49:34 UTC (rev 778)
+++ trunk/src/sst.py	2006-10-22 13:13:46 UTC (rev 779)
@@ -18,20 +18,20 @@
 
 def _(str): return gettext.gettext(str)
 
-PHASEFAC	= 2.0
-GALSIZE 	= 8
-NINHAB  	= (GALSIZE * GALSIZE / 2)
-MAXUNINHAB	= 10
-PLNETMAX	= (NINHAB + MAXUNINHAB)
-QUADSIZE	= 10
-BASEMIN		= 2
-BASEMAX 	= (GALSIZE * GALSIZE / 12)
-MAXKLGAME	= 127
-MAXKLQUAD	= 9
-FULLCREW	= 428	# BSD Trek was 387, that's wrong 
-FOREVER 	= 1e30
-MAXBURST	= 3
-MINCMDR 	= 10
+GALSIZE 	= 8		# Galaxy size in quadrants
+NINHAB  	= (GALSIZE * GALSIZE / 2)	# Number of inhabited worlds
+MAXUNINHAB	= 10		# Maximum uninhabited worlds
+QUADSIZE	= 10		# Quadrant size in sectors
+BASEMIN		= 2				# Minimum starbases
+BASEMAX 	= (GALSIZE * GALSIZE / 12)	# Maximum starbases
+MAXKLGAME	= 127		# Maximum Klingons per game
+MAXKLQUAD	= 9		# Maximum Klingons per quadrant
+FULLCREW	= 428		# Crew size. BSD Trek was 387, that's wrong 
+FOREVER 	= 1e30		# Time for the indefinite future
+MAXBURST	= 3		# Max # of torps you can launch in one turn
+MINCMDR 	= 10		# Minimum number of Klingon commanders
+DOCKFAC		= 0.25		# Repair faster when docked
+PHASEFAC	= 2.0		# Unclear what this is, it was in the C version
 
 class TrekError:
     pass
@@ -331,10 +331,8 @@
         self.energy = 0.0	# energy level
         self.shield = 0.0	# shield level
         self.warpfac = 0.0	# warp speed
-        self.wfacsq = 0.0	# squared warp factor
         self.lsupres = 0.0	# life support reserves
         self.optime = 0.0	# time taken by current operation
-        self.docfac = 0.0	# repair factor when docking (constant?)
         self.damfac = 0.0	# damage factor
         self.lastchart = 0.0	# time star chart was last updated
         self.cryprob = 0.0	# probability that crystal will work
@@ -2079,7 +2077,7 @@
 	# Fix devices 
 	repair = xtime
 	if game.condition == "docked":
-	    repair /= game.docfac
+	    repair /= DOCKFAC
 	# Don't fix Deathray here 
 	for l in range(NDEVICES):
 	    if game.damage[l] > 0.0 and l != DDRAY:
@@ -4816,7 +4814,7 @@
 		jdam = True
 	    prout("  %-26s\t%8.2f\t\t%8.2f" % (device[i],
                                                game.damage[i]+0.05,
-                                               game.docfac*game.damage[i]+0.005))
+                                               DOCKFAC*game.damage[i]+0.005))
     if not jdam:
 	prout(_("All devices functional."))
 
@@ -5246,7 +5244,6 @@
     game.iscraft = "onship"
     game.landed = False
     game.alive = True
-    game.docfac = 0.25
     # Starchart is functional but we've never seen it
     game.lastchart = FOREVER
     # Put stars in the galaxy



From stsp at mail.berlios.de  Mon Oct 23 20:00:06 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Mon, 23 Oct 2006 20:00:06 +0200
Subject: [Sst-commit-watch] r780 - trunk/po
Message-ID: <200610231800.k9NI06pp027734@sheep.berlios.de>

Author: stsp
Date: 2006-10-23 20:00:05 +0200 (Mon, 23 Oct 2006)
New Revision: 780

Modified:
   trunk/po/POTFILES.in
   trunk/po/ru.po
Log:
use the python code as the source for the translation

Modified: trunk/po/POTFILES.in
===================================================================
--- trunk/po/POTFILES.in	2006-10-22 13:13:46 UTC (rev 779)
+++ trunk/po/POTFILES.in	2006-10-23 18:00:05 UTC (rev 780)
@@ -1,11 +1,2 @@
 # List of source files which contain translatable strings.
-src/ai.c
-src/battle.c
-src/events.c
-src/finish.c
-src/io.c
-src/moving.c
-src/planets.c
-src/reports.c
-src/setup.c
-src/sst.c
+src/sst.py

Modified: trunk/po/ru.po
===================================================================
--- trunk/po/ru.po	2006-10-22 13:13:46 UTC (rev 779)
+++ trunk/po/ru.po	2006-10-23 18:00:05 UTC (rev 780)
@@ -11,7 +11,7 @@
 msgstr ""
 "Project-Id-Version: sst 2.0\n"
 "Report-Msgid-Bugs-To: stsp\n"
-"POT-Creation-Date: 2006-10-02 23:04+0400\n"
+"POT-Creation-Date: 2006-10-23 21:47+0400\n"
 "PO-Revision-Date: 2006-09-15 11:01+0400\n"
 "Last-Translator: Stas Sergeev <stsp at aknet.ru>\n"
 "Language-Team: Russian <ru at li.org>\n"
@@ -21,1272 +21,1259 @@
 "Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%"
 "10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
 
-#: src/ai.c:36
-#, c-format
-msgid " escapes to %s (and regains strength)."
-msgstr " ??????? ? %s (? ??????????????? ???????)"
+#: src/sst.py:420
+#, python-format
+msgid " escapes to Quadrant %s (and regains strength)."
+msgstr " ??????? ? ???????? %s (? ??????????????? ???????)"
 
-#: src/ai.c:266
-#, c-format
-msgid " from %s"
-msgstr " ?? %s"
+#: src/sst.py:609
+#, python-format
+msgid "*** %s from Sector %s"
+msgstr "*** %s ?? ??????? %s"
 
-#: src/ai.c:268
+#: src/sst.py:611
 msgid " advances to "
 msgstr " ????????? ? "
 
-#: src/ai.c:270
+#: src/sst.py:613
 msgid " retreats to "
 msgstr " ????????? ? "
 
-#: src/ai.c:367 src/ai.c:554
+#: src/sst.py:674 src/sst.py:795
 msgid "Lt. Uhura-  \"Captain, Starfleet Intelligence reports"
 msgstr "??. ?????- \"???????, ???????? ????????? ????? ???????????"
 
-#: src/ai.c:368
-msgid "   a planet in "
-msgstr "   ??????? ? "
+#: src/sst.py:675
+#, python-format
+msgid "   a planet in Quadrant %s has been destroyed"
+msgstr "   ??????? ? ????????? %s ???? ??????????"
 
-#: src/ai.c:370
-msgid " has been destroyed"
-msgstr " ??????????"
-
-#: src/ai.c:371
+#: src/sst.py:676
 msgid "   by the Super-commander.\""
 msgstr "   ????-?????."
 
-#: src/ai.c:529 src/events.c:300
-msgid "Lt. Uhura-  \"Captain, the starbase in "
-msgstr "??. ?????- \"???????, ???? ? "
+#: src/sst.py:775 src/sst.py:2170
+#, python-format
+msgid "Lt. Uhura-  \"Captain, the starbase in Quadrant %s"
+msgstr "??. ?????- \"???????, ???? ? ????????? %s"
 
-#: src/ai.c:532
+#: src/sst.py:777
 msgid "   reports that it is under attack from the Klingon Super-commander."
 msgstr "   ????????, ??? ??? ????????? ????-????? ?????????."
 
-#: src/ai.c:533
-#, c-format
+#: src/sst.py:778
+#, python-format
 msgid "   It can survive until stardate %d.\""
 msgstr "   ??? ?????? ???????????? ?? ???? %d.\""
 
-#: src/ai.c:537 src/events.c:49
+#: src/sst.py:782 src/sst.py:1931
 msgid "Mr. Spock-  \"Captain, shall we cancel the rest period?\""
 msgstr "?????? ????- \"???????, ??? ???????? ??????\""
 
-#: src/ai.c:555
-msgid "   the Super-commander is in "
-msgstr "   ????-??? ????????? ? "
+#: src/sst.py:796
+#, python-format
+msgid "   the Super-commander is in Quadrant %s,"
+msgstr "   ????-??? ????????? ? ????????? %s,"
 
-#: src/ai.c:627
+#: src/sst.py:845
 msgid " completes web."
 msgstr " ??????? ????."
 
-#: src/battle.c:21 src/battle.c:37
+#: src/sst.py:864 src/sst.py:876
 msgid "Shields damaged and down."
 msgstr "?????? ??????? ? ?????."
 
-#: src/battle.c:31
+#: src/sst.py:871
 msgid "Do you wish to change shield energy? "
 msgstr "?? ?????? ???????? ??????? ??????? "
 
-#: src/battle.c:33 src/battle.c:92
+#: src/sst.py:873 src/sst.py:920
 msgid "Energy to transfer to shields- "
 msgstr "??????? ??? ????????? ????- "
 
-#: src/battle.c:41
+#: src/sst.py:879
 msgid "Shields are up. Do you want them down? "
 msgstr "?????? ???????. ?? ?????? ?? ?????? "
 
-#: src/battle.c:50
+#: src/sst.py:886
 msgid "Shields are down. Do you want them up? "
 msgstr "?????? ?????. ?? ?????? ?? ???????? "
 
-#: src/battle.c:63
+#: src/sst.py:894
 msgid "Shields already up."
 msgstr "?????? ? ??? ??? ???????."
 
-#: src/battle.c:70 src/battle.c:1328
+#: src/sst.py:900 src/sst.py:1893
 msgid "Shields raised."
 msgstr "?????? ???????."
 
-#: src/battle.c:73
+#: src/sst.py:903
 msgid "Shields raising uses up last of energy."
 msgstr "???????? ?????? ????????? ???? ??????? ???????."
 
-#: src/battle.c:81
+#: src/sst.py:910
 msgid "Shields already down."
 msgstr "?????? ? ??? ??? ?????."
 
-#: src/battle.c:86 src/battle.c:995
+#: src/sst.py:914 src/sst.py:1574
 msgid "Shields lowered."
 msgstr "?????? ?????."
 
-#: src/battle.c:98
+#: src/sst.py:925
 msgid "Insufficient ship energy."
 msgstr "??????? ??????? ????????????."
 
-#: src/battle.c:103
+#: src/sst.py:929
 msgid "Shield energy maximized."
 msgstr "??????? ?????? ???????? ?????????."
 
-#: src/battle.c:105
+#: src/sst.py:931
 msgid "Excess energy requested returned to ship energy"
 msgstr "?????? ??????? ????????? ???????"
 
-#: src/battle.c:114 src/moving.c:538 src/moving.c:639 src/planets.c:149
-#: src/planets.c:154
+#: src/sst.py:938 src/sst.py:3764 src/sst.py:3833 src/sst.py:4351
+#: src/sst.py:4355
 msgid "Engineering to bridge--"
 msgstr "?????????? ????? ???????--"
 
-#: src/battle.c:115
+#: src/sst.py:939
 msgid "  Scott here. Power circuit problem, Captain."
 msgstr "  ??? ?????. ??? ???????? ? ?????????????? ????????, ???????."
 
-#: src/battle.c:116
+#: src/sst.py:940
 msgid "  I can't drain the shields."
 msgstr "  ? ?? ???? ???????? ??????? ?? ???????? ?????."
 
-#: src/battle.c:121
+#: src/sst.py:944
 msgid "All shield energy transferred to ship."
 msgstr "??? ??????? ?????? ???????????? ?? ???????."
 
-#: src/battle.c:126
+#: src/sst.py:948
 msgid "Scotty- \""
 msgstr "??????- \""
 
-#: src/battle.c:128
+#: src/sst.py:950
 msgid "Transferring energy to shields.\""
 msgstr "???????? ??????? ?? ??????.\""
 
-#: src/battle.c:130
+#: src/sst.py:952
 msgid "Draining energy from shields.\""
 msgstr "??????? ??????? ?? ??????.\""
 
-#: src/battle.c:199 src/battle.c:999 src/events.c:875 src/moving.c:144
-#: src/moving.c:750 src/planets.c:492
+#: src/sst.py:987 src/sst.py:1577 src/sst.py:2557 src/sst.py:3401
+#: src/sst.py:3916 src/sst.py:4638
 msgid "***RED ALERT!  RED ALERT!"
 msgstr "***???????!  ???????!"
 
-#: src/battle.c:201
+#: src/sst.py:989
 msgid "***COLLISION IMMINENT."
 msgstr "***????????? ????????????."
 
-#: src/battle.c:213
+#: src/sst.py:995
 msgid " rammed by "
 msgstr " ?????????? "
 
-#: src/battle.c:213
+#: src/sst.py:997
 msgid " rams "
 msgstr " ??????? "
 
-#: src/battle.c:216
+#: src/sst.py:1000
 msgid " (original position)"
 msgstr " (???????? ?????????)"
 
-#: src/battle.c:221
-msgid " heavily damaged."
-msgstr " ???????? ?????????."
-
-#: src/battle.c:223
-#, c-format
+#: src/sst.py:1005
+#, python-format
 msgid "***Sickbay reports %d casualties"
 msgstr "***?? ???????? ??????????? ? %d ????????????"
 
-#: src/battle.c:241
+#: src/sst.py:1020
 msgid "***Shields are down."
 msgstr "***?????? ?????."
 
-#: src/battle.c:294
-msgid "Torpedo hits "
-msgstr "??????? ?????? ? ????: "
+#: src/sst.py:1054
+#, python-format
+msgid "Torpedo hits %s."
+msgstr "??????? ??????? ? %s."
 
-#: src/battle.c:331
+#: src/sst.py:1077
+#, python-format
+msgid " displaced by blast to Sector %s "
+msgstr " ????????? ??????? ? ?????? %s "
+
+#: src/sst.py:1085
 msgid " uses anti-photon device;"
 msgstr " ?????????? ??????????????? ?????????;"
 
-#: src/battle.c:332
+#: src/sst.py:1086
 msgid "   torpedo neutralized."
 msgstr "   ??????? ??????????????."
 
-#: src/battle.c:363 src/battle.c:373
+#: src/sst.py:1109 src/sst.py:1115
 msgid " damaged but not destroyed."
 msgstr " ?????????, ?? ?? ?????????."
 
-#: src/battle.c:367
+#: src/sst.py:1112
 msgid " buffeted into black hole."
 msgstr " ??????? ? ?????? ????."
 
-#: src/battle.c:376
-msgid " damaged--"
-msgstr " ?????????--"
+#: src/sst.py:1117
+#, python-format
+msgid " damaged-- displaced by blast to Sector %s "
+msgstr " ?????????-- ????????? ??????? ? ?????? %s "
 
-#: src/battle.c:382
+#: src/sst.py:1127
 msgid "***STARBASE DESTROYED.."
 msgstr "***???? ??????????.."
 
-#: src/battle.c:399 src/battle.c:413 src/battle.c:790 src/events.c:690
-#: src/events.c:711
+#: src/sst.py:1137 src/sst.py:1149 src/sst.py:1437 src/sst.py:2432
+#: src/sst.py:2446
 msgid " destroyed."
 msgstr " ?????????."
 
-#: src/battle.c:424
-msgid "You have just destroyed an inhabited planet."
-msgstr "?? ?????? ??? ?????????? ????????? ???????."
+#: src/sst.py:1159
+msgid "The torpedo destroyed an inhabited planet."
+msgstr "??????? ?????????? ????????? ???????."
 
-#: src/battle.c:425
-msgid "Celebratory rallies are being held on the Klingon homeworld."
-msgstr "?? ??????? ????????? ?????? ??????????? ???????."
-
-#: src/battle.c:433
+#: src/sst.py:1165
 msgid " unaffected by photon blast."
 msgstr " ?? ????????? ???????? ???????."
 
-#: src/battle.c:438
+#: src/sst.py:1170
 msgid "AAAAIIIIEEEEEEEEAAAAAAAAUUUUUGGGGGHHHHHHHHHHHH!!!"
 msgstr "?????????????????????????????????????????????????????!!!"
 
-#: src/battle.c:440
+#: src/sst.py:1172
 msgid "    HACK!     HACK!    HACK!        *CHOKE!*  "
 msgstr ""
 
-#: src/battle.c:442
+#: src/sst.py:1174
 msgid "Mr. Spock-"
 msgstr "?????? ????-"
 
-#: src/battle.c:443
+#: src/sst.py:1175
 msgid "  \"Fascinating!\""
 msgstr "  \"??????????!\""
 
-#: src/battle.c:459
+#: src/sst.py:1187
 msgid " swallows torpedo."
 msgstr " ????????? ???????."
 
-#: src/battle.c:463
+#: src/sst.py:1191
 msgid "***Torpedo absorbed by Tholian web."
 msgstr "***?????????? ???? ????????? ???????."
 
-#: src/battle.c:478
+#: src/sst.py:1205
 msgid " survives photon blast."
 msgstr " ???????? ???????? ?????."
 
-#: src/battle.c:481
+#: src/sst.py:1207
 msgid " disappears."
 msgstr " ?????."
 
-#: src/battle.c:503
-#, c-format
-msgid " displaced by blast to %s "
-msgstr " ????????? ??????? ? %s "
-
-#: src/battle.c:510
+#: src/sst.py:1220
 msgid "Torpedo missed."
 msgstr "??????? ?????????."
 
-#: src/battle.c:525
+#: src/sst.py:1228
 msgid "***CRITICAL HIT--"
 msgstr "***??????????? ????--"
 
-#: src/battle.c:543
+#: src/sst.py:1247
 msgid " and "
 msgstr " ? "
 
-#: src/battle.c:547
+#: src/sst.py:1248
 msgid " damaged."
 msgstr " ?????????."
 
-#: src/battle.c:549
+#: src/sst.py:1250
 msgid "***Shields knocked down."
 msgstr "***?????? ?????."
 
-#: src/battle.c:632
+#: src/sst.py:1315
 msgid "***TORPEDO INCOMING"
 msgstr "***??????? ????????????"
 
-#: src/battle.c:634
+#: src/sst.py:1317
 msgid " From "
 msgstr " ?? "
 
-#: src/battle.c:670
-#, c-format
+#: src/sst.py:1351
+#, python-format
 msgid "%d unit hit"
 msgstr "???? ?? %d ??????"
 
-#: src/battle.c:672
+#: src/sst.py:1353
 msgid " on the "
 msgstr " ?? "
 
-#: src/battle.c:676
+#: src/sst.py:1355
 msgid " from "
 msgstr " ?? "
 
-#: src/battle.c:693
+#: src/sst.py:1368
 msgid "***Enemies decide against attacking your ship."
 msgstr "***????? ?????? ?? ????????? ??? ???????."
 
-#: src/battle.c:699
+#: src/sst.py:1372
 msgid "Enemy attack reduces shield strength to "
 msgstr "????????? ????? ????????? ???? ?????? ?? "
 
-#: src/battle.c:704
-#, c-format
+#: src/sst.py:1376
+#, python-format
 msgid "Energy left %2d    shields "
 msgstr "??????? ???????: %2d    ?????? "
 
-#: src/battle.c:706
+#: src/sst.py:1378
 msgid "up "
 msgstr "??????? "
 
-#: src/battle.c:708
+#: src/sst.py:1380
 msgid "down "
 msgstr "????? "
 
-#: src/battle.c:710
+#: src/sst.py:1382
 msgid "damaged, "
 msgstr "???????, "
 
-#: src/battle.c:712
-#, c-format
+#: src/sst.py:1383
+#, python-format
 msgid "%d%%,   torpedoes left %d"
 msgstr "%d%%,   ???????? %d ??????"
 
-#: src/battle.c:718
-#, c-format
+#: src/sst.py:1389
+#, python-format
 msgid "Mc Coy-  \"Sickbay to bridge.  We suffered %d casualties"
 msgstr "??????- \"??????? ???????.  ? ??? ????????? %d ????????????"
 
-#: src/battle.c:719
+#: src/sst.py:1390
 msgid "   in that last attack.\""
 msgstr "   ?? ????????? ?????.\""
 
-#: src/battle.c:831
+#: src/sst.py:1459
 msgid "Spock-  \"Bridge to sickbay.  Dr. McCoy,"
 msgstr "????- \"?????? ????????.  ?????? ??????,"
 
-#: src/battle.c:832
+#: src/sst.py:1460
 msgid "  I recommend an immediate review of"
 msgstr "  ?????????? ?????????? ?????????"
 
-#: src/battle.c:833
+#: src/sst.py:1461
 msgid "  the Captain's psychological profile.\""
 msgstr "  ??????????????? ????????? ????????.\""
 
-#: src/battle.c:851
+#: src/sst.py:1471
 msgid "Photon tubes damaged."
 msgstr "???????? ????? ???????."
 
-#: src/battle.c:856
+#: src/sst.py:1475
 msgid "No torpedoes left."
 msgstr "?????? ?????? ?? ????????."
 
-#: src/battle.c:867
-#, c-format
+#: src/sst.py:1485
+#, python-format
 msgid "%d torpedoes left."
 msgstr "???????? %d ??????."
 
-#: src/battle.c:868
+#: src/sst.py:1487
 msgid "Number of torpedoes to fire- "
 msgstr "????? ?????? ?? ???????- "
 
-#: src/battle.c:879
-msgid "Maximum of 3 torpedoes per burst."
-msgstr "???????? 3 ??????? ?? ????."
+#: src/sst.py:1496
+#, python-format
+msgid "Maximum of %d torpedoes per burst."
+msgstr "???????? %d ??????? ?? ????."
 
-#: src/battle.c:922
-#, c-format
+#: src/sst.py:1526
+#, python-format
 msgid "Target sector for torpedo number %d- "
 msgstr "?????? ?????????? ??? ??????? ????? %d- "
 
-#: src/battle.c:950
-#, c-format
+#: src/sst.py:1544
+#, python-format
 msgid "***TORPEDO NUMBER %d MISFIRES"
 msgstr "***??????? ????? %d ?? ?????"
 
-#: src/battle.c:953
+#: src/sst.py:1546
 msgid "***TORPEDO MISFIRES."
 msgstr "***??????? ?? ?????."
 
-#: src/battle.c:956
+#: src/sst.py:1549
 msgid "  Remainder of burst aborted."
 msgstr "  ??????? ????? ???????."
 
-#: src/battle.c:958
+#: src/sst.py:1551
 msgid "***Photon tubes damaged by misfire."
 msgstr "***???????? ????? ????????? ??? ??????."
 
-#: src/battle.c:981
+#: src/sst.py:1567
 msgid "Weapons officer Sulu-  \"Phasers overheated, sir.\""
 msgstr "???????? ????- \"?????? ??????????, ???.\""
 
-#: src/battle.c:1005
+#: src/sst.py:1583
 msgid "Sulu-  \"Captain! Shield malf***********************\""
 msgstr "????- \"???????! ?????? ?? ????*********************\""
 
-#: src/battle.c:1011
+#: src/sst.py:1588
 msgid "Sulu-  \"Captain! Shield malfunction! Phaser fire contained!\""
 msgstr ""
 "????- \"???????! ?????? ?? ?????????! ??????? ??????? ????????? ??????!\""
 
-#: src/battle.c:1013
+#: src/sst.py:1590
 msgid "Lt. Uhura-  \"Sir, all decks reporting damage.\""
 msgstr "??. ?????- \"???, ??? ?????? ???????? ? ???????????.\""
 
-#: src/battle.c:1019
+#: src/sst.py:1596
 msgid "McCoy to bridge- \"Severe radiation burns, Jim."
 msgstr "?????? ???????- \"?????????? ???????????? ?????, ????."
 
-#: src/battle.c:1020
-#, c-format
+#: src/sst.py:1597
+#, python-format
 msgid "  %d casualties so far.\""
 msgstr "  ????-??? %d ????????????.\""
 
-#: src/battle.c:1025
+#: src/sst.py:1601
 msgid "Phaser energy dispersed by shields."
 msgstr "??????? ??????? ???????? ???????? ?????."
 
-#: src/battle.c:1026
+#: src/sst.py:1602
 msgid "Enemy unaffected."
 msgstr "???? ?? ?????????."
 
-#: src/battle.c:1046
+#: src/sst.py:1629
+#, python-format
+msgid "%d unit hit on "
+msgstr "%d ?????? ??????? ??????? ?? "
+
+#: src/sst.py:1631
+msgid "Very small hit on "
+msgstr "????? ?????? ???? ?? "
+
+#: src/sst.py:1647
+#, python-format
+msgid "***Mr. Spock-  \"Captain, the vessel at Sector %s"
+msgstr "***?????? ????- \"???????, ???????? ? ??????? %s"
+
+#: src/sst.py:1648
+msgid "   has just lost its firepower.\""
+msgstr "   ???????? ??????????????.\""
+
+#: src/sst.py:1665
 msgid "Phasers can't be fired through base shields."
 msgstr "?????? ?? ????? ???????? ????? ?????? ????."
 
-#: src/battle.c:1051
+#: src/sst.py:1669
 msgid "Phaser control damaged."
 msgstr "?????????? ???????? ?? ????????."
 
-#: src/battle.c:1057
+#: src/sst.py:1674
 msgid "High speed shield control damaged."
 msgstr "???????????????? ?????????? ??????? ?? ????????."
 
-#: src/battle.c:1062
+#: src/sst.py:1678
 msgid "Insufficient energy to activate high-speed shield control."
 msgstr "???????????? ??????? ??? ????????????????? ?????????? ???????."
 
-#: src/battle.c:1066
+#: src/sst.py:1681
 msgid "Weapons Officer Sulu-  \"High-speed shield control enabled, sir.\""
 msgstr "???????? ????- \"???????????????? ?????????? ??????? ????????, ???.\""
 
-#: src/battle.c:1076
+#: src/sst.py:1690
 msgid "There is no enemy present to select."
 msgstr "????? ??? ??????."
 
-#: src/battle.c:1092 src/battle.c:1107 src/battle.c:1118
+#: src/sst.py:1702 src/sst.py:1712 src/sst.py:1721
 msgid "Energy will be expended into space."
 msgstr "??????? ????? ? ???????."
 
-#: src/battle.c:1124
+#: src/sst.py:1726
 msgid "Manual or automatic? "
 msgstr "?????? ??? ??????????????? "
 
-#: src/battle.c:1135
-#, c-format
+#: src/sst.py:1736
+#, python-format
 msgid "Phasers locked on target. Energy available: %.2f"
 msgstr "?????? ???????? ?? ????. ????????? ???????: %.2f"
 
-#: src/battle.c:1146
-#, c-format
+#: src/sst.py:1744
+#, python-format
 msgid "%d units required. "
 msgstr "?????????? %d ??????. "
 
-#: src/battle.c:1148
+#: src/sst.py:1746
 msgid "Units to fire= "
 msgstr "??????? ?? ???????= "
 
-#: src/battle.c:1154 src/battle.c:1231
-#, c-format
+#: src/sst.py:1752 src/sst.py:1818
+#, python-format
 msgid "Energy available= %.2f"
 msgstr "????????? ???????= %.2f"
 
-#: src/battle.c:1200
+#: src/sst.py:1793
 msgid "*** Tholian web absorbs "
 msgstr "*** ?????????? ???? ????????? "
 
-#: src/battle.c:1202
+#: src/sst.py:1795
 msgid "excess "
 msgstr "?????????? "
 
-#: src/battle.c:1203
+#: src/sst.py:1796
 msgid "phaser energy."
 msgstr "??????? ???????."
 
-#: src/battle.c:1206
-#, c-format
+#: src/sst.py:1798
+#, python-format
 msgid "%d expended on empty space."
 msgstr "%d ???? ? ???????."
 
-#: src/battle.c:1215
+#: src/sst.py:1803
 msgid "Battle computer damaged, manual fire only."
 msgstr "???????? ????????? ??????, ??????????? ?????? ?????????."
 
-#: src/battle.c:1218 src/finish.c:14
+#: src/sst.py:1806 src/sst.py:2622
 msgid "---WORKING---"
 msgstr "---??????---"
 
-#: src/battle.c:1220
+#: src/sst.py:1808
 msgid "Short-range-sensors-damaged"
 msgstr "???????-????????-??????-???????"
 
-#: src/battle.c:1221
+#: src/sst.py:1809
 msgid "Insufficient-data-for-automatic-phaser-fire"
 msgstr "????????????-??????-???-???????????????-?????????-???????"
 
-#: src/battle.c:1222
+#: src/sst.py:1810
 msgid "Manual-fire-must-be-used"
 msgstr "???????????-??????-?????????"
 
-#: src/battle.c:1240
+#: src/sst.py:1824
 msgid " can't be located without short range scan."
 msgstr " ?? ????? ???? ????????? ??? ???????? ????????????."
 
-#: src/battle.c:1259
-msgid "units to fire at "
-msgstr "??????? ?? ??????? ?? "
+#: src/sst.py:1841
+#, python-format
+msgid "units to fire at %s-  "
+msgstr "??????? ?? ??????? ? %s-  "
 
-#: src/battle.c:1289
+#: src/sst.py:1862
 msgid "Available energy exceeded -- try again."
 msgstr "????????? ??????? ?? ??????? -- ?????????? ?????."
 
-#: src/battle.c:1322
+#: src/sst.py:1888
 msgid "Sulu-  \"Sir, the high-speed shield control has malfunctioned . . ."
 msgstr "????- \"???, ???????????????? ?????????? ??????? ?? ????????? . . ."
 
-#: src/battle.c:1323
+#: src/sst.py:1889
 msgid "         CLICK   CLICK   POP  . . ."
 msgstr "         ????   ????   ????  . . ."
 
-#: src/battle.c:1324
+#: src/sst.py:1890
 msgid " No response, sir!"
 msgstr " ??? ???????, ???!"
 
-#: src/battle.c:1360
-#, c-format
-msgid "%d unit hit on "
-msgstr "%d ?????? ??????? ??????? ?? "
-
-#: src/battle.c:1363
-msgid "Very small hit on "
-msgstr "????? ?????? ???? ?? "
-
-#: src/battle.c:1380
-#, c-format
-msgid "***Mr. Spock-  \"Captain, the vessel at %s"
-msgstr "***?????? ????- \"???????, ???????? ? %s "
-
-#: src/battle.c:1382
-msgid "   has just lost its firepower.\""
-msgstr "   ???????? ??????????????.\""
-
-#: src/events.c:144
-msgid "Lt. Uhura- \"Captain, the sub-space radio is working and"
-msgstr "??. ?????- \"???????, ??????????? ????? ???????? ?"
-
-#: src/events.c:145
-msgid "   surveillance reports are coming in."
-msgstr "   ????????? ?????????? ?? ?????? ??????????."
-
-#: src/events.c:152
-msgid "   The star chart is now up to date.\""
-msgstr "   ???????? ????? ?????????."
-
-#: src/events.c:205
+#: src/sst.py:1951
 msgid " caught in long range tractor beam--"
 msgstr " ?????? ???????????? ????????? ?????--"
 
-#: src/events.c:218
+#: src/sst.py:1963
 msgid "Galileo, left on the planet surface, is captured"
 msgstr "???????, ?????????? ?? ???????, ???????"
 
-#: src/events.c:219
+#: src/sst.py:1964
 msgid "by aliens and made into a flying McDonald's."
 msgstr "?????????????? ? ????????? ? ??????????? ???????????."
 
-#: src/events.c:224
+#: src/sst.py:1968
 msgid "Galileo, left on the planet surface, is well hidden."
 msgstr "???????, ?????????? ?? ???????, ?????? ???????."
 
-#: src/events.c:233
-msgid " is pulled to "
-msgstr " ??????? ? "
+#: src/sst.py:1974
+#, python-format
+msgid " is pulled to Quadrant %s, Sector %s"
+msgstr ""
 
-#: src/events.c:238
+#: src/sst.py:1977
 msgid "(Remainder of rest/repair period cancelled.)"
 msgstr "(??????? ??????? ??????/??????? ???????.)"
 
-#: src/events.c:247
+#: src/sst.py:1984
 msgid "(Shields not currently useable.)"
 msgstr "(?????? ? ????????? ?????????.)"
 
-#: src/events.c:302
-msgid "   reports that it is under attack and that it can"
-msgstr "   ????????, ??? ??? ????????? ? ??????"
-
-#: src/events.c:303
-#, c-format
-msgid "   hold out only until stardate %d"
-msgstr "   ???????????? ?? ???? %d.\""
-
-#: src/events.c:340
+#: src/sst.py:2004
 msgid "Spock-  \"Captain, I believe the starbase has been destroyed.\""
 msgstr "????- \"???????, ? ????????, ??? ???? ??????????.\""
 
-#: src/events.c:347
+#: src/sst.py:2009
 msgid "Lt. Uhura-  \"Captain, Starfleet Command reports that"
 msgstr "??. ?????- \"???????, ???? ????????? ????? ????????"
 
-#: src/events.c:348
-msgid "   the starbase in "
-msgstr "   ???? ? "
+#: src/sst.py:2010
+#, python-format
+msgid "   the starbase in Quadrant %s has been destroyed by"
+msgstr "   ???? ? ????????? %s ??????????"
 
-#: src/events.c:350
-msgid " has been destroyed by"
-msgstr " ??????????"
-
-#: src/events.c:352
+#: src/sst.py:2012
 msgid "the Klingon Super-Commander"
 msgstr "????-????? ?????????"
 
-#: src/events.c:354
+#: src/sst.py:2014
 msgid "a Klingon Commander"
 msgstr "?????????? ?????????"
 
-#: src/events.c:392
+#: src/sst.py:2090
+msgid "Lt. Uhura- \"Captain, the sub-space radio is working and"
+msgstr "??. ?????- \"???????, ??????????? ????? ???????? ?"
+
+#: src/sst.py:2091
+msgid "   surveillance reports are coming in."
+msgstr "   ????????? ?????????? ?? ?????? ??????????."
+
+#: src/sst.py:2097
+msgid "   The star chart is now up to date.\""
+msgstr "   ???????? ????? ?????????."
+
+#: src/sst.py:2171
+msgid "   reports that it is under attack and that it can"
+msgstr "   ????????, ??? ??? ????????? ? ??????"
+
+#: src/sst.py:2172
+#, python-format
+msgid "   hold out only until stardate %d.\""
+msgstr "   ???????????? ?????? ?? ???? %d.\""
+
+#: src/sst.py:2212
 msgid "Lt. Uhura-  \"The deep space probe "
 msgstr "??. ?????- \"???????????? ??????????? ?????? "
 
-#: src/events.c:394
-msgid "has left the galaxy"
-msgstr "???????? ?????????"
+#: src/sst.py:2214
+msgid "has left the galaxy.\""
+msgstr "???????? ?????????.\""
 
-#: src/events.c:396
-msgid "is no longer transmitting"
-msgstr "?????? ?? ????????"
+#: src/sst.py:2216
+msgid "is no longer transmitting.\""
+msgstr "?????? ?? ????????.\""
 
-#: src/events.c:405
-msgid "Lt. Uhura-  \"The deep space probe is now in "
-msgstr "??. ?????- \"???????????? ??????????? ?????? ?????? ? "
+#: src/sst.py:2222
+#, python-format
+msgid "Lt. Uhura-  \"The deep space probe is now in Quadrant %s.\""
+msgstr "??. ?????- \"???????????? ??????????? ?????? ?????? ? ????????? %s.\""
 
-#: src/events.c:460
-#, c-format
-msgid "Uhura- Captain, %s in %s reports it is under attack"
-msgstr "?????- ???????, %s ?? %s ????????, ??? ??? ??????????? ?????"
+#: src/sst.py:2261
+#, python-format
+msgid "Uhura- Captain, %s in Quadrant %s reports it is under attack"
+msgstr "?????- ???????, %s ? ????????? %s ????????, ??? ??? ??????????? ?????"
 
-#: src/events.c:462
+#: src/sst.py:2263
 msgid "by a Klingon invasion fleet."
 msgstr "??????????????? ????? ?????????."
 
-#: src/events.c:484
-#, c-format
+#: src/sst.py:2281
+#, python-format
 msgid "Uhura- We've lost contact with starsystem %s"
 msgstr "?????- ?? ???????? ??????? ? ???????? %s"
 
-#: src/events.c:486 src/events.c:542
-#, c-format
-msgid "in %s.\n"
-msgstr "? %s.\n"
+#: src/sst.py:2283
+#, python-format
+msgid "in Quadrant %s.\n"
+msgstr "? ????????? %s.\n"
 
-#: src/events.c:536
+#: src/sst.py:2324
 msgid "Spock- sensors indicate the Klingons have"
 msgstr "????- ???? ?? ?????????? ????????, ????????"
 
-#: src/events.c:537
-#, c-format
+#: src/sst.py:2325
+#, python-format
 msgid "launched a warship from %s."
 msgstr "????????? ??????? ??????? ? %s."
 
-#: src/events.c:539
+#: src/sst.py:2327
 msgid "Uhura- Starfleet reports increased Klingon activity"
 msgstr "?????- ???????? ???? ???????? ?? ??????????? ?????????? ?????????"
 
-#: src/events.c:541
-#, c-format
+#: src/sst.py:2329
+#, python-format
 msgid "near %s"
 msgstr "????? %s."
 
-#: src/events.c:562
+#: src/sst.py:2330
+#, python-format
+msgid "in Quadrant %s."
+msgstr "? ????????? %s."
+
+#: src/sst.py:2339
 msgid "How long? "
 msgstr "????? ????? "
 
-#: src/events.c:573
+#: src/sst.py:2348
 msgid "Are you sure? "
 msgstr "?? ???????? "
 
-#: src/events.c:585
-#, c-format
+#: src/sst.py:2357
+#, python-format
 msgid "%d stardates left."
 msgstr "???????? %d ????."
 
-#: src/events.c:642 src/events.c:683
+#: src/sst.py:2393 src/sst.py:2423
 msgid " novas."
 msgstr " ??????????."
 
-#: src/events.c:716
+#: src/sst.py:2449
 msgid "***Starship buffeted by nova."
 msgstr "***????????? ????????? ??????? ??????."
 
-#: src/events.c:725
+#: src/sst.py:2458
 msgid "***Shields knocked out."
 msgstr "***?????? ???????."
 
-#: src/events.c:757
+#: src/sst.py:2478
 msgid " damaged"
 msgstr " ?????????"
 
-#: src/events.c:765
+#: src/sst.py:2485
 msgid ", blasted into "
 msgstr ", ?????????? ? "
 
-#: src/events.c:776
-msgid ", buffeted to "
-msgstr " ??????? ? "
+#: src/sst.py:2493
+#, python-format
+msgid ", buffeted to Sector %s"
+msgstr ", ??????? ? ?????? %s"
 
-#: src/events.c:807
+#: src/sst.py:2507
 msgid "Force of nova displaces starship."
 msgstr "????? ?????? ??????? ?????????."
 
-#: src/events.c:853
-#, c-format
+#: src/sst.py:2542
+#, python-format
 msgid "Message from Starfleet Command       Stardate %.2f"
 msgstr "????????? ?? ????? ????????? ?????       ???? %.2f"
 
-#: src/events.c:854
-#, c-format
-msgid "     Supernova in %s; caution advised."
-msgstr "     ????? ?????????? ? %s; ?????????? ????????????."
+#: src/sst.py:2543
+#, python-format
+msgid "     Supernova in Quadrant %s; caution advised."
+msgstr "     ????? ?????????? ? ????????? %s; ?????????? ????????????."
 
-#: src/events.c:877
-#, c-format
-msgid "***Incipient supernova detected at %s"
-msgstr "***??????????????? ????? ?????????? ? %s"
+#: src/sst.py:2559
+#, python-format
+msgid "***Incipient supernova detected at Sector %s"
+msgstr "***??????????????? ????? ?????????? ? ??????? %s"
 
-#: src/events.c:879
+#: src/sst.py:2561
 msgid "Emergency override attempts t"
 msgstr "????????? ???????? ?"
 
-#: src/events.c:947
+#: src/sst.py:2605
 msgid "Lucky you!"
 msgstr "???????!"
 
-#: src/events.c:948
-#, c-format
+#: src/sst.py:2606
+#, python-format
 msgid "A supernova in %s has just destroyed the last Klingons."
 msgstr "?????????? ? %s ??? ??? ?????????? ????????? ?????????."
 
-#: src/finish.c:11
+#: src/sst.py:2620
 msgid "Computer damaged; cannot execute destruct sequence."
 msgstr "????????? ??????; ?????????? ????????? ????????? ???????????????."
 
-#: src/finish.c:15
+#: src/sst.py:2623
 msgid "SELF-DESTRUCT-SEQUENCE-ACTIVATED"
 msgstr "?????????-???????????????-????????"
 
-#: src/finish.c:22
+#: src/sst.py:2630
 msgid "ENTER-CORRECT-PASSWORD-TO-CONTINUE-"
 msgstr "???????-??????-???-???????????-"
 
-#: src/finish.c:24
+#: src/sst.py:2632
 msgid "SELF-DESTRUCT-SEQUENCE-OTHERWISE-"
 msgstr "???????????????-?-?????-"
 
-#: src/finish.c:26
+#: src/sst.py:2634
 msgid "SELF-DESTRUCT-SEQUENCE-WILL-BE-ABORTED"
 msgstr "???????????????-?????-????????"
 
-#: src/finish.c:31
+#: src/sst.py:2639
 msgid "PASSWORD-REJECTED;"
 msgstr "??????-??-??????"
 
-#: src/finish.c:33
+#: src/sst.py:2641
 msgid "CONTINUITY-EFFECTED"
 msgstr "??????????-????"
 
-#: src/finish.c:37
+#: src/sst.py:2644
 msgid "PASSWORD-ACCEPTED"
 msgstr "??????-??????"
 
-#: src/finish.c:44
+#: src/sst.py:2651
 msgid "GOODBYE-CRUEL-WORLD"
 msgstr "??????-????????-???"
 
-#: src/finish.c:55
-msgid "********* Entropy of "
-msgstr "********* ???????? ??????? "
+#: src/sst.py:2659
+#, python-format
+msgid "********* Entropy of %s maximized *********"
+msgstr "********* ???????? ??????? %s ???????? ???????????? ?????? *********"
 
-#: src/finish.c:57
-msgid " maximized *********"
-msgstr " ???????? *********"
-
-#: src/finish.c:80
-#, c-format
+#: src/sst.py:2702
+#, python-format
 msgid "It is stardate %.1f."
 msgstr "??????? %.1f ?????."
 
-#: src/finish.c:85
-#, c-format
+#: src/sst.py:2706
+#, python-format
 msgid "The remaining %d Romulans surrender to Starfleet Command."
 msgstr "?????????? %d ??????? ??????? ????????? ?????."
 
-#: src/finish.c:88
+#: src/sst.py:2709
 msgid "You have smashed the Klingon invasion fleet and saved"
 msgstr "?? ????????? ???? ????????????? ??????????? ? ??????"
 
-#: src/finish.c:89
+#: src/sst.py:2710
 msgid "the Federation."
 msgstr "?????????."
 
-#: src/finish.c:106
+#: src/sst.py:2720
 msgid "In fact, you have done so well that Starfleet Command"
 msgstr "?? ?????? ??????, ?? ??????????? ??? ?????, ??? ???? ????????? ?????"
 
-#: src/finish.c:111
+#: src/sst.py:2722
 msgid "promotes you one step in rank from \"Novice\" to \"Fair\"."
 msgstr "???????? ??? ???? ?? ??????? ?? ????????."
 
-#: src/finish.c:114
+#: src/sst.py:2724
 msgid "promotes you one step in rank from \"Fair\" to \"Good\"."
 msgstr "???????? ??? ???? ?? ???????? ?? ???????."
 
-#: src/finish.c:117
+#: src/sst.py:2726
 msgid "promotes you one step in rank from \"Good\" to \"Expert\"."
 msgstr "???????? ??? ???? ?? ??????? ?? ???????????."
 
-#: src/finish.c:120
+#: src/sst.py:2728
 msgid "promotes you to Commodore Emeritus."
 msgstr "???????? ??? ?? ????????? ?????????? ????????."
 
-#: src/finish.c:122
+#: src/sst.py:2730
 msgid "Now that you think you're really good, try playing"
 msgstr "??????, ????? ?? ???????? ???? ??????? ???????, ??????????? ???????"
 
-#: src/finish.c:123
+#: src/sst.py:2731
 msgid "the \"Emeritus\" game. It will splatter your ego."
 msgstr "?? \"Emeritus\". ??? ??????? ??? ???."
 
-#: src/finish.c:127
+#: src/sst.py:2734
 msgid "Computer-  "
 msgstr "?????????-  "
 
-#: src/finish.c:128
+#: src/sst.py:2735
 msgid "ERROR-ERROR-ERROR-ERROR"
 msgstr "????-????-????-??????"
 
-#: src/finish.c:130
+#: src/sst.py:2737
 msgid "  YOUR-SKILL-HAS-EXCEEDED-THE-CAPACITY-OF-THIS-PROGRAM"
 msgstr "  ????-??????????-????????????-????-?????????"
 
-#: src/finish.c:132 src/finish.c:134 src/finish.c:136
+#: src/sst.py:2739 src/sst.py:2741 src/sst.py:2743
 msgid "  THIS-PROGRAM-MUST-SURVIVE"
 msgstr ""
 
-#: src/finish.c:138
+#: src/sst.py:2745
 msgid "  THIS-PROGRAM-MUST?- MUST ? - SUR? ? -?  VI"
 msgstr ""
 
-#: src/finish.c:140
+#: src/sst.py:2747
 msgid "Now you can retire and write your own Star Trek game!"
 msgstr "?????? ?? ?????? ???? ?? ?????? ? ???????? ???? ???? Star Trek!"
 
-#: src/finish.c:146
+#: src/sst.py:2751
 msgid "You cannot get a citation, so..."
 msgstr "??? ?? ???????? ???????, ??? ???..."
 
-#: src/finish.c:148
+#: src/sst.py:2753
 msgid "Do you want your Commodore Emeritus Citation printed? "
 msgstr "?????? ??????????? ???? ??????? ?????????? ????????? "
 
-#: src/finish.c:158 src/finish.c:172
+#: src/sst.py:2759 src/sst.py:2772
 msgid "LIVE LONG AND PROSPER."
 msgstr "?????? ????? ? ?????????."
 
-#: src/finish.c:165
+#: src/sst.py:2765
 msgid "Your time has run out and the Federation has been"
 msgstr "???? ????? ??????? ? ????????? ????"
 
-#: src/finish.c:166
+#: src/sst.py:2766
 msgid "conquered.  Your starship is now Klingon property,"
 msgstr "?????????.  ??? ????????? ???? ?????????????? ?????????,"
 
-#: src/finish.c:167
+#: src/sst.py:2767
 msgid "and you are put on trial as a war criminal.  On the"
 msgstr "? ?? ?????? ?? ?????? ?????????? ??? ??????? ??????????.  ??????????"
 
-#: src/finish.c:168
+#: src/sst.py:2768
 msgid "basis of your record, you are "
 msgstr "????????? ????, ??? "
 
-#: src/finish.c:170
+#: src/sst.py:2770
 msgid "acquitted."
 msgstr "??????????."
 
-#: src/finish.c:175
+#: src/sst.py:2774
 msgid "found guilty and"
 msgstr "???????? ???????? ?"
 
-#: src/finish.c:176
+#: src/sst.py:2775
 msgid "sentenced to death by slow torture."
 msgstr "??????????? ? ?????? ?? ????????? ????."
 
-#: src/finish.c:182
+#: src/sst.py:2780
 msgid "Your life support reserves have run out, and"
 msgstr "??????? ???????????????? ??????? ?"
 
-#: src/finish.c:183
+#: src/sst.py:2781
 msgid "you die of thirst, starvation, and asphyxiation."
 msgstr "?? ??????? ?? ?????, ?????? ? ??????."
 
-#: src/finish.c:184 src/finish.c:189 src/finish.c:284
+#: src/sst.py:2782 src/sst.py:2786 src/sst.py:2857
 msgid "Your starship is a derelict in space."
 msgstr "??? ????????? ???? ??????????? ???????."
 
-#: src/finish.c:187
+#: src/sst.py:2784
 msgid "Your energy supply is exhausted."
 msgstr "????????? ??????? ???????."
 
-#: src/finish.c:192 src/finish.c:211 src/finish.c:230 src/moving.c:752
-msgid "The "
-msgstr " "
+#: src/sst.py:2788
+#, python-format
+msgid "The %s has been destroyed in battle."
+msgstr "%s ??? ????????? ? ???."
 
-#: src/finish.c:194
-msgid "has been destroyed in battle."
-msgstr " ??? ????????? ? ???."
-
-#: src/finish.c:196
+#: src/sst.py:2790
 msgid "Dulce et decorum est pro patria mori."
 msgstr ""
 
-#: src/finish.c:199
+#: src/sst.py:2792
 msgid "You have made three attempts to cross the negative energy"
 msgstr "?? ??? ???? ???????? ???????? ?????????? ??????????????"
 
-#: src/finish.c:200
+#: src/sst.py:2793
 msgid "barrier which surrounds the galaxy."
 msgstr "??????, ?????????? ?????????."
 
-#: src/finish.c:202
+#: src/sst.py:2795
 msgid "Your navigation is abominable."
 msgstr "?? ?? ?????? ????????? ????????."
 
-#: src/finish.c:206
+#: src/sst.py:2798
 msgid "Your starship has been destroyed by a nova."
 msgstr "??? ????????? ????????? ??????? ??????."
 
-#: src/finish.c:207 src/finish.c:251
+#: src/sst.py:2799 src/sst.py:2829
 msgid "That was a great shot."
 msgstr "??? ??? ???????? ???????."
 
-#: src/finish.c:213
-msgid " has been fried by a supernova."
-msgstr " ??? ???????? ??????? ??????????."
+#: src/sst.py:2802
+#, python-format
+msgid "The %s has been fried by a supernova."
+msgstr "%s ??? ???????? ??????? ??????????."
 
-#: src/finish.c:214
+#: src/sst.py:2803
 msgid "...Not even cinders remain..."
 msgstr "...? ????????-?? ?? ????????..."
 
-#: src/finish.c:217
+#: src/sst.py:2805
 msgid "You have been captured by the Klingons. If you still"
 msgstr "??? ????????? ????????. ???? ? ???"
 
-#: src/finish.c:218
+#: src/sst.py:2806
 msgid "had a starbase to be returned to, you would have been"
 msgstr "???? ?? ????, ??? ?? ?????"
 
-#: src/finish.c:219
+#: src/sst.py:2807
 msgid "repatriated and given another chance. Since you have"
 msgstr "?????? ? ???? ??? ????. ? ??? -"
 
-#: src/finish.c:220
+#: src/sst.py:2808
 msgid "no starbases, you will be mercilessly tortured to death."
 msgstr "??? ??????????? ???????? ? ??????."
 
-#: src/finish.c:223
+#: src/sst.py:2810
 msgid "Your starship is now an expanding cloud of subatomic particles"
 msgstr "??? ????????? ???? ??????? ?????????? ??????"
 
-#: src/finish.c:226
+#: src/sst.py:2812
 msgid "Starbase was unable to re-materialize your starship."
 msgstr "???? ?? ?????? ??????????????? ??? ?????????."
 
-#: src/finish.c:227
+#: src/sst.py:2813
 msgid "Sic transit gloria mundi"
 msgstr ""
 
-#: src/finish.c:232
-msgid " has been cremated by its own phasers."
-msgstr " ?????? ???????????? ????????."
+#: src/sst.py:2815
+#, python-format
+msgid "The %s has been cremated by its own phasers."
+msgstr "%s ?????? ???????????? ????????."
 
-#: src/finish.c:235
+#: src/sst.py:2817
 msgid "You and your landing party have been"
 msgstr "?? ? ??? ?????"
 
-#: src/finish.c:236
+#: src/sst.py:2818
 msgid "converted to energy, disipating through space."
 msgstr "???????????? ? ???????, ???????????? ? ????????????."
 
-#: src/finish.c:239
+#: src/sst.py:2820
 msgid "You are left with your landing party on"
 msgstr "?? ? ??????? ???????? ??"
 
-#: src/finish.c:240
+#: src/sst.py:2821
 msgid "a wild jungle planet inhabited by primitive cannibals."
 msgstr "??????? ????? ????????, ?????????? ???????????? ?????????."
 
-#: src/finish.c:242
+#: src/sst.py:2823
 msgid "They are very fond of \"Captain Kirk\" soup."
 msgstr "?? ????? ?????????? \"???????????\" ???."
 
-#: src/finish.c:244 src/finish.c:270
-msgid "Without your leadership, the "
-msgstr "??? ?????? ???????????, "
+#: src/sst.py:2825 src/sst.py:2847
+#, python-format
+msgid "Without your leadership, the %s is destroyed."
+msgstr "??? ?????? ??????????? %s ?????."
 
-#: src/finish.c:246 src/finish.c:272
-msgid " is destroyed."
-msgstr " ?????????."
-
-#: src/finish.c:249
+#: src/sst.py:2827
 msgid "You and your mining party perish."
 msgstr "?? ? ??? ????? ??????."
 
-#: src/finish.c:255
+#: src/sst.py:2832
 msgid "The Galileo is instantly annihilated by the supernova."
 msgstr "??????? ????????? ????????? ?? ?????? ??????????."
 
-#: src/finish.c:258
+#: src/sst.py:2833 src/sst.py:2838
 msgid "You and your mining party are atomized."
 msgstr "?? ? ????? ??????? ????????? ?? ?????."
 
-#: src/finish.c:260
-msgid "Mr. Spock takes command of the "
-msgstr "?????? ???? ????????? ???????????? "
+#: src/sst.py:2835 src/sst.py:2840
+#, python-format
+msgid "Mr. Spock takes command of the %s and"
+msgstr "?????? ???? ????????? ???????????? ???????? %s ?"
 
-#: src/finish.c:262
-msgid " and"
-msgstr " ? "
-
-#: src/finish.c:263
-msgid "joins the Romulans, reigning terror on the Federation."
+#: src/sst.py:2836 src/sst.py:2841
+msgid "joins the Romulans, wreaking terror on the Federation."
 msgstr "?????????????? ? ?????????, ???????? ?????? ?????????."
 
-#: src/finish.c:266
+#: src/sst.py:2843
 msgid "The shuttle craft Galileo is also caught,"
 msgstr "?????? ??????? ???? ???????"
 
-#: src/finish.c:267
+#: src/sst.py:2844
 msgid "and breaks up under the strain."
 msgstr "? ?????????? ?? ????????."
 
-#: src/finish.c:269
+#: src/sst.py:2846
 msgid "Your debris is scattered for millions of miles."
 msgstr "???? ????? ??????????? ?? ???????? ????."
 
-#: src/finish.c:275
+#: src/sst.py:2849
 msgid "The mutants attack and kill Spock."
 msgstr "??????? ?????? ??????? ? ????? ?????."
 
-#: src/finish.c:276
+#: src/sst.py:2850
 msgid "Your ship is captured by Klingons, and"
 msgstr "??? ????????? ?????? ?????????? ?"
 
-#: src/finish.c:277
+#: src/sst.py:2851
 msgid "your crew is put on display in a Klingon zoo."
 msgstr "??? ?????? ????????? ?? ????? ? ????????."
 
-#: src/finish.c:280
+#: src/sst.py:2853
 msgid "Tribbles consume all remaining water,"
 msgstr "??????? ?????? ??? ?????????? ????,"
 
-#: src/finish.c:281
+#: src/sst.py:2854
 msgid "food, and oxygen on your ship."
 msgstr "???? ? ???????? ?? ???????."
 
-#: src/finish.c:283
+#: src/sst.py:2856
 msgid "You die of thirst, starvation, and asphyxiation."
 msgstr "?? ?????? ?? ?????, ?????? ? ??????."
 
-#: src/finish.c:287
+#: src/sst.py:2859
 msgid "Your ship is drawn to the center of the black hole."
 msgstr "??? ??????? ??????? ????? ? ????? ?????? ????."
 
-#: src/finish.c:288
+#: src/sst.py:2860
 msgid "You are crushed into extremely dense matter."
 msgstr "??? ?????????? ?? ????????? ????????????? ????????."
 
-#: src/finish.c:291
+#: src/sst.py:2862
 msgid "Your last crew member has died."
 msgstr "????????? ???? ????? ??????? ?????."
 
-#: src/finish.c:303
+#: src/sst.py:2872
 msgid "As a result of your actions, a treaty with the Klingon"
 msgstr "? ?????????? ????? ????????, ? ???????? ?????????"
 
-#: src/finish.c:304
+#: src/sst.py:2873
 msgid "Empire has been signed. The terms of the treaty are"
 msgstr "??????? ????????? ???????. ??????? ????? ????????"
 
-#: src/finish.c:306
+#: src/sst.py:2875
 msgid "favorable to the Federation."
 msgstr "??????? ??? ?????????."
 
-#: src/finish.c:308
+#: src/sst.py:2877
 msgid "Congratulations!"
 msgstr "???????????!"
 
-#: src/finish.c:311
+#: src/sst.py:2879
 msgid "highly unfavorable to the Federation."
 msgstr "?????? ?? ??????? ??? ?????????."
 
-#: src/finish.c:314
+#: src/sst.py:2881
 msgid "The Federation will be destroyed."
 msgstr "????????? ????????."
 
-#: src/finish.c:317
+#: src/sst.py:2883
 msgid "Since you took the last Klingon with you, you are a"
 msgstr "????????? ?? ??????? ?? ??? ???? ?????????? ????????, ?? ??????"
 
-#: src/finish.c:318
+#: src/sst.py:2884
 msgid "martyr and a hero. Someday maybe they'll erect a"
 msgstr "??????? ? ?????. ???????? ??????? ???? ????????"
 
-#: src/finish.c:319
+#: src/sst.py:2885
 msgid "statue in your memory. Rest in peace, and try not"
 msgstr "?????? ? ???? ?????. ????????? ? ????? ? ???????????? ??"
 
-#: src/finish.c:320
+#: src/sst.py:2886
 msgid "to think about pigeons."
 msgstr "?????? ? ???????."
 
-#: src/finish.c:354
+#: src/sst.py:2919
 msgid "Your score --"
 msgstr "??? ???? --"
 
-#: src/finish.c:356
-#, c-format
+#: src/sst.py:2921
+#, python-format
 msgid "%6d Romulans destroyed                 %5d"
 msgstr "%6d ??????? ??????????                 %5d"
 
-#: src/finish.c:359
-#, c-format
+#: src/sst.py:2924
+#, python-format
 msgid "%6d Romulans captured                  %5d"
 msgstr "%6d ??????? ?????????                  %5d"
 
-#: src/finish.c:362
-#, c-format
+#: src/sst.py:2927
+#, python-format
 msgid "%6d ordinary Klingons destroyed        %5d"
 msgstr "%6d ??????? ????????? ??????????        %5d"
 
-#: src/finish.c:365
-#, c-format
+#: src/sst.py:2930
+#, python-format
 msgid "%6d Klingon commanders destroyed       %5d"
 msgstr "%6d ????????????? ?????????? ??????????       %5d"
 
-#: src/finish.c:368
-#, c-format
+#: src/sst.py:2933
+#, python-format
 msgid "%6d Super-Commander destroyed          %5d"
 msgstr "%6d ????-????? ??????????          %5d"
 
-#: src/finish.c:371
-#, c-format
+#: src/sst.py:2936
+#, python-format
 msgid "%6.2f Klingons per stardate              %5d"
 msgstr "%6.2f ????????? ? ????              %5d"
 
-#: src/finish.c:374
-#, c-format
+#: src/sst.py:2939
+#, python-format
 msgid "%6d stars destroyed by your action     %5d"
 msgstr "%6d ????? ??????????     %5d"
 
-#: src/finish.c:377
-#, c-format
+#: src/sst.py:2942
+#, python-format
 msgid "%6d planets destroyed by your action   %5d"
 msgstr "%6d ?????? ??????????   %5d"
 
-#: src/finish.c:380
-#, c-format
+#: src/sst.py:2945
+#, python-format
 msgid "%6d inhabited planets destroyed by your action   %5d"
 msgstr "%6d ????????? ?????? ??????????   %5d"
 
-#: src/finish.c:383
-#, c-format
+#: src/sst.py:2948
+#, python-format
 msgid "%6d bases destroyed by your action     %5d"
 msgstr "%6d ??? ??????????     %5d"
 
-#: src/finish.c:386
-#, c-format
+#: src/sst.py:2951
+#, python-format
 msgid "%6d calls for help from starbase       %5d"
 msgstr "%6d ????????? ?? ??????? ? ????       %5d"
 
-#: src/finish.c:389
-#, c-format
+#: src/sst.py:2954
+#, python-format
 msgid "%6d casualties incurred                %5d"
 msgstr "%6d ??????? ??????????                %5d"
 
-#: src/finish.c:392
-#, c-format
+#: src/sst.py:2957
+#, python-format
 msgid "%6d crew abandoned in space            %5d"
 msgstr "%6d ??????? ???????? ? ???????        %5d"
 
-#: src/finish.c:395
-#, c-format
+#: src/sst.py:2960
+#, python-format
 msgid "%6d ship(s) lost or destroyed          %5d"
 msgstr "%6d ???????(??) ????????          %5d"
 
-#: src/finish.c:398
+#: src/sst.py:2963
 msgid "Penalty for getting yourself killed        -200"
 msgstr "???????? ?? ??????????? ??????        -200"
 
-#: src/finish.c:400
+#: src/sst.py:2965
 msgid "Bonus for winning "
 msgstr "??????? ?? ?????? ? "
 
-#: src/finish.c:403
+#: src/sst.py:2966
 msgid "Novice game  "
 msgstr "???? ???????  "
 
-#: src/finish.c:404
+#: src/sst.py:2967
 msgid "Fair game    "
 msgstr "???? ????????    "
 
-#: src/finish.c:405
+#: src/sst.py:2968
 msgid "Good game    "
 msgstr "???? ???????    "
 
-#: src/finish.c:406
+#: src/sst.py:2969
 msgid "Expert game  "
 msgstr "???? ???????????  "
 
-#: src/finish.c:407
+#: src/sst.py:2970
 msgid "Emeritus game"
 msgstr "???? ?????????? ????????"
 
-#: src/finish.c:412
-#, c-format
+#: src/sst.py:2973
+#, python-format
 msgid "TOTAL SCORE                               %5d"
 msgstr "????? ????                               %5d"
 
-#: src/finish.c:426
+#: src/sst.py:2979
 msgid "File or device name for your plaque: "
 msgstr "??? ????? ??? ?????????? ??? ???????: "
 
-#: src/finish.c:430
+#: src/sst.py:2985
 msgid "Invalid name."
 msgstr "???????????? ???."
 
-#: src/finish.c:434
+#: src/sst.py:2987
 msgid "Enter name to go on plaque (up to 30 characters): "
 msgstr "??????? ???? ??? ??? ??????? (?? 30 ??????): "
 
-#: src/finish.c:458
-#, c-format
+#: src/sst.py:3010
 msgid ""
 "                                                       U. S. S. ENTERPRISE\n"
 msgstr "                                                       ??????????\n"
 
-#: src/finish.c:460
-#, c-format
+#: src/sst.py:3012
 msgid ""
 "                                  For demonstrating outstanding ability as a "
 "starship captain\n"
 msgstr "                                  ?? ??????????? ???????\n"
 
-#: src/finish.c:462
-#, c-format
+#: src/sst.py:3014
 msgid ""
 "                                                Starfleet Command bestows to "
 "you\n"
@@ -1294,8 +1281,7 @@
 "                                                ???? ????????? ????? "
 "??????????? ???\n"
 
-#: src/finish.c:465
-#, c-format
+#: src/sst.py:3017
 msgid ""
 "                                                           the rank of\n"
 "\n"
@@ -1303,8 +1289,7 @@
 "                                                           ??????\n"
 "\n"
 
-#: src/finish.c:466
-#, c-format
+#: src/sst.py:3018
 msgid ""
 "                                                       \"Commodore Emeritus"
 "\"\n"
@@ -1314,8 +1299,7 @@
 "\"\n"
 "\n"
 
-#: src/finish.c:469
-#, c-format
+#: src/sst.py:3021
 msgid ""
 " Expert level\n"
 "\n"
@@ -1323,8 +1307,7 @@
 " ??????? ???????????\n"
 "\n"
 
-#: src/finish.c:470
-#, c-format
+#: src/sst.py:3023
 msgid ""
 "Emeritus level\n"
 "\n"
@@ -1332,8 +1315,7 @@
 "??????? ??????????\n"
 "\n"
 
-#: src/finish.c:471
-#, c-format
+#: src/sst.py:3025
 msgid ""
 " Cheat level\n"
 "\n"
@@ -1341,8 +1323,8 @@
 " ??????? ?????????\n"
 "\n"
 
-#: src/finish.c:475
-#, c-format
+#: src/sst.py:3027
+#, python-format
 msgid ""
 "                                                 This day of %.6s %.4s, "
 "%.8s\n"
@@ -1352,8 +1334,8 @@
 "%.8s\n"
 "\n"
 
-#: src/finish.c:477
-#, c-format
+#: src/sst.py:3029
+#, python-format
 msgid ""
 "                                                        Your score:  %d\n"
 "\n"
@@ -1361,1997 +1343,2020 @@
 "                                                        ??? ????:  %d\n"
 "\n"
 
-#: src/finish.c:478
-#, c-format
+#: src/sst.py:3030
+#, python-format
 msgid ""
 "                                                    Klingons per stardate:  "
 "%.2f\n"
 msgstr ""
 "                                                    ????????? ? ????:  %.2f\n"
 
-#: src/io.c:96
-msgid "[ANOUNCEMENT ARRIVING...]"
+#: src/sst.py:3090
+msgid "[ANNOUNCEMENT ARRIVING...]"
 msgstr "[????????? ?????????...]"
 
-#: src/io.c:98
-msgid "[IMPORTANT ANNOUNCEMENT ARRIVING -- PRESS ENTER TO CONTINUE]"
-msgstr "[????????? ?????? ????????? -- ??????? ???? ??? ???????????]"
-
-#: src/io.c:107
+#: src/sst.py:3095
 msgid "[CONTINUE?]"
 msgstr "[???????????]"
 
-#: src/io.c:109
+#: src/sst.py:3097
 msgid "[PRESS ENTER TO CONTINUE]"
 msgstr "[??????? ???? ??? ???????????]"
 
-#: src/io.c:400
-#, c-format
+#: src/sst.py:3273
+#, python-format
 msgid "Track for torpedo number %d-  "
-msgstr "?????? ??????? ????? %d- "
+msgstr "?????? ??????? ????? %d-  "
 
-#: src/io.c:404
+#: src/sst.py:3276
 msgid "Torpedo track- "
 msgstr "?????? ???????- "
 
-#: src/moving.c:19
-msgid "Helmsman Sulu- \"Leaving standard orbit.\""
-msgstr "??????? ????- \"?????? ? ??????.\""
-
-#: src/moving.c:107
+#: src/sst.py:3373
 msgid "YOU HAVE ATTEMPTED TO CROSS THE NEGATIVE ENERGY BARRIER"
 msgstr "?? ????????? ???????? ????????????? ?????????????? ??????"
 
-#: src/moving.c:108
+#: src/sst.py:3374
 msgid "AT THE EDGE OF THE GALAXY.  THE THIRD TIME YOU TRY THIS,"
 msgstr "?? ??????? ?????????.  ??? ???? ??? ??? ????????,"
 
-#: src/moving.c:109
+#: src/sst.py:3375
 msgid "YOU WILL BE DESTROYED."
 msgstr "? ??????? ?? ????."
 
-#: src/moving.c:119
-#, c-format
-msgid "Entering %s."
-msgstr "?????? ? %s."
+#: src/sst.py:3382
+#, python-format
+msgid "Entering Quadrant %s."
+msgstr "?????? ? ???????? %s."
 
-#: src/moving.c:148
-msgid " pulled into black hole at "
-msgstr " ??????? ? ?????? ???? ? "
+#: src/sst.py:3404
+#, python-format
+msgid " pulled into black hole at Sector %s"
+msgstr " ??????? ? ?????? ???? ? ??????? %s"
 
-#: src/moving.c:170
-msgid " encounters Tholian web at "
-msgstr " ????????? ?????????? ???? ? "
+#: src/sst.py:3423
+#, python-format
+msgid " encounters Tholian web at %s;"
+msgstr " ????????? ?????????? ???? ? %s;"
 
-#: src/moving.c:172
-msgid " blocked by object at "
-msgstr " ?????????? ???????? ? "
+#: src/sst.py:3425
+#, python-format
+msgid " blocked by object at %s;"
+msgstr " ?????????? ???????? ? %s;"
 
-#: src/moving.c:175
+#: src/sst.py:3426
 msgid "Emergency stop required "
 msgstr "?????????? ????????? ??????????? "
 
-#: src/moving.c:176
-#, c-format
+#: src/sst.py:3427
+#, python-format
 msgid "%2d units of energy."
 msgstr "%2d ?????? ???????."
 
-#: src/moving.c:220
+#: src/sst.py:3436
+msgid "Helmsman Sulu- \"Leaving standard orbit.\""
+msgstr "??????? ????- \"?????? ? ??????.\""
+
+#: src/sst.py:3478
 msgid "Already docked."
 msgstr "? ??? ??? ????????????."
 
-#: src/moving.c:224
+#: src/sst.py:3481
 msgid "You must first leave standard orbit."
 msgstr "??????? ?? ?????? ???? ? ??????."
 
-#: src/moving.c:229
+#: src/sst.py:3484
 msgid " not adjacent to base."
 msgstr " ??? ???????????? ????."
 
-#: src/moving.c:234
+#: src/sst.py:3488
 msgid "Docked."
 msgstr "????????????."
 
-#: src/moving.c:245
+#: src/sst.py:3499
 msgid "Lt. Uhura- \"Captain, an important message from the starbase:\""
 msgstr "??. ?????- \"???????, ??? ?????? ????????? ? ????:\""
 
-#: src/moving.c:277
+#: src/sst.py:3520
 msgid "Dummy! You can't leave standard orbit until you"
 msgstr "?????! ?? ?? ?????? ???? ? ?????? ???? ?? ??"
 
-#: src/moving.c:278
+#: src/sst.py:3521
 msgid "are back aboard the ship."
 msgstr "????????? ?? ???? ???????."
 
-#: src/moving.c:285
+#: src/sst.py:3527
 msgid "Computer damaged; manual navigation only"
 msgstr "????????? ??????; ?????? ?????? ?????????? ????????"
 
-#: src/moving.c:287
+#: src/sst.py:3529
 msgid "Computer damaged; manual movement only"
 msgstr "????????? ??????; ????????? ??????????? ???????"
 
-#: src/moving.c:302
+#: src/sst.py:3536
 msgid "Manual or automatic- "
 msgstr "?????? ??? ??????????????- "
 
-#: src/moving.c:325
+#: src/sst.py:3554
 msgid "(Manual navigation assumed.)"
 msgstr "(???????????? ?????? ??????????.)"
 
-#: src/moving.c:327
+#: src/sst.py:3556
 msgid "(Manual movement assumed.)"
 msgstr "(???????????? ?????? ?????????.)"
 
-#: src/moving.c:336
+#: src/sst.py:3563
 msgid "Target quadrant or quadrant&sector- "
 msgstr "???????? ?????????? ??? ????????&??????- "
 
-#: src/moving.c:338
+#: src/sst.py:3565
 msgid "Destination sector or quadrant&sector- "
 msgstr "?????? ?????????? ??? ????????&??????- "
 
-#: src/moving.c:392
-#, c-format
-msgid "Helmsman Sulu- \"Course locked in for %s.\""
-msgstr "??????? ????- \"???? ???? ?? %s.\""
+#: src/sst.py:3610
+#, python-format
+msgid "Helmsman Sulu- \"Course locked in for Sector %s.\""
+msgstr "??????? ????- \"???? ???? ?? ?????? %s.\""
 
-#: src/moving.c:397
+#: src/sst.py:3612
 msgid "Ensign Chekov- \"Course laid in, Captain.\""
 msgstr "????????? ?????- \"???? ????, ???????.\""
 
-#: src/moving.c:404
+#: src/sst.py:3618
 msgid "X and Y displacements- "
 msgstr "?????????? ?? X ? Y- "
 
-#: src/moving.c:429
+#: src/sst.py:3638
 msgid "Helmsman Sulu- \"Aye, Sir.\""
 msgstr "??????? ????- \"???, ???.\""
 
-#: src/moving.c:450 src/moving.c:514
+#: src/sst.py:3692
 msgid "Engineer Scott- \"The impulse engines are damaged, Sir.\""
 msgstr "??????? ?????- \"?????????? ????????? ??????????, ???.\""
 
-#: src/moving.c:466
+#: src/sst.py:3705
 msgid "First Officer Spock- \"Captain, the impulse engines"
 msgstr "?????? ?????? ????- \"???????, ?????????? ?????????"
 
-#: src/moving.c:467
+#: src/sst.py:3706
 msgid "require 20.0 units to engage, plus 100.0 units per"
 msgstr "??????? 20.0 ?????? ??????? ??? ???????, ???? 100.0 ?????? ??"
 
-#: src/moving.c:469
-#, c-format
+#: src/sst.py:3708
+#, python-format
 msgid "quadrant.  We can go, therefore, a maximum of %d"
 msgstr "????????.  ?????????????, ?? ???????? ???????? %d"
 
-#: src/moving.c:471
+#: src/sst.py:3710
 msgid " quadrants.\""
 msgstr " ??????????.\""
 
-#: src/moving.c:474
+#: src/sst.py:3712
 msgid "quadrant.  They are, therefore, useless.\""
 msgstr "????????.  ????? ??????? ??? ??????????.\""
 
-#: src/moving.c:482
+#: src/sst.py:3718
 msgid "First Officer Spock- \"Captain, our speed under impulse"
 msgstr "?????? ?????? ????- \"???????, ???? ???????? ?? ??????????"
 
-#: src/moving.c:483
+#: src/sst.py:3719
 msgid "power is only 0.95 sectors per stardate. Are you sure"
 msgstr "???? ????? 0.95 ???????? ? ????. ?? ???????,"
 
-#: src/moving.c:484
+#: src/sst.py:3720
 msgid "we dare spend the time?\" "
 msgstr "??? ?? ????? ??????? ??????? ????????\" "
 
-#: src/moving.c:520
+#: src/sst.py:3743
+msgid "Engineer Scott- \"The warp engines are damaged, Sir.\""
+msgstr "??????? ?????- \"?????????? ????????? ??????????, ???.\""
+
+#: src/sst.py:3748
 msgid "Engineer Scott- \"Sorry, Captain. Until this damage"
 msgstr "??????? ?????- \"????????, ???????. ???? ??? ????????????? ??"
 
-#: src/moving.c:521
+#: src/sst.py:3749
 msgid "  is repaired, I can only give you warp 4.\""
 msgstr "  ?????????, ? ???? ?????? ?????????? ??? ???????? 4.\""
 
-#: src/moving.c:542
+#: src/sst.py:3768
 msgid "We can't do it, Captain. We don't have enough energy."
 msgstr "?? ??????, ???????. ? ??? ?? ?????? ???????."
 
-#: src/moving.c:545
-#, c-format
+#: src/sst.py:3770
+#, python-format
 msgid "We don't have enough energy, but we could do it at warp %d"
 msgstr "? ??? ?? ?????????? ???????, ?? ?? ????? ?? ??????? ?? ??? ???????? %d"
 
-#: src/moving.c:548
+#: src/sst.py:3773
 msgid "if you'll lower the shields."
 msgstr ", ???? ?????? ?? ???????? ??????."
 
-#: src/moving.c:555
+#: src/sst.py:3777
 msgid "We haven't the energy to go that far with the shields up."
 msgstr "? ??? ??? ??????? ????? ?????? ??? ?????? ? ???????? ???????."
 
-#: src/moving.c:563
+#: src/sst.py:3783
 msgid "First Officer Spock- \"Captain, I compute that such"
 msgstr "?????? ?????? ????- \"???????, ? ?????? ??? ?????"
 
-#: src/moving.c:564
-#, c-format
+#: src/sst.py:3784
+#, python-format
 msgid "  a trip would require approximately %2.0f"
 msgstr "  ????? ????????? ???????? %2.0f"
 
-#: src/moving.c:566
+#: src/sst.py:3786
 msgid " percent of our"
 msgstr " ?????????"
 
-#: src/moving.c:567
+#: src/sst.py:3787
 msgid "  remaining time.  Are you sure this is wise?\" "
 msgstr " ??????????? ???????.  ?? ??????? ??? ??? ????????\" "
 
-#: src/moving.c:640
+#: src/sst.py:3834
 msgid "  Scott here.  The warp engines are damaged."
 msgstr "  ????? ?? ?????.  ??????????????????? ????????? ???????."
 
-#: src/moving.c:641
+#: src/sst.py:3835
 msgid "  We'll have to reduce speed to warp 4."
 msgstr "  ???????? ??????? ???????? ?? 4."
 
-#: src/moving.c:657
+#: src/sst.py:3846
 msgid "Warp factor- "
 msgstr "????????- "
 
-#: src/moving.c:665
+#: src/sst.py:3852
 msgid "Warp engines inoperative."
 msgstr "??????????????????? ????????? ?? ????????."
 
-#: src/moving.c:669
+#: src/sst.py:3855
 msgid "Engineer Scott- \"I'm doing my best, Captain,"
 msgstr "??????? ?????- \"? ????? ??? ??? ????, ???????,"
 
-#: src/moving.c:670
+#: src/sst.py:3856
 msgid "  but right now we can only go warp 4.\""
 msgstr "  ?? ?????? ?? ????? ???? ?????? ???????? 4.\""
 
-#: src/moving.c:674
+#: src/sst.py:3859
 msgid "Helmsman Sulu- \"Our top speed is warp 10, Captain.\""
 msgstr "????????? ????- \"???? ???????????? ???????? - 10, ???????.\""
 
-#: src/moving.c:678
+#: src/sst.py:3862
 msgid "Helmsman Sulu- \"We can't go below warp 1, Captain.\""
 msgstr "????????? ????- \"?? ?? ????? ?????????? ???????? ???? 1, ???????.\""
 
-#: src/moving.c:685
-#, c-format
+#: src/sst.py:3867
+#, python-format
 msgid "Helmsman Sulu- \"Warp factor %d, Captain.\""
 msgstr "????????? ????- \"???????? %d, ???????.\""
 
-#: src/moving.c:690
+#: src/sst.py:3871
 msgid "Engineer Scott- \"Aye, but our maximum safe speed is warp 6.\""
 msgstr "??????? ?????- \"???, ???? ?????????? ?????????? ???????? - 6.\""
 
-#: src/moving.c:694
+#: src/sst.py:3874
 msgid "Engineer Scott- \"Aye, Captain, we'll try it.\""
 msgstr "??????? ?????- \"??? ???????, ?????????.\""
 
-#: src/moving.c:697
+#: src/sst.py:3876
 msgid "Engineer Scott- \"Aye, Captain, but our engines may not take it.\""
 msgstr "??????? ?????- \"??? ???????, ?? ???? ?????? ????? ?? ??????????.\""
 
-#: src/moving.c:713
+#: src/sst.py:3887
 msgid "Scotty rushes to the transporter controls."
 msgstr "?????? ????????? ? ?????????? ?????????????."
 
-#: src/moving.c:715
+#: src/sst.py:3889
 msgid "But with the shields up it's hopeless."
 msgstr "?? ? ???????? ??????? ??? ??????????."
 
-#: src/moving.c:718
+#: src/sst.py:3891
 msgid "His desperate attempt to rescue you . . ."
 msgstr "??? ????????? ??????? ?????? ??? . . ."
 
-#: src/moving.c:720 src/moving.c:1047
+#: src/sst.py:3893 src/sst.py:4114
 msgid "fails."
 msgstr "???????????."
 
-#: src/moving.c:724
+#: src/sst.py:3896
 msgid "SUCCEEDS!"
 msgstr "?????????? ???????!"
 
-#: src/moving.c:727
+#: src/sst.py:3899
 msgid "The crystals mined were "
 msgstr "????????? ????????? "
 
-#: src/moving.c:729
+#: src/sst.py:3901
 msgid "lost."
 msgstr "???????."
 
-#: src/moving.c:732
+#: src/sst.py:3903
 msgid "saved."
 msgstr "???????."
 
-#: src/moving.c:754
-msgid " has stopped in a quadrant containing"
-msgstr " ??????????? ? ????????? ??"
+#: src/sst.py:3918
+#, python-format
+msgid "The %s has stopped in a quadrant containing"
+msgstr "%s ??????????? ? ????????? ??"
 
-#: src/moving.c:755
+#: src/sst.py:3919
 msgid "   a supernova."
 msgstr "   ??????????."
 
-#: src/moving.c:758
+#: src/sst.py:3921
 msgid "***Emergency automatic override attempts to hurl "
 msgstr "***????????? ???????? ??????? "
 
-#: src/moving.c:761
+#: src/sst.py:3922
 msgid "safely out of quadrant."
 msgstr "?? ?????????."
 
-#: src/moving.c:767
+#: src/sst.py:3928
 msgid "Warp engines damaged."
 msgstr "??????????????????? ????????? ??????????."
 
-#: src/moving.c:773
-#, c-format
+#: src/sst.py:3932
+#, python-format
 msgid "Warp factor set to %d"
 msgstr "???????? ??????????? ?? %d"
 
-#: src/moving.c:789
+#: src/sst.py:3946
 msgid "Insufficient energy to leave quadrant."
 msgstr "???????????? ??????? ????? ???????? ????????."
 
-#: src/moving.c:805
+#: src/sst.py:3957
 msgid "***TIME WARP ENTERED."
 msgstr "***??????????? ?????????? ??????????."
 
-#: src/moving.c:808
-#, c-format
+#: src/sst.py:3960
+#, python-format
 msgid "You are traveling backwards in time %d stardates."
 msgstr "?? ????????????? ????? ?? ??????? ?? %d ????."
 
-#: src/moving.c:834
-msgid "Checkov-  \"Security reports the Galileo has disappeared, Sir!"
+#: src/sst.py:3984
+msgid "Chekov-  \"Security reports the Galileo has disappeared, Sir!"
 msgstr "?????- \"?????? ??????????? ? ??????? ???????, ???!"
 
-#: src/moving.c:842
-msgid "Checkov-  \"Security reports the Galileo has reappeared in the dock!\""
+#: src/sst.py:3989
+msgid "Chekov-  \"Security reports the Galileo has reappeared in the dock!\""
 msgstr "?????- \"?????? ?????????? ? ????????? ??????? ? ????!\""
 
-#: src/moving.c:849
+#: src/sst.py:3993
 msgid "Spock has reconstructed a correct star chart from memory"
 msgstr "???? ??????????? ???????? ????? ?? ??????"
 
-#: src/moving.c:854
-#, c-format
+#: src/sst.py:3997
+#, python-format
 msgid "You are traveling forward in time %d stardates."
 msgstr "?? ????????????? ?????? ?? ??????? ?? %d ????."
 
-#: src/moving.c:873
+#: src/sst.py:4011
 msgid "Engineer Scott- \"We have no more deep space probes, Sir.\""
 msgstr ""
 "??????? ?????- \"? ??? ?????? ??? ???????????? ??????????? ?????, ???.\""
 
-#: src/moving.c:875
+#: src/sst.py:4013
 msgid "Ye Faerie Queene has no deep space probes."
 msgstr "?? ????????? ???????? ??? ???????????? ??????????? ?????."
 
-#: src/moving.c:881
+#: src/sst.py:4018
 msgid "Engineer Scott- \"The probe launcher is damaged, Sir.\""
 msgstr "??????? ?????- \"???????? ??????? ??????, ???.\""
 
-#: src/moving.c:888
+#: src/sst.py:4024
 msgid "Spock-  \"Records show the previous probe has not yet"
 msgstr "?????- \"??????? ? ?????????? ?????? ??????? ? ???, ??? ??? ??? ??"
 
-#: src/moving.c:889
+#: src/sst.py:4025
 msgid "   reached its destination.\""
 msgstr "   ???????? ?????? ??????????.\""
 
-#: src/moving.c:892
+#: src/sst.py:4027
 msgid "Uhura- \"The previous probe is still reporting data, Sir.\""
 msgstr "?????- \"?????????? ?????? ??? ??? ???????? ???????, ???.\""
 
-#: src/moving.c:899
-#, c-format
-msgid "%d probe left."
-msgstr "???????? %d ??????."
+#: src/sst.py:4032
+msgid "1 probe left."
+msgstr "???????? 1 ??????."
 
-#: src/moving.c:899
-#, c-format
-msgid "%d probes left."
-msgstr "???????? %d ?????."
+#: src/sst.py:4034
+#, python-format
+msgid "%d probes left"
+msgstr "???????? %d ?????"
 
-#: src/moving.c:900
+#: src/sst.py:4035
 msgid "Are you sure you want to fire a probe? "
 msgstr "?? ???????, ??? ?????? ????????? ??????? "
 
-#: src/moving.c:911
+#: src/sst.py:4043
 msgid "Arm NOVAMAX warhead? "
 msgstr "????????? ??????? ???????????? "
 
-#: src/moving.c:933
+#: src/sst.py:4053
 msgid "Ensign Chekov-  \"The deep space probe is launched, Captain.\""
 msgstr ""
 "????????? ?????- \"???????????? ??????????? ?????? ????????, ???????.\""
 
-#: src/moving.c:968
+#: src/sst.py:4063
 msgid "Lt. Uhura-  \"But Captain, we're already docked.\""
 msgstr "??. ?????- \"?? ???????, ?? ???? ??? ???????????????.\""
 
-#: src/moving.c:972
+#: src/sst.py:4066
 msgid "Subspace radio damaged."
 msgstr "??????????????????? ????? ??????????."
 
-#: src/moving.c:976
+#: src/sst.py:4069
 msgid "Lt. Uhura-  \"Captain, I'm not getting any response from Starbase.\""
 msgstr "??. ?????- \"???????, ? ?? ??????? ??????? ???????? ?? ????.\""
 
-#: src/moving.c:980
-msgid "You must be aboard the "
-msgstr "?? ?????? ???? ?? ????? ??????? "
+#: src/sst.py:4072
+#, python-format
+msgid "You must be aboard the %s."
+msgstr "?? ?????? ???? ?? ????? ??????? %s."
 
-#: src/moving.c:1006
-#, c-format
-msgid "Starbase in %s responds--"
-msgstr "???? ?? %s ????????????--"
+#: src/sst.py:4090
+#, python-format
+msgid "Starbase in Quadrant %s responds--%s dematerializes"
+msgstr "???? ?? ????????? %s ????????????--%s ????????????????"
 
-#: src/moving.c:1008
-msgid " dematerializes."
-msgstr " ??????????????????."
-
-#: src/moving.c:1021
+#: src/sst.py:4100
 msgid "You have been lost in space..."
 msgstr "?? ??????? ? ??????????? ???????..."
 
-#: src/moving.c:1029
+#: src/sst.py:4106
 msgid "1st"
 msgstr "1-??"
 
-#: src/moving.c:1030
+#: src/sst.py:4107
 msgid "2nd"
 msgstr "2-??"
 
-#: src/moving.c:1031
+#: src/sst.py:4108
 msgid "3rd"
 msgstr "3-?"
 
-#: src/moving.c:1033
+#: src/sst.py:4109
 msgid " attempt to re-materialize "
 msgstr " ??????? ?????????????? "
 
-#: src/moving.c:1061
+#: src/sst.py:4124
 msgid "succeeds."
 msgstr "?????????? ???????."
 
-#: src/moving.c:1065
+#: src/sst.py:4127
 msgid "Lt. Uhura-  \"Captain, we made it!\""
 msgstr "??. ?????- \"???????, ?????????!\""
 
-#: src/moving.c:1098
+#: src/sst.py:4134
 msgid "You cannot abandon Ye Faerie Queene."
 msgstr "?? ?? ?????? ???????? ????????? ????????."
 
-#: src/moving.c:1105
+#: src/sst.py:4139
 msgid "Ye Faerie Queene has no shuttle craft."
 msgstr "?? ????????? ???????? ??? ???????."
 
-#: src/moving.c:1109
+#: src/sst.py:4142
 msgid "Shuttle craft now serving Big Macs."
 msgstr "?????? ???????????? ??? ???????? ??? ?????."
 
-#: src/moving.c:1113
+#: src/sst.py:4145
 msgid "Shuttle craft damaged."
 msgstr "?????? ?????????."
 
-#: src/moving.c:1117
+#: src/sst.py:4148
 msgid "You must be aboard the ship."
 msgstr "?? ?????? ???? ?? ????? ???????."
 
-#: src/moving.c:1121 src/planets.c:330
+#: src/sst.py:4151 src/sst.py:4500
 msgid "Shuttle craft not currently available."
 msgstr "?????? ?????? ??????????."
 
-#: src/moving.c:1126
+#: src/sst.py:4155
 msgid "***ABANDON SHIP!  ABANDON SHIP!"
 msgstr "***???????? ???????!  ???????? ???????!"
 
-#: src/moving.c:1128
+#: src/sst.py:4157
 msgid "***ALL HANDS ABANDON SHIP!"
 msgstr "***????? ????????? ???????? ???????!"
 
-#: src/moving.c:1130
+#: src/sst.py:4159
 msgid "Captain and crew escape in shuttle craft."
 msgstr "??????? ? ???????? ?????? ?? ???????."
 
-#: src/moving.c:1139
+#: src/sst.py:4167
 msgid "Remainder of ship's complement beam down"
 msgstr "??????? ??????? ?????????????????"
 
-#: src/moving.c:1140
+#: src/sst.py:4168
 msgid "to nearest habitable planet."
 msgstr "?? ????????? ????????? ??? ????? ???????."
 
-#: src/moving.c:1142
-#, c-format
+#: src/sst.py:4170
+#, python-format
 msgid "Remainder of ship's complement beam down to %s."
 msgstr "??????? ??????? ????????????????? ?? %s."
 
-#: src/moving.c:1145
-#, c-format
+#: src/sst.py:4173
+#, python-format
 msgid "Entire crew of %d left to die in outer space."
 msgstr "???? ?????? ? ??????? %d ??????? ??????? ???????? ? ???????? ???????."
 
-#: src/moving.c:1155
+#: src/sst.py:4181
 msgid "You are captured by Klingons and released to"
 msgstr "???????? ??????? ??? ? ????????"
 
-#: src/moving.c:1156
+#: src/sst.py:4182
 msgid "the Federation in a prisoner-of-war exchange."
 msgstr "????????? ??? ?????? ??????????????."
 
-#: src/moving.c:1183
+#: src/sst.py:4205
 msgid "Starfleet puts you in command of another ship,"
 msgstr "???????? ???? ??????? ??? ???????????? ??? ????? ????????,"
 
-#: src/moving.c:1184
+#: src/sst.py:4206
 msgid "the Faerie Queene, which is antiquated but,"
 msgstr "????????? ????????, ??????? ??????? ???????, ??"
 
-#: src/moving.c:1185
+#: src/sst.py:4207
 msgid "still useable."
 msgstr "??? ??? ????????."
 
-#: src/moving.c:1187
+#: src/sst.py:4209
 msgid "The dilithium crystals have been moved."
 msgstr "????????? ??????? ????? ? ?????."
 
-#: src/planets.c:22
+#: src/sst.py:4240
 msgid "Spock-  \"Planet report follows, Captain.\""
 msgstr "????- \"??? ?????????? ? ???????, ???????.\""
 
-#: src/planets.c:34
+#: src/sst.py:4251
+#, python-format
+msgid "Quadrant %s"
+msgstr "???????? %s"
+
+#: src/sst.py:4252
 msgid "   class "
 msgstr "   ????? "
 
-#: src/planets.c:38
+#: src/sst.py:4256
 msgid "no "
 msgstr "??????????? "
 
-#: src/planets.c:39
+#: src/sst.py:4257
 msgid "dilithium crystals present."
 msgstr "???????? ?????????? ???????."
 
-#: src/planets.c:41
+#: src/sst.py:4259
 msgid "    Shuttle Craft Galileo on surface."
 msgstr "    ?????? ??????? ?? ???????????."
 
-#: src/planets.c:45
+#: src/sst.py:4261
 msgid "No information available."
 msgstr "??? ??????????."
 
-#: src/planets.c:54
+#: src/sst.py:4268
 msgid "Already in standard orbit."
 msgstr "? ??? ??? ?? ??????."
 
-#: src/planets.c:58
+#: src/sst.py:4271
 msgid "Both warp and impulse engines damaged."
 msgstr "??????????????????? ????????? ???????, ????? ??? ? ??????????."
 
-#: src/planets.c:63
+#: src/sst.py:4277
 msgid " not adjacent to planet."
 msgstr " ??????? ?????? ?? ???????."
 
-#: src/planets.c:68
+#: src/sst.py:4281
 msgid "Helmsman Sulu-  \"Entering standard orbit, Sir.\""
 msgstr "??????? ????- \"??????? ?? ??????, ???.\""
 
-#: src/planets.c:73
-#, c-format
+#: src/sst.py:4286
+#, python-format
 msgid "Sulu-  \"Entered orbit at altitude %.2f kilometers.\""
 msgstr "????- \"????? ?? ?????? ?? ?????? %.2f ??????????.\""
 
-#: src/planets.c:82
+#: src/sst.py:4294
 msgid "Short range sensors damaged."
 msgstr "??????? ???????? ?????? ???????."
 
-#: src/planets.c:86
+#: src/sst.py:4298
 msgid "Spock- \"No planet in this quadrant, Captain.\""
 msgstr "????- \"? ???? ????????? ??? ??????, ???????.\""
 
-#: src/planets.c:90
-#, c-format
-msgid "Spock-  \"Sensor scan for %s-"
-msgstr "????- \"???????????? %s-"
+#: src/sst.py:4301
+#, python-format
+msgid "Spock-  \"Sensor scan for Quadrant %s-"
+msgstr "????- \"???????????? ????????? %s-"
 
-#: src/planets.c:92
-#, c-format
-msgid "         Planet at %s is of class %s."
-msgstr "         ??????? ?? %s ?????? %s."
+#: src/sst.py:4303
+#, python-format
+msgid "         Planet at Sector %s is of class %s."
+msgstr "         ??????? ? ??????? %s ?????? %s."
 
-#: src/planets.c:96
+#: src/sst.py:4306
 msgid "         Sensors show Galileo still on surface."
 msgstr "         ??????? ??????????, ??? ??????? ??? ??? ?? ???????????."
 
-#: src/planets.c:97
+#: src/sst.py:4307
 msgid "         Readings indicate"
 msgstr "         ????????????"
 
-#: src/planets.c:99
+#: src/sst.py:4309
 msgid " no"
 msgstr " ??"
 
-#: src/planets.c:100
+#: src/sst.py:4310
 msgid " dilithium crystals present.\""
 msgstr " ?????????? ???????? ?????????? ???????."
 
-#: src/planets.c:113
+#: src/sst.py:4314
+#, python-format
+msgid "Spock-  \"The inhabited planet %s "
+msgstr ""
+
+#: src/sst.py:4315
+#, python-format
+msgid "        is located at Sector %s, Captain.\""
+msgstr ""
+
+#: src/sst.py:4323
 msgid "Transporter damaged."
 msgstr "??????????? ?? ????????."
 
-#: src/planets.c:116
+#: src/sst.py:4326
 msgid "Spock-  \"May I suggest the shuttle craft, Sir?\" "
 msgstr "????- \"???? ? ???????????? ??????, ????\""
 
-#: src/planets.c:124 src/planets.c:326
+#: src/sst.py:4331 src/sst.py:4497
 msgid " not in standard orbit."
 msgstr " ?? ?? ??????."
 
-#: src/planets.c:128
+#: src/sst.py:4334
 msgid "Impossible to transport through shields."
 msgstr "?????????? ???????????????? ????? ???????? ????."
 
-#: src/planets.c:132 src/planets.c:342
+#: src/sst.py:4337 src/sst.py:4509
 msgid "Spock-  \"Captain, we have no information on this planet"
 msgstr "????- \"???????, ? ??? ??? ?????????? ?? ???? ???????"
 
-#: src/planets.c:133 src/planets.c:343
+#: src/sst.py:4338 src/sst.py:4510
 msgid "  and Starfleet Regulations clearly state that in this situation"
 msgstr " ? ?????????? ????????? ????? ????? ???????????? ? ????? ????????"
 
-#: src/planets.c:134
+#: src/sst.py:4339
 msgid "  you may not go down.\""
 msgstr " ?? ?????????? ?? ???????????.\""
 
-#: src/planets.c:138
+#: src/sst.py:4342
 msgid "Spock-  \"Captain, I fail to see the logic in"
 msgstr "????- \"???????, ? ?? ???? ??????"
 
-#: src/planets.c:139
+#: src/sst.py:4343
 msgid "  exploring a planet with no dilithium crystals."
 msgstr "  ??????????? ???????, ?? ??????? ??? ?????????? ???????."
 
-#: src/planets.c:140 src/planets.c:159 src/planets.c:272
+#: src/sst.py:4344 src/sst.py:4360 src/sst.py:4450
 msgid "  Are you sure this is wise?\" "
 msgstr "  ?? ??????? ??? ??? ????????\" "
 
-#: src/planets.c:150
+#: src/sst.py:4352
 msgid "  Captain, we don't have enough energy for transportation."
 msgstr "  ???????, ??? ??????????????? ???????????? ???????."
 
-#: src/planets.c:155
+#: src/sst.py:4356
 msgid "  Captain, we have enough energy only to transport you down to"
 msgstr "  ???????, ? ??? ?????? ??????? ?????? ??? ??????????????? ??"
 
-#: src/planets.c:156
+#: src/sst.py:4357
 msgid "  the planet, but there wouldn't be an energy for the trip back."
 msgstr "  ???????, ?? ?? ???????? ???? ?????? ?? ?????????."
 
-#: src/planets.c:158
+#: src/sst.py:4359
 msgid "  Although the Galileo shuttle craft may still be on a surface."
 msgstr "  ???? ?????? ??????? ????? ???? ??? ??? ?? ???????????."
 
-#: src/planets.c:169
+#: src/sst.py:4367
 msgid "Spock-  \"Wouldn't you rather take the Galileo?\" "
 msgstr "????- \"????? ?? ??? ?? ??????????? ????????\""
 
-#: src/planets.c:174
+#: src/sst.py:4371
 msgid "Your crew hides the Galileo to prevent capture by aliens."
 msgstr "???? ??????? ?????? ???????, ????? ?? ?? ???????? ?????????????."
 
-#: src/planets.c:176
+#: src/sst.py:4372
 msgid "Landing party assembled, ready to beam up."
 msgstr "????????? ????? ??????, ?????? ? ????????????."
 
-#: src/planets.c:178
+#: src/sst.py:4374
 msgid "Kirk whips out communicator..."
 msgstr "???? ??????? ????????????..."
 
-#: src/planets.c:179
+#: src/sst.py:4375
 msgid "BEEP  BEEP  BEEP"
 msgstr "???  ???  ???"
 
-#: src/planets.c:181
+#: src/sst.py:4377
 msgid "\"Kirk to enterprise-  Lock on coordinates...energize.\""
 msgstr "\"???? ???????????- ?????????? ??????????...???????.\""
 
-#: src/planets.c:185
+#: src/sst.py:4380
 msgid "Scotty-  \"Transporter room ready, Sir.\""
 msgstr "??????- \"??????????? ?????, ???.\""
 
-#: src/planets.c:187
+#: src/sst.py:4382
 msgid "Kirk and landing party prepare to beam down to planet surface."
 msgstr "???? ? ????????? ????? ????????? ? ???????????? ?? ???????."
 
-#: src/planets.c:189
+#: src/sst.py:4384
 msgid "Kirk-  \"Energize.\""
 msgstr "????- \"???????.\""
 
-#: src/planets.c:198
+#: src/sst.py:4392
 msgid "Scotty-  \"Oh my God!  I've lost them.\""
 msgstr "??????- \"? ???!  ? ?? ???????.\""
 
-#: src/planets.c:206
+#: src/sst.py:4399
 msgid "Transport complete."
 msgstr "??????????????? ?????????."
 
-#: src/planets.c:208
+#: src/sst.py:4401
 msgid "The shuttle craft Galileo is here!"
 msgstr "????? ?????? ???????!"
 
-#: src/planets.c:224
+#: src/sst.py:4413
 msgid "Mining party not on planet."
 msgstr "?????????? ?? ??????? ???."
 
-#: src/planets.c:228
+#: src/sst.py:4416
 msgid "This planet has already been strip-mined for dilithium."
 msgstr "??? ??????? ??? ???????? ?? ?????; ??????? ??? ?????? ???."
 
-#: src/planets.c:232
+#: src/sst.py:4419
 msgid "No dilithium crystals on this planet."
 msgstr "?? ???? ??????? ??????? ???."
 
-#: src/planets.c:236
+#: src/sst.py:4422
 msgid "You've already mined enough crystals for this trip."
 msgstr "?? ??????? ??? ?????????? ?????????? ?? ??? ???????."
 
-#: src/planets.c:240
+#: src/sst.py:4425
 msgid "With all those fresh crystals aboard the "
 msgstr "? ??? ??? ????? ?????????? ?? ?????, ???"
 
-#: src/planets.c:243
+#: src/sst.py:4426
 msgid "there's no reason to mine more at this time."
 msgstr "??? ?????? ???????? ???."
 
-#: src/planets.c:249
+#: src/sst.py:4431
 msgid "Mining operation complete."
 msgstr "?????? ?????????? ?????????."
 
-#: src/planets.c:261
+#: src/sst.py:4441
 msgid "No dilithium crystals available."
 msgstr "??? ?????????? ???????."
 
-#: src/planets.c:265
+#: src/sst.py:4444
 msgid "Spock-  \"Captain, Starfleet Regulations prohibit such an operation"
 msgstr "????- \"???????, ?????????? ????????? ????? ????????? ??? ????????,"
 
-#: src/planets.c:266
+#: src/sst.py:4445
 msgid "  except when Condition Yellow exists."
 msgstr " ????? ??????? ??????? ?????????."
 
-#: src/planets.c:269
+#: src/sst.py:4447
 msgid "Spock- \"Captain, I must warn you that loading"
 msgstr "????- \"???????, ? ?????? ???????????? ???, ??? ??????"
 
-#: src/planets.c:270
+#: src/sst.py:4448
 msgid "  raw dilithium crystals into the ship's power"
 msgstr " ?????????????? ????????? ??????? ? ??????????????"
 
-#: src/planets.c:271
+#: src/sst.py:4449
 msgid "  system may risk a severe explosion."
 msgstr " ??????? ??????? ??????, ? ????? ???????? ? ???????? ??????."
 
-#: src/planets.c:278
+#: src/sst.py:4455
 msgid "Engineering Officer Scott-  \"(GULP) Aye Sir."
 msgstr "???????-??????? ?????- \"(?????? ??????) ??? ???."
 
-#: src/planets.c:279
+#: src/sst.py:4456
 msgid "  Mr. Spock and I will try it.\""
 msgstr "  ?? ? ???????? ?????? ?????????.\""
 
-#: src/planets.c:281
+#: src/sst.py:4458
 msgid "Spock-  \"Crystals in place, Sir."
 msgstr "????- \"????????? ?? ?????, ???."
 
-#: src/planets.c:282
+#: src/sst.py:4459
 msgid "  Ready to activate circuit.\""
 msgstr "  ????? ???????? ????.\""
 
-#: src/planets.c:284
+#: src/sst.py:4461
 msgid "Scotty-  \"Keep your fingers crossed, Sir!\""
 msgstr "??????-  \"????????? ??????, ???!\""
 
-#: src/planets.c:287
+#: src/sst.py:4464
 msgid "  \"Activating now! - - No good!  It's***"
 msgstr "  \"??? ????????! - - ?????!  ??***"
 
-#: src/planets.c:289 src/planets.c:496
+#: src/sst.py:4466 src/sst.py:4642
 msgid "***RED ALERT!  RED A*L********************************"
 msgstr "***???????! ???*??***********************************"
 
-#: src/planets.c:292 src/planets.c:499
+#: src/sst.py:4469 src/sst.py:4645
 msgid "******************   KA-BOOM!!!!   *******************"
 msgstr "******************   ??-???!!!!    ********************"
 
-#: src/planets.c:298
+#: src/sst.py:4474
 msgid "  \"Activating now! - - "
 msgstr "  \"??? ????????! - - "
 
-#: src/planets.c:299
+#: src/sst.py:4475
 msgid "The instruments"
 msgstr "????????"
 
-#: src/planets.c:300
+#: src/sst.py:4476
 msgid "   are going crazy, but I think it's"
 msgstr "   ????? ? ???, ?? ? ?????, ??? ???"
 
-#: src/planets.c:301
+#: src/sst.py:4477
 msgid "   going to work!!  Congratulations, Sir!\""
 msgstr "   ?????? ????????!!  ??????????, ???!\""
 
-#: src/planets.c:314
+#: src/sst.py:4488
 msgid "Ye Faerie Queene has no shuttle craft bay to dock it at."
 msgstr "?? ????????? ???????? ??? ?????? ??? ???????? ? ????????."
 
-#: src/planets.c:316
+#: src/sst.py:4490
 msgid "Ye Faerie Queene had no shuttle craft."
 msgstr "?? ????????? ???????? ??? ???????."
 
-#: src/planets.c:319
+#: src/sst.py:4492
 msgid "The Galileo is damaged."
 msgstr "??????? ?????????."
 
-#: src/planets.c:321
+#: src/sst.py:4494
 msgid "Shuttle craft is now serving Big Macs."
 msgstr "?????? ???????????? ??? ???????? ??? ?????."
 
-#: src/planets.c:334
+#: src/sst.py:4503
 msgid "You will have to beam down to retrieve the shuttle craft."
 msgstr "??? ???????? ?????????? ?? ??????????? ????? ??????? ??????."
 
-#: src/planets.c:338
+#: src/sst.py:4506
 msgid "Shuttle craft cannot pass through shields."
 msgstr "?????? ?? ????? ????????? ????? ??????."
 
-#: src/planets.c:344
+#: src/sst.py:4511
 msgid "  you may not fly down.\""
 msgstr " ??? ?? ??????? ??????? ????.\""
 
-#: src/planets.c:349
+#: src/sst.py:4515
 msgid "First Officer Spock-  \"Captain, I compute that such"
 msgstr "?????? ?????? ????- \"???????, ? ?????? ??? ?????"
 
-#: src/planets.c:350
-#, c-format
+#: src/sst.py:4516
+#, python-format
 msgid "  a maneuver would require approximately %2d%% of our"
 msgstr "  ?????? ????????? ???????? %2d%%"
 
-#: src/planets.c:352
+#: src/sst.py:4518
 msgid "remaining time."
 msgstr "??????????? ???????."
 
-#: src/planets.c:353
+#: src/sst.py:4519
 msgid "Are you sure this is wise?\" "
 msgstr "?? ??????? ??? ??? ????????\" "
 
-#: src/planets.c:364
+#: src/sst.py:4528
 msgid "Spock-  \"Would you rather use the transporter?\" "
 msgstr "????- \"?? ????? ?? ??? ??????????????? ??????????????\" "
 
-#: src/planets.c:369
+#: src/sst.py:4532
 msgid "Shuttle crew"
 msgstr "?????? ???????"
 
-#: src/planets.c:372
+#: src/sst.py:4534
 msgid "Rescue party"
 msgstr "???????????? ???????"
 
-#: src/planets.c:373
+#: src/sst.py:4535
 msgid " boards Galileo and swoops toward planet surface."
 msgstr " ??????? ? ??????? ? ???????????? ? ??????????? ???????."
 
-#: src/planets.c:379 src/planets.c:402 src/planets.c:421
+#: src/sst.py:4541 src/sst.py:4562 src/sst.py:4578
 msgid "Trip complete."
 msgstr "????? ???????."
 
-#: src/planets.c:384
+#: src/sst.py:4545
 msgid "You and your mining party board the"
 msgstr "?? ? ??? ????? ??????? ?"
 
-#: src/planets.c:385
+#: src/sst.py:4546
 msgid "shuttle craft for the trip back to the Enterprise."
 msgstr "?????? ????? ?????? ?? ??????????."
 
-#: src/planets.c:387
+#: src/sst.py:4548
 msgid "The short hop begins . . ."
 msgstr "??????? ???????? ??????? . . ."
 
-#: src/planets.c:409
+#: src/sst.py:4566
 msgid "Mining party assembles in the hangar deck,"
 msgstr "?????? ?????????? ????????? ? ??????,"
 
-#: src/planets.c:410
+#: src/sst.py:4567
 msgid "ready to board the shuttle craft \"Galileo\"."
 msgstr "??? ?????? ??????? ? ?????? \"???????\"."
 
-#: src/planets.c:412
+#: src/sst.py:4569
 msgid "The hangar doors open; the trip begins."
 msgstr "????? ?????? ???????; ????? ???????."
 
-#: src/planets.c:435
+#: src/sst.py:4587
 msgid "Ye Faerie Queene has no death ray."
 msgstr "?? ????????? ???????? ??? ???? ??????."
 
-#: src/planets.c:439
+#: src/sst.py:4590
 msgid "Sulu-  \"But Sir, there are no enemies in this quadrant.\""
 msgstr "????- \"?? ???, ? ???? ????????? ??? ??????.\""
 
-#: src/planets.c:443
+#: src/sst.py:4593
 msgid "Death Ray is damaged."
 msgstr "??? ?????? ?????????."
 
-#: src/planets.c:446
+#: src/sst.py:4595
 msgid "Spock-  \"Captain, the 'Experimental Death Ray'"
 msgstr "????- \"???????, '????????????????? ??? ??????'"
 
-#: src/planets.c:447
+#: src/sst.py:4596
 msgid "  is highly unpredictible.  Considering the alternatives,"
 msgstr "  ???????? ?????????????.  ??????? ??? ????????????,"
 
-#: src/planets.c:448
+#: src/sst.py:4597
 msgid "  are you sure this is wise?\" "
 msgstr " ?? ??????? ??? ??? ????????\" "
 
-#: src/planets.c:451
+#: src/sst.py:4600
 msgid "Spock-  \"Acknowledged.\""
 msgstr "????- \"??? ?????.\""
 
-#: src/planets.c:454
+#: src/sst.py:4603
 msgid "WHOOEE ... WHOOEE ... WHOOEE ... WHOOEE"
 msgstr ""
 
-#: src/planets.c:456
+#: src/sst.py:4605
 msgid "Crew scrambles in emergency preparation."
 msgstr "??????? ???????????, ???????? ??????? ?????????????."
 
-#: src/planets.c:457
+#: src/sst.py:4606
 msgid "Spock and Scotty ready the death ray and"
 msgstr "???? ? ?????? ???????? ??? ?????? ?"
 
-#: src/planets.c:458
+#: src/sst.py:4607
 msgid "prepare to channel all ship's power to the device."
 msgstr "?????? ? ?????? ???? ??????? ??????? ?? ?????????."
 
-#: src/planets.c:460
+#: src/sst.py:4609
 msgid "Spock-  \"Preparations complete, sir.\""
 msgstr "????- \"????????????? ????????, ???.\""
 
-#: src/planets.c:461
+#: src/sst.py:4610
 msgid "Kirk-  \"Engage!\""
 msgstr "????- \"???!\""
 
-#: src/planets.c:463
+#: src/sst.py:4612
 msgid "WHIRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"
 msgstr ""
 
-#: src/planets.c:469 src/planets.c:490
+#: src/sst.py:4619 src/sst.py:4636
 msgid "Sulu- \"Captain!  It's working!\""
 msgstr "????- \"???????!  ?? ????????!\""
 
-#: src/planets.c:473
+#: src/sst.py:4623
 msgid "Ensign Chekov-  \"Congratulations, Captain!\""
 msgstr "????????? ?????- \"??????????, ???????.\""
 
-#: src/planets.c:477
+#: src/sst.py:4627
 msgid "Spock-  \"Captain, I believe the `Experimental Death Ray'"
 msgstr "????- \"???????, ? ????????, ??? '????????????????? ??? ??????'"
 
-#: src/planets.c:479
+#: src/sst.py:4629
 msgid "   is still operational.\""
 msgstr "   ??? ??? ????????.\""
 
-#: src/planets.c:482
+#: src/sst.py:4631
 msgid "   has been rendered nonfunctional.\""
 msgstr "   ?????? ? ??????????.\""
 
-#: src/planets.c:494
+#: src/sst.py:4640
 msgid "***MATTER-ANTIMATTER IMPLOSION IMMINENT!"
 msgstr "***???????? ??????? ??????? ? ????????????!"
 
-#: src/planets.c:505
+#: src/sst.py:4650
 msgid "Sulu- \"Captain!  Yagabandaghangrapl, brachriigringlanbla!\""
 msgstr "????- \"???????!  ?????????, ????????, ???????-?????????!\""
 
-#: src/planets.c:507
+#: src/sst.py:4652
 msgid "Lt. Uhura-  \"Graaeek!  Graaeek!\""
 msgstr "??. ?????- \"??????!  ????!\""
 
-#: src/planets.c:509
+#: src/sst.py:4654
 msgid "Spock-  \"Fascinating!  . . . All humans aboard"
 msgstr "????- \"??????????!  . . . ??? ???? ?? ?????"
 
-#: src/planets.c:510
+#: src/sst.py:4655
 msgid "  have apparently been transformed into strange mutations."
 msgstr "  ???? ??????????? ?????-?? ???????? ???????."
 
-#: src/planets.c:511
+#: src/sst.py:4656
 msgid "  Vulcans do not seem to be affected."
 msgstr "  ?????????, ??????, ?????? ?? ??????????."
 
-#: src/planets.c:513
+#: src/sst.py:4658
 msgid "Kirk-  \"Raauch!  Raauch!\""
 msgstr "????- \"???! ???! ???-??!"
 
-#: src/planets.c:519
+#: src/sst.py:4663
 msgid "Sulu- \"Captain!  It's   --WHAT?!?!\""
 msgstr "????- \"???????!  ??   --??????!\""
 
-#: src/planets.c:521
+#: src/sst.py:4665
 msgid "Spock-  \"I believe the word is"
 msgstr "????- \"??????, ?????"
 
-#: src/planets.c:522
+#: src/sst.py:4666
 msgid " *ASTONISHING*"
 msgstr " *???????????*"
 
-#: src/planets.c:523
+#: src/sst.py:4667
 msgid " Mr. Sulu."
 msgstr " ?????? ????."
 
-#: src/planets.c:528
+#: src/sst.py:4672
 msgid "  Captain, our quadrant is now infested with"
 msgstr "  ???????, ??? ???????? ?????? ???? ?????"
 
-#: src/planets.c:529
+#: src/sst.py:4673
 msgid " - - - - - -  *THINGS*."
 msgstr " - - - - - -  *??????*."
 
-#: src/planets.c:531
+#: src/sst.py:4675
 msgid "  I have no logical explanation.\""
 msgstr "  ? ???? ??? ????????? ??????????.\""
 
-#: src/planets.c:534
+#: src/sst.py:4677
 msgid "Sulu- \"Captain!  The Death Ray is creating tribbles!\""
 msgstr "????- \"???????!   ??? ?????? ?????-?? ??????? ????????!\""
 
-#: src/planets.c:536
+#: src/sst.py:4679
 msgid "Scotty-  \"There are so many tribbles down here"
 msgstr "??????-  \"??? ??????? ???? ???????? ??????"
 
-#: src/planets.c:537
+#: src/sst.py:4680
 msgid "  in Engineering, we can't move for 'em, Captain.\""
 msgstr "  ? ??????????? ??????, ??? ?? ?? ????? ? ???? ???????????, ???????.\""
 
-#: src/reports.c:11
-#, c-format
-msgid "Starbase in %s is currently under Commander attack."
-msgstr "???? ? %s ????????? ?????????? ?????????."
+#: src/sst.py:4690
+#, python-format
+msgid "Starbase in Quadrant %s is currently under Commander attack."
+msgstr "???? ? ????????? %s ????????? ?????????? ?????????."
 
-#: src/reports.c:13 src/reports.c:19
-#, c-format
+#: src/sst.py:4691 src/sst.py:4694
+#, python-format
 msgid "It can hold out until Stardate %d."
 msgstr "??? ?????? ???????????? ?? ???? %d.\""
 
-#: src/reports.c:17
-#, c-format
-msgid "Starbase in %s is under Super-commander attack."
-msgstr "???? ? %s ????????? ????-????? ?????????."
+#: src/sst.py:4693
+#, python-format
+msgid "Starbase in Quadrant %s is under Super-commander attack."
+msgstr "???? ? ????????? %s ????????? ????-????? ?????????."
 
-#: src/reports.c:22
+#: src/sst.py:4696
 msgid "No Starbase is currently under attack."
 msgstr "???? ?????? ?? ?????????."
 
-#: src/reports.c:26
-#, c-format
-msgid "Base in %i - %i attacked by C. Alive until %.1f"
-msgstr "???? ? %i - %i ????????? C. ??????? ?? %.1f"
+#: src/sst.py:4699
+#, python-format
+msgid "Base in %s attacked by C. Alive until %.1f"
+msgstr "???? ? %s ????????? C. ??????? ?? %.1f"
 
-#: src/reports.c:28
-#, c-format
-msgid "Base in %i - %i attacked by S. Alive until %.1f"
-msgstr "???? ? %i - %i ????????? S. ??????? ?? %.1f"
+#: src/sst.py:4701
+#, python-format
+msgid "Base in %s attacked by S. Alive until %.1f"
+msgstr "???? ? %s ????????? S. ??????? ?? %.1f"
 
-#: src/reports.c:40
+#: src/sst.py:4707
 msgid "thawed "
 msgstr "??????????? "
 
-#: src/reports.c:42
-msgid "short"
-msgstr "????????"
-
-#: src/reports.c:43
-msgid "medium"
-msgstr "???????"
-
-#: src/reports.c:44
-msgid "long"
-msgstr "???????"
-
-#: src/reports.c:45
-msgid "unknown length"
-msgstr ""
-
-#: src/reports.c:48
+#: src/sst.py:4709
 msgid "novice"
 msgstr "???????"
 
-#: src/reports.c:49
+#: src/sst.py:4709
 msgid "fair"
 msgstr "???????"
 
-#: src/reports.c:50
+#: src/sst.py:4710
 msgid "good"
 msgstr "??????"
 
-#: src/reports.c:51
+#: src/sst.py:4710
 msgid "expert"
 msgstr "??????????"
 
-#: src/reports.c:52
+#: src/sst.py:4710
 msgid "emeritus"
 msgstr "????????? ???????"
 
-#: src/reports.c:53
-msgid "skilled"
-msgstr ""
-
-#: src/reports.c:56
-#, c-format
+#: src/sst.py:4711
+#, python-format
 msgid "You %s a %s%s %s game."
 msgstr "?? %s ???? %s%s %s."
 
-#: src/reports.c:57
+#: src/sst.py:4711
 msgid "were playing"
 msgstr "???????"
 
-#: src/reports.c:57
+#: src/sst.py:4711
 msgid "are playing"
 msgstr "???????"
 
-#: src/reports.c:59
+#: src/sst.py:4713
 msgid "No plaque is allowed."
 msgstr "??????? ?? ?????."
 
-#: src/reports.c:61
-#, c-format
+#: src/sst.py:4715
+#, python-format
 msgid "This is tournament game %d."
 msgstr "??? ????????? ???? ????? %d."
 
-#: src/reports.c:62
-#, c-format
+#: src/sst.py:4716
+#, python-format
 msgid "Your secret password is \"%s\""
 msgstr "??? ?????? \"%s\""
 
-#: src/reports.c:63
-#, c-format
+#: src/sst.py:4717
+#, python-format
 msgid "%d of %d Klingons have been killed"
 msgstr "%d ?? %d ????????? ?????"
 
-#: src/reports.c:67
-#, c-format
+#: src/sst.py:4720
+#, python-format
 msgid ", including %d Commander%s."
 msgstr ", ??????? %d ?????????%s."
 
-#: src/reports.c:67 src/reports.c:97 src/reports.c:106 src/reports.c:129
+#: src/sst.py:4720 src/sst.py:4744 src/sst.py:4753 src/sst.py:4771
 msgid "s"
 msgstr "(??)"
 
-#: src/reports.c:69
+#: src/sst.py:4722
 msgid ", but no Commanders."
 msgstr ", ?? ??? ??????????."
 
-#: src/reports.c:73
-#, c-format
+#: src/sst.py:4726
+#, python-format
 msgid "The Super Commander has %sbeen destroyed."
 msgstr "????-??? %s??? ?????????."
 
-#: src/reports.c:74
+#: src/sst.py:4726
 msgid "not "
 msgstr "?? "
 
-#: src/reports.c:76
+#: src/sst.py:4728
 msgid "There "
 msgstr " "
 
-#: src/reports.c:78
+#: src/sst.py:4730
 msgid "has been 1 base"
 msgstr "1 ???"
 
-#: src/reports.c:80
-#, c-format
+#: src/sst.py:4732
+#, python-format
 msgid "have been %d bases"
 msgstr "%d ???"
 
-#: src/reports.c:82
-#, c-format
+#: src/sst.py:4733
+#, python-format
 msgid " destroyed, %d remaining."
 msgstr " ??????????, %d ????????."
 
-#: src/reports.c:85
-#, c-format
+#: src/sst.py:4735
+#, python-format
 msgid "There are %d bases."
 msgstr "???????? %d ???."
 
-#: src/reports.c:93
-#, c-format
+#: src/sst.py:4742
+#, python-format
 msgid "%d casualt%s suffered so far."
 msgstr "%d ????????????%s ??? ??????.\""
 
-#: src/reports.c:96
-#, c-format
+#: src/sst.py:4744
+#, python-format
 msgid "There were %d call%s for help."
 msgstr "?? ??????? %d ?????%s ????."
 
-#: src/reports.c:99
+#: src/sst.py:4746
 msgid "You have "
 msgstr "? ??? "
 
-#: src/reports.c:103
+#: src/sst.py:4750
 msgid "no"
 msgstr "???????????"
 
-#: src/reports.c:104
+#: src/sst.py:4751
 msgid " deep space probe"
 msgstr " ???????????? ??????????? ??????"
 
-#: src/reports.c:112
+#: src/sst.py:4757
 msgid "An armed deep space probe is in "
 msgstr "???????????? ??????????? ?????? ? ??????? ??????? ?????? ? "
 
-#: src/reports.c:114
+#: src/sst.py:4759
 msgid "A deep space probe is in "
 msgstr "???????????? ??????????? ?????? ?????? ? "
 
-#: src/reports.c:120
+#: src/sst.py:4763
 msgid "Dilithium crystals aboard ship... not yet used."
 msgstr "????????? ??????? ?? ?????... ???? ?? ??????????????."
 
-#: src/reports.c:128
-#, c-format
+#: src/sst.py:4770
+#, python-format
 msgid "Dilithium crystals have been used %d time%s."
 msgstr "????????? ??????? ?????????????? %d ???%s."
 
-#: src/reports.c:142
+#: src/sst.py:4780
 msgid "LONG-RANGE SENSORS DAMAGED."
 msgstr "??????? ???????? ?????? ???????."
 
-#: src/reports.c:145
+#: src/sst.py:4783
 msgid "Starbase's long-range scan"
 msgstr "??????? ????? ? ????"
 
-#: src/reports.c:148
+#: src/sst.py:4785
 msgid "Long-range scan"
 msgstr "??????? ?????"
 
-#: src/reports.c:181
+#: src/sst.py:4812
 msgid "\tDEVICE\t\t\t-REPAIR TIMES-"
 msgstr "\t??????????\t\t-????? ???????-"
 
-#: src/reports.c:182
+#: src/sst.py:4813
 msgid "\t\t\tIN FLIGHT\t\tDOCKED"
 msgstr "\t\t\t? ??????\t\t? ?????"
 
-#: src/reports.c:192
+#: src/sst.py:4819
 msgid "All devices functional."
 msgstr "??? ?????????? ? ???????."
 
-#: src/reports.c:219
+#: src/sst.py:4839
 msgid "Spock-  \"I revised the Star Chart from the starbase's records.\""
 msgstr "????- \"? ??????? ???????? ????? ?? ??????? ? ????.\""
 
-#: src/reports.c:223
+#: src/sst.py:4841
 msgid "       STAR CHART FOR THE KNOWN GALAXY"
 msgstr "     ???????? ????? ????????????? ????????"
 
-#: src/reports.c:225
-#, c-format
+#: src/sst.py:4843
+#, python-format
 msgid "(Last surveillance update %d stardates ago)."
 msgstr "(????????? ?????????? ???? %d ???? ?????)."
 
-#: src/reports.c:286
+#: src/sst.py:4879
 msgid "Stardate"
 msgstr "?????"
 
-#: src/reports.c:286
-#, c-format
+#: src/sst.py:4879
+#, python-format
 msgid "%.1f, Time Left %.2f"
 msgstr "%.1f, ???????? %.2f"
 
-#: src/reports.c:293
-msgid "RED"
-msgstr "???????"
-
-#: src/reports.c:294
-msgid "GREEN"
-msgstr "???????"
-
-#: src/reports.c:295
-msgid "YELLOW"
-msgstr "??????"
-
-#: src/reports.c:296
-msgid "DOCKED"
-msgstr "????????"
-
-#: src/reports.c:297
-msgid "DEAD"
-msgstr "?????"
-
-#: src/reports.c:302
+#: src/sst.py:4884
 msgid "Condition"
 msgstr "?????????"
 
-#: src/reports.c:302
-#, c-format
+#: src/sst.py:4884
+#, python-format
 msgid "%s, %i DAMAGES"
 msgstr "%s, %i ???????????"
 
-#: src/reports.c:306
+#: src/sst.py:4887
 msgid "Position"
 msgstr "?????????"
 
-#: src/reports.c:313
-#, c-format
+#: src/sst.py:4891
 msgid "DAMAGED, Base provides"
 msgstr "???????, ???? ????????????"
 
-#: src/reports.c:315
-#, c-format
+#: src/sst.py:4893
+#, python-format
 msgid "DAMAGED, reserves=%4.2f"
 msgstr "???????, ????????=%4.2f"
 
-#: src/reports.c:318
-#, c-format
+#: src/sst.py:4895
 msgid "ACTIVE"
 msgstr "????????"
 
-#: src/reports.c:319 src/setup.c:159
+#: src/sst.py:4896 src/sst.py:5202
 msgid "Life Support"
 msgstr "??????????"
 
-#: src/reports.c:323
+#: src/sst.py:4898
 msgid "Warp Factor"
 msgstr "????????"
 
-#: src/reports.c:327
+#: src/sst.py:4902
+msgid " (have crystals)"
+msgstr " (???? ?????????)"
+
+#: src/sst.py:4903
 msgid "Energy"
 msgstr "???????"
 
-#: src/reports.c:329
-msgid " (have crystals)"
-msgstr " (???? ?????????)"
-
-#: src/reports.c:333
+#: src/sst.py:4905
 msgid "Torpedoes"
 msgstr "???????"
 
-#: src/reports.c:338
+#: src/sst.py:4908
 msgid "DAMAGED,"
 msgstr "???????,"
 
-#: src/reports.c:340
+#: src/sst.py:4910
 msgid "UP,"
 msgstr "???????,"
 
-#: src/reports.c:342
+#: src/sst.py:4912
 msgid "DOWN,"
 msgstr "?????,"
 
-#: src/reports.c:343
-#, c-format
+#: src/sst.py:4913
+#, python-format
 msgid " %d%% %.1f units"
 msgstr " %d%% %.1f ??????"
 
-#: src/reports.c:345 src/setup.c:162
+#: src/sst.py:4915 src/sst.py:5205
 msgid "Shields"
 msgstr "??????"
 
-#: src/reports.c:349
+#: src/sst.py:4917
 msgid "Klingons Left"
 msgstr "?????????"
 
-#: src/reports.c:356
+#: src/sst.py:4923
 msgid "Major system"
 msgstr "???????? ????"
 
-#: src/reports.c:358
+#: src/sst.py:4925
 msgid "Sector is uninhabited"
 msgstr "?????? ?????????"
 
-#: src/reports.c:376
+#: src/sst.py:4933
 msgid "Information desired? "
 msgstr "????? ?????????? ???????? "
 
-#: src/reports.c:382
+#: src/sst.py:4938
 msgid "UNRECOGNIZED REQUEST. Legal requests are:"
 msgstr "?????? ?? ????. ????????? ???????:"
 
-#: src/reports.c:398
+#: src/sst.py:4948
 msgid "   S.R. SENSORS DAMAGED!"
 msgstr "   ??????? ?.?. ???????!"
 
-#: src/reports.c:402
+#: src/sst.py:4951
 msgid "  [Using Base's sensors]"
 msgstr "  [???????????? ??????? ????]"
 
-#: src/reports.c:405
+#: src/sst.py:4953
 msgid "     Short-range scan"
 msgstr "       ??????? ?????"
 
-#: src/reports.c:432
+#: src/sst.py:4973
 msgid "COMPUTER DAMAGED, USE A POCKET CALCULATOR."
 msgstr "????????? ??????, ?????????????? ?????????????."
 
-#: src/reports.c:439
+#: src/sst.py:4979
 msgid "Destination quadrant and/or sector? "
 msgstr "???????? ?????????? ?/??? ??????? "
 
-#: src/reports.c:479
+#: src/sst.py:5010
 msgid "Answer \"no\" if you don't know the value:"
 msgstr "????????? \"no\" ???? ?? ??????:"
 
-#: src/reports.c:482
+#: src/sst.py:5013
 msgid "Time or arrival date? "
 msgstr "????? ????????? "
 
-#: src/reports.c:489
+#: src/sst.py:5020
 msgid "We'll never make it, sir."
 msgstr "????? ?? ?????????, ???."
 
-#: src/reports.c:498
+#: src/sst.py:5027
 msgid "Warp factor? "
 msgstr "????????? "
 
-#: src/reports.c:508
+#: src/sst.py:5035
 msgid "Captain, certainly you can give me one of these."
 msgstr "???????, ?? ????? ????? ??????? ???? ?? ????????."
 
-#: src/reports.c:515
+#: src/sst.py:5041
 msgid "Insufficient energy, sir."
 msgstr "?? ??????? ???????, ???."
 
-#: src/reports.c:519 src/reports.c:561
+#: src/sst.py:5045 src/sst.py:5078
 msgid "New warp factor to try? "
 msgstr "??????????? ?????? ????????? "
 
-#: src/reports.c:535
+#: src/sst.py:5057
 msgid "But if you lower your shields,"
 msgstr "?? ???? ?? ??????? ??????,"
 
-#: src/reports.c:536
+#: src/sst.py:5058
 msgid "remaining"
 msgstr "???????"
 
-#: src/reports.c:540
+#: src/sst.py:5061
 msgid "Remaining"
 msgstr "???????"
 
-#: src/reports.c:541
-#, c-format
+#: src/sst.py:5062
+#, python-format
 msgid " energy will be %.2f."
 msgstr " ??????? ????? %.2f."
 
-#: src/reports.c:543
-#, c-format
+#: src/sst.py:5064
+#, python-format
 msgid "And we will arrive at stardate %.2f."
 msgstr "? ?? ???????? %.2f ?????."
 
-#: src/reports.c:547
+#: src/sst.py:5066
 msgid "Any warp speed is adequate."
 msgstr "?? ????? ???????? ??????."
 
-#: src/reports.c:549
-#, c-format
+#: src/sst.py:5068
+#, python-format
 msgid "Minimum warp needed is %.2f,"
 msgstr "??????????? ??????????? ???????? - %.2f,"
 
-#: src/reports.c:550
-#, c-format
+#: src/sst.py:5069
+#, python-format
 msgid "and we will arrive at stardate %.2f."
 msgstr "? ?? ???????? %.2f ?????."
 
-#: src/reports.c:554
+#: src/sst.py:5071
 msgid "Unfortunately, the Federation will be destroyed by then."
 msgstr "? ?????????, ????????? ? ???? ??????? ????? ??? ??????????."
 
-#: src/reports.c:556
+#: src/sst.py:5073
 msgid "You'll be taking risks at that speed, Captain"
 msgstr "?? ????? ???????? ?????? ?????????, ???????"
 
-#: src/reports.c:560
+#: src/sst.py:5077
 msgid "The starbase there will be destroyed by then."
 msgstr "???? ? ???? ??????? ??? ????? ??????????."
 
-#: src/reports.c:612
-msgid "Direction? "
-msgstr "???????????? "
-
-#: src/setup.c:15
+#: src/sst.py:5095
 msgid "-SUPER- STAR TREK"
 msgstr "-?????- ???????? ????"
 
-#: src/setup.c:18
-msgid "Latest update-21 Sept 78"
-msgstr "????????? ?????????? - 21 ??? 78"
-
-#: src/setup.c:33 src/setup.c:66
+#: src/sst.py:5107 src/sst.py:5128
 msgid "File name: "
 msgstr "??? ?????: "
 
-#: src/setup.c:46
-msgid "Can't freeze game as file "
-msgstr "?? ???? ????????? ???? ? "
+#: src/sst.py:5118
+#, python-format
+msgid "Can't freeze game as file %s"
+msgstr "?? ???? ????????? ???? ? ???? %s"
 
-#: src/setup.c:78
-msgid "Can't find game file "
-msgstr "?? ???? ????? ???? "
+#: src/sst.py:5139
+#, python-format
+msgid "Can't thaw game in %s"
+msgstr "?? ???? ????????? ???? ?? ????? %s"
 
-#: src/setup.c:85
-msgid "Game file format is bad, should begin with "
-msgstr "???? ? ????? ????????, ?? ?????? ??? ?????????? ? "
-
-#: src/setup.c:108
+#: src/sst.py:5153
 msgid "Andoria (Fesoan)"
 msgstr ""
 
-#: src/setup.c:109
+#: src/sst.py:5154
 msgid "Tellar Prime (Miracht)"
 msgstr ""
 
-#: src/setup.c:110
+#: src/sst.py:5155
 msgid "Vulcan (T'Khasi)"
 msgstr ""
 
-#: src/setup.c:111
+#: src/sst.py:5156
 msgid "Medusa"
 msgstr "??????"
 
-#: src/setup.c:112
+#: src/sst.py:5157
 msgid "Argelius II (Nelphia)"
 msgstr ""
 
-#: src/setup.c:113
+#: src/sst.py:5158
 msgid "Ardana"
 msgstr "??????"
 
-#: src/setup.c:114
+#: src/sst.py:5159
 msgid "Catulla (Cendo-Prae)"
 msgstr ""
 
-#: src/setup.c:115
+#: src/sst.py:5160
 msgid "Gideon"
 msgstr "??????"
 
-#: src/setup.c:116
+#: src/sst.py:5161
 msgid "Aldebaran III"
 msgstr "?????????? 3"
 
-#: src/setup.c:117
+#: src/sst.py:5162
 msgid "Alpha Majoris I"
 msgstr ""
 
-#: src/setup.c:118
+#: src/sst.py:5163
 msgid "Altair IV"
 msgstr "??????? 4"
 
-#: src/setup.c:119
+#: src/sst.py:5164
 msgid "Ariannus"
 msgstr ""
 
-#: src/setup.c:120
+#: src/sst.py:5165
 msgid "Benecia"
 msgstr ""
 
-#: src/setup.c:121
+#: src/sst.py:5166
 msgid "Beta Niobe I (Sarpeidon)"
 msgstr ""
 
-#: src/setup.c:122
+#: src/sst.py:5167
 msgid "Alpha Carinae II"
 msgstr ""
 
-#: src/setup.c:123
+#: src/sst.py:5168
 msgid "Capella IV (Kohath)"
 msgstr ""
 
-#: src/setup.c:124
+#: src/sst.py:5169
 msgid "Daran V"
 msgstr ""
 
-#: src/setup.c:125
+#: src/sst.py:5170
 msgid "Deneb II"
 msgstr ""
 
-#: src/setup.c:126
+#: src/sst.py:5171
 msgid "Eminiar VII"
 msgstr ""
 
-#: src/setup.c:127
+#: src/sst.py:5172
 msgid "Gamma Canaris IV"
 msgstr ""
 
-#: src/setup.c:128
+#: src/sst.py:5173
 msgid "Gamma Tranguli VI (Vaalel)"
 msgstr ""
 
-#: src/setup.c:129
+#: src/sst.py:5174
 msgid "Ingraham B"
 msgstr ""
 
-#: src/setup.c:130
+#: src/sst.py:5175
 msgid "Janus IV"
 msgstr ""
 
-#: src/setup.c:131
+#: src/sst.py:5176
 msgid "Makus III"
 msgstr ""
 
-#: src/setup.c:132
+#: src/sst.py:5177
 msgid "Marcos XII"
 msgstr ""
 
-#: src/setup.c:133
+#: src/sst.py:5178
 msgid "Omega IV"
 msgstr "????? 4"
 
-#: src/setup.c:134
+#: src/sst.py:5179
 msgid "Regulus V"
 msgstr ""
 
-#: src/setup.c:135
+#: src/sst.py:5180
 msgid "Deneva"
 msgstr ""
 
-#: src/setup.c:137
+#: src/sst.py:5182
 msgid "Rigel II"
 msgstr ""
 
-#: src/setup.c:138
+#: src/sst.py:5183
 msgid "Beta III"
 msgstr "???? 3"
 
-#: src/setup.c:139
+#: src/sst.py:5184
 msgid "Triacus"
 msgstr ""
 
-#: src/setup.c:140
+#: src/sst.py:5185
 msgid "Exo III"
 msgstr ""
 
-#: src/setup.c:143
-msgid "Hansen's Planet"
-msgstr ""
-
-#: src/setup.c:144
-msgid "Taurus IV"
-msgstr ""
-
-#: src/setup.c:145
-msgid "Antos IV (Doraphane)"
-msgstr ""
-
-#: src/setup.c:146
-msgid "Izar"
-msgstr ""
-
-#: src/setup.c:147
-msgid "Tiburon"
-msgstr ""
-
-#: src/setup.c:148
-msgid "Merak II"
-msgstr ""
-
-#: src/setup.c:149
-msgid "Coridan (Desotriana)"
-msgstr ""
-
-#: src/setup.c:150
-msgid "Iotia"
-msgstr "?????"
-
-#: src/setup.c:155
+#: src/sst.py:5198
 msgid "S. R. Sensors"
 msgstr "??????? ?. ?."
 
-#: src/setup.c:156
+#: src/sst.py:5199
 msgid "L. R. Sensors"
 msgstr "??????? ?. ?."
 
-#: src/setup.c:157
+#: src/sst.py:5200
 msgid "Phasers"
 msgstr "??????"
 
-#: src/setup.c:158
+#: src/sst.py:5201
 msgid "Photon Tubes"
 msgstr "???????? ?????"
 
-#: src/setup.c:160
+#: src/sst.py:5203
 msgid "Warp Engines"
 msgstr "????????? ????"
 
-#: src/setup.c:161
+#: src/sst.py:5204
 msgid "Impulse Engines"
 msgstr "?????????? ????"
 
-#: src/setup.c:163
+#: src/sst.py:5206
 msgid "Subspace Radio"
 msgstr "????????? ?????"
 
-#: src/setup.c:164
+#: src/sst.py:5207
 msgid "Shuttle Craft"
 msgstr "??????"
 
-#: src/setup.c:165
+#: src/sst.py:5208
 msgid "Computer"
 msgstr "?????????"
 
-#: src/setup.c:166
+#: src/sst.py:5209
 msgid "Navigation System"
 msgstr "???? ?????????"
 
-#: src/setup.c:167
+#: src/sst.py:5210
 msgid "Transporter"
 msgstr "???????????"
 
-#: src/setup.c:168
+#: src/sst.py:5211
 msgid "Shield Control"
 msgstr "?????? ???????"
 
-#: src/setup.c:169
+#: src/sst.py:5212
 msgid "Death Ray"
 msgstr "??? ??????"
 
-#: src/setup.c:170
+#: src/sst.py:5213
 msgid "D. S. Probe"
 msgstr "?. ?. ??????"
 
-#: src/setup.c:375
-#, c-format
+#: src/sst.py:5375
+#, python-format
 msgid "It is stardate %d. The Federation is being attacked by"
 msgstr "??????? %d ?????. ????????? ?????????"
 
-#: src/setup.c:377
+#: src/sst.py:5376
 msgid "a deadly Klingon invasion force. As captain of the United"
 msgstr "???????????? ???????????? ??????????. ??? ???????"
 
-#: src/setup.c:378
+#: src/sst.py:5377
 msgid "Starship U.S.S. Enterprise, it is your mission to seek out"
 msgstr "?????????? ??????????, ?? ?????? ?????"
 
-#: src/setup.c:379
-#, c-format
+#: src/sst.py:5378
+#, python-format
 msgid "and destroy this invasion force of %d battle cruisers."
 msgstr "? ?????????? ??? ?????????? ?????? ? ??????? %d ?????? ?????????."
 
-#: src/setup.c:381
-#, c-format
+#: src/sst.py:5379
+#, python-format
 msgid "You have an initial allotment of %d stardates to complete"
 msgstr "? ??? ???? %d ???? ????? ?????????"
 
-#: src/setup.c:382
+#: src/sst.py:5380
 msgid "your mission.  As you proceed you may be given more time."
 msgstr "??? ??????.  ?? ???? ???? ??? ????? ???? ??? ???????."
 
-#: src/setup.c:384
-#, c-format
+#: src/sst.py:5382
+#, python-format
 msgid "You will have %d supporting starbases."
 msgstr "? ??? ????? %d ???."
 
-#: src/setup.c:385
+#: src/sst.py:5383
 msgid "Starbase locations-  "
 msgstr "?????????? ???-  "
 
-#: src/setup.c:388
-#, c-format
+#: src/sst.py:5385
+#, python-format
 msgid "Stardate %d."
 msgstr "????? %d."
 
-#: src/setup.c:390
-#, c-format
+#: src/sst.py:5387
+#, python-format
 msgid "%d Klingons."
 msgstr "%d ?????????."
 
-#: src/setup.c:391
+#: src/sst.py:5388
 msgid "An unknown number of Romulans."
 msgstr "????????? ???????."
 
-#: src/setup.c:393
+#: src/sst.py:5390
 msgid "And one (GULP) Super-Commander."
 msgstr "? ???? (??!) ????-??? ?????????."
 
-#: src/setup.c:394
-#, c-format
+#: src/sst.py:5391
+#, python-format
 msgid "%d stardates."
 msgstr "%d ????."
 
-#: src/setup.c:395
-#, c-format
+#: src/sst.py:5392
+#, python-format
 msgid "%d starbases in "
 msgstr "%d ??? ? "
 
-#: src/setup.c:402
-msgid "The Enterprise is currently in "
-msgstr "?????????? ?????? ? "
+#: src/sst.py:5397
+#, python-format
+msgid "The Enterprise is currently in Quadrant %s"
+msgstr "?????????? ?????? ? ????????? %s"
 
-#: src/setup.c:407
+#: src/sst.py:5398
+#, python-format
+msgid " Sector %s"
+msgstr " ?????? %s"
+
+#: src/sst.py:5400
 msgid "Good Luck!"
 msgstr "?????!"
 
-#: src/setup.c:409
+#: src/sst.py:5402
 msgid "  YOU'LL NEED IT."
 msgstr "  ??? ??? ???????????."
 
-#: src/setup.c:427
+#: src/sst.py:5417
 msgid "Would you like a regular, tournament, or saved game? "
 msgstr "?????? ??????? (r), ????????? (t), ??? ??????????? (s) ????? "
 
-#: src/setup.c:433
+#: src/sst.py:5421
 msgid "Type in tournament number-"
 msgstr "??????? ????? ???????-"
 
-#: src/setup.c:458 src/setup.c:482 src/setup.c:514
+#: src/sst.py:5443 src/sst.py:5489
+#, python-format
+msgid "What is \"%s\"?"
+msgstr "??? ?? \"%s\"?"
+
+#: src/sst.py:5464
 msgid "What is \""
 msgstr "??? ?? \""
 
-#: src/setup.c:490
+#: src/sst.py:5470
 msgid "Would you like a Short, Medium, or Long game? "
 msgstr "?????? ???????? (s), ??????? (m), ??? ??????? (l) ????? "
 
-#: src/setup.c:492
+#: src/sst.py:5472
 msgid "Are you a Novice, Fair, Good, Expert, or Emeritus player? "
 msgstr ""
 "?? ??????? (n), ??????? (f), ?????? (g), ?????????? (e), ??? ????????? (em)? "
 
-#: src/setup.c:498
+#: src/sst.py:5476
 msgid "Choose your game style (or just press enter): "
 msgstr "???????? ????? ???? (??? ??????? ????): "
 
-#: src/setup.c:679
+#: src/sst.py:5596
 msgid "LT. Uhura- \"Captain, an urgent message."
 msgstr "??. ?????- \"???????, ??????? ?????????."
 
-#: src/setup.c:680
+#: src/sst.py:5597
 msgid "  I'll put it on audio.\"  CLICK"
 msgstr "  ? ?????? ??? ?? ????????????????.\"  ????"
 
-#: src/setup.c:682
+#: src/sst.py:5599
 msgid "INTRUDER! YOU HAVE VIOLATED THE ROMULAN NEUTRAL ZONE."
 msgstr "?????! ?? ??????? ??????? ?????????? ???????."
 
-#: src/setup.c:683
+#: src/sst.py:5600
 msgid "LEAVE AT ONCE, OR YOU WILL BE DESTROYED!"
 msgstr "?????? ??????????, ??? ?????? ?????????!"
 
-#: src/setup.c:700
+#: src/sst.py:5607
 msgid "Mr. Spock- \"Captain, this is most unusual."
 msgstr "?????? ????- \"???????, ??? ???-?? ????? ?????????."
 
-#: src/setup.c:701
+#: src/sst.py:5608
 msgid "    Please examine your short-range scan.\""
 msgstr "    ?????????? ?????????? ?????????? ???????? ????????????.\""
 
-#: src/setup.c:797
+#: src/sst.py:5655
 msgid "Please type in a secret password- "
 msgstr "?????????? ???????? ??????- "
 
-#: src/sst.c:292
+#: src/sst.py:5711
 msgid "LEGAL COMMANDS ARE:"
 msgstr "????????? ???????:"
 
-#: src/sst.c:317
+#: src/sst.py:5727
 msgid "Help on what command? "
 msgstr "??????? ?? ????? ???????? "
 
-#: src/sst.c:349
+#: src/sst.py:5746
 msgid "Spock-  \"Captain, that information is missing from the"
 msgstr "????- \"???????, ????? ?????????? ??? ?"
 
-#: src/sst.c:350
+#: src/sst.py:5747
 msgid "   computer. You need to find "
 msgstr "   ??????????. ??? ???? ????? "
 
-#: src/sst.c:352
+#: src/sst.py:5749
 msgid " and put it in the"
 msgstr "? ????????? ??? ?"
 
-#: src/sst.c:353
+#: src/sst.py:5750
 msgid "   current directory or to "
 msgstr "   ??????? ??????? ??? ? "
 
-#: src/sst.c:364
+#: src/sst.py:5759
 msgid "Spock- \"Captain, there is no information on that command.\""
 msgstr "????- \"???????, ?? ??? ??????? ??? ??????????.\""
 
-#: src/sst.c:378
+#: src/sst.py:5767
 msgid "Spock- \"Captain, I've found the following information:\""
 msgstr "????- \"???????, ? ????? ???-????? ??????????:\""
 
-#: src/sst.c:552
+#: src/sst.py:5893
 msgid "WARNING--Saved games produce no plaques!"
 msgstr "??????????????--??????????? ???? ?? ???? ???????!"
 
-#: src/sst.c:684
-msgid "Do you want your score recorded?"
-msgstr "?????? ???????? ???? ????? "
-
-#: src/sst.c:690
-msgid "Do you want to play again? "
-msgstr "?????? ??????? ?????? "
-
-#: src/sst.c:695
-msgid "May the Great Bird of the Galaxy roost upon your home planet."
-msgstr "? ????? ??????? ????? ????????? ??????? ?? ???? ???????."
-
-#: src/sst.c:707
+#: src/sst.py:5934
 msgid "Romulan"
 msgstr "???????"
 
-#: src/sst.c:708
+#: src/sst.py:5935
 msgid "Klingon"
 msgstr "???????"
 
-#: src/sst.c:709
+#: src/sst.py:5936
 msgid "Commander"
 msgstr "????????"
 
-#: src/sst.c:710
+#: src/sst.py:5937
 msgid "Super-commander"
 msgstr "????-???"
 
-#: src/sst.c:711
+#: src/sst.py:5938
 msgid "Star"
 msgstr "??????"
 
-#: src/sst.c:712
+#: src/sst.py:5939
 msgid "Planet"
 msgstr "???????"
 
-#: src/sst.c:713
+#: src/sst.py:5940
 msgid "Starbase"
 msgstr "????"
 
-#: src/sst.c:714
+#: src/sst.py:5941
 msgid "Black hole"
 msgstr "?????? ????"
 
-#: src/sst.c:715
+#: src/sst.py:5942
 msgid "Tholian"
 msgstr "??????"
 
-#: src/sst.c:716
+#: src/sst.py:5943
 msgid "Tholian web"
 msgstr "?????????? ????"
 
-#: src/sst.c:717
+#: src/sst.py:5944
 msgid "Stranger"
 msgstr "????????"
 
-#: src/sst.c:718
+#: src/sst.py:5945
 msgid "Inhabited World"
 msgstr "????????? ???"
 
-#: src/sst.c:730
+#: src/sst.py:5954
+msgid " at "
+msgstr " ? "
+
+#: src/sst.py:5956
 msgid "Quadrant "
 msgstr "???????? "
 
-#: src/sst.c:732
+#: src/sst.py:5958
 msgid "Sector "
 msgstr "?????? "
 
-#: src/sst.c:743
-msgid " at "
-msgstr " ? "
-
-#: src/sst.c:752
+#: src/sst.py:5963
 msgid "Enterprise"
 msgstr "??????????"
 
-#: src/sst.c:753
+#: src/sst.py:5963
 msgid "Faerie Queene"
 msgstr "????????? ????????"
 
-#: src/sst.c:858
+#: src/sst.py:6061
 msgid "Please answer with \"y\" or \"n\": "
 msgstr "?????????? ????????? ?? (\"y\") ??? ??? (\"n\"): "
 
-#: src/sst.c:867
+#: src/sst.py:6067
 msgid "Beg your pardon, Captain?"
 msgstr "????? ????????, ????????"
+
+#: src/sst.py:6230
+msgid "Do you want your score recorded?"
+msgstr "?????? ???????? ???? ????? "
+
+#: src/sst.py:6236
+msgid "Do you want to play again? "
+msgstr "?????? ??????? ?????? "
+
+#: src/sst.py:6240
+msgid "May the Great Bird of the Galaxy roost upon your home planet."
+msgstr "? ????? ??????? ????? ????????? ??????? ?? ???? ???????."
+
+#~ msgid " heavily damaged."
+#~ msgstr " ???????? ?????????."
+
+#~ msgid " damaged--"
+#~ msgstr " ?????????--"
+
+#~ msgid "Celebratory rallies are being held on the Klingon homeworld."
+#~ msgstr "?? ??????? ????????? ?????? ??????????? ???????."
+
+#~ msgid " maximized *********"
+#~ msgstr " ???????? *********"
+
+#~ msgid "The "
+#~ msgstr " "
+
+#~ msgid " is destroyed."
+#~ msgstr " ?????????."
+
+#~ msgid " and"
+#~ msgstr " ? "
+
+#~ msgid " dematerializes."
+#~ msgstr " ??????????????????."
+
+#~ msgid "   a planet in "
+#~ msgstr "   ??????? ? "
+
+#~ msgid " has been destroyed"
+#~ msgstr " ??????????"
+
+#~ msgid " is pulled to "
+#~ msgstr " ??????? ? "
+
+#~ msgid "   the starbase in "
+#~ msgstr "   ???? ? "
+
+#~ msgid " has been destroyed by"
+#~ msgstr " ??????????"
+
+#~ msgid "in %s.\n"
+#~ msgstr "? %s.\n"
+
+#~ msgid "[IMPORTANT ANNOUNCEMENT ARRIVING -- PRESS ENTER TO CONTINUE]"
+#~ msgstr "[????????? ?????? ????????? -- ??????? ???? ??? ???????????]"
+
+#~ msgid "short"
+#~ msgstr "????????"
+
+#~ msgid "medium"
+#~ msgstr "???????"
+
+#~ msgid "long"
+#~ msgstr "???????"
+
+#~ msgid "RED"
+#~ msgstr "???????"
+
+#~ msgid "GREEN"
+#~ msgstr "???????"
+
+#~ msgid "YELLOW"
+#~ msgstr "??????"
+
+#~ msgid "DOCKED"
+#~ msgstr "????????"
+
+#~ msgid "DEAD"
+#~ msgstr "?????"
+
+#~ msgid "Direction? "
+#~ msgstr "???????????? "
+
+#~ msgid "Latest update-21 Sept 78"
+#~ msgstr "????????? ?????????? - 21 ??? 78"
+
+#~ msgid "Game file format is bad, should begin with "
+#~ msgstr "???? ? ????? ????????, ?? ?????? ??? ?????????? ? "
+
+#~ msgid "Iotia"
+#~ msgstr "?????"



From stsp at mail.berlios.de  Fri Oct 27 21:06:09 2006
From: stsp at mail.berlios.de (stsp at BerliOS)
Date: Fri, 27 Oct 2006 21:06:09 +0200
Subject: [Sst-commit-watch] r781 - in trunk: . src
Message-ID: <200610271906.k9RJ69hS029074@sheep.berlios.de>

Author: stsp
Date: 2006-10-27 21:06:09 +0200 (Fri, 27 Oct 2006)
New Revision: 781

Modified:
   trunk/configure
   trunk/configure.ac
   trunk/src/config.h.in
Log:
Use libncursesw, not libncurses

Modified: trunk/configure
===================================================================
--- trunk/configure	2006-10-23 18:00:05 UTC (rev 780)
+++ trunk/configure	2006-10-27 19:06:09 UTC (rev 781)
@@ -5988,13 +5988,13 @@
 fi
 
 
-echo "$as_me:$LINENO: checking for newwin in -lncurses" >&5
-echo $ECHO_N "checking for newwin in -lncurses... $ECHO_C" >&6
-if test "${ac_cv_lib_ncurses_newwin+set}" = set; then
+echo "$as_me:$LINENO: checking for newwin in -lncursesw" >&5
+echo $ECHO_N "checking for newwin in -lncursesw... $ECHO_C" >&6
+if test "${ac_cv_lib_ncursesw_newwin+set}" = set; then
   echo $ECHO_N "(cached) $ECHO_C" >&6
 else
   ac_check_lib_save_LIBS=$LIBS
-LIBS="-lncurses  $LIBS"
+LIBS="-lncursesw  $LIBS"
 cat >conftest.$ac_ext <<_ACEOF
 /* confdefs.h.  */
 _ACEOF
@@ -6039,25 +6039,25 @@
   ac_status=$?
   echo "$as_me:$LINENO: \$? = $ac_status" >&5
   (exit $ac_status); }; }; then
-  ac_cv_lib_ncurses_newwin=yes
+  ac_cv_lib_ncursesw_newwin=yes
 else
   echo "$as_me: failed program was:" >&5
 sed 's/^/| /' conftest.$ac_ext >&5
 
-ac_cv_lib_ncurses_newwin=no
+ac_cv_lib_ncursesw_newwin=no
 fi
 rm -f conftest.err conftest.$ac_objext \
       conftest$ac_exeext conftest.$ac_ext
 LIBS=$ac_check_lib_save_LIBS
 fi
-echo "$as_me:$LINENO: result: $ac_cv_lib_ncurses_newwin" >&5
-echo "${ECHO_T}$ac_cv_lib_ncurses_newwin" >&6
-if test $ac_cv_lib_ncurses_newwin = yes; then
+echo "$as_me:$LINENO: result: $ac_cv_lib_ncursesw_newwin" >&5
+echo "${ECHO_T}$ac_cv_lib_ncursesw_newwin" >&6
+if test $ac_cv_lib_ncursesw_newwin = yes; then
   cat >>confdefs.h <<_ACEOF
-#define HAVE_LIBNCURSES 1
+#define HAVE_LIBNCURSESW 1
 _ACEOF
 
-  LIBS="-lncurses $LIBS"
+  LIBS="-lncursesw $LIBS"
 
 else
   { { echo "$as_me:$LINENO: error: ncurses library is missing on your system." >&5

Modified: trunk/configure.ac
===================================================================
--- trunk/configure.ac	2006-10-23 18:00:05 UTC (rev 780)
+++ trunk/configure.ac	2006-10-27 19:06:09 UTC (rev 781)
@@ -27,7 +27,7 @@
 # Checks for libraries.
 AC_CHECK_LIB(m, floor, [],
     AC_MSG_ERROR([math library is missing on your system.]))
-AC_CHECK_LIB(ncurses, newwin, [],
+AC_CHECK_LIB(ncursesw, newwin, [],
     AC_MSG_ERROR([ncurses library is missing on your system.]))
 
 # Checks for header files.

Modified: trunk/src/config.h.in
===================================================================
--- trunk/src/config.h.in	2006-10-23 18:00:05 UTC (rev 780)
+++ trunk/src/config.h.in	2006-10-27 19:06:09 UTC (rev 781)
@@ -43,8 +43,8 @@
 /* Define to 1 if you have the `m' library (-lm). */
 #undef HAVE_LIBM
 
-/* Define to 1 if you have the `ncurses' library (-lncurses). */
-#undef HAVE_LIBNCURSES
+/* Define to 1 if you have the `ncursesw' library (-lncursesw). */
+#undef HAVE_LIBNCURSESW
 
 /* Define to 1 if you have the <linux/kd.h> header file. */
 #undef HAVE_LINUX_KD_H



